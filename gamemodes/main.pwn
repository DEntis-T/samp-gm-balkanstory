/*
						______           _           
					   / ____/_  _______(_)___  ______
					  / /_  / / / / ___/ / __ \/ __  /
					 / __/ / /_/ (__) / /_/ / / / /
					/_/    \__,_/____/_/\____/_/ /_/ 					                                 
					Since 2014				 Gaming

@project -> fusion-gaming
@developer -> vasic
@version -> v1.1b
*/

#include <a_samp>

#undef MAX_PLAYERS
#define MAX_PLAYERS                 200
#undef MAX_VEHICLES
#define MAX_VEHICLES                2000

#include <streamer>
#include <Pawn.CMD>
#include <weapon-config>
#include <YSI\y_ini>
#include <YSI\y_timers>
#include <progress2>
#include <mSelection>
#include <eSelection>

// - Server Configuration
#define MAX_POKUSAJ_LOGINA                                                    1
#define I_FILE                                  			  			   	  "Korisnici/%s.ini"
#define FILE_BAN                                			   				  "Banovani/%s.ini"
#define A_FILE                                  			  				  "AdminData/%s.ini"
#define LOZINKA_STRING 														  50

#define OBICAN_ZATVOR 													  	  1
#define ALKATRAZ 															  2

#define PovecajPVarInt(%0,%1,%2)     SetPVarInt(%0, %1, GetPVarInt(%0, %1) + %2)
#define ClearChat(%0,%1)  for(new n=0; n<%1; n++) SendClientMessage(%0, -1, " ")

#define HOLDING(%0) 							((newkeys & (%0)) == (%0))
#if !defined PRESSED
#define PRESSED(%0) 						(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#endif

#define RELEASED(%0) \
(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

#define gettimeEx(%0,%1,%2) gettime(%0,%1,%2)

// - Macro Definitions > #define CNAME value || #define CNAME (expression)

#define FG_OWNER   																"Vasic"

#define FUNCTION:%0(%1) \
	forward%0(%1); \
	public%0(%1)

#define OBJECT_SLOT_MASKSUNGL              								       	0
#define OBJECT_SLOT_HEAD 		            								   	1
#define OBJECT_SLOT_BANDANA                 								   	2
#define OBJECT_SLOT_FREE                 								       	3
#define OBJECT_SLOT_RHAND                 								       	4
#define OBJECT_SLOT_LHAND                 								       	5
#define OBJECT_SLOT_HELMET                								       	6
#define OBJECT_SLOT_MASK                								       	7
#define OBJECT_SLOT_BADGE                								       	8
#define OBJECT_SLOT_WINTERCAP                               	  	 	 	   	9

// - Tempomat
new
	Float:g_fSpeedCap[ MAX_PLAYERS ] = { 0.0, ... }
;

new bool:Tempomat[MAX_PLAYERS];

// - Streljana Sistem
#define ORUZJE_PISTOL       													22
#define ORUZJE_DEAGLE       													24
#define ORUZJE_SHOTGUN      													25
#define ORUZJE_SAWNOFF      													26
#define ORUZJE_COMBAT       													27
#define ORUZJE_MP5          													29
#define ORUZJE_AK47         													30
#define ORUZJE_M4           													31
#define ORUZJE_SNIPER       													34

#define SARZER_PISTOL       													7
#define SARZER_DEAGLE       													7
#define SARZER_SHOTGUN      												   	5
#define SARZER_SAWNOFF      													7
#define SARZER_COMBAT       													7
#define SARZER_MP5          													10
#define SARZER_AK47         													15
#define SARZER_M4           													15
#define SARZER_SNIPER       													5

new Trenira[MAX_PLAYERS] = 0;
new TreniranjeProvera[MAX_PLAYERS] = 0;
new treniranjetimer[MAX_PLAYERS] = -1;
new Trenirao[MAX_PLAYERS] = 0;

// - Duel Sistem
new PozvanDuel[MAX_PLAYERS],
PozvaoGa[MAX_PLAYERS],
DuelCount[MAX_PLAYERS],
DuelHP[MAX_PLAYERS],
DuelArmor[MAX_PLAYERS],
DuelOruzje[MAX_PLAYERS];

// - Aktor Sistem
#define AKTOR_FILE																"Aktori/%d.ini"
#define MAX_AKTORI																100

enum AKTOR_INFO {

Float:aktorX,
Float:aktorY,
Float:aktorZ,
Float:aktorA,
aktorskin,
aktorime[40],
aktoranimacija,
aktorid
}

new AktorInfo[MAX_AKTORI][AKTOR_INFO], KreiraAktora[MAX_PLAYERS], Text3D:AktorLabel[sizeof(AktorInfo)];

// - Camera Editor
#define MOVE_SPEED              100.0
#define ACCEL_RATE              0.03

#define CAMERA_MODE_NONE    	0
#define CAMERA_MODE_FLY     	1

#define MOVE_FORWARD    		1
#define MOVE_BACK       		2
#define MOVE_LEFT       		3
#define MOVE_RIGHT      		4
#define MOVE_BACK_RIGHT         5

const Float:fScale = 5.0;
new MenuTimer;
new bool:IsCreating[MAX_PLAYERS] 		= false;
new bool:IsReSettingStart[MAX_PLAYERS] 	= false;
new bool:IsReSettingEnd[MAX_PLAYERS] 	= false;
new bool:SettingFirstLoc[MAX_PLAYERS] 	= false;
new bool:SettingLastLoc[MAX_PLAYERS] 	= false;
new bool:IsCamMoving[MAX_PLAYERS] 		= false;

enum noclipenumator
{
cameramode,
flyobject,
mode,
lrold,
udold,
lastmove,
Float:accelmul
}
new noclipdata[MAX_PLAYERS][noclipenumator];

enum Coordinates
{
Float:StartX,
Float:StartY,
Float:StartZ,
Float:EndX,
Float:EndY,
Float:EndZ,
Float:StartLookX,
Float:StartLookY,
Float:StartLookZ,
Float:EndLookX,
Float:EndLookY,
Float:EndLookZ,
MoveSpeed,
RotSpeed
}
new coordInfo[MAX_PLAYERS][Coordinates];

// - Posao Sistem
#define POSAO_NEMA                  								       	   	0
#define POSAO_KOSAC                                 					   		1
#define POSAO_FARMER 														   	2
#define POSAO_BUSVOZAC														   	3
#define POSAO_RUDAR                                                            	4
#define POSAO_KOMUNALAC														   	5
#define POSAO_PREVOZNIK														    6
#define POSAO_DRVOSECA                                                      	7
#define POSAO_PNAMESTAJA                                                    	8
#define POSAO_PILOT                                                             9

// - [PLATE ZA POSLOVNE FIRME] - ne koriste se za davanje plate igracu!!!
#define PLATA_FARMER                                                            44390
#define PLATA_FARMER2                                                           8200
#define PLATA_BUSVOZAC                                                          32195
#define PLATA_RUDAR                                                             35
#define PLATA_KOMUNALAC                                                         2340
#define PLATA_PREVOZNIKD                                                        61000
#define PLATA_PREVOZNIKS                                                        39832
#define PLATA_DRVOSECA                                                          28102
#define PLATA_PNAMESTAJA                                                        17455
#define PLATA_PEPSI                                                             41249
#define PLATA_VOCAR                                                             14220
#define PLATA_PPROZORA                                                          4600
#define PLATA_PREVOZNOVCA                                                       62100                                         

#define MAX_JOBS    															13

enum jobData {

jName[64],
Float:jPos[3],
jType,
jUniformSkin_Male,
jUniformSkin_Female,
Float:jUniformPos[3],
jPotrebanLevel,
jPlata,
bool:jDuplaPlata,
jPickup,
jID
};
new jobsInfos[MAX_JOBS][jobData] = {

{"Kosac Trave", 			{1971.6996, -1194.2571, 20.0250}, 	POSAO_KOSAC, 		202, 69, 	{ 1975.9514,-1185.7953,20.0354 }, 		1, 8000, false, 1},
{"Farmer", 					{-1047.9996,-1230.6726,128.6476}, 	POSAO_FARMER, 		161, 69, 	{ -1068.2177, -1205.5248, 129.7565 }, 	2, 16000, false, 2},
{"Pepsi Dostavljac", 		{930.6859, -1582.6653, 13.5593}, 	POSAO_PEPSI, 		261, 69, 	{ 932.9435, -1606.0803, 14.0430 }, 		10, 20249, false, 9},
{"Vocar", 					{1925.1461, 164.1305, 38.7571}, 	POSAO_VOCAR, 		158, 201, 	{ 1930.0143, 166.1664, 38.7571 }, 		2, 14220, false, 10},
{"Perac Prozora", 			{1832.4022, -1304.9155, 13.5978}, 	POSAO_PPROZORA, 	268, 268, 	{ 1832.4762,-1301.1835,13.6002 }, 		8, 2100, false, 11},
{"Prevoznik Novca", 		{-186.6825, 906.2031, -15.5540}, 	POSAO_PREVOZNOVCA, 	71, 69, 	{ -186.7925, 912.0958, -15.5540 }, 		15, 62100, false, 12},
{"Pilot", 					{1892.8370, -2328.5259, 13.5469}, 	POSAO_PILOT, 		61, 69, 	{ 1892.5968, -2244.0378, 13.5469 }, 	15, 37900, false, 13}

};

// Rent System (Shomy)
#define MAX_RENTS  			50
#define RENT_FILE			"/Rent/%d.ini"

enum RENT_INFO {

Float:rentX,
Float:rentY,
Float:rentZ,
Text3D:RentLabel,
rentID
}

new RentInfo[MAX_RENTS][RENT_INFO], IznajmioVozilo[MAX_PLAYERS], RentVeh[MAX_PLAYERS], RentOdabir[MAX_PLAYERS], 
RentVreme[MAX_PLAYERS], RentTimer[MAX_PLAYERS], Text3D:RentVehLabel[MAX_VEHICLES];

new spawnose[MAX_PLAYERS];
new acspam[MAX_PLAYERS];
new admingsupozoreni[MAX_PLAYERS];
new bool:FakeKill[MAX_PLAYERS][MAX_PLAYERS];
new novactd[MAX_PLAYERS];

new onlinepl;

new votetimer;
new votation;
new voteyes;
new voteno;
new votedrecently[MAX_PLAYERS];

new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
new animation[MAX_PLAYERS];

// - Sistem vatrometa
#define RocketHeight 50
new Float:rz6[MAX_LAUNCH];
new FireworkTotal;
new Fired;

// - [HOBI - RIBAR]
new StapZaPecanje[MAX_PLAYERS];
new Float:PecanjePozX[MAX_PLAYERS],Float:PecanjePozY[MAX_PLAYERS],Float:PecanjePozZ[MAX_PLAYERS];

// - AC
new bool:TeleportNexAc[MAX_PLAYERS];
new bool:rconCheck[MAX_PLAYERS];
new rconCheckTimer[MAX_PLAYERS];

// - Kladionica Sistem
enum s1cverqw {

bool:Uplaceno,
bool:Zavrseno,
parID[10],
teamID1[10],
teamID2[10],
keciksdva[10],
Float:Kvota[10],
Uplata,
Float:Dobitak,
bool:Status,
HourPobeda[24}
};
new KladionicaListic[MAX_PLAYERS][s1cverqw];
new IzabraniPar[MAX_PLAYERS];

#define KLAD_FILE                                  			 "Kladionica/%s.ini"

enum celceeec {

parID[2],
Float:Kvota[3],
Rezultat[3}
};
new Parovi[10][celceeec];

enum celceesec {

parID[2],
Rezultat[2],
Float:Kvota,
HourPobeda[24}
};
new StariParovi[10][celceesec];

new PlayerText:fg_betTD[MAX_PLAYERS][32];
new PlayerText:KladListicSM[MAX_PLAYERS][9];

enum _bettingInfo {
teamID,
teamName[64],
teamStrength
};

new bettingInfo[46][_bettingInfo] = {

{ 0, "Barcelona", 10 },
{ 1, "Real Madrid", 10 },
{ 2, "Atletico Madrid",9 },
{ 3, "Chelsea", 9 },
{ 4, "Manchester City", 9 },
{ 5, "Arsenal", 9 },
{ 35, "Viktoria Plzen", 3 },
{ 36, "Ajax", 7 },
{ 37, "Sarajevo", 6 },
{ 38, "Partizan", 6 },
{ 39, "Dinamo Zagreb", 6 },
{ 40, "HJK", 5 },
{ 41, "Maribor", 4 },
{ 42, "BATE Borisov", 3 },
{ 43, "Celtic", 4 },
{ 44, "Crvena Zvezda", 6 },
{ 45, "Hajduk", 6 }
};
//================================[WOF]=======================================
#define MAX_WOF 100
enum WOF
{
fPostavljen,
fImaVlasnika,
fVlasnik[MAX_PLAYER_NAME],
fCena,
Float:fWOFX,
Float:fWOFY,
Float:fWOFZ
};
new WOFInfo[MAX_WOF][WOF];
new WOFPickup[sizeof(WOFInfo)];
new Text3D:WOFLabel[sizeof(WOFInfo)];
//===============================[Ports]======================================

#define MAX_APORTS													         100
#define F_APORT							     		 		  "Ostalo/aport.cfg"

enum supportData {
supportID,
supportCreated,
supportName[50],
Float:supportPos[3}
};
new supportInfo[MAX_SPORTS][supportData];

//=============================[PARKING]=======================================

#define PARKING_FILE                          "Parkinzi/Parking_%d.ini"
#define MAX_PARKINGS                          50
#define MAX_PARK_PL                           50

enum pf_info {

bool:ParkPlaced,
}
new ParkingInfo[MAX_PARKINGS][pf_info];

//===============================[ASKQ]=======================================

#define MAX_ASKQS													          50

enum askqData {
bool:askqSend,
askqOwner[MAX_PLAYER_NAME],
askqID,
askqQuestion[128}
};
new askqList[MAX_ASKQS][askqData];

enum askqDataA {
bool:askqSended,
bool:askqAnswered,
askqAdmin[MAX_PLAYER_NAME],
askqAnswer[128}
};
new askqInfo[MAX_PLAYERS][askqDataA];

//==============================[RADAR]=======================================

#define MAX_RADARS											    	         100
#define F_RADARS							     		   "Radars/radar_%i.ini"

enum radarData {

radarMaxSpeed,
radarPrice,
Float:radarPos[6],
radarObject
};
new radarInfo[MAX_RADARS][radarData];

new PlayerText:RadarCol[MAX_PLAYERS],
Timer_Radar[MAX_PLAYERS],
bool:alreadyPictured[MAX_PLAYERS],
Radar_Count[MAX_PLAYERS];
//

//================================[GPS]=======================================

#define MAX_GPS														         500
#define F_GPS							     		 			"GPS/gps_%i.ini"

enum gpsData {
gpsName[50}
}
enum {
SIMPLE_GPS, // obelezava samo na radaru
MEDIUM_GPS, // simple + pravi checkpoint i ispisuje razdaljinu
ADVANCED_GPS// simple + medius + pokazuje putanju do cilja
};

#define MAPPED_NONE     -1
#define MAPPED_IMPORTANT 0
#define MAPPED_HOUSE     1
#define MAPPED_BUSINESS  2
#define MAPPED_JOB       3

new pMappedType[MAX_PLAYERS] = {MAPPED_NONE, MAPPED_NONE, MAPPED_NONE, ...];

enum _pgr {
_pgrIconId,
Float:_pgrPos[3],
_pgrCheckPointId,
_pgrObject
}

new PlayerGpsRadar[MAX_PLAYERS][_pgr];
new PlayerText:PlayerGpsRadarText[MAX_PLAYERS];

//===============================[Garaze]=====================================

#define MAX_GARAGES														     200
#define F_GARAGE							     		 "Garages/Garage_%i.ini"

enum garageData {
bool:garageOwned,
garageOwner[MAX_PLAYER_NAME],
garagePrice,
garageLevel,
bool:garageLocked,
Float:garagePos[3],
Float:garageVehiclePos[4],
garageVW,
garageType,
Text3D:garage3D,
garagePickup
};
new garageInfo[MAX_GARAGES][garageData];

new Float:GarageInteriors[][] = {
{ 225.4748, 2611.0115, -29.2333, 270.0, 3.0 },// Small garage
{ 128.0643, 2414.4102, -29.4973, 270.0, 2.0 },// Medium garage
{ 350.0293, 2416.2312, -29.9601, 0.0, 1.0 } //Big garage

};

//===============================[GangZone]===================================

#define MAX_GZONE 														     100
#define F_GZONE								     		    "Zones/gZone_%i.ini"

enum gZoneData {

bool:gZoneTaken,
bool:gZoneTakeable,
gZoneGangID,
gZoneTime,

Float:gZoneMaxX,
Float:gZoneMinX,
Float:gZoneMaxY,
Float:gZoneMinY,

gZoneColor[24],
Text3D:gZone3D,
gZonePickup,
Float:gZonePickupPos[3],
gZoneID,
gZoneRectAngle,
Float:gZoneObjPos[6],
gZoneObjID
};
new gZoneInfo[MAX_GZONE][gZoneData];

new CreatingGZone[MAX_PLAYERS];
new CreatingGZoneID[MAX_PLAYERS];
new gZone_ID[MAX_PLAYERS];
new gZone_Time[MAX_PLAYERS];
new gZone_Timer[MAX_PLAYERS];
new gZone_InvMax1[MAX_PLAYERS];

////////////////////////////////SAFE ZONES//////////////////////////////////////
#define MAX_SZONE 														      30
#define F_SZONE								     		    "SafeZones/Zona_%i.ini"

enum gSafeZoneData {

Float:gSafeZoneMaxX,
Float:gSafeZoneMinX,
Float:gSafeZoneMaxY,
Float:gSafeZoneMinY,

gSafeZoneColor[24],
gSafeZoneID,
gSafeZoneRectAngle
};
new gSafeZoneInfo[MAX_SZONE][gSafeZoneData];

new CreatingSZone[MAX_PLAYERS];
new CreatingSZoneID[MAX_PLAYERS];
//================================[Imanje]====================================

#define MAX_FIELDS 														     500
#define MAX_STALKS													        5000
#define F_FIELD								     		   "Fields/Field_%i.ini"
#define F_STALK								     "Fields/Stabljike/Stalk_%i.ini"

#define BILJKA_SLJIVA 1
#define BILJKA_KRUSKA 2
#define BILJKA_JABUKA 3
#define BILJKA_KUPUS  4
#define BILJKA_RUZE   5

enum fieldData {
bool:fieldOwned,
fieldOwner[MAX_PLAYER_NAME],
fieldPrice,
fieldLevel,
Float:fieldMaxX,
Float:fieldMinX,
Float:fieldMaxY,
Float:fieldMinY,
fieldObject,
Float:fieldObjectPos[6],
Text3D:field3D,
fieldPickup,
fieldStalkNumber,
fieldRectAngle
};
new fieldInfo[MAX_FIELDS][fieldData];

enum stalks {
sfieldID,
sObjectID,
Float:sPos[3],
bool:sPlanted,
bool:sGrow,
sType,
sObject,
sMinut,
sHour,
Text3D:s3D
};
new stalkInfo[MAX_STALKS][stalks];

new CreatingThing[MAX_PLAYERS];
new CreatingField[MAX_PLAYERS];
new Float:CreatingPos[MAX_PLAYERS][4];

//===============================[PUMPE]======================================

#define MAX_FSTATION      												      30
#define FSTATION_FILE     									"Pumpe/Pumpa_%d.ini"

enum FStation {

bool:fsPlaced,
fsBusinessID,
fsGasolinePrice,
fsGasolineL,
fsDieselPrice,
fsDieselL,
fsGasPrice,
fsGasL,
fsGasOilPrice,
fsGasOilL,
fsName[64],
Float:fsPos[3],
fsTruckID,
fsCisternID,
fsPickup,
Text3D:fs3d
};
new FuelStation[MAX_FSTATION][FStation];
//===============================[Jelke]======================================

#define MAX_CTREES      100
#define F_CTREES								  		    "Jelke/Jelka_%d.ini"
enum C_Tree {

Float:ctPos[6],
bool:ctPlaced,
ctObject,
Text3D:ct3d
};
new CTree[MAX_CTREES][C_Tree];

//===============================[Lampe]======================================

#define MAX_XORBS      200
#define F_XORBS								  		        "Lampe/Lampa_%d.ini"
enum XmasOrb {

Float:xoPos[6],
bool:xoPlaced,
xoObject
};
new XmasOrbs[MAX_XORBS][XmasOrb];

//==============================[Pokloni]=====================================

#define MAX_PRESENTS       200

#define F_PRESENTS 								  		 "Pokloni/Poklon_%d.ini"

enum Presents {

Float:presPos[6],
bool:presPlaced,
bool:presTaken,
Text3D:pres3d,
presObject
};
new presentsInfo[MAX_PRESENTS][Presents];

//==============================[Organizacije]================================

#define MAX_ORG 															  50
#define O_FILE 								  "Organizacije/Organizacija_%d.ini"
#define ORG_IME 															  64
#define ORG_RANK 															  64
#define ORG_CLAN  															  24
#define ORG_LIDER 															  24
#define PORT_FILE 							   "PortoviOrgi/Organizacija_%d.ini"

#define ORG_TIP_PD 	    1
#define ORG_TIP_BANDA 	2
#define ORG_TIP_MAFIJA  3
#define ORG_TIP_MC 		4
#define ORG_TIP_SR 		5
#define ORG_TIP_MD 		6
#define ORG_TIP_CNN 	7
#define ORG_TIP_HITM 	8
#define ORG_TIP_ELEK  	9
#define ORG_TIP_TAXI 	10
#define ORG_TIP_PS 	    11

#define CTIP_HEROIN    1
#define CTIP_KOKAIN    2
#define CTIP_BMETH     3
#define CTIP_MARIHUANA 4
#define CTIP_CRACK     5
#define CTIP_METH      6

enum oOrgInfo {
oID,
oName[ORG_IME],
oPreFix[10],
oColor[24],

oTip,
oSuspended,
oMaxClanova,
oUbacenihClanova,

oSkin1,
oSkin2,
oSkin3,
oSkin4,
oSkin5,
oSkin6,

oZSkin1,
oZSkin2,
oZSkin3,
oZSkin4,
oZSkin5,
oZSkin6,

oLider1[ORG_LIDER],
oLider2[ORG_LIDER],

oClan1[ORG_CLAN],
oClan2[ORG_CLAN],
oClan3[ORG_CLAN],
oClan4[ORG_CLAN],
oClan5[ORG_CLAN],
oClan6[ORG_CLAN],
oClan7[ORG_CLAN],
oClan8[ORG_CLAN],
oClan9[ORG_CLAN],
oClan10[ORG_CLAN],
	oClan11[ORG_CLAN],
oClan12[ORG_CLAN],
oClan13[ORG_CLAN],
oClan14[ORG_CLAN],
oClan15[ORG_CLAN],
oClan16[ORG_CLAN],
oClan17[ORG_CLAN],
oClan18[ORG_CLAN],
oClan19[ORG_CLAN],
oClan20[ORG_CLAN],
oClan21[ORG_CLAN],
oClan22[ORG_CLAN],
oClan23[ORG_CLAN],
oClan24[ORG_CLAN],
oClan25[ORG_CLAN],
oClan26[ORG_CLAN],
oClan27[ORG_CLAN],
oClan28[ORG_CLAN],
oClan29[ORG_CLAN],
oClan30[ORG_CLAN],

oRank1[ORG_RANK],
oRank2[ORG_RANK],
oRank3[ORG_RANK],
oRank4[ORG_RANK],
oRank5[ORG_RANK],
oRank6[ORG_RANK],

Float:oPozExtX,
Float:oPozExtY,
Float:oPozExtZ,

Float:oPozIntX,
Float:oPozIntY,
Float:oPozIntZ,

Float:oDutyPoint[3],
oDutyInt,
oDutyVW,
Float:oEquipPoint[3],
oEquipInt,
oEquipVW,
	oSprayID,

oSavez,

oMaxPort,
oControlType,
Float:oDrugField[3],
Float:oSafePos[3],
oSafeMoney,
oSafeDrug[4],
oSafeDrugCode[4],

oInt,
oVw
}
new OI[MAX_ORG][oOrgInfo];
new OrgPickup[MAX_ORG];
new Text3D:Org3D[MAX_ORG];
new Text3D:OrgDuty3D[MAX_ORG];
new Text3D:OrgEquip3D[MAX_ORG];
new DutyPointPickup[MAX_ORG];
new EquipPointPickup[MAX_ORG];
new OrgFieldPickup[MAX_ORG];
new Text3D:OrgField3d[MAX_ORG];
new OrgSafePickup[MAX_ORG];
new Text3D:OrgSafe3d[MAX_ORG];

enum Portes {
	Float:Pos1[3],
	Float:Pos2[3],
	Int[2],
VW[2],
Pickup[2}
}
new PortOP[MAX_ORG][10][Portes];
////////////////////////////////////////////////////////////////////////////////

//===============================[Kapije]=====================================

#define MAX_GATES 															 100
#define GATE_FILE 								  			"Kapije/Gate_%d.ini"

enum gateData {
gateOwner[MAX_PLAYER_NAME],
bool:gateOpened,
gateFor,
gateOrgID,
gateModel,
Float:gateSpeed,
Float:gateRadius,
gateTime,
Float:gatePos[6],
gateInterior,
gateWorld,
Float:gateMove[6],
gateTimer,
gateObject
};

new GateData[MAX_GATES][gateData];

new EditDGate[MAX_PLAYERS],
EditDGateMove[MAX_PLAYERS];

//================================[Droga]=====================================

#define MAX_PLANTS                          701

enum PlantaInfo {
wObjectID,
wPlanted,
wHoursPassed,
wViwo,
wType,
wOwner[MAX_PLAYER_NAME],
Float:Plantx,
Float:Planty,
Float:Plantz
};
new DrogaStab[MAX_PLANTS][PlantaInfo];

//==================================[WAR]=====================================

#define MAX_WARS 20

enum WAR {
bool:WARKreiranje,
bool:WARAktivan,
WARTimSkor[2],
WAROruzje[4],
WARMapa,
WARMaxClanova,
WARTimClanovi[2],
WARTimLider[2],
WARTimer,
WARTeamID[2],
TimerWARSec,
TimerWARMin,
TimerWAROstaloVreme,
WARCena
}
new WARInfo[MAX_WARS][WAR];

enum WARI {
bool:WARTim[2],
WARUbistva,
WARSmrti,
WARIgrac
}
new WARPInfo[MAX_PLAYERS][WARI];

//==============================[RPORUKE]=====================================

new RandomSPoruke[18][128] = {

"~w~ Ukoliko ste novi na serveru i potrebna vam je pomoc - ~y~/new ~w~",
"~w~ Ukoliko Vam je potrebna pomoc, STAFF je uvek tu - ~y~/pitaj ~w~",
"~w~ Posetite nas forum i registrujte se - ~y~www.fg-rpg.com~w~",
"~w~ Pricajte sa ostalim igracima na nasem TS3 - ~y~ts3.fg-rpg.com ~w~",
"~w~ Ukoliko vidite nekog da krsi pravila, koristite - ~y~/report ~w~",
"~w~ Ukoliko primetite nekog ko koristi cheat, prijavite ga na - ~y~/report ~w~",
"~w~ Nemojte traziti novac od Staff Tima, zaradite ga sami! ~w~",
"~w~ AFG TEAM je tu da nadgleda postovanje pravila servera ~w~",
"~w~ Helperi su tu da pruzaju pomoc igracima servera ~w~",
"~w~ Promoteri imaju razne mogucnosti, konkurisite se na forumu. ~w~",
"~w~ Ukoliko pronadjete bug, prijavite ga na forumu i mozda budete nagradjeni. ~w~",
"~w~ Postujte druge igrace kako bi i oni postovali vas ~w~",
"~w~ Kako bi usli u neku organizaciju, morate biti minimalno 3 ili veci level.~w~",
"~w~ Ukoliko Vam je potrebna pomoc oko komandi, koristite - ~y~/help ~w~",
"~w~ Ukoliko iskoriscavate bugove sa oruzjem (C-BUG...), bicete kaznjeni.~w~",
"~w~ Ukoliko pisete pogrdne reci mozete biti kaznjeni. ~w~",
"~w~ Ukoliko vas prevare u igri, FG staff ne odgovara za to ~w~",
"~w~ Ne smete reklamirati druge zajednice, ovo je strogo zabranjeno. ~w~"

};
new RandomMSG[][] =
{
"{1cb021] [ FG - HELP ] :{FFFFFF] Mozete podesavati Vase opcije naloga putem komande /settings.",
"{1cb021] [ FG - HELP ] :{FFFFFF] Ove poruke ce Vam se prikazivati dok ne navrsite level 10.",
"{1cb021] [ FG - HELP ] :{FFFFFF] Ukoliko vas prevare u igri, FG Staff ne odgovara za to!",
"{1cb021] [ FG - HELP ] :{FFFFFF] Adresu naseg foruma mozete pogledati komandom /forum.",
"{1cb021] [ FG - HELP ] :{FFFFFF] Popis svih Vama dostupnih komandi mozete videti na /help.",
"{1cb021] [ FG - HELP ] :{FFFFFF] Ukoliko pronadjete bug, odmah ga prijavite i mozda budete nagradjeni.",
"{1cb021] [ FG - HELP ] :{FFFFFF] Svaka zloupotreba bagova ili propusta u skripti se strogo kaznjava.",
"{1cb021] [ FG - HELP ] :{FFFFFF] Trenutna verzija servera jeste v1.1, i hvala Vam sto igrate na njemu.",
"{1cb021] [ FG - HELP ] :{FFFFFF] Da doprineste razvoju ovog servera, mozete donirati - /donacije.",
"{1cb021] [ FG - HELP ] :{FFFFFF] Da pricate sa ostalim igracima mozete koristiti /teamspeak.",
"{1cb021] [ FG - HELP ] :{FFFFFF] Ukoliko zelite postati admin, morate poceti od helpera. Vise na forumu.",
"{1cb021] [ FG - HELP ] :{FFFFFF] Nemojte koristiti cheatove i druge skripte koje Vam daju prednost nad ostalima.",
"{1cb021] [ FG - HELP ] :{FFFFFF] Sve nejasne stvari mozete pitati nase helpere - /pitaj.",
"{1cb021] [ FG - HELP ] :{FFFFFF] Ukoliko zelite direktan razgovor sa adminom, koristite - /report.",
"{1cb021] [ FG - HELP ] :{FFFFFF] Budite obazrivi kada Vam neko ponudi zamenu necega.",
"{1cb021] [ FG - HELP ] :{FFFFFF] Da doprineste razvoju ovog servera, mozete donirati - /donacije.",
"{1cb021] [ FG - HELP ] :{FFFFFF] Mozete koristiti /tempomat da ogranicite brzinu vozila u kom se nalazite.",
"{1cb021] [ FG - HELP ] :{FFFFFF] Zelite da dobijete razne mogucnosti bez donacije? Konkurisite se za promotera.",
"{1cb021] [ FG - HELP ] :{FFFFFF] Ukoliko zelite postati VIP igrac, pogledajte vise na - /vipinfo."
};

//===============================[Kontejneri]=================================

#define KO_FILE 	 							     	     "Kontejneri/%i.ini"
const MAX_KONT = 500;

enum kont {

Float:koObjPos[3],
Float:koObjRot[3],
koObjID
}
new KontInfo[MAX_KONT][kont];
new Text3D:KontejnerLabel[MAX_KONT];

//================================[Standovi]==================================

#define BRZAHRANA_FILE 							     	      "Brzahrana/%i.ini"
#define MAX_BHRANA 														     200

enum brzahrana {

Float:bhObjPos[3],
Float:bhObjRot[3],
bhObjID
}
new BrzaHranaInfo[MAX_BHRANA][brzahrana];
new Text3D:BrzaHranaLabel[MAX_BHRANA];

//================================[Govornica]=================================

#define GOVORNICA_FILE 							     	      "Govornica/%i.ini"
#define MAX_GOVORNICA													     100

enum govornica {

Float:gObjPos[3],
Float:gObjRot[3],
gObjID
}
new GovornicaInfo[MAX_GOVORNICA][govornica];
new Text3D:GovornicaLabel[MAX_GOVORNICA];

//================================[Govornica]=================================

#define NARGILA_FILE 							     	        "Nargila/%i.ini"
#define MAX_NARGILA													         100

enum nargila {

Float:gObjPos[3],
Float:gObjRot[3],
gObjID
}
new NargilaInfo[MAX_NARGILA][nargila];
new Text3D:NargilaLabel[MAX_NARGILA];

//===============================[Bankomati]==================================

#define ATM_FILE 								     	      "Bankomati/%i.ini"
#define MAX_ATM 														     300

enum atmDataa {
bool:atmPreseceneZice,
bool:atmProbijenBios,
atmVremeDoRoba,
bool:atmExists,
Float:atmPos[6],
atmObject,
Text3D:atmText3D
};
new atmInfo[MAX_ATM][atmDataa];

new PlayerBar:playeratmBar[MAX_PLAYERS] = { INVALID_PLAYER_BAR_ID, ...},
atmrobTimer[MAX_PLAYERS],
robbingATMSeconds[MAX_PLAYERS],
robbingATM[MAX_PLAYERS];

//================================[Tuning]====================================

enum PaintjobInfi {
vehID,
pNumber,
pPrice,
pNameBre[12}
};
#define NUMBER_TYPE_PAINTJOB 	36
static const
pjInfo[NUMBER_TYPE_PAINTJOB][PaintjobInfi] = {
{ 483, 0, 100, "Paintjob 1" },
{ 534, 0, 100, "Paintjob 1" },
{ 534, 1, 100, "Paintjob 2" },
{ 534, 2, 100, "Paintjob 3" },
{ 535, 0, 100, "Paintjob 1" },
{ 535, 1, 100, "Paintjob 2" },
{ 535, 2, 100, "Paintjob 3" },
{ 536, 0, 100, "Paintjob 1" },
{ 536, 1, 100, "Paintjob 2" },
{ 536, 2, 100, "Paintjob 3" },
{ 558, 0, 100, "Paintjob 1" },
{ 558, 1, 100, "Paintjob 2" },
{ 558, 2, 100, "Paintjob 3" },
{ 559, 0, 100, "Paintjob 1" },
{ 559, 1, 100, "Paintjob 2" },
{ 559, 2, 100, "Paintjob 3" },
{ 560, 0, 100, "Paintjob 1" },
{ 560, 1, 100, "Paintjob 2" },
{ 560, 2, 100, "Paintjob 3" },
{ 561, 0, 100, "Paintjob 1" },
{ 561, 1, 100, "Paintjob 2" },
{ 561, 2, 100, "Paintjob 3" },
{ 562, 0, 100, "Paintjob 1" },
{ 562, 1, 100, "Paintjob 2" },
{ 562, 2, 100, "Paintjob 3" },
{ 565, 0, 100, "Paintjob 1" },
{ 565, 1, 100, "Paintjob 2" },
{ 565, 2, 100, "Paintjob 3" },
{ 567, 0, 100, "Paintjob 1" },
{ 567, 1, 100, "Paintjob 2" },
{ 567, 2, 100, "Paintjob 3" },
{ 575, 0, 100, "Paintjob 1" },
{ 575, 1, 100, "Paintjob 2" },
{ 576, 0, 100, "Paintjob 1" },
{ 576, 1, 100, "Paintjob 2" },
{ 576, 2, 100, "Paintjob 3" }
};

enum ComponentsInfo {
cID,
cName[40],
cPrice,
cType
};
#define MAX_COMPONENTS	194
static const
cInfo[MAX_COMPONENTS][ComponentsInfo] = {
{ 1000, "Pro Spoiler", 100, CARMODTYPE_SPOILER },
{ 1001, "Win Spoiler", 100, CARMODTYPE_SPOILER },
{ 1002, "Drag Spoiler", 100, CARMODTYPE_SPOILER },
{ 1003, "Alpha Spoiler", 100, CARMODTYPE_SPOILER },
{ 1004, "Champ Scoop Hood", 100, CARMODTYPE_HOOD },
{ 1005, "Fury Scoop Hood", 100, CARMODTYPE_HOOD },
{ 1006, "Roof Scoop Roof", 100, CARMODTYPE_ROOF },
{ 1007, "Right Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1008, "5x Nitrous", 100, CARMODTYPE_NITRO },
{ 1009, "2x Nitrous", 100, CARMODTYPE_NITRO },
{ 1010, "10x Nitrous", 100, CARMODTYPE_NITRO },
{ 1011, "Race Scoop Hood", 100, CARMODTYPE_HOOD },
{ 1012, "Worx Scoop Hood", 100, CARMODTYPE_HOOD },
{ 1013, "Round Fog Lamp", 100, CARMODTYPE_LAMPS },
{ 1014, "Champ Spoiler", 100, CARMODTYPE_SPOILER },
{ 1015, "Race Spoiler", 100, CARMODTYPE_SPOILER },
{ 1016, "Worx Spoiler", 100, CARMODTYPE_SPOILER },
{ 1017, "Left Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1018, "Upswept Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1019, "Twin Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1020, "Large Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1021, "Medium Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1022, "Small Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1023, "Fury Spoiler", 100, CARMODTYPE_SPOILER },
{ 1024, "Square Fog Lamp", 100, CARMODTYPE_LAMPS },
{ 1025, "Offroad Wheels", 100, CARMODTYPE_WHEELS },
{ 1026, "Right Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1027, "Left Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1028, "Alien Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1029, "X-Flow Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1030, "Left X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1031, "Right X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1032, "Alien Roof Vent", 100, CARMODTYPE_ROOF },
{ 1033, "X-Flow Roof Vent", 100, CARMODTYPE_ROOF },
{ 1034, "Alien Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1035, "X-Flow Roof Vent", 100, CARMODTYPE_ROOF },
{ 1036, "Right Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1037, "X-Flow Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1038, "Alien Roof Vent", 100, CARMODTYPE_ROOF },
{ 1039, "Left X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1040, "Left Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1041, "Right X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1042, "Right Chrome Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1043, "Slamin Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1044, "Chrome Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1045, "X-Flow Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1046, "Alien Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1047, "Right Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1048, "Right X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1049, "Alien Spoiler", 100, CARMODTYPE_SPOILER },
{ 1050, "X-Flow Spoiler", 100, CARMODTYPE_SPOILER },
{ 1051, "Left Alien Sideskirt", 100, CARMODTYPE_SPOILER },
{ 1052, "Left X-Flow Sideskirt", 100, CARMODTYPE_SPOILER },
{ 1053, "X-Flow Roof", 100, CARMODTYPE_ROOF },
{ 1054, "Alien Roof", 100, CARMODTYPE_ROOF },
{ 1055, "Alien Roof", 100, CARMODTYPE_ROOF },
{ 1056, "Right Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1057, "Right X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1058, "Alien Spoiler", 100, CARMODTYPE_SPOILER },
{ 1059, "X-Flow Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1060, "X-Flow Spoiler", 100, CARMODTYPE_SPOILER },
{ 1061, "X-Flow Roof", 100, CARMODTYPE_ROOF },
{ 1062, "Left Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1063, "Left X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1064, "Alien Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1065, "Alien Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1066, "X-Flow Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1067, "Alien Roof", 100, CARMODTYPE_ROOF },
{ 1068, "X-Flow Roof", 100, CARMODTYPE_ROOF },
{ 1069, "Right Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1070, "Right X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1071, "Left Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1072, "Left X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1073, "Shadow Wheels", 100, CARMODTYPE_WHEELS },
{ 1074, "Mega Wheels", 100, CARMODTYPE_WHEELS },
{ 1075, "Rimshine Wheels", 100, CARMODTYPE_WHEELS },
{ 1076, "Wires Wheels", 100, CARMODTYPE_WHEELS },
{ 1077, "Classic Wheels", 100, CARMODTYPE_WHEELS },
{ 1078, "Twist Wheels", 100, CARMODTYPE_WHEELS },
{ 1079, "Cutter Wheels", 100, CARMODTYPE_WHEELS },
{ 1080, "Switch Wheels", 100, CARMODTYPE_WHEELS },
{ 1081, "Grove Wheels", 100, CARMODTYPE_WHEELS },
{ 1082, "Import Wheels", 100, CARMODTYPE_WHEELS },
{ 1083, "Dollar Wheels", 100, CARMODTYPE_WHEELS },
{ 1084, "Trance Wheels", 100, CARMODTYPE_WHEELS },
{ 1085, "Atomic Wheels", 100, CARMODTYPE_WHEELS },
{ 1086, "Stereo Wheels", 100, CARMODTYPE_STEREO },
{ 1087, "Hydraulics", 100, CARMODTYPE_HYDRAULICS },
{ 1088, "Alien Roof", 100, CARMODTYPE_ROOF },
{ 1089, "X-Flow Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1090, "Right Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1091, "X-Flow Roof", 100, CARMODTYPE_ROOF },
{ 1092, "Alien Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1093, "Right X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1094, "Left Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1095, "Right X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1096, "Ahab Wheels", 100, CARMODTYPE_WHEELS },
{ 1097, "Virtual Wheels", 100, CARMODTYPE_WHEELS },
{ 1098, "Access Wheels", 100, CARMODTYPE_WHEELS },
{ 1099, "Left Chrome Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1100, "Chrome Grill", 100, -1 },// Bullbar
{ 1101, "Left `Chrome Flames` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1102, "Left `Chrome Strip` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1103, "Covertible Roof", 100, CARMODTYPE_ROOF },
{ 1104, "Chrome Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1105, "Slamin Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1106, "Right `Chrome Arches`", 100, CARMODTYPE_SIDESKIRT },
{ 1107, "Left `Chrome Strip` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1108, "Right `Chrome Strip` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1109, "Chrome", 100, -1 },// Bullbar
{ 1110, "Slamin", 100, -1 },// Bullbar
{ 1111, "Little Sign?", 100, -1 },// sig
{ 1112, "Little Sign?", 100, -1 },// sig
{ 1113, "Chrome Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1114, "Slamin Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1115, "Chrome", 100, -1 },// Bullbar
{ 1116, "Slamin", 100, -1 },// Bullbar
{ 1117, "Chrome Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1118, "Right `Chrome Trim` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1119, "Right `Wheelcovers` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1120, "Left `Chrome Trim` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1121, "Left `Wheelcovers` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1122, "Right `Chrome Flames` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1123, "Bullbar Chrome Bars", 100, -1 },// Bullbar
{ 1124, "Left `Chrome Arches` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1125, "Bullbar Chrome Lights", 100, -1 },// Bullbar
{ 1126, "Chrome Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1127, "Slamin Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1128, "Vinyl Hardtop", 100, CARMODTYPE_ROOF },
{ 1129, "Chrome Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1130, "Hardtop Roof", 100, CARMODTYPE_ROOF },
{ 1131, "Softtop Roof", 100, CARMODTYPE_ROOF },
{ 1132, "Slamin Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1133, "Right `Chrome Strip` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1134, "Right `Chrome Strip` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1135, "Slamin Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1136, "Chrome Exhaust", 100, CARMODTYPE_EXHAUST },
{ 1137, "Left `Chrome Strip` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
{ 1138, "Alien Spoiler", 100, CARMODTYPE_SPOILER },
{ 1139, "X-Flow Spoiler", 100, CARMODTYPE_SPOILER },
{ 1140, "X-Flow Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1141, "Alien Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1142, "Left Oval Vents", 100, CARMODTYPE_VENT_LEFT },
{ 1143, "Right Oval Vents", 100, CARMODTYPE_VENT_RIGHT },
{ 1144, "Left Square Vents", 100, CARMODTYPE_VENT_LEFT },
{ 1145, "Right Square Vents", 100, CARMODTYPE_VENT_RIGHT },
{ 1146, "X-Flow Spoiler", 100, CARMODTYPE_SPOILER },
{ 1147, "Alien Spoiler", 100, CARMODTYPE_SPOILER },
{ 1148, "X-Flow Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1149, "Alien Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1150, "Alien Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1151, "X-Flow Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1152, "X-Flow Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1153, "Alien Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1154, "Alien Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1155, "Alien Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1156, "X-Flow Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1157, "X-Flow Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1158, "X-Flow Spoiler", 100, CARMODTYPE_SPOILER },
{ 1159, "Alien Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1160, "Alien Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1161, "X-Flow Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1162, "Alien Spoiler", 100, CARMODTYPE_SPOILER },
{ 1163, "X-Flow Spoiler", 100, CARMODTYPE_SPOILER },
{ 1164, "Alien Spoiler", 100, CARMODTYPE_SPOILER },
{ 1165, "X-Flow Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1166, "Alien Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1167, "X-Flow Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1168, "Alien Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1169, "Alien Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1170, "X-Flow Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1171, "Alien Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1172, "X-Flow Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1173, "X-Flow Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1174, "Chrome Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1175, "Slamin Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1176, "Chrome Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1177, "Slamin Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1178, "Slamin Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1179, "Chrome Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1180, "Chrome Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1181, "Slamin Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1182, "Chrome Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1183, "Slamin Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1184, "Chrome Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1185, "Slamin Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1186, "Slamin Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1187, "Chrome Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1188, "Slamin Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1189, "Chrome Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1190, "Slamin Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1191, "Chrome Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
{ 1192, "Chrome Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
{ 1193, "Slamin Rear Bumper", 100, CARMODTYPE_REAR_BUMPER }
};


enum tpi {
tID,
tType,
bool:tPaintjob,
PJColor[2}
};
new TPInfo[MAX_PLAYERS][tpi];

#define MAX_GOBJ 1000
enum dGunEnum {
Float:ObjPos[3],
gObjID,
ObjData[2}
};
new dGunData[MAX_GOBJ][dGunEnum];

//=================================[Vozila]===================================

#define V_FILE 								     				 "Vozila/%i.ini"
#define MAX_CARS 															2000

#define PRIVATNO_VOZILO 													   1
#define ORGANIZACIJSKO_VOZILO 												   2
#define POSLOVNO_VOZILO 													   3
#define RENTANO_VOZILO 													   	   4
#define GRADONACELNIKOVO_VOZILO 											   5
#define IZLOZBENO_VOZILO 											   		   6
#define ADMIN_VOZILO 											   		       7
#define PROMOTER_VOZILO 											   		   8
#define VIP_VOZILO 											   		   		   9
#define POLAGANJE_VOZILO 											   		  10
#define HELPER_VOZILO 											   		      11
#define PUMPA_VOZILO 											   		      12

enum vVoziloInfo {
vOwned,
vPrice,
vOwner[MAX_PLAYER_NAME],
vLocked,
Float:vLokacijaX,
Float:vLokacijaY,
Float:vLokacijaZ,
Float:vLokacijaA,
vVirtualWorld,
vInterior,
vUsage,
vJob,
vOrganization,
vFuelStation,
vColor1,
vColor2,
vModel,
vTeh,
vReg,
vRegVreme,
vTablice[16],
vGPS,
vOsiguranje,
vLock,
vAlarm,
vFuel,
vFuelType,
vNeon,
vTuned,
vImobilizator,
vSpoiler,
vHood,
vRoof,
vSkirt,
vLamps,
vNitro,
vExhaust,
vWheels,
vStereo,
vHydraulics,
vFrontBumper,
vRearBumper,
vVents,
vPaintJob,
vProvera,
vDrug[6],
vDrugCode[6],
vMaterijali,
vMelee,
vWeap1,
vAmmo1,
vWeap2,
vAmmo2,
vGajbica[5],
vGajbicaAmmount[5],
vNeaktivnost,
vKilometri,
vMetri,
bool:Validv3DText,
Text3D:v3DText,
vID

}
new VehicleInfo[MAX_CARS][vVoziloInfo];
//new Text3D:VlasnikLabel[sizeof(VehicleInfo)];

//=================================[Imovina]==================================

#define IM_FILE 								     			"Imovina/%i.ini"
#define MAX_IMOVINA 													    1500

#define IMOVINA_KUCA    													   1
#define IMOVINA_STAN 												   		   2
#define IMOVINA_VIKENDICA													   3

#define MALA_KUCA 													   		   1
#define SREDNJA_KUCA 													   	   2
#define VELIKA_KUCA 													   	   3
#define VILA_KUCA 													   		   4

#define MALA_KUCA_X                                                    2178.8848
#define MALA_KUCA_Y                                                   -1200.8787
#define MALA_KUCA_Z                                                     -44.4801
#define MALA_KUCA_PRICE                                                  1000000
#define MALA_KUCA_INT                                                          4

#define SREDNJA_KUCA_X                                                 1965.1283
#define SREDNJA_KUCA_Y                                                 -680.6248
#define SREDNJA_KUCA_Z                                                   52.3049
#define SREDNJA_KUCA_PRICE                                               2500000
#define SREDNJA_KUCA_INT                                                       6

#define VELIKA_KUCA_X                                                  1915.9248
#define VELIKA_KUCA_Y                                                  -371.0749
#define VELIKA_KUCA_Z 													  7.4069
#define VELIKA_KUCA_PRICE                                                7500000
#define VELIKA_KUCA_INT                                                       10

#define VILA_KUCA_X                                                    2321.8354
#define VILA_KUCA_Y                                                    -373.0509
#define VILA_KUCA_Z                                                      22.1059
#define VILA_KUCA_PRICE                                                 15000000
#define VILA_KUCA_INT                                                         12

#define STAN_X                                                     	   1345.6677
#define STAN_Y                                                        -1021.8309
#define STAN_Z                                                          -31.1411
#define STAN_PRICE                                                    	  500000
#define STAN_INT															   5

#define VIKENDICA_X                                                    2160.2871
#define VIKENDICA_Y                                                   -1172.6244
#define VIKENDICA_Z                                                    1029.8619
#define VIKENDICA_PRICE                                                   700000
#define VIKENDICA_INT 													       7

#define MAX_X_OBJECTS                                                        200

enum obj_info {

f_Model,
Float:f_X,
Float:f_Y,
Float:f_Z,
Float:f_rX,
Float:f_rY,
Float:f_rZ,
f_VW,
f_Object
};
new Furniture[MAX_IMOVINA][MAX_X_OBJECTS][obj_info];

new ObjectEdition_TYPE[MAX_PLAYERS];

enum Imovina
{
iOwned,
iOwner[MAX_PLAYER_NAME],
iUsage,
Float:iEnter[3],
Float:iExit[3],
iPrice,
iLocked,
iInterior,
iVW,
iVrsta,
iOrmar,
iSkin[3],
iSafeStatus,
iSafePass,
iOruzje[4],
iMunicija[4],
iDrug[10],
iDrugCode[10],
iDoorLevel,
iAlarm,
iLockLevel,
iTime,
Float:iPizzaTime,
iLevel,
iAdress[38],
iNeaktivnost,
iRentable,
iRentPrice,
iRentovano,
iMats,
iMoney
};
new II[MAX_IMOVINA][Imovina];
new ImovinaPickup[MAX_IMOVINA];
new ImovinaMapIcon[MAX_IMOVINA];
new Text3D:ImovinaLabel[MAX_IMOVINA];

//=================================[Hoteli]===================================

#define MAX_HOTELS 															 100
#define HOTEL_FILE 								     	    	 "Hoteli/%i.ini"

enum hotelData {
hOwned,
hOwner[MAX_PLAYER_NAME],
Float:hEnter[3],
Float:hExit[3],
hInterior,
hVW,
hPrice,
hLocked,
hLevel,
hAdress[38],
hRoomPrice,
hMoney,
hGuest_1[MAX_PLAYER_NAME],
hGuest_2[MAX_PLAYER_NAME],
hGuest_3[MAX_PLAYER_NAME],
hGuest_4[MAX_PLAYER_NAME],
hGuest_5[MAX_PLAYER_NAME],
hGuest_6[MAX_PLAYER_NAME],
hGuest_7[MAX_PLAYER_NAME],
hGuest_8[MAX_PLAYER_NAME],
hGuest_9[MAX_PLAYER_NAME],
hGuest_10[MAX_PLAYER_NAME],
hPorez,
hVrednostPoreza,
hPickup,
Text3D:h3DText
}
new hotelInfo[MAX_HOTELS][hotelData];
//GUNSGOP
//new GunPickup[13];
//new Text3D:GunLabel[13];

//================================[Saloni]====================================

#define MAX_AUTOS 															 100
#define AS_FILE 								     		 "AutoSaloni/%i.ini"

enum aVtoSalo {
aMaxVehModel,
aVehModel[16],
aVehAmmount[16],
Float:aVehBuyedPos[4],
Float:aPickupPos[3],
Float:aCameraPos[3],
Float:aCameraLookAt[3],
Text3D:AutoSalon3D,
AutoSalonPickup,
aVW,
aInt,
aIzlogVeh,
bool:AlreadyBuying
}
new AutoSalon[MAX_AUTOS][aVtoSalo];
new PlayerBuyingAS[MAX_PLAYERS];
new ModelCar[MAX_PLAYERS];

enum noclipenum {
bool:cameramode,
flyobject,
mode,
lrold,
udold,
lastmove,
Float:accelmul
}
new flymodecamera[MAX_PLAYERS][noclipenum];

//=================================[Firme]====================================

#define F_FILE 								     				  "Firme/%i.ini"
#define MAX_Business													     200
#define VRSTA_MARKET 														   1
#define VRSTA_JFIRMA 														   2
#define VRSTA_BURG 															   3
#define VRSTA_CLUCK															   4
#define VRSTA_BINCO															   5
#define VRSTA_ZIP														       6
#define VRSTA_VICTIM														   7
#define VRSTA_SUBURBAN														   8
#define VRSTA_GUNSHOP														   9
#define VRSTA_GYM														      10
#define VRSTA_BAR														      11
#define VRSTA_RESTORAN														  12
#define VRSTA_PIZZA															  13
#define VRSTA_NKLUB 														  14
#define VRSTA_DISCO 														  15
#define VRSTA_ELEKTRONIK                                					  16
#define VRSTA_TRAFIKA                                					  	  17
#define VRSTA_POSAO                             					  	      18
#define VRSTA_RENT                             					  	      	  19
#define VRSTA_PUMPA                            					  	      	  20
#define VRSTA_JAVNAK                            					      	  21
#define VRSTA_KLAD                           					      	  	  22
#define VRSTA_OGLAS                         					      	  	  23
#define VRSTA_TELEKOM                         					      	  	  24
#define VRSTA_PAYSPRAY                         					      	  	  25
#define VRSTA_KOMUNALIJE                         					      	  26
#define VRSTA_VODOVOD                     					      	 		  27
#define VRSTA_ELEKTRANA                      					      	      28
#define VRSTA_LUTRIJA                     					      	          29
#define VRSTA_CASINO                   					      	              30
#define VRSTA_NEON                    					      	              31
#define VRSTA_RODA                   					      	              32
#define VRSTA_NIKE															  33
#define VRSTA_RIBAR															  34

enum fInformacije {

bOwned,
bPrice,
bOwner[MAX_PLAYER_NAME],
bType,
bLocked,
bMoney,
Float:bEnterX,
Float:bEnterY,
Float:bEnterZ,
Float:bExitX,
Float:bExitY,
Float:bExitZ,
bInt,
bVW,
bInInt,
bInVW,
bName[64],
bLevel,
bJobID,
bNeaktivnost,
bFacture,
bReket,
Float:bReketTime
}
new BusinessInfo[MAX_Business][fInformacije];
new FirmaPickup[MAX_Business];
new Text3D:FirmaLabel[MAX_Business];

// Settings

#define ResetujBarNovac 									   	ResetPlayerMoney
#define UpdejtujBarNovac 									    GivePlayerMoney

#define VERZIJA_MODA     							  	   	   	"FG v1.1 - RPG"
#define MAP_NAME    										   	"Balkan"
#define D_ODABERI 											   	"{33AA33]Potvrdi"
#define D_ODUSTANI 											  	"{FFFFFF]Odustani"
#define D_NAZAD 												"{bababa]Nazad"
#define D_NASLOV               									"{005b87]Fusion {FFFFFF]Gaming {005b87]Community"

#define SPD 													ShowPlayerDialog
#define SCMA 											  		SendClientMessageToAll
#define DSL 												   	DIALOG_STYLE_LIST
#define IPI 												   	INVALID_PLAYER_ID
#define DSI                                                    	DIALOG_STYLE_INPUT
#define DSP                                                		DIALOG_STYLE_PASSWORD
#define DSMSG 												 	DIALOG_STYLE_MSGBOX
#define DSH 													DIALOG_STYLE_TABLIST_HEADERS

#define SendErrorMessage(%0,%1) \
SendClientMessageEx(%0, -1, "{af001d] [ FG:RPG ] :{FFFFFF] "%1)

#define SendJobMessage(%0,%1) \
SendClientMessageEx(%0, -1, "{2e9300] [ FG:RPG ] :{FFFFFF] "%1)

#define SendInfoMessage(%0,%1) \
SendClientMessageEx(%0, -1, "{005b87] [ FG:RPG ] :{FFFFFF] "%1)

#define SendUsageMessage(%0,%1) \
SCM(%0, -1, "{f9bc86] [ FG:RPG ] :{FFFFFF] "%1)


//==============================[Spawn]=======================================

#define SPAWN_OBICAN_LS_1													   0
#define SPAWN_BAZA														   	   1
#define SPAWN_IMOVINA_1														   2
#define SPAWN_IMOVINA_2														   3
#define SPAWN_IMOVINA_3														   4
#define SPAWN_BELAKUCA 														   5
#define SPAWN_OBICAN_LS_2													   6
#define SPAWN_OBICAN_SF														   7
#define SPAWN_RENTHOTEL														   8
#define SPAWN_ADMIN														       9
#define SPAWN_PROMOTER													      10
#define SPAWN_RENT													      	  11
#define SPAWN_HELPER													   	  12
#define SPAWN_VIP													   	  	  13

//===========================[Textdraws]=====================================

// - AltChat (by Xunder)
#define MAX_LINES 															   8

new bool:AltChat[MAX_PLAYERS];

new PlayerText: AltChatTD_Player[MAX_LINES],
AltChatTD_Text[MAX_PLAYERS][MAX_LINES][128];
//

new Text:FG_InGame[85];
new PlayerText:FG_InGameP[MAX_PLAYERS][3];
new PlayerText:Brzinomer[MAX_PLAYERS][11];
new PlayerText:Novcici[MAX_PLAYERS];
new PlayerText:CKilometri[MAX_PLAYERS][3];
new PlayerText:BuyCar[MAX_PLAYERS][15];
new PlayerText:WARTextDraw[MAX_PLAYERS][9];
new PlayerText:Ormar[MAX_PLAYERS][10];
new PlayerText:ObjektTD[MAX_PLAYERS][6];
new PlayerText:Police_TV[MAX_PLAYERS][14];
new PlayerText:LoginTD[MAX_PLAYERS][22];
new PlayerText:RegisterTD[MAX_PLAYERS][27];
new PlayerText:PVreme[MAX_PLAYERS];
new PlayerText:PizzaMenu[MAX_PLAYERS][25];
new PlayerText:atmTD[MAX_PLAYERS][14];
new PlayerText:atmrobLoading[MAX_PLAYERS][2];
new PlayerText:buyWatch[MAX_PLAYERS][8];
new PlayerText:TuningBuy[MAX_PLAYERS][14];
new PlayerText:Fading[MAX_PLAYERS];
new PlayerText:KosacTD[MAX_PLAYERS][2];
new PlayerText:PaydayTD[MAX_PLAYERS][18];

new PlayerText:TaxistaTD[MAX_PLAYERS][12];
new PlayerText:SpecTextDraw[MAX_PLAYERS];
//new PlayerText:FG_GPS[MAX_PLAYERS]; <- Sklonjen zbog nekompatibilnosti sa drugim rezolucijama.
new PlayerText:WantedIgraca[MAX_PLAYERS];

//=============================[Dialozi]======================================

enum
{
dialog_REGISTER, 										   			   
dialog_COUNTRY,								   				   
dialog_AGE,								       		   				   
dialog_MAIL,										   	   				   
dialog_ORGANIZACIJA,          										   
dialog_PHARMACY,           										   	   
dialog_ORGCREATE,          										       
dialog_ORGTIP,           										       
dialog_MARKETBUY,	          										   
dialog_ORGRANK1,           										      
dialog_ORGRANK2,           										     
dialog_ORGRANK3,          										     
dialog_ORGRANK4,         										     
dialog_ORGRANK5,           										   
dialog_ORGRANK6,          										     
dialog_ORGINT1,          										    
dialog_ORGINT2,          										     
dialog_SERVERMI,          										  
dialog_NAPRAVISVE,           									
dialog_IZBRISISVE,         										
dialog_LIDER, 								
dialog_UBACIUORG,                                                
dialog_IZBACIIZORG,                                           
dialog_DODELIRANK,                                                  
dialog_SVICLANOVI,                                          
dialog_ORGDELETE, 									
dialog_IZMENISVE, 						
dialog_ORGEDIT,										
dialog_ORGNAME, 	 												
dialog_ORGRANKS, 													 
dialog_CLUCKIN, 														 
dialog_RESTORAN,														 
dialog_PIZZA,														 
dialog_DRINK,														 
dialog_GUNSHOP,														 
dialog_FNAME,														 
dialog_FEDIT,														 
dialog_FSELL,														 
dialog_FOPEN,														 
dialog_FCLOSE,														 
dialog_FGPOENI,														 
dialog_PCREATE,														 
dialog_VCREATE, 														 
dialog_KUPIKARTICU,													 
dialog_RADIO,														 
dialog_RVCREATE, 													 
dialog_PROPERTYWEPTAKE, 												 
dialog_JOBLIST, 														 
dialog_EVENTSTART, 													 
dialog_CREATEEVENT,		
dialog_CREATEEVENT2,													 
dialog_BUY_GPS, 									
dialog_GPS,		    					
dialog_FCREATE,              				
dialog_FIRMA,              							
dialog_FOMONEY,              					
dialog_FPMONEY,              							
dialog_FINFO,              										  	  
dialog_FLOCK,              										 
dialog_FCNAME,             								
dialog_HVCREATE,            					
dialog_ORGSPISAK,							
dialog_BURGMENU, 					
dialog_HELP, 									
dialog_LOGIN, 							
dialog_ORGLIST,						
dialog_IMCREATE,						
dialog_ORMAR,										
dialog_BUY_MOBILEPHONE,					
dialog_SEARCH_NAME,							
dialog_SEARCH_NUMBERPLATE,						
dialog_POSTAVIPOTERU,									
dialog_OCISTIDOSIJE,											   
dialog_OPREMA,										    
dialog_VEHICLEWEPTAKE,									    
dialog_MUNifORM,
dialog_TAXIOFFER,									          		 
dialog_KIOSK,									          
dialog_SPAWNCHANGE,									          	
dialog_PAYDAY, 								          		  		 
dialog_KREDIT,								          		  		
dialog_INFOKREDIT,								          		  	 
dialog_PROMENARATEKREDITA,								          	  
dialog_BALANCE,								          	  			 
dialog_RPTEST,								          	  			 
dialog_BANSTATUS,							          	  	
dialog_FDELETE,						          	  			   
dialog_IMDELETE,					          	  			     
dialog_OVCREATE,				          	  			            
dialog_CHANGEPASSWORD,			          	  			           
dialog_GPS_FIND,     											
dialog_VEDIT,    												
dialog_VPRICE,    												      
dialog_ICPRICE, 									
dialog_IOPEN, 										
dialog_ICLOSE, 									
dialog_ISELL, 							
dialog_ORGSKINS,													 
dialog_IEDIT, 														 
dialog_WAR,										
dialog_WAR_ZAKAZI_1,									
dialog_WAR_ZAKAZI_2,									
dialog_WAR_ZAKAZI_3,									
dialog_WAR_ZAKAZI_4,								
dialog_WAR_ZAKAZI_5,										
dialog_WAR_ZAKAZI_6,										
dialog_WAR_ZAKAZI_7,							
dialog_WAR_ZAKAZI_8,								
dialog_WARUBACI,													
dialog_WARIZBACI,													
dialog_VIP,	    											
dialog_IZMENABROJA, 								
dialog_DOGLAS,								
dialog_ORGPREFIX,							
dialog_VCOLOR,										
dialog_OFFIZBACIIZORG,								 		        
dialog_ORGDUTYP,							 		  
dialog_ORGEQUIPP,						 		
dialog_PROPERTYLIST,						 		
dialog_PROPCHOSEN,			
dialog_PROPUNAPREDI,						
dialog_SAFEPUTDRUG,					 		     
dialog_SAFETAKEDRUG,					 		     
dialog_SAFECHANGEPASS,					 		      
dialog_SAFEUNLOCK,					 		        
dialog_SAFEALL,					 		         
dialog_PROPSELLTP,			 		         	 
dialog_ACCEPTPROP,			 		         
dialog_ACCEPTFRIMA,			 		         	 	
dialog_FIRMASELLTP,			 		         	 		
dialog_ASMODEL,			 		         	 		 		
dialog_ASMAXMODEL,		 		         	 		 
dialog_VEHCHOSEN,		 		         	 		 
dialog_VEHLIST,
dialog_VEHICLETAKEDRUG,		         	 		 		 	
dialog_VEHICLEPUTDRUG,		         	 		 		 
dialog_GEPEKIZVADI,  	 	 		 		 		 	 	    
dialog_IVCREATE,	         	 		 		 	  
dialog_PORTABLE,	         	 		 		 	     	
dialog_GIVEHIT,	         	 		 		 	     	 		
dialog_HORDER,	         	 		 		 	     	 		 	 
dialog_RESETIRAJ,	        
dialog_SELECTSPORT,	         	 		 		 	     	 		
dialog_CREATESPORT,	         	 		 		 	     	
dialog_AVCREATE,		         	 		 		 	     
dialog_ANTICHEAT,	         	 		 		 	    
dialog_ANTICHEAT_2,	         	 		 		 	  
dialog_ANTICHEAT_3,	         	 		 		 	  
dialog_PROPSELLDRZAVA,	         	 		 		 	  
dialog_FIRMASELLDRZAVA,	         	 		 		 	
dialog_POLVCREATE,		 		 	     	 	 			
dialog_ORGPORTP, 		 		 	     	 	 			
dialog_HOTEL,		 		 	     	 	 				  
dialog_HOTELRENTP,	 		 	     	 	 				   
dialog_HOTELIZBACI,	 		 	     	 	 				 
dialog_HPMONEY,	 		 	     	 	 				     
dialog_HOMONEY,	 		 	     	 	 				  
dialog_HOTELLOCK,	 	     	 	 				     
dialog_HOTELSELLDRZAVA,	 	     	 	 				    
dialog_HOTELSELLTP,	 	     	 
dialog_ACCEPTHOTEL,	 	     	 	 				        
dialog_HEDIT, 	     	 	 				         	 	 	
dialog_HEPRICE, 	     	 	 				
dialog_HELEVEL, 	     	 	 				         	
dialog_POREZ,	     	 	 				         	 
dialog_POREZPAY,	     	 	 				       
dialog_EMAIL,   	 	 				         	 
dialog_CREATEGATE,	 				         	 	 
dialog_CREATEGATE_2, 				         
dialog_CREATEGATE_3,				         	 
dialog_CREATEGATE_4,				         	
dialog_ORGZSKINS,			         	 	 	
dialog_CREATEVEH,			         	 	 	
dialog_GRCREATE,			         	 	 		 
dialog_ORGMAXMEMB,	       
dialog_PILOT,	         	 	 		 		 		 
dialog_CREATEFIELD,         	 	 		 		 		 	
dialog_IMANJE,       	 	 		 		 		 	 	 
dialog_IMANJESELLDRZAVA,	 		 		 		 	 	   
dialog_IMANJESELLTP,	 		 		 		 	 	     
dialog_ACCEPTIMANJE,	 		 		 		 	 	    
dialog_IMEDIT,       	 	 		 		 		 	 	  
dialog_IMEPRICE,       	 	 		 		 		 	 	    
dialog_IMELEVEL,       	 	 		 		 		 	 	  
dialog_GEPEK,    	 	 		 		 		 	 	  
dialog_GEPEKOSTAVI,     	 	 	
dialog_IZVADIGAJBICE,  	 	 		 		 		 	 
dialog_SERVERSTATS,  	 	 		 		 		 	 
dialog_SERVERSTATS_2,	 	 		 		 		 
dialog_SERVERSTATS_3,	 	 		 		 		 	 	   
dialog_SERVERSTATS_4,	 	 		 		 		 	 	     	 
dialog_CREATEGATE_5,	 	 		 		 		 	 	
dialog_CREATEGATE_6,	 	 		 		 		 	 	
dialog_CREATEGARAGE, 	 		 		 		 	 	  
dialog_GARAZA, 	 		 		 		 	 	     
dialog_GARAGELOCK,	 		 		
dialog_ACCEPTGARAGE,	 		 		 		 	 
dialog_GARAGESELLDRZAVA,	 		 		 		 	 	  
dialog_GARAGESELLTP,	 		 		 		 	 	  
dialog_GEDIT,		 		 		 	 	
dialog_GEPRICE,		 		 		 	 	     
dialog_GELEVEL,		 		 		 	 	     
dialog_CREATEGPS,	 		 		 	 	     	 	
dialog_GPSEDIT,	 		 		 	 	     	 	 	 		   
dialog_IZMENAIMENAGPS,		 	
dialog_IZMENAIMENAGPS2,	 		 		 	 	    
dialog_IZMENAPOZGPS,	 		 		 	 	     	 	 	 	
dialog_CREATEAPORT, 		 		 	 	     	 	 	 		
dialog_SELECTAPORT,	 		 	 	     	 	 	 		     	 
dialog_APORTEDIT,		 	 	     	 	 	 		     	 	
dialog_IZMENAIMENAAPORT,		 	 	     	 	 	 		     	 
dialog_IZMENAIMENAAPORT2,		 	 	     	 	 	 		   	 
dialog_IZMENAPOZAPORT,		 	 	     	 	 	 		     	 
dialog_SELECTVPORT,		 	 	     	 	 	 		     	     
dialog_SPORTEDIT,	 	 	     	 	 	 		     	     	
dialog_IZMENAIMENASPORT,	 	 	     	 	 	 		     	     
dialog_IZMENAIMENASPORT2,	 	 	     	 	 	 		         
dialog_IZMENAPOZSPORT,	 	 	     	 	 	 		     	     
dialog_CREATEJOBBusiness,	 	 	     	 	 	 		         
dialog_INVENTORY,	 	 	     	 	 	 		         	    
dialog_GIVEQUANTITY, 	 	     	 	 	 		         	     
dialog_GIVEITEM,	 	     	 	 	 		         	     	 
dialog_ORGDRUGCHOSE,	 	     	 	 	 		         	    	 
dialog_ORGDRUGCHOSE_2,	 	     	 	 	 		         	    
dialog_PRCREATE,	 	     	 	 	 		         	     		 
dialog_ASAMMOUNT,	 	     	 	 	 		         	     	 
dialog_SELECTVGUN,	 	     	 	 	 		         	     	 
dialog_TUNING,  	 	     	 	 	 		         	     	 	 
dialog_TUNING_2, 	     	 	 	 		         	     	     
dialog_VVCREATE,	     	 	 	 		         	     	    	 
dialog_UBACIUORG_2,                                                 
dialog_AUTOSEDIT,                                                 	 
dialog_ASEDITAMMOUNT,                                                 
dialog_BIRAJLOKACIJU,                                                 
dialog_VERifIKACIJA,
dialog_CCTV,                                                			 
dialog_RADIOPLAY,                                         			 
dialog_LIDER_2,                                          		 	 
dialog_WAR_ZAKAZI_9,                                     		 	
dialog_SELECTPPORT,                                    		 	     
dialog_IZAZOVITRKA,                                     		 	     
dialog_ORGSAFE,                                    		 	         
dialog_ORGSAFEPUT,                                    		 	    
dialog_ORGSAFETAKE,                                    		 	     
dialog_ORGSAFETMONEY,                                    		     
dialog_ORGSAFETDRUG,                                   		 	     
dialog_ORGSAFEPMONEY,                                   		 	     
dialog_ORGSAFEPDRUG,                                   		 	     
dialog_ORGSAFEWEAPON,                                   		 	     
dialog_VEHCOLOR,                                   		 	     	 
dialog_VEHSELLTP,                                  		 	     	 
dialog_ACCEPTVEH,                                  		 	     	 
dialog_ASKLISTA,                                 		 	     	 
dialog_ASKLISTA_2,                                 		 	     	 
dialog_RENTABLE,                                		 	     		 
dialog_PROPTAKEMONEY,                           		 	     		
dialog_PROPPUTMONEY,                           		 	     		
dialog_ZAMENA_1,                          		 	     		 	 
dialog_ZAMENA_2,                          		 	     		 	 
dialog_ZAMENA_3,                          		 	     		 	 
dialog_ZAMENA_4,                          		 	     		 	 
dialog_RCONPROVERA,
dialog_CREATERADAR,                     		 	     		 	 	
dialog_UPLATITIKET,                    		 	     		 	 	 
dialog_UPLATITIKET_2,                    		 	     		 	 
dialog_UPLATITIKET_3,                    		 	     		 	 
dialog_UPLATITIKET_4,                    		 	     		 	
dialog_DONATORBOJA,                    		 	     		 	     
dialog_GANGZCOLOR,                   		 	     		 	     
dialog_ORGCOLOR,                  		 	     		 	     	 
dialog_GANGZEDIT,                   		 	     		 	     	 
dialog_GANGZCOLOREDIT,                   		 	     		 	 
dialog_GANGZID,                   		 	     		 	     	                		 	     		 	     	 
dialog_SAVEZ,                     		 	     		 	     	 
dialog_VEHMONEYBUY,               		 	     		 	     	 
dialog_VEHGOLDBUY,               		 	     		 	     	 
dialog_IZABERITABLICE,         		 	     		 	     	     
dialog_IZABERITABLICE_2,         		 	     		 	     	 
dialog_VEHICLETAKEMATS,  		 	     		 	     	 		 
dialog_VEHICLEPUTMATS,  		 	     		 	     	 		     
dialog_SAFEPUTMATS,   		 	     		 	     	 		     
dialog_SAFETAKEMATS,  		 	     		 	     	 		     
dialog_CREATEFSTATION,		 	     		 	     	 		     
dialog_PUMPA,        		 	     		 	     	 		     
dialog_IMEPUMPE,        		 	     		 	     	 	     
dialog_DIZELCENA,    		 	     		 	     	 		     
dialog_BENZINCENA,   		 	     		 	     	 		     
dialog_GASNOCENA,    		 	     		 	     	 		     
dialog_FCORDEXIT,    		 	     		 	     	 		     
dialog_FEDITTYPE,  		 	     		 	     	 		     	 
dialog_DELIVERPEPSI,	 	     		 	     	 		     	 	 
dialog_NEONSHOP, 	     		 	     	 		     	 		 
dialog_PARKING,	     		 	     	 		     	 		 	 
dialog_PARKING_2,	     		 	     	 		     	 		 
dialog_PARKING_3,	     		 	     	 		     	 		
dialog_ORGSPRAY,                                					 	 
dialog_POL,                                                           
dialog_AC,                                                            
dialog_PLifT1,
dialog_PLifT2,
dialog_PLifT3,
dialog_PD_ENT,                                                        
dialog_PD_KROV,                                                       
dialog_PD_GARAZA,                                                     
dialog_KGUN1,            												     
dialog_KGUN2,            												     
dialog_KGUN3,            												     
dialog_KGUN4,            												     
dialog_KGUN5,            											         
dialog_KGUN6,            													
dialog_KGUN7,           												     
dialog_KGUN8,            													 
dialog_KGUN9,          												     
dialog_KGUN10,            													 
dialog_KGUN11,            											        
dialog_KGUN12,            	                                                 
dialog_KGUN13,            													 
dialog_STATS,                                             
dialog_CREATEVPORT, 		 		 	 	     	 	 	 		     
dialog_VPORTEDIT,		 	 	     	 	 	 		     	 	 
dialog_IZMENAIMENAVPORT,		 	 	     	 	 	 		     	 
dialog_IZMENAIMENAVPORT2,		 	 	     	 	 	 		   	 
dialog_IZMENAPOZVPORT,		 	 	     	 	 	 		     	 
dialog_CREATEPPORT, 		 		 	 	     	 	 	 		     
dialog_PPORTEDIT,		 	 	     	 	 	 		     	 	 
dialog_IZMENAIMENAPPORT,		 	 	     	 	 	 		     	 
dialog_IZMENAIMENAPPORT2,		 	 	     	 	 	 		   	
dialog_IZMENAPOZPPORT,		 	 	     	 	 	 		     	
dialog_PRIKAZNOVAJLIJA,		 	 	     	 	 	 		     	
dialog_FISHJUSTCAUGHT, 											     
dialog_DAILYDEAL,                                                     
dialog_AKTORANIMACIJA, 												 
dialog_BURG, 														 
dialog_CHOSEGAME,                                					 
dialog_RACEINVITE,              									 
dialog_csmaps,                                					 	 
dialog_AKTIVPOENI,													 
dialog_STRELJANA,													 
dialog_HAPPYHOURS,													 
dialog_ZAHTEVTP,														 
dialog_VPNLIST, 														 
dialog_MENU, 														 
dialog_MOVE_SPEED, 													 
dialog_ROT_SPEED, 													
dialog_EXPORTNAME, 													 
dialog_CLOSE_NEW, 													 
dialog_RENT,															 
dialog_RENTVREME, 													 
dialog_SELECTVDODATAK, 												 
dialog_AKTORPANEL,													 
dialog_KREIRAJAKTORA1,												 
dialog_KREIRAJAKTORA2,											     
dialog_IZMENIAKTORA,													 
dialog_IZMENIPOZICIJU,												 
dialog_IZMENISKIN,          											 
dialog_IZMENIIME,													 
dialog_IZBRISIAKTORA,												 
dialog_BRISANJEAKTORA,
dialog_EMPTY,
dialog_ADMINI,
dialog_HELPERI,
dialog_SETTINGS,
dialog_AHELP,
dialog_COBJECT,
dialog_DUELINVITE,
dialog_DUELGUN,
dialog_DUELHP,
dialog_DUELARMOR,
dialog_DUELPROTIVNIK
}

//------------------------------------------------------------------------------
new gLastDriver[MAX_VEHICLES],
Neon[MAX_VEHICLES],
VehicleWindows[MAX_VEHICLES],
Text3D:vehicle3Dtext[MAX_VEHICLES],
CarSign[MAX_VEHICLES],
TipVozila[MAX_VEHICLES],
PumpaVozilo[MAX_VEHICLES],
OrgaVozila[MAX_VEHICLES],
PosaoVozila[MAX_VEHICLES],
ScriptIDVozila[MAX_VEHICLES],
bool:occupied[MAX_VEHICLES] = false,
Fuel[MAX_VEHICLES],
FuelTime[MAX_VEHICLES],
vCanDrive[MAX_VEHICLES],
Siren[MAX_VEHICLES],
SirenObject[MAX_VEHICLES],
StateBox[MAX_VEHICLES],
KamionUsed[MAX_VEHICLES],
CisternFuel[MAX_VEHICLES][4],
ParkingTime[MAX_VEHICLES],
Parked[MAX_VEHICLES],
bool:KutijaMatsa[MAX_VEHICLES],
bool:sljunak[MAX_VEHICLES],
bool:VehCement[MAX_VEHICLES],
bool:VehNovac[MAX_VEHICLES],
bool:WOOD[MAX_VEHICLES],
WOODObject[MAX_VEHICLES],
NeonObject1[MAX_VEHICLES],
NeonObject2[MAX_VEHICLES];
//------------------------------------------------------------------------------
#define MAX_OBJ_FURNITURE 136
static const
OBPR[MAX_OBJ_FURNITURE][2] =
{
	{936,  1160},
	{937, 1150},
	{1417, 1240},
	{1742, 1405},
	{1754, 1186},
	{1755, 1183},
	{1756, 1210},
	{1759, 1200},
	{1762, 1210},
	{1768, 1265},
	{1769, 1650},
	{1814, 1209},
	{1816, 1068},
	{1817, 1086},
	{1820, 1009},
	{1823, 1701},
	{2020, 1905},
	{2025, 1600},
	{2163, 1237},
	{2161, 1068},
	{2162, 2040},
	{2164, 1360},
	{2204, 1780},
	{2191, 1696},
	{2199, 1900},
	{2235, 1086},
	{2295, 906},
	{2291, 1204},
	{2292, 2208},
	{2306, 1050},
	{2200, 1630},
	{2307, 1300},
	{1481, 1120},
	{1518, 1806},
	{1700, 1802},
	{1701, 1703},
	{1771, 1500},
	{1719, 1240},
	{1736, 1210},
	{1745, 1080},
	{1749, 1216},
	{1750, 1180},
	{1783, 1159},
	{1786, 1189},
	{1788, 1204},
	{1790, 1228},
	{1793, 1600},
	{1795, 1558},
	{1796, 1600},//
	{1798, 1630},
	{1799, 1624},
	{1828, 1150},
	{1802, 1615},
	{1809, 1150},
	{2028, 1306},
	{2099, 1450},
	{2002, 1090},
	{2100, 1450},
	{2101, 1150},
	{2102, 1180},
	{2103, 1165},
	{2104, 1186},
	{2090, 1780},
	{2093, 1480},
	{2226, 1267},
	{2296, 2020},
	{2299, 2200},
	{2302, 1600},
	{2312, 1180},
	{2316, 1165},
	{2566, 1350},
	{2575, 1290},
	{1432, 1360},
	{1433, 1300},
	{1704, 1186},
	{1671, 1105},
	{1663, 1190},
	{1705, 1210},
	{1708, 1180},
	{1711, 1120},
	{1720, 1275},
	{1721, 1260},
	{1827, 1264},
	{1723, 1360},
	{1724, 1240},
	{1726, 1390},
	{1727, 1270},
	{1728, 1300},
	{1729, 1210},
	{1739, 1240},
	{1746, 1189},
	{1805, 1230},
	{1806, 1460},
	{1810, 1515},
	{2206, 1369},
	{2207, 1870},
	{2169, 1750},
	{2311, 1240},
	{2315, 1249},
	{2370, 1150},
	{2635, 1186},
	{2346, 1267},
	{1825, 1564},
	{2173, 1390},
	{2205, 1680},
	{2313, 1870},
	{11682, 1656},
	{11683, 1257},
	{11684, 1237},
	{11685, 2374},
	{19916, 2375},
	{19922, 1277},
	{19923, 2572},
	{19925, 1238},
	{19926, 1654},
	{19927, 1328},
	{19928, 1234},
	{19929, 2231},
	{19930, 1122},
	{19931, 1185},
	{19932, 1154},
	{19933, 1411},
	{19934, 1562},
	{19935, 1154},
	{19936, 1185},
	{19937, 1128},
	{11717, 1185},
	{2514, 1234},
	{2516, 1865},
	{2517, 1876},
	{2518, 1237},
	{2522, 1234},
	{2524, 1235},
	{2525, 1651},
	{2526, 1272},
	{2528, 1278}
};

static const
Float:OBPR1[MAX_OBJ_FURNITURE][6] =
{
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 136.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 0.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 180.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 0.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 180.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 180.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 180.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 180.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 180.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 180.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 180.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 180.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 180.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 180.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 180.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 180.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 270.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 270.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000},
	{2372.01563, -1903.90454, 14.0000, 0.0000, 0.0000, 90.0000}
};

new bool:realchat 				 = true,
timeshift                    = 0, // Podesavanje vremenske zone (koliko sat napreduje/kasni - samo za host)
ghour                        = 0,
gminute                      = 0,
gsecond                      = 0,
levelexp                     = 5,
smscost                      = 10,
cchargetime                  = 60,
Medics                       = 0,
callcost                     = 4,
bool:realtime                = true,
wtime                        = 12,
addtimer                     = 60000,
bool:adds                    = true,
bool:ToggedG                 = true,
TimerBankeVracanje,
TimerZlatareVracanje,
glavniobjekt,
shifthour,
carspawntimer;

new RealName[MAX_PLAYERS][MAX_PLAYER_NAME];
new newsbre = 1,
newstimer = 10000;
new bool:RiotShield[MAX_PLAYERS],
bool:UzeoPicu[MAX_PLAYERS],
bool:electricNACP[MAX_PLAYERS],
bool:PoliceDuty[MAX_PLAYERS];
new lastweapon[MAX_PLAYERS][2];
new ReportGlobal[MAX_PLAYERS],
GotoCMD[MAX_PLAYERS],
vRTC[MAX_PLAYERS],
BusLinija[MAX_PLAYERS],
VozPosao[MAX_PLAYERS],
BusVozac[MAX_PLAYERS],
PosaoMasinovodja[MAX_PLAYERS],
VIPPort[MAX_PLAYERS],
PromoterPort[MAX_PLAYERS],
PlacaPorez[MAX_PLAYERS],
NewGlobal[MAX_PLAYERS],
FixVehGlobal[MAX_PLAYERS];
new Training[MAX_PLAYERS];
new bool:PlayerLogged[MAX_PLAYERS];
new EditKontejnera[MAX_PLAYERS],
EditBrzeHrane[MAX_PLAYERS],
EditGovornice[MAX_PLAYERS],
EditNargile[MAX_PLAYERS],
EditSprayGang[MAX_PLAYERS],
EditRadar[MAX_PLAYERS],
EditPresents[MAX_PLAYERS],
EditCTrees[MAX_PLAYERS],
EditXOrbs[MAX_PLAYERS],
EditATM[MAX_PLAYERS];
new ChosenJob[MAX_PLAYERS],
LetSF[MAX_PLAYERS],
PilotTimer[MAX_PLAYERS],
FarbanjeTimer[MAX_PLAYERS],
PProzoraTimer[MAX_PLAYERS],
LetLV[MAX_PLAYERS];
new VremeZaNovac[MAX_PLAYERS],
VremeZaZlato[MAX_PLAYERS],
CheckpointStatus[MAX_PLAYERS],
ZlatoVreme[MAX_PLAYERS],
PljackanjeZlatareTimer[MAX_PLAYERS],
PljackaZlato[MAX_PLAYERS],
PljackanjeBankeTimer[MAX_PLAYERS],
PljackaVreme[MAX_PLAYERS],
PljackaNovac[MAX_PLAYERS];

new reactionMoney,
reactionMessage[2][128],
bool:reactionWon,
reactionWinner[MAX_PLAYER_NAME],
reactionTest,
reactionTime = 0;

new Odgovor, ReakcijaAktivna;

new IzabraniParovi1[10], IzabraniParovi2[10];

new bool:ListaPrikazana[MAX_PLAYERS],
bool:RezultatiPrikazana[MAX_PLAYERS],
bool:MojListicPrikazan[MAX_PLAYERS];


new Float:Degree[MAX_PLAYERS];
const Float: SelfieRadius = 1.4;
const Float: SelfieSpeed  = 1.25;
const Float: SelfieHeight = 1.0;
new Float:lX[MAX_PLAYERS];
new Float:lY[MAX_PLAYERS];
new Float:lZ[MAX_PLAYERS];

new imaVPN[MAX_PLAYERS];

new SKSK[MAX_PLAYERS];

new NamestajLevel[MAX_PLAYERS],
NamestajTajmer[MAX_PLAYERS],
NamestajTajmer2[MAX_PLAYERS],
Objekat[MAX_PLAYERS],
Rezanje[MAX_PLAYERS],
KoristioRezanje[MAX_PLAYERS];

new Seeds[MAX_PLAYERS],
ParkingPlace[MAX_PLAYERS],
CreatingParkingLevel[MAX_PLAYERS],
CreateParkingID[MAX_PLAYERS],
DeliverLevel[MAX_PLAYERS],
DeliverCar[MAX_PLAYERS],
TrafikaPrva[MAX_PLAYERS],
TrafikaTrenutna[MAX_PLAYERS],
CarriesBox[MAX_PLAYERS],
Putovar[MAX_PLAYERS],
bool:Putovara[MAX_PLAYERS],
Pistovar[MAX_PLAYERS],
bool:Pistovara[MAX_PLAYERS],
ProcesFStation[MAX_PLAYERS],
CreatingFStation[MAX_PLAYERS],
//BikeBH[MAX_PLAYERS],
EventStranica[MAX_PLAYERS],
StatsList[MAX_PLAYERS],
zauzimanje_firme_ID[MAX_PLAYERS],
zauzimanje_firme_Vreme[MAX_PLAYERS],
zauzimanje_firme_Timer[MAX_PLAYERS],
OruzjeUInventoriju[MAX_PLAYERS],
bool:KupljeneFakture[MAX_PLAYERS],
bool:takingselfie[MAX_PLAYERS],
PlayerInBlowJob[MAX_PLAYERS],
BlowJobCount[MAX_PLAYERS],
PlayerText:BLOWJOBCOVER[MAX_PLAYERS][5],
PusenjeTimer[MAX_PLAYERS],
IzabraniAskQ[MAX_PLAYERS],
Timer_Fading[MAX_PLAYERS],
Polaganje[MAX_PLAYERS],
PlayerCement[MAX_PLAYERS],
IDVozilaKojimSverca[MAX_PLAYERS],
ProcesSvercanja[MAX_PLAYERS],
PlayerPrevozNovca[MAX_PLAYERS],
F_Count[MAX_PLAYERS],
DropedGun[MAX_PLAYERS],
BrojLisica[MAX_PLAYERS],
TazerMetkovi[MAX_PLAYERS],
FakeKillPlus[MAX_PLAYERS],
FakeKillTime[MAX_PLAYERS],
PoljeDroge[MAX_PLAYERS],
Poravnano[MAX_PLAYERS],
WatchModel[MAX_PLAYERS],
ChosenItem[MAX_PLAYERS],
GiveItemID[MAX_PLAYERS],
AdminVozilo[MAX_PLAYERS],
TrkaVozilo[MAX_PLAYERS],
IzazivanjeTimer[MAX_PLAYERS],
Krugovi[MAX_PLAYERS],
TrkaCheckpoint[MAX_PLAYERS],
TrkaIzazov[MAX_PLAYERS],
bool:NaDmEventu[MAX_PLAYERS],
bool:NaDustu[MAX_PLAYERS],
bool:NaInferno[MAX_PLAYERS],
bool:NaAssault[MAX_PLAYERS],
bool:NaSnow[MAX_PLAYERS],
bool:NaUtrci[MAX_PLAYERS],
bool:ShowedRegister[MAX_PLAYERS],
ResprayColor1[MAX_PLAYERS],
ResprayColor2[MAX_PLAYERS],
DragedPlayerID[MAX_PLAYERS],
Draged[MAX_PLAYERS],
DragTimer[MAX_PLAYERS],
ShowedAtmTD[MAX_PLAYERS],
gpsid[MAX_PLAYERS],
EnteredGarage[MAX_PLAYERS],
ServerStatsChose[MAX_PLAYERS],
bool:PraznaGajbica[MAX_PLAYERS],
bool:ImaKanticu[MAX_PLAYERS],
GajbicaBiljka[MAX_PLAYERS],
bool:ElectricOprema[MAX_PLAYERS],
BrojilaKuca[MAX_PLAYERS],
EIDK[MAX_PLAYERS],
ElectricPosao[MAX_PLAYERS],
Bandera[MAX_PLAYERS],
bool:MedicDuty[MAX_PLAYERS],
backuptimer[MAX_PLAYERS],
SeedsK[MAX_PLAYERS],
TPZahtev[MAX_PLAYERS],
GotoTimer[MAX_PLAYERS];

new vagonSpawn;

new skinlist = mS_INVALID_LISTID; // Buy skins

//new MaleSkinNames[][] = { "Turista", "Belac_sa_kapuljacom", "Crnac_sa_majcom", "Beskucnik" ];
new MaleSkinIDs[][] = { 26, 29, 28, 137 };

//new FemaleSkinNames[][] = { "Bogata_zena", "Ulicna_devojka", "Poslovna_zena", "Belkinja_u_suknji" ];
new FemaleSkinIDs[][] = { 12, 13, 141, 169 };

// - Variables
new EndWood[MAX_PLAYERS];

new bool:InputPassword[MAX_PLAYERS],
bool:ChoseCountry[MAX_PLAYERS],
bool:InputAge[MAX_PLAYERS],
bool:InputMail[MAX_PLAYERS],
RegSex[MAX_PLAYERS],
BiraSkin[MAX_PLAYERS],
BiraPol[MAX_PLAYERS];
new GlobalProdaja[MAX_PLAYERS],
Ponudjeno[MAX_PLAYERS],
Trazio[MAX_PLAYERS],
GlobalCena[MAX_PLAYERS],
GlobalID_2[MAX_PLAYERS],
GlobalID[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new SpecaLik[MAX_PLAYERS];
new MarriageCeremoney[MAX_PLAYERS char];
new ProposeOffer[MAX_PLAYERS],
DivorceOffer[MAX_PLAYERS];
new ProposedTo[MAX_PLAYERS];
new GotProposedBy[MAX_PLAYERS];
new MarryWitness[MAX_PLAYERS];
new MarryWitnessOffer[MAX_PLAYERS];
new WatchingTV[MAX_PLAYERS char];
new bool:AdminDuty[MAX_PLAYERS],
bool:AdminAfk[MAX_PLAYERS],
MinutiIgraca[MAX_PLAYERS],
IgracPosadio[MAX_PLAYERS],
VremeZaCuvanje[MAX_PLAYERS],
IzabraniPort[MAX_PLAYERS],
ChosenVehicle[MAX_PLAYERS],
KreiranAutoSalon[MAX_PLAYERS],
KreiraGarazu[MAX_PLAYERS],
bool:PlayerCPShow[MAX_PLAYERS],
Float:SpecPos[MAX_PLAYERS][3],
SpecVW[MAX_PLAYERS],
SpecInt[MAX_PLAYERS],
Float:PozicijaWAR[MAX_PLAYERS][3],
VirtualWWAR[MAX_PLAYERS],
InteriorWAR[MAX_PLAYERS],
KreiranjeWara[MAX_PLAYERS],
anticheatinfo[MAX_PLAYERS];
new InAmbu[MAX_PLAYERS];
new bool:TelohraniteljUniforma[MAX_PLAYERS],
bool:VozacUniforma[MAX_PLAYERS];
new TrashLimit[MAX_PLAYERS],
TrashTimer[MAX_PLAYERS],
	TrashSearch[MAX_PLAYERS];
new JediLimit[MAX_PLAYERS],
JediTimer[MAX_PLAYERS],
	JediSearch[MAX_PLAYERS];
new NargilaLimit[MAX_PLAYERS],
NargilaTimer[MAX_PLAYERS],
	PusiNargilu[MAX_PLAYERS];
new bool:NosiObjekt[MAX_PLAYERS][3];
new PropertySafeGun[MAX_PLAYERS];
new PaketType[MAX_PLAYERS],
bool:NosiPaketOruzja[MAX_PLAYERS];
new TimerLearn[MAX_PLAYERS];
new LoginTimer[MAX_PLAYERS];
new ProveriInvOruzje[MAX_PLAYERS];
new TimerTutorial[MAX_PLAYERS];
new TimerPitanje[MAX_PLAYERS];
new BolnicaTimer[MAX_PLAYERS];
new rampagranice1_1,
rampagranice1_2,
rampagranice2_2,
rampagranice2_4,
plift1,
plift2,
plift3;

new busilicam[4], busilica[7];
new bool:VrataBankeSrusena,
bool:VrataBankeHakovana,
bool:SefBankeOtvoren,
LozinkaBanke[32],
VrataSefaBanke,
SefBanke,
VrataSefaBankeZaHack,
Text3D:Dinamit3D,
DinamitObjekt,
SekundDinamita,
Text3D:Busenje3D,
SekundBusenja,
bool:SruseniLaseri,
bool:BankaOpljackana,
bool:PljackaUToku,
bool:ZlataraUToku,
bool:ZlataraOpljackana,
LaseriBanka[4];
new ChosenProperty[MAX_PLAYERS];
new cseconds, cstring[40];
new PokusajiHakedovanja[MAX_PLAYERS],
HakovanjeTimer[MAX_PLAYERS],
KupljenGPS[MAX_PLAYERS],
bool:PozvaoTaxi[MAX_PLAYERS],
CenaVoznje[MAX_PLAYERS],
bool:taxiDuty[MAX_PLAYERS],
bool:TaximetarUkljucen[MAX_PLAYERS],
VoziIgracaID[MAX_PLAYERS],
offeredByCabbie[MAX_PLAYERS],
TrunkVehicle[MAX_PLAYERS],
TazerTimer[MAX_PLAYERS],
TaxiTimer[MAX_PLAYERS],
PlayerCuffed[MAX_PLAYERS],
PosaoRudar[MAX_PLAYERS],
PosaoVocar[MAX_PLAYERS],
PosaoDrvoseca[MAX_PLAYERS],
ponudjenotomigacu[MAX_PLAYERS],
bool:PlayerDrugged[MAX_PLAYERS],
bool:PlayerStoned[MAX_PLAYERS],
bool:PosaoTDShowed[MAX_PLAYERS],
bool:PlayerTuningCar[MAX_PLAYERS],
bool:StatsTDShowed[MAX_PLAYERS],
bool:BuyCarTDShowed[MAX_PLAYERS],
bool:IgracSeRegistruje[MAX_PLAYERS],
bool:PocetniTutorialStartovan[MAX_PLAYERS],
bool:LaptopRuke[MAX_PLAYERS],
bool:VecjeUsao[MAX_PLAYERS],
bool:Dinamit[MAX_PLAYERS],
bool:NightVision[MAX_PLAYERS],
bool:PuniGorivo[MAX_PLAYERS],
ProcesPice[MAX_PLAYERS],
PlayerCode[MAX_PLAYERS],
bool:TogHud[MAX_PLAYERS],
bool:TogTag[MAX_PLAYERS],
bool:IgracZavezan[MAX_PLAYERS],
bool:IgracPeca[MAX_PLAYERS],
bool:AccountVerified[MAX_PLAYERS],
bool:KnockedDown[MAX_PLAYERS],
bool:IgracOpljackan[MAX_PLAYERS],
bool:Pojas[MAX_PLAYERS],
bool:Uze[MAX_PLAYERS],
bool:Maskuse[MAX_PLAYERS],
bool:FlyMode[MAX_PLAYERS],
SearchNadji[MAX_PLAYERS],
bool:ImaTazer[MAX_PLAYERS];
new ListaoObjekte[MAX_PLAYERS],
nekokupujenamestaj = 0,
KupujeNamestaj[MAX_PLAYERS];
new VrstaIlegala[MAX_PLAYERS],
KolicinaIlegala[MAX_PLAYERS];
new Odbrojavanje[MAX_PLAYERS];
new bool:Uciskolu[MAX_PLAYERS],
SkolaTimer[MAX_PLAYERS],
oSkolaLimit, 
sSkolaLimit, 
FakultetLimit;

new bool:UzeoOpremu[MAX_PLAYERS];
new bool:RibarOprema[MAX_PLAYERS];
new bool:PereProzorcinu[MAX_PLAYERS];

new Grass[38][MAX_PLAYERS],
GrassID[38][MAX_PLAYERS],
TravaTimer[MAX_PLAYERS],
bool:KrenuoKosenje[MAX_PLAYERS],
PokosenaTrava[MAX_PLAYERS];
new PolaganjeBodovi[MAX_PLAYERS],
StaroVreme[MAX_PLAYERS],
NovoVreme[MAX_PLAYERS];
new GreskaVoznja[MAX_PLAYERS];
new ListaBurg[MAX_PLAYERS];
new UzeoIzMarketa[MAX_PLAYERS][11],
UkupnaCena[MAX_PLAYERS];
new bool:FaceOn[MAX_PLAYERS],
bool:HeadOn[MAX_PLAYERS],
bool:HelmetOn[MAX_PLAYERS],
bool:SungOn[MAX_PLAYERS];
new PonudioIgrac[MAX_PLAYERS];
new ModelTrke[MAX_PLAYERS];
new UlogTrke[MAX_PLAYERS];
new inProperty[MAX_PLAYERS],
inOrgInt[MAX_PLAYERS],
inHotel[MAX_PLAYERS],
uInterijeru[MAX_PLAYERS],
uFirmi[MAX_PLAYERS];
new CenaProdaje[MAX_PLAYERS];
new EditingBody[MAX_PLAYERS];
new RadioStatus[MAX_PLAYERS];
new UsaoAutoProdaja[MAX_PLAYERS];
new FirstSpawn[MAX_PLAYERS];
new CreatingOrg[MAX_PLAYERS];
new LoginAttempt[MAX_PLAYERS];
new CommandTime[MAX_PLAYERS];

static const g_aPreloadLibs[134][13] = {
"AIRPORT",      "ATTRACTORS",   "BAR",          "BASEBALL",     "BD_FIRE",
"BEACH",        "BENCHPRESS",   "BF_INJECTION", "BIKE_DBZ",     "BIKED",
"BIKEH",        "BIKELEAP",     "BIKES",        "BIKEV",        "BLOWJOBZ",
"BMX",          "BOMBER",       "BOX",          "BSKTBALL",     "BUDDY",
"BUS",          "CAMERA",       "CAR",          "CAR_CHAT",     "CARRY",
"CASINO",       "CHAINSAW",     "CHOPPA",       "CLOTHES",      "COACH",
"COLT45",       "COP_AMBIENT",  "COP_DVBYZ",    "CRACK",        "CRIB",
"DAM_JUMP",     "DANCING",      "DEALER",       "DILDO",        "DODGE",
"DOZER",        "DRIVEBYS",     "FAT",          "FIGHT_B",      "FIGHT_C",
"FIGHT_D",      "FIGHT_E",      "FINALE",       "FINALE2",      "FLAME",
"FLOWERS",      "FOOD",         "FREEWEIGHTS",  "GANGS",        "GFUNK",
"GHANDS",       "GHETTO_DB",    "GOGGLES",      "GRAFFITI",     "GRAVEYARD",
"GRENADE",      "GYMNASIUM",    "HAIRCUTS",     "HEIST9",       "INT_HOUSE",
"INT_OFFICE",   "INT_SHOP",     "JST_BUISNESS", "KART",         "KISSING",
"KNifE",        "LAPDAN1",      "LAPDAN2",      "LAPDAN3",      "LOWRIDER",
"MD_CHASE",     "MD_END",       "MEDIC",        "MISC",         "MTB",
"MUSCULAR",     "NEVADA",       "ON_LOOKERS",   "OTB",          "PARACHUTE",
"PARK",         "PAULNMAC",     "PED",          "PLAYER_DVBYS", "PLAYIDLES",
"POLICE",       "POOL",         "POOR",         "PYTHON",       "QUAD",
"QUAD_DBZ",     "RAPPING",      "RifLE",        "RIOT",         "ROB_BANK",
"ROCKET",       "RUNNINGMAN",   "RUSTLER",      "RYDER",        "SCRATCHING",
"SEX",          "SHAMAL",       "SHOP",         "SHOTGUN",      "SILENCED",
"SKATE",        "SMOKING",      "SNIPER",       "SNM",          "SPRAYCAN",
"STRIP",        "SUNBATHE",     "SWAT",         "SWEET",        "SWIM",
"SWORD",        "TANK",         "TATTOOS",      "TEC",          "TRAIN",
"TRUCK",        "UZI",          "VAN",          "VENDING",      "VORTEX",
"WAYFARER",     "WEAPONS",      "WOP",          "WUZI"
};

new ZabranjeneReci[][] = {
"http://","https://",".com",".net",".org",".hr",".info",".ba",".tk","www","7777","7778","7878","7877","7789",
"gf","server","Extazy","life","city","balkan","united","ultimate","battle","craft","ucfr","Xeptic","geforce",
"srw","serv","srv","angels","angeles","battle-craft","ultimate","roleplay","ludi-grad","Ludi Grad","lu di grad",
"gaming","gamming","uif","samp", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "CroHerze", "Cro Herze", "Old School",
"Zara", "mater", "majka", "jebem", "votestr", "picka", "jebi", "govno", "govna", "uif", "cheat", "hack", "Balkan School",
"btl", "ts", "ts3", "balkan thug life", "skill arena"
};

new ImeVozila[212][20] = {
	"Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel",
	"Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus",
	"Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
	"Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection",
	"Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus",
	"Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie",
	"Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral",
	"Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder",
	"Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Berkley's RC Van",
	"Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale",
	"Oceanic","Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy",
	"Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX",
	"Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper",
	"Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking",
	"Blista Compact", "Police Maverick", "Boxvillde", "Benson", "Mesa", "RC Goblin",
	"Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher", "Super GT",
	"Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt",
	"Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra",
	"FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune",
	"Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer",
	"Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
	"Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo",
	"Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite",
	"Windsor", "Monster", "Monster", "Uranus", "Jester", "Sultan", "Stratum",
	"Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
	"Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper",
	"Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400",
	"News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
	"Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car",
	"Police Car", "Police Car", "Police Ranger", "Picador", "S.W.A.T", "Alpha",
	"Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs", "Boxville",
	"Tiller", "Utility Trailer"
};

new Float:CheatPositions[46][3]= {
{-1935.77, 228.79, 34.16},//Transfender near Wang Cars in Doherty
{-2707.48, 218.65, 4.93},//Wheel Archangels in Ocean Flats
{2645.61,-2029.15,14.28},//LowRider Tuning Garage in Willowfield
{1041.26,-1036.77,32.48},//Transfender in Temple
{2387.55,1035.70,11.56},//Transfender in come-a-lot
{1836.93,-1856.28,14.13},//Eight Ball Autos near El Corona
{2006.11,2292.87,11.57},//Welding Wedding Bomb-workshop in Emerald Isle
{-1787.25,1202.00,25.84},//Michelles Pay 'n' Spray in Downtown
{720.10,-470.93,17.07},//Pay 'n' Spray in Dillimore
{-1420.21,2599.45,56.43},//Pay 'n' Spray in El Quebrados
{-100.16,1100.79,20.34},//Pay 'n' Spray in Fort Carson
{2078.44,-1831.44,14.13},//Pay 'n' Spray in Idlewood
{-2426.89,1036.61,51.14},//Pay 'n' Spray in Juniper Hollow
{1957.96,2161.96,11.56},//Pay 'n' Spray in Redsands East
{488.29,-1724.85,12.01},//Pay 'n' Spray in Santa Maria Beach
{1025.08,-1037.28,32.28},//Pay 'n' Spray in Temple
{2393.70,1472.80,11.42},//Pay 'n' Spray near Royal Casino
{-1904.97,268.51,41.04},//Pay 'n' Spray near Wang Cars in Doherty
{403.58,2486.33,17.23},//Player Garage: Verdant Meadows
{1578.24,1245.20,11.57},//Player Garage: Las Venturas Airport
{-2105.79,905.11,77.07},//Player Garage: Calton Heights
{423.69,2545.99,17.07},//Player Garage: Derdant Meadows
{785.79,-513.12,17.44},//Player Garage: Dillimore
{-2027.34,141.02,29.57},//Player Garage: Doherty
{1698.10,-2095.88,14.29},//Player Garage: El Corona
{-361.10,1185.23,20.49},//Player Garage: Fort Carson
{-2463.27,-124.86,26.41},//Player Garage: Hashbury
{2505.64,-1683.72,14.25},//Player Garage: Johnson House
{1350.76,-615.56,109.88},//Player Garage: Mulholland
{2231.64,156.93,27.63},//Player Garage: Palomino Creek
{-2695.51,810.70,50.57},//Player Garage: Paradiso
{1293.61,2529.54,11.42},//Player Garage: Prickle Pine
{1401.34,1903.08,11.99},//Player Garage: Redland West
{2436.50,698.43,11.60},//Player Garage: Rockshore West
{322.65,-1780.30,5.55},//Player Garage: Santa Maria Beach
{917.46,2012.14,11.65},//Player Garage: Whitewood Estates
{1641.14,-1526.87,14.30},//Commerce Region Loading Bay
{-1617.58,688.69,-4.50},//San Fierro Police Garage
{837.05,-1101.93,23.98},//Los Santos Cemetery
	{-2057.8000,229.9000,35.6204}, // San Fierro
	{-2366.0000,-1667.4000,484.1011},// Mount Chiliad
	{2503.7000,-1705.8000,13.5480},// Grove Street
	{1997.9000,1056.3000,10.8203},// Las Venturas
	{-2872.7000,2712.6001,275.2690},// BaySide
	{904.1000,608.0000,-32.3281},// Unterwasser
	{-236.9000,2663.8000,73.6513} // The big Cock
};

enum SAZONE_MAIN
{
SAZONE_NAME[38],
Float:SAZONE_AREA[6}
};
#define MAX_ZONE_NAME 														  38
static const gSAZones[371][SAZONE_MAIN] = {

{"The Big Ear", {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
{"Aldea Malvada",       {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
{"Ljubljana",  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
{"Arco del Oeste",      {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
{"AC Club", {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
{"AC Club", {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
{"AC Club", {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
{"AC Club", {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
{"AC Club", {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
{"AC Club", {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
{"Back o Beyond",       {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
{"Battery Point",       {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
{"Podgorica",     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
{"Podgorica",      {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
{"Beacon Hill", {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
{"Blackfield",  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
{"Blackfield",  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
{"Blackfield Chapel",   {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
{"Blackfield Chapel",   {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
{"Skoplje",   {104.50,-220.10,2.30,349.60,152.20,200.00}},
{"Skoplje",   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
{"Skoplje",     {-319.60,-220.10,0.00,104.50,293.30,200.00}},
{"Caligula's Palace",   {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
{"Caligula's Palace",   {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
{"Calton Heights",      {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
{"Chinatown",   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
{"Opstina",   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
{"Come-A-Lot",  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
{"Slavija",    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
{"Slavija",    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
{"Slavija",    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
{"Centar grada",    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
{"Centar grada",    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
{"Slavija",    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
{"Conference Centar",   {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
{"Conference Centar",   {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
{"Cranberry Stanica",   {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
{"Creek",       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
{"Nis",   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
{"Meksicka",     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
{"Meksicka",     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
{"Downtown",    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
{"Downtown",    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
{"Downtown",    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
{"Downtown",    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
{"Downtown",    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
{"Downtown",    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
{"Bulevar", {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
{"Centar grada", {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
{"Centar grada", {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
{"Centar grada", {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
{"Centar grada", {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
{"Centar grada", {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
{"Centar grada", {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
{"Centar grada", {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
{"Centar grada", {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
{"RM East Beach",  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
{"RM East Beach",  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
{"RM East Beach",  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
{"RM East Beach",  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
{"East Ballas",     {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
{"East Ballas",     {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
{"East Ballas",     {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
{"East Ballas",     {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
{"East Ballas",     {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
{"East Ballas",     {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
{"East Ballas",     {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
{"Easter Basin",{-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
{"Easter Basin",{-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
{"Easter Bay Aerodrom",  {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
{"Easter Bay Aerodrom",  {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
{"Easter Bay Aerodrom",  {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
{"Easter Bay Aerodrom",  {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
{"Easter Bay Aerodrom",  {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
{"Easter Bay Aerodrom",  {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
{"Easter Bay Aerodrom",  {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
{"Easter Bay Aerodrom",  {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
{"Easter Bay Chemicals",{-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
{"Easter Bay Chemicals",{-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
{"Zeleznicka Stanica",   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
{"Zeleznicka Stanica",   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
{"Sombor",{-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
{"Esplanade East",      {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
{"Esplanade East",      {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
{"Esplanade East",      {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
{"Esplanade North",     {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
{"Esplanade North",     {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
{"Esplanade North",     {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
{"Fallen Tree", {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
{"Fallow Bridge",       {434.30,366.50,0.00,603.00,555.60,200.00}},
{"Fern Ridge",  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
{"Financial",   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
{"Fisher's Lagoon",     {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
{"Flint Intersection",  {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
{"Flint Range", {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
{"Subotica", {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
{"Foster Valley",       {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
{"Foster Valley",       {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
{"Foster Valley",       {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
{"Foster Valley",       {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
{"Frederick Bridge",    {2759.20,296.50,0.00,2774.20,594.70,200.00}},
{"Gant Bridge", {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
{"Gant Bridge", {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
{"Grove Street",      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
{"Grove Street",      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
{"Garcia",      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
{"Garcia",      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
{"Garver Bridge",       {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
{"Garver Bridge",       {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
{"Garver Bridge",       {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
{"Glen Park",   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
{"Glen Park",   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
{"Glen Park",   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
{"Green Palms", {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
{"Greenglass Coll.",  {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
{"Greenglass Coll.",  {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
{"Hampton Barns",       {603.00,264.30,0.00,761.90,366.50,200.00}},
{"Hankypanky Point",    {2576.90,62.10,0.00,2759.20,385.50,200.00}},
{"Harry Gold P.",  {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
{"Hashbury",    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
{"Hilltop Farm",{967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
{"Hunter Quarry",       {337.20,710.80,-115.20,860.50,1031.70,203.70}},
{"Karaburma",    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
{"Karaburma",    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
{"Karaburma",    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
{"Karaburma",    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
{"Karaburma",    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
{"Karaburma",    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
{"Spawn",   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
{"Spawn",   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
{"Spawn",   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
{"Spawn",   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
{"Spawna",   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
{"Spawn",   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
{"JT East", {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
{"JT East", {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
{"JT East", {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
{"JT East", {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
{"JT North",{2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
{"JT North",{2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
{"JT North",{2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
{"JT North",{1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
{"JT North",{1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
{"JT North",{1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
{"JT North",{1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
{"JT North",{1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
{"JT South",{1457.30,823.20,-89.00,2377.30,863.20,110.90}},
{"JT South",{2377.30,788.80,-89.00,2537.30,897.90,110.90}},
{"JT West", {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
{"JT West", {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
{"Juniper Hill",{-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
{"Juniper Hollow",      {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
{"K.A.C.C. M. F.",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
{"Kincaid Bridge",      {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
{"Kincaid Bridge",      {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
{"Kincaid Bridge",      {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
{"King's",      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
{"King's",      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
{"LVA Freight D.",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
{"LVA Freight D.",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
{"LVA Freight D.",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
{"LVA Freight D.",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
{"LVA Freight D.",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
{"Cacak",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
{"Banovo brdo",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
{"Banovo brdo",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
{"Banovo brdo",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
{"Banovo brdo",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
{"Banovo brdo",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
{"Banovo brdo",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
{"Banovo brdo",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
{"Kragujevac",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
{"Aerodrom",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
{"Aerodrom",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
{"Aerodrom",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
{"Aerodrom",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
{"Surcin Aerodrom",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
{"Surcin Aerodrom",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
{"Surcin Aerodrom",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
{"Surcin Aerodrom",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
{"Surcin Aerodrom",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
{"Surcin Aerodrom",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
{"Ada Ciganlija",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
{"Ada Ciganlija",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
{"Ada Ciganlija",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
{"Market 1",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
{"Market 2",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
{"Banjica",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
{"Vracar",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
{"Pristina",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
{"Pristina",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
{"Pristina",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
{"Pristina",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
{"Dedinje",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
{"Dedinje",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
{"Dedinje",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
{"Dedinje",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
{"Dedinje",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
{"Dedinje",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
{"Dedinje",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
{"Dedinje",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
{"Dedinje",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
{"Dedinje",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
{"Dedinje",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
{"Dedinje",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
{"Dedinje",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
{"Auto komanda",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
{"Old Venturas S.",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
{"Novi Sad",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
{"Centar grada",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
{"Pilson Inters.",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
{"Pirates in M. P.",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
{"Blok 64",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
{"Banja Luka",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
{"Banja Luka",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
{"Banja Luka",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
{"Banja Luka",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
{"Granica BG SA",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
{"Senjak",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
{"Senjak",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
{"Senjak",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
{"Senjak",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
{"Senjak",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
{"Senjak",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
{"Senjak",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
{"Senjak",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
{"Senjak",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
{"Senjak",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
{"Robada Inters.",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
{"Zemun",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
{"Zemun",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
{"Zemun",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
{"Zemun",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
{"Zemun",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
{"Zemun",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
{"Zemun",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
{"Zemun",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
{"Zemun",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
{"Zemun",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
{"Zemun",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
{"Zemun",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
{"SA Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
{"Ada Ciganlija",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
{"Ada Ciganlija",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
{"Sobell R. Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
{"Knez Mihajlova",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
{"Slavija",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
{"Slavija",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
{"Knez Mihajlova",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
{"Knez Mihajlova",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
{"Knez Mihajlova",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
{"The C's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
{"T4D Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
{"Vozdovac",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
{"Vozdovac",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
{"Vozdovac",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
{"Dedinje",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
{"Dedinje",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
{"Dedinje",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
{"Dedinje",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
{"Whitewood E.",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
{"Dorcol",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
{"Dorcol",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
{"Dorcol",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
{"Dorcol",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
{"Dorcol",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
{"Dorcol",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
{"Dorcol",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
{"Yellow Bell S.",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
// Citys Zones
{"Ljubljana",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
{"Podgorica",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
{"Skoplje",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
{"Nis",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
{"Sombor",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
{"Subotica",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
{"Cacak",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
{"Kragujevac",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
{"Pristina",                  {1119.50,119.50,-3.00,1451.40,493.30,250.00}},
{"Novi Sad",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
{"Banja Luka",                {1938.80,2624.20,-89.00,2121.40,2861.50,900.00}},
{"Beograd",                  {44.60,-2892.90,-242.90,2997.00,-768.00,5000.00}},
{"Sarajevo",                {869.40,596.30,-242.90,2997.00,2993.80,5000.00}},
{"Temerin",                 {-480.50,596.30,-242.90,869.40,2993.80,100.00}},
{"Zagreb",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,5000.00}}
};

new Float:TrafikaPos[13][3] = {

{ 1374.6486,-1051.3281,26.7872 },
{ 1522.3365,-1678.8428,13.5469 },
{ 1884.9135,-1758.8334,13.5469 },
{ 1143.2748,-938.2762,43.0301 },
{ 1061.3086,-1829.3444,13.6905 },
{ 1211.8568,-1352.6002,13.5739 },
{ 1869.2694,-1455.4016,13.5466 },
{ 1418.0715,-1717.1235,13.5469 },
{ 2076.4241,-1851.7760,13.5469 },

{ 2284.1409,-1669.6038,15.1131 },
{ 2246.4448,-1378.7106,23.9922 },
{ 2077.4031,-1319.6155,23.9844 },
{ 1352.3274,-2240.0898,13.5469 ]

};

new Float:RandomRudnik[6][3] = {

{ 646.3112, 865.6199, 801.7401 },
{ 644.3837, 853.2985, 801.7401 },
{ 619.2432, 870.7172, 801.7401 },
{ 614.9355, 846.9632, 801.7401 },
{ 639.2753, 857.6331, 801.7941 },
{ 631.2094, 860.8875, 801.8396 }
};

new Float:RandomVocar[14][3] = {
{ 1918.0469,116.7534,37.3929 },
{ 1915.6370,101.6910,37.2957 },
{ 1908.1338,87.5650,37.3477  },
{ 1892.0352,89.8126,37.4646  },
{ 1897.5515,107.6543,37.4023 },
{ 1900.3024,123.7034,37.3555 },
{ 1874.3934,109.6081,37.4338 },
{ 1871.4163,93.8917,37.1731  },
{ 1848.9729,100.3621,37.3420 },
{ 1852.3669,114.3030,37.4000 },
{ 1854.9500,129.5982,37.5381 },
{ 1836.4344,115.7621,37.5923 },
{ 1821.5978,130.0823,37.7861 },
{ 1817.5289,110.2376,37.6680 }
};

new Float:RandomDrvo[8][3] = {
{ 2374.3064,-630.8440,126.7304 },
{ 2386.3887,-603.0623,123.8329 },
{ 2318.9641,-618.4024,130.7522 },
{ 2321.4797,-658.1404,129.8673 },
{ 2331.9863,-695.3473,132.4153 },
{ 2343.2090,-734.5633,131.5656 },
{ 2367.5581,-710.3147,130.4459 },
{ 2410.9297,-652.1193,126.8502 }
};

new Float:RandomCelije[3][3] = {
{ 1539.9628, -1672.1998, 13.5481 },
{ 1539.9628, -1672.1998, 13.5481 },
{ 1539.9628, -1672.1998, 13.5481 }
};

new Float:RandomDMPos[10][3] = {
{ -1289.4673,2503.1824,86.9946 },
{ -1297.6167,2484.6416,87.1140 },
{ -1333.9790,2486.3362,87.0469 },
{ -1342.7228,2504.4580,86.8288 },
{ -1344.2617,2535.2068,87.0469 },
{ -1322.9474,2544.5417,87.0521 },
{ -1305.7194,2545.9053,87.7422 },
{ -1293.1646,2535.8740,87.7422 },
{ -1302.0547,2521.2849,87.3462 },
{ -1306.5435,2501.4045,87.0420 }
};

new dustply;
new infernoply;
new assaultply;
new snowply;

new Float:de_dustPos[6][3] = {
{ 7746.1831, -2565.9768, 18.4135 },
{ 7736.9487, -2568.9768, 18.4057 },
{ 7742.6733, -2555.5806, 18.4081 },
{ 7710.2993, -2656.9937, 18.3768 },
{ 7709.8916, -2651.2898, 18.3768 },
{ 7700.6040, -2637.0930, 18.4302 }
};

new Float:de_infernoPos[6][3] = {
	{ 9431.5811, -8750.5869, 28.3405 },
	{ 9427.5322, -8750.5098, 28.6790 },
	{ 9434.2627, -8745.8184, 28.1084 },
{ 9579.5615, -8779.4414, 23.0410 },
{ 9581.1582, -8764.7627, 23.0410 },
{ 9578.2207, -8746.7861, 23.0391 }
};

new Float:cs_assaultPos[6][3] = {
{ 8078.9253, -7592.4277, 15.3666 },
{ 8073.6328, -7589.6387, 15.3666 },
{ 8069.4434, -7588.6870, 15.3666 },
	{ 8165.1001, -7569.8096, 15.3666 },
	{ 8150.9644, -7572.4585, 15.3666 },
	{ 8159.8574, -7566.1240, 15.3666 }
};

new Float:fy_snowPos[6][3] = {
{ 1582.3817, -8838.1582, 9.9582 },
{ 1571.3018, -8840.9541, 9.9582 },
{ 1584.5598, -8826.1172, 9.9582 },
{ 1513.2052, -8778.9570, 9.9638 },
{ 1520.9518, -8773.3965, 9.9638 },
{ 1531.6151, -8773.5820, 9.9638 }
};

new Float:RandomAFKZone[53][3] = {
{ 1730.1456,-1659.6969,20.2397 },
{ 1727.7513,-1651.9196,20.2299 },
{ 1726.7904,-1649.3760,20.2322 },
{ 1721.7285,-1648.6044,20.2282 },
{ 1718.5098,-1646.6769,20.2273 },
{ 1713.7710,-1649.8018,20.2279 },
{ 1715.0129,-1653.6700,20.2227 },
{ 1715.1097,-1657.7659,20.2228 },
{ 1715.2035,-1661.7488,20.2288 },
{ 1715.2915,-1665.4894,20.2269 },
{ 1714.6241,-1668.3933,20.2255 },
{ 1722.3838,-1673.0726, 23.6953 },
{ 1716.7896,-1673.0103, 23.6953 },
{ 1711.6324,-1672.6580, 23.7049 },
{ 1709.9771,-1669.4884, 23.7027 },
{ 1709.4767,-1663.6036, 23.7023 },
{ 1709.0681,-1659.0173, 23.7021 },
{ 1709.6382,-1652.6377, 23.6953 },
{ 1710.0719,-1647.7860, 23.6953 },
{ 1711.8132,-1644.6721, 23.6882 },
{ 1716.3827,-1640.8685, 23.6911 },
{ 1721.7980,-1640.7451, 23.6959 },
{ 1728.8870,-1640.0542, 23.7373 },
{ 1733.5642,-1643.3423, 23.7481 },
{ 1733.5536,-1648.1727, 23.7387 },
{ 1733.5106,-1654.5677, 23.7296 },
{ 1733.0682,-1662.7927, 23.7112 },
{ 1721.1396,-1660.3567, 20.2306 },
{ 1718.0803,-1655.7264, 20.1501 },
{ 1721.7438,-1651.4983, 20.0934 },
{ 1725.2799,-1655.4889, 20.0625 },
{ 1712.9745,-1673.1198, 27.2055 },
{ 1716.2690,-1673.0341, 27.2052 },
{ 1719.9147,-1672.9789, 27.2063 },
{ 1722.9498,-1672.6964, 27.2047 },
{ 1726.1809,-1671.0621, 27.1953 },
{ 1729.7810,-1667.7145, 27.2010 },
{ 1733.1187,-1664.5486, 27.2140 },
{ 1733.4927,-1660.4409, 27.2252 },
{ 1733.7899,-1654.8900, 27.2309 },
{ 1733.8026,-1650.1589, 27.2378 },
{ 1733.8157,-1645.2821, 27.2399 },
{ 1733.5480,-1640.8468, 27.2502 },
{ 1729.6189,-1640.1465, 27.2498 },
{ 1725.2853,-1640.3112, 27.2165 },
{ 1720.8525,-1640.4642, 27.1966 },
{ 1715.5104,-1641.0824, 27.2133 },
{ 1712.0817,-1644.7480, 27.2019 },
{ 1709.9279,-1649.0500, 27.1953 },
{ 1709.5186,-1654.9104, 27.1953 },
{ 1709.6089,-1661.3516, 27.1953 },
{ 1709.6362,-1665.8845, 27.1953 },
{ 1709.6707,-1671.6222, 27.1953 }
};

new Float:RandomZatvor[6][3] = {
{718.3160, 1983.6110, -25.8116},
{720.3738, 1981.8176, -25.8116},
{722.1067, 1983.4674, -25.8116},
{720.1645, 1969.2219, -25.8435},
{722.0770, 1970.8590, -25.8435},
{718.0999, 1971.1327, -25.8435}
};

new Float:RegisterSpawn1[2][3] = {

{ 94.1184, 1667.2339, -29.7157 },// Registracija
{ 94.1184, 1667.2339, -29.7157 }  // Registracija
};

new RandomRegAnims[][] =
{
{"DANCING", "dnce_M_b"},//
{"RAPPING", "Laugh_01"},//
{"RYDER","RYD_Beckon_03"},//
{"PED","fucku"},//
{"RAPPING","RAP_C_Loop"},
{"MISC","SEAT_LR"] //
};

new Float:RandomLSSpawn1[3][3] = {

{ 1312.0939,-1334.4344,12.8126 },// LS
{ 1311.3949,-1330.5897,12.8126 },// LS
{ 1311.4735,-1339.3553,12.8126 } // LS
};

new Float:RandomLSSpawn2[3][3] = {

{ 1312.0939,-1334.4344,12.8126 },// LS
{ 1311.3949,-1330.5897,12.8126 },// LS
{ 1311.4735,-1339.3553,12.8126 } // LS
};

new Float:RandomSFSpawn[4][3] = {
{-2722.4272, 368.2627, 4.3964},// SF
{-2694.1816, 366.7715, 4.4007},// SF
{-2695.6519, 386.0594, 4.3672},// SF
{-2716.8711, 385.5885, 4.3672} // SF
};
new Float:RandomWARMapa11[9][3] =
{
{1147.9226,2813.0664,10.8125},
{1148.4319,2809.7048,10.8203},
{1148.7649,2805.6304,10.8203},
{1151.0385,2800.8855,10.8203},
{1155.1233,2800.9697,10.8203},
{1155.0419,2805.0557,10.8203},
{1144.4396,2799.8264,10.8125},
{1139.9843,2806.2156,10.9688},
{1140.9631,2812.3542,10.9190}
};
new Float:RandomWARMapa12[9][3] =
{
{1403.0447,2733.0447,10.8126},
{1410.5400,2737.9583,10.8203},
{1414.4192,2747.7236,10.8203},
{1411.3033,2757.2588,11.2597},
{1399.9032,2750.0581,10.8203},
{1391.1559,2744.3250,10.8203},
{1384.0992,2743.9656,10.8203},
{1388.7274,2728.1936,10.8203},
{1379.5826,2729.1980,10.8203}
};
new Float:RandomWARMapa21[7][3] =
{
{-972.6812,1096.0303,1344.9882},
{-972.5949,1084.3115,1344.9950},
{-973.4254,1076.6229,1344.9950},
{-973.5809,1070.1228,1345.0007},
{-973.7216,1064.7092,1345.0061},
{-973.6556,1056.8405,1345.0156},
{-973.0229,1024.2570,1345.0525}
};
new Float:RandomWARMapa22[7][3] =
{
{-1132.7081,1022.7668,1345.7273},
{-1132.6602,1035.5205,1345.7427},
{-1132.2740,1041.1238,1345.7412},
{-1131.0614,1048.8101,1345.7435},
{-1132.0385,1055.2090,1345.7603},
{-1132.0372,1063.7393,1345.7628},
{-1131.6272,1094.3673,1345.7885}
};
new Float:RandomWARMapa31[4][3] =
{
{1295.8276,1070.7544,10.7652},
{1293.9846,1078.9841,10.6999},
{1300.7595,1085.3835,10.8203},
{1312.7617,1084.8655,10.8203}
};
new Float:RandomWARMapa32[4][3] =
{
{1492.2148,916.9006,10.9297},
{1478.9260,916.6356,10.8203},
{1467.7583,915.6778,10.8203},
{1471.7261,930.1809,10.8203}
};
new Float:RandomWARMapa41[5][3] =
{
{2922.0735,4057.7339,41.9413},
{2924.9233,4058.4211,41.9413},
{2925.6855,4053.5361,41.9413},
{2926.5029,4045.3936,41.9413},
{2921.1628,4044.2600,41.9413}
};
new Float:RandomWARMapa42[5][3] =
{
{2925.1416,4300.6401,41.9413},
{2923.4927,4307.6055,41.9413},
{2927.1511,4311.6382,41.9413},
{2930.3958,4310.5850,41.9413},
{2931.5002,4302.3281,41.9413}
};
new Float:RandomWARMapa51[4][3] =
{
{-136.6962,-114.7337,3.1172},
{-126.6221,-115.4705,3.1172},
{-104.1388,-119.4517,3.1172},
{-84.2369,-121.1719,3.1172}
};
new Float:RandomWARMapa52[4][3] =
{
{0.4129,91.1095,3.1172},
{-22.3045,108.2041,3.1172},
{-45.0152,113.6356,3.1172},
{-77.4174,134.2272,3.1172}
};

new Float:BanderaPos[20][4] = {
{ 2432.5647,681.7413,10.8203,315.8406 },
{ 2532.5339,1217.1047,10.8203,245.9482 },
{ 2499.5620,1776.2246,10.8203,277.9712 },
{ 2534.9197,2168.8958,10.8203,155.8769 },
{ 2280.8657,2304.8418,10.8203,359.8563 },
{ 2083.9951,2296.8896,10.7841,194.7723 },
{ 2051.2249,2447.0010,10.8203,181.7585 },
{ 2294.1565,2719.1472,10.8203,283.9687 },
{ 1413.8735,2692.5422,10.8125,173.4260 },
{ 1013.3679,2134.4868,10.8203,203.4019 },
{ 1283.4261,1203.9707,10.8130,108.7977 },
{ 1700.7755,1138.9292,10.8203,47.8974  },
{ 1686.6173,1880.3638,10.8203,94.6164  },
{ 1591.1235,788.2990,10.8620,287.9215  },
{ 1669.2457,2180.2170,10.8203,149.5226 },
{ 1433.8298,1880.2521,10.8203,88.0362  },
{ 1408.8463,2318.8994,10.8203,358.2549 },
{ 1500.7568,1070.6007,10.8203,206.9159 },
{ 1861.3567,711.0256,10.8203,355.3306  },
{ 1934.5298,2184.4272,10.8125,150.9104 }
};

new Float:BanderaPosGore[20][4] = {
{ 2437.0715,691.1681,18.6546,351.0805 },
{ 2533.1082,1207.9181,18.8829,182.4873 },
{ 2491.7607,1773.7358,16.8973,88.3193 },
{ 2536.6785,2180.2520,18.6930,1.6110 },
{ 2279.2913,2294.2029,19.1398,178.6877 },
{ 2079.7476,2294.2219,19.6134,180.5887 },
{ 2038.7064,2444.4255,19.0830,90.2225 },
{ 2284.5796,2722.5095,19.0112,88.4702 },
{ 1417.2456,2702.4819,19.5150,4.8326 },
{ 1016.6584,2143.7092,19.2723,357.2291 },
{ 1294.7180,1203.1068,18.8795,269.4974 },
{ 1710.8828,1142.8740,17.5276,274.0304 },
{ 1694.6365,1884.1866,18.7538,271.6907 },
{ 1578.5826,786.2355,18.9675,88.1801 },
{ 1677.2218,2182.9092,18.9100,271.6906 },
{ 1439.3055,1885.7688,17.7997,271.6906 },
{ 1399.2322,2322.6819,18.7533,90.3757 },
{ 1497.6464,1082.5927,19.0339,359.5710 },
{ 1857.5492,711.8239,18.8533,2.6418 },
{ 1937.5627,2196.2046,17.5565,352.4039 }
};


//=============================[Strings]======================================

new DialogTekstovi[2][] = {

"Sada se mozete prijaviti upisivanjem Vase lozinke u\n\
polje ispod. Imate 60 sekundi da se prijavite, \n\
u protivnom cete biti kikovani.\n\n\
Imate %d pokusaja upisavanja lozinke, ukoliko \n\
je svaki put upisete pogresno, takodje cete biti kikovani!\n\n\
Ako zelite odustati, mozete izabrati 'Odustani',\n\
ako zelite nastaviti, nakon upisivanja lozinke izaberite\n\
'Potvrdi'.",

//--------------------------------------------------------------------------

"{FFFFFF]Tutorial o serveru se zavrsio, ako su vam neke stvari i dalje nejasne, mozete\n\
	pitati AFG TEAM ili suigraca za pomoc. Ako bi slucajno nasli gresku u\n\
	skripti, molimo Vas da ju istog trenutka prijavite bilo kojem clanu Fusion Gaming tima.\n\
	Ukoliko iskoristavate neku gresku (BUG), biti cete kaznjeni najvecom mogucom kaznom.\n\
	Zelimo Vam puno srece u daljnjem igranju, ne zaboravite na pravila roleplaya i ugodno\n\
	se zabavite! Fusion Gaming tim!"

};

new sDStrg[512];

//===============================[Boje]=======================================

#define CRVENA                                                        0xfa5555AA
#define ZELENA                                                     	  0x33AA33AA
#define BELA                                                          0xFFFFFFFF
#define CRNA														  0x000000FF
#define PLAVA                                                         0xA9C4E4FF
#define NARANDZASTA1                        						  0xFF9933AA
#define SIVA                                                          0xAFAFAFAA
#define ZUTA                                                          0xFFFF00AA
#define Helper 													  	  0x40FF00AA //bila: 0x3EDA6DAA
#define NARANDZASTA                                                   0xFFAF00FF
#define LJUBICASTA                  								  0xC2A2DAAA
#define SVETLOPLAVA                  								  0x33CCFFAA
#define SVETLOCRVENA  												  0xFF6347AA
#define FUSIONGAMING                                                  0x005b87FF
#define ANTICHEAT 													  0xDC143CAA
#define NARACRVENA 	                                                  0xFF4500AA
#define WARLJUB 										  			  0x8B008BAA

#define col_job                           							  "{36AB00]"
#define col_green                                                     "{33AA33]"
#define col_white                         							  "{FFFFFF]"
#define col_gray                                                      "{bababa]"
#define col_server                     								  "{005b87]"
#define col_crvena                        							  "{FF0000]"
#define col_ljub						  							  "{9000FF]"
#define col_orange						  							  "{FFAF00]"
#define col_red                           							  "{FF0000]"
#define col_yelow                         							  "{FFFF00]"
#define col_acheat 						  							  "{DC143C]"
#define col_svplava                                                   "{33CCFF]"
// 005b87
// Enumator

enum xPlayerInfo{
xLozinka[LOZINKA_STRING],
xPol,
xGodine,
xNovac,
xLevel,
xRespekt,
xPoboljsanja,
xPayDay,
xAdmin,
xASlot,
xHSlot,
xSkin,
xSpawn,
xLider,
xClan,
xRank,
xVoziloID[4],
xMaterijali,
xFirmaID,
xPosao,
xUgovor,
xMehSkill,
xMDelovi,
xHead,
Float:xHeadPos[9],
xFace,
Float:xFacePos[9],
xSungMask,
Float:xSungMaskPos[9],
xCigare,
xUpaljac,
xBStil,
xRegistrovan,
Float:xSHealth,
xBrojTelefona,
xVozacka,
xMotorska,
xKamionskaC1,
xKamionskaC2,
xKamionskaC3,
xBrodska,
xLetelica,
xRibarska,
xOsnovna,
xSrednja,
xFakultet,
xSkolaLimit,
xUbijen,
xDrug[5],
xDrugCode[5],
xSolna,
xPseudo,
xSodaB,
xCrvenif,
xLysAcid,
xDesVoda,
xMarihuana,
xOpium,
xKalcij,
xAmonijH,
xKokain,
xKokain2,
xMetilAmin,
bool:xHeroinAddict,
xHeroinUsed,
xHeroinIndicator,
bool:xCokeCrackAddict,
xCokeCrackUsed,
xCokeCrackIndicator,
bool:xMethAddict,
xMethIndicator,
xMethUsed,
bool:xInekcija,
bool:xToolkit,
xProperty[3],
xObject[10],
bool:xGunLicense,
xTelefonBon,
xModelTelefona,
xSnaga,
xZatvor,
xZatvorVreme,
xWanted,
xUhapsen,
xPDUhapsio,
xPDStatsTicket,
xPDStatsTicketMoney,
xTakenWeps,
xTakenDrugs,
xPocetniTut,
xAKod,
xSat,
xMaskID,
xBRacun,
xPreostaloZaOtplatu,
xIznosRate,
xIznosKredita,
xOnlineSati,
xHelper,
xHAskq,
xHDutyTime,
xHDutyTimeMin,
xADutyTime,
xADutyTimeMin,
xWarn,
xMute,
xMuteAd,
xDisarm,
xOffWarn,
xOffFine,
Float:xMarker[3],
xBrojNews,
xOrgUgovor,
xGpsLevel,
xHelmet,
xBDays,
xBMonths,
xBYears,
xGradRank,
xSkriptaRank,
xUlazBL,
bool:xBoombox,
Float:xHelmetPos[9],
xDrzava,
xEmail[34],
xVIPLevel,
xYouTuber,
xHitmenCena,
xLesLimit,
xOffPJail[64],
xOffPPrison[64],
xOffPMute[64],
xOffPWarn[64],
xOffPFine[64],
xStaffMin,
xoffProperty1Check,
xoffProperty2Check,
xoffProperty3Check,
xoffVozilo1Check,
xoffVozilo2Check,
xoffVozilo3Check,
xoffFirmaCheck,
xoffHotelCheck,
xLastLogin[64],
bool:xMarried,
xMarriedTo[24],
bool:xTogMob,
xHotelID,
xHotelRoom,
xPromoter,
xFieldID,
xSljive,
xKruske,
xJabuke,
xKupus,
xRuze,
xSemeSljive,
xSemeKruske,
xSemeJabuke,
xSemeKupusa,
xSemeRuze,
xLottoNumber,
xLottoMoney,
xDeagleSkill,
xPistolSkill,
xM4Skill,
xAKSkill,
xMPSkill,
xShotgunSkill,
xSawnSkill,
xSniperSkill,
xCombatSkill,
xGarageID,
bool:xImaBRacun,
xPlatniRacun,
xPlataPoen,
bool:xDonatorSlot,
xPljackaVreme,
bool:xLeaveJail,
xBailPrice,
xHangarTime,
xUzoPaket,
xEvent1Mesto,
xEvent2Mesto,
xEvent3Mesto,
xDMEventUbistva,
xRentID,
xZlato,
xRezervniKljucevi,
xRadarBodovi,
bool:xDBO,
xDBoja,
xRPPoen,
xPodFGpoeni,
xFGpoeni,
xAktivpoeni,
xVipTime,
xZauzimanjeVreme,
xPoklon,
bool:xPaketic,
xKljucKapije[MAX_PLAYER_NAME],
xSvercer,
xSpawned,
xTestAFG,
xDonateVip,
xWOF,
xPenzija,
xRiba,
xRibaKG,
xBusilica,
xRanac,
xKockica,
xPasos,
xSPoruke,
xSOglasi,
xSVesti,
xSFChat,
xSTelefon,
xSHud
//xQuest_1
//xQuest_2
}
new PlayerInfo[MAX_PLAYERS][xPlayerInfo];

#define GRAD_MAYOR      6
#define GRAD_VMAYOR     5
#define GRAD_LBODYGUARD 4
#define GRAD_LDRIVER    3
#define GRAD_DRIVER     2
#define GRAD_BODYGUARD  1

static const g_aWeaponSlots[] = {
0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11
};

enum _weaponInfos{
wName[24],
wID,
wSlot,
wModel
}

new WeaponInfos[47][_weaponInfos] = {
{"No gun", 0, 0, 0 },
{"Brass Knuckles", 1, 0, 331 },
{"Golf Club", 2, 1, 333 },
{"Nightstick", 3, 1, 334 },
{"Knife", 4, 1, 335 },
{"Baseball Bat", 5, 1, 336 },
{"Shovel", 6, 1, 337 },
{"Pool Cue", 7, 1, 338 },
{"Katana", 8, 1, 339 },
{"Chainsaw", 9, 1, 341 },
{"Double-ended Dildo", 10, 10, 321 },
{"Dildo", 11, 10, 321 },
{"Vibrator", 12, 10, 323 },
{"Silver Vibrator", 13, 10, 324 },
{"Flowers", 14, 10, 325 },
{"Cane", 15, 10, 326 },
{"Grenade", 16, 8, 342 },
{"Tear Gas", 17, 8, 343 },
{"Molotov Cocktail", 18, 8, 344 },
{"No gun", 19, -1, 0 },
{"No gun", 20, -1, 0 },
{"No gun", 21, -1, 0 },
{"Colt .45", 22, 2, 346 },
{"Silenced Colt .45", 23, 2, 347 },
{"Desert Eagle", 24, 2, 348 },
{"Shotgun", 25, 3, 349 },
{"Sawnoff Shotgun", 26, 3, 350 },
{"Combat Shotgun", 27, 3, 351 },
{"Micro SMG", 28, 4, 352 },
{"MP5", 29, 4, 353 },
{"AK47", 30, 5, 355 },
{"M4", 31, 5, 356 },
{"Tec-9", 32, 4, 372 },
{"Country Rifle", 33, 6, 357 },
{"Sniper Rifle", 34, 6, 358 },
{"RPG", 35, 7, 359 },
{"HS Rocket", 36, 7, 0 },
{"Flamethrower", 37, 7, 361 },
{"Minigun", 38, 7, 362 },
{"Satchel Charge", 39, 8, 363 },
{"Detonator", 40, 12, 364 },
{"Spraycan", 41, 9, 365 },
{"Fire Extinguisher", 42, 9, 366 },
{"Camera", 43, 9, 367 },
{"Night Vis Goggles", 44, 11, 368 },
{"Thermal Goggles", 45, 11, 369 },
{"Parachute", 46, 11, 371 }
};
new
hSlot1[64],
hSlot2[64],
hSlot3[64],
hSlot4[64],
hSlot5[64],
hSlot6[64],
hSlot7[64],
hSlot8[64],
hSlot9[64],
hSlot10[64],
hSlot11[64],
hSlot12[64],
hSlot13[64],
hSlot14[64],
hSlot15[64],
hSlot16[64],
hSlot17[64],
hSlot18[64],
hSlot19[64],
hSlot20[64],
hSlot21[64],
hSlot22[64],
hSlot23[64],
hSlot24[64],
hSlot25[64],
hSlot26[64],
hSlot27[64],
hSlot28[64],
hSlot29[64],
hSlot30[64];

new
aSlot1[64],
aSlot2[64],
aSlot3[64],
aSlot4[64],
aSlot5[64],
aSlot6[64],
aSlot7[64],
aSlot8[64],
aSlot9[64],
aSlot10[64],
aSlot11[64],
aSlot12[64],
aSlot13[64],
aSlot14[64],
aSlot15[64],
aSlot16[64],
aSlot17[64],
aSlot18[64],
aSlot19[64],
aSlot20[64],
aSlot21[64],
aSlot22[64],
aSlot23[64],
aSlot24[64],
aSlot25[64],
aSlot26[64],
aSlot27[64],
aSlot28[64],
aSlot29[64],
aSlot30[64];

enum aPlayerInfo {
aTBan,
aTWarn,
aTKick,
aTCharge,
aTJail,
aTUnjail,
aTUnwarn,
aTUnban,
aTPM
}
new AI[MAX_PLAYERS][aPlayerInfo];

#define MAX_INVENTORY 	30
#define INV_FILE                                  			  "Inventory/%s.ini"

enum inventoryData {
bool:invExists,
invItem[32],
invModel,
invQuantity
}
new inventoryInfo[MAX_PLAYERS][MAX_INVENTORY][inventoryData];

enum lala123 {
Pol,
Level,
OnlineSati,
Respekt,
Novac,
Banka,
Upozorenja,
Posao,
Posaougovor,
Godine,
Organizacija,
Rank,
Imovina1,
Imovina2,
Imovina3,
Vozilo1,
Vozilo2,
Vozilo3,
Vozilo4,
Firma,
StaffMin,
LastLogin[64],
Admin,
GameSage,
Hotel,
eMail[34}
}
new OfflineCheck[lala123];

#define IsValidWeapon(%0) (%0>=1 && %0<=18 || %0>=21 && %0<=46)

#define MAX_W_SLOTS 13

enum antiC {
EnterVehTime,
EnteredVehicle,
TakeVehicle,
SpamChat,
SpamCommand,
Weapon[13],
Ammo[13],
WeaponCheck,
WeaponDetect,
WeaponHack,
TakenWeapon,
TeleportCheck,
Float:TeleportPos[3],
TeleportHack,
Float:TrueHealth,
Float:TrueArmour,
SpeedHack,
AFKMinute,
HighPing,
bool:InTuningGarage,
Float:AFKFirstPos[3],
Float:AFKSecondPos[3],
Float:SpeedPos[3],
bool:SpeedFall,
LastWShot,
CPPort,
SpamVehicle,
LastAmmo,
LastAmmoChecks,
bool:RemoveVehicle,
CPSCount,
CPSTick,
CWTime,
CWVehID,
ArmedWeapon,
VehRepairTime
}
new antiCheatCS[MAX_PLAYERS][antiC];
new BusyVehicle[MAX_VEHICLES];

enum antiVS {
Float:VehTrueHealth,
VehCheck
}
new antiCheatVS[MAX_VEHICLES][antiVS];

#define AC_ADMINPORUKA 0
#define AC_KICK 1
#define AC_BAN 2

#define DETECT_WEAPON_HACK 	    1
#define DETECT_AMMO_HACK   	    2
#define DETECT_TELEPORT_HACK    3
#define DETECT_FLY_HACK 	    4
#define DETECT_SPEED_HACK   	5
#define DETECT_JETPACK_HACK 	6

enum antiSS {
WeaponHRezimRada,
TeleportHRezimRada,
HealthHRezimRada,
SpeedHRezimRada,
JetPackHRezimRada,
MoneyHRezimRada,
FlyHRezimRada,
TuningHRezimRada,
VehRepRezimRada,
bool:antiWeaponH,
bool:antiTeleportH,
bool:antiHealthH,
bool:antiArmourH,
bool:antiSpeedH,
bool:antiJetPackH,
bool:antiMoneyH,
bool:antiflyH,
bool:antiTuningH,
bool:antiVehRepair
}
new antiCheatSS[antiSS];

#define MaxBrojKreiranih 1980

enum Serva {
// save
RegistrovanihKorisnika,
BanovanihKorisnika,
KikovanihKorisnika,
BrojWarnova,
BrojPosetaServeru,
HappyJob,
bool:HappyHours,
bool:HappyHoursx3,
PocetniLevel,
PocetniNovaca,
bool:KupovinaVozila,
bool:Report,
bool:Pitanja,
bool:Update,
bool:Oglasi,
RekordServera,
bool:Registracija,
Drva,
Zlato,
Namestaj,
NovacBanka,
ReactTime,
ReactName[MAX_PLAYER_NAME],
// dont save
Text3D:ZlatoLabel,
Text3D:NovacLabel,
Text3D:NovacLabel2,
Text3D:HangarLabel,
HangarPaket,
BrojImovina,
BrojKontejnera,
BrojKreiranihVozila,
VremeInGame,
bool:RRVehicle
}
new ServerInfo[Serva];

enum rInfo {
sCreated,
Float:sX,
Float:sY,
Float:sZ,
sObject,
sSpike
};
new Roadblocks[100][rInfo];

enum BoomboxInfao {
boomboxPlaced,
Float:boomboxPos[3],
boomboxInterior,
boomboxWorld,
boomboxObject,
boomboxURL[128 char],
Text3D:boomboxText3D
};
new BoomboxInfo[MAX_PLAYERS][BoomboxInfao];
new Boombox[MAX_PLAYERS];

enum rudarBre {
rudarTimer,
rudarIskopano,
rudarObjects[3}
};
new rudarPosao[MAX_PLAYERS][rudarBre];

enum vocarBre {
vocarTimer,
vocarObrao
};
new vocarPosao[MAX_PLAYERS][vocarBre];

enum drvoBre {
drvoTimer,
drvoIseko
};
new drvosecaPosao[MAX_PLAYERS][drvoBre];

#define MAX_EVENTS      101
#define MAX_CP          202
#define MAX_TIME        23
#define EVENT_FILE      "Events/%d.ini"
new
EventName[MAX_PLAYERS][64],
EventCP[MAX_PLAYERS],
EventCarsCreate[MAX_PLAYERS],
EventID[MAX_PLAYERS],
PlayerCP[MAX_PLAYERS],
PlayerEventVehID[MAX_PLAYERS],
EventVehID[MAX_PLAYERS],
bool:PlayerCreateEvent[MAX_PLAYERS],
Float:PlayerPos[MAX_PLAYERS][3],
PlayerPosInt[MAX_PLAYERS],
PlayerPosVW[MAX_PLAYERS];

enum jao {
Drivers,
Position,
EventTime,
eID,
Vehicle[30}
}
new EventInfo[jao];

enum jo {
Float:TCPX,
Float:TCPY,
	Float:TCPZ,
	Float:TCPA,
	Float:TCPX2,
Float:TCPY2,
	Float:TCPZ2,
	Float:TCPA2,
	Name[64],
	VehID,
	MaxCP,
	Float:PrivremeniX1,
	Float:PrivremeniY1,
	Float:PrivremeniX2,
	Float:PrivremeniY2
}
new Event[MAX_EVENTS][jo];

enum ev
{
	Float:CPX,
	Float:CPY,
	Float:CPZ
}
new CheckPoint[MAX_EVENTS][MAX_CP][ev];

enum pCrime
{
pAccusing[32],
pDone,
pLocation[32}
};
new PlayerCrime[MAX_PLAYERS][pCrime];

enum pAmbulance {
pVictimLocation[32}
}
new PlayerInjured[MAX_PLAYERS][pAmbulance];

enum zlInfo {
zPocinio[MAX_PLAYER_NAME],
zPrijavio[MAX_PLAYER_NAME],
zZlocin[64}
};
new ZlocinInfo[MAX_PLAYERS][zlInfo];

enum pMechanicService {
pMechanicLocation[32}
}
new PlayerNeedMechanic[MAX_PLAYERS][pMechanicService];

#define MAX_FARMERS_PLANTS_PLANTED				10
#define MAX_FARMS 						      1000

enum ea_farmerInfo {
farmPlayerID,
bool:farmPlantCreated,
bool:farmWheatCreated,
farmObject,
Text3D:farm3D
};
new plantInfo[MAX_FARMS][ea_farmerInfo];

enum e_farmerInfo {
fifarmerSeeds,
fifarmerPlantsPlanted,
fifarmerWheatCreated,
fifarmerPickupedBales,
bool:fifarmerPickupedBale,
fiCowNumber,
fiVehicleBucket,
fiBucketObject,
bool:fiHaveBucket
};
new farmerInfo[MAX_PLAYERS][e_farmerInfo];

enum aa {
fvSeeds,
bool:fvMilk,
fvMilkpID
};
new farmerVehicles[MAX_VEHICLES][aa];

new farmerField, roykuca, SSB, KosacMost, ZgradaNeka, VipBaza, GSFMost, ZlataraSef, bankSafe, SpawnZona, GradjPosao, FarmerPosao;

enum aeass32 {
Float:cpPos[3],
Float:obPos[3}
};

new milkInfo[14][aeass32] ={
{ {-1083.4468, -1260.1689, 129.2188}, {-1083.79199, -1258.82507, 128.05800} },
{ {-1076.3959, -1260.4109, 129.2188}, {-1074.92859, -1259.36865, 128.05800} },
{ {-1072.8464, -1268.4139, 129.2188}, {-1071.94824, -1268.39148, 128.05800} },
{ {-1072.7910, -1277.3185, 129.2188}, {-1072.30945, -1277.53979, 128.05800} },
{ {-1085.5800, -1278.3676, 129.2188}, {-1085.89087, -1278.27747, 128.05800} },
{ {-1097.0688, -1278.0977, 129.2188}, {-1097.52966, -1277.73108, 128.05800} },
{ {-1106.6710, -1278.5554, 129.2188}, {-1107.13867, -1278.24841, 128.05800} },
{ {-1116.2678, -1278.1232, 129.2188}, {-1116.92029, -1277.01501, 128.05800} },
{ {-1116.1692, -1268.8348, 129.2188}, {-1116.26758, -1266.98450, 128.05800} },
{ {-1111.1566, -1260.9063, 129.2188}, {-1110.46655, -1259.03979, 128.05800} },
{ {-1103.8966, -1260.1794, 129.2188}, {-1103.06042, -1258.46045, 128.05800} },
{ {-1104.8306, -1268.9554, 129.2188}, {-1104.32874, -1269.13904, 128.05800} },
{ {-1093.1650, -1269.3164, 129.2188}, {-1092.83740, -1269.42151, 128.05800} },
{ {-1083.9492, -1270.6510, 129.2188}, {-1082.86694, -1269.04285, 128.05800}}

};

new hitfound = 0;
new ahitid = 999;

enum HitmanInfoa {
GotHit,
GetChased,
GoChase,
PlacedNews
};
new HitmanInfo[MAX_PLAYERS][HitmanInfoa];

new bool:pizzaVehicle[MAX_VEHICLES];

new LastCar[MAX_PLAYERS];

#define MAX_INTERIJERA 														 100
enum iinfo {
iIme[32],
Float:iXUlaz,
Float:iYUlaz,
Float:iZUlaz,
Float:iAUlaz,
Float:iXIzlaz,
Float:iYIzlaz,
Float:iZIzlaz,
Float:iAIzlaz,
iIntID,
iIntIDSpolja,
iVwID,
iVwIDSpolja,
iPickup,
iPickupID,
i3dLabel,
i3dLabelID
};
new IntInfo[MAX_INTERIJERA][iinfo];
new intide;
//cenavozila cena vozila
new VehPrice[212][3] = {
//   ID      Novac   ZLATO
{ 400, 2520000, 2520 },// Landstalker
{ 401, 490000, 1200 },// Bravura
{ 402, 3250000, 3250 },// Buffalo
{ 403, 0, 0 },// Linerunner
{ 404, 1820000, 1820 },// Perenniel
{ 405, 1450000, 1450 },// Sentinel
{ 406, 0, 0 },// Dumper edit
{ 407, 0, 0 },// Firetruck edit
{ 408, 0, 0 },// Trashmaster edit
{ 409, 40000000, 40000 },// Stretch
{ 410, 1845000, 1845 },// Manana
{ 411, 16000000, 22000 },// Infernus
{ 412, 420000, 900 },// Voodoo
{ 413, 510000, 1350 },// Pony
{ 414, 0, 0 },// Mule
{ 415, 10400000, 10400 },// Cheetah
{ 416, 0, 0 },// Ambulance
{ 417, 13500000, 10500 },// Leviathan
{ 418, 530000, 1450 },// Moonbeam
{ 419, 420000, 900 },// Esperanto
{ 420, 0, 0 },// Taxi
{ 421, 525000, 1425 },// Washington
{ 422, 470000, 1150 },// Bobcat
{ 423, 0, 0 },// Mr Whoopee edit
{ 424, 820000, 2900 },// BF Injection edit
{ 425, 0, 0 },// Hunter edit
{ 426, 620000, 620 },// Premier
{ 427, 0, 0 },// Enforcer edit
{ 428, 0, 0 },// Securicar edit
{ 429, 9450000, 9450 },// Banshee
{ 430, 0, 0 },// Predator edit
{ 431, 0, 0 },// Bus edit
{ 432, 0, 0 },// Rhino edit
{ 433, 0, 0 },// Barracks
{ 434, 590000, 1750 },// Hotknife
{ 435, 0, 0 },// Article Trailer edit
{ 436, 1440000, 1440 },// Previon edit
{ 437, 0, 0 },// Coach edit
{ 438, 0, 0 },// Cabbie
{ 439, 1550000, 1550 },// Stallion
{ 440, 0, 0 },// Rumpo
{ 441, 0, 0 },// RC Bandit edit
{ 442, 0, 0 },// Romero
{ 443, 0, 0 },// Packer
{ 444, 0, 0 },// Monster edit
{ 445, 2510000, 2510 },// Admiral
{ 446, 3300000, 3200 },// Squallo edit
{ 447, 8400000, 7400 },// Seasparrow edit
{ 448, 0, 0 },// Pizzaboy
{ 449, 0, 0 },// Tram edit
{ 450, 0, 0 },// Article Trailer 2 edit
{ 451, 14300000, 14300 },// Turismo
{ 452, 3400000, 3400 },// Speeder edit
{ 453, 520000, 520 },// Reefer edit
{ 454, 7300000, 6400 },// Tropic edit
{ 455, 0, 0 },// Flatbed
{ 456, 0, 0 },// Yankee
{ 457, 480000, 480 },// Caddy edit
{ 458, 505000, 505 },// Solair edit
{ 459, 1900000, 1900 },// Topfun Van (Berkley's RC)
{ 460, 950000, 950 },// Skimmer edit
{ 461, 6600000, 6600 },// PCJ-600
{ 462, 920000, 920 },// Faggio
{ 463, 2650000, 2650 },// Freeway
{ 464, 0, 0 },// RC Baron edit
{ 465, 0, 0 },// RC Raider edit
{ 466, 1440000, 1440 },// Glendale
{ 467, 1550000, 1550 },// Oceanic
{ 468, 4600000, 4600 },// Sanchez
{ 469, 5300000, 5300 },// Sparrow edit
{ 470, 4700000, 4700 },// Patriot
{ 471, 3250000, 3250 },// Quad
{ 472, 0, 0 },// Coastguard edit
{ 473, 1800000, 1800 },// Dinghy edit
{ 474, 410000, 850 },// Hermes
{ 475, 1935000, 1935 },// Sabre
{ 476, 5500000, 5500 },// Rustler edit
{ 477, 5400000, 5400 },// ZR-350
{ 478, 0, 0 },// Walton
{ 479, 465000, 1125 },// Regina
{ 480, 4600000, 4600 },// Comet
{ 481, 500000, 500 },// BMX edit
{ 482, 2400000, 2400 },// Burrito
{ 483, 515000, 1375 },// Camper
{ 484, 2900000, 2900 },// Marquis edit
{ 485, 0, 0 },// Baggage edit
{ 486, 0, 0 },// Dozer
{ 487, 45000000, 45000 },// Maverick edit
{ 488, 0, 0 },// SAN News Maverick edit
{ 489, 3300000, 3300 },// Rancher
{ 490, 0, 0 },// FBI Rancher edit
{ 491, 495000, 1275 },// Virgo
{ 492, 2500000, 2500 },// Greenwood
{ 493, 5000000, 5000 },// Jetmax edit
{ 494, 16800000, 16800 },// Hotring Racer edit
{ 495, 9400000, 9400 },// Sandking edit
{ 496, 2340000, 2340 },// Blista Compact
{ 497, 0, 0 },// Police Maverick edit
{ 498, 0, 0 },// Boxville
{ 499, 0, 0 },// Benson
{ 500, 3250000, 3250 },// Mesa
{ 501, 0, 0 },// RC Goblin edit
{ 502, 16800000, 16800 },// Hotring Racer edit
{ 503, 1230000, 4950 },// Hotring Racer edit
{ 504, 2200000, 2200 },// Bloodring Banger edit
{ 505, 3100000, 3100 },// Rancher
{ 506, 8800000, 8800 },// Super GT
{ 507, 1780000, 1780 },// Elegant
{ 508, 0, 0 },// Journey
{ 509, 450000, 450 },// Bike edit
{ 510, 400000, 405 },// Mountain Bike edit
{ 511, 0, 0 },// Beagle edit
{ 512, 845000, 3025 },// Cropduster edit
{ 513, 7500000, 7500 },// Stuntplane edit
{ 514, 0, 0 },// Tanker
{ 515, 0, 0 },// Roadtrain
{ 516, 1530000, 1530 },// Nebula
{ 517, 1550000, 1550 },// Majestic
{ 518, 1485000, 1485 },// Buccaneer
{ 519, 8000000, 8000 },// Shamal edit
{ 520, 0, 0 },// Hydra edit
{ 521, 7250000, 7250 },// FCR-900
{ 522, 15000000, 15000 },// NRG-500
{ 523, 0, 0 },// HPV1000 edit
{ 524, 0, 0 },// Cement Truck
{ 525, 0, 0 },// Towtruck
{ 526, 635000, 1975 },// Fortune
{ 527, 515000, 1375 },// Cadrona edit
{ 528, 0, 0 },// FBI Truck edit
{ 529, 500000, 1300 },// Willard
{ 530, 0, 0 },// Forklift edit
{ 531, 615000, 1875 },// Tractor
{ 532, 0, 0 },// Combine Harvester
{ 533, 540000, 1500 },// Feltzer
{ 534, 2685000, 2685 },// Remington
{ 535, 2800000, 2800 },// Slamvan
{ 536, 2700000, 2700 },// Blade
{ 537, 0, 0 },// Freight edit
{ 538, 0, 0 },// Brownstreak edit
{ 539, 0, 0 },// Vortex edit
{ 540, 720000, 2400 },// Vincent edit
{ 541, 13900000, 13900 },// Bullet
{ 542, 505000, 1325 },// Clover
{ 543, 495000, 1275 },// Sadler
{ 544, 0, 0 },// Firetruck LA edit
{ 545, 2730000, 2730 },// Hustler
{ 546, 510000, 1350 },// Intruder
{ 547, 515000, 1375 },// Primo
{ 548, 0, 0 },// Cargobob edit
{ 549, 580000, 1700 },// Tampa
{ 550, 1890000, 1890 },// Sunrise
{ 551, 640000, 2000 },// Merit
{ 552, 0, 0 },// Utility Van edit
{ 553, 0, 0 },// Nevada edit
{ 554, 870000, 3150 },// Yosemite
{ 555, 670000, 3150 },// Windsor
{ 556, 0, 0 },// Monster "A" edit
{ 557, 0, 0 },// Monster "B" edit
{ 558, 7200000, 7200 },// Uranus
{ 559, 7150000, 7150 },// Jester
{ 560, 19500000, 19500 },// Sultan
{ 561, 3350000, 3350 },// Stratum
{ 562, 13500000, 13500 },// Elegy
{ 563, 9200000, 9200 },// Raindance edit
{ 564, 0, 0 },// RC Tiger edit
{ 565, 8400000, 8400 },// Flash
{ 566, 2700000, 2700 },// Tahoma
{ 567, 4325000, 4325 },// Savanna
{ 568, 700000, 2300 },// Bandito
{ 569, 0, 0 },// Freight Flat Trailer edit
{ 570, 0, 0 },// Streak Trailer edit
{ 571, 0, 0 },// Kart
{ 572, 0, 0 },// Mower
{ 573, 1070000, 4150 },// Dune
{ 574, 0, 0 },// Sweeper
{ 575, 685000, 2225 },// Broadway
{ 576, 495000, 1275 },// Tornado
{ 577, 0, 0 },// AT400 edit
{ 578, 900000, 3300 },// DFT-30
{ 579, 14500000, 14500 },// Huntley
{ 580, 2140000, 2140 },// Stafford
{ 581, 5200000, 5200 },// BF-400
{ 582, 0, 0 },// Newsvan edit
{ 583, 0, 0 },// Tug edit
{ 584, 0, 0 },// Petrol Trailer edit
{ 585, 510000, 1350 },// Emperor
{ 586, 2260000, 2260 },// Wayfarer
{ 587, 2810000, 2810 },// Euros
{ 588, 0, 0 },// Hotdog edit
{ 589, 7485000, 7485 },// Club
{ 590, 0, 0 },// Freight Box Trailer edit
{ 591, 0, 0 },// Article Trailer 3 edit
{ 592, 0, 0 },// Andromada edit
{ 593, 6000000, 6000 },// Dodo edit
{ 594, 0, 0 },// RC Cam edit
{ 595, 0, 0 },// Launch edit
{ 596, 0, 0 },// Police Car (LSPD) edit
{ 597, 0, 0 },// Police Car (SFPD) edit
{ 598, 0, 0 },// Police Car (LVPD) edit
{ 599, 0, 0 },// Police Ranger edit
{ 600, 605000, 1825 },// Picador
{ 601, 0, 0 },// S.W.A.T. edit
{ 602, 4100000, 4100 },// Alpha
{ 603, 6400000, 6400 },// Phoenix
{ 604, 0, 0 },// Glendale Shit edit
{ 605, 0, 0 },// Sadler Shit edit
{ 606, 0, 0 },// Baggage Trailer "A" edit
{ 607, 0, 0 },// Baggage Trailer "B" edit
{ 608, 0, 0 },// Tug Stairs Trailer edit
{ 609, 0, 0 },// Boxville
{ 610, 0, 0 },// Farm Trailer edit
{ 611, 0, 0 } // Utility Trailer edit
};
//------------------------------------------------------------------------------
new WeapNames[48][32] = {
"Unarmed",
"Brass Knuckles",
"Golf Club",
"Night Stick",
"Knife",
"Baseball Bat",
"Shovel",
"Pool Cue",
"Katana",
"Chainsaw",
"Purple Dildo",
"Big White Vibrator",
"Medium White Vibrator",
"Small White Vibrator",
"Flowers",
"Cane",
"Grenade",
"Tear Gas",
"Molotov",
"Invalid Weapon",
"Invalid Weapon",
"Invalid Weapon",
"Colt 45",
"Silenced Colt 45",
"Desert Eagle",
"Shotgun",
"Sawnoff Shotgun",
"Combat Shotgun",
"Micro SMG",
"SMG",
"AK47",
"M4",
"Tec9",
"Country Rifle",
"Sniper Rifle",
"Rocket Launcher",
"HS Rocket Launcher",
"Flamethrower",
"Minigun",
"Satchel Charge",
"Detonator",
"Spray Can",
"Fire Extinguisher",
"Camera",
"Night Vision Goggles",
"Infrared Vision Goggles",
"Parachute",
"Fake Pistol"
};
new wWeapNames[48][32] = {
"pesnicama",
"Knuckles",
"Golf Club",
"Night Stick",
"Knife",
"Bat",
"Shovel",
"Pool Cue",
"Katana",
"Chainsaw",
"Purple Dildo",
"Big White Vibrator",
"Medium White Vibrator",
"Small White Vibrator",
"Flowers",
"Cane",
"Grenade",
"Tear Gas",
"Molotov",
"Invalid",
"Invalid",
"Invalid",
"Colt 45",
"Silenced",
"Deagle",
"Shotgun",
"Sawnoff",
"Combat",
"Micro SMG",
"SMG",
"AK47",
"M4",
"Tec9",
"Rifle",
"Sniper",
"Rocket",
"HS Rocket",
"Flamethrower",
"Minigun",
"Satchel Charge",
"Detonator",
"Spray Can",
"Fire Extinguisher",
"Camera",
"Night Vision Goggles",
"Infrared Vision Goggles",
"Parachute",
"Fake Pistol"
};

//============================[Moduli] =======================================

//===========================[FORWARDOVI]=====================================

forward split(const strsrc[], strdest[][], delimiter);
forward ImmobCountForPlayer(playerid);
forward BreakLockCountForPlayer(playerid);
forward Register(playerid);
forward LoadATM(id, name[], value[]);
forward ZaustaviWAR(w);
forward TimerWAROstaloVremeB(w);
forward VehicleBreakLock(playerid, vehicleid, autoid);
forward TrashLimitOff(playerid);
forward JediTimerOff(playerid);
forward NargilaTimerOff(playerid);
forward UpdatePlayerGps(playerid, fresh);
forward GetPlayerBusinessId(playerid, type);
forward LoadEvent(id, name[], value[]);
forward EventTimeR();
forward UlazIzlaz(playerid);
forward SacuvajATM(id);
forward StopCameraEffect(playerid);
forward Speeding(playerid);
forward NewsOn();
forward AddsOn();
forward SaveBusiness(id);
forward SaveProperty(id);
forward SacuvajObjekte(id);
forward OcitajImovinu(id, name[], value[]);
forward OcitajObjekte(id, name[], value[]);
forward SacuvajKont(id);
forward OcitajKont(id, name[], value[]);
forward SacuvajBrzuHranu(id);
forward OcitajGovornicu(id, name[], value[]);
forward SacuvajGovornicu(id);
forward OcitajNargilu(id, name[], value[]);
forward SacuvajNargilu(id);
forward OcitajBrzuHranu(id, name[], value[]);
forward OcitajFirmu(idx, name[], value[]);
forward SaveVehicle(id);
forward SaveAntiCheat();
forward LoadAntiCheat(name[], value[]);
forward OcitajVozilo(id, name[], value[]);
forward PorukaRadius(Float:radi, playerid, string[], col1);
forward SlobodnoSada(playerid);
forward PostaviSpawn(playerid);
forward OcitajKorisnika(playerid, name[], value[]);
forward OcitajAdmina(playerid, name[], value[]);
forward SaveOrganization(id);
forward UcitajOrganizaciju(id, name[], value[]);
forward VehicleEngineStart(playerid);
forward KneeTrain(playerid);
forward BoxTrain(playerid);
forward KungTrain(playerid);
forward GrabTrain(playerid);
forward GPSConnect(playerid, gpslvl, vehicleid);
forward KickIgraca(playerid);
forward AntiSpawnCrash();
forward ResprayTimer(playerid, autoid);
forward CarDamageTimer(playerid);
forward CheckGas(playerid);
forward Fillup(playerid, fuel);
forward Postaviotable(playerid, izbor);
forward Istovar(playerid, vehicleid, broj);
forward Utovar(playerid, vehicleid, broj);
forward PayDay(playerid);
forward PayCheck(playerid);
forward StopMusic();
forward TravaT(i);
forward SrednjaCasovi(playerid, broj);
forward FakultetCasovi(playerid, broj);
forward OsnovnaCasovi(playerid, broj);
forward CarCheck(playerid);
forward LoadFurniture(hid);
forward SaveFurniture(hid);
forward Provala(playerid);
forward TazovanTajmer(playerid);
forward BackupClear(playerid, calledbytimer);
forward KSpam(playerid);
forward PocetniTut(playerid, izbor);
forward Taxitimer(playerid);
forward SacuvajAdmina(playerid);
forward ClearKnock(playerid);
forward ClearPlayerRob(playerid);
forward Resetspawnvar(playerid);

//============================[FUNKCIJE]======================================
ResetujWarIgraca(playerid) {
WARPInfo[playerid][WARTim][0] = false;
WARPInfo[playerid][WARTim][1] = false;
WARPInfo[playerid][WARUbistva] = 0;
WARPInfo[playerid][WARSmrti] = 0;
WARPInfo[playerid][WARIgrac] = -1;}

forward VehicleParkTimer(parkID, vehicleid);
public VehicleParkTimer(parkID, vehicleid) {

if(vehicleid != INVALID_VEHICLE_ID && Parked[vehicleid] != -1) {

	ParkingPlaces[parkID][Parked[vehicleid]][parkTaken] = false;

	Parked[vehicleid] = -1;
	Fusion_KillTimer(ParkingTime[vehicleid]);

	new TmpZone[MAX_ZONE_NAME];
	GetVehicleZone(vehicleid, TmpZone, sizeof(TmpZone));

	for(new id = 1; id < MAX_ORG; id++) {

		if(OI[id][oTip] == ORG_TIP_PS) {
			new varstring[156];
			format(varstring, sizeof(varstring), ""col_server"[PARKING SERVIS] "col_white"Vozilu je isteklo mesto za parking u ulici "col_server"%s.", TmpZone);
			OrgPoruka(id, -1, varstring);
		}
	}
}

return 1;}

stock stringtoUpperCase(str[]) {

new string[64];
format(string, sizeof(string), "%s", str);
for(new i = 0; i < sizeof(string); i++) {

	toupper(string[i]);}
return string;}


stock NextParkingID(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), PARKING_FILE, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break;}}
	return (id);}

GetNearestParkingZone(playerid) {
new Float:Pos[4];
GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
for(new id = 1; id < MAX_PARKINGS; id++) {
	if(Pos[0] <= ParkingInfo[id][parkMaxX] && Pos[0] >= ParkingInfo[id][parkMinX] && Pos[1] <= ParkingInfo[id][parkMaxY] && Pos[1] >= ParkingInfo[id][parkMinY]) {
		return id;
	}
}
return -1;}

stock IsCordsInOtherParkingZone(Float:x, Float:y) {
for(new id = 1; id < MAX_PARKINGS; id++) {
	if(x <= ParkingInfo[id][parkMaxX] && x >= ParkingInfo[id][parkMinX] && y <= ParkingInfo[id][parkMaxY] && y >= ParkingInfo[id][parkMinY]) {
		return id;
	}
}
return -1;}

stock IsCordsInParkingZone(id, Float:x, Float:y) {

if(x <= ParkingInfo[id][parkMaxX] && x >= ParkingInfo[id][parkMinX] && y <= ParkingInfo[id][parkMaxY] && y >= ParkingInfo[id][parkMinY]) {
	return id;}
return -1;}

forward Parking_Save(id);
public Parking_Save(id) {

new ifile[60];
format(ifile, sizeof(ifile), PARKING_FILE, id);
new INI:File = INI_Open(ifile);

INI_WriteBool(File, "Placed", ParkingInfo[id][ParkPlaced]);
INI_WriteFloat(File, "ObjectPos_X", ParkingInfo[id][parkObjectPos][0]);
INI_WriteFloat(File, "ObjectPos_Y", ParkingInfo[id][parkObjectPos][1]);
INI_WriteFloat(File, "ObjectPos_Z", ParkingInfo[id][parkObjectPos][2]);
INI_WriteFloat(File, "ObjectPos_RX", ParkingInfo[id][parkObjectPos][3]);
INI_WriteFloat(File, "ObjectPos_RY", ParkingInfo[id][parkObjectPos][4]);
INI_WriteFloat(File, "ObjectPos_RZ", ParkingInfo[id][parkObjectPos][5]);

INI_WriteInt(File, "Int", ParkingInfo[id][parkInt]);
INI_WriteInt(File, "VW", ParkingInfo[id][parkVW]);

INI_WriteFloat(File, "MaxX", ParkingInfo[id][parkMaxX]);
INI_WriteFloat(File, "MinX", ParkingInfo[id][parkMinX]);
INI_WriteFloat(File, "MaxY", ParkingInfo[id][parkMaxY]);
INI_WriteFloat(File, "MinY", ParkingInfo[id][parkMinY]);

INI_WriteFloat(File, "Pickup_1_Pos_X", ParkingInfo[id][parkPickup_1_Pos][0]);
INI_WriteFloat(File, "Pickup_1_Pos_Y", ParkingInfo[id][parkPickup_1_Pos][1]);
INI_WriteFloat(File, "Pickup_1_Pos_Z", ParkingInfo[id][parkPickup_1_Pos][2]);

INI_WriteFloat(File, "Pickup_2_Pos_X", ParkingInfo[id][parkPickup_2_Pos][0]);
INI_WriteFloat(File, "Pickup_2_Pos_Y", ParkingInfo[id][parkPickup_2_Pos][1]);
INI_WriteFloat(File, "Pickup_2_Pos_Z", ParkingInfo[id][parkPickup_2_Pos][2]);

INI_WriteInt(File, "MaxParkPlaces", ParkingInfo[id][parkMaxParkPlaces]);

INI_Close(File);

return (true);}

forward Parking_Load(id, name[], value[]);
public Parking_Load(id, name[], value[]) {

new string[24];

INI_Bool("Placed", ParkingInfo[id][ParkPlaced]);
INI_Float("ObjectPos_X", ParkingInfo[id][parkObjectPos][0]);
INI_Float("ObjectPos_Y", ParkingInfo[id][parkObjectPos][1]);
INI_Float("ObjectPos_Z", ParkingInfo[id][parkObjectPos][2]);
INI_Float("ObjectPos_RX", ParkingInfo[id][parkObjectPos][3]);
INI_Float("ObjectPos_RY", ParkingInfo[id][parkObjectPos][4]);
INI_Float("ObjectPos_RZ", ParkingInfo[id][parkObjectPos][5]);

INI_Int("Int", ParkingInfo[id][parkInt]);
INI_Int("VW", ParkingInfo[id][parkVW]);

INI_Float("Pickup_1_Pos_X", ParkingInfo[id][parkPickup_1_Pos][0]);
INI_Float("Pickup_1_Pos_Y", ParkingInfo[id][parkPickup_1_Pos][1]);
INI_Float("Pickup_1_Pos_Z", ParkingInfo[id][parkPickup_1_Pos][2]);

INI_Float("Pickup_2_Pos_X", ParkingInfo[id][parkPickup_2_Pos][0]);
INI_Float("Pickup_2_Pos_Y", ParkingInfo[id][parkPickup_2_Pos][1]);
INI_Float("Pickup_2_Pos_Z", ParkingInfo[id][parkPickup_2_Pos][2]);

INI_Float("MaxX", ParkingInfo[id][parkMaxX]);
INI_Float("MinX", ParkingInfo[id][parkMinX]);
INI_Float("MaxY", ParkingInfo[id][parkMaxY]);
INI_Float("MinY", ParkingInfo[id][parkMinY]);

INI_Int("MaxParkPlaces", ParkingInfo[id][parkMaxParkPlaces]);


for(new i = 0; i < ParkingInfo[id][parkMaxParkPlaces]; i++) {

	ParkingPlaces[id][i][parkTaken] = false;
	format(string, sizeof(string), "parkPlace_X%d", i);
	INI_Float(string, ParkingPlaces[id][i][parkPlace_X]);
	format(string, sizeof(string), "parkPlace_Y%d", i);
	INI_Float(string, ParkingPlaces[id][i][parkPlace_Y]);
	format(string, sizeof(string), "parkPlace_Z%d", i);
	INI_Float(string, ParkingPlaces[id][i][parkPlace_Z]);
	format(string, sizeof(string), "parkPlace_A%d", i);
	INI_Float(string, ParkingPlaces[id][i][parkPlace_A]);}
return 1;}

forward Prerada(playerid);
public Prerada(playerid) {

Fusion_KillTimer(NamestajTajmer[playerid]);
DestroyPlayerObject(playerid, Objekat[playerid]);
Objekat[playerid] = CreatePlayerObject(playerid, 2410, 2148.72168, -2270.14478, 13.23200,   0.00000, 0.00000, -45.00000);
MovePlayerObject(playerid, Objekat[playerid], 2145.72437, -2266.87305, 13.23200, 1.0);
return true;}

forward Prerada2(playerid);
public Prerada2(playerid) {

Fusion_KillTimer(NamestajTajmer2[playerid]);
EndWood[playerid] = 0;
return true;}

forward TimerRezanja(playerid);
public TimerRezanja(playerid) {

Fusion_KillTimer(NamestajTajmer[playerid]);
if(Rezanje[playerid] != 100) {
	ClearAnimations(playerid);}
KoristioRezanje[playerid] = 0;
if(Rezanje[playerid] != 100) {
	TogglePlayerControllable(playerid, false);}
return true;}

//------------------------------------------------------------------------------
ResetPlayer(playerid) {
if(IsValidDynamicMapIcon(PlayerGpsRadar[playerid][_pgrIconId])) {
	DestroyDynamicMapIcon(PlayerGpsRadar[playerid][_pgrIconId]);}

if(IsValidDynamicObject(PlayerGpsRadar[playerid][_pgrObject])) {
	DestroyDynamicObject(PlayerGpsRadar[playerid][_pgrObject]);}

if(IsValidDynamicCP(PlayerGpsRadar[playerid][_pgrCheckPointId])) {
	DestroyDynamicCP(PlayerGpsRadar[playerid][_pgrCheckPointId]);}

gPlayerUsingLoopingAnim[playerid] = 0;
gPlayerAnimLibsPreloaded[playerid] = 0;
g_fSpeedCap[playerid] = 0.0;

rconCheck[playerid] = false;
Tempomat[playerid] = false;
spawnose[playerid] = 0;
acspam[playerid] = 0;
admingsupozoreni[playerid] = 0;

StapZaPecanje[playerid] = 0;

TeleportNexAc[playerid] = false;

imaVPN[playerid] = 0;
AltChat[playerid] = true;
TPZahtev[playerid] = -1;

PlayerGpsRadar[playerid][_pgrIconId] = -1;
PlayerGpsRadar[playerid][_pgrObject] = -1;
PlayerGpsRadar[playerid][_pgrCheckPointId] = -1;
ResetujAdmina(playerid);
//
ResetujWarIgraca(playerid);
ResetTuningInfo(playerid);
//
noclipdata[playerid][cameramode] 	= CAMERA_MODE_NONE;
noclipdata[playerid][lrold]	   	 	= 0;
noclipdata[playerid][udold]   		= 0;
noclipdata[playerid][mode]   		= 0;
noclipdata[playerid][lastmove]   	= 0;
noclipdata[playerid][accelmul]   	= 0.0;
IsCreating[playerid] 				= false;
IsReSettingStart[playerid] 			= false;
IsReSettingEnd[playerid] 			= false;
SettingFirstLoc[playerid] 			= false;
SettingLastLoc[playerid] 			= false;
IsCamMoving[playerid] 				= false;
coordInfo[playerid][MoveSpeed] 		= 1000;
coordInfo[playerid][RotSpeed] 		= 1000;
//
flymodecamera[playerid][cameramode] 	= false;
flymodecamera[playerid][lrold]	   	 	= 0;
flymodecamera[playerid][udold]   		= 0;
flymodecamera[playerid][mode]   		= 0;
flymodecamera[playerid][lastmove]   	= 0;
flymodecamera[playerid][accelmul]   	= 0.0;
//
for(new i = 0; i < MAX_INVENTORY; i++) {
	inventoryInfo[playerid][i][invExists] = false;
	inventoryInfo[playerid][i][invModel] = 0;
	inventoryInfo[playerid][i][invQuantity] = 0;
	strmid(inventoryInfo[playerid][i][invItem], "None", 0, strlen("None"), 32);}
for(new i = 0; i < 10; i++) {
	KladionicaListic[playerid][parID][i] = -1;
	KladionicaListic[playerid][keciksdva][i] = -1;
	KladionicaListic[playerid][Kvota][i] = 0.0;
	KladionicaListic[playerid][teamID1][i] = -1;
	KladionicaListic[playerid][teamID2][i] = -1;}
KladionicaListic[playerid][Uplaceno] = false;
KladionicaListic[playerid][Zavrseno] = false;
KladionicaListic[playerid][Uplata] = 0;
	KladionicaListic[playerid][Dobitak] = 0;
	KladionicaListic[playerid][Status] = false;
IzabraniPar[playerid] = -1;
//
EndWood[playerid] = 0;
//
Fusion_KillTimer(rconCheckTimer[playerid]);
Fusion_KillTimer(Putovar[playerid]);
Fusion_KillTimer(Pistovar[playerid]);
Fusion_KillTimer(NamestajTajmer[playerid]);
Fusion_KillTimer(NamestajTajmer2[playerid]);
Fusion_KillTimer(ProveriInvOruzje[playerid]);
Fusion_KillTimer(TimerLearn[playerid]);
//Fusion_KillTimer(EffectTimer[playerid]);
Fusion_KillTimer(gZone_Timer[playerid]);
Fusion_KillTimer(zauzimanje_firme_Timer[playerid]);
Fusion_KillTimer(PusenjeTimer[playerid]);
Fusion_KillTimer(BusVozac[playerid]);
Fusion_KillTimer(PosaoMasinovodja[playerid]);
Fusion_KillTimer(atmrobTimer[playerid]);
Fusion_KillTimer(SkolaTimer[playerid]);
Fusion_KillTimer(TimerPitanje[playerid]);
Fusion_KillTimer(RentTimer[playerid]);
Fusion_KillTimer(DragTimer[playerid]);
Fusion_KillTimer(TimerTutorial[playerid]);
Fusion_KillTimer(FarbanjeTimer[playerid]);
Fusion_KillTimer(PProzoraTimer[playerid]);
Fusion_KillTimer(BolnicaTimer[playerid]);
Fusion_KillTimer(TaxiTimer[playerid]);
Fusion_KillTimer(TazerTimer[playerid]);
Fusion_KillTimer(TrashTimer[playerid]);
Fusion_KillTimer(PilotTimer[playerid]);
Fusion_KillTimer(FarbanjeTimer[playerid]);
Fusion_KillTimer(TravaTimer[playerid]);
Fusion_KillTimer(IzazivanjeTimer[playerid]);
Fusion_KillTimer(PljackanjeBankeTimer[playerid]);
Fusion_KillTimer(PljackanjeZlatareTimer[playerid]);
Fusion_KillTimer(rudarPosao[playerid][rudarTimer]);
Fusion_KillTimer(vocarPosao[playerid][vocarTimer]);

//----------------[Enum]----------------
PlayerInfo[playerid][xPol] = 1;
PlayerInfo[playerid][xGodine] = 0;
PlayerInfo[playerid][xNovac] = 0;
PlayerInfo[playerid][xLevel] = 0;
PlayerInfo[playerid][xRespekt] = 0;
PlayerInfo[playerid][xPoboljsanja] = 0;
PlayerInfo[playerid][xPayDay] = 0;
PlayerInfo[playerid][xAdmin] = 0;
PlayerInfo[playerid][xASlot] = 0;
PlayerInfo[playerid][xHSlot] = 0;
PlayerInfo[playerid][xSkin] = 26;
PlayerInfo[playerid][xSpawn] = 0;
PlayerInfo[playerid][xLider] = 0;
PlayerInfo[playerid][xClan] = 0;
PlayerInfo[playerid][xRank] = 0;
PlayerInfo[playerid][xVoziloID][0] = -1;
PlayerInfo[playerid][xVoziloID][1] = -1;
PlayerInfo[playerid][xVoziloID][2] = -1;
PlayerInfo[playerid][xVoziloID][3] = -1;
PlayerInfo[playerid][xMaterijali] = 0;
PlayerInfo[playerid][xFirmaID] = -1;
PlayerInfo[playerid][xPosao] = 0;
PlayerInfo[playerid][xUgovor] = -1;
PlayerInfo[playerid][xMehSkill] = 0;
PlayerInfo[playerid][xMDelovi] = 0;
PlayerInfo[playerid][xHead] = 0;
PlayerInfo[playerid][xHeadPos][0] = 0;
PlayerInfo[playerid][xHeadPos][1] = 0;
PlayerInfo[playerid][xHeadPos][2] = 0;
PlayerInfo[playerid][xHeadPos][3] = 0;
PlayerInfo[playerid][xStaffMin] = 0;
PlayerInfo[playerid][xoffProperty1Check] = 0;
PlayerInfo[playerid][xoffProperty2Check] = 0;
PlayerInfo[playerid][xoffProperty3Check] = 0;
PlayerInfo[playerid][xoffVozilo1Check] = 0;
PlayerInfo[playerid][xoffVozilo2Check] = 0;
PlayerInfo[playerid][xoffVozilo3Check] = 0;
PlayerInfo[playerid][xoffFirmaCheck] = 0;
PlayerInfo[playerid][xoffHotelCheck] = 0;
PlayerInfo[playerid][xHeadPos][4] = 0;
PlayerInfo[playerid][xHeadPos][5] = 0;
PlayerInfo[playerid][xHeadPos][6] = 0;
PlayerInfo[playerid][xHeadPos][7] = 0;
PlayerInfo[playerid][xHeadPos][8] = 0;
PlayerInfo[playerid][xFace] = 0;
PlayerInfo[playerid][xFacePos][0] = 0;
PlayerInfo[playerid][xFacePos][1] = 0;
PlayerInfo[playerid][xFacePos][2] = 0;
PlayerInfo[playerid][xFacePos][3] = 0;
PlayerInfo[playerid][xFacePos][4] = 0;
PlayerInfo[playerid][xFacePos][5] = 0;
PlayerInfo[playerid][xFacePos][6] = 0;
PlayerInfo[playerid][xFacePos][7] = 0;
PlayerInfo[playerid][xFacePos][8] = 0;
PlayerInfo[playerid][xSungMask] = 0;
PlayerInfo[playerid][xSungMaskPos][0] = 0;
PlayerInfo[playerid][xSungMaskPos][1] = 0;
PlayerInfo[playerid][xSungMaskPos][2] = 0;
PlayerInfo[playerid][xSungMaskPos][3] = 0;
PlayerInfo[playerid][xSungMaskPos][4] = 0;
PlayerInfo[playerid][xSungMaskPos][5] = 0;
PlayerInfo[playerid][xSungMaskPos][6] = 0;
PlayerInfo[playerid][xSungMaskPos][7] = 0;
PlayerInfo[playerid][xSungMaskPos][8] = 0;
PlayerInfo[playerid][xCigare] = 0;
PlayerInfo[playerid][xUpaljac] = 0;
PlayerInfo[playerid][xBStil] = 0;
PlayerInfo[playerid][xRegistrovan] = 0;
PlayerInfo[playerid][xSHealth] = 0;
PlayerInfo[playerid][xBrojTelefona] = 0;
PlayerInfo[playerid][xVozacka] = 0;
PlayerInfo[playerid][xMotorska] = 0;
PlayerInfo[playerid][xKamionskaC1] = 0;
PlayerInfo[playerid][xKamionskaC2] = 0;
PlayerInfo[playerid][xKamionskaC3] = 0;
PlayerInfo[playerid][xBrodska] = 0;
PlayerInfo[playerid][xLetelica] = 0;
PlayerInfo[playerid][xOsnovna] = 0;
PlayerInfo[playerid][xSrednja] = 0;
PlayerInfo[playerid][xFakultet] = 0;
PlayerInfo[playerid][xSkolaLimit] = 0;
PlayerInfo[playerid][xUbijen] = 0;
PlayerInfo[playerid][xDrug][0] = 0;
PlayerInfo[playerid][xDrug][1] = 0;
PlayerInfo[playerid][xDrug][2] = 0;
PlayerInfo[playerid][xDrug][3] = 0;
PlayerInfo[playerid][xDrug][4] = 0;
PlayerInfo[playerid][xDrugCode][0] = 0;
PlayerInfo[playerid][xDrugCode][1] = 0;
PlayerInfo[playerid][xDrugCode][2] = 0;
PlayerInfo[playerid][xDrugCode][3] = 0;
PlayerInfo[playerid][xDrugCode][4] = 0;
PlayerInfo[playerid][xSolna] = 0;
PlayerInfo[playerid][xPseudo] = 0;
PlayerInfo[playerid][xSodaB] = 0;
PlayerInfo[playerid][xCrvenif] = 0;
PlayerInfo[playerid][xLysAcid] = 0;
PlayerInfo[playerid][xDesVoda] = 0;
PlayerInfo[playerid][xMarihuana] = 0;
PlayerInfo[playerid][xOpium] = 0;
PlayerInfo[playerid][xKalcij] = 0;
PlayerInfo[playerid][xAmonijH] = 0;
PlayerInfo[playerid][xKokain] = 0;
PlayerInfo[playerid][xKokain2] = 0;
PlayerInfo[playerid][xMetilAmin] = 0;
PlayerInfo[playerid][xHeroinAddict] = false;
PlayerInfo[playerid][xHeroinUsed] = 0;
PlayerInfo[playerid][xHeroinIndicator] = 0;
PlayerInfo[playerid][xCokeCrackAddict] = false;
PlayerInfo[playerid][xCokeCrackUsed] = 0;
PlayerInfo[playerid][xCokeCrackIndicator] = 0;
PlayerInfo[playerid][xMethAddict] = false;
PlayerInfo[playerid][xMethIndicator] = 0;
PlayerInfo[playerid][xMethUsed] = 0;
PlayerInfo[playerid][xInekcija] = false;
PlayerInfo[playerid][xToolkit] = false;
PlayerInfo[playerid][xProperty][0] = -1;
PlayerInfo[playerid][xProperty][1] = -1;
PlayerInfo[playerid][xProperty][2] = -1;
PlayerInfo[playerid][xObject][0] = -1;
PlayerInfo[playerid][xObject][1] = -1;
PlayerInfo[playerid][xObject][2] = -1;
PlayerInfo[playerid][xObject][3] = -1;
PlayerInfo[playerid][xObject][4] = -1;
PlayerInfo[playerid][xObject][5] = -1;
PlayerInfo[playerid][xObject][6] = -1;
PlayerInfo[playerid][xObject][7] = -1;
PlayerInfo[playerid][xObject][8] = -1;
PlayerInfo[playerid][xObject][9] = -1;
PlayerInfo[playerid][xGunLicense] = false;
PlayerInfo[playerid][xTelefonBon] = 0;
PlayerInfo[playerid][xModelTelefona] = 0;
PlayerInfo[playerid][xSnaga] = 0;
PlayerInfo[playerid][xZatvor] = 0;
PlayerInfo[playerid][xZatvorVreme] = 0;
PlayerInfo[playerid][xWanted] = 0;
PlayerInfo[playerid][xUhapsen] = 0;
PlayerInfo[playerid][xPDUhapsio] = 0;
PlayerInfo[playerid][xPDStatsTicket] = 0;
PlayerInfo[playerid][xPDStatsTicketMoney] = 0;
PlayerInfo[playerid][xTakenWeps] = 0;
PlayerInfo[playerid][xTakenDrugs] = 0;
PlayerInfo[playerid][xPocetniTut] = 0;
PlayerInfo[playerid][xAKod] = 0;
PlayerInfo[playerid][xSat] = 0;
PlayerInfo[playerid][xMaskID] = 0;
PlayerInfo[playerid][xBRacun] = 0;
PlayerInfo[playerid][xPreostaloZaOtplatu] = 0;
PlayerInfo[playerid][xIznosRate] = 0;
PlayerInfo[playerid][xIznosKredita] = 0;
PlayerInfo[playerid][xOnlineSati] = 0;
PlayerInfo[playerid][xHelper] = 0;
PlayerInfo[playerid][xHAskq] = 0;
PlayerInfo[playerid][xHDutyTime] = 0;
PlayerInfo[playerid][xHDutyTimeMin] = 0;
PlayerInfo[playerid][xWarn] = 0;
PlayerInfo[playerid][xMute] = 0;
PlayerInfo[playerid][xMuteAd] = 0;
PlayerInfo[playerid][xDisarm] = 0;
PlayerInfo[playerid][xOffWarn] = 0;
PlayerInfo[playerid][xOffFine] = 0;
PlayerInfo[playerid][xMarker][0] = 0.00000;
PlayerInfo[playerid][xMarker][1] = 0.00000;
PlayerInfo[playerid][xMarker][2] = 0.00000;
PlayerInfo[playerid][xBrojNews] = 0;
PlayerInfo[playerid][xOrgUgovor] = 0;
PlayerInfo[playerid][xGpsLevel] = 0;
PlayerInfo[playerid][xHelmet] = 0;
PlayerInfo[playerid][xBDays] = 0;
PlayerInfo[playerid][xBMonths] = 0;
PlayerInfo[playerid][xBYears] = 0;
PlayerInfo[playerid][xGradRank] = 0;
PlayerInfo[playerid][xSpawned] = 0;
PlayerInfo[playerid][xSkriptaRank] = 0;
PlayerInfo[playerid][xUlazBL] = 0;
PlayerInfo[playerid][xBoombox] = false;
PlayerInfo[playerid][xHelmetPos][0] = 0;
PlayerInfo[playerid][xHelmetPos][1] = 0;
PlayerInfo[playerid][xHelmetPos][2] = 0;
PlayerInfo[playerid][xHelmetPos][3] = 0;
PlayerInfo[playerid][xHelmetPos][4] = 0;
PlayerInfo[playerid][xHelmetPos][5] = 0;
PlayerInfo[playerid][xHelmetPos][6] = 0;
PlayerInfo[playerid][xHelmetPos][7] = 0;
PlayerInfo[playerid][xHelmetPos][8] = 0;
PlayerInfo[playerid][xDrzava] = 0;
PlayerInfo[playerid][xVIPLevel] = 0;
PlayerInfo[playerid][xYouTuber] = 0;
PlayerInfo[playerid][xHitmenCena] = 0;
PlayerInfo[playerid][xLesLimit] = 0;
PlayerInfo[playerid][xMarried] = false;
PlayerInfo[playerid][xTogMob] = false;
PlayerInfo[playerid][xHotelID] = -1;
PlayerInfo[playerid][xHotelRoom] = -1;
PlayerInfo[playerid][xPromoter] = 0;
PlayerInfo[playerid][xFieldID] = -1;
PlayerInfo[playerid][xSljive] = 0;
PlayerInfo[playerid][xKruske] = 0;
PlayerInfo[playerid][xJabuke] = 0;
PlayerInfo[playerid][xKupus] = 0;
PlayerInfo[playerid][xRuze] = 0;
PlayerInfo[playerid][xSemeSljive] = 0;
PlayerInfo[playerid][xSemeKruske] = 0;
PlayerInfo[playerid][xSemeJabuke] = 0;
PlayerInfo[playerid][xSemeKupusa] = 0;
PlayerInfo[playerid][xSemeRuze] = 0;
PlayerInfo[playerid][xLottoNumber] = 0;
PlayerInfo[playerid][xLottoMoney] = 0;
PlayerInfo[playerid][xDeagleSkill] = 0;
PlayerInfo[playerid][xPistolSkill] = 0;
PlayerInfo[playerid][xM4Skill] = 0;
PlayerInfo[playerid][xAKSkill] = 0;
PlayerInfo[playerid][xMPSkill] = 0;
PlayerInfo[playerid][xShotgunSkill] = 0;
PlayerInfo[playerid][xSawnSkill] = 0;
PlayerInfo[playerid][xSniperSkill] = 0;
PlayerInfo[playerid][xCombatSkill] = 0;
PlayerInfo[playerid][xGarageID] = -1;
PlayerInfo[playerid][xImaBRacun] = false;
PlayerInfo[playerid][xPlatniRacun] = 0;
PlayerInfo[playerid][xPlataPoen] = 0;
PlayerInfo[playerid][xDonatorSlot] = false;
PlayerInfo[playerid][xLeaveJail] = false;
PlayerInfo[playerid][xBailPrice] = 0;
PlayerInfo[playerid][xHangarTime] = 0;
PlayerInfo[playerid][xUzoPaket] = 0;
PlayerInfo[playerid][xZauzimanjeVreme] = 0;
PlayerInfo[playerid][xSvercer] = 0;
PlayerInfo[playerid][xEvent1Mesto] = 0;
PlayerInfo[playerid][xEvent2Mesto] = 0;
PlayerInfo[playerid][xEvent3Mesto] = 0;
PlayerInfo[playerid][xDMEventUbistva] = 0;
PlayerInfo[playerid][xRentID] = -1;
PlayerInfo[playerid][xZlato] = 0;
PlayerInfo[playerid][xPljackaVreme] = 0;
PlayerInfo[playerid][xRezervniKljucevi] = -1;
PlayerInfo[playerid][xRadarBodovi] = 0;
PlayerInfo[playerid][xDBoja] = 0;
PlayerInfo[playerid][xRPPoen] = 0;
PlayerInfo[playerid][xPodFGpoeni] = 0;
PlayerInfo[playerid][xFGpoeni] = 0;
PlayerInfo[playerid][xAktivpoeni] = 0;
PlayerInfo[playerid][xVipTime] = 0;
PlayerInfo[playerid][xPoklon] = 0;
PlayerInfo[playerid][xTestAFG] = 0;
PlayerInfo[playerid][xDonateVip] = 0;
PlayerInfo[playerid][xWOF] = -1;
PlayerInfo[playerid][xPenzija] = 0;
PlayerInfo[playerid][xRanac] = 0;
PlayerInfo[playerid][xKockica] = 0;
PlayerInfo[playerid][xPasos] = 0;
PlayerInfo[playerid][xSPoruke] = 0;
PlayerInfo[playerid][xSOglasi] = 0;
PlayerInfo[playerid][xSVesti] = 0;
PlayerInfo[playerid][xSFChat] = 0;
PlayerInfo[playerid][xSTelefon] = 0;
PlayerInfo[playerid][xSHud] = 0;
PlayerInfo[playerid][xBusilica] = 0;
PlayerInfo[playerid][xRiba] = 0;
PlayerInfo[playerid][xRibaKG] = 0;
PlayerInfo[playerid][xPaketic] = false;
PlayerInfo[playerid][xDBO] = false;
strmid(PlayerInfo[playerid][xKljucKapije], "Niko", 0, strlen("Niko"), 24);
strmid(PlayerInfo[playerid][xOffPJail], "N", 0, strlen("N"), 2);
strmid(PlayerInfo[playerid][xMarriedTo], "Niko", 0, strlen("Niko"), 24);
strmid(RealName[playerid], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 64);
//----------------[New]-----------------
farmerInfo[playerid][fifarmerSeeds] = 0;
farmerInfo[playerid][fifarmerPlantsPlanted] = -1;
farmerInfo[playerid][fifarmerWheatCreated] = -1;
farmerInfo[playerid][fifarmerPickupedBales] = 0;
farmerInfo[playerid][fifarmerPickupedBale] = false;
farmerInfo[playerid][fiHaveBucket] = false;
farmerInfo[playerid][fiCowNumber] = 0;
farmerInfo[playerid][fiVehicleBucket] = -1;
farmerInfo[playerid][fiBucketObject] = INVALID_OBJECT_ID;

askqInfo[playerid][askqSended] = false;
askqInfo[playerid][askqAnswered] = false;
strmid(askqInfo[playerid][askqAdmin], "None", 0, strlen("None"), 32);
strmid(askqInfo[playerid][askqAnswer], "None", 0, strlen("None"), 128);

NamestajLevel[playerid] = 0;
SKSK[playerid] = 0;
Rezanje[playerid] = 0;
KoristioRezanje[playerid] = 0;
FakeKillPlus[playerid] = 0;
FakeKillTime[playerid] = 0;
CreatingGZone[playerid] = -1;
CreatingGZoneID[playerid] = -1;
CreatingSZone[playerid] = -1;
CreatingSZoneID[playerid] = -1;
CreatingThing[playerid] = -1;
CreatingField[playerid] = -1;
VremeZaNovac[playerid] = 0;
VremeZaZlato[playerid] = 0;
CheckpointStatus[playerid] = 0;
StatsList[playerid] = 0;
PljackaVreme[playerid] = 0;
PljackaNovac[playerid] = 0;
Trenira[playerid] = 0;
TreniranjeProvera[playerid] = 0;
Trenirao[playerid] = 0;
treniranjetimer[playerid] = -1;
ZlatoVreme[playerid] = 0;
PljackaZlato[playerid] = 0;
NaDmEventu[playerid] = false;
PozvanDuel[playerid] = 0;
PozvaoGa[playerid] = -1;
DuelCount[playerid] = 0;
DuelHP[playerid] = 0;
DuelArmor[playerid] = 0;
DuelOruzje[playerid] = 0;
NaDustu[playerid] = false;
NaInferno[playerid] = false;
NaAssault[playerid] = false;
NaSnow[playerid] = false;
PuniGorivo[playerid] = false;
BiraPol[playerid] = 0;
DropedGun[playerid] = 0;
BiraSkin[playerid] = 0;
PlayerInBlowJob[playerid] = 0;
BrojLisica[playerid] = 0;
DeliverLevel[playerid] = 0;
TrafikaPrva[playerid] = 0;
ParkingPlace[playerid] = -1;
TrafikaTrenutna[playerid] = 0;
DeliverCar[playerid] = -1;
CarriesBox [playerid] = 0;
gZone_ID[playerid] = -1;
EventStranica[playerid] = 0;
gZone_Time[playerid] = 0;
gZone_InvMax1[playerid] = 0;
zauzimanje_firme_ID[playerid] = -1;
zauzimanje_firme_Vreme[playerid] = 0;
BlowJobCount[playerid] = 0;
OruzjeUInventoriju[playerid] = 0;
TazerMetkovi[playerid] = 0;
	Putovara[playerid] = false;
	Pistovara[playerid] = false;
	RibarOprema[playerid] = false;
//PlayerRun[playerid] = 0;
CreatingParkingLevel[playerid] = 0;
CreateParkingID[playerid] = -1;
ListaPrikazana[playerid] = false;
MojListicPrikazan[playerid] = false;
RezultatiPrikazana[playerid] = false;
takingselfie[playerid] = false;
WatchModel[playerid] = 19039;
SpecPos[playerid][0] = 0.0;
SpecPos[playerid][1] = 0.0;
SpecPos[playerid][2] = 0.0;
CreatingPos[playerid][0] = 0.0;
CreatingPos[playerid][1] = 0.0;
CreatingPos[playerid][2] = 0.0;
CreatingPos[playerid][3] = 0.0;
PraznaGajbica[playerid] = false;
ImaKanticu[playerid] = false;
GajbicaBiljka[playerid] = 0;
Polaganje[playerid] = 0;
ProcesFStation[playerid] = 0;
CreatingFStation[playerid] = -1;
rudarPosao[playerid][rudarIskopano] = 0;
vocarPosao[playerid][vocarObrao] = 0;
LoginAttempt[playerid] = 0;
CommandTime[playerid] = 0;
WatchingTV{ playerid } = 0;
Bandera[playerid] = 0;
KupljeneFakture[playerid] = false;
ResprayColor1[playerid] = -1;
ChosenItem[playerid] = -1;
GiveItemID[playerid] = -1;
IzabraniAskQ[playerid] = -1;
ResprayColor2[playerid] = -1;
BusLinija[playerid] = 0;
VozPosao[playerid] = 0;
ShowedRegister[playerid] = false;
CreatingOrg[playerid] = 0;
UsaoAutoProdaja[playerid] = -1;
DragedPlayerID[playerid] = -1;
Draged[playerid] = -1;
PlayerCement[playerid] = -1;
IDVozilaKojimSverca[playerid] = -1;
ProcesSvercanja[playerid] = 0;
PlayerPrevozNovca[playerid] = -1;
AdminDuty[playerid] = false;
AdminAfk[playerid] = false;
EditingBody[playerid] = 0;
RadioStatus[playerid] = 0;
UlogTrke[playerid] = 0;
PlayerCuffed[playerid] = 0;
PosaoRudar[playerid] = 0;
PosaoVocar[playerid] = 0;
PosaoDrvoseca[playerid] = 0;
PonudioIgrac[playerid] = -1;
ModelTrke[playerid] = 0;
ponudjenotomigacu[playerid] = 0;
electricNACP[playerid] = false;
IgracSeRegistruje[playerid] = false;
PocetniTutorialStartovan[playerid] = false;
PlayerDrugged[playerid] = false;
PlayerStoned[playerid] = false;
PlayerTuningCar[playerid] = false;
PosaoTDShowed[playerid] = false;
StatsTDShowed[playerid] = false;
BuyCarTDShowed[playerid] = false;
LaptopRuke[playerid] = false;
Dinamit[playerid] = false;
NightVision[playerid] = false;
ProcesPice[playerid] = 0;
alreadyPictured[playerid] = false;
TogHud[playerid] = false;
TogTag[playerid] = false;
IgracZavezan[playerid] = false;
IgracPeca[playerid] = false;
AccountVerified[playerid] = false;
KnockedDown[playerid] = false;
IgracOpljackan[playerid] = false;
VecjeUsao[playerid] = true;
Pojas[playerid] = false;
Uze[playerid] = false;
Maskuse[playerid] = false;
SearchNadji[playerid] = -1;
FlyMode[playerid] = false;
robbingATM[playerid] = -1;
CenaProdaje[playerid] = 0;
Poravnano[playerid] = 0;
robbingATMSeconds[playerid] = 95;
PlayerCP[playerid] = 0;
UkupnaCena[playerid] = 0;
ElectricOprema[playerid] = false;
ElectricPosao[playerid] = 0;
ShowedAtmTD[playerid] = false;
BrojilaKuca[playerid] = 0;
PoljeDroge[playerid] = -1;
LetSF[playerid] = 0;
LetLV[playerid] = 0;
EIDK[playerid] = -1;
EnteredGarage[playerid] = -1;
EditDGate[playerid] = -1;
EditDGateMove[playerid] = -1;
AdminVozilo[playerid] = -1;
TrkaVozilo[playerid] = -1;
Krugovi[playerid] = 0;
TrkaCheckpoint[playerid] = 0;
TrkaIzazov[playerid] = 0;
NaUtrci[playerid] = false;
PlacaPorez[playerid] = 0;
GlobalProdaja[playerid] = -1;
Ponudjeno[playerid] = -1;
Trazio[playerid] = -1;
ServerStatsChose[playerid] = 0;
inHotel[playerid] = -1;
GlobalCena[playerid] = -1;
GlobalID[playerid] = -1;
GlobalID_2[playerid] = -1;
anticheatinfo[playerid] = 0;
UzeoIzMarketa[playerid][0] = 0;
UzeoIzMarketa[playerid][1] = 0;
UzeoIzMarketa[playerid][2] = 0;
UzeoIzMarketa[playerid][3] = 0;
UzeoIzMarketa[playerid][4] = 0;
UzeoIzMarketa[playerid][5] = 0;
UzeoIzMarketa[playerid][6] = 0;
UzeoIzMarketa[playerid][7] = 0;
UzeoIzMarketa[playerid][8] = 0;
UzeoIzMarketa[playerid][9] = 0;
UzeoIzMarketa[playerid][10] = 0;
FaceOn[playerid] = false;
HeadOn[playerid] = false;
Spectate[playerid] = -1;
SpecaLik[playerid] = -1;
SungOn[playerid] = false;
PlayerEventVehID[playerid] = -1;
ListaBurg[playerid] = 0;
Training[playerid] = 0;
PlayerLogged[playerid] = false;
PolaganjeBodovi[playerid] = 0;
GreskaVoznja[playerid] = 0;
StaroVreme[playerid] = 0;
NovoVreme[playerid] = 0;
PokosenaTrava[playerid] = 0;
KrenuoKosenje[playerid] = false;
UzeoOpremu[playerid] = false;
RibarOprema[playerid] = false;
PereProzorcinu[playerid] = false;
HitmanInfo[playerid][GotHit] = 0;
HitmanInfo[playerid][PlacedNews] = 0;
HitmanInfo[playerid][GetChased] = 999;
HitmanInfo[playerid][GoChase] = 999;
Odbrojavanje[playerid] = 0;
Uciskolu[playerid] = false;
EditKontejnera[playerid] = -1;
EditBrzeHrane[playerid] = -1;
EditGovornice[playerid] = -1;
EditNargile[playerid] = -1;
EditSprayGang[playerid] = -1;
EditATM[playerid] = -1;
EditPresents[playerid] = -1;
EditCTrees[playerid] = -1;
EditXOrbs[playerid] = -1;
EditRadar[playerid] = -1;
Seeds[playerid] = 0;
SeedsK[playerid] = 0;
VrstaIlegala[playerid] = 0;
uFirmi[playerid] = -1;
uInterijeru[playerid] = -1;
KolicinaIlegala[playerid] = 0;
inProperty[playerid] = -1;
inOrgInt[playerid] = -1;
PoliceDuty[playerid] = false;
KupujeNamestaj[playerid] = 0;
strmid(ZlocinInfo[playerid][zPrijavio], "Nema", 0, strlen("Nema"), 255);
strmid(ZlocinInfo[playerid][zPocinio], "Nema", 0, strlen("Nema"), 255);
strmid(ZlocinInfo[playerid][zZlocin], "Nema", 0, strlen("Nema"), 255);
ImaTazer[playerid] = false;
RiotShield[playerid] = false;
TrunkVehicle[playerid] = -1;
MedicDuty[playerid] = false;
UzeoPicu[playerid] = false;
VoziIgracaID[playerid] = INVALID_PLAYER_ID;
offeredByCabbie[playerid] = INVALID_PLAYER_ID;
CenaVoznje[playerid] = 0;
TaximetarUkljucen[playerid] = false;
taxiDuty[playerid] = false;
PozvaoTaxi[playerid] = false;
KupljenGPS[playerid] = 0;
	PaketType[playerid] = 0;
	NosiPaketOruzja[playerid] = false;
	PropertySafeGun[playerid] = -1;
	NosiObjekt[playerid][0] = false;
	NosiObjekt[playerid][1] = false;
	NosiObjekt[playerid][2] = false;
	TrashLimit[playerid] = 0;
	TrashSearch[playerid] = 0;
	JediLimit[playerid] = 0;
	JediSearch[playerid] = 0;
	NargilaLimit[playerid] = 0;
	PusiNargilu[playerid] = 0;
	HelmetOn[playerid] = false;
	TelohraniteljUniforma[playerid] = false;
VozacUniforma[playerid] = false;
InAmbu[playerid] = -1;
BoomboxInfo[playerid][boomboxPlaced] = 0;
BoomboxInfo[playerid][boomboxPos][0] = 0.0;
BoomboxInfo[playerid][boomboxPos][1] = 0.0;
BoomboxInfo[playerid][boomboxPos][2] = 0.0;
Boombox[playerid] = IPI;
InputPassword[playerid] = false;
ChoseCountry[playerid] = false;
InputAge[playerid] = false;
InputMail[playerid] = false;
RegSex[playerid] = 1;
KreiranjeWara[playerid] = -1;
EventCP[playerid] = 0;
EventCarsCreate[playerid] = 0;
PlayerCreateEvent[playerid] = false;
ReportGlobal[playerid] = 0;
vRTC[playerid] = 0;
VIPPort[playerid] = 0;
	PromoterPort[playerid] = 0;
FixVehGlobal[playerid] = 0;
NewGlobal[playerid] = 0;
PlayerCPShow[playerid] = false;
KreiranAutoSalon[playerid] = -1;
KreiraGarazu[playerid] = -1;
PlayerBuyingAS[playerid] = -1;
IgracPosadio[playerid] = 0;
VremeZaCuvanje[playerid] = 0;
MinutiIgraca[playerid] = 0;
IzabraniPort[playerid] = 0;
ProposeOffer[playerid] = 999;
DivorceOffer[playerid] = 999;
MarryWitness[playerid] = 999;
MarryWitnessOffer[playerid] = 999;
MarriageCeremoney{ playerid } = 0;
ProposedTo[playerid] = 999;
GotProposedBy[playerid] = 999;
ChosenVehicle[playerid] = -1;
gpsid[playerid] = -1;
ObjectEdition_TYPE[playerid] = 255;
// Anti cheat
antiCheatCS[playerid][EnterVehTime] = 0;
antiCheatCS[playerid][LastWShot] = -1;
antiCheatCS[playerid][EnteredVehicle] = INVALID_VEHICLE_ID;
antiCheatCS[playerid][TakeVehicle] = INVALID_VEHICLE_ID;
antiCheatCS[playerid][SpamChat] = 0;
antiCheatCS[playerid][SpamCommand] = 0;
antiCheatCS[playerid][WeaponCheck] = 1;
antiCheatCS[playerid][WeaponDetect] = 3;
antiCheatCS[playerid][SpeedFall] = false;
antiCheatCS[playerid][TeleportCheck] = 0;
antiCheatCS[playerid][TeleportHack] = 0;
antiCheatCS[playerid][WeaponHack] = 0;
antiCheatCS[playerid][SpeedHack] = 0;
antiCheatCS[playerid][HighPing] = 0;
antiCheatCS[playerid][AFKMinute] = 0;
antiCheatCS[playerid][CPSCount] = 0;
antiCheatCS[playerid][CPSTick] = 0;
antiCheatCS[playerid][VehRepairTime] = 0;
antiCheatCS[playerid][CPPort] = 0;
antiCheatCS[playerid][CWTime] = 0;
antiCheatCS[playerid][CWVehID] = -1;
antiCheatCS[playerid][SpamVehicle] = 0;
antiCheatCS[playerid][LastAmmoChecks] = 0;
antiCheatCS[playerid][LastAmmo] = 0;
antiCheatCS[playerid][ArmedWeapon] = 0;
antiCheatCS[playerid][InTuningGarage] = false;
antiCheatCS[playerid][RemoveVehicle] = false;
for(new i = 0; i < 13; i++) {
	antiCheatCS[playerid][Weapon][i] = 0;
	antiCheatCS[playerid][Ammo][i] = 0;}
//----------------[PVar]-----------------
SetPVarInt(playerid, "GOTOOffer", 999);
SetPVarInt(playerid, "RepairEOffer", 999);
SetPVarInt(playerid, "RepairAOffer", 999);
SetPVarInt(playerid, "RepairLOffer", 999);
SetPVarInt(playerid, "RefillOffer", 999);
SetPVarInt(playerid, "RepairIOffer", 999);
SetPVarInt(playerid, "TicketOffer", 999);
SetPVarInt(playerid, "RepairBKOffer", 999);
SetPVarInt(playerid, "RepairTOffer", 999);
SetPVarInt(playerid, "ShakeOffer", 999);
SetPVarInt(playerid, "PlayerHasTest", 999);
SetPVarInt(playerid, "ResprayOffer", 999);
SetPVarInt(playerid, "ResprayDozvola", 999);
SetPVarInt(playerid, "RecoverOffer", 999);
SetPVarInt(playerid, "MedicineOffer", 999);
SetPVarInt(playerid, "CanisterFuel", 0);
SetPVarInt(playerid, "gGas", 1);
SetPVarInt(playerid, "Mobile", -1);
SetPVarInt(playerid, "LiveOffer", 999);
SetPVarInt(playerid, "TalkingLive", 255);}
//------------------------------------------------------------------------------
IsANoTrunkVehicle(vehicleID) {
switch(GetVehicleModel(vehicleID)) {
	case 403,406,407,408,411,416,417,423,424,425,430,432,434,435,441,443,444,446,447,449,450,452,453,454,457,460,464,465,469,472,473,476,481,485,486,493,494,495,501,502,503,504,505,509,510,512,513,514,515,520,524,525,528,530,531,532,537,538,539,544,552,556,557,564,568,569,570,571,572,573,574,578,583,584, 590,591,592,593,594,595,601,606,607,608,610,611:
		return true;}
return false;}
//-----------------------------------------------------------------------------
bool:Diesel(vehid) {
switch(GetVehicleModel(vehid)) {
	case 400, 403, 406, 407, 408, 409, 415, 416, 424, 427, 428, 429, 431, 433,
	437, 443, 444, 449, 451, 479, 480, 482, 489, 490, 494, 495, 496, 502, 503,
	507, 514, 515, 518, 524, 528, 535, 536, 544, 554, 555, 556, 557, 560, 562,
	567, 568, 575, 576, 579, 580, 582, 596, 597, 598, 599, 602: return true;}
return false;}
bool:Gasoline(vehid) {
switch(GetVehicleModel(vehid)) {
	case 401, 402, 404, 405, 410, 411, 412, 419, 434, 436, 438, 439, 420, 421,
	422, 426, 445, 448, 461, 462, 463, 468, 471, 475, 477, 481, 491, 492, 504,
	505, 506, 509, 516, 521, 522, 523, 526, 527, 529, 530, 533, 534, 540, 541,
	542, 543, 545, 549, 558, 559, 561, 565, 566, 571, 572, 581, 583, 585, 586,
	587, 603, 604, 605: return true;}
return false;}
bool:GasOil(vehid) {
switch(GetVehicleModel(vehid)) {
	case 413, 414, 418, 423, 440, 442, 455, 456, 457, 458, 459, 466, 467, 470,
	474, 478, 483, 485, 486, 498, 499, 500, 508, 510, 517, 525, 531, 532, 546,
	547, 550, 551, 552, 573, 574, 578, 588, 589, 600, 601, 609: return true;}
return false;}
// kerozin 417, 425 447 460 469 476 487 488 497 511, 512 513 519, 520, 548 553 563 577 592 593
// brod 430 446 452 453 454 472 473 484 493 539 595
// tenk 432
// voz 537, 538 569 570
//------------------------------------------------------------------------------
GetVehicleFuelType(vehicle) {

new fueltypeName[14] = "Fuel Type";

if(ScriptIDVozila[vehicle] != -1) {
	if(VehicleInfo[ScriptIDVozila[vehicle]][vFuelType] == 1) fueltypeName = "(DIZEL)";
	else if(VehicleInfo[ScriptIDVozila[vehicle]][vFuelType] == 2) fueltypeName = "(BENZIN)";
	else if(VehicleInfo[ScriptIDVozila[vehicle]][vFuelType] == 3) fueltypeName = "(GASNO ULJE)";
	else fueltypeName = "(BENZIN)";}
else fueltypeName = "(BENZIN)";

return fueltypeName;}
bool:IsVehicleBajs(vehid)
{
switch(GetVehicleModel(vehid))
{
	case 481, 509, 510: return true;}
return false;}
bool:IsVehicleTrain(vehid)
{
switch(GetVehicleModel(vehid))
{
	case 537, 538, 569, 570, 590: return true;}
return false;}
bool:isATractor(vehid)
{
if(GetVehicleModel(vehid) == 531) return true;
return false;}
bool:isAHarvester(vehid)
{
if(GetVehicleModel(vehid) == 532) return true;
return false;}
bool:IsVehiclePrikolica(vehid)
{
switch(GetVehicleModel(vehid))
{
	case 435, 450, 584, 591, 611, 610: return true;}
return false;}
bool:IsVehicleMotor(vehid)
{
switch(GetVehicleModel(vehid))
{
	case 448, 461, 462, 463, 468, 471, 521, 522, 523, 586, 581: return true;}
return false;}
bool:IsVehicleAuto(vehid)
{
switch(GetVehicleModel(vehid))
{
	case 400, 401, 402, 404, 405, 409, 410, 411, 412, 415, 419, 420, 421, 422,
	426, 429, 434, 436, 438, 439, 442, 445, 451, 458, 466, 467, 470, 474, 475,
	477, 478, 479, 480, 489, 490, 491, 492, 494, 495, 496, 500, 502, 503, 504,
	505, 506, 507, 516, 517, 518, 525, 526, 527, 528, 529, 533, 534, 535, 536,
	540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 552, 554, 555, 558, 559,
	560, 561, 562, 565, 566, 567, 568, 575, 576, 579, 580, 585, 587, 589, 596,
	597, 598, 599, 600, 602, 603, 604, 605, 444, 457, 483, 485, 530, 531, 539,
	556, 557, 574, 424, 583, 572: return true;}
return false;}
bool:IsVehicleC1(vehid)
{
switch(GetVehicleModel(vehid))
{
	case 499, 482, 498, 588, 609, 414, 582, 413, 440, 459, 456, 416, 423, 427,
	428, 508, 573, 601: return true;}
return false;}
bool:IsVehicleC2(vehid)
{
switch(GetVehicleModel(vehid))
{
	case 406, 407, 408, 431, 432, 433, 437, 443, 455, 486, 524, 532, 544, 578: return true;}
return false;}
bool:IsVehicleC3(vehid)
{
switch(GetVehicleModel(vehid))
{
	case 403, 514, 515: return true;}
return false;}
bool:IsVehicleBrod(vehid)
{
switch(GetVehicleModel(vehid))
{
	case 472, 473, 493, 595, 484, 430, 453, 452, 446, 454: return true;}
return false;}
bool:IsVehicleLetelica(vehid)
{
switch(GetVehicleModel(vehid))
{
	case 417, 425, 447, 460, 469, 476, 487, 488, 497, 511, 512, 513, 519,
	520, 548, 553, 563, 577, 592, 593: return true;}
return false;}
//------------------------------[ENCODES]------------------------------------
encode_tires(tire1, tire2, tire3, tire4) return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
encode_panels(flp, frp, rlp, rrp, windshield, front_bumper, rear_bumper)
{
return flp | (frp << 4) | (rlp << 8) | (rrp << 12) | (windshield << 16) | (front_bumper << 20) | (rear_bumper << 24);}
encode_doors(bonnet, boot, driver_door, passenger_door, behind_driver_door, behind_passenger_door)
{
#pragma unused behind_driver_door
#pragma unused behind_passenger_door
return bonnet | (boot << 8) | (driver_door << 16) | (passenger_door << 24);}
encode_lights(light1, light2, light3, light4)
{
return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);}
//==============================[STOCK]=======================================
stock SCM(playerid, color, const str[]) {
if(PlayerLogged[playerid] == true) {
	return SendClientMessage(playerid, color, str);}
return false;}
stock HexToInt(string[]) // By DracoBlue
{
	if (string[0]==0) return 0;
	new i;
	new cur=1;
	new res=0;
	for (i=strlen(string);i>0;i--) {
		if (string[i-1]<58) res=res+cur*(string[i-1]-48); else res=res+cur*(string[i-1]-65+10);
	cur=cur*16;
	}
	return res;}

//------------------------------------------------------------------------------

stock reactionRandom(Min, Max){
new rRandom;
rRandom = Min + random(Max);
return rRandom;}
stock TestReakcije() { //Indigo Gaming
	new big_string[128], Broj1, Broj2;
	Odgovor = (Broj1=random(50))*(Broj2=random(50));
	format(big_string, sizeof(big_string), "{F55B65][MATEMATICKI ZADATAK]{FFFFFF] Ko prvi odgovori tacno {F55B65]%d * %d{FFFFFF] dobija nagradu.",Broj1,Broj2);
	SCMA(-1, big_string);
	ReakcijaAktivna = 1;
	return (1);}
stock StartReaction() {

reactionMessage[0][0] = EOS;
reactionMessage[1][0] = EOS;
reactionWinner[0] = EOS;

reactionMoney = reactionRandom(.Min = 3000, .Max = 2000),

reactionMessage[0][0] = '\0';

for(new c; c < 15; ++c) {
	reactionMessage[0][c] = random(2) ? ('0' + random(9)) : (random(2) ? ('a' + random(26)) : ('A' + random(26)));}

reactionTest = 3;

format(reactionMessage[1], 128, "{F55B65][REAKCIJA] {FFFFFF]Ko prvi napise %s dobija %i$.", reactionMessage[0], reactionMoney);
SCMA(-1, reactionMessage[1]);

reactionTime = GetTickCount();}

stock EndReaction(playerid) {

DajIgracuNovac(playerid, reactionMoney);

reactionTime = (GetTickCount() - reactionTime);

format(reactionMessage[1], 128, "{F55B65][REAKCIJA] {FFFFFF]Igrac %s je prvi napisao %s (%d ms)- cestitke.", ImeIgraca(playerid), reactionMessage[0], reactionTime);
foreach(new i : Player) {

	if(i != playerid) {

		if(IsPlayerConnected(i)) {

			SendClientMessage(i, -1, reactionMessage[1]);
		}
	}
}

reactionTest = 0;

format(reactionMessage[1], 128, "{F55B65][REAKCIJA] {FFFFFF]Prvi ste napisali %s te dobili %i$ - cestitke.", reactionMessage[0], reactionMoney);
SendClientMessage(playerid, -1, reactionMessage[1]);
format(reactionMessage[1], 128, "{F55B65][REAKCIJA] {FFFFFF]Napisali ste u %d ms (%d sec).", reactionTime, floatround(reactionTime * 0.001));
SendClientMessage(playerid, -1, reactionMessage[1]);


PlayerInfo[playerid][xPodFGpoeni]++;
if(PlayerInfo[playerid][xPodFGpoeni] == 500) {

	PlayerInfo[playerid][xFGpoeni]++;
	PlayerInfo[playerid][xPodFGpoeni] = 0;
	SCM(playerid, ZUTA, "Dobili ste jedan FGpoen zbog 500 pogodjenih reakcija.");}

if(reactionTime < ServerInfo[ReactTime]) {

	format(reactionMessage[1], 256, "{F55B65][REAKCIJA] {FFFFFF]Oborili ste rekord igraca %s (%d ms)! Novi rekord je %d ms.", ServerInfo[ReactName], ServerInfo[ReactTime], reactionTime);
	SendClientMessage(playerid, -1, reactionMessage[1]);
	format(reactionMessage[1], 256, "{F55B65][REAKCIJA] {FFFFFF]Oboren rekord igraca %s (%d ms)! Novi rekord je %d ms.", ServerInfo[ReactName], ServerInfo[ReactTime], reactionTime);
	foreach(new i : Player) {

		if(i != playerid) {

			if(IsPlayerConnected(i)) {

				SendClientMessage(i, -1, reactionMessage[1]);
			}
		}
	}
	ServerInfo[ReactTime] = reactionTime;
	strmid(ServerInfo[ReactName], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 32);
	SaveServerStats();}

reactionWon = true;
strmid(reactionWinner, ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 32);}
//------------------------------------------------------------------------------
forward Black_Fading(playerid);
public Black_Fading(playerid) {

F_Count[playerid]++;

PlayerTextDrawHide(playerid, Fading[playerid]);
PlayerTextDrawShow(playerid, Fading[playerid]);

if(F_Count[playerid] == 1) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000000A);
if(F_Count[playerid] == 2) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000010);
if(F_Count[playerid] == 3) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000001A);
if(F_Count[playerid] == 4) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000020);
if(F_Count[playerid] == 5) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000002A);
if(F_Count[playerid] == 6) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000030);
if(F_Count[playerid] == 7) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000003A);
if(F_Count[playerid] == 8) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000040);
if(F_Count[playerid] == 9) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000004A);
if(F_Count[playerid] == 10) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000050);
if(F_Count[playerid] == 11) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000005A);
if(F_Count[playerid] == 12) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000060);
if(F_Count[playerid] == 13) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000006A);
if(F_Count[playerid] == 14) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000070);
if(F_Count[playerid] == 15) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000007A);
if(F_Count[playerid] == 16) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000080);
if(F_Count[playerid] == 17) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000008A);
if(F_Count[playerid] == 18) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000090);
if(F_Count[playerid] == 19) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000009A);
if(F_Count[playerid] == 20) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000A1);
if(F_Count[playerid] == 21) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000AA);
if(F_Count[playerid] == 22) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000B1);
if(F_Count[playerid] == 23) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000BB);
if(F_Count[playerid] == 24) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000C1);
if(F_Count[playerid] == 25) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000CC);
if(F_Count[playerid] == 26) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000D1);
if(F_Count[playerid] == 27) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000DD);
if(F_Count[playerid] == 28) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000E1);
if(F_Count[playerid] == 29) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000EE);
if(F_Count[playerid] == 30) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000F1);
if(F_Count[playerid] == 31) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000FF);
// Completely Black
if(F_Count[playerid] == 32) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000F1);
if(F_Count[playerid] == 33) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000EE);
if(F_Count[playerid] == 34) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000E1);
if(F_Count[playerid] == 35) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000DD);
if(F_Count[playerid] == 36) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000D1);
if(F_Count[playerid] == 37) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000CC);
if(F_Count[playerid] == 38) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000C1);
if(F_Count[playerid] == 39) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000BB);
if(F_Count[playerid] == 40) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000B1);
if(F_Count[playerid] == 41) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000AA);
if(F_Count[playerid] == 42) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000A1);
if(F_Count[playerid] == 43) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000009A);
if(F_Count[playerid] == 44) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000090);
if(F_Count[playerid] == 45) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000008A);
if(F_Count[playerid] == 46) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000080);
if(F_Count[playerid] == 47) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000007A);
if(F_Count[playerid] == 48) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000070);
if(F_Count[playerid] == 49) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000006A);
if(F_Count[playerid] == 50) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000060);
if(F_Count[playerid] == 51) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000005A);
if(F_Count[playerid] == 52) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000050);
if(F_Count[playerid] == 53) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000004A);
if(F_Count[playerid] == 54) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000040);
if(F_Count[playerid] == 55) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000003A);
if(F_Count[playerid] == 56) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000030);
if(F_Count[playerid] == 57) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000002A);
if(F_Count[playerid] == 58) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000020);
if(F_Count[playerid] == 59) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000001A);
if(F_Count[playerid] == 60) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x00000010);
if(F_Count[playerid] == 61) return PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x0000000A);
if(F_Count[playerid] == 62) return PlayerTextDrawHide(playerid, Fading[playerid]), F_Count[playerid] = 0, KillTimer(Timer_Fading[playerid]);

return true;}

FadeFromBlack(playerid) {

if(F_Count[playerid] >= 32) return false;

Timer_Fading[playerid] = SetTimerEx("Black_Fading", 50, true, "i", playerid);
PlayerTextDrawShow(playerid, Fading[playerid]);
PlayerTextDrawBoxColor(playerid, Fading[playerid], 0x000000FF);
F_Count[playerid] = 32;
return true;}
//

stock CheckDeleteProperty(id) {

if(id != IPI) {

	if(PlayerInfo[id][xProperty][0] != -1 && strcmp(ImeIgraca(id), II[PlayerInfo[id][xProperty][0]][iOwner], true) == 0) {

		II[PlayerInfo[id][xProperty][0]][iOwned] = 0;
		II[PlayerInfo[id][xProperty][0]][iNeaktivnost] = 0;
		strmid(II[PlayerInfo[id][xProperty][0]][iOwner], "Drzava", 0, strlen("Drzava"), 32);
		PropertyRefresh(PlayerInfo[id][xProperty][0]);
		SaveProperty(PlayerInfo[id][xProperty][0]);
	}
	if(PlayerInfo[id][xProperty][1] != -1 && strcmp(ImeIgraca(id), II[PlayerInfo[id][xProperty][1]][iOwner], true) == 0) {

		II[PlayerInfo[id][xProperty][1]][iOwned] = 0;
		II[PlayerInfo[id][xProperty][1]][iNeaktivnost] = 0;
		strmid(II[PlayerInfo[id][xProperty][1]][iOwner], "Drzava", 0, strlen("Drzava"), 32);
		PropertyRefresh(PlayerInfo[id][xProperty][1]);
		SaveProperty(PlayerInfo[id][xProperty][1]);
	}
	if(PlayerInfo[id][xProperty][2] != -1 && strcmp(ImeIgraca(id), II[PlayerInfo[id][xProperty][2]][iOwner], true) == 0) {

		II[PlayerInfo[id][xProperty][2]][iOwned] = 0;
		II[PlayerInfo[id][xProperty][2]][iNeaktivnost] = 0;
		strmid(II[PlayerInfo[id][xProperty][2]][iOwner], "Drzava", 0, strlen("Drzava"), 32);
		PropertyRefresh(PlayerInfo[id][xProperty][2]);
		SaveProperty(PlayerInfo[id][xProperty][2]);
	}
	if(PlayerInfo[id][xFirmaID] != -1 && strcmp(ImeIgraca(id), BusinessInfo[PlayerInfo[id][xFirmaID]][bOwner], true) == 0) {

		BusinessInfo[PlayerInfo[id][xFirmaID]][bOwned] = 0;
		BusinessInfo[PlayerInfo[id][xFirmaID]][bNeaktivnost] = 0;
		BusinessInfo[PlayerInfo[id][xFirmaID]][bFacture] = 100;
		strmid(BusinessInfo[PlayerInfo[id][xFirmaID]][bOwner], "Drzava", 0, strlen("Drzava"), 32);
		Business_Refresh(PlayerInfo[id][xFirmaID]);
		SaveBusiness(PlayerInfo[id][xFirmaID]);
	}
	if(PlayerInfo[id][xHotelID] != -1 && strcmp(ImeIgraca(id), hotelInfo[PlayerInfo[id][xHotelID]][hOwner], true) == 0) {

		hotelInfo[PlayerInfo[id][xHotelID]][hOwned] = 0;
		strmid(hotelInfo[PlayerInfo[id][xHotelID]][hOwner], "Drzava", 0, strlen("Drzava"), 32);
		HotelRefresh(PlayerInfo[id][xHotelID]);
		SaveHotel(PlayerInfo[id][xHotelID]);
	}
	if(PlayerInfo[id][xGarageID] != -1 && strcmp(ImeIgraca(id), garageInfo[PlayerInfo[id][xGarageID]][garageOwner], true) == 0) {

		garageInfo[PlayerInfo[id][xGarageID]][garageOwned] = false;
		strmid(garageInfo[PlayerInfo[id][xGarageID]][garageOwner], "Drzava", 0, strlen("Drzava"), 32);
		Garage_Refresh(PlayerInfo[id][xGarageID]);
		Garage_Save(PlayerInfo[id][xGarageID]);
	}
	if(PlayerInfo[id][xVoziloID][0] != -1 && strcmp(ImeIgraca(id), VehicleInfo[PlayerInfo[id][xVoziloID][0]][vOwner], true) == 0) {

		new c = PlayerInfo[id][xVoziloID][0];

		Fusion_DestroyVehicle(VehicleInfo[c][vID]);

		VehicleInfo[c][vVirtualWorld] = 0;
		VehicleInfo[c][vInterior] = 0;

		VehicleInfo[c][vOwned] = 0;
		VehicleInfo[c][vNeaktivnost] = 0;
		VehicleInfo[c][vPrice] = -1;

		VehicleInfo[c][vLokacijaX] = -2112.0281;
		VehicleInfo[c][vLokacijaY] = 2729.6250;
		VehicleInfo[c][vLokacijaZ] = 166.0840;
		VehicleInfo[c][vLokacijaA] = 202.9713;

		VehicleInfo[c][vID] = Fusion_CreateVehicle(c, PRIVATNO_VOZILO, -1, -1, -1, VehicleInfo[c][vModel], VehicleInfo[c][vLokacijaX], VehicleInfo[c][vLokacijaY], VehicleInfo[c][vLokacijaZ]+1.0, VehicleInfo[c][vLokacijaA], VehicleInfo[c][vColor1], VehicleInfo[c][vColor2], 300000);
		ac_LinkVehicleToInterior(VehicleInfo[c][vID], VehicleInfo[c][vInterior]);
		SetVehicleVirtualWorld(VehicleInfo[c][vID], VehicleInfo[c][vVirtualWorld]);

		strmid(VehicleInfo[c][vOwner], "Drzava", 0, strlen("Drzava"), 32);

		TuneVehicle(c);

		ac_SetVehicleParamsEx(VehicleInfo[c][vID], 0, 0, 0, VehicleInfo[c][vLocked], 0, 0, 0);
		if(IsVehicleBajs(VehicleInfo[c][vID])) {
			ac_SetVehicleParamsEx(VehicleInfo[c][vID], 1, 0, 0, VehicleInfo[c][vLocked], 0, 0, 0);
		}
	}
	if(PlayerInfo[id][xVoziloID][1] != -1 && strcmp(ImeIgraca(id), VehicleInfo[PlayerInfo[id][xVoziloID][1]][vOwner], true) == 0) {

		new c = PlayerInfo[id][xVoziloID][1];

		Fusion_DestroyVehicle(VehicleInfo[c][vID]);

		VehicleInfo[c][vVirtualWorld] = 0;
		VehicleInfo[c][vInterior] = 0;

		VehicleInfo[c][vOwned] = 0;
		VehicleInfo[c][vNeaktivnost] = 0;
		VehicleInfo[c][vPrice] = -1;

		VehicleInfo[c][vLokacijaX] = -2112.0281;
		VehicleInfo[c][vLokacijaY] = 2729.6250;
		VehicleInfo[c][vLokacijaZ] = 166.0840;
		VehicleInfo[c][vLokacijaA] = 202.9713;

		VehicleInfo[c][vID] = Fusion_CreateVehicle(c, PRIVATNO_VOZILO, -1, -1, -1, VehicleInfo[c][vModel], VehicleInfo[c][vLokacijaX], VehicleInfo[c][vLokacijaY], VehicleInfo[c][vLokacijaZ]+1.0, VehicleInfo[c][vLokacijaA], VehicleInfo[c][vColor1], VehicleInfo[c][vColor2], 300000);
		ac_LinkVehicleToInterior(VehicleInfo[c][vID], VehicleInfo[c][vInterior]);
		SetVehicleVirtualWorld(VehicleInfo[c][vID], VehicleInfo[c][vVirtualWorld]);

		strmid(VehicleInfo[c][vOwner], "Drzava", 0, strlen("Drzava"), 32);

		TuneVehicle(c);

		ac_SetVehicleParamsEx(VehicleInfo[c][vID], 0, 0, 0, VehicleInfo[c][vLocked], 0, 0, 0);
		if(IsVehicleBajs(VehicleInfo[c][vID])) {
			ac_SetVehicleParamsEx(VehicleInfo[c][vID], 1, 0, 0, VehicleInfo[c][vLocked], 0, 0, 0);
		}
	}
	if(PlayerInfo[id][xVoziloID][2] != -1 && strcmp(ImeIgraca(id), VehicleInfo[PlayerInfo[id][xVoziloID][2]][vOwner], true) == 0) {

		new c = PlayerInfo[id][xVoziloID][2];

		Fusion_DestroyVehicle(VehicleInfo[c][vID]);

		VehicleInfo[c][vVirtualWorld] = 0;
		VehicleInfo[c][vInterior] = 0;

		VehicleInfo[c][vOwned] = 0;
		VehicleInfo[c][vNeaktivnost] = 0;
		VehicleInfo[c][vPrice] = -1;

		VehicleInfo[c][vLokacijaX] = -2112.0281;
		VehicleInfo[c][vLokacijaY] = 2729.6250;
		VehicleInfo[c][vLokacijaZ] = 166.0840;
		VehicleInfo[c][vLokacijaA] = 202.9713;

		VehicleInfo[c][vID] = Fusion_CreateVehicle(c, PRIVATNO_VOZILO, -1, -1, -1, VehicleInfo[c][vModel], VehicleInfo[c][vLokacijaX], VehicleInfo[c][vLokacijaY], VehicleInfo[c][vLokacijaZ]+1.0, VehicleInfo[c][vLokacijaA], VehicleInfo[c][vColor1], VehicleInfo[c][vColor2], 300000);
		ac_LinkVehicleToInterior(VehicleInfo[c][vID], VehicleInfo[c][vInterior]);
		SetVehicleVirtualWorld(VehicleInfo[c][vID], VehicleInfo[c][vVirtualWorld]);

		strmid(VehicleInfo[c][vOwner], "Drzava", 0, strlen("Drzava"), 32);

		TuneVehicle(c);

		ac_SetVehicleParamsEx(VehicleInfo[c][vID], 0, 0, 0, VehicleInfo[c][vLocked], 0, 0, 0);
		if(IsVehicleBajs(VehicleInfo[c][vID])) {
			ac_SetVehicleParamsEx(VehicleInfo[c][vID], 1, 0, 0, VehicleInfo[c][vLocked], 0, 0, 0);
		}
	}
	if(PlayerInfo[id][xVoziloID][3] != -1 && strcmp(ImeIgraca(id), VehicleInfo[PlayerInfo[id][xVoziloID][3]][vOwner], true) == 0) {

		new c = PlayerInfo[id][xVoziloID][3];

		Fusion_DestroyVehicle(VehicleInfo[c][vID]);

		VehicleInfo[c][vVirtualWorld] = 0;
		VehicleInfo[c][vInterior] = 0;

		VehicleInfo[c][vOwned] = 0;
		VehicleInfo[c][vNeaktivnost] = 0;
		VehicleInfo[c][vPrice] = -1;

		VehicleInfo[c][vLokacijaX] = -2112.0281;
		VehicleInfo[c][vLokacijaY] = 2729.6250;
		VehicleInfo[c][vLokacijaZ] = 166.0840;
		VehicleInfo[c][vLokacijaA] = 202.9713;

		VehicleInfo[c][vID] = Fusion_CreateVehicle(c, PRIVATNO_VOZILO, -1, -1, -1, VehicleInfo[c][vModel], VehicleInfo[c][vLokacijaX], VehicleInfo[c][vLokacijaY], VehicleInfo[c][vLokacijaZ]+1.0, VehicleInfo[c][vLokacijaA], VehicleInfo[c][vColor1], VehicleInfo[c][vColor2], 300000);
		ac_LinkVehicleToInterior(VehicleInfo[c][vID], VehicleInfo[c][vInterior]);
		SetVehicleVirtualWorld(VehicleInfo[c][vID], VehicleInfo[c][vVirtualWorld]);

		strmid(VehicleInfo[c][vOwner], "Drzava", 0, strlen("Drzava"), 32);

		TuneVehicle(c);

		ac_SetVehicleParamsEx(VehicleInfo[c][vID], 0, 0, 0, VehicleInfo[c][vLocked], 0, 0, 0);
		if(IsVehicleBajs(VehicleInfo[c][vID])) {
			ac_SetVehicleParamsEx(VehicleInfo[c][vID], 1, 0, 0, VehicleInfo[c][vLocked], 0, 0, 0);
		}
	}
}
return true;}


//------------------------------------------------------------------------------

forward RemoveRadarPictured(playerid);
public RemoveRadarPictured(playerid) {

alreadyPictured[playerid] = false;
return 1;}

stock RadarColor(playerid) {

if(Radar_Count[playerid] >= 32) return false;

Timer_Radar[playerid] = SetTimerEx("Radar_Color", 10, true, "i", playerid);
PlayerTextDrawShow(playerid, RadarCol[playerid]);
PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000FF);
Radar_Count[playerid] = 32;
return true;}

forward Radar_Color(playerid);
public Radar_Color(playerid) {

Radar_Count[playerid]++;

PlayerTextDrawHide(playerid, RadarCol[playerid]);
PlayerTextDrawShow(playerid, RadarCol[playerid]);

if(Radar_Count[playerid] == 1) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00000A);
if(Radar_Count[playerid] == 2) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000010);
if(Radar_Count[playerid] == 3) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00001A);
if(Radar_Count[playerid] == 4) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000020);
if(Radar_Count[playerid] == 5) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00002A);
if(Radar_Count[playerid] == 6) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000030);
if(Radar_Count[playerid] == 7) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00003A);
if(Radar_Count[playerid] == 8) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000040);
if(Radar_Count[playerid] == 9) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00004A);
if(Radar_Count[playerid] == 10) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000050);
if(Radar_Count[playerid] == 11) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00005A);
if(Radar_Count[playerid] == 12) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000060);
if(Radar_Count[playerid] == 13) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00006A);
if(Radar_Count[playerid] == 14) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000070);
if(Radar_Count[playerid] == 15) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00007A);
if(Radar_Count[playerid] == 16) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000080);
if(Radar_Count[playerid] == 17) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00008A);
if(Radar_Count[playerid] == 18) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000090);
if(Radar_Count[playerid] == 19) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00009A);
if(Radar_Count[playerid] == 20) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000A1);
if(Radar_Count[playerid] == 21) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000AA);
if(Radar_Count[playerid] == 22) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000B1);
if(Radar_Count[playerid] == 23) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000BB);
if(Radar_Count[playerid] == 24) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000C1);
if(Radar_Count[playerid] == 25) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000CC);
if(Radar_Count[playerid] == 26) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000D1);
if(Radar_Count[playerid] == 27) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000DD);
if(Radar_Count[playerid] == 28) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000E1);
if(Radar_Count[playerid] == 29) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000EE);
if(Radar_Count[playerid] == 30) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000F1);
if(Radar_Count[playerid] == 31) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000FF);

if(Radar_Count[playerid] == 32) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000F1);
if(Radar_Count[playerid] == 33) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000EE);
if(Radar_Count[playerid] == 34) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000E1);
if(Radar_Count[playerid] == 35) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000DD);
if(Radar_Count[playerid] == 36) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000D1);
if(Radar_Count[playerid] == 37) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000CC);
if(Radar_Count[playerid] == 38) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000C1);
if(Radar_Count[playerid] == 39) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000BB);
if(Radar_Count[playerid] == 40) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000B1);
if(Radar_Count[playerid] == 41) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000AA);
if(Radar_Count[playerid] == 42) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000A1);
if(Radar_Count[playerid] == 43) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00009A);
if(Radar_Count[playerid] == 44) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000090);
if(Radar_Count[playerid] == 45) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00008A);
if(Radar_Count[playerid] == 46) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000080);
if(Radar_Count[playerid] == 47) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00007A);
if(Radar_Count[playerid] == 48) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000070);
if(Radar_Count[playerid] == 49) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00006A);
if(Radar_Count[playerid] == 50) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000060);
if(Radar_Count[playerid] == 51) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00005A);
if(Radar_Count[playerid] == 52) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000050);
if(Radar_Count[playerid] == 53) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00004A);
if(Radar_Count[playerid] == 54) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000040);
if(Radar_Count[playerid] == 55) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00003A);
if(Radar_Count[playerid] == 56) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000030);
if(Radar_Count[playerid] == 57) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00002A);
if(Radar_Count[playerid] == 58) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000020);
if(Radar_Count[playerid] == 59) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00001A);
if(Radar_Count[playerid] == 60) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF000010);
if(Radar_Count[playerid] == 61) return PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF00000A);
if(Radar_Count[playerid] == 62) return PlayerTextDrawHide(playerid, RadarCol[playerid]), Radar_Count[playerid] = 0, Fusion_KillTimer(Timer_Radar[playerid]);

return true;}
//------------------------------------------------------------------------------
stock JailPlayer(id, time) {

ResetAllWeapons(id);
PlayerInfo[id][xZatvor] = OBICAN_ZATVOR;
PlayerInfo[id][xZatvorVreme] = time;
ClearAnimations(id);
PlayerCP[id] = 0;
if(IsPlayerAttachedObjectSlotUsed(id, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(id, OBJECT_SLOT_RHAND);
SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
PlayerCuffed[id] = 0;

new rand = random(sizeof(RandomZatvor));
ac_SetPlayerPos(id, RandomZatvor[rand][0], RandomZatvor[rand][1],RandomZatvor[rand][2]);
PlayerInfo[id][xWanted] = 0;
Fusion_SetPlayerWantedLevel(id, PlayerInfo[id][xWanted]);
strmid(ZlocinInfo[id][zPrijavio], "Nema", 0, strlen("Nema"), 255);
strmid(ZlocinInfo[id][zPocinio], "Nema", 0, strlen("Nema"), 255);
strmid(ZlocinInfo[id][zZlocin], "Nema", 0, strlen("Nema"), 255);
	GameTextForPlayer(id, "Ucitavanje ...", 1000, 4);
SetTimerEx("SlobodnoSada", 2000, false, "i", id);
SetCameraBehindPlayer(id); ac_SetPlayerInterior(id, 0);
SetPlayerVirtualWorld(id, 0);
TogglePlayerControllable(id, 0);
SavePlayer(id);}
//------------------------------------------------------------------------------
stock randomString(strDest[], strLen = 10)
{
while(strLen--)
	strDest[strLen] = random(2) ? (random(26) + (random(2) ? 'a' : 'A')) : (random(10) + '0');}
//------------------------------------------------------------------------------
stock CreateDroppedGun(GunID, GunAmmo, Float:gPosX, Float:gPosY, Float:gPosZ) {
for(new a = 0; a < MAX_GOBJ; a++) {
	if(dGunData[a][ObjPos][0] == 0.0) {
		dGunData[a][ObjData][0] = GunID;
		dGunData[a][ObjData][1] = GunAmmo;
		dGunData[a][ObjPos][0] = gPosX;
		dGunData[a][ObjPos][1] = gPosY;
		dGunData[a][ObjPos][2] = gPosZ;
		dGunData[a][gObjID] = CreateDynamicObject(WeaponInfos[GunID][wModel], dGunData[a][ObjPos][0], dGunData[a][ObjPos][1], dGunData[a][ObjPos][2]-1, 93.7, 120.0, random(360));
		return 1;
	}
}
return 1;}
//

//------------------------------------------------------------------------------
stock Fusion_KillTimer(timerid) {
if(timerid == -1) return 1;
return KillTimer(timerid);}
//------------------------------------------------------------------------------
stock IsPlayerInArea(playerid, Float:minx, Float:miny, Float:maxx, Float:maxy) {
new Float:Poz[3];
GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
if(Poz[0] > minx && Poz[0] < maxx && Poz[1] > miny && Poz[1] < maxy) return true;
return false;}
//------------------------------------------------------------------------------
new OneSeatVehicles[38] = {

425, 430, 432, 441, 446, 448, 452, 453,
454, 464, 465, 472, 473, 476, 481, 484,
485, 486, 493, 501, 509, 510, 519, 520,
530, 531, 532, 539, 553, 564, 568, 571,
572, 574, 583, 592, 594, 595
};
stock IsSeatAvailable(vehicleid, seat)
{
new carmodel = GetVehicleModel(vehicleid);
for (new i = 0; i < sizeof(OneSeatVehicles); i++)
{
	if(carmodel == OneSeatVehicles[i]) return 0;}
foreach(new i : Player)
{
	if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seat) return 0;}
return 1;}
//
stock Javno3(playerid) {

if(IsPlayerConnected(playerid))
{
	if(IsPlayerInRangeOfPoint(playerid, 10,1505.9548,-1741.5792,13.5469) || IsPlayerInRangeOfPoint(playerid, 10,1504.6154,-1741.4963,13.5469) || IsPlayerInRangeOfPoint(playerid, 10,1497.7278,-1733.2307,13.3828) || IsPlayerInRangeOfPoint(playerid, 10,1491.7355,-1738.8771,14.1983) || IsPlayerInRangeOfPoint(playerid, 10,1480.0619,-1741.7356,13.6287) || IsPlayerInRangeOfPoint(playerid, 10,1471.7213,-1740.6451,14.3646))
	{
			return 1;
	}
}
return 0;}

stock Javno4(playerid)
{
if(IsPlayerConnected(playerid))
{
	if(IsPlayerInRangeOfPoint(playerid, 10,1458.7819,-1739.5323,13.9193) || IsPlayerInRangeOfPoint(playerid, 10,1451.9343,-1732.9948,14.2465) || IsPlayerInRangeOfPoint(playerid, 10,1455.6887,-1728.3517,14.0456) || IsPlayerInRangeOfPoint(playerid, 10,1470.7139,-1752.2955,15.4453) || IsPlayerInRangeOfPoint(playerid, 10,1478.5802,-1754.8750,17.4498) || IsPlayerInRangeOfPoint(playerid, 10,1490.0334,-1755.7047,17.4401))
	{
			return 1;
	}
}
return 0;}

stock Javno5(playerid)
{
if(IsPlayerConnected(playerid))
{
	if(IsPlayerInRangeOfPoint(playerid, 10,1483.5298,-1762.2010,18.7289) || IsPlayerInRangeOfPoint(playerid, 10,1475.8184,-1767.5063,18.7958) || IsPlayerInRangeOfPoint(playerid, 10,1224.2733,-930.6243,42.5903) || IsPlayerInRangeOfPoint(playerid, 10,1232.1556,-929.4727,42.5212) || IsPlayerInRangeOfPoint(playerid, 10,1218.4210,-931.0319,42.9727) || IsPlayerInRangeOfPoint(playerid, 10,1209.4436,-926.8596,42.9230))
	{
			return 1;
	}
}
return 0;}

stock Javno6(playerid)
{
if(IsPlayerConnected(playerid))
{
	if(IsPlayerInRangeOfPoint(playerid, 10,1205.9155,-920.4095,43.0673) || IsPlayerInRangeOfPoint(playerid, 10,1195.8317,-921.3834,43.8945) || IsPlayerInRangeOfPoint(playerid, 10,1181.4392,-915.1285,43.2192) || IsPlayerInRangeOfPoint(playerid, 10,1177.5984,-899.8451,44.1480) || IsPlayerInRangeOfPoint(playerid, 10,1180.8157,-887.0159,43.4167) || IsPlayerInRangeOfPoint(playerid, 10,1190.9819,-883.4169,43.2069))
	{
			return 1;
	}
}
return 0;}

stock Javno7(playerid)
{
if(IsPlayerConnected(playerid))
{
	if(IsPlayerInRangeOfPoint(playerid, 10,1205.1240,-881.5010,42.9346) || IsPlayerInRangeOfPoint(playerid, 10,1217.4341,-882.3506,42.9045) || IsPlayerInRangeOfPoint(playerid, 10,1223.5906,-892.5105,43.4221) || IsPlayerInRangeOfPoint(playerid, 10,1226.6726,-911.0240,42.9017))
	{
			return 1;
	}
}
return 0;}

stock Javno8(playerid)
{
if(IsPlayerConnected(playerid))
{
	if(IsPlayerInRangeOfPoint(playerid, 40,1218.4386,-1334.5829,13.4835) || IsPlayerInRangeOfPoint(playerid, 10,1219.6810,-932.0195,42.6316) || IsPlayerInRangeOfPoint(playerid, 10,1481.5367,-1732.5997,13.3828) || IsPlayerInRangeOfPoint(playerid, 10,1544.8290,-2324.2332,13.5547) || IsPlayerInRangeOfPoint(playerid, 10,1198.5538,-1325.6200,13.3984))
	{
			return 1;
	}
}
return 0;}

stock PranjeProzora(playerid) {

if(IsPlayerConnected(playerid))
{
	if(IsPlayerInRangeOfPoint(playerid, 5, 1836.7418,-1306.8981,85.1337) || IsPlayerInRangeOfPoint(playerid, 5, 1836.5990,-1285.3838,85.1337) || IsPlayerInRangeOfPoint(playerid, 5, 1836.3344,-1285.2307,92.6290) || IsPlayerInRangeOfPoint(playerid, 5, 1836.4379, -1301.4036, 92.6290))
	{
			return 1;
	}
}
return 0;}

stock PLift1(playerid) {

if(IsPlayerConnected(playerid))
{
	if(IsPlayerInRangeOfPoint(playerid, 10, 1836.9900, -1315.5682, 17.0270) || IsPlayerInRangeOfPoint(playerid, 10, 1836.9900, -1315.5682, 85.5408) || IsPlayerInRangeOfPoint(playerid, 10, 1836.9900, -1315.5682, 93.0391) || IsPlayerInRangeOfPoint(playerid, 10, 1836.9900, -1315.5682, 100.5438) || IsPlayerInRangeOfPoint(playerid, 10, 1836.9900, -1315.5682, 108.0502))
	{
			return 1;
	}
}
return 0;}
stock PLift2(playerid) {

if(IsPlayerConnected(playerid))
{
	if(IsPlayerInRangeOfPoint(playerid, 10, 1837.1008, -1293.7450, 17.0270) || IsPlayerInRangeOfPoint(playerid, 10, 1837.1008, -1293.7450, 85.5406) || IsPlayerInRangeOfPoint(playerid, 10, 1837.1008, -1293.7450, 93.0565) || IsPlayerInRangeOfPoint(playerid, 10, 1837.1008, -1293.7450, 100.5438) || IsPlayerInRangeOfPoint(playerid, 10, 1837.1008, -1293.7450, 108.0203))
	{
			return 1;
	}
}
return 0;}
stock PLift3(playerid) {

if(IsPlayerConnected(playerid))
{
	if(IsPlayerInRangeOfPoint(playerid, 10, 1837.0273, -1272.7747, 17.0270) || IsPlayerInRangeOfPoint(playerid, 10, 1837.0273, -1272.7747, 85.5310) || IsPlayerInRangeOfPoint(playerid, 10, 1837.0273, -1272.7747, 93.0502) || IsPlayerInRangeOfPoint(playerid, 10, 1837.0273, -1272.7747, 100.5272) || IsPlayerInRangeOfPoint(playerid, 10, 1837.0273, -1272.7747, 108.0149))
	{
			return 1;
	}
}
return 0;}
//------------------------------------------------------------------------------
stock randomEx(min,max) {
return (min+random(max));}

stock randomExx(const iMin, const iMax) {
return random(iMax - iMin) + iMin;}

stock IzvuciRezultateKladionica() {

new par1[10], par2[10];

for(new i = 0; i < 10; i++) {

	par1[i] = Parovi[i][parID][0];
	par2[i] = Parovi[i][parID][1];

	if(bettingInfo[par1[i]][teamStrength] >  bettingInfo[par2[i]][teamStrength]) {

		new rand = random(10);
		switch(rand) {

			case 0..5: {

				new rez = random(4);
				Parovi[i][Rezultat][0] = rez+(1+random(2));
				Parovi[i][Rezultat][1] = rez;
				Parovi[i][Rezultat][2] = 1;
				StariParovi[i][Kvota] = Parovi[i][Kvota][0];
			}
			case 6: {

				new rez = random(4);
				Parovi[i][Rezultat][0] = rez;
				Parovi[i][Rezultat][1] = rez;
				Parovi[i][Rezultat][2] = 2;
				StariParovi[i][Kvota] = Parovi[i][Kvota][2];
			}
			case 7..9: {

				new rez = random(4);
				Parovi[i][Rezultat][0] = rez;
				Parovi[i][Rezultat][1] = rez+(1+random(2));
				Parovi[i][Rezultat][2] = 3;
				StariParovi[i][Kvota] = Parovi[i][Kvota][1];
			}

		}
	}
	else if(bettingInfo[par1[i]][teamStrength] ==  bettingInfo[par2[i]][teamStrength]) {

		new rand = random(10);
		switch(rand) {

			case 0..5: {

				new rez = random(4);
				Parovi[i][Rezultat][0] = rez;
				Parovi[i][Rezultat][1] = rez;
				Parovi[i][Rezultat][2] = 2;
				StariParovi[i][Kvota] = Parovi[i][Kvota][2];
			}
			case 6..7: {

				new rez = random(4);
				Parovi[i][Rezultat][0] = rez;
				Parovi[i][Rezultat][1] = rez+(1+random(2));
				Parovi[i][Rezultat][2] = 3;
				StariParovi[i][Kvota] = Parovi[i][Kvota][1];
			}
			case 8..9: {

				new rez = random(4);
				Parovi[i][Rezultat][0] = rez+(1+random(2));
				Parovi[i][Rezultat][1] = rez;
				Parovi[i][Rezultat][2] = 1;
				StariParovi[i][Kvota] = Parovi[i][Kvota][0];
			}

		}
	}
	else if(bettingInfo[par2[i]][teamStrength] >  bettingInfo[par1[i]][teamStrength]) {

		new rand = random(10);
		switch(rand) {

			case 0..5: {

				new rez = random(4);
				Parovi[i][Rezultat][0] = rez;
				Parovi[i][Rezultat][1] = rez+(1+random(2));
				Parovi[i][Rezultat][2] = 3;
				StariParovi[i][Kvota] = Parovi[i][Kvota][1];
			}
			case 6: {

				new rez = random(4);
				Parovi[i][Rezultat][0] = rez;
				Parovi[i][Rezultat][1] = rez;
				Parovi[i][Rezultat][2] = 2;
				StariParovi[i][Kvota] = Parovi[i][Kvota][2];
			}
			case 7..9: {

				new rez = random(4);
				Parovi[i][Rezultat][0] = rez+(1+random(2));
				Parovi[i][Rezultat][1] = rez;
				Parovi[i][Rezultat][2] = 1;
				StariParovi[i][Kvota] = Parovi[i][Kvota][0];
			}
		}
	}


	new hour, minute, second, day, year, month;
	getdate(year, month, day);
	gettimeEx(hour, minute, second);
	FixHour(hour);
	hour = shifthour;

	StariParovi[i][Rezultat][0] = Parovi[i][Rezultat][0];
	StariParovi[i][Rezultat][1] = Parovi[i][Rezultat][1];
	StariParovi[i][parID][0] = par1[i];
	StariParovi[i][parID][1] = par2[i];

	new staar[32];
	format(staar, sizeof(staar), "%d.%d.%d %02d:30", day, month, year, hour-1);
	strmid(StariParovi[i][HourPobeda], staar, 0, strlen(staar), 32);

	SaveStareParove();

	//SendClientMessageEx(playerid, -1, "%s %d : %d %s ", bettingInfo[par1[i]][teamName], Parovi[i][Rezultat][0], Parovi[i][Rezultat][1], bettingInfo[par2[i]][teamName]);}
return (true);}

stock c_SetPlayerSkin(playerid, skinid)
{
PlayerInfo[playerid][xSkin] = (skinid);
SetPlayerSkin(playerid,skinid);
return (true);}

stock PostaviParoveKladionica() {

	new par1[10], par2[10], razlika[10], Float:ki1[10], Float:ki2[10], Float:iks[10];

	NapraviParove(); NapraviParove2();

	for(new i = 0; i < 10; i++) {

		par1[i] = IzabraniParovi1[i];
		par2[i] = IzabraniParovi2[i];

		razlika[i] = bettingInfo[par1[i]][teamStrength] - bettingInfo[par2[i]][teamStrength];

		if(razlika[i] == -9) ki1[i] = 4.8, ki2[i] = 1.2, iks[i] = 4.0;
		else if(razlika[i] == -8) ki1[i] = 4.6, ki2[i] = 1.4, iks[i] = 3.8;
		else if(razlika[i] == -7) ki1[i] = 4.4, ki2[i] = 1.6, iks[i] = 3.6;
		else if(razlika[i] == -6) ki1[i] = 4.2, ki2[i] = 1.8, iks[i] = 3.4;
		else if(razlika[i] == -5) ki1[i] = 4.0, ki2[i] = 2.0, iks[i] = 3.2;
		else if(razlika[i] == -4) ki1[i] = 3.8, ki2[i] = 2.2, iks[i] = 3.0;
		else if(razlika[i] == -3) ki1[i] = 3.6, ki2[i] = 2.4, iks[i] = 2.8;
		else if(razlika[i] == -2) ki1[i] = 3.4, ki2[i] = 2.6, iks[i] = 2.6;
		else if(razlika[i] == -1) ki1[i] = 3.2, ki2[i] = 2.8, iks[i] = 2.4;
		else if(razlika[i] == 0) ki1[i] = 3.0, ki2[i] = 3.0, iks[i] = 3.0;
		else if(razlika[i] == 1) ki1[i] = 2.8, ki2[i] = 3.2, iks[i] = 2.4;
		else if(razlika[i] == 2) ki1[i] = 2.6, ki2[i] = 3.4, iks[i] = 2.6;
		else if(razlika[i] == 3) ki1[i] = 2.4, ki2[i] = 3.6, iks[i] = 2.8;
		else if(razlika[i] == 4) ki1[i] = 2.2, ki2[i] = 3.8, iks[i] = 3.0;
		else if(razlika[i] == 5) ki1[i] = 2.0, ki2[i] = 4.0, iks[i] = 3.2;
		else if(razlika[i] == 6) ki1[i] = 1.8, ki2[i] = 4.2, iks[i] = 3.4;
		else if(razlika[i] == 7) ki1[i] = 1.6, ki2[i] = 4.4, iks[i] = 3.6;
		else if(razlika[i] == 8) ki1[i] = 1.4, ki2[i] = 4.6, iks[i] = 3.8;
		else if(razlika[i] == 9) ki1[i] = 1.2, ki2[i] = 4.8, iks[i] = 4.0;

		Parovi[i][parID][0] = par1[i];
		Parovi[i][parID][1] = par2[i];
		Parovi[i][Kvota][0] = ki1[i];
		Parovi[i][Kvota][1] = ki2[i];
		Parovi[i][Kvota][2] = iks[i];
		Parovi[i][Rezultat][0] = 0;
		Parovi[i][Rezultat][1] = 0;
		Parovi[i][Rezultat][2] = 0;

	}
	return (true);}

stock NapraviParove() {

for(new i = 0; i < 10; i++) {

	IzabraniParovi1[i] = Random_Number_Generator(i, 46);}
return (true);}

stock NapraviParove2() {

for(new i = 0; i < 10; i++) {

	IzabraniParovi2[i] = Random_Number_Generator_2(i, 46);}
return (true);}

stock Random_Number_Generator_2(curid,max)
{
	new Num_Var_Index;

Num_Var_Index = random(max);

for(new i = 0; i < curid; i++) {

	if(IzabraniParovi2[i] == Num_Var_Index || IzabraniParovi1[i] == Num_Var_Index) return Random_Number_Generator_2(curid,max);}

return Num_Var_Index;}

stock Random_Number_Generator(curid,max)
{
	new Num_Var_Index;

Num_Var_Index = random(max);

for(new i = 0; i < curid; i++) {

	if(IzabraniParovi1[i] == Num_Var_Index || IzabraniParovi2[i] == Num_Var_Index) return Random_Number_Generator(curid,max);}

return Num_Var_Index;}

public OnRconLoginAttempt(ip[], password[], success) {

if(success) {
		foreach(new i : Player) {
			new ip2[32];
			GetPlayerIp(i, ip2, sizeof(ip2));
		if(!strcmp(ip, ip2, true)) {
			rconCheck[i] = true;
			rconCheckTimer[i] = SetTimerEx("KickIgraca", 7000, 0, "i", i);
			SPD(i, dialog_RCONPROVERA, DSP, D_NASLOV, ""col_crvena"Pristupili ste RCON adminu!\n\n"col_white"Morate uneti sigurnosni kod kako bi verifikovali pristup.\nImate 7 sekundi. Ne pokusavajte da zloupotrebljavate dijalog.", D_ODABERI, D_ODUSTANI);
			new varstring[128];
			format(varstring, sizeof(varstring), "~r~(AC) - %s(%d) je pristupio RCON adminu!!!", ImeIgraca(i), i);
			SendAltChatMessage(varstring);					
		}
	}
}
if(!success)
{   
	new pip[16];
	foreach(new i : Player)
	{
		GetPlayerIp(i, pip, sizeof(pip));
		if(!strcmp(ip, pip, true))
		{
			Kickovanje(i, " {af001d][ FG:RPG ] : {FFFFFF]Kikovani ste sa servera zbog neovlascenog pokusaja pristupa RCON adminu.");
			new varstring[128];
			format(varstring, sizeof(varstring), "~r~(AC) - ~w~%s je kikovan zbog pokusaja pristupa RCON adminu.", ImeIgraca(i));
			SendAltChatMessage(varstring);
		}
	}
}
return true;}
forward UtovarBus(playerid);
public UtovarBus(playerid) {

Fusion_KillTimer(BusVozac[playerid]);
TogglePlayerControllable(playerid, true);
GameTextForPlayer(playerid, "~y~Nova lokacija stanice", 3000, 3);
return 1;}
forward UtovarVoz(playerid);
public UtovarVoz(playerid) {

Fusion_KillTimer(PosaoMasinovodja[playerid]);
TogglePlayerControllable(playerid, true);
GameTextForPlayer(playerid, "~y~Nova lokacija stanice", 3000, 3);
return 1;}

forward IzvlacenjeKuglica(broj);
public IzvlacenjeKuglica(broj) {

if(broj == 1) {
	SetTimerEx("IzvlacenjeKuglica", 3000, false, "d", 2);}
else if(broj == 2) {
	new LottoBroj = randomExx(1, 25);
	new LottoNagrada = (70000+random(20000));
	new ImaNagrade = 0, Dobitnik;

	SCMA(-1, ""col_server"NOVO IZVLACENJE LOTTO KOMBINACIJA JE UPRAVO ZAVRSENO.");
	new varstring[56];
	format(varstring, sizeof(varstring), ""col_server"Izvuceni broj je "col_white"%d.", LottoBroj);
	SCMA(-1, varstring);

	foreach(new i : Player) {
		if(PlayerInfo[i][xLottoNumber] == LottoBroj) {
			PlayerInfo[i][xLottoMoney] += LottoNagrada;
			ImaNagrade = 1;
			Dobitnik = i;
		}
		if(ImaNagrade == 1) {
			SendClientMessageEx(i, -1, ""col_server"CESTITKE, imamo dobitnika "col_white"%s.", ImeIgraca(Dobitnik));
			SendClientMessageEx(i, -1, ""col_server"Osvojena nagrada iznosi "col_white"%d$.", LottoNagrada);
		}
		PlayerInfo[i][xLottoNumber] = 0;
	}

	if(ImaNagrade == 0) {
		SCMA(-1, ""col_server"NAZALOST NEMA DOBIJENIH NAGRADA.");
	}
}
return 1;}
//------------------------------------------------------------------------------
stock GetFactionType(playerid) {
if(PlayerInfo[playerid][xClan] == 0)
	return 0;

return (OI[PlayerInfo[playerid][xClan]][oTip]);}
//------------------------------------------------------------------------------
stock SendClientMessageEx(playerid, color, const str[}, {Float,_]:...) {
static
	args,
	start,
	end,
	string[144]
;
#emit LOAD.S.pri 8
#emit STOR.pri args

if(args > 12)
{
	#emit ADDR.pri str
	#emit STOR.pri start

	for (end = start + (args - 12); end > start; end -= 4)
	{
		#emit LREF.pri end
		#emit PUSH.pri
	}
	#emit PUSH.S str
	#emit PUSH.C 144
	#emit PUSH.C string
	#emit PUSH.C args
	#emit SYSREQ.C format

	SendClientMessage(playerid, color, string);

	#emit LCTRL 5
	#emit SCTRL 4
	#emit RETN
}
return SendClientMessage(playerid, color, str);}
//------------------------------------------------------------------------------
GetFreeFarmID() {
for(new i = 0; i < MAX_FARMS; i++) {

	if(!plantInfo[i][farmPlantCreated] && !plantInfo[i][farmWheatCreated] && plantInfo[i][farmObject] == INVALID_OBJECT_ID) {
		return i;
	}
}
return -1;}
//------------------------------------------------------------------------------
ResetAllFarmPlants() {
for(new i = 0; i < MAX_FARMS; i++) {
	ResetFarmPlant(i);}
}
//------------------------------------------------------------------------------
ResetFarmPlant(plantid) {
if(plantid != -1) {
	plantInfo[plantid][farmPlayerID] = IPI;
	plantInfo[plantid][farmPlantCreated] = false;
	plantInfo[plantid][farmWheatCreated] = false;
	plantInfo[plantid][farmObject] = INVALID_OBJECT_ID;
	plantInfo[plantid][farm3D] = Text3D:INVALID_3DTEXT_ID;}
return -1;}
//------------------------------------------------------------------------------
bool:isPlayerNearFarmerPlant(playerID)
{
new Float:objectPos[3];

for(new i = 0; i < MAX_FARMS; i++) {

	if(plantInfo[i][farmPlantCreated] && plantInfo[i][farmObject] != INVALID_OBJECT_ID && IsValidDynamicObject(plantInfo[i][farmObject])) {

		GetDynamicObjectPos(plantInfo[i][farmObject], objectPos[0], objectPos[1], objectPos[2]);
		if(IsPlayerInRangeOfPoint(playerID, 5.0, objectPos[0], objectPos[1], objectPos[2])) return true;

	}
}
return false;}
//------------------------------------------------------------------------------
getPlayerNearFarmerPlant(playerID) {

new Float:objectPos[3];

for(new i = 0; i < MAX_FARMS; i++) {

	if(plantInfo[i][farmPlantCreated] && plantInfo[i][farmPlayerID] == playerID) {

		if(plantInfo[i][farmObject] != INVALID_OBJECT_ID && IsValidDynamicObject(plantInfo[i][farmObject])) {

			GetDynamicObjectPos(plantInfo[i][farmObject], objectPos[0], objectPos[1], objectPos[2]);
			if(IsPlayerInRangeOfPoint(playerID, 5.0, objectPos[0], objectPos[1], objectPos[2])) return i;
		}
	}
}
return -1;}
//------------------------------------------------------------------------------
stock IsCheatPosition(playerid) {
for(new i = 0; i < sizeof(CheatPositions);i++)
	if(IsPlayerInRangeOfPoint(playerid, 5.0, CheatPositions[i][0], CheatPositions[i][1], CheatPositions[i][2]))
	return true;
return false;}
//------------------------------------------------------------------------------
stock PlayerHasTazer(playerid) {
return (GetPlayerWeapon(playerid) == 23 && ImaTazer[playerid]);}
//------------------------------------------------------------------------------
stock PlayerHasNV(playerid) {
return (GetPlayerWeapon(playerid) == 44 && NightVision[playerid]);}
//------------------------------------------------------------------------------
stock NextGZoneID(const len) 
{
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) 
{
   provjera = (loop+1);
   format(Data_, (sizeof Data_), F_GZONE, provjera);
   if(!fexist(Data_))
   {
	  id = (provjera);
	  break; 
   ]
}
	return (id);}
stock NextSZoneID(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), F_SZONE, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break;}}
	return (id);}
//------------------------------------------------------------------------------
stock NextRadarID(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), F_RADARS, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break;}}
	return (id);}
//------------------------------------------------------------------------------
stock NextFieldID(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), F_FIELD, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break;}}
	return (id);}
//------------------------------------------------------------------------------
stock NextFStationID(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), FSTATION_FILE, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break;}}
	return (id);}

forward PumpaIstovar(playerid);
public PumpaIstovar(playerid) {

Fusion_KillTimer(Pistovar[playerid]);
TogglePlayerControllable(playerid, true);
GameTextForPlayer(playerid, "~w~ISTOVARENO", 5000, 1);
SendInfoMessage(playerid, "Gorivo je uspesno istovareno!");
Pistovara[playerid] = false;

new fstationID = VehicleInfo[ScriptIDVozila[GetPlayerVehicleID(playerid)]][vFuelStation];
new cisternID = FuelStation[fstationID][fsCisternID];

new stringce[256];
format(stringce, sizeof stringce, "{0F87FF]["col_white"CISTERNA {0F87FF]]\n{0F87FF]Dizel: {FFFFFF]%d/300 litara\n{0F87FF]Benzin: {FFFFFF]%d/300 litara\n{0F87FF]Gas: {FFFFFF]%d/300 litara\n{0F87FF]Gasno Ulje: {FFFFFF]%d/300 litara\n\n{0F87FF][{FFFFFF]%s {0F87FF]]",
	CisternFuel[VehicleInfo[cisternID][vID]][0],
	CisternFuel[VehicleInfo[cisternID][vID]][1],
	CisternFuel[VehicleInfo[cisternID][vID]][3],
	CisternFuel[VehicleInfo[cisternID][vID]][2],
	FuelStation[fstationID][fsName]);

Delete3DTextLabel(VehicleInfo[cisternID][v3DText]);

VehicleInfo[cisternID][Validv3DText] = true;
VehicleInfo[cisternID][v3DText] = Create3DTextLabel(stringce, 0x33CCFFAA, 0.0, 0.0, 0.0, 30.0, 0, 1);
Attach3DTextLabelToVehicle(VehicleInfo[cisternID][v3DText], VehicleInfo[cisternID][vID], 0.0, 0.0, 0.0);
return 1;}

forward PumpaUtovar(playerid);
public PumpaUtovar(playerid) {

Fusion_KillTimer(Putovar[playerid]);
TogglePlayerControllable(playerid, true);
GameTextForPlayer(playerid, "~w~UTOVARENO", 5000, 1);
SendInfoMessage(playerid, "Gorivo je uspesno utovareno!");
Putovara[playerid] = false;

	new fstationID = VehicleInfo[ScriptIDVozila[GetPlayerVehicleID(playerid)]][vFuelStation];
new cisternID = FuelStation[fstationID][fsCisternID];

Delete3DTextLabel(VehicleInfo[cisternID][v3DText]);

new stringce[256];
format(stringce, sizeof stringce, "{0F87FF]["col_white"CISTERNA {0F87FF]]\n{0F87FF]Dizel: {FFFFFF]%d/300 litara\n{0F87FF]Benzin: {FFFFFF]%d/300 litara\n{0F87FF]Gas: {FFFFFF]%d/300 litara\n{0F87FF]Gasno Ulje: {FFFFFF]%d/300 litara\n\n{0F87FF][{FFFFFF]%s {0F87FF]]",
	CisternFuel[VehicleInfo[cisternID][vID]][0],
	CisternFuel[VehicleInfo[cisternID][vID]][1],
	CisternFuel[VehicleInfo[cisternID][vID]][3],
	CisternFuel[VehicleInfo[cisternID][vID]][2],
	FuelStation[fstationID][fsName]);

VehicleInfo[cisternID][Validv3DText] = true;
VehicleInfo[cisternID][v3DText] = Create3DTextLabel(stringce, 0x33CCFFAA, 0.0, 0.0, 0.0, 30.0, 0, 1);
Attach3DTextLabelToVehicle(VehicleInfo[cisternID][v3DText], VehicleInfo[cisternID][vID], 0.0, 0.0, 0.0);
return 1;}

GetNearestFuelStation(playerid) {

for(new i = 1; i < MAX_FSTATION; i++) {

	if(IsPlayerInRangeOfPoint(playerid, 20.0, FuelStation[i][fsPos][0], FuelStation[i][fsPos][1], FuelStation[i][fsPos][2])) { return i; }
}
return -1;}

IsThatFuelStationMy(playerid) {

for(new i = 1; i < MAX_FSTATION; i++) {

	if(PlayerInfo[playerid][xFirmaID] == FuelStation[i][fsBusinessID]) { return i; }
}
return -1;}


FStation_Refresh(fstationID) {

new filename[32];

if(fstationID != -1) {

	format(filename, sizeof(filename), FSTATION_FILE, fstationID);

	if(fexist(filename)) {

		if(IsValidDynamic3DTextLabel(FuelStation[fstationID][fs3d]))
			DestroyDynamic3DTextLabel(FuelStation[fstationID][fs3d]);

		if(IsValidDynamicPickup(FuelStation[fstationID][fsPickup]))
			ac_DestroyDynamicPickup(FuelStation[fstationID][fsPickup]);

		if(FuelStation[fstationID][fsPlaced]) {

			new string[512];
			format(string, sizeof(string), "{0F87FF]Pumpa [{FFFFFF]%s{0F87FF]]\nCena 1L BENZINA: {FFFFFF]%d$\n{0F87FF]Cena 1L DIZELA: {FFFFFF]%d$\n{0F87FF]Cena 1L PLINA: {FFFFFF]%d$\n{0F87FF]Cena 1L GASNOG ULJA: {FFFFFF]%d$\n{FFFFFF]/fill\n{0F87FF][{FFFFFF]Adresa: {FFFFFF]%d {0F87FF]]",
				FuelStation[fstationID][fsName],
				FuelStation[fstationID][fsGasolinePrice],
				FuelStation[fstationID][fsDieselPrice],
				FuelStation[fstationID][fsGasPrice],
				FuelStation[fstationID][fsGasOilPrice],
				fstationID);

			FuelStation[fstationID][fs3d] = CreateDynamic3DTextLabel(string, 0x33CCFFFF, FuelStation[fstationID][fsPos] [0], FuelStation[fstationID][fsPos] [1], FuelStation[fstationID][fsPos] [2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
			FuelStation[fstationID][fsPickup] = acc_CreateDynamicPickup (1650, 1, FuelStation[fstationID][fsPos] [0], FuelStation[fstationID][fsPos] [1], FuelStation[fstationID][fsPos] [2], 0, 0);
		}
	}
}
}

forward FStation_Save(id);
public FStation_Save(id) {

new ifile[60];
format(ifile, sizeof(ifile), FSTATION_FILE, id);
new INI:File = INI_Open(ifile);
INI_WriteBool(File, "Placed", FuelStation[id][fsPlaced]);
INI_WriteInt(File, "BusinessID", FuelStation[id][fsBusinessID]);
INI_WriteInt(File, "GasolinePrice", FuelStation[id][fsGasolinePrice]);
INI_WriteInt(File, "GasolineL", FuelStation[id][fsGasolineL]);
INI_WriteInt(File, "DieselPrice", FuelStation[id][fsDieselPrice]);
INI_WriteInt(File, "DieselL", FuelStation[id][fsDieselL]);
INI_WriteInt(File, "GasPrice", FuelStation[id][fsGasPrice]);
INI_WriteInt(File, "GasL", FuelStation[id][fsGasL]);
INI_WriteInt(File, "GasOilPrice", FuelStation[id][fsGasOilPrice]);
INI_WriteInt(File, "GasOilL", FuelStation[id][fsGasOilL]);
INI_WriteString(File, "Name", FuelStation[id][fsName]);
INI_WriteFloat(File, "PosX", FuelStation[id][fsPos][0]);
INI_WriteFloat(File, "PosY", FuelStation[id][fsPos][1]);
INI_WriteFloat(File, "PosZ", FuelStation[id][fsPos][2]);
INI_WriteInt(File, "TruckID", FuelStation[id][fsTruckID]);
INI_WriteInt(File, "CisternID", FuelStation[id][fsCisternID]);
INI_Close(File);

return (true);}

forward FStation_Load(id, name[], value[]);
public FStation_Load(id, name[], value[]) {

INI_Bool("Placed", FuelStation[id][fsPlaced]);
INI_Int("BusinessID", FuelStation[id][fsBusinessID]);
INI_Int("GasolinePrice", FuelStation[id][fsGasolinePrice]);
INI_Int("GasolineL", FuelStation[id][fsGasolineL]);
INI_Int("DieselPrice", FuelStation[id][fsDieselPrice]);
INI_Int("DieselL", FuelStation[id][fsDieselL]);
INI_Int("GasPrice", FuelStation[id][fsGasPrice]);
INI_Int("GasL", FuelStation[id][fsGasL]);
INI_Int("GasOilPrice", FuelStation[id][fsGasOilPrice]);
INI_Int("GasOilL", FuelStation[id][fsGasOilL]);
INI_String("Name", FuelStation[id][fsName], 64);
INI_Float("PosX", FuelStation[id][fsPos][0]);
INI_Float("PosY", FuelStation[id][fsPos][1]);
INI_Float("PosZ", FuelStation[id][fsPos][2]);
INI_Int("TruckID", FuelStation[id][fsTruckID]);
INI_Int("CisternID", FuelStation[id][fsCisternID]);

return (true);}
//------------------------------------------------------------------------------
stock NextGPSID(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), F_GPS, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break;}}
	return (id);}

forward GPS_Save(id);
public GPS_Save(id) {
new ifile[60];
format(ifile, sizeof(ifile), F_GPS, id);
new INI:File = INI_Open(ifile);
INI_WriteString(File, "Name", gpsInfo[id][gpsName]);
INI_WriteFloat(File, "PosX", gpsInfo[id][gpsPos][0]);
INI_WriteFloat(File, "PosY", gpsInfo[id][gpsPos][1]);
INI_WriteFloat(File, "PosZ", gpsInfo[id][gpsPos][2]);
INI_Close(File);
return (true);}

forward LoadGPS(id, name[], value[]);
public LoadGPS(id, name[], value[]) {

INI_String("Name", gpsInfo[id][gpsName], 50);
INI_Float("PosX", gpsInfo[id][gpsPos][0]);
INI_Float("PosY", gpsInfo[id][gpsPos][1]);
INI_Float("PosZ", gpsInfo[id][gpsPos][2]);
return (true);}

//------------------------------------------------------------------------------
stock NextGarageID(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), F_GARAGE, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break;}}
	return (id);}
//
GetNearestPresent(playerid) {

for(new i = 1; i < MAX_PRESENTS; i++) {

	if(IsPlayerInRangeOfPoint(playerid, 3.0, presentsInfo[i][presPos][0], presentsInfo[i][presPos][1], presentsInfo[i][presPos][2])) { return i; }
}
return -1;}

forward SavePresent(id);
public SavePresent(id) {

new ifile[40];
format(ifile, sizeof(ifile), F_PRESENTS, id);
new INI:File = INI_Open(ifile);
INI_WriteBool(File, "Taken", presentsInfo[id][presTaken]);
INI_WriteBool(File, "Placed", presentsInfo[id][presPlaced]);
INI_WriteFloat(File, "Pos1", presentsInfo[id][presPos][0]);
INI_WriteFloat(File, "Pos2", presentsInfo[id][presPos][1]);
INI_WriteFloat(File, "Pos3", presentsInfo[id][presPos][2]);
INI_WriteFloat(File, "Pos4", presentsInfo[id][presPos][3]);
INI_WriteFloat(File, "Pos5", presentsInfo[id][presPos][4]);
INI_WriteFloat(File, "Pos6", presentsInfo[id][presPos][5]);
INI_Close(File);
return (true);}

stock NextPresentID(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), F_PRESENTS, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break;}}
	return (id);}

forward LoadPresents(id, name[], value[]);
public LoadPresents(id, name[], value[]) {

INI_Bool("Taken", presentsInfo[id][presTaken]);
INI_Bool("Placed", presentsInfo[id][presPlaced]);
INI_Float("Pos1", presentsInfo[id][presPos][0]);
INI_Float("Pos2", presentsInfo[id][presPos][1]);
INI_Float("Pos3", presentsInfo[id][presPos][2]);
INI_Float("Pos4", presentsInfo[id][presPos][3]);
INI_Float("Pos5", presentsInfo[id][presPos][4]);
INI_Float("Pos6", presentsInfo[id][presPos][5]);

return (true);}
//

GetNearestXOrb(playerid) {

for(new i = 1; i < MAX_XORBS; i++) {

	if(IsPlayerInRangeOfPoint(playerid, 3.0, XmasOrbs[i][xoPos][0], XmasOrbs[i][xoPos][1], XmasOrbs[i][xoPos][2])) { return i; }
}
return -1;}

forward SaveXOrb(id);
public SaveXOrb(id) {

new ifile[40];
format(ifile, sizeof(ifile), F_XORBS, id);
new INI:File = INI_Open(ifile);
INI_WriteBool(File, "Placed", XmasOrbs[id][xoPlaced]);
INI_WriteFloat(File, "Pos1", XmasOrbs[id][xoPos][0]);
INI_WriteFloat(File, "Pos2", XmasOrbs[id][xoPos][1]);
INI_WriteFloat(File, "Pos3", XmasOrbs[id][xoPos][2]);
INI_WriteFloat(File, "Pos4", XmasOrbs[id][xoPos][3]);
INI_WriteFloat(File, "Pos5", XmasOrbs[id][xoPos][4]);
INI_WriteFloat(File, "Pos6", XmasOrbs[id][xoPos][5]);
INI_Close(File);
return (true);}

stock NextXOrbID(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), F_XORBS, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break;}}
	return (id);}

forward LoadXOrbs(id, name[], value[]);
public LoadXOrbs(id, name[], value[]) {

INI_Bool("Placed", XmasOrbs[id][xoPlaced]);
INI_Float("Pos1", XmasOrbs[id][xoPos][0]);
INI_Float("Pos2", XmasOrbs[id][xoPos][1]);
INI_Float("Pos3", XmasOrbs[id][xoPos][2]);
INI_Float("Pos4", XmasOrbs[id][xoPos][3]);
INI_Float("Pos5", XmasOrbs[id][xoPos][4]);
INI_Float("Pos6", XmasOrbs[id][xoPos][5]);

return (true);}

//
timer Set_To_Spawn[3000](playerid)
{
				Fusion_SetSpawnInfo(playerid);
				ac_SpawnPlayer(playerid); PlayerLogged[playerid] = true;
				antiCheatCS[playerid][TeleportCheck] = 4;
				antiCheatCS[playerid][WeaponDetect] = 4;

				global_tds(playerid, true);

				if(PlayerInfo[playerid][xPol] == 0) PlayerInfo[playerid][xPol] = 1;

				//CreatePlayerVehicles(playerid);
				SetPlayerVirtualWorld(playerid, 0);

				DonatorBoja(playerid);

				ResetAllWeapons(playerid);

				new drzava[64];
				GetPlayerCountry(playerid, drzava, sizeof(drzava));

				new stringic[256];
				format(stringic, sizeof(stringic), ""col_green"[CONNECT]: "col_white"Igrac %s se ulogovao na server (ID: %d | Drzava: %s).", ImeIgraca(playerid), playerid, drzava);
				AdminPoruka(-1, stringic);
				return (true);}
//

GetNearestCTree(playerid) {

for(new i = 1; i < MAX_CTREES; i++) {

	if(IsPlayerInRangeOfPoint(playerid, 3.0, CTree[i][ctPos][0], CTree[i][ctPos][1], CTree[i][ctPos][2])) { return i; }
}
return -1;}

forward SaveCTree(id);
public SaveCTree(id) {

new ifile[40];
format(ifile, sizeof(ifile), F_CTREES, id);
new INI:File = INI_Open(ifile);
INI_WriteBool(File, "Placed", CTree[id][ctPlaced]);
INI_WriteFloat(File, "Pos1", CTree[id][ctPos][0]);
INI_WriteFloat(File, "Pos2", CTree[id][ctPos][1]);
INI_WriteFloat(File, "Pos3", CTree[id][ctPos][2]);
INI_WriteFloat(File, "Pos4", CTree[id][ctPos][3]);
INI_WriteFloat(File, "Pos5", CTree[id][ctPos][4]);
INI_WriteFloat(File, "Pos6", CTree[id][ctPos][5]);
INI_Close(File);
return (true);}

stock NextCTreeID(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), F_CTREES, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break;}}
	return (id);}

forward LoadCTrees(id, name[], value[]);
public LoadCTrees(id, name[], value[]) {

INI_Bool("Placed", CTree[id][ctPlaced]);
INI_Float("Pos1", CTree[id][ctPos][0]);
INI_Float("Pos2", CTree[id][ctPos][1]);
INI_Float("Pos3", CTree[id][ctPos][2]);
INI_Float("Pos4", CTree[id][ctPos][3]);
INI_Float("Pos5", CTree[id][ctPos][4]);
INI_Float("Pos6", CTree[id][ctPos][5]);

return (true);}
//------------------------------------------------------------------------------
ResetGarage(id) {
garageInfo[id][garageOwned] = false;
strmid(garageInfo[id][garageOwned], "Drzava", 0, strlen("Drzava"), MAX_PLAYER_NAME);
garageInfo[id][garagePrice] = 0;
garageInfo[id][garageLevel] = 0;
garageInfo[id][garageLocked] = false;
garageInfo[id][garagePos][0] = 0.0;
garageInfo[id][garagePos][1] = 0.0;
garageInfo[id][garagePos][2] = 0.0;
garageInfo[id][garageVehiclePos][0] = 0.0;
garageInfo[id][garageVehiclePos][1] = 0.0;
garageInfo[id][garageVehiclePos][2] = 0.0;
garageInfo[id][garageVehiclePos][3] = 0.0;
garageInfo[id][garageVW] = 0;
garageInfo[id][garageType] = -1;}

GetNearestGarage(playerid) {

for(new i = 1; i < MAX_GARAGES; i++) {

	if(IsPlayerInRangeOfPoint(playerid, 3.0, garageInfo[i][garagePos][0], garageInfo[i][garagePos][1], garageInfo[i][garagePos][2])) { return i; }
}
return -1;}

GetNearestRadar(playerid) {

for(new i = 1; i < MAX_RADARS; i++) {

	if(IsPlayerInRangeOfPoint(playerid, 10.0, radarInfo[i][radarPos][0], radarInfo[i][radarPos][1], radarInfo[i][radarPos][2])) { return i; }
}
return -1;}

GetNearestRent(playerid) {

for(new i = 1; i < MAX_RENTS; i++) {

	if(IsPlayerInRangeOfPoint(playerid, 3.0, RentInfo[i][rentX], RentInfo[i][rentY], RentInfo[i][rentZ])) { return i; }
}
return -1;}
stock NextRentID(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), RENT_FILE, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break;}}
	return (id);}
stock SaveRent(id) {

new rentFile[60];
format(rentFile, sizeof(rentFile), RENT_FILE, id);
new INI:File = INI_Open(rentFile);
INI_WriteFloat(File, "Lokacija_X", RentInfo[id][rentX]);
INI_WriteFloat(File, "Lokacija_Y", RentInfo[id][rentY]);
INI_WriteFloat(File, "Lokacija_Z", RentInfo[id][rentZ]);
INI_Close(File);
return 1;}
forward LoadRent(id, name[], value[]);
public LoadRent(id, name[], value[]) {

INI_Float("Lokacija_X", RentInfo[id][rentX]);
INI_Float("Lokacija_Y", RentInfo[id][rentY]);
INI_Float("Lokacija_Z", RentInfo[id][rentZ]);
return 1;}

forward Garage_Save(id);
public Garage_Save(id) {
new ifile[40];
format(ifile, sizeof(ifile), F_GARAGE, id);
new INI:File = INI_Open(ifile);
INI_WriteBool(File, "Owned", garageInfo[id][garageOwned]);
INI_WriteString(File, "Owner", garageInfo[id][garageOwner]);
INI_WriteInt(File, "Price", garageInfo[id][garagePrice]);
INI_WriteInt(File, "Level", garageInfo[id][garageLevel]);
INI_WriteBool(File, "Locked", garageInfo[id][garageLocked]);
INI_WriteFloat(File, "Pos1", garageInfo[id][garagePos][0]);
INI_WriteFloat(File, "Pos2", garageInfo[id][garagePos][1]);
INI_WriteFloat(File, "Pos3", garageInfo[id][garagePos][2]);
INI_WriteFloat(File, "VehiclePos1", garageInfo[id][garageVehiclePos][0]);
INI_WriteFloat(File, "VehiclePos2", garageInfo[id][garageVehiclePos][1]);
INI_WriteFloat(File, "VehiclePos3", garageInfo[id][garageVehiclePos][2]);
INI_WriteFloat(File, "VehiclePos4", garageInfo[id][garageVehiclePos][3]);
INI_WriteInt(File, "VW", garageInfo[id][garageVW]);
INI_WriteInt(File, "Type", garageInfo[id][garageType]);
INI_Close(File);
return (true);}

forward LoadGarages(id, name[], value[]);
public LoadGarages(id, name[], value[]) {

INI_Bool("Owned", garageInfo[id][garageOwned]);
INI_String("Owner", garageInfo[id][garageOwner], MAX_PLAYER_NAME);
INI_Int("Price", garageInfo[id][garagePrice]);
INI_Int("Level", garageInfo[id][garageLevel]);
INI_Bool("Locked", garageInfo[id][garageLocked]);
INI_Float("Pos1", garageInfo[id][garagePos][0]);
INI_Float("Pos2", garageInfo[id][garagePos][1]);
INI_Float("Pos3", garageInfo[id][garagePos][2]);
INI_Float("VehiclePos1", garageInfo[id][garageVehiclePos][0]);
INI_Float("VehiclePos2", garageInfo[id][garageVehiclePos][1]);
INI_Float("VehiclePos3", garageInfo[id][garageVehiclePos][2]);
INI_Float("VehiclePos4", garageInfo[id][garageVehiclePos][3]);
INI_Int("VW", garageInfo[id][garageVW]);
INI_Int("Type", garageInfo[id][garageType]);
return (true);}

Garage_Refresh(id) {
new filename[32],
		vrsta[20],
			string[256];

if(id  != -1) {

	format(filename, sizeof(filename), F_GARAGE, id);

	if(fexist(filename)) {

		if(IsValidDynamic3DTextLabel(garageInfo[id][garage3D]))
			DestroyDynamic3DTextLabel(garageInfo[id][garage3D]);

		if(IsValidDynamicPickup(garageInfo[id][garagePickup]))
			ac_DestroyDynamicPickup(garageInfo[id][garagePickup]);

		switch(garageInfo[id][garageType]) {
			case 0: {
				vrsta = "Mala garaza";
			}
			case 1: {
				vrsta = "Srednja garaza";
			}
			case 2: {
				vrsta = "Velika garaza";
			}
		}

		if(!garageInfo[id][garageOwned]) {
			format(string, sizeof(string), ""col_orange"Garaza na prodaju"col_white"[ID %d]\n"col_orange"Tip garaze: "col_white"%s\n"col_orange"Cena garaze: "col_white"%d\n"col_orange"Potreban level: "col_white"%d\n"col_orange"Za kupovinu kucajte "col_white"/kupigarazu", id, vrsta, garageInfo[id][garagePrice], garageInfo[id][garageLevel]);
		}
		else if(garageInfo[id][garageOwned]) {
			format(string, sizeof(string), ""col_white"[ID %d]"col_orange"Vlasnik: "col_white"%s\n"col_orange"Tip garaze: "col_white"%s\n"col_orange"Potreban level: "col_white"%d\n"col_orange"Za ulaz koristite "col_white"/genter", id, garageInfo[id][garageOwner], vrsta, garageInfo[id][garageLevel]);
		}
		garageInfo[id][garage3D] = CreateDynamic3DTextLabel(string, BELA, garageInfo[id][garagePos][0], garageInfo[id][garagePos][1], garageInfo[id][garagePos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		garageInfo[id][garagePickup] = acc_CreateDynamicPickup(2992, 1, garageInfo[id][garagePos][0], garageInfo[id][garagePos][1], garageInfo[id][garagePos][2], 0, 0);

	}
}
}

//------------------------------------------------------------------------------

GZone_Reset(id) {

gZoneInfo[id][gZoneTaken] = false;
gZoneInfo[id][gZoneTakeable] = false;
gZoneInfo[id][gZoneGangID] = -1;
gZoneInfo[id][gZoneTime] = 0;
gZoneInfo[id][gZoneMaxX] = 0.0;
gZoneInfo[id][gZoneMinX] = 0.0;
gZoneInfo[id][gZoneMaxY] = 0.0;
gZoneInfo[id][gZoneMinY] = 0.0;
gZoneInfo[id][gZonePickupPos][0] = 0.0;
gZoneInfo[id][gZonePickupPos][1] = 0.0;
gZoneInfo[id][gZonePickupPos][2] = 0.0;
gZoneInfo[id][gZoneObjPos][0] = 0.0;
gZoneInfo[id][gZoneObjPos][1] = 0.0;
gZoneInfo[id][gZoneObjPos][2] = 0.0;
gZoneInfo[id][gZoneObjPos][3] = 0.0;
gZoneInfo[id][gZoneObjPos][4] = 0.0;
gZoneInfo[id][gZoneObjPos][5] = 0.0;

}

forward GZone_Load(id, name[], value[]);
public GZone_Load(id, name[], value[]) {

INI_Bool("Taken", gZoneInfo[id][gZoneTaken]);
INI_Bool("Takeable", gZoneInfo[id][gZoneTakeable]);
INI_Int("GangID", gZoneInfo[id][gZoneGangID]);
INI_Int("Time", gZoneInfo[id][gZoneTime]);
INI_Float("MaxX", gZoneInfo[id][gZoneMaxX]);
INI_Float("MinX", gZoneInfo[id][gZoneMinX]);
INI_Float("MaxY", gZoneInfo[id][gZoneMaxY]);
INI_Float("MinY", gZoneInfo[id][gZoneMinY]);
INI_String("Color", gZoneInfo[id][gZoneColor], 24);
INI_Float("PickupPos", gZoneInfo[id][gZonePickupPos][0]);
INI_Float("PickupPos2", gZoneInfo[id][gZonePickupPos][1]);
INI_Float("PickupPos3", gZoneInfo[id][gZonePickupPos][2]);
INI_Float("ObjectPos", gZoneInfo[id][gZoneObjPos][0]);
INI_Float("ObjectPos", gZoneInfo[id][gZoneObjPos][1]);
INI_Float("ObjectPos", gZoneInfo[id][gZoneObjPos][2]);
INI_Float("ObjectPos", gZoneInfo[id][gZoneObjPos][3]);
INI_Float("ObjectPos", gZoneInfo[id][gZoneObjPos][4]);
INI_Float("ObjectPos", gZoneInfo[id][gZoneObjPos][5]);

return (true);}

SZone_Reset(id) {

gSafeZoneInfo[id][gSafeZoneID] = -1;
gSafeZoneInfo[id][gSafeZoneMaxX] = 0.0;
gSafeZoneInfo[id][gSafeZoneMinX] = 0.0;
gSafeZoneInfo[id][gSafeZoneMaxY] = 0.0;
gSafeZoneInfo[id][gSafeZoneMinY] = 0.0;}
forward GSafeZone_Load(id, name[], value[]);
public GSafeZone_Load(id, name[], value[]) {

INI_Int("SafeZoneID", gSafeZoneInfo[id][gSafeZoneID]);
INI_Float("MaxX", gSafeZoneInfo[id][gSafeZoneMaxX]);
INI_Float("MinX", gSafeZoneInfo[id][gSafeZoneMinX]);
INI_Float("MaxY", gSafeZoneInfo[id][gSafeZoneMaxY]);
INI_Float("MinY", gSafeZoneInfo[id][gSafeZoneMinY]);
INI_String("Color", gSafeZoneInfo[id][gSafeZoneColor], 24);
return (true);}

GetNearestGZone(playerid) {

new Float:Pos[4];
GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
for(new id = 1; id < MAX_GZONE; id++) {
	if(Pos[0] <= gZoneInfo[id][gZoneMaxX] && Pos[0] >= gZoneInfo[id][gZoneMinX] && Pos[1] <= gZoneInfo[id][gZoneMaxY] && Pos[1] >= gZoneInfo[id][gZoneMinY]) {
		return id;
	}
}
return -1;}


GZone_Refresh(id) {

new filename[32], string[256];

if(id  != -1) {

	format(filename, sizeof(filename), F_GZONE, id);

	if(fexist(filename)) {

		if(IsValidDynamic3DTextLabel(gZoneInfo[id][gZone3D]))
			DestroyDynamic3DTextLabel(gZoneInfo[id][gZone3D]);

		if(IsValidDynamicPickup(gZoneInfo[id][gZonePickup]))
			ac_DestroyDynamicPickup(gZoneInfo[id][gZonePickup]);
			
		if(IsValidDynamicObject(gZoneInfo[id][gZoneObjID]))
			DestroyDynamicObject(gZoneInfo[id][gZoneObjID]);

		if(!gZoneInfo[id][gZoneTaken]) {

			gZoneInfo[id][gZonePickup] = acc_CreateDynamicPickup(365, 1, gZoneInfo[id][gZonePickupPos][0], gZoneInfo[id][gZonePickupPos][1], gZoneInfo[id][gZonePickupPos][2], 0, 0);
			gZoneInfo[id][gZone3D] = CreateDynamic3DTextLabel(""col_white"[TERITORIJA]\nTeritorija je "col_server"slobodna"col_white"\nAko zelite da zauzmete ovu teritoriju kucajte "col_server"/zauzmi", BELA, gZoneInfo[id][gZonePickupPos][0], gZoneInfo[id][gZonePickupPos][1], gZoneInfo[id][gZonePickupPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		}
		else if(gZoneInfo[id][gZoneTaken]) {
			gZoneInfo[id][gZoneObjID] = CreateDynamicObject(OI[gZoneInfo[id][gZoneGangID]][oSprayID], gZoneInfo[id][gZoneObjPos][0], gZoneInfo[id][gZoneObjPos][1], gZoneInfo[id][gZoneObjPos][2], gZoneInfo[id][gZoneObjPos][3], gZoneInfo[id][gZoneObjPos][4], gZoneInfo[id][gZoneObjPos][5]);
			gZoneInfo[id][gZonePickup] = acc_CreateDynamicPickup(365, 1, gZoneInfo[id][gZonePickupPos][0], gZoneInfo[id][gZonePickupPos][1], gZoneInfo[id][gZonePickupPos][2], 0, 0);
			format(string, sizeof(string), ""col_white"[TERITORIJA]\nTeritorija je u vlasnistvu bande "col_server"%s"col_white"\nAko zelite da zauzmete ovu teritoriju kucajte "col_server"/zauzmi",  OI[gZoneInfo[id][gZoneGangID]][oName]);
			gZoneInfo[id][gZone3D] = CreateDynamic3DTextLabel(string, BELA, gZoneInfo[id][gZonePickupPos][0], gZoneInfo[id][gZonePickupPos][1], gZoneInfo[id][gZonePickupPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		}
	}
}
}

stock GZone_Save(id) {

new ifile[40];
format(ifile, sizeof(ifile), F_GZONE, id);
new INI:File = INI_Open(ifile);
INI_WriteBool(File, "Taken", gZoneInfo[id][gZoneTaken]);
INI_WriteBool(File, "Takeable", gZoneInfo[id][gZoneTakeable]);
INI_WriteInt(File, "GangID", gZoneInfo[id][gZoneGangID]);
INI_WriteInt(File, "Time", gZoneInfo[id][gZoneTime]);
INI_WriteFloat(File, "MaxX", gZoneInfo[id][gZoneMaxX]);
INI_WriteFloat(File, "MinX", gZoneInfo[id][gZoneMinX]);
INI_WriteFloat(File, "MaxY", gZoneInfo[id][gZoneMaxY]);
INI_WriteFloat(File, "MinY", gZoneInfo[id][gZoneMinY]);
INI_WriteString(File, "Color", gZoneInfo[id][gZoneColor]);
INI_WriteFloat(File, "PickupPos", gZoneInfo[id][gZonePickupPos][0]);
INI_WriteFloat(File, "PickupPos2", gZoneInfo[id][gZonePickupPos][1]);
INI_WriteFloat(File, "PickupPos3", gZoneInfo[id][gZonePickupPos][2]);
INI_Close(File);

return (true);}
stock GSafeZone_Save(id) {

new ifile[40];
format(ifile, sizeof(ifile), F_SZONE, id);
new INI:File = INI_Open(ifile);
INI_WriteInt(File, "SafeZoneID", gSafeZoneInfo[id][gSafeZoneID]);
INI_WriteFloat(File, "MaxX", gSafeZoneInfo[id][gSafeZoneMaxX]);
INI_WriteFloat(File, "MinX", gSafeZoneInfo[id][gSafeZoneMinX]);
INI_WriteFloat(File, "MaxY", gSafeZoneInfo[id][gSafeZoneMaxY]);
INI_WriteFloat(File, "MinY", gSafeZoneInfo[id][gSafeZoneMinY]);
INI_WriteString(File, "Color", gSafeZoneInfo[id][gSafeZoneColor]);
INI_Close(File);

return (true);}
//------------------------------------------------------------------------------
ResetField(id) {
fieldInfo[id][fieldOwned] = false;
strmid(fieldInfo[id][fieldOwner], "Drzava", 0, strlen("Drzava"), MAX_PLAYER_NAME);
fieldInfo[id][fieldPrice] = 0;
fieldInfo[id][fieldStalkNumber] = 0;
fieldInfo[id][fieldLevel] = 0;
fieldInfo[id][fieldMaxX] = 0.0;
fieldInfo[id][fieldMinX] = 0.0;
fieldInfo[id][fieldMaxY] = 0.0;
fieldInfo[id][fieldMinY] = 0.0;
fieldInfo[id][fieldObjectPos][0] = 0.0;
fieldInfo[id][fieldObjectPos][1] = 0.0;
fieldInfo[id][fieldObjectPos][2] = 0.0;
fieldInfo[id][fieldObjectPos][3] = 0.0;
fieldInfo[id][fieldObjectPos][4] = 0.0;
fieldInfo[id][fieldObjectPos][5] = 0.0;}

forward Field_Save(id);
public Field_Save(id) {
new ifile[40];
format(ifile, sizeof(ifile), F_FIELD, id);
new INI:File = INI_Open(ifile);
INI_WriteBool(File, "Owned", fieldInfo[id][fieldOwned]);
INI_WriteString(File, "Owner", fieldInfo[id][fieldOwner]);
INI_WriteInt(File, "Price", fieldInfo[id][fieldPrice]);
INI_WriteInt(File, "Level", fieldInfo[id][fieldLevel]);
INI_WriteFloat(File, "MaxX", fieldInfo[id][fieldMaxX]);
INI_WriteFloat(File, "MinX", fieldInfo[id][fieldMinX]);
INI_WriteFloat(File, "MaxY", fieldInfo[id][fieldMaxY]);
INI_WriteFloat(File, "MinY", fieldInfo[id][fieldMinY]);
INI_WriteInt(File, "StalkNumber", fieldInfo[id][fieldStalkNumber]);
INI_WriteFloat(File, "fieldObjectPosX", fieldInfo[id][fieldObjectPos][0]);
INI_WriteFloat(File, "fieldObjectPosY", fieldInfo[id][fieldObjectPos][1]);
INI_WriteFloat(File, "fieldObjectPosZ", fieldInfo[id][fieldObjectPos][2]);
INI_WriteFloat(File, "fieldObjectPosRX", fieldInfo[id][fieldObjectPos][3]);
INI_WriteFloat(File, "fieldObjectPosRY", fieldInfo[id][fieldObjectPos][4]);
INI_WriteFloat(File, "fieldObjectPosRZ", fieldInfo[id][fieldObjectPos][5]);
INI_Close(File);
return (true);}

forward LoadFields(id, name[], value[]);
public LoadFields(id, name[], value[]) {

INI_Bool("Owned", fieldInfo[id][fieldOwned]);
INI_String("Owner", fieldInfo[id][fieldOwner], MAX_PLAYER_NAME);
INI_Int("Price", fieldInfo[id][fieldPrice]);
INI_Int("Level", fieldInfo[id][fieldLevel]);
INI_Float("MaxX", fieldInfo[id][fieldMaxX]);
INI_Float("MinX", fieldInfo[id][fieldMinX]);
INI_Float("MaxY", fieldInfo[id][fieldMaxY]);
INI_Float("MinY", fieldInfo[id][fieldMinY]);
INI_Int("StalkNumber", fieldInfo[id][fieldStalkNumber]);
INI_Float("fieldObjectPosX", fieldInfo[id][fieldObjectPos][0]);
INI_Float("fieldObjectPosY", fieldInfo[id][fieldObjectPos][1]);
INI_Float("fieldObjectPosZ", fieldInfo[id][fieldObjectPos][2]);
INI_Float("fieldObjectPosRX", fieldInfo[id][fieldObjectPos][3]);
INI_Float("fieldObjectPosRY", fieldInfo[id][fieldObjectPos][4]);
INI_Float("fieldObjectPosRZ", fieldInfo[id][fieldObjectPos][5]);
return (true);}

forward LoadStalks(id, name[], value[]);
public LoadStalks(id, name[], value[]) {

INI_Int("fieldID", stalkInfo[id][sfieldID]);
INI_Int("ObjectID", stalkInfo[id][sObjectID]);
INI_Float("Pos1", stalkInfo[id][sPos][0]);
INI_Float("Pos2", stalkInfo[id][sPos][1]);
INI_Float("Pos3", stalkInfo[id][sPos][2]);
INI_Bool("Planted", stalkInfo[id][sPlanted]);
INI_Bool("Grow", stalkInfo[id][sGrow]);
INI_Int("Type", stalkInfo[id][sType]);
INI_Int("Minut", stalkInfo[id][sMinut]);
INI_Int("Hour", stalkInfo[id][sHour]);
return (true);}

forward Stalk_Save(id);
public Stalk_Save(id) {
new ifile[40];
format(ifile, sizeof(ifile), F_STALK, id);
new INI:File = INI_Open(ifile);
INI_WriteInt(File, "fieldID", stalkInfo[id][sfieldID]);
INI_WriteInt(File, "ObjectID", stalkInfo[id][sObjectID]);
INI_WriteFloat(File, "Pos1", stalkInfo[id][sPos][0]);
INI_WriteFloat(File, "Pos2", stalkInfo[id][sPos][1]);
INI_WriteFloat(File,"Pos3", stalkInfo[id][sPos][2]);
INI_WriteBool(File, "Planted", stalkInfo[id][sPlanted]);
INI_WriteBool(File, "Grow", stalkInfo[id][sGrow]);
INI_WriteInt(File, "Type", stalkInfo[id][sType]);
INI_WriteInt(File, "Minut", stalkInfo[id][sMinut]);
INI_WriteInt(File, "Hour", stalkInfo[id][sHour]);
INI_Close(File);
return (true);}

stock NextStalkID(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), F_STALK, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break;}}
	return (id);}

GetNearestStalk(playerid) {

for(new i = 1; i < MAX_STALKS; i++) {
	if(stalkInfo[i][sPlanted] == true) {
		if(IsPlayerInRangeOfPoint(playerid, 3.0, stalkInfo[i][sPos][0], stalkInfo[i][sPos][1], stalkInfo[i][sPos][2])) { return i;}
	}
}
return -1;}

GetNearestField(playerid) {
new Float:Pos[4];
GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
for(new id = 1; id < MAX_FIELDS; id++) {
	if(Pos[0] <= fieldInfo[id][fieldMaxX] && Pos[0] >= fieldInfo[id][fieldMinX] && Pos[1] <= fieldInfo[id][fieldMaxY] && Pos[1] >= fieldInfo[id][fieldMinY]) {
		return id;
	}
}
return -1;}

stock IsCordsInOtherField(Float:x, Float:y) {
for(new id = 1; id < MAX_FIELDS; id++) {
	if(x <= fieldInfo[id][fieldMaxX] && x >= fieldInfo[id][fieldMinX] && y <= fieldInfo[id][fieldMaxY] && y >= fieldInfo[id][fieldMinY]) {
		return id;
	}
}
return -1;}

stock IsCordsInOtherGZone(Float:x, Float:y) {
for(new id = 1; id < MAX_GZONE; id++) {
	if(x <= gZoneInfo[id][gZoneMaxX] && x >= gZoneInfo[id][gZoneMinX] && y <= gZoneInfo[id][gZoneMaxY] && y >= gZoneInfo[id][gZoneMinY]) {
		return id;
	}
}
return -1;}
stock bool:IsPlayerInSafeZone(playerid, zoneid)
{
//if(!s3Zone_g_GangZones) return false;

new
			Float:PosX,
			Float:PosY,
			Float:PosZ
	;

GetPlayerPos(playerid, PosX, PosY, PosZ);
if((gSafeZoneInfo[zoneid][gSafeZoneMinX] < PosX) && (gSafeZoneInfo[zoneid][gSafeZoneMaxX] > PosX) && (gSafeZoneInfo[zoneid][gSafeZoneMinY] < PosY) && (gSafeZoneInfo[zoneid][gSafeZoneMaxY] > PosY)) return true;
else return false;}
stock IsCordsInOtherSZone(Float:x, Float:y) {
for(new id = 1; id < MAX_SZONE; id++) {
	if(x <= gSafeZoneInfo[id][gSafeZoneMaxX] && x >= gSafeZoneInfo[id][gSafeZoneMinX] && y <= gSafeZoneInfo[id][gSafeZoneMaxY] && y >= gSafeZoneInfo[id][gSafeZoneMinY]) {
		return id;
	}
}
return -1;}
stock Stalk_Refresh(id) {
stalkInfo[id][sfieldID] = -1;
stalkInfo[id][sObjectID] = 0;
stalkInfo[id][sPlanted] = false;
stalkInfo[id][sGrow] = false;
stalkInfo[id][sType] = 0;
stalkInfo[id][sMinut] = 0;
stalkInfo[id][sHour] = 0;
stalkInfo[id][sPos][0] = 0.0;
stalkInfo[id][sPos][1] = 0.0;
stalkInfo[id][sPos][2] = 0.0;}

stock Stalk_Delete(id) {
new filename[32];

if(id  != -1) {

	format(filename, sizeof(filename), F_STALK, id);

	if(fexist(filename)) {

		if(IsValidDynamic3DTextLabel(stalkInfo[id][s3D]))
			DestroyDynamic3DTextLabel(stalkInfo[id][s3D]);

		if(IsValidDynamicObject(stalkInfo[id][sObject]))
			DestroyDynamicObject(stalkInfo[id][sObject]);

		Stalk_Refresh(id);

		fremove(filename);
	}
}
}

Field_Refresh(id) {
new filename[32],
		string[180];

if(id  != -1) {

	format(filename, sizeof(filename), F_FIELD, id);

	if(fexist(filename)) {

		if(IsValidDynamic3DTextLabel(fieldInfo[id][field3D]))
			DestroyDynamic3DTextLabel(fieldInfo[id][field3D]);

		if(IsValidDynamicPickup(fieldInfo[id][fieldPickup]))
			ac_DestroyDynamicPickup(fieldInfo[id][fieldPickup]);

		if(IsValidDynamicObject(fieldInfo[id][fieldObject]))
			DestroyDynamicObject(fieldInfo[id][fieldObject]);


		if(!fieldInfo[id][fieldOwned]) {
			format(string, sizeof(string), ""col_server"Imanje - "col_white"%d "col_server"- na prodaju\nCena: "col_white"%d\n"col_server"Level: "col_white"%d\n"col_server"Za kupovinu kucajte "col_white"/kupiimanje", id, fieldInfo[id][fieldPrice], fieldInfo[id][fieldLevel]);
			fieldInfo[id][fieldObject] = CreateDynamicObject(19470, fieldInfo[id][fieldObjectPos][0], fieldInfo[id][fieldObjectPos][1], fieldInfo[id][fieldObjectPos][2], fieldInfo[id][fieldObjectPos][3], fieldInfo[id][fieldObjectPos][4], fieldInfo[id][fieldObjectPos][5], -1, -1, -1, 200.0);
		}
		else if(fieldInfo[id][fieldOwned]) {
			format(string, sizeof(string), ""col_server"Imanje - "col_white"%d "col_server"-\nVlasnik: "col_white"%s\n"col_server"Level: "col_white"%d", id, fieldInfo[id][fieldOwner], fieldInfo[id][fieldLevel]);
			fieldInfo[id][fieldPickup] = acc_CreateDynamicPickup(1239, 1, fieldInfo[id][fieldObjectPos][0], fieldInfo[id][fieldObjectPos][1], fieldInfo[id][fieldObjectPos][2]+1, 0, 0);
		}
		fieldInfo[id][field3D] = CreateDynamic3DTextLabel(string, BELA, fieldInfo[id][fieldObjectPos][0], fieldInfo[id][fieldObjectPos][1], fieldInfo[id][fieldObjectPos][2]+1, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

	}
}
}

stock IsCordsInField(id, Float:x, Float:y) {

if(x <= fieldInfo[id][fieldMaxX] && x >= fieldInfo[id][fieldMinX] && y <= fieldInfo[id][fieldMaxY] && y >= fieldInfo[id][fieldMinY]) {
	return id;}
return -1;}

stock IsCordsInGZone(id, Float:x, Float:y) {

if(x <= gZoneInfo[id][gZoneMaxX] && x >= gZoneInfo[id][gZoneMinX] && y <= gZoneInfo[id][gZoneMaxY] && y >= gZoneInfo[id][gZoneMinY]) {
	return id;}
return -1;}

//------------------------------------------------------------------------------

forward SkiniRobZlatare();
public SkiniRobZlatare() {

Fusion_KillTimer(TimerZlatareVracanje);

ZlataraUToku = false;
ZlataraOpljackana = false;

return true;}

forward SkiniRobBanke();
public SkiniRobBanke() {

Fusion_KillTimer(TimerBankeVracanje);

if(SruseniLaseri == true) {

	LaseriBanka[0] = CreateDynamicObject(18643, -111.92853, 1129.10754, -24.96888,   0.00000, 0.00000, 0.00000);
	LaseriBanka[1] = CreateDynamicObject(18643, -111.92853, 1129.10754, -26.10878,   0.00000, 0.00000, 0.00000);
	LaseriBanka[2] = CreateDynamicObject(18643, -111.92853, 1129.10754, -26.81783,   0.00000, 0.00000, 0.00000);
	LaseriBanka[3] = CreateDynamicObject(18643, -111.92853, 1129.10754, -25.47898,   0.00000, 0.00000, 0.00000);

	SruseniLaseri = false;}

BankaOpljackana = false;
PljackaUToku = false;

if(VrataBankeSrusena == true) {
	if(IsValidDynamicObject(VrataSefaBanke))
		DestroyDynamicObject(VrataSefaBanke);

	VrataSefaBanke = CreateDynamicObject(1495, -150.81219, 924.75452, -16.58700,   0.00000, 0.00000, 0.00000);
	VrataBankeSrusena = false;}

if(VrataBankeHakovana == true) {
	if(IsValidDynamicObject(VrataSefaBankeZaHack))
		DestroyDynamicObject(VrataSefaBankeZaHack);

	VrataSefaBankeZaHack = CreateDynamicObject(19303, -146.54340, 923.50818, -27.93430,   0.00000, 0.00000, 0.00000);
	VrataBankeHakovana = false;}

if(SefBankeOtvoren == true) {
	if(IsValidDynamicObject(SefBanke))
		DestroyDynamicObject(SefBanke);

	SefBanke = CreateDynamicObject(2634, -146.419, 903.071, -27.495, 0.000, 0.000, 0.000, -1, -1, -1, 300.000, 300.000);
	SefBankeOtvoren = false;}
return true;}

forward PljackanjeZlatarice(playerid);
public PljackanjeZlatarice(playerid) {
new string[128];
if(IsPlayerInDynamicArea(playerid, ZlataraSef)) {
	if(ZlatoVreme[playerid] > 0) {

		new zlato = random(500)+130;

		if(ServerInfo[Zlato] >= (PljackaZlato[playerid] + zlato))  {

			PljackaZlato[playerid] = zlato;
			format(string, sizeof(string), "~w~Ostanite u sefu jos ~r~%d ~w~sekundi", ZlatoVreme[playerid]);
			GameTextForPlayer(playerid, string, 1000, 4) ;
			ZlatoVreme[playerid]--;

		}
		else if(ServerInfo[Zlato] < (PljackaZlato[playerid] + zlato)) {

			GameTextForPlayer(playerid, "~w~Nema vise zlata u sefu!", 1000, 4) ;
			ZlatoVreme[playerid] = 0;
			SendClientMessageEx(playerid, NARACRVENA, "Opljackao si zlataru i uzeo %dg zlata.", PljackaZlato[playerid]);
			Fusion_KillTimer(PljackanjeZlatareTimer[playerid]);
			SCM(playerid, NARACRVENA, "Morate preziveti 2 minuta da bi dobili zlato u ruke.");
			VremeZaZlato[playerid] = 120;
			PostaviWanted(playerid, "Pljacka Zlatare", "Nepoznati", 6);
			ZlataraUToku = false;

			ServerInfo[Zlato] -= PljackaZlato[playerid];
				SaveServerStats();
				new zlatostring[256];
			format(zlatostring, sizeof(zlatostring), ""col_white"Trenutno u sefu ima "col_server"%dg "col_white"zlata\n"col_white"Da opljackate zlataru kucajte\n"col_server"[/pljackajzlataru]", ServerInfo[Zlato]);
			UpdateDynamic3DTextLabelText(ServerInfo[ZlatoLabel], BELA, zlatostring);

			new varstring[156];
			format(varstring, sizeof(varstring), "[FG] Vesti | "col_white"Fusion Gaming zlatara je opljackana i opljackano je %dg zlata.", PljackaZlato[playerid]);
			OOCNews(0xFFA500AA, varstring);
		}
	}
	else if(ZlatoVreme[playerid] == 0) {

		format(string, sizeof(string),"~w~Opljackali ste zlataru i uzeli ~g~%dg zlata !", PljackaZlato[playerid]);
		GameTextForPlayer(playerid, string, 6000, 4);
		SendClientMessageEx(playerid, NARACRVENA, "Opljackali ste zlataru i uzeli %dg zlata !",PljackaZlato[playerid]);
		SCM(playerid, NARACRVENA, "Morate preziveti 2 minuta da bi dobili zlato u ruke.");
		Fusion_KillTimer(PljackanjeZlatareTimer[playerid]);
		ZlatoVreme[playerid] = 0;
		VremeZaZlato[playerid] = 120;
		PostaviWanted(playerid, "Pljacka Zlatare", "Nepoznati", 6);
		ZlataraUToku = false;

		ServerInfo[Zlato] -= PljackaZlato[playerid];
			SaveServerStats();
			new zlatostring[256];
		format(zlatostring, sizeof(zlatostring), ""col_white"Trenutno u sefu ima "col_server"%dg "col_white"zlata\n"col_white"Da opljackate zlataru kucajte\n"col_server"[/pljackajzlataru]", ServerInfo[Zlato]);
		UpdateDynamic3DTextLabelText(ServerInfo[ZlatoLabel], BELA, zlatostring);

		new varstring[156];
		format(varstring, sizeof(varstring), "[FG] Vesti | "col_white"Fusion Gaming zlatara je opljackana i opljackano je %dg zlata.", PljackaZlato[playerid]);
		OOCNews(0xFFA500AA, varstring);
	}
}
else {
	GameTextForPlayer(playerid, "~w~Otisli ste iz sefa!", 1000, 4) ;
	SendClientMessage(playerid, NARACRVENA, "Izasli ste iz sefa i pljacka je prekinuta.");
		Fusion_KillTimer(PljackanjeZlatareTimer[playerid]);
		ZlataraUToku = false;
	PljackaZlato[playerid] = 0;
	VremeZaZlato[playerid] = 0;
	ZlatoVreme[playerid] = 0;
	new varstring[156];
		format(varstring, sizeof(varstring), "[FG] Vesti | "col_white"Pljacka zlatare je sprecena brzom intervencijom policije.");
	OOCNews(0xFFA500AA, varstring);}
return true;}

forward PljackanjeBankice(playerid);
public PljackanjeBankice(playerid) {
new string[128];
if(IsPlayerInDynamicArea(playerid, bankSafe)) {
	if(PljackaVreme[playerid] > 0) {

		new novac = random(25)+800;
		new dobija = random(50000)+ 200000;

		if(ServerInfo[NovacBanka] >= (PljackaNovac[playerid] + novac))  {

			PljackaNovac[playerid] += novac;
			format(string, sizeof(string), "~w~Ostanite u sefu jos ~r~%d ~w~sekundi", PljackaVreme[playerid]);
			GameTextForPlayer(playerid, string, 1000, 4) ;
			PljackaVreme[playerid]--;

		}
		else if(ServerInfo[NovacBanka] < (PljackaNovac[playerid] + novac)) {
			PljackaNovac[playerid] = 0;
			PljackaNovac[playerid] = dobija;
			GameTextForPlayer(playerid, "~w~Nema vise novca u sefu!", 1000, 4) ;
			PljackaVreme[playerid] = 0;
			SendClientMessageEx(playerid, NARACRVENA, "Opljackali ste banku i uzeli ~g~%d$ !", PljackaNovac[playerid]);
			Fusion_KillTimer(PljackanjeBankeTimer[playerid]);
			SCM(playerid, NARACRVENA, "Morate preziveti 2 minuta da bi dobili novac u ruke.");
			SetPlayerAttachedObject(playerid, 2, 1550, 1, -0.008714, -0.188819, -0.026564, 159.138153, 86.558647, 0.000000, 1.005565, 0.984468, 1.014210);
			VremeZaNovac[playerid] = 120;
			PostaviWanted(playerid, "Pljacka Banke", "Nepoznati", 6);
			PljackaUToku = false;

			ServerInfo[NovacBanka] -= PljackaNovac[playerid];
				SaveServerStats();

				new novacstring[256];
			format(novacstring, sizeof(novacstring), ""col_white"Trenutno u sefu ima "col_server"%d$\n"col_white"Da opljackate banku kucajte\n"col_server"[/pljackajbanku]", ServerInfo[NovacBanka]);
			UpdateDynamic3DTextLabelText(ServerInfo[NovacLabel], BELA, novacstring);

			format(novacstring, sizeof(novacstring), ""col_white"[STANJE NOVCA]\n"col_white"Trenutno u sefu ima "col_server"%d$\n"col_white"Maksimalno moze imati "col_server"1000000$\n"col_server"Addiko Bank", ServerInfo[NovacBanka]);
			UpdateDynamic3DTextLabelText(ServerInfo[NovacLabel2], BELA, novacstring);

			new varstring[128];
			format(varstring, sizeof(varstring), "[FG] Vesti | "col_white"Addiko Banka je opljackana i opljackano je %d$.", PljackaNovac[playerid]);
			OOCNews(0xFFA500AA, varstring);
		}
	}
	else if(PljackaVreme[playerid] == 0) {
		format(string, sizeof(string),"~w~Opljackali ste banku i uzeli ~g~%d$ !", PljackaNovac[playerid]);
		GameTextForPlayer(playerid, string, 6000, 4);
		SendClientMessageEx(playerid, NARACRVENA, "Opljackali ste banku i uzeli %d$ !",PljackaNovac[playerid]);
		SCM(playerid, NARACRVENA, "Morate preziveti 2 minuta da bi dobili novac u ruke.");
		Fusion_KillTimer(PljackanjeBankeTimer[playerid]);
		PljackaVreme[playerid] = 0;
		VremeZaNovac[playerid] = 120;
		PostaviWanted(playerid, "Pljacka Banke", "Nepoznati", 6);
		PljackaUToku = false;

		new varstring[128];
		format(varstring, sizeof(varstring), "[FG] Vesti | "col_white"Addiko Banka je opljackana i opljackano je %d$.", PljackaNovac[playerid]);
		OOCNews(0xFFA500AA, varstring);
	}
}
else {
	GameTextForPlayer(playerid, "~w~Otisli ste iz sefa!", 1000, 4) ;
	PljackaVreme[playerid] = 0;
	SendClientMessage(playerid, NARACRVENA, "Izasli ste iz sefa i pljacka je prekinuta.");
		Fusion_KillTimer(PljackanjeBankeTimer[playerid]);
		PljackaUToku = false;
		PljackaNovac[playerid] = 0;
	VremeZaNovac[playerid] = 0;
	PljackaVreme[playerid] = 0;
		new varstring[128];
		format(varstring, sizeof(varstring), "[FG] Vesti | "col_white"Pljacka Addiko Banke je sprecena brzom intervencijom policije.");
	OOCNews(0xFFA500AA, varstring);}
return true;}

forward hakedovanje(playerid);
public hakedovanje(playerid) {
if(IsPlayerInRangeOfPoint(playerid, 5, -147.8291, 923.9542, -28.1585)) {

	new rand = random(50);
	if(rand == 14) {
		SCM(playerid, NARACRVENA, "Vas upad u sistem je otkriven.");
		PostaviWanted(playerid, "Pokusaj pljacke banke", "Nepoznati", 3);
		Fusion_KillTimer(HakovanjeTimer[playerid]);
		return true;
	}

	SetPlayerCameraPos(playerid, -144.8772, 928.2623, -25.2140);
	SetPlayerCameraLookAt(playerid, -145.3295, 927.3721, -25.7590);

	PokusajiHakedovanja[playerid]++;
	if(PokusajiHakedovanja[playerid] == 1) HakovanjeTimer[playerid] = SetTimerEx("hakedovanje", 500, false, "d", playerid), SCM(playerid, -1, "[p21puojhb6pn321[j0d8asud-021nh31-sa-d-128hjn=a");
	else if(PokusajiHakedovanja[playerid] == 2) HakovanjeTimer[playerid] = SetTimerEx("hakedovanje", 500, false, "d", playerid), SCM(playerid, -1, "p[i1j=2ijkdlasmj093_013km-=0uasj2=3imuidsja2es2");
	else if(PokusajiHakedovanja[playerid] == 3) HakovanjeTimer[playerid] = SetTimerEx("hakedovanje", 500, false, "d", playerid), SCM(playerid, -1, "[kmivjmb-k23bki23basdb74qa4d6541aba6569b4asd13b");
	else if(PokusajiHakedovanja[playerid] == 4) HakovanjeTimer[playerid] = SetTimerEx("hakedovanje", 500, false, "d", playerid), SCM(playerid, -1, "adw2as5dw98e7471sd521sa6d52w87e9wq3dsae21xndrjs");
	else if(PokusajiHakedovanja[playerid] == 5) HakovanjeTimer[playerid] = SetTimerEx("hakedovanje", 500, false, "d", playerid), SCM(playerid, -1, "xxxx____--------x!24414!@@SSSSSSSSSSSSSSAbvcasx");
	else if(PokusajiHakedovanja[playerid] == 6) HakovanjeTimer[playerid] = SetTimerEx("hakedovanje", 500, false, "d", playerid), SCM(playerid, -1, "[p21puosGGGGGGGSAZBSSAWQWWW_______@@@@!$$$$$$$S");
	else if(PokusajiHakedovanja[playerid] == 7) HakovanjeTimer[playerid] = SetTimerEx("hakedovanje", 500, false, "d", playerid), SCM(playerid, -1, "[p21mzxkcbnczxnbjzmxncbzxjczzzzzzzzzxc237df6665");
	else if(PokusajiHakedovanja[playerid] == 8) HakovanjeTimer[playerid] = SetTimerEx("hakedovanje", 500, false, "d", playerid), SCM(playerid, -1, "dsss313sd23&**!@*&Y^!MKSJUAhnk1o3jki89jnnawjuhi");
	else if(PokusajiHakedovanja[playerid] == 9) HakovanjeTimer[playerid] = SetTimerEx("hakedovanje", 500, false, "d", playerid), SCM(playerid, -1, "[p21puojhb6pn321[j0d8asud-021nh31-sa-d-128hjn=a");
	else if(PokusajiHakedovanja[playerid] == 10) HakovanjeTimer[playerid] = SetTimerEx("hakedovanje", 500, false, "d", playerid), SCM(playerid, -1, "p[i1j=2ijkdlasmj093_013km-=0uasj2=3imuidsja2es2");
	else if(PokusajiHakedovanja[playerid] == 11) HakovanjeTimer[playerid] = SetTimerEx("hakedovanje", 500, false, "d", playerid), SCM(playerid, -1, "[kmivjmb-k23bki23basdb74qa4d6541aba6569b4asd13b");
	else if(PokusajiHakedovanja[playerid] == 12) HakovanjeTimer[playerid] = SetTimerEx("hakedovanje", 500, false, "d", playerid), SCM(playerid, -1, "xxxx____--------x!24414!@@SSSSSSSSSSSSSSAbvcasx");
	else if(PokusajiHakedovanja[playerid] == 13) HakovanjeTimer[playerid] = SetTimerEx("hakedovanje", 500, false, "d", playerid), SCM(playerid, -1, "[p21puosGGGGGGGSAZBSSAWQWWW_______@@@@!$$$$$$$S");
	else if(PokusajiHakedovanja[playerid] == 14) HakovanjeTimer[playerid] = SetTimerEx("hakedovanje", 500, false, "d", playerid), SCM(playerid, -1, "[p21mzxkcbnczxnbjzmxncbzxjczzzzzzzzzxc237df6665");
	else if(PokusajiHakedovanja[playerid] == 15) {
		new string[32];
		new randnumber = 100000 + random(461) + random(789999);
		format(string, sizeof(string), "k!nc%dv7$g@", randnumber);
		strmid(LozinkaBanke, string, 0, strlen(string), 32);
		SendClientMessageEx(playerid, NARACRVENA, "Hakovali ste lozinku: "col_white"%s", string);
		SCM(playerid, NARACRVENA, "Imate 10 sekundi da je unesete dok se ne resetuje(/unesilozinku).");
		HakovanjeTimer[playerid] = SetTimerEx("hakedovanje", 10000, false, "d", playerid);
	}
	else if(PokusajiHakedovanja[playerid] == 16) {
		new string[32];
		new randnumber = 100000 + random(461) + random(789999);
		format(string, sizeof(string), "k!nc%dv7$g@", randnumber);
		strmid(LozinkaBanke, string, 0, strlen(string), 32);
		PokusajiHakedovanja[playerid] = 0;
		SCM(playerid, NARACRVENA, "Lozinka je promenjena niste uspeli da hakujete.");
		SCM(playerid, NARACRVENA, "Laptop pocinje ponovni proces.");
		HakovanjeTimer[playerid] = SetTimerEx("hakedovanje", 1000, false, "d", playerid);
	}
}
else {
	SCM(playerid, NARACRVENA, "Pomerio si se od sefa i hakovanje je zaustavljeno.");
	
	SetCameraBehindPlayer(playerid);

	PostaviWanted(playerid, "Pokusaj pljacke banke", "Nepoznati", 3);

	Fusion_KillTimer(HakovanjeTimer[playerid]);}
return true;}

forward PukoDinamit();
public PukoDinamit() {
if(SekundDinamita == 0) {
	DestroyObject(DinamitObjekt);
	CreateExplosion(-150.0243, 924.6457, -15.4609, 7, 4);
	Delete3DTextLabel(Dinamit3D);
	SekundDinamita = 10;
	VrataBankeSrusena = true;
	DestroyDynamicObject(VrataSefaBanke);
	VrataSefaBanke = CreateDynamicObject(1495, -151.0165, 933.4402, -18.8172,   -16.0200, -24.7400, 4.9200);
	return true;}
SekundDinamita--;
SetTimer("PukoDinamit", 1000, false);
Delete3DTextLabel(Dinamit3D);
new string[128];
format(string, sizeof(string), ""col_red"Eksplozija dinamita\nPomerite se od dinamita\n"col_white"%d", SekundDinamita);
Dinamit3D = Create3DTextLabel(string, BELA, -150.0243, 924.6457, -15.4609, 30.0, -1, 0);
return true;}

forward BusenjeSefa();
public BusenjeSefa() {
if(SekundBusenja == 0) {
	Delete3DTextLabel(Busenje3D);
//	    SekundBusenja = 15;
	SefBankeOtvoren = true;
	for(new i = 0; i < sizeof(busilicam); i++){DestroyDynamicObject(busilicam[i]);}
		for(new i = 0; i < sizeof(busilica); i++){DestroyDynamicObject(busilica[i]);}
	DestroyDynamicObject(SefBanke);

	SefBanke = CreateDynamicObject(2634, -146.84444, 902.36841, -27.49500,   0.00000, 0.00000, -48.72000);
//		UnistiBusilicu();
	return true;}
SekundBusenja--;
SetTimer("BusenjeSefa", 1000, false);
Delete3DTextLabel(Busenje3D);
new string[128];
format(string, sizeof(string), ""col_red"Busenje sefa\nPreostalo sekundi do kraja\n"col_white"%d ", SekundBusenja);
Busenje3D = Create3DTextLabel(string, BELA, -146.44455, 904.43976, -28.54049, 30.0, -1, 0);
return true;}

forward Fusion_CreateVehicle(scriptid, tip, orga, posao, firma, modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay);
public Fusion_CreateVehicle(scriptid, tip, orga, posao, firma, modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay) {

if(orga == 0) orga = -1;
if(posao == 0) posao = -1;
if(firma == 0) firma = -1;
new idKreiranog;
if(modelid == 538)
{
	idKreiranog = AddStaticVehicleEx(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay);}
else
{
	idKreiranog = CreateVehicle(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay);}

ScriptIDVozila[idKreiranog] = scriptid;
TipVozila[idKreiranog] = tip;
OrgaVozila[idKreiranog] = orga;
PosaoVozila[idKreiranog] = posao;
PumpaVozilo[idKreiranog] = firma;

BusyVehicle[idKreiranog] = -1;

if(idKreiranog > MaxBrojKreiranih)
{
	new varstring[96];
	format(varstring, sizeof(varstring), "[COS]: LIMIT VOZILA JE SKORO DOSEGNUT %d/%d | ISKLJUCITE KREIRANJE VOZILA !!!!", idKreiranog, MaxBrojKreiranih);
	AdminPoruka(SVETLOCRVENA, varstring);

	print("LIMIT VOZILA JE SKORO DOSEGNUT ISKLJUCITE KREIRANJE VOZILA!");}
return idKreiranog;}
forward Fusion_DestroyVehicle(vehicleid);
public Fusion_DestroyVehicle(vehicleid) {

if(vehicleid != -1) {

	if(ScriptIDVozila[vehicleid] != -1) {

		if(VehicleInfo[ScriptIDVozila[vehicleid]][Validv3DText]) {

			VehicleInfo[ScriptIDVozila[vehicleid]][Validv3DText] = false;
			Delete3DTextLabel(VehicleInfo[ScriptIDVozila[vehicleid]][v3DText]);

		}
	}


	if(Neon[vehicleid] == 1) {
		Neon[vehicleid] = 0;
		DestroyDynamicObject(NeonObject1[vehicleid]);
		DestroyDynamicObject(NeonObject2[vehicleid]);
	}

	ScriptIDVozila[vehicleid] = -1;
	TipVozila[vehicleid] = -1;
	PumpaVozilo[vehicleid] = -1;
	OrgaVozila[vehicleid] = -1;
	PosaoVozila[vehicleid] = -1;}

if(DestroyVehicle(vehicleid))
{
	return true;}
else return -1;}

//------------------------------------------------------------------------------
stock CreateBanFile(playerid, reason[], admin[]) {

new banfile[80];
format(banfile, sizeof(banfile), FILE_BAN, ImeIgraca(playerid));
new File:ban = fopen(banfile, io_write);
new var[64];
format(var, 64, "Admin=%s\n", admin);
fwrite(ban, var);
new var1[128];
format(var1, 128,"Razlog=%s\n", reason);
fwrite(ban, var1);
fclose(ban);

}
GetCheatType(code) // - by Vasic
{
new cheat[40] = "Cheating";
switch(code) {
	case 0: cheat = "AirBreak - Onfoot";
	case 1: cheat = "AirBreak - In Vehicle";
	case 2: cheat = "Teleporting - Onfoot";
	case 3: cheat = "Teleporting - In Vehicle";
	case 4: cheat = "Teleporting - Into/Between Vehicles";
	case 5: cheat = "Teleporting - Vehicle to Player";
	case 6: cheat = "Teleporting - Pickups";
	case 7: cheat = "Fly Hack - Onfoot";
	case 8: cheat = "Fly Hack - In Vehicle";
	case 9: cheat = "Speed Hack - Onfoot";
	case 10: cheat = "Speed Hack - In Vehicle";
	case 11: cheat = "Repair Vehicle";
	case 12: cheat = "Health Hack";
	case 13: cheat = "Armour Hack";
	case 14: cheat = "Money Hack";
	case 15: cheat = "Weapon Hack";
	case 16: cheat = "Ammo Hack - Add";
	case 17: cheat = "Ammo Hack - Infinite";
	case 18: cheat = "Special Actions Hack";
	case 19: cheat = "GodMode - Onfoot";
	case 20: cheat = "GodMode - Vehicle";
	case 21: cheat = "Invisible Hack";
	case 22: cheat = "Lagcomp-Spoof";
	case 23: cheat = "Tuning Hack";
	case 24: cheat = "Parkour mod";
	case 25: cheat = "Quick Turn";
	case 26: cheat = "Rapid Fire";
	case 27: cheat = "Fake Spawn";
	case 28: cheat = "Fake Kill";
	case 29: cheat = "Pro Aim";
	case 30: cheat = "CJ Run";
	case 31: cheat = "Car Shot";
	case 32: cheat = "Car Jack";
	case 33: cheat = "Unfreeze Cheat";
	case 34: cheat = "AFK Ghost";
	case 35: cheat = "Full Aiming";
	case 36: cheat = "Fake NPC";
	case 37: cheat = "Reconnect";
	case 38: cheat = "Visok Ping";
	case 39: cheat = "Dialog Hack";
	case 40: cheat = "Multi-connect";
	case 41: cheat = "Invalid version";
	case 42: cheat = "RCON Brute Force";
	case 43: cheat = "Tuning Crasher";
	case 44: cheat = "Invalid Seat Crasher";
	case 45: cheat = "Dialog Crasher";
	case 46: cheat = "Attached Object Crasher";
	case 47: cheat = "Weapon Crasher";
	case 48: cheat = "Connection flood in one slot";
	case 49: cheat = "Anti-callback functions flood";
	case 50: cheat = "Anti-flood by Seat Changing";
	case 51: cheat = "Anti-DoS";
	case 52: cheat = "Anti-NOPs";}
return cheat;}
forward ResetACVar(playerid);
public ResetACVar(playerid) {
TeleportNexAc[playerid] = false;
return 1;}
forward OnCheatDetected(playerid, ip_address[], type, code);
public OnCheatDetected(playerid, ip_address[], type, code)
{
new varstring[156];
if(type) BlockIpAddress(ip_address, 0);
else
{
	switch(code)
	{
		case 2, 3, 4: {
			if(TeleportNexAc[playerid] == true)
			{
				TeleportNexAc[playerid] = false;
				return 1;
			}
			else {
				ClearChat(playerid, 128);
				new strtmp[128];
				format(strtmp, sizeof strtmp, KICK_MSG, GetCheatType(code));
				SendClientMessage(playerid, -1, strtmp);
				SendErrorMessage(playerid, "Admini su obavesteni i ovaj pokusaj koriscenja cheata je zabelezen.");
				SendErrorMessage(playerid, "Ukoliko smatrate da je ovo greska, obratite se vlasniku sa screenshotom.");
				format(varstring, sizeof(varstring), "~r~(AC) - ~w~%s je kikovan zbog sumnje na cheat - ~r~%s.", ImeIgraca(playerid), GetCheatType(code));
				SendAltChatMessage(varstring);	
			}
		}
		case 5, 6, 14, 21, 23, 27, 32, 52: return 1;
		case 40: SendClientMessage(playerid, -1, MAX_CONNECTS_MSG);
		case 41: SendClientMessage(playerid, -1, UNKNOWN_CLIENT_MSG);
		default:
		{
			ClearChat(playerid, 128);
			new strtmp[128];
			format(strtmp, sizeof strtmp, KICK_MSG, GetCheatType(code));
			SendClientMessage(playerid, -1, strtmp);
			SendErrorMessage(playerid, "Admini su obavesteni i ovaj pokusaj koriscenja cheata je zabelezen.");
			SendErrorMessage(playerid, "Ukoliko smatrate da je ovo greska, obratite se vlasniku sa screenshotom.");
			format(varstring, sizeof(varstring), "~r~(AC) - ~w~%s je kikovan zbog sumnje na cheat - ~r~%s.", ImeIgraca(playerid), GetCheatType(code));
			SendAltChatMessage(varstring);	
		}
	}
	new playersip[56];
	GetPlayerIp(playerid,playersip,sizeof(playersip));
	new string[128];
	format(string, sizeof(string), "Igrac: %s | IP: %s | Cheat: %s", ImeIgraca(playerid), playersip, GetCheatType(code));
	LogSave("Ostalo/Cheaters.log", string);
	AntiCheatKickWithDesync(playerid, code);
	//Fusion_Kick(playerid);}
return 1;}
forward OnPlayerCheat(playerid, type, source, source2);
public OnPlayerCheat(playerid, type, source, source2) {
new varstring[256];
switch(type) {
	case DETECT_WEAPON_HACK: {
		if(antiCheatSS[antiWeaponH] == true) {
			switch(antiCheatSS[WeaponHRezimRada]) {
				case AC_ADMINPORUKA: {
					format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Oruzje || %s[ID: %d] | %s: !", ImeIgraca(playerid), playerid, WeapNames[antiCheatCS[playerid][TakenWeapon]]);
					AdminPoruka(ANTICHEAT, varstring);

					ResetAllWeapons(playerid);
				}
				case AC_KICK: {
					new playersip[56];
					GetPlayerIp(playerid,playersip,sizeof(playersip));
					new string[128], strtmp[128];
					format(string, sizeof(string), "Igrac: %s | IP: %s | Cheat: Weapon Hack", ImeIgraca(playerid), playersip);
					LogSave("Ostalo/Cheaters.log", string);
					Kickovanje(playerid, "{af001d][ FG:RPG ] : {FFFFFF]Kikovani ste sa servera zbog koriscenja cheata. (Weapon Hack)");
					SendClientMessage(playerid, -1, strtmp);
					SendErrorMessage(playerid, "Admini su obavesteni i ovaj pokusaj koriscenja cheata je zabelezen.");
					SendErrorMessage(playerid, "Ukoliko smatrate da je ovo greska, obratite se vlasniku sa screenshotom.");
					format(varstring, sizeof(varstring), "~r~(AC) - ~w~%s je kikovan zbog sumnje na cheat - ~r~Weapon Hack.", ImeIgraca(playerid));
					SendAltChatMessage(varstring);	
				}
				case AC_BAN: {
					ResetAllWeapons(playerid);
					antiCheatCS[playerid][WeaponHack]++;
					if(antiCheatCS[playerid][WeaponHack] >= 3) {
						format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s je banovan sa servera. Razlog: "col_white"Weapon hack", ImeIgraca(playerid));
						AdminPoruka(SVETLOCRVENA, varstring);

						CreateBanFile(playerid, "Weapon Hack", "AntiCheat");

						Kickovanje(playerid, "{af001d][ FG:RPG ] : {FFFFFF]Banovani ste sa servera zbog koriscenja cheata. (Weapon Hack)");
					}
				}
			}
		}
	}
	case DETECT_AMMO_HACK: {
		if(antiCheatSS[antiWeaponH] == true) {
			switch(antiCheatSS[WeaponHRezimRada]) {
				case AC_ADMINPORUKA: {

					format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Municija || %s[ID: %d] | %s: %d | Max moze imati: %d!", ImeIgraca(playerid), playerid, WeapNames[antiCheatCS[playerid][TakenWeapon}}, source, source2);
					AdminPoruka(ANTICHEAT, varstring);

					ResetAllWeapons(playerid);
				}
				case AC_KICK: {

					format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s je kickovan sa servera. Razlog: "col_white"Ammo hack", ImeIgraca(playerid));
					AdminPoruka(SVETLOCRVENA, varstring);
					Kickovanje(playerid, "{af001d][ FG:RPG ] : {FFFFFF]Kikovani ste sa servera zbog koriscenja cheata. (Ammo Hack)");

				}
				case AC_BAN: {
					ResetAllWeapons(playerid);
					antiCheatCS[playerid][WeaponHack]++;
					if(antiCheatCS[playerid][WeaponHack] >= 3) {
						format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s je banovan sa servera. Razlog: "col_white"Ammo hack", ImeIgraca(playerid));
						AdminPoruka(SVETLOCRVENA, varstring);

						CreateBanFile(playerid, "Ammo Hack", "AntiCheat");

						Kickovanje(playerid, "{af001d][ FG:RPG ] : {FFFFFF]Banovani ste sa servera zbog koriscenja cheata. (Ammo Hack)");
					}
				}
			}
		}
	}
	case DETECT_JETPACK_HACK: {
		if(antiCheatSS[antiJetPackH] == true) {
			switch(antiCheatSS[JetPackHRezimRada]) {
				case AC_ADMINPORUKA: {

					format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Moguc JetPack hack || %s[ID: %d] | Koristi /spec!!!", ImeIgraca(playerid), playerid);
					AdminPoruka(ANTICHEAT, varstring);

					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				}
				case AC_KICK: {

					new playersip[56];
					GetPlayerIp(playerid,playersip,sizeof(playersip));
					new string[256];
					format(string, sizeof(string), "Igrac: %s | IP: %s | Cheat: JetPack Hack", ImeIgraca(playerid), playersip);
					LogSave("Ostalo/Cheaters.log", string);
					ClearChat(playerid, 128);
					SendClientMessage(playerid, -1, " {af001d][ FG:RPG ] : {FFFFFF]Kikovani ste sa servera zbog koriscenja cheata. (JetPack Hack)");
					SendErrorMessage(playerid, "Admini su obavesteni i ovaj pokusaj koriscenja cheata je zabelezen.");
					SendErrorMessage(playerid, "Ukoliko smatrate da je ovo greska, obratite se vlasniku sa screenshotom.");
					format(varstring, sizeof(varstring), "~r~(AC) - ~w~%s je kikovan zbog sumnje na cheat - ~r~JetPack Hack.", ImeIgraca(playerid));
					SendAltChatMessage(varstring);	
					Fusion_Kick(playerid);
				}
				case AC_BAN: {

					format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s je banovan sa servera. Razlog: "col_white"JetPack hack", ImeIgraca(playerid));
					AdminPoruka(SVETLOCRVENA, varstring);

					CreateBanFile(playerid, "JetPack Hack", "AntiCheat");

					Kickovanje(playerid, "{af001d][ FG:RPG ] : {FFFFFF]Kikovani ste sa servera zbog koriscenja cheata. (JetPack Hack)");
				}
			}
		}
	}
}
return 1;}
//------------------------------------------------------------------------------
#define GetVehicleNameEx(%0)      						   ImeVozila[(%0) - 400]
getVehicleName(vehicle) {
new vehName[20] = "A Hotring Racer";

if(vehicle == -1 || vehicle == 0){
	format(vehName, sizeof(vehName), "%s", "Nema Vozila");}
else if(vehicle != -1) {
	new vFile[50];
	format(vFile, sizeof(vFile), V_FILE, vehicle);
	if(fexist(vFile)) {

		if(VehicleInfo[vehicle][vModel] >= 400 && VehicleInfo[vehicle][vModel] <= 611) {

			format(vehName, sizeof(vehName), "%s", GetVehicleNameEx(VehicleInfo[vehicle][vModel]));
		}
		else format(vehName, sizeof(vehName), "%s", "Nema Vozila");
	}
	else if(!fexist(vFile)) {
		format(vehName, sizeof(vehName), "%s", "Nema Vozila");
	}
}

return vehName;}
//------------------------------------------------------------------------------
stock GetMoveDirectionFromKeys(ud, lr) {
new direction = 0;

if(lr < 0)
{
	if(ud < 0) 		direction = MOVE_FORWARD_LEFT;
	else if(ud > 0) direction = MOVE_BACK_LEFT;
	else            direction = MOVE_LEFT;}
else if(lr > 0)
{
	if(ud < 0)      direction = MOVE_FORWARD_RIGHT;
	else if(ud > 0) direction = MOVE_BACK_RIGHT;
	else			direction = MOVE_RIGHT;}
else if(ud < 0) 	direction = MOVE_FORWARD;
else if(ud > 0) 	direction = MOVE_BACK;

return direction;}

stock MoveCamera(playerid) {
new Float:FV[3], Float:CP[3];
GetPlayerCameraPos(playerid, CP[0], CP[1], CP[2]);
GetPlayerCameraFrontVector(playerid, FV[0], FV[1], FV[2]);
if(flymodecamera[playerid][accelmul] <= 1) flymodecamera[playerid][accelmul] += ACCEL_RATE;
new Float:speed = MOVE_SPEED * flymodecamera[playerid][accelmul];
new Float:Xa, Float:Ya, Float:Za;
GetNextCameraPosition(flymodecamera[playerid][mode], CP, FV, Xa, Ya, Za);
MovePlayerObject(playerid, flymodecamera[playerid][flyobject], Xa, Ya, Za, speed);
flymodecamera[playerid][lastmove] = GetTickCount();
return 1;}

stock GetNextCameraPosition(move_mode, Float:CP[3], Float:FV[3], &Float:Xa, &Float:Ya, &Float:Za) {
#define OFFSET_X (FV[0]*6000.0)
#define OFFSET_Y (FV[1]*6000.0)
#define OFFSET_Z (FV[2]*6000.0)
switch(move_mode)
{
	case MOVE_FORWARD:
	{
		Xa = CP[0]+OFFSET_X;
		Ya = CP[1]+OFFSET_Y;
		Za = CP[2]+OFFSET_Z;
	}
	case MOVE_BACK:
	{
		Xa = CP[0]-OFFSET_X;
		Ya = CP[1]-OFFSET_Y;
		Za = CP[2]-OFFSET_Z;
	}
	case MOVE_LEFT:
	{
		Xa = CP[0]-OFFSET_Y;
		Ya = CP[1]+OFFSET_X;
		Za = CP[2];
	}
	case MOVE_RIGHT:
	{
		Xa = CP[0]+OFFSET_Y;
		Ya = CP[1]-OFFSET_X;
		Za = CP[2];
	}
	case MOVE_BACK_LEFT:
	{
		Xa = CP[0]+(-OFFSET_X - OFFSET_Y);
			Ya = CP[1]+(-OFFSET_Y + OFFSET_X);
		Za = CP[2]-OFFSET_Z;
	}
	case MOVE_BACK_RIGHT:
	{
		Xa = CP[0]+(-OFFSET_X + OFFSET_Y);
			Ya = CP[1]+(-OFFSET_Y - OFFSET_X);
		Za = CP[2]-OFFSET_Z;
	}
	case MOVE_FORWARD_LEFT:
	{
		Xa = CP[0]+(OFFSET_X  - OFFSET_Y);
		Ya = CP[1]+(OFFSET_Y  + OFFSET_X);
		Za = CP[2]+OFFSET_Z;
	}
	case MOVE_FORWARD_RIGHT:
	{
		Xa = CP[0]+(OFFSET_X  + OFFSET_Y);
		Ya = CP[1]+(OFFSET_Y  - OFFSET_X);
		Za = CP[2]+OFFSET_Z;
	}
}
}
stock CancelFlyMode(playerid) {
FlyMode[playerid] = false;
CancelEdit(playerid);
ac_TogglePlayerSpectating(playerid, false);
DestroyPlayerObject(playerid, flymodecamera[playerid][flyobject]);
flymodecamera[playerid][cameramode] = false;
return 1;}

forward FlyMode1(playerid);
public FlyMode1(playerid) {
FlyModeAh(playerid);}

stock FlyModeAh(playerid) {
new Float:X, Float:Y, Float:Z;
GetPlayerPos(playerid, X, Y, Z);
ac_TogglePlayerSpectating(playerid, true);

flymodecamera[playerid][flyobject] = CreatePlayerObject(playerid, 19300, X, Y, Z, 0.0, 0.0, 0.0);
AttachCameraToPlayerObject(playerid, flymodecamera[playerid][flyobject]);
FlyMode[playerid] = true;
flymodecamera[playerid][cameramode] = true;
return 1;}
//------------------------------------------------------------------------------
forward RemoveBadge(playerid);
public RemoveBadge(playerid) {
RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BADGE);}
//------------------------------------------------------------------------------
forward PilotUtovar(playerid);
public PilotUtovar(playerid) {
Fusion_KillTimer(PilotTimer[playerid]);
TogglePlayerControllable(playerid, true);
GameTextForPlayer(playerid, "~w~Nova lokacija postavljena", 3000, 5);
return 1;}
//------------------------------------------------------------------------------
stock PreloadAnimations(playerid)
{
for (new i = 0; i < sizeof(g_aPreloadLibs); i ++) {
	ApplyAnimation(playerid, g_aPreloadLibs[i], "null", 4.0, 0, 0, 0, 0, 0, 1);}
return 1;}
//------------------------------------------------------------------------------
stock Fusion_RepairVehicle(playerid, vehicleid) {
EnableAntiCheatForPlayer(playerid, 11, 0);
if(antiCheatVS[vehicleid][VehCheck] == 1) antiCheatVS[vehicleid][VehCheck] = 2;
if(playerid != -1) {

	antiCheatCS[playerid][CPSCount] = 0;
	antiCheatCS[playerid][CPSTick] = 0;
	antiCheatCS[playerid][VehRepairTime] = 3;}
RepairVehicle(vehicleid);
GetVehicleHealth(vehicleid, antiCheatVS[vehicleid][VehTrueHealth]);
if(antiCheatVS[vehicleid][VehCheck] == 2) antiCheatVS[vehicleid][VehCheck] = 1;
return true;}
//------------------------------------------------------------------------------
stock Fusion_SetPlayerCheckpoint(playerid, Float:x, Float:y, Float:z, Float:size) {
if(PlayerCPShow[playerid] == true) {
	DisablePlayerRaceCheckpoint(playerid);
	PlayerCPShow[playerid] = false;}
PlayerCPShow[playerid] = true;
return SetPlayerRaceCheckpoint(playerid, 0, Float:x, Float:y, Float:z, 0, 0, 0, Float:size);}

stock Fusion_DisablePlayerCheckpoint(playerid) {
if(PlayerCPShow[playerid] == true) {

		DisablePlayerRaceCheckpoint(playerid);
	PlayerCPShow[playerid] = false;}
}
//------------------------------------------------------------------------------
SetSexSkin(playerid) {

new sexskin;

if(PlayerInfo[playerid][xPol] == 1) { sexskin = MaleSkinIDs[0][0];}
else if(PlayerInfo[playerid][xPol] == 2) { sexskin = FemaleSkinIDs[0][0];}
else { sexskin = MaleSkinIDs[0][0];}

return sexskin;}
//------------------------------------------------------------------------------
SetRandomSpawn(playerid) {

new randomspawn;

if(playerid % 2 == 0) { randomspawn = SPAWN_OBICAN_LS_1;}
else { randomspawn = SPAWN_OBICAN_LS_2;}

return randomspawn;}
//------------------------------------------------------------------------------
stock WARPoruka(w, color, string[]) {
foreach(new i : Player) {
	if(WARPInfo[i][WARIgrac] == w) {
		SCM(i, color, string); } }
}
//------------------------------------------------------------------------------
stock DMZPoruka(color, string[]) {
foreach(new i : Player) {
	if(NaDmEventu[i] == true) {
		SCM(i, color, string); } }
}
//==============================================================================
ResetTuningInfo(playerid) {
TPInfo[playerid][tID] = -1;
TPInfo[playerid][tType] = -1;
TPInfo[playerid][tPaintjob] = false;
TPInfo[playerid][PJColor] = -1;
TPInfo[playerid][PJColor] = -1;}
//------------------------------------------------------------------------------

stock TuningTDControl(playerid, bool:show) {

if(show == true) {

	TuningBuy[playerid][0] = CreatePlayerTextDraw(playerid, 425.125000, 338.666687, "usebox");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][0], 0.000000, 8.627778);
	PlayerTextDrawTextSize(playerid, TuningBuy[playerid][0], 216.125000, 0.000000);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][0], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, TuningBuy[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, TuningBuy[playerid][0], 102);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][0], 0);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][0], 0);

	TuningBuy[playerid][1] = CreatePlayerTextDraw(playerid, 319.375000, 337.749847, "Hydraulics");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][1], 0.386249, 1.156664);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][1], 2);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][1], 51);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, TuningBuy[playerid][1], false);

	TuningBuy[playerid][2] = CreatePlayerTextDraw(playerid, 198.375000, 361.583282, "-");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][2], 18.981874, 0.514999);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][2], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][2], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][2], 51);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][2], 1);

	TuningBuy[playerid][3] = CreatePlayerTextDraw(playerid, 222.500000, 352.916656, "Left `Chrome Flames` Sideskirt");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][3], 0.244999, 1.092499);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][3], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][3], 51);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][3], 1);

	TuningBuy[playerid][4] = CreatePlayerTextDraw(playerid, 222.500000, 365.000000, "Sultan");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][4], 0.244999, 1.092499);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][4], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][4], 51);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][4], 1);

	TuningBuy[playerid][5] = CreatePlayerTextDraw(playerid, 215.125000, 372.999877, "-");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][5], 6.743125, 0.444999);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][5], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][5], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][5], 51);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][5], 1);

	TuningBuy[playerid][6] = CreatePlayerTextDraw(playerid, 206.750000, 347.166564, "-");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][6], 18.981874, 0.514999);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][6], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][6], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][6], 1);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][6], 51);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][6], 1);

	TuningBuy[playerid][7] = CreatePlayerTextDraw(playerid, 385.000000, 381.500000, "ld_beat:right");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][7], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, TuningBuy[playerid][7], 27.500000, 13.416657);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][7], 2);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][7], -1);
	PlayerTextDrawUseBox(playerid, TuningBuy[playerid][7], true);
	PlayerTextDrawBoxColor(playerid, TuningBuy[playerid][7], 255);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][7], 1);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][7], 51);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, TuningBuy[playerid][7], true);

	TuningBuy[playerid][8] = CreatePlayerTextDraw(playerid, 230.375000, 381.916473, "ld_beat:left");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][8], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, TuningBuy[playerid][8], 27.500000, 13.416657);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][8], 2);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][8], -1);
	PlayerTextDrawUseBox(playerid, TuningBuy[playerid][8], true);
	PlayerTextDrawBoxColor(playerid, TuningBuy[playerid][8], 255);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][8], 1);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][8], 51);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, TuningBuy[playerid][8], true);

	TuningBuy[playerid][9] = CreatePlayerTextDraw(playerid, 320.000000, 381.499938, "POSTAVI");
	PlayerTextDrawTextSize(playerid, TuningBuy[playerid][9], 23.000000, 13.000000);
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][9], 0.421249, 1.360832);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][9], 2);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][9], 1);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][9], 51);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, TuningBuy[playerid][9], true);

	TuningBuy[playerid][10] = CreatePlayerTextDraw(playerid, 200.000000, 396.416656, "-");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][10], 18.981874, 0.514999);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][10], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][10], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][10], 1);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][10], 51);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][10], 2);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][10], 1);

	TuningBuy[playerid][11] = CreatePlayerTextDraw(playerid, 225.000000, 401.916595, "Napredni VIP tuning sys by ~r~Vasic");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][11], 0.258749, 0.987497);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][11], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][11], -1);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][11], 1);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][11], 51);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][11], 2);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][11], 1);

	TuningBuy[playerid][12] = CreatePlayerTextDraw(playerid, 203.500000, 411.416839, "-");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][12], 18.981874, 0.514998);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][12], 1);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][12], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][12], 1);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][12], 51);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][12], 2);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][12], 1);

	TuningBuy[playerid][13] = CreatePlayerTextDraw(playerid, 404.500000, 337.999877, "ld_beat:cross");
	PlayerTextDrawLetterSize(playerid, TuningBuy[playerid][13], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, TuningBuy[playerid][13], 17.500000, 8.749991);
	PlayerTextDrawAlignment(playerid, TuningBuy[playerid][13], 2);
	PlayerTextDrawColor(playerid, TuningBuy[playerid][13], -1);
	PlayerTextDrawUseBox(playerid, TuningBuy[playerid][13], true);
	PlayerTextDrawBoxColor(playerid, TuningBuy[playerid][13], 255);
	PlayerTextDrawSetShadow(playerid, TuningBuy[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, TuningBuy[playerid][13], 1);
	PlayerTextDrawBackgroundColor(playerid, TuningBuy[playerid][13], 51);
	PlayerTextDrawFont(playerid, TuningBuy[playerid][13], 4);
	PlayerTextDrawSetProportional(playerid, TuningBuy[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, TuningBuy[playerid][13], true);

}
else if(show == false) {
	for(new i = 0; i < 14; i ++) {
		PlayerTextDrawDestroy(playerid, TuningBuy[playerid][i]);
		TuningBuy[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
}
}

stock KladionicaListicTDControl(playerid, bool:show) {

if(show == true) {

	fg_betTD[playerid][0] = CreatePlayerTextDraw(playerid, 525.125000, 143.250000, "usebox");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][0], 0.000000, 19.127779);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][0], 108.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, fg_betTD[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, fg_betTD[playerid][0], 102);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][0], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][0], 0);

	fg_betTD[playerid][1] = CreatePlayerTextDraw(playerid, 115.625000, 172.083236, "Pocetak tekme");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][1], 0.271249, 0.969998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][1], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][1], 1);

	fg_betTD[playerid][2] = CreatePlayerTextDraw(playerid, 110.000000, 186.083328, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][2], 413.125000, -0.583323);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][2], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][2], 4);

	fg_betTD[playerid][3] = CreatePlayerTextDraw(playerid, 110.375000, 167.833374, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][3], 412.500000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][3], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][3], 4);

	fg_betTD[playerid][4] = CreatePlayerTextDraw(playerid, 266.125000, 186.750015, "Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manches");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][4], 0.249374, 0.940831);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][4], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][4], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][4], 1);

	fg_betTD[playerid][5] = CreatePlayerTextDraw(playerid, 114.500000, 187.500045, "29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][5], 0.249374, 0.940831);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][5], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][5], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][5], 1);

	fg_betTD[playerid][6] = CreatePlayerTextDraw(playerid, 381.500000, 187.166671, "Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manches");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][6], 0.249374, 0.940831);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][6], 2);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][6], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][6], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][6], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][6], 1);

	fg_betTD[playerid][7] = CreatePlayerTextDraw(playerid, 480.625000, 187.000030, "1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.5");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][7], 0.249374, 0.940831);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][7], 2);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][7], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][7], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][7], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][7], 1);

	fg_betTD[playerid][8] = CreatePlayerTextDraw(playerid, 236.625000, 171.916595, "Domacin");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][8], 0.271249, 0.969998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][8], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][8], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][8], 1);

	fg_betTD[playerid][9] = CreatePlayerTextDraw(playerid, 362.000000, 171.166625, "GOst");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][9], 0.271249, 0.969998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][9], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][9], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][9], 1);

	fg_betTD[playerid][10] = CreatePlayerTextDraw(playerid, 453.000000, 171.583297, "Tip___Kvota");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][10], 0.271249, 0.969998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][10], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][10], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][10], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][10], 1);

	fg_betTD[playerid][11] = CreatePlayerTextDraw(playerid, 206.000000, 147.416580, "Premium Kladionica");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][11], 0.751250, 1.529998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][11], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][11], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][11], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][11], 1);

	fg_betTD[playerid][12] = CreatePlayerTextDraw(playerid, 472.625000, 297.749969, "PK");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][12], 0.751250, 1.529998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][12], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][12], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][12], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][12], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][12], 1);

	fg_betTD[playerid][13] = CreatePlayerTextDraw(playerid, 154.125000, 309.916778, "premium");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][13], 0.228749, 0.719165);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][13], 2);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][13], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][13], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][13], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][13], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][13], 1);

	fg_betTD[playerid][14] = CreatePlayerTextDraw(playerid, 208.125000, 168.583343, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][14], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][14], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][14], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][14], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][14], 4);

	fg_betTD[playerid][15] = CreatePlayerTextDraw(playerid, 322.875000, 167.833328, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][15], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][15], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][15], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][15], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][15], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][15], 4);

	fg_betTD[playerid][16] = CreatePlayerTextDraw(playerid, 439.500000, 167.083343, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][16], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][16], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][16], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][16], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][16], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][16], 4);

	fg_betTD[playerid][17] = CreatePlayerTextDraw(playerid, 475.500000, 167.500015, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][17], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][17], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][17], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][17], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][17], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][17], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][17], 4);

	fg_betTD[playerid][18] = CreatePlayerTextDraw(playerid, 111.000000, 272.333190, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][18], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][18], 412.500000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][18], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][18], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][18], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][18], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][18], 4);

	fg_betTD[playerid][19] = CreatePlayerTextDraw(playerid, 518.750000, 168.500015, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][19], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][19], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][19], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][19], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][19], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][19], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][19], 4);

	fg_betTD[playerid][20] = CreatePlayerTextDraw(playerid, 113.750000, 167.749984, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][20], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][20], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][20], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][20], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][20], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][20], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][20], 4);

	fg_betTD[playerid][21] = CreatePlayerTextDraw(playerid, 130.125000, 295.916778, "Potencijalni dobitak");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][21], 0.228749, 0.719165);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][21], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][21], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][21], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][21], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][21], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][21], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][21], 1);

	fg_betTD[playerid][22] = CreatePlayerTextDraw(playerid, 130.125000, 285.916778, "Uplata");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][22], 0.228749, 0.719165);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][22], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][22], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][22], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][22], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][22], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][22], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][22], 1);

	fg_betTD[playerid][23] = CreatePlayerTextDraw(playerid, 320.750000, 305.916625, "Status");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][23], 0.271249, 0.969998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][23], 2);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][23], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][23], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][23], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][23], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][23], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][23], 1);
	PlayerTextDrawSetSelectable(playerid, fg_betTD[playerid][23], true);

	KladListicSM[playerid][0] = CreatePlayerTextDraw(playerid, 109.500000, 196.249954, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KladListicSM[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KladListicSM[playerid][0], 413.125000, -0.583323);
	PlayerTextDrawAlignment(playerid, KladListicSM[playerid][0], 1);
	PlayerTextDrawColor(playerid, KladListicSM[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, KladListicSM[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, KladListicSM[playerid][0], 0);
	PlayerTextDrawFont(playerid, KladListicSM[playerid][0], 4);

	KladListicSM[playerid][1] = CreatePlayerTextDraw(playerid, 109.250000, 204.249938, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KladListicSM[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KladListicSM[playerid][1], 413.750000, -0.583323);
	PlayerTextDrawAlignment(playerid, KladListicSM[playerid][1], 1);
	PlayerTextDrawColor(playerid, KladListicSM[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, KladListicSM[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, KladListicSM[playerid][1], 0);
	PlayerTextDrawFont(playerid, KladListicSM[playerid][1], 4);

	KladListicSM[playerid][2] = CreatePlayerTextDraw(playerid, 109.625000, 212.833236, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KladListicSM[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KladListicSM[playerid][2], 413.125000, 0.583343);
	PlayerTextDrawAlignment(playerid, KladListicSM[playerid][2], 1);
	PlayerTextDrawColor(playerid, KladListicSM[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, KladListicSM[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, KladListicSM[playerid][2], 0);
	PlayerTextDrawFont(playerid, KladListicSM[playerid][2], 4);

	KladListicSM[playerid][3] = CreatePlayerTextDraw(playerid, 110.625000, 221.999908, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KladListicSM[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KladListicSM[playerid][3], 412.500000, 0.583343);
	PlayerTextDrawAlignment(playerid, KladListicSM[playerid][3], 1);
	PlayerTextDrawColor(playerid, KladListicSM[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, KladListicSM[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, KladListicSM[playerid][3], 0);
	PlayerTextDrawFont(playerid, KladListicSM[playerid][3], 4);

	KladListicSM[playerid][4] = CreatePlayerTextDraw(playerid, 109.750000, 229.999908, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KladListicSM[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KladListicSM[playerid][4], 413.750000, 0.583343);
	PlayerTextDrawAlignment(playerid, KladListicSM[playerid][4], 1);
	PlayerTextDrawColor(playerid, KladListicSM[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, KladListicSM[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, KladListicSM[playerid][4], 0);
	PlayerTextDrawFont(playerid, KladListicSM[playerid][4], 4);

	KladListicSM[playerid][5] = CreatePlayerTextDraw(playerid, 109.500000, 238.583175, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KladListicSM[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KladListicSM[playerid][5], 413.125000, 0.583343);
	PlayerTextDrawAlignment(playerid, KladListicSM[playerid][5], 1);
	PlayerTextDrawColor(playerid, KladListicSM[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, KladListicSM[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, KladListicSM[playerid][5], 0);
	PlayerTextDrawFont(playerid, KladListicSM[playerid][5], 4);

	KladListicSM[playerid][6] = CreatePlayerTextDraw(playerid, 110.500000, 245.999816, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KladListicSM[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KladListicSM[playerid][6], 413.125000, 0.583343);
	PlayerTextDrawAlignment(playerid, KladListicSM[playerid][6], 1);
	PlayerTextDrawColor(playerid, KladListicSM[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, KladListicSM[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, KladListicSM[playerid][6], 0);
	PlayerTextDrawFont(playerid, KladListicSM[playerid][6], 4);

	KladListicSM[playerid][7] = CreatePlayerTextDraw(playerid, 109.000000, 254.583099, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KladListicSM[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KladListicSM[playerid][7], 414.375000, -0.583323);
	PlayerTextDrawAlignment(playerid, KladListicSM[playerid][7], 1);
	PlayerTextDrawColor(playerid, KladListicSM[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, KladListicSM[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, KladListicSM[playerid][7], 0);
	PlayerTextDrawFont(playerid, KladListicSM[playerid][7], 4);

	KladListicSM[playerid][8] = CreatePlayerTextDraw(playerid, 110.625000, 263.166473, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, KladListicSM[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KladListicSM[playerid][8], 412.500000, 0.583343);
	PlayerTextDrawAlignment(playerid, KladListicSM[playerid][8], 1);
	PlayerTextDrawColor(playerid, KladListicSM[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, KladListicSM[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, KladListicSM[playerid][8], 0);
	PlayerTextDrawFont(playerid, KladListicSM[playerid][8], 4);

	new broj = 0;
	for(new i = 0; i < 10; i++) {

		if(KladionicaListic[playerid][parID][i] != -1) {
			broj++;
		}
	}

	new str[256];

	format(str, sizeof(str), "Potencijalni dobitak: ~w~%.2f$", KladionicaListic[playerid][Dobitak]);

	PlayerTextDrawSetString(playerid, fg_betTD[playerid][21], str);

	format(str, sizeof(str), "Uplata: ~w~%d$", KladionicaListic[playerid][Uplata]);

	PlayerTextDrawSetString(playerid, fg_betTD[playerid][22], str);

	if(broj == 1) {

		format(str, sizeof(str), "%s",
			bettingInfo[KladionicaListic[playerid][teamID1][0]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][4], str);

		format(str, sizeof(str), "%s",
			bettingInfo[KladionicaListic[playerid][teamID2][0]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][6], str);

		format(str, sizeof(str), "%s",
			KladionicaListic[playerid][HourPobeda]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][5], str);

		format(str, sizeof(str), "%s______%.2f",
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][0]), KladionicaListic[playerid][Kvota][0]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][7], str);
	}
	else if(broj == 2) {

		format(str, sizeof(str), "%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID1][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][1]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][4], str);

		format(str, sizeof(str), "%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID2][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][1]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][6], str);

		format(str, sizeof(str), "%s~n~%s",
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][5], str);

		format(str, sizeof(str), "%s______%.2f~n~%s______%.2f",
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][0]), KladionicaListic[playerid][Kvota][0],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][1]), KladionicaListic[playerid][Kvota][1]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][7], str);

	}
	else if(broj == 3) {

		format(str, sizeof(str), "%s~n~%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID1][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][1]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][2]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][4], str);

		format(str, sizeof(str), "%s~n~%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID2][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][1]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][2]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][6], str);

		format(str, sizeof(str), "%s~n~%s~n~%s",
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][5], str);

		format(str, sizeof(str), "%s______%.2f~n~%s______%.2f~n~%s______%.2f",
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][0]), KladionicaListic[playerid][Kvota][0],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][1]), KladionicaListic[playerid][Kvota][1],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][2]), KladionicaListic[playerid][Kvota][2]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][7], str);
	}
	else if(broj == 4) {

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID1][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][1]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][2]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][3]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][4], str);

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID2][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][1]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][2]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][3]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][6], str);

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s",
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][5], str);

		format(str, sizeof(str), "%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f",
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][0]), KladionicaListic[playerid][Kvota][0],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][1]), KladionicaListic[playerid][Kvota][1],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][2]), KladionicaListic[playerid][Kvota][2],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][3]), KladionicaListic[playerid][Kvota][3]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][7], str);
	}
	else if(broj == 5) {

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID1][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][1]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][2]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][3]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][4]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][4], str);

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID2][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][1]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][2]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][3]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][4]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][6], str);

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s",
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][5], str);

		format(str, sizeof(str), "%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f",
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][0]), KladionicaListic[playerid][Kvota][0],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][1]), KladionicaListic[playerid][Kvota][1],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][2]), KladionicaListic[playerid][Kvota][2],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][3]), KladionicaListic[playerid][Kvota][3],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][4]), KladionicaListic[playerid][Kvota][4]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][7], str);
	}
	else if(broj == 6) {

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID1][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][1]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][2]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][3]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][4]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][5]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][4], str);

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID2][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][1]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][2]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][3]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][4]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][5]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][6], str);

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][5], str);

		format(str, sizeof(str), "%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f",
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][0]), KladionicaListic[playerid][Kvota][0],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][1]), KladionicaListic[playerid][Kvota][1],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][2]), KladionicaListic[playerid][Kvota][2],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][3]), KladionicaListic[playerid][Kvota][3],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][4]), KladionicaListic[playerid][Kvota][4],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][5]), KladionicaListic[playerid][Kvota][5]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][7], str);
	}
	else if(broj == 7) {

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID1][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][1]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][2]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][3]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][4]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][5]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][6]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][4], str);

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID2][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][1]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][2]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][3]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][4]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][5]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][6]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][6], str);

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][5], str);

		format(str, sizeof(str), "%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f",
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][0]), KladionicaListic[playerid][Kvota][0],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][1]), KladionicaListic[playerid][Kvota][1],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][2]), KladionicaListic[playerid][Kvota][2],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][3]), KladionicaListic[playerid][Kvota][3],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][4]), KladionicaListic[playerid][Kvota][4],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][5]), KladionicaListic[playerid][Kvota][5],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][6]), KladionicaListic[playerid][Kvota][6]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][7], str);
	}
	else if(broj == 8) {

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID1][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][1]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][2]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][3]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][4]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][5]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][6]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][7]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][4], str);

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID2][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][1]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][2]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][3]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][4]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][5]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][6]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][7]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][6], str);

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][5], str);

		format(str, sizeof(str), "%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f",
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][0]), KladionicaListic[playerid][Kvota][0],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][1]), KladionicaListic[playerid][Kvota][1],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][2]), KladionicaListic[playerid][Kvota][2],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][3]), KladionicaListic[playerid][Kvota][3],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][4]), KladionicaListic[playerid][Kvota][4],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][5]), KladionicaListic[playerid][Kvota][5],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][6]), KladionicaListic[playerid][Kvota][6],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][7]), KladionicaListic[playerid][Kvota][7]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][7], str);
	}
	else if(broj == 9) {

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID1][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][1]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][2]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][3]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][4]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][5]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][6]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][7]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][8]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][4], str);

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID2][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][1]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][2]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][3]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][4]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][5]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][6]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][7]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][8]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][6], str);

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][5], str);

		format(str, sizeof(str), "%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f",
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][0]), KladionicaListic[playerid][Kvota][0],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][1]), KladionicaListic[playerid][Kvota][1],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][2]), KladionicaListic[playerid][Kvota][2],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][3]), KladionicaListic[playerid][Kvota][3],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][4]), KladionicaListic[playerid][Kvota][4],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][5]), KladionicaListic[playerid][Kvota][5],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][6]), KladionicaListic[playerid][Kvota][6],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][7]), KladionicaListic[playerid][Kvota][7],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][8]), KladionicaListic[playerid][Kvota][8]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][7], str);
	}
	else if(broj == 10) {

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID1][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][1]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][2]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][3]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][4]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][5]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][6]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][7]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][8]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID1][9]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][4], str);

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			bettingInfo[KladionicaListic[playerid][teamID2][0]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][1]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][2]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][3]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][4]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][5]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][6]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][7]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][8]][teamName],
			bettingInfo[KladionicaListic[playerid][teamID2][9]][teamName]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][6], str);

		format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda],
			KladionicaListic[playerid][HourPobeda]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][5], str);

		format(str, sizeof(str), "%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f",
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][0]), KladionicaListic[playerid][Kvota][0],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][1]), KladionicaListic[playerid][Kvota][1],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][2]), KladionicaListic[playerid][Kvota][2],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][3]), KladionicaListic[playerid][Kvota][3],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][4]), KladionicaListic[playerid][Kvota][4],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][5]), KladionicaListic[playerid][Kvota][5],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][6]), KladionicaListic[playerid][Kvota][6],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][7]), KladionicaListic[playerid][Kvota][7],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][8]), KladionicaListic[playerid][Kvota][8],
			UzmiTipUtakmice(KladionicaListic[playerid][keciksdva][9]), KladionicaListic[playerid][Kvota][9]);

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][7], str);
	}

	if(KladionicaListic[playerid][Uplaceno] && !KladionicaListic[playerid][Zavrseno]) {

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][23], "~g~Aktivan");
	}
	else if(KladionicaListic[playerid][Uplaceno] && KladionicaListic[playerid][Zavrseno] && KladionicaListic[playerid][Status]) {

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][23], "~g~Dobitan");
	}
	else if(KladionicaListic[playerid][Uplaceno] && KladionicaListic[playerid][Zavrseno] && !KladionicaListic[playerid][Status]) {

		PlayerTextDrawSetString(playerid, fg_betTD[playerid][23], "~r~Gubitan");
	}

	if(broj == 10) broj = 9;
	for(new i = 0; i < broj; i++) {

		PlayerTextDrawShow(playerid, KladListicSM[playerid][i]);
	}

	for(new i = 0; i < 24; i ++) {

		PlayerTextDrawShow(playerid, fg_betTD[playerid][i]);
	}
	MojListicPrikazan[playerid] = true;

}
else if(show == false) {

	for(new i = 0; i < 9; i++) {

		PlayerTextDrawHide(playerid, KladListicSM[playerid][i]);
		PlayerTextDrawDestroy(playerid, KladListicSM[playerid][i]);
		KladListicSM[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}

	for(new i = 0; i < 24; i ++) {

		PlayerTextDrawHide(playerid, fg_betTD[playerid][i]);
		PlayerTextDrawDestroy(playerid, fg_betTD[playerid][i]);
		fg_betTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}

	MojListicPrikazan[playerid] = false;}
}

stock KladionicaTDControl(playerid, bool:show) {

if(show == true) {

	fg_betTD[playerid][0] = CreatePlayerTextDraw(playerid, 525.125000, 143.250000, "usebox");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][0], 0.000000, 19.127779);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][0], 108.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, fg_betTD[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, fg_betTD[playerid][0], 102);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][0], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][0], 0);

	fg_betTD[playerid][1] = CreatePlayerTextDraw(playerid, 115.625000, 172.083236, "Vreme i datum");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][1], 0.271249, 0.969998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][1], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][1], 1);

	fg_betTD[playerid][2] = CreatePlayerTextDraw(playerid, 110.000000, 186.083328, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][2], 413.125000, -0.583323);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][2], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][2], 4);

	fg_betTD[playerid][3] = CreatePlayerTextDraw(playerid, 110.375000, 167.833374, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][3], 412.500000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][3], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][3], 4);

	fg_betTD[playerid][4] = CreatePlayerTextDraw(playerid, 266.125000, 186.750015, "Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manches");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][4], 0.249374, 0.940831);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][4], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][4], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][4], 1);

	fg_betTD[playerid][5] = CreatePlayerTextDraw(playerid, 114.500000, 187.500045, "29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][5], 0.249374, 0.940831);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][5], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][5], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][5], 1);

	fg_betTD[playerid][6] = CreatePlayerTextDraw(playerid, 381.500000, 187.166671, "Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manches");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][6], 0.249374, 0.940831);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][6], 2);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][6], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][6], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][6], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][6], 1);

	fg_betTD[playerid][7] = CreatePlayerTextDraw(playerid, 480.625000, 187.000030, "1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.5");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][7], 0.249374, 0.940831);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][7], 2);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][7], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][7], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][7], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][7], 1);

	fg_betTD[playerid][8] = CreatePlayerTextDraw(playerid, 109.500000, 196.249954, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][8], 413.125000, -0.583323);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][8], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][8], 4);

	fg_betTD[playerid][9] = CreatePlayerTextDraw(playerid, 109.250000, 204.249938, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][9], 413.750000, -0.583323);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][9], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][9], 4);

	fg_betTD[playerid][10] = CreatePlayerTextDraw(playerid, 109.625000, 212.833236, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][10], 413.125000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][10], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][10], 4);

	fg_betTD[playerid][11] = CreatePlayerTextDraw(playerid, 110.625000, 221.999908, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][11], 412.500000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][11], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][11], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][11], 4);

	fg_betTD[playerid][12] = CreatePlayerTextDraw(playerid, 109.750000, 229.999908, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][12], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][12], 413.750000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][12], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][12], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][12], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][12], 4);

	fg_betTD[playerid][13] = CreatePlayerTextDraw(playerid, 109.500000, 238.583175, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][13], 413.125000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][13], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][13], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][13], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][13], 4);

	fg_betTD[playerid][14] = CreatePlayerTextDraw(playerid, 110.500000, 245.999816, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][14], 413.125000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][14], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][14], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][14], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][14], 4);

	fg_betTD[playerid][15] = CreatePlayerTextDraw(playerid, 236.625000, 171.916595, "Domacin");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][15], 0.271249, 0.969998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][15], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][15], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][15], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][15], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][15], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][15], 1);

	fg_betTD[playerid][16] = CreatePlayerTextDraw(playerid, 109.000000, 254.583099, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][16], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][16], 414.375000, -0.583323);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][16], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][16], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][16], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][16], 4);

	fg_betTD[playerid][17] = CreatePlayerTextDraw(playerid, 110.625000, 263.166473, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][17], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][17], 412.500000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][17], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][17], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][17], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][17], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][17], 4);

	fg_betTD[playerid][18] = CreatePlayerTextDraw(playerid, 111.000000, 272.333190, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][18], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][18], 412.500000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][18], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][18], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][18], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][18], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][18], 4);

	fg_betTD[playerid][19] = CreatePlayerTextDraw(playerid, 362.000000, 171.166625, "GOst");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][19], 0.271249, 0.969998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][19], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][19], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][19], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][19], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][19], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][19], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][19], 1);

	fg_betTD[playerid][20] = CreatePlayerTextDraw(playerid, 453.000000, 171.583297, "1     x     2");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][20], 0.271249, 0.969998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][20], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][20], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][20], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][20], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][20], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][20], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][20], 1);

	fg_betTD[playerid][21] = CreatePlayerTextDraw(playerid, 206.000000, 147.416580, "Fusion Gaming Kladionica");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][21], 0.751250, 1.529998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][21], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][21], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][21], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][21], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][21], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][21], 0);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][21], 1);

	fg_betTD[playerid][22] = CreatePlayerTextDraw(playerid, 472.625000, 297.749969, "FG");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][22], 0.751250, 1.529998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][22], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][22], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][22], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][22], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][22], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][22], 0);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][22], 1);

	fg_betTD[playerid][23] = CreatePlayerTextDraw(playerid, 154.125000, 309.916778, "__www.fg-rpg.com");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][23], 0.228749, 0.719165);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][23], 2);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][23], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][23], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][23], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][23], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][23], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][23], 1);

	fg_betTD[playerid][24] = CreatePlayerTextDraw(playerid, 208.125000, 168.583343, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][24], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][24], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][24], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][24], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][24], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][24], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][24], 4);

	fg_betTD[playerid][25] = CreatePlayerTextDraw(playerid, 322.875000, 167.833328, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][25], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][25], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][25], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][25], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][25], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][25], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][25], 4);

	fg_betTD[playerid][26] = CreatePlayerTextDraw(playerid, 439.500000, 167.083343, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][26], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][26], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][26], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][26], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][26], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][26], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][26], 4);

	fg_betTD[playerid][27] = CreatePlayerTextDraw(playerid, 465.500000, 167.500015, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][27], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][27], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][27], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][27], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][27], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][27], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][27], 4);

	fg_betTD[playerid][28] = CreatePlayerTextDraw(playerid, 491.500000, 168.500015, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][28], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][28], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][28], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][28], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][28], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][28], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][28], 4);

	fg_betTD[playerid][29] = CreatePlayerTextDraw(playerid, 517.750000, 168.500015, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][29], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][29], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][29], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][29], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][29], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][29], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][29], 4);

	fg_betTD[playerid][30] = CreatePlayerTextDraw(playerid, 113.750000, 167.749984, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][30], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][30], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][30], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][30], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][30], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][30], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][30], 4);

	fg_betTD[playerid][31] = CreatePlayerTextDraw(playerid, 320.750000, 305.916625, "Uplati tiket");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][31], 0.271249, 0.969998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][31], 2);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][31], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][31], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][31], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][31], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][31], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][31], 1);
	PlayerTextDrawSetSelectable(playerid, fg_betTD[playerid][31], true);

	new str[256];

	format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
		bettingInfo[Parovi[0][parID][0]][teamName],
		bettingInfo[Parovi[1][parID][0]][teamName],
		bettingInfo[Parovi[2][parID][0]][teamName],
		bettingInfo[Parovi[3][parID][0]][teamName],
		bettingInfo[Parovi[4][parID][0]][teamName],
		bettingInfo[Parovi[5][parID][0]][teamName],
		bettingInfo[Parovi[6][parID][0]][teamName],
		bettingInfo[Parovi[7][parID][0]][teamName],
		bettingInfo[Parovi[8][parID][0]][teamName],
		bettingInfo[Parovi[9][parID][0]][teamName]);

	PlayerTextDrawSetString(playerid, fg_betTD[playerid][4], str);

	format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
		bettingInfo[Parovi[0][parID][1]][teamName],
		bettingInfo[Parovi[1][parID][1]][teamName],
		bettingInfo[Parovi[2][parID][1]][teamName],
		bettingInfo[Parovi[3][parID][1]][teamName],
		bettingInfo[Parovi[4][parID][1]][teamName],
		bettingInfo[Parovi[5][parID][1]][teamName],
		bettingInfo[Parovi[6][parID][1]][teamName],
		bettingInfo[Parovi[7][parID][1]][teamName],
		bettingInfo[Parovi[8][parID][1]][teamName],
		bettingInfo[Parovi[9][parID][1]][teamName]);

	PlayerTextDrawSetString(playerid, fg_betTD[playerid][6], str);

	format(str, sizeof(str), "%.2f %.2f %.2f~n~%.2f %.2f %.2f~n~%.2f %.2f %.2f~n~%.2f %.2f %.2f~n~%.2f %.2f %.2f~n~%.2f %.2f %.2f~n~%.2f %.2f %.2f~n~%.2f %.2f %.2f~n~%.2f %.2f %.2f~n~%.2f %.2f %.2f",
		Parovi[0][Kvota][0], Parovi[0][Kvota][2], Parovi[0][Kvota][1],
		Parovi[1][Kvota][0], Parovi[1][Kvota][2], Parovi[1][Kvota][1],
		Parovi[2][Kvota][0], Parovi[2][Kvota][2], Parovi[2][Kvota][1],
		Parovi[3][Kvota][0], Parovi[3][Kvota][2], Parovi[3][Kvota][1],
		Parovi[4][Kvota][0], Parovi[4][Kvota][2], Parovi[4][Kvota][1],
		Parovi[5][Kvota][0], Parovi[5][Kvota][2], Parovi[5][Kvota][1],
		Parovi[6][Kvota][0], Parovi[6][Kvota][2], Parovi[6][Kvota][1],
		Parovi[7][Kvota][0], Parovi[7][Kvota][2], Parovi[7][Kvota][1],
		Parovi[8][Kvota][0], Parovi[8][Kvota][2], Parovi[8][Kvota][1],
		Parovi[9][Kvota][0], Parovi[9][Kvota][2], Parovi[9][Kvota][1]
	);

	PlayerTextDrawSetString(playerid, fg_betTD[playerid][7], str);

	new hour, minute, second, day, year, month;
	getdate(year, month, day);
	gettimeEx(hour, minute, second);
	FixHour(hour);
	hour = shifthour;

	format(str, sizeof(str), "%d.%d.%d %02d:30~n~%d.%d.%d %02d:30~n~%d.%d.%d %02d:30~n~%d.%d.%d %02d:30~n~%d.%d.%d %02d:30~n~%d.%d.%d %02d:30~n~%d.%d.%d %02d:30~n~%d.%d.%d %02d:30~n~%d.%d.%d %02d:30~n~%d.%d.%d %02d:30",
		day, month, year, hour,
		day, month, year, hour,
		day, month, year, hour,
		day, month, year, hour,
		day, month, year, hour,
		day, month, year, hour,
		day, month, year, hour,
		day, month, year, hour,
		day, month, year, hour,
		day, month, year, hour);

	PlayerTextDrawSetString(playerid, fg_betTD[playerid][5], str);

	for(new i = 0; i < 32; i ++) {

		PlayerTextDrawShow(playerid, fg_betTD[playerid][i]);
	}
	SelectTextDraw(playerid, FUSIONGAMING);

	ListaPrikazana[playerid] = true;

}
else if(show == false) {

	for(new i = 0; i < 32; i ++) {

		PlayerTextDrawHide(playerid, fg_betTD[playerid][i]);
		PlayerTextDrawDestroy(playerid, fg_betTD[playerid][i]);
		fg_betTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
	CancelSelectTextDraw(playerid);

	ListaPrikazana[playerid] = false;}
}

stock RezultatiTDControl(playerid, bool:show) {

if(show == true) {

	fg_betTD[playerid][0] = CreatePlayerTextDraw(playerid, 525.125000, 143.250000, "usebox");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][0], 0.000000, 19.127779);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][0], 108.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, fg_betTD[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, fg_betTD[playerid][0], 102);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][0], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][0], 0);

	fg_betTD[playerid][1] = CreatePlayerTextDraw(playerid, 115.625000, 172.083236, "Vreme i datum");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][1], 0.271249, 0.969998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][1], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][1], 1);

	fg_betTD[playerid][2] = CreatePlayerTextDraw(playerid, 110.000000, 186.083328, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][2], 413.125000, -0.583323);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][2], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][2], 4);

	fg_betTD[playerid][3] = CreatePlayerTextDraw(playerid, 110.375000, 167.833374, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][3], 412.500000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][3], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][3], 4);

	fg_betTD[playerid][4] = CreatePlayerTextDraw(playerid, 266.125000, 186.750015, "Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manches");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][4], 0.249374, 0.940831);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][4], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][4], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][4], 1);

	fg_betTD[playerid][5] = CreatePlayerTextDraw(playerid, 114.500000, 187.500045, "29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][5], 0.249374, 0.940831);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][5], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][5], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][5], 1);

	fg_betTD[playerid][6] = CreatePlayerTextDraw(playerid, 381.500000, 187.166671, "Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manches");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][6], 0.249374, 0.940831);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][6], 2);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][6], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][6], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][6], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][6], 1);

	fg_betTD[playerid][7] = CreatePlayerTextDraw(playerid, 480.625000, 187.000030, "1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.5");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][7], 0.249374, 0.940831);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][7], 2);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][7], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][7], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][7], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][7], 1);

	fg_betTD[playerid][8] = CreatePlayerTextDraw(playerid, 109.500000, 196.249954, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][8], 413.125000, -0.583323);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][8], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][8], 4);

	fg_betTD[playerid][9] = CreatePlayerTextDraw(playerid, 109.250000, 204.249938, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][9], 413.750000, -0.583323);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][9], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][9], 4);

	fg_betTD[playerid][10] = CreatePlayerTextDraw(playerid, 109.625000, 212.833236, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][10], 413.125000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][10], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][10], 4);

	fg_betTD[playerid][11] = CreatePlayerTextDraw(playerid, 110.625000, 221.999908, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][11], 412.500000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][11], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][11], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][11], 4);

	fg_betTD[playerid][12] = CreatePlayerTextDraw(playerid, 109.750000, 229.999908, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][12], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][12], 413.750000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][12], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][12], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][12], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][12], 4);

	fg_betTD[playerid][13] = CreatePlayerTextDraw(playerid, 109.500000, 238.583175, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][13], 413.125000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][13], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][13], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][13], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][13], 4);

	fg_betTD[playerid][14] = CreatePlayerTextDraw(playerid, 110.500000, 245.999816, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][14], 413.125000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][14], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][14], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][14], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][14], 4);

	fg_betTD[playerid][15] = CreatePlayerTextDraw(playerid, 236.625000, 171.916595, "Domacin");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][15], 0.271249, 0.969998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][15], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][15], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][15], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][15], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][15], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][15], 1);

	fg_betTD[playerid][16] = CreatePlayerTextDraw(playerid, 109.000000, 254.583099, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][16], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][16], 414.375000, -0.583323);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][16], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][16], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][16], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][16], 4);

	fg_betTD[playerid][17] = CreatePlayerTextDraw(playerid, 110.625000, 263.166473, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][17], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][17], 412.500000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][17], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][17], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][17], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][17], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][17], 4);

	fg_betTD[playerid][18] = CreatePlayerTextDraw(playerid, 111.000000, 272.333190, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][18], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][18], 412.500000, 0.583343);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][18], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][18], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][18], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][18], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][18], 4);

	fg_betTD[playerid][19] = CreatePlayerTextDraw(playerid, 362.000000, 171.166625, "GOst");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][19], 0.271249, 0.969998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][19], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][19], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][19], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][19], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][19], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][19], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][19], 1);

	fg_betTD[playerid][20] = CreatePlayerTextDraw(playerid, 453.000000, 171.583297, "Rezultat");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][20], 0.271249, 0.969998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][20], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][20], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][20], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][20], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][20], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][20], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][20], 1);

	fg_betTD[playerid][21] = CreatePlayerTextDraw(playerid, 206.000000, 147.416580, "Fusion Gaming Kladionica");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][21], 0.751250, 1.529998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][21], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][21], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][21], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][21], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][21], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][21], 0);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][21], 1);

	fg_betTD[playerid][22] = CreatePlayerTextDraw(playerid, 472.625000, 297.749969, "FG");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][22], 0.751250, 1.529998);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][22], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][22], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][22], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][22], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][22], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][22], 0);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][22], 1);

	fg_betTD[playerid][23] = CreatePlayerTextDraw(playerid, 154.125000, 309.916778, "www.fg-rpg.com");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][23], 0.228749, 0.719165);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][23], 2);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][23], FUSIONGAMING);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][23], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][23], 1);
	PlayerTextDrawBackgroundColor(playerid, fg_betTD[playerid][23], 51);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][23], 2);
	PlayerTextDrawSetProportional(playerid, fg_betTD[playerid][23], 1);

	fg_betTD[playerid][24] = CreatePlayerTextDraw(playerid, 208.125000, 168.583343, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][24], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][24], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][24], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][24], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][24], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][24], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][24], 4);

	fg_betTD[playerid][25] = CreatePlayerTextDraw(playerid, 322.875000, 167.833328, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][25], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][25], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][25], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][25], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][25], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][25], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][25], 4);

	fg_betTD[playerid][26] = CreatePlayerTextDraw(playerid, 439.500000, 167.083343, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][26], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][26], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][26], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][26], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][26], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][26], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][26], 4);

	fg_betTD[playerid][29] = CreatePlayerTextDraw(playerid, 517.750000, 168.500015, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][29], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][29], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][29], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][29], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][29], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][29], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][29], 4);

	fg_betTD[playerid][30] = CreatePlayerTextDraw(playerid, 113.750000, 167.749984, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, fg_betTD[playerid][30], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, fg_betTD[playerid][30], 0.625000, 104.416656);
	PlayerTextDrawAlignment(playerid, fg_betTD[playerid][30], 1);
	PlayerTextDrawColor(playerid, fg_betTD[playerid][30], -1);
	PlayerTextDrawSetShadow(playerid, fg_betTD[playerid][30], 0);
	PlayerTextDrawSetOutline(playerid, fg_betTD[playerid][30], 0);
	PlayerTextDrawFont(playerid, fg_betTD[playerid][30], 4);

	new str[256];

	format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
		bettingInfo[StariParovi[0][parID][0]][teamName],
		bettingInfo[StariParovi[1][parID][0]][teamName],
		bettingInfo[StariParovi[2][parID][0]][teamName],
		bettingInfo[StariParovi[3][parID][0]][teamName],
		bettingInfo[StariParovi[4][parID][0]][teamName],
		bettingInfo[StariParovi[5][parID][0]][teamName],
		bettingInfo[StariParovi[6][parID][0]][teamName],
		bettingInfo[StariParovi[7][parID][0]][teamName],
		bettingInfo[StariParovi[8][parID][0]][teamName],
		bettingInfo[StariParovi[9][parID][0]][teamName]);

	PlayerTextDrawSetString(playerid, fg_betTD[playerid][4], str);

	format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
		bettingInfo[StariParovi[0][parID][1]][teamName],
		bettingInfo[StariParovi[1][parID][1]][teamName],
		bettingInfo[StariParovi[2][parID][1]][teamName],
		bettingInfo[StariParovi[3][parID][1]][teamName],
		bettingInfo[StariParovi[4][parID][1]][teamName],
		bettingInfo[StariParovi[5][parID][1]][teamName],
		bettingInfo[StariParovi[6][parID][1]][teamName],
		bettingInfo[StariParovi[7][parID][1]][teamName],
		bettingInfo[StariParovi[8][parID][1]][teamName],
		bettingInfo[StariParovi[9][parID][1]][teamName]);

	PlayerTextDrawSetString(playerid, fg_betTD[playerid][6], str);

	format(str, sizeof(str), "%d:%d~n~%d:%d~n~%d:%d~n~%d:%d~n~%d:%d~n~%d:%d~n~%d:%d~n~%d:%d~n~%d:%d~n~%d:%d",
		StariParovi[0][Rezultat][0], StariParovi[0][Rezultat][1],
		StariParovi[1][Rezultat][0], StariParovi[1][Rezultat][1],
		StariParovi[2][Rezultat][0], StariParovi[2][Rezultat][1],
		StariParovi[3][Rezultat][0], StariParovi[3][Rezultat][1],
		StariParovi[4][Rezultat][0], StariParovi[4][Rezultat][1],
		StariParovi[5][Rezultat][0], StariParovi[5][Rezultat][1],
		StariParovi[6][Rezultat][0], StariParovi[6][Rezultat][1],
		StariParovi[7][Rezultat][0], StariParovi[7][Rezultat][1],
		StariParovi[8][Rezultat][0], StariParovi[8][Rezultat][1],
		StariParovi[9][Rezultat][0], StariParovi[9][Rezultat][1]

	);

	PlayerTextDrawSetString(playerid, fg_betTD[playerid][7], str);

	new hour, minute, second, day, year, month;
	getdate(year, month, day);
	gettimeEx(hour, minute, second);
	FixHour(hour);
	hour = shifthour;

	format(str, sizeof(str), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
		StariParovi[0][HourPobeda],
		StariParovi[1][HourPobeda],
		StariParovi[2][HourPobeda],
		StariParovi[3][HourPobeda],
		StariParovi[4][HourPobeda],
		StariParovi[5][HourPobeda],
		StariParovi[6][HourPobeda],
		StariParovi[7][HourPobeda],
		StariParovi[8][HourPobeda],
		StariParovi[9][HourPobeda]);

	PlayerTextDrawSetString(playerid, fg_betTD[playerid][5], str);

	for(new i = 0; i < 31; i ++) {

		PlayerTextDrawShow(playerid, fg_betTD[playerid][i]);
	}

	RezultatiPrikazana[playerid] = true;

}
else if(show == false) {

	for(new i = 0; i < 31; i ++) {

		PlayerTextDrawHide(playerid, fg_betTD[playerid][i]);
		PlayerTextDrawDestroy(playerid, fg_betTD[playerid][i]);
		fg_betTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}

	RezultatiPrikazana[playerid] = false;}
}

stock TuningTDShow(playerid, bool:show) {

if(show == true) {
	for(new i = 0; i < 14; i ++) {
		PlayerTextDrawShow(playerid, TuningBuy[playerid][i]);
	}

}
else if(show == false) {
	for(new i = 0; i < 14; i ++) {
		PlayerTextDrawHide(playerid, TuningBuy[playerid][i]);
	}
}
}

//------------------------------------------------------------------------------

stock PaydayTDControl(playerid, bool:show) {

if(show == true) {
	PaydayTD[playerid][0] = CreatePlayerTextDraw(playerid, 127.423034, 156.749969, "box");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][0], 0.000000, 16.043924);
	PlayerTextDrawTextSize(playerid, PaydayTD[playerid][0], 233.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, PaydayTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, PaydayTD[playerid][0], 8503122);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][0], 0);

	PaydayTD[playerid][1] = CreatePlayerTextDraw(playerid, 149.912155, 142.166717, "PAYDAY");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][1], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][1], 8503149);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][1], 0);

	PaydayTD[playerid][2] = CreatePlayerTextDraw(playerid, 143.821380, 154.416732, "PRIHOD");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][2], 0.249604, 1.279167);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][2], 2);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][2], 1);

	PaydayTD[playerid][3] = CreatePlayerTextDraw(playerid, 142.884338, 193.500061, "KREDIT");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][3], 0.249604, 1.279167);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][3], 2);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][3], 1);

	PaydayTD[playerid][4] = CreatePlayerTextDraw(playerid, 145.226943, 233.166748, "RASHOD");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][4], 0.249604, 1.279167);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][4], 1);

	PaydayTD[playerid][5] = CreatePlayerTextDraw(playerid, 125.549057, 164.333404, "PLATA:1000");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][5], 0.185885, 1.022500);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][5], 8503149);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][5], 0);

	PaydayTD[playerid][6] = CreatePlayerTextDraw(playerid, 125.549057, 173.083404, "PENZIJA:20000");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][6], 0.185885, 1.022500);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][6], 8503149);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][6], 0);

	PaydayTD[playerid][7] = CreatePlayerTextDraw(playerid, 125.080535, 182.416717, "STECENI_INTERES:10000");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][7], 0.185885, 1.022500);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][7], 8503149);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][7], 0);

	PaydayTD[playerid][8] = CreatePlayerTextDraw(playerid, 124.612014, 204.000076, "IZNOS_KREDITA:_5000");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][8], 0.185885, 1.022500);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][8], 8503149);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][8], 0);

	PaydayTD[playerid][9] = CreatePlayerTextDraw(playerid, 125.080535, 212.750045, "IZNOS_RATE:_500");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][9], 0.185885, 1.022500);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][9], 8503149);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][9], 0);

	PaydayTD[playerid][10] = CreatePlayerTextDraw(playerid, 125.549057, 222.083389, "ZA_OTPLATU:_2000");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][10], 0.185885, 1.022500);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][10], 8503149);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][10], 2);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][10], 0);

	PaydayTD[playerid][11] = CreatePlayerTextDraw(playerid, 125.549057, 244.250076, "Porez:_1000");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][11], 0.185885, 1.022500);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][11], 8503149);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][11], 2);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][11], 0);

	PaydayTD[playerid][12] = CreatePlayerTextDraw(playerid, 125.549057, 251.833419, "STRUJA:_2000");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][12], 0.185885, 1.022500);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][12], 1);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][12], 8503149);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][12], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][12], 2);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][12], 0);

	PaydayTD[playerid][13] = CreatePlayerTextDraw(playerid, 125.549057, 260.000030, "VODA:_500");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][13], 0.185885, 1.022500);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][13], 1);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][13], 8503149);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][13], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][13], 2);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][13], 0);

	PaydayTD[playerid][14] = CreatePlayerTextDraw(playerid, 125.549057, 267.583404, "SMECE:_2000");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][14], 0.185885, 1.022500);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][14], 1);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][14], 8503149);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][14], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][14], 2);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][14], 0);

	PaydayTD[playerid][15] = CreatePlayerTextDraw(playerid, 125.080535, 276.333435, "GREJANJE:_300");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][15], 0.185885, 1.022500);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][15], 1);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][15], 8503149);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][15], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][15], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][15], 2);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][15], 0);

	PaydayTD[playerid][16] = CreatePlayerTextDraw(playerid, 178.960464, 285.083312, "STARI_IZNOS_/_NOVI_IZNOS");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][16], 0.176515, 0.981666);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][16], 2);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][16], -1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][16], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][16], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][16], 2);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][16], 0);

	PaydayTD[playerid][17] = CreatePlayerTextDraw(playerid, 180.366027, 292.666687, "5000000_/_2505295");
	PlayerTextDrawLetterSize(playerid, PaydayTD[playerid][17], 0.176515, 0.981666);
	PlayerTextDrawAlignment(playerid, PaydayTD[playerid][17], 2);
	PlayerTextDrawColor(playerid, PaydayTD[playerid][17], -1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][17], 0);
	PlayerTextDrawSetOutline(playerid, PaydayTD[playerid][17], 0);
	PlayerTextDrawBackgroundColor(playerid, PaydayTD[playerid][17], 255);
	PlayerTextDrawFont(playerid, PaydayTD[playerid][17], 2);
	PlayerTextDrawSetProportional(playerid, PaydayTD[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, PaydayTD[playerid][17], 0);

	for(new i = 0; i < 18; i++) {
		PlayerTextDrawShow(playerid, PaydayTD[playerid][i]);
	}
}
else if(show == false) {
	for(new i = 0; i < 18; i ++) {
		PlayerTextDrawHide(playerid, PaydayTD[playerid][i]);
		PlayerTextDrawDestroy(playerid, PaydayTD[playerid][i]);
		PaydayTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
}
}

//------------------------------------------------------------------------------

stock KosacTDControl(playerid, bool:show) {

if(show == true) {
	KosacTD[playerid][0] = CreatePlayerTextDraw(playerid, 0.754048, 233.166625, "");
	PlayerTextDrawLetterSize(playerid, KosacTD[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, KosacTD[playerid][0], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, KosacTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, KosacTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, KosacTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, KosacTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, KosacTD[playerid][0], 0);
	PlayerTextDrawFont(playerid, KosacTD[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, KosacTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, KosacTD[playerid][0], 0);
	PlayerTextDrawSetPreviewModel(playerid, KosacTD[playerid][0], 804);
	PlayerTextDrawSetPreviewRot(playerid, KosacTD[playerid][0], 0.000000, 0.000000, 0.000000, 1.000000);

	KosacTD[playerid][1] = CreatePlayerTextDraw(playerid, 31.376296, 291.499969, "0/38");
	PlayerTextDrawLetterSize(playerid, KosacTD[playerid][1], 0.241639, 1.238333);
	PlayerTextDrawAlignment(playerid, KosacTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, KosacTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, KosacTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, KosacTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, KosacTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, KosacTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, KosacTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, KosacTD[playerid][1], 0);

	for(new i = 0; i < 2; i++) {
		PlayerTextDrawShow(playerid, KosacTD[playerid][i]);
	}
}
else if(show == false) {
	for(new i = 0; i < 2; i ++) {
		PlayerTextDrawHide(playerid, KosacTD[playerid][i]);
		PlayerTextDrawDestroy(playerid, KosacTD[playerid][i]);
		KosacTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
}
}

//------------------------------------------------------------------------------

stock buyWatchTDControl(playerid, bool:show) {

if(show == true) {
	buyWatch[playerid][0] = CreatePlayerTextDraw(playerid,410.000000, 170.000000, "  ");
	PlayerTextDrawBackgroundColor(playerid,buyWatch[playerid][0], 255);
	PlayerTextDrawFont(playerid,buyWatch[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid,buyWatch[playerid][0], 0.500000, 12.399997);
	PlayerTextDrawColor(playerid,buyWatch[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,buyWatch[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,buyWatch[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,buyWatch[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,buyWatch[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid,buyWatch[playerid][0], 100);
	PlayerTextDrawTextSize(playerid,buyWatch[playerid][0], 230.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,buyWatch[playerid][0], 0);

	buyWatch[playerid][1] = CreatePlayerTextDraw(playerid,230.000000, 165.000000, "  ");
	PlayerTextDrawBackgroundColor(playerid,buyWatch[playerid][1], 0);
	PlayerTextDrawFont(playerid,buyWatch[playerid][1], 5);
	PlayerTextDrawLetterSize(playerid,buyWatch[playerid][1], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,buyWatch[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid,buyWatch[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,buyWatch[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid,buyWatch[playerid][1], 1);
	PlayerTextDrawUseBox(playerid,buyWatch[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid,buyWatch[playerid][1], 255);
	PlayerTextDrawTextSize(playerid,buyWatch[playerid][1], 180.000000, 100.000000);
	PlayerTextDrawSetPreviewModel(playerid, buyWatch[playerid][1], 19039);
	PlayerTextDrawSetPreviewRot(playerid, buyWatch[playerid][1], 0.000000, 90.000000, 10.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,buyWatch[playerid][1], 0);

	buyWatch[playerid][2] = CreatePlayerTextDraw(playerid,319.000000, 256.000000, "Rolex Datejust - 521$");
	PlayerTextDrawAlignment(playerid,buyWatch[playerid][2], 2);
	PlayerTextDrawBackgroundColor(playerid,buyWatch[playerid][2], 255);
	PlayerTextDrawFont(playerid,buyWatch[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid,buyWatch[playerid][2], 0.300000, 1.000000);
	PlayerTextDrawColor(playerid,buyWatch[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,buyWatch[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,buyWatch[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid,buyWatch[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid,buyWatch[playerid][2], 0);

	buyWatch[playerid][3] = CreatePlayerTextDraw(playerid,319.000000, 269.000000, "kupi_sat");
	PlayerTextDrawTextSize(playerid,buyWatch[playerid][3], 40.000000, 20.000000);
	PlayerTextDrawAlignment(playerid,buyWatch[playerid][3], 2);
	PlayerTextDrawBackgroundColor(playerid,buyWatch[playerid][3], 255);
	PlayerTextDrawFont(playerid,buyWatch[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid,buyWatch[playerid][3], 0.300000, 1.000000);
	PlayerTextDrawColor(playerid,buyWatch[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,buyWatch[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid,buyWatch[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid,buyWatch[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid,buyWatch[playerid][3], 1);

	buyWatch[playerid][4] = CreatePlayerTextDraw(playerid,382.000000, 270.000000, "ld_beat:right");
	PlayerTextDrawAlignment(playerid,buyWatch[playerid][4], 2);
	PlayerTextDrawBackgroundColor(playerid,buyWatch[playerid][4], 255);
	PlayerTextDrawFont(playerid,buyWatch[playerid][4], 4);
	PlayerTextDrawLetterSize(playerid,buyWatch[playerid][4], 0.300000, 1.000000);
	PlayerTextDrawColor(playerid,buyWatch[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid,buyWatch[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid,buyWatch[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid,buyWatch[playerid][4], 1);
	PlayerTextDrawUseBox(playerid,buyWatch[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid,buyWatch[playerid][4], 255);
	PlayerTextDrawTextSize(playerid,buyWatch[playerid][4], 20.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid,buyWatch[playerid][4], 1);

	buyWatch[playerid][5] = CreatePlayerTextDraw(playerid,236.000000, 270.000000, "ld_beat:left");
	PlayerTextDrawAlignment(playerid,buyWatch[playerid][5], 2);
	PlayerTextDrawBackgroundColor(playerid,buyWatch[playerid][5], 255);
	PlayerTextDrawFont(playerid,buyWatch[playerid][5], 4);
	PlayerTextDrawLetterSize(playerid,buyWatch[playerid][5], 0.300000, 1.000000);
	PlayerTextDrawColor(playerid,buyWatch[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid,buyWatch[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid,buyWatch[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid,buyWatch[playerid][5], 1);
	PlayerTextDrawUseBox(playerid,buyWatch[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid,buyWatch[playerid][5], 255);
	PlayerTextDrawTextSize(playerid,buyWatch[playerid][5], 20.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid,buyWatch[playerid][5], 1);

	buyWatch[playerid][6] = CreatePlayerTextDraw(playerid,316.000000, 264.000000, "-");
	PlayerTextDrawAlignment(playerid,buyWatch[playerid][6], 2);
	PlayerTextDrawBackgroundColor(playerid,buyWatch[playerid][6], 255);
	PlayerTextDrawFont(playerid,buyWatch[playerid][6], 2);
	PlayerTextDrawLetterSize(playerid,buyWatch[playerid][6], 13.700016, 0.499999);
	PlayerTextDrawColor(playerid,buyWatch[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid,buyWatch[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid,buyWatch[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid,buyWatch[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid,buyWatch[playerid][6], 0);

	buyWatch[playerid][7] = CreatePlayerTextDraw(playerid,384.000000, 169.000000, "ld_beat:cross");
	PlayerTextDrawBackgroundColor(playerid,buyWatch[playerid][7], 255);
	PlayerTextDrawFont(playerid,buyWatch[playerid][7], 4);
	PlayerTextDrawLetterSize(playerid,buyWatch[playerid][7], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,buyWatch[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid,buyWatch[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid,buyWatch[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid,buyWatch[playerid][7], 1);
	PlayerTextDrawUseBox(playerid,buyWatch[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid,buyWatch[playerid][7], 255);
	PlayerTextDrawTextSize(playerid,buyWatch[playerid][7], 21.000000, 11.000000);
	PlayerTextDrawSetSelectable(playerid,buyWatch[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid,buyWatch[playerid][7], 1);

	for(new i = 0; i < 8; i++) {
		PlayerTextDrawShow(playerid, buyWatch[playerid][i]);
	}
	SelectTextDraw(playerid, FUSIONGAMING);}
else if(show == false) {
	for(new i = 0; i < 8; i ++) {
		PlayerTextDrawHide(playerid, buyWatch[playerid][i]);
		PlayerTextDrawDestroy(playerid, buyWatch[playerid][i]);
		buyWatch[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
	CancelSelectTextDraw(playerid);}
}
//------------------------------------------------------------------------------
stock atmLoadingTDControl(playerid, bool:show) {

if(show == true) {

	atmrobLoading[playerid][0] = CreatePlayerTextDraw(playerid, 283.125000, 179.666656, "Loading");
	PlayerTextDrawLetterSize(playerid, atmrobLoading[playerid][0], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, atmrobLoading[playerid][0], 1);
	PlayerTextDrawColor(playerid, atmrobLoading[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, atmrobLoading[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, atmrobLoading[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, atmrobLoading[playerid][0], 51);
	PlayerTextDrawFont(playerid, atmrobLoading[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, atmrobLoading[playerid][0], 1);

	atmrobLoading[playerid][1] = CreatePlayerTextDraw(playerid, 309.750000, 193.499969, "0%");
	PlayerTextDrawLetterSize(playerid, atmrobLoading[playerid][1], 0.371249, 1.150831);
	PlayerTextDrawAlignment(playerid, atmrobLoading[playerid][1], 1);
	PlayerTextDrawColor(playerid, atmrobLoading[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, atmrobLoading[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, atmrobLoading[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, atmrobLoading[playerid][1], 51);
	PlayerTextDrawFont(playerid, atmrobLoading[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, atmrobLoading[playerid][1], 1);

	for(new i = 0; i < 2; i++) {
		PlayerTextDrawShow(playerid, atmrobLoading[playerid][i]);
	}
}
else if(show == false) {
	for(new i = 0; i < 2; i ++) {
		PlayerTextDrawHide(playerid, atmrobLoading[playerid][i]);
		PlayerTextDrawDestroy(playerid, atmrobLoading[playerid][i]);
		atmrobLoading[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
}
}
stock atmTDControl(playerid, bool:show) {

if(show == true) {
	atmTD[playerid][0] = CreatePlayerTextDraw(playerid, 539.000000, 344.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, atmTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, atmTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, atmTD[playerid][0], 0.500000, 8.600002);
	PlayerTextDrawColor(playerid, atmTD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, atmTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, atmTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, atmTD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, atmTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, atmTD[playerid][0], 85);
	PlayerTextDrawTextSize(playerid, atmTD[playerid][0], 170.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, atmTD[playerid][0], 0);

	atmTD[playerid][1] = CreatePlayerTextDraw(playerid, 165.000000, 353.000000, "1");
	PlayerTextDrawBackgroundColor(playerid, atmTD[playerid][1], 0);
	PlayerTextDrawFont(playerid, atmTD[playerid][1], 5);
	PlayerTextDrawLetterSize(playerid, atmTD[playerid][1], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, atmTD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, atmTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, atmTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, atmTD[playerid][1], 0);
	PlayerTextDrawUseBox(playerid, atmTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, atmTD[playerid][1], 255);
	PlayerTextDrawTextSize(playerid, atmTD[playerid][1], 155.000000, 71.000000);
	PlayerTextDrawSetPreviewModel(playerid, atmTD[playerid][1], 335);
	PlayerTextDrawSetPreviewRot(playerid, atmTD[playerid][1], 0.0, 0.0, 0.0, 1.3);
	PlayerTextDrawSetSelectable(playerid, atmTD[playerid][1], 1);

	atmTD[playerid][2] = CreatePlayerTextDraw(playerid, 300.000000, 330.000000, "2");
	PlayerTextDrawBackgroundColor(playerid, atmTD[playerid][2], 0);
	PlayerTextDrawFont(playerid, atmTD[playerid][2], 5);
	PlayerTextDrawLetterSize(playerid, atmTD[playerid][2], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, atmTD[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, atmTD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, atmTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, atmTD[playerid][2], 0);
	PlayerTextDrawUseBox(playerid, atmTD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, atmTD[playerid][2], 255);
	PlayerTextDrawTextSize(playerid, atmTD[playerid][2], 155.000000, 94.000000);
	PlayerTextDrawSetPreviewModel(playerid, atmTD[playerid][2], 2190);
	PlayerTextDrawSetPreviewRot(playerid, atmTD[playerid][2], 0.0, 0.0, 180.0, 2.0);
	PlayerTextDrawSetSelectable(playerid, atmTD[playerid][2], 1);

	atmTD[playerid][3] = CreatePlayerTextDraw(playerid, 392.000000, 326.000000, "3");
	PlayerTextDrawBackgroundColor(playerid, atmTD[playerid][3], 0);
	PlayerTextDrawFont(playerid, atmTD[playerid][3], 5);
	PlayerTextDrawLetterSize(playerid, atmTD[playerid][3], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, atmTD[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, atmTD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, atmTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, atmTD[playerid][3], 0);
	PlayerTextDrawUseBox(playerid, atmTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, atmTD[playerid][3], 255);
	PlayerTextDrawTextSize(playerid, atmTD[playerid][3], 155.000000, 94.000000);
	PlayerTextDrawSetPreviewModel(playerid, atmTD[playerid][3], 1212);
	PlayerTextDrawSetPreviewRot(playerid, atmTD[playerid][3], -50.0, 0.0, 0.0, 2.0);
	PlayerTextDrawSetSelectable(playerid, atmTD[playerid][3], 1);

	atmTD[playerid][4] = CreatePlayerTextDraw(playerid, 539.000000, 344.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, atmTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, atmTD[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, atmTD[playerid][4], 0.500000, -0.399996);
	PlayerTextDrawColor(playerid, atmTD[playerid][4], FUSIONGAMING);
	PlayerTextDrawSetOutline(playerid, atmTD[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, atmTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, atmTD[playerid][4], 1);
	PlayerTextDrawUseBox(playerid, atmTD[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, atmTD[playerid][4], 865730559);
	PlayerTextDrawTextSize(playerid, atmTD[playerid][4], 170.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, atmTD[playerid][4], 0);

	atmTD[playerid][5] = CreatePlayerTextDraw(playerid, 539.000000, 427.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, atmTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, atmTD[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, atmTD[playerid][5], 0.500000, -0.699997);
	PlayerTextDrawColor(playerid, atmTD[playerid][5], FUSIONGAMING);
	PlayerTextDrawSetOutline(playerid, atmTD[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, atmTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, atmTD[playerid][5], 1);
	PlayerTextDrawUseBox(playerid, atmTD[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, atmTD[playerid][5], 865730559);
	PlayerTextDrawTextSize(playerid, atmTD[playerid][5], 170.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, atmTD[playerid][5], 0);

	atmTD[playerid][6] = CreatePlayerTextDraw(playerid, 176.000000, 345.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, atmTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, atmTD[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, atmTD[playerid][6], 0.500000, 8.500001);
	PlayerTextDrawColor(playerid, atmTD[playerid][6], FUSIONGAMING);
	PlayerTextDrawSetOutline(playerid, atmTD[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, atmTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, atmTD[playerid][6], 1);
	PlayerTextDrawUseBox(playerid, atmTD[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, atmTD[playerid][6], 865730559);
	PlayerTextDrawTextSize(playerid, atmTD[playerid][6], 170.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, atmTD[playerid][6], 0);

	atmTD[playerid][7] = CreatePlayerTextDraw(playerid, 539.000000, 344.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, atmTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, atmTD[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, atmTD[playerid][7], 0.500000, 8.600003);
	PlayerTextDrawColor(playerid, atmTD[playerid][7], FUSIONGAMING);
	PlayerTextDrawSetOutline(playerid, atmTD[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, atmTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, atmTD[playerid][7], 1);
	PlayerTextDrawUseBox(playerid, atmTD[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, atmTD[playerid][7], 865730559);
	PlayerTextDrawTextSize(playerid, atmTD[playerid][7], 533.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, atmTD[playerid][7], 0);

	atmTD[playerid][8] = CreatePlayerTextDraw(playerid, 281.000000, 344.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, atmTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, atmTD[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid, atmTD[playerid][8], 0.500000, 8.600003);
	PlayerTextDrawColor(playerid, atmTD[playerid][8], FUSIONGAMING);
	PlayerTextDrawSetOutline(playerid, atmTD[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, atmTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, atmTD[playerid][8], 1);
	PlayerTextDrawUseBox(playerid, atmTD[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, atmTD[playerid][8], 865730559);
	PlayerTextDrawTextSize(playerid, atmTD[playerid][8], 275.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, atmTD[playerid][8], 0);

	atmTD[playerid][9] = CreatePlayerTextDraw(playerid, 412.000000, 344.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, atmTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, atmTD[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid, atmTD[playerid][9], 0.500000, 8.600003);
	PlayerTextDrawColor(playerid, atmTD[playerid][9], FUSIONGAMING);
	PlayerTextDrawSetOutline(playerid, atmTD[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, atmTD[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, atmTD[playerid][9], 1);
	PlayerTextDrawUseBox(playerid, atmTD[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid, atmTD[playerid][9], 865730559);
	PlayerTextDrawTextSize(playerid, atmTD[playerid][9], 406.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, atmTD[playerid][9], 0);

	atmTD[playerid][10] = CreatePlayerTextDraw(playerid, 190.000000, 407.000000, "PRESECI ZICE");
	PlayerTextDrawBackgroundColor(playerid, atmTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, atmTD[playerid][10], 2);
	PlayerTextDrawLetterSize(playerid, atmTD[playerid][10], 0.270000, 1.200000);
	PlayerTextDrawColor(playerid, atmTD[playerid][10], -1);
	PlayerTextDrawSetOutline(playerid, atmTD[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, atmTD[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, atmTD[playerid][10], 0);
	PlayerTextDrawSetSelectable(playerid, atmTD[playerid][10], 0); // 13

	atmTD[playerid][11] = CreatePlayerTextDraw(playerid, 295.000000, 407.000000, "HAKOVANJE ATMA");
	PlayerTextDrawBackgroundColor(playerid, atmTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, atmTD[playerid][11], 2);
	PlayerTextDrawLetterSize(playerid, atmTD[playerid][11], 0.270000, 1.200000);
	PlayerTextDrawColor(playerid, atmTD[playerid][11], -1);
	PlayerTextDrawSetOutline(playerid, atmTD[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, atmTD[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, atmTD[playerid][11], 0);
	PlayerTextDrawSetSelectable(playerid, atmTD[playerid][11], 0);

	atmTD[playerid][12] = CreatePlayerTextDraw(playerid, 430.000000, 407.000000, "KRADJA NOVCA");
	PlayerTextDrawBackgroundColor(playerid, atmTD[playerid][12], 255);
	PlayerTextDrawFont(playerid, atmTD[playerid][12], 2);
	PlayerTextDrawLetterSize(playerid, atmTD[playerid][12], 0.270000, 1.200000);
	PlayerTextDrawColor(playerid, atmTD[playerid][12], -1);
	PlayerTextDrawSetOutline(playerid, atmTD[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, atmTD[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, atmTD[playerid][12], 0);
	PlayerTextDrawSetSelectable(playerid, atmTD[playerid][12], 0);

	atmTD[playerid][13] = CreatePlayerTextDraw(playerid, 289.000000, 332.000000, "Atm hack/rob");
	PlayerTextDrawBackgroundColor(playerid, atmTD[playerid][13], 255);
	PlayerTextDrawFont(playerid, atmTD[playerid][13], 1);
	PlayerTextDrawLetterSize(playerid, atmTD[playerid][13], 0.479999, 1.699998);
	PlayerTextDrawColor(playerid, atmTD[playerid][13], -1);
	PlayerTextDrawSetOutline(playerid, atmTD[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, atmTD[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, atmTD[playerid][13], 0);

	for(new i = 0; i < 14; i++) {
		PlayerTextDrawShow(playerid, atmTD[playerid][i]);
	}
	ShowedAtmTD[playerid] = true;}
else if(show == false) {
	ShowedAtmTD[playerid] = false;
	for(new i = 0; i < 14; i ++) {
		PlayerTextDrawHide(playerid, atmTD[playerid][i]);
		PlayerTextDrawDestroy(playerid, atmTD[playerid][i]);
		atmTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
		CancelSelectTextDraw(playerid);
	}
}
}
//------------------------------------------------------------------------------
stock PizzaMenuTDControl(playerid, bool:show) {
if(show == true) {
	PizzaMenu[playerid][0] = CreatePlayerTextDraw(playerid, 543.000000, 89.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][0], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][0], 0.500000, 33.099998);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, PizzaMenu[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, PizzaMenu[playerid][0], -1728039937);
	PlayerTextDrawTextSize(playerid, PizzaMenu[playerid][0], 95.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][0], 0);

	PizzaMenu[playerid][1] = CreatePlayerTextDraw(playerid, 543.000000, 89.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][1], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][1], 0.500000, -2.499989);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, PizzaMenu[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, PizzaMenu[playerid][1], -13057);
	PlayerTextDrawTextSize(playerid, PizzaMenu[playerid][1], 95.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][1], 0);

	PizzaMenu[playerid][2] = CreatePlayerTextDraw(playerid, 219.000000, 70.000000, "Have it your way - eats");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][2], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][2], 0.430000, 1.399999);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][2], -1728039937);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][2], 0);

	PizzaMenu[playerid][3] = CreatePlayerTextDraw(playerid, 480.000000, 70.000000, "los santos,~n~   winewood");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][3], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][3], 0.219999, 0.799998);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][3], -1728039937);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][3], 0);

	PizzaMenu[playerid][4] = CreatePlayerTextDraw(playerid, 543.000000, 179.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][4], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][4], 0.500000, -0.599991);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][4], 1);
	PlayerTextDrawUseBox(playerid, PizzaMenu[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, PizzaMenu[playerid][4], -13057);
	PlayerTextDrawTextSize(playerid, PizzaMenu[playerid][4], 95.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][4], 0);

	PizzaMenu[playerid][5] = CreatePlayerTextDraw(playerid, 543.000000, 284.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][5], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][5], 0.500000, -0.599991);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][5], 1);
	PlayerTextDrawUseBox(playerid, PizzaMenu[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, PizzaMenu[playerid][5], -13057);
	PlayerTextDrawTextSize(playerid, PizzaMenu[playerid][5], 95.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][5], 0);

	PizzaMenu[playerid][6] = CreatePlayerTextDraw(playerid, 313.000000, 89.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][6], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][6], 0.400000, 33.099998);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][6], 1);
	PlayerTextDrawUseBox(playerid, PizzaMenu[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, PizzaMenu[playerid][6], -13057);
	PlayerTextDrawTextSize(playerid, PizzaMenu[playerid][6], 307.000000, -5.000000);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][6], 0);

	PizzaMenu[playerid][7] = CreatePlayerTextDraw(playerid, 101.000000, 32.000000, "1");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][7], 0);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][7], 5);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][7], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][7], 1);
	PlayerTextDrawUseBox(playerid, PizzaMenu[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, PizzaMenu[playerid][7], 255);
	PlayerTextDrawTextSize(playerid, PizzaMenu[playerid][7], 221.000000, 140.000000);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][7], 1);
	PlayerTextDrawSetPreviewModel(playerid, PizzaMenu[playerid][7], 2218);
	PlayerTextDrawSetPreviewRot(playerid, PizzaMenu[playerid][7], 10.0, -10.0, 220.0, 1.0);

	PizzaMenu[playerid][8] = CreatePlayerTextDraw(playerid, 227.000000, 114.000000, "Capriciosa~n~cedevita~n~pomfrit");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][8], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][8], 2);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][8], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][8], -13057);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][8], 0);

	PizzaMenu[playerid][9] = CreatePlayerTextDraw(playerid, 240.000000, 154.000000, "68.99 $");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][9], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][9], 3);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][9], 0.470000, 1.799999);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][9], -13057);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][9], 0);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][9], 0);

	PizzaMenu[playerid][10] = CreatePlayerTextDraw(playerid, 315.000000, 32.000000, "2");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][10], 0);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][10], 5);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][10], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][10], -1);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][10], 1);
	PlayerTextDrawUseBox(playerid, PizzaMenu[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, PizzaMenu[playerid][10], 255);
	PlayerTextDrawTextSize(playerid, PizzaMenu[playerid][10], 221.000000, 140.000000);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][10], 1);
	PlayerTextDrawSetPreviewModel(playerid, PizzaMenu[playerid][10], 2219);
	PlayerTextDrawSetPreviewRot(playerid, PizzaMenu[playerid][10], 10.0, -10.0, 220.0, 1.0);

	PizzaMenu[playerid][11] = CreatePlayerTextDraw(playerid, 439.000000, 114.000000, "Margarita~n~coca cola~n~pomfrit");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][11], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][11], 2);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][11], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][11], -13057);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][11], 0);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][11], 0);

	PizzaMenu[playerid][12] = CreatePlayerTextDraw(playerid, 463.000000, 154.000000, "79.49 $");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][12], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][12], 3);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][12], 0.470000, 1.799999);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][12], -13057);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][12], 0);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][12], 0);

	PizzaMenu[playerid][13] = CreatePlayerTextDraw(playerid, 101.000000, 132.000000, "3");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][13], 0);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][13], 5);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][13], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][13], -1);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][13], 1);
	PlayerTextDrawUseBox(playerid, PizzaMenu[playerid][13], 1);
	PlayerTextDrawBoxColor(playerid, PizzaMenu[playerid][13], 255);
	PlayerTextDrawTextSize(playerid, PizzaMenu[playerid][13], 221.000000, 140.000000);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][13], 1);
	PlayerTextDrawSetPreviewModel(playerid, PizzaMenu[playerid][13], 2220);
	PlayerTextDrawSetPreviewRot(playerid, PizzaMenu[playerid][13], 10.0, -10.0, 220.0, 1.0);

	PizzaMenu[playerid][14] = CreatePlayerTextDraw(playerid, 236.000000, 212.000000, "Siciliana~n~juice~n~pomfrit");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][14], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][14], 2);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][14], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][14], -13057);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][14], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][14], 0);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][14], 0);

	PizzaMenu[playerid][15] = CreatePlayerTextDraw(playerid, 232.000000, 258.000000, "80.99 $");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][15], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][15], 3);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][15], 0.470000, 1.799999);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][15], -13057);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][15], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][15], 0);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][15], 0);

	PizzaMenu[playerid][16] = CreatePlayerTextDraw(playerid, 314.000000, 132.000000, "4");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][16], 0);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][16], 5);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][16], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][16], -1);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][16], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][16], 1);
	PlayerTextDrawUseBox(playerid, PizzaMenu[playerid][16], 1);
	PlayerTextDrawBoxColor(playerid, PizzaMenu[playerid][16], 255);
	PlayerTextDrawTextSize(playerid, PizzaMenu[playerid][16], 221.000000, 140.000000);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][16], 1);
	PlayerTextDrawSetPreviewModel(playerid, PizzaMenu[playerid][16], 2218);
	PlayerTextDrawSetPreviewRot(playerid, PizzaMenu[playerid][16], 10.0, -10.0, 220.0, 1.0);


	PizzaMenu[playerid][17] = CreatePlayerTextDraw(playerid, 436.000000, 212.000000, "Vesuvio~n~cedevita~n~pomfrit");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][17], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][17], 2);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][17], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][17], -13057);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][17], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][17], 0);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][17], 0);

	PizzaMenu[playerid][18] = CreatePlayerTextDraw(playerid, 462.000000, 258.000000, "89.49 $");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][18], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][18], 3);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][18], 0.470000, 1.799999);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][18], -13057);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][18], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][18], 0);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][18], 0);

	PizzaMenu[playerid][19] = CreatePlayerTextDraw(playerid, 101.000000, 243.000000, "5");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][19], 0);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][19], 5);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][19], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][19], -1);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][19], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][19], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][19], 1);
	PlayerTextDrawUseBox(playerid, PizzaMenu[playerid][19], 1);
	PlayerTextDrawBoxColor(playerid, PizzaMenu[playerid][19], 255);
	PlayerTextDrawTextSize(playerid, PizzaMenu[playerid][19], 221.000000, 140.000000);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][19], 1);
	PlayerTextDrawSetPreviewModel(playerid, PizzaMenu[playerid][19], 2219);
	PlayerTextDrawSetPreviewRot(playerid, PizzaMenu[playerid][19], 0.0, -10.0, 220.0, 1.0);

	PizzaMenu[playerid][20] = CreatePlayerTextDraw(playerid, 236.000000, 324.000000, "Quattro stagione~n~juice~n~pomfrit");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][20], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][20], 2);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][20], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][20], -13057);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][20], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][20], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][20], 0);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][20], 0);

	PizzaMenu[playerid][21] = CreatePlayerTextDraw(playerid, 232.000000, 364.000000, "98.49 $");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][21], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][21], 3);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][21], 0.470000, 1.799999);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][21], -13057);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][21], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][21], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][21], 0);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][21], 0);

	PizzaMenu[playerid][22] = CreatePlayerTextDraw(playerid, 314.000000, 243.000000, "6");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][22], 0);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][22], 5);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][22], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][22], -1);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][22], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][22], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][22], 1);
	PlayerTextDrawUseBox(playerid, PizzaMenu[playerid][22], 1);
	PlayerTextDrawBoxColor(playerid, PizzaMenu[playerid][22], 255);
	PlayerTextDrawTextSize(playerid, PizzaMenu[playerid][22], 221.000000, 140.000000);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][22], 1);
	PlayerTextDrawSetPreviewModel(playerid, PizzaMenu[playerid][22], 2220);
	PlayerTextDrawSetPreviewRot(playerid, PizzaMenu[playerid][22], 0.0, -10.0, 220.0, 1.0);

	PizzaMenu[playerid][23] = CreatePlayerTextDraw(playerid, 444.000000, 324.000000, "Napoletana~n~coca cola~n~pomfrit");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][23], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][23], 2);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][23], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][23], -13057);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][23], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][23], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][23], 0);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][23], 0);

	PizzaMenu[playerid][24] = CreatePlayerTextDraw(playerid, 455.000000, 364.000000, "108.49 $");
	PlayerTextDrawBackgroundColor(playerid, PizzaMenu[playerid][24], 255);
	PlayerTextDrawFont(playerid, PizzaMenu[playerid][24], 3);
	PlayerTextDrawLetterSize(playerid, PizzaMenu[playerid][24], 0.470000, 1.799999);
	PlayerTextDrawColor(playerid, PizzaMenu[playerid][24], -13057);
	PlayerTextDrawSetOutline(playerid, PizzaMenu[playerid][24], 0);
	PlayerTextDrawSetProportional(playerid, PizzaMenu[playerid][24], 1);
	PlayerTextDrawSetShadow(playerid, PizzaMenu[playerid][24], 0);
	PlayerTextDrawSetSelectable(playerid, PizzaMenu[playerid][24], 0);

	for(new i = 0; i < 25; i++) {
		PlayerTextDrawShow(playerid, PizzaMenu[playerid][i]);
	}
}
else if(show == false) {
	for(new i = 0; i < 25; i ++) {
		PlayerTextDrawHide(playerid, PizzaMenu[playerid][i]);
		PlayerTextDrawDestroy(playerid, PizzaMenu[playerid][i]);
		PizzaMenu[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
		CancelSelectTextDraw(playerid);
	}
}
}

//------------------------------------------------------------------------------
stock Police_TVTDControl(playerid, bool:show) {
if(show == true) {
	Police_TV[playerid][0] = CreatePlayerTextDraw(playerid,28.000, 155.500, "LD_DRV:tvbase");
	PlayerTextDrawFont(playerid, Police_TV[playerid][0], 4);
	PlayerTextDrawTextSize(playerid, Police_TV[playerid][0], 178.000, 169.000);
	PlayerTextDrawColor(playerid, Police_TV[playerid][0], FUSIONGAMING);

	Police_TV[playerid][1] = CreatePlayerTextDraw(playerid,23.500, 148.000, "LD_DUAL:tvcorn");
	PlayerTextDrawFont(playerid, Police_TV[playerid][1], 4);
	PlayerTextDrawTextSize(playerid, Police_TV[playerid][1], 100.000, 100.000);
	PlayerTextDrawColor(playerid, Police_TV[playerid][1], -1);

	Police_TV[playerid][2] = CreatePlayerTextDraw(playerid,209.500, 148.000, "LD_DRV:tvcorn");
	PlayerTextDrawFont(playerid, Police_TV[playerid][2], 4);
	PlayerTextDrawTextSize(playerid, Police_TV[playerid][2], -99.500, 104.500);
	PlayerTextDrawColor(playerid, Police_TV[playerid][2], -1);

	Police_TV[playerid][3] = CreatePlayerTextDraw(playerid,23.500, 329.500, "LD_DRV:tvcorn");
	PlayerTextDrawFont(playerid, Police_TV[playerid][3], 4);
	PlayerTextDrawTextSize(playerid, Police_TV[playerid][3], 100.000, -104.000);
	PlayerTextDrawColor(playerid, Police_TV[playerid][3], -1);

	Police_TV[playerid][4] = CreatePlayerTextDraw(playerid,209.500, 329.500, "LD_DRV:tvcorn");
	PlayerTextDrawFont(playerid, Police_TV[playerid][4], 4);
	PlayerTextDrawTextSize(playerid, Police_TV[playerid][4], -98.000, -101.000);
	PlayerTextDrawColor(playerid, Police_TV[playerid][4], -1);

	Police_TV[playerid][5] = CreatePlayerTextDraw(playerid,118.000000, 170.000000, "Police Computer");
	PlayerTextDrawAlignment(playerid, Police_TV[playerid][5], 2);
	PlayerTextDrawBackgroundColor(playerid, Police_TV[playerid][5], 255);
	PlayerTextDrawFont(playerid, Police_TV[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, Police_TV[playerid][5], 0.370000, 0.699999);
	PlayerTextDrawColor(playerid, Police_TV[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, Police_TV[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, Police_TV[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, Police_TV[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, Police_TV[playerid][5], 0);

	Police_TV[playerid][6] = CreatePlayerTextDraw(playerid,115.000000, 177.000000, "-");
	PlayerTextDrawAlignment(playerid, Police_TV[playerid][6], 2);
	PlayerTextDrawBackgroundColor(playerid, Police_TV[playerid][6], 255);
	PlayerTextDrawFont(playerid, Police_TV[playerid][6], 2);
	PlayerTextDrawLetterSize(playerid, Police_TV[playerid][6], 14.970021, 0.699999);
	PlayerTextDrawColor(playerid, Police_TV[playerid][6], 16777215);
	PlayerTextDrawSetOutline(playerid, Police_TV[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, Police_TV[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, Police_TV[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, Police_TV[playerid][6], 0);

	Police_TV[playerid][7] = CreatePlayerTextDraw(playerid,98.000000, 201.000000, "-_Trazenje_po_imenu");
	PlayerTextDrawAlignment(playerid, Police_TV[playerid][7], 2);
	PlayerTextDrawBackgroundColor(playerid, Police_TV[playerid][7], 255);
	PlayerTextDrawFont(playerid, Police_TV[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, Police_TV[playerid][7], 0.370000, 0.699999);
	PlayerTextDrawColor(playerid, Police_TV[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid, Police_TV[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, Police_TV[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, Police_TV[playerid][7], 1);
	PlayerTextDrawTextSize(playerid, Police_TV[playerid][7], 10.000000, 100.000000);
	PlayerTextDrawSetSelectable(playerid, Police_TV[playerid][7], 1);

	Police_TV[playerid][8] = CreatePlayerTextDraw(playerid,111.000000, 212.000000, "-_Trazenje_po_registraciji");
	PlayerTextDrawAlignment(playerid, Police_TV[playerid][8], 2);
	PlayerTextDrawBackgroundColor(playerid, Police_TV[playerid][8], 255);
	PlayerTextDrawFont(playerid, Police_TV[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid, Police_TV[playerid][8], 0.370000, 0.699999);
	PlayerTextDrawColor(playerid, Police_TV[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid, Police_TV[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, Police_TV[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, Police_TV[playerid][8], 1);
	PlayerTextDrawTextSize(playerid, Police_TV[playerid][8], 10.000000, 100.000000);
	PlayerTextDrawSetSelectable(playerid, Police_TV[playerid][8], 1);

	Police_TV[playerid][9] = CreatePlayerTextDraw(playerid,96.000000, 221.000000, "-_Popis_zatvorenika");
	PlayerTextDrawAlignment(playerid, Police_TV[playerid][9], 2);
	PlayerTextDrawBackgroundColor(playerid, Police_TV[playerid][9], 255);
	PlayerTextDrawFont(playerid, Police_TV[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid, Police_TV[playerid][9], 0.370000, 0.699999);
	PlayerTextDrawColor(playerid, Police_TV[playerid][9], -1);
	PlayerTextDrawSetOutline(playerid, Police_TV[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, Police_TV[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, Police_TV[playerid][9], 1);
	PlayerTextDrawTextSize(playerid, Police_TV[playerid][9], 10.000000, 100.000000);
	PlayerTextDrawSetSelectable(playerid, Police_TV[playerid][9], 1);

	Police_TV[playerid][10] = CreatePlayerTextDraw(playerid,97.000000, 241.000000, "-_Popis_osumnjicenih");
	PlayerTextDrawAlignment(playerid, Police_TV[playerid][10], 2);
	PlayerTextDrawBackgroundColor(playerid, Police_TV[playerid][10], 255);
	PlayerTextDrawFont(playerid, Police_TV[playerid][10], 1);
	PlayerTextDrawLetterSize(playerid, Police_TV[playerid][10], 0.370000, 0.699999);
	PlayerTextDrawColor(playerid, Police_TV[playerid][10], -1);
	PlayerTextDrawSetOutline(playerid, Police_TV[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, Police_TV[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, Police_TV[playerid][10], 1);
	PlayerTextDrawTextSize(playerid, Police_TV[playerid][10], 10.000000, 100.000000);
	PlayerTextDrawSetSelectable(playerid, Police_TV[playerid][10], 1);

	Police_TV[playerid][11] = CreatePlayerTextDraw(playerid,88.000000, 231.000000, "-_Poziv_pojacanja");
	PlayerTextDrawAlignment(playerid, Police_TV[playerid][11], 2);
	PlayerTextDrawBackgroundColor(playerid, Police_TV[playerid][11], 255);
	PlayerTextDrawFont(playerid, Police_TV[playerid][11], 1);
	PlayerTextDrawLetterSize(playerid, Police_TV[playerid][11], 0.370000, 0.699999);
	PlayerTextDrawColor(playerid, Police_TV[playerid][11], -1);
	PlayerTextDrawSetOutline(playerid, Police_TV[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, Police_TV[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, Police_TV[playerid][11], 1);
	PlayerTextDrawTextSize(playerid, Police_TV[playerid][11], 10.000000, 100.000000);
	PlayerTextDrawSetSelectable(playerid, Police_TV[playerid][11], 1);

	Police_TV[playerid][12] = CreatePlayerTextDraw(playerid,78.000000, 251.000000, "-_Ocisti_dosije");
	PlayerTextDrawAlignment(playerid, Police_TV[playerid][12], 2);
	PlayerTextDrawBackgroundColor(playerid, Police_TV[playerid][12], 255);
	PlayerTextDrawFont(playerid, Police_TV[playerid][12], 1);
	PlayerTextDrawLetterSize(playerid, Police_TV[playerid][12], 0.370000, 0.699999);
	PlayerTextDrawColor(playerid, Police_TV[playerid][12], -1);
	PlayerTextDrawSetOutline(playerid, Police_TV[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, Police_TV[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, Police_TV[playerid][12], 1);
	PlayerTextDrawTextSize(playerid, Police_TV[playerid][12], 10.000000, 100.000000);
	PlayerTextDrawSetSelectable(playerid, Police_TV[playerid][12], 1);

	Police_TV[playerid][13] = CreatePlayerTextDraw(playerid,87.000000, 261.000000, "-_Postavi_poteru");
	PlayerTextDrawAlignment(playerid, Police_TV[playerid][13], 2);
	PlayerTextDrawBackgroundColor(playerid, Police_TV[playerid][13], 255);
	PlayerTextDrawFont(playerid, Police_TV[playerid][13], 1);
	PlayerTextDrawLetterSize(playerid, Police_TV[playerid][13], 0.370000, 0.699999);
	PlayerTextDrawColor(playerid, Police_TV[playerid][13], -1);
	PlayerTextDrawSetOutline(playerid, Police_TV[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid, Police_TV[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, Police_TV[playerid][13], 1);
	PlayerTextDrawTextSize(playerid, Police_TV[playerid][13], 10.000000, 100.000000);
	PlayerTextDrawSetSelectable(playerid, Police_TV[playerid][13], 1);

	for(new i = 0; i < 14; i++) {
		PlayerTextDrawShow(playerid, Police_TV[playerid][i]);
	}
}
else if(show == false) {
	for(new i = 0; i < 14; i ++) {
		PlayerTextDrawHide(playerid, Police_TV[playerid][i]);
		PlayerTextDrawDestroy(playerid, Police_TV[playerid][i]);
		Police_TV[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
}
}
//------------------------------------------------------------------------------
stock ObjektTDControl(playerid, bool:show) {
if(show == true) {
	ObjektTD[playerid][0] = CreatePlayerTextDraw(playerid,412.000000, 376.000000, "    ");
	PlayerTextDrawBackgroundColor(playerid,ObjektTD[playerid][0], 255);
	PlayerTextDrawFont(playerid,ObjektTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid,ObjektTD[playerid][0], 0.509999, 1.400000);
	PlayerTextDrawColor(playerid,ObjektTD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,ObjektTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,ObjektTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,ObjektTD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,ObjektTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid,ObjektTD[playerid][0], 150);
	PlayerTextDrawTextSize(playerid,ObjektTD[playerid][0], 202.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid,ObjektTD[playerid][0], 0);

	ObjektTD[playerid][1] = CreatePlayerTextDraw(playerid,207.000000, 378.000000, "cena: ~w~1000");
	PlayerTextDrawBackgroundColor(playerid,ObjektTD[playerid][1], 255);
	PlayerTextDrawFont(playerid,ObjektTD[playerid][1], 3);
	PlayerTextDrawLetterSize(playerid,ObjektTD[playerid][1], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,ObjektTD[playerid][1], FUSIONGAMING);
	PlayerTextDrawSetOutline(playerid,ObjektTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,ObjektTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid,ObjektTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid,ObjektTD[playerid][1], 0);

	ObjektTD[playerid][2] = CreatePlayerTextDraw(playerid,380.000000, 400.000000, "ld_beat:right"); // 229.000000, 410.000000
	PlayerTextDrawBackgroundColor(playerid,ObjektTD[playerid][2], 255);
	PlayerTextDrawFont(playerid,ObjektTD[playerid][2], 4);
	PlayerTextDrawLetterSize(playerid,ObjektTD[playerid][2], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,ObjektTD[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,ObjektTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid,ObjektTD[playerid][2], 0);
	PlayerTextDrawUseBox(playerid,ObjektTD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid,ObjektTD[playerid][2], 255);
	PlayerTextDrawTextSize(playerid,ObjektTD[playerid][2], 23.000000, 13.000000);
	PlayerTextDrawSetSelectable(playerid,ObjektTD[playerid][2], 1);

	ObjektTD[playerid][3] = CreatePlayerTextDraw(playerid,387.000000, 375.000000, "ld_beat:cross");
	PlayerTextDrawBackgroundColor(playerid,ObjektTD[playerid][3], 255);
	PlayerTextDrawFont(playerid,ObjektTD[playerid][3], 4);
	PlayerTextDrawLetterSize(playerid,ObjektTD[playerid][3], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,ObjektTD[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,ObjektTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid,ObjektTD[playerid][3], 0);
	PlayerTextDrawUseBox(playerid,ObjektTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid,ObjektTD[playerid][3], 255);
	PlayerTextDrawTextSize(playerid,ObjektTD[playerid][3], 23.000000, 13.000000);
	PlayerTextDrawSetSelectable(playerid,ObjektTD[playerid][3], 1);

	ObjektTD[playerid][4] = CreatePlayerTextDraw(playerid,214.000000, 400.000000, "ld_beat:left"); // 407.000000, 410.000000
	PlayerTextDrawBackgroundColor(playerid,ObjektTD[playerid][4], 255);
	PlayerTextDrawFont(playerid,ObjektTD[playerid][4], 4);
	PlayerTextDrawLetterSize(playerid,ObjektTD[playerid][4], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,ObjektTD[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid,ObjektTD[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid,ObjektTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid,ObjektTD[playerid][4], 1);
	PlayerTextDrawUseBox(playerid,ObjektTD[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid,ObjektTD[playerid][4], 255);
	PlayerTextDrawTextSize(playerid,ObjektTD[playerid][4], 23.000000, 13.000000);
	PlayerTextDrawSetSelectable(playerid,ObjektTD[playerid][4], 1);

	ObjektTD[playerid][5] = CreatePlayerTextDraw(playerid,306.000000, 397.000000, "Kupi namestaj");
	PlayerTextDrawAlignment(playerid, ObjektTD[playerid][5], 2);
	PlayerTextDrawBackgroundColor(playerid,ObjektTD[playerid][5], 255);
	PlayerTextDrawFont(playerid,ObjektTD[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid,ObjektTD[playerid][5], 0.390000, 1.000000);
	PlayerTextDrawColor(playerid,ObjektTD[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid,ObjektTD[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid,ObjektTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid,ObjektTD[playerid][5], 1);
	PlayerTextDrawTextSize(playerid,ObjektTD[playerid][5], 200.000000, 100.000000);
	PlayerTextDrawSetSelectable(playerid,ObjektTD[playerid][5], 1);

	for(new i = 0; i < 6; i++) {
		PlayerTextDrawShow(playerid, ObjektTD[playerid][i]);
	}
}
else if(show == false) {
	for(new i = 0; i < 6; i ++) {
		PlayerTextDrawHide(playerid, ObjektTD[playerid][i]);
		PlayerTextDrawDestroy(playerid, ObjektTD[playerid][i]);
		ObjektTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
}
}
//------------------------------------------------------------------------------
stock OrmarTDControl(playerid, bool:show) {
if(show == true) {
	Ormar[playerid][0] = CreatePlayerTextDraw(playerid,475.000000, 332.000000, "           ");
	PlayerTextDrawBackgroundColor(playerid,Ormar[playerid][0], FUSIONGAMING);
	PlayerTextDrawFont(playerid,Ormar[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid,Ormar[playerid][0], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,Ormar[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,Ormar[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,Ormar[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,Ormar[playerid][0], 5);
	PlayerTextDrawUseBox(playerid,Ormar[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid,Ormar[playerid][0], 100);
	PlayerTextDrawTextSize(playerid,Ormar[playerid][0], 139.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid,Ormar[playerid][0], 0);

	Ormar[playerid][1] = CreatePlayerTextDraw(playerid,334.000000, 419.000000, "-");
	PlayerTextDrawBackgroundColor(playerid,Ormar[playerid][1], 255);
	PlayerTextDrawFont(playerid,Ormar[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid,Ormar[playerid][1], 10.220003, 1.000000);
	PlayerTextDrawColor(playerid,Ormar[playerid][1], FUSIONGAMING);
	PlayerTextDrawSetOutline(playerid,Ormar[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,Ormar[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid,Ormar[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid,Ormar[playerid][1], 0);

	Ormar[playerid][2] = CreatePlayerTextDraw(playerid,234.000000, 338.000000, "-");
	PlayerTextDrawBackgroundColor(playerid,Ormar[playerid][2], 255);
	PlayerTextDrawFont(playerid,Ormar[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid,Ormar[playerid][2], 10.220003, 1.000000);
	PlayerTextDrawColor(playerid,Ormar[playerid][2], FUSIONGAMING);
	PlayerTextDrawSetOutline(playerid,Ormar[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,Ormar[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid,Ormar[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid,Ormar[playerid][2], 0);

	Ormar[playerid][3] = CreatePlayerTextDraw(playerid,140.000000, 344.000000, "New Textdraw");
	PlayerTextDrawBackgroundColor(playerid,Ormar[playerid][3], 0);
	PlayerTextDrawFont(playerid,Ormar[playerid][3], 5);
	PlayerTextDrawLetterSize(playerid,Ormar[playerid][3], 0.0000, 0.0000);
	PlayerTextDrawColor(playerid,Ormar[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,Ormar[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid,Ormar[playerid][3], 1);
	PlayerTextDrawUseBox(playerid,Ormar[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid,Ormar[playerid][3], 255);
	PlayerTextDrawTextSize(playerid,Ormar[playerid][3], 103.000000, 80.000000);
	PlayerTextDrawSetPreviewModel(playerid, Ormar[playerid][3], 29);
	PlayerTextDrawSetPreviewRot(playerid, Ormar[playerid][3], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,Ormar[playerid][3], 1);

	Ormar[playerid][4] = CreatePlayerTextDraw(playerid,261.000000, 344.000000, "New Textdraw");
	PlayerTextDrawBackgroundColor(playerid,Ormar[playerid][4], 0);
	PlayerTextDrawFont(playerid,Ormar[playerid][4], 5);
	PlayerTextDrawLetterSize(playerid,Ormar[playerid][4], 0.000, 0.000);
	PlayerTextDrawColor(playerid,Ormar[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid,Ormar[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid,Ormar[playerid][4], 1);
	PlayerTextDrawUseBox(playerid,Ormar[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid,Ormar[playerid][4], 255);
	PlayerTextDrawTextSize(playerid,Ormar[playerid][4], 103.000000, 80.000000);
	PlayerTextDrawSetPreviewModel(playerid, Ormar[playerid][4], 19);
	PlayerTextDrawSetPreviewRot(playerid, Ormar[playerid][4], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,Ormar[playerid][4], 1);

	Ormar[playerid][5] = CreatePlayerTextDraw(playerid,377.000000, 344.000000, "New Textdraw");
	PlayerTextDrawBackgroundColor(playerid,Ormar[playerid][5], 0);
	PlayerTextDrawFont(playerid,Ormar[playerid][5], 5);
	PlayerTextDrawLetterSize(playerid,Ormar[playerid][5], 0.000, 0.000);
	PlayerTextDrawColor(playerid,Ormar[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid,Ormar[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid,Ormar[playerid][5], 1);
	PlayerTextDrawUseBox(playerid,Ormar[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid,Ormar[playerid][5], 255);
	PlayerTextDrawTextSize(playerid,Ormar[playerid][5], 103.000000, 80.000000);
	PlayerTextDrawSetPreviewModel(playerid, Ormar[playerid][5], 110);
	PlayerTextDrawSetPreviewRot(playerid, Ormar[playerid][5], 0.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid,Ormar[playerid][5], 1);

	Ormar[playerid][6] = CreatePlayerTextDraw(playerid,234.000000, 419.000000, "-");
	PlayerTextDrawBackgroundColor(playerid,Ormar[playerid][6], 255);
	PlayerTextDrawFont(playerid,Ormar[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid,Ormar[playerid][6], 10.220003, 1.000000);
	PlayerTextDrawColor(playerid,Ormar[playerid][6], FUSIONGAMING);
	PlayerTextDrawSetOutline(playerid,Ormar[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid,Ormar[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid,Ormar[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid,Ormar[playerid][6], 0);

	Ormar[playerid][7] = CreatePlayerTextDraw(playerid,134.000000, 419.000000, "-");
	PlayerTextDrawBackgroundColor(playerid,Ormar[playerid][7], 255);
	PlayerTextDrawFont(playerid,Ormar[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid,Ormar[playerid][7], 10.220003, 1.000000);
	PlayerTextDrawColor(playerid,Ormar[playerid][7], FUSIONGAMING);
	PlayerTextDrawSetOutline(playerid,Ormar[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid,Ormar[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid,Ormar[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid,Ormar[playerid][7], 0);

	Ormar[playerid][8] = CreatePlayerTextDraw(playerid, 305.000000, 330.000000, "Izaberi_odecu");
	PlayerTextDrawBackgroundColor(playerid,Ormar[playerid][8], 255);
	PlayerTextDrawFont(playerid,Ormar[playerid][8], 0);
	PlayerTextDrawLetterSize(playerid,Ormar[playerid][8], 0.500000, 1.000000);
	PlayerTextDrawTextSize(playerid,Ormar[playerid][8], 40.000000, 10.000000);
	PlayerTextDrawColor(playerid,Ormar[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid,Ormar[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid,Ormar[playerid][8], 1);
	PlayerTextDrawAlignment(playerid, Ormar[playerid][8], 2);
	PlayerTextDrawSetShadow(playerid, Ormar[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, Ormar[playerid][8], 1);

	Ormar[playerid][9] = CreatePlayerTextDraw(playerid,458.000000, 331.000000, "X");
	PlayerTextDrawBackgroundColor(playerid,Ormar[playerid][9], 255);
	PlayerTextDrawFont(playerid,Ormar[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid,Ormar[playerid][9], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,Ormar[playerid][9], 0x005b87FF);
	PlayerTextDrawSetOutline(playerid,Ormar[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid,Ormar[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid,Ormar[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid,Ormar[playerid][9], 1);

}
else if(show == false) {
	for(new i = 0; i < 10; i ++) {
		PlayerTextDrawHide(playerid, Ormar[playerid][i]);
		PlayerTextDrawDestroy(playerid, Ormar[playerid][i]);
		Ormar[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
}
}
//------------------------------------------------------------------------------
stock CKilometriTDControl(playerid, bool:show) {

if(show == true) {

		CKilometri[playerid][0] = CreatePlayerTextDraw(playerid, 624.500000, 242.416671, "usebox");
		PlayerTextDrawLetterSize(playerid, CKilometri[playerid][0], 0.000000, 3.507404);
		PlayerTextDrawTextSize(playerid, CKilometri[playerid][0], 501.750000, 0.000000);
		PlayerTextDrawAlignment(playerid, CKilometri[playerid][0], 1);
		PlayerTextDrawColor(playerid, CKilometri[playerid][0], 0);
		PlayerTextDrawUseBox(playerid, CKilometri[playerid][0], true);
		PlayerTextDrawBoxColor(playerid, CKilometri[playerid][0], 102);
		PlayerTextDrawSetShadow(playerid, CKilometri[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, CKilometri[playerid][0], 0);
		PlayerTextDrawFont(playerid, CKilometri[playerid][0], 0);

		CKilometri[playerid][2] = CreatePlayerTextDraw(playerid, 562.250000, 260.583343, "~w~cena: ~b~60");
		PlayerTextDrawLetterSize(playerid, CKilometri[playerid][2], 0.373749, 1.104166);
		PlayerTextDrawAlignment(playerid, CKilometri[playerid][2], 2);
		PlayerTextDrawColor(playerid, CKilometri[playerid][2], -1);
		PlayerTextDrawSetShadow(playerid, CKilometri[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, CKilometri[playerid][2], 1);
		PlayerTextDrawBackgroundColor(playerid, CKilometri[playerid][2], 51);
		PlayerTextDrawFont(playerid, CKilometri[playerid][2], 3);
		PlayerTextDrawSetProportional(playerid, CKilometri[playerid][2], 1);

		CKilometri[playerid][1] = CreatePlayerTextDraw(playerid, 564.125000, 247.166778, "~w~Chicken Burger");
		PlayerTextDrawLetterSize(playerid, CKilometri[playerid][1], 0.373749, 1.104166);
		PlayerTextDrawAlignment(playerid, CKilometri[playerid][1], 2);
		PlayerTextDrawColor(playerid, CKilometri[playerid][1], -1);
		PlayerTextDrawSetShadow(playerid, CKilometri[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, CKilometri[playerid][1], 1);
		PlayerTextDrawBackgroundColor(playerid, CKilometri[playerid][1], 51);
		PlayerTextDrawFont(playerid, CKilometri[playerid][1], 3);
		PlayerTextDrawSetProportional(playerid, CKilometri[playerid][1], 1);

		for(new i = 0; i < 3; i ++) {
			PlayerTextDrawShow(playerid, CKilometri[playerid][i]);
		}
}
else if(show == false) {
	for(new i = 0; i < 3; i ++) {
		PlayerTextDrawHide(playerid, CKilometri[playerid][i]);
		PlayerTextDrawDestroy(playerid, CKilometri[playerid][i]);
		CKilometri[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
}
}
//------------------------------------------------------------------------------

stock BuyCarTDControl(playerid, bool:show) {

if(show == true) {

	BuyCar[playerid][0] = CreatePlayerTextDraw(playerid, 470.750000, 311.833312, "usebox");
	PlayerTextDrawLetterSize(playerid, BuyCar[playerid][0], 0.000000, 9.146299);
	PlayerTextDrawTextSize(playerid, BuyCar[playerid][0], 162.375000, 0.000000);
	PlayerTextDrawAlignment(playerid, BuyCar[playerid][0], 1);
	PlayerTextDrawColor(playerid, BuyCar[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, BuyCar[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, BuyCar[playerid][0], 102);
	PlayerTextDrawSetShadow(playerid, BuyCar[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, BuyCar[playerid][0], 0);
	PlayerTextDrawFont(playerid, BuyCar[playerid][0], 0);

	BuyCar[playerid][1] = CreatePlayerTextDraw(playerid, 448.750000, 398.416625, "ld_beat:right");
	PlayerTextDrawLetterSize(playerid, BuyCar[playerid][1], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, BuyCar[playerid][1], 18.125000, 11.083333);
	PlayerTextDrawAlignment(playerid, BuyCar[playerid][1], 2);
	PlayerTextDrawColor(playerid, BuyCar[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, BuyCar[playerid][1], true);
	PlayerTextDrawBoxColor(playerid, BuyCar[playerid][1], 255);
	PlayerTextDrawSetShadow(playerid, BuyCar[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, BuyCar[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, BuyCar[playerid][1], 51);
	PlayerTextDrawFont(playerid, BuyCar[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, BuyCar[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, BuyCar[playerid][1], true);

	BuyCar[playerid][2] = CreatePlayerTextDraw(playerid, 176.875000, 330.749816, "-");
	PlayerTextDrawLetterSize(playerid, BuyCar[playerid][2], 19.209993, -0.190833);
	PlayerTextDrawAlignment(playerid, BuyCar[playerid][2], 1);
	PlayerTextDrawColor(playerid, BuyCar[playerid][2], -1308622593);
	PlayerTextDrawSetShadow(playerid, BuyCar[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, BuyCar[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, BuyCar[playerid][2], 51);
	PlayerTextDrawFont(playerid, BuyCar[playerid][2], 3);
	PlayerTextDrawSetProportional(playerid, BuyCar[playerid][2], 1);

	BuyCar[playerid][3] = CreatePlayerTextDraw(playerid, 318.500000, 314.249755, "Hotring Racer A");
	PlayerTextDrawLetterSize(playerid, BuyCar[playerid][3], 0.406874, 1.331665);
	PlayerTextDrawAlignment(playerid, BuyCar[playerid][3], 2);
	PlayerTextDrawColor(playerid, BuyCar[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, BuyCar[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, BuyCar[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, BuyCar[playerid][3], 51);
	PlayerTextDrawFont(playerid, BuyCar[playerid][3], 3);
	PlayerTextDrawSetProportional(playerid, BuyCar[playerid][3], 1);

	BuyCar[playerid][4] = CreatePlayerTextDraw(playerid, 167.875000, 398.249816, "ld_beat:left");
	PlayerTextDrawLetterSize(playerid, BuyCar[playerid][4], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, BuyCar[playerid][4], 18.125000, 11.083333);
	PlayerTextDrawAlignment(playerid, BuyCar[playerid][4], 2);
	PlayerTextDrawColor(playerid, BuyCar[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, BuyCar[playerid][4], true);
	PlayerTextDrawBoxColor(playerid, BuyCar[playerid][4], 255);
	PlayerTextDrawSetShadow(playerid, BuyCar[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, BuyCar[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, BuyCar[playerid][4], 51);
	PlayerTextDrawFont(playerid, BuyCar[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, BuyCar[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, BuyCar[playerid][4], true);

	BuyCar[playerid][5] = CreatePlayerTextDraw(playerid, 178.750000, 342.416687, "New Textdraw");
	PlayerTextDrawBackgroundColor(playerid,BuyCar[playerid][5], 0);
	PlayerTextDrawLetterSize(playerid, BuyCar[playerid][5], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, BuyCar[playerid][5], 48.750000, 49.583347);
	PlayerTextDrawAlignment(playerid, BuyCar[playerid][5], 1);
	PlayerTextDrawColor(playerid, BuyCar[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, BuyCar[playerid][5], true);
	PlayerTextDrawBoxColor(playerid, BuyCar[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, BuyCar[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, BuyCar[playerid][5], 1);
	PlayerTextDrawFont(playerid, BuyCar[playerid][5], 5);
	PlayerTextDrawSetProportional(playerid, BuyCar[playerid][5], 1);
	PlayerTextDrawSetPreviewModel(playerid, BuyCar[playerid][5], 411);
	PlayerTextDrawSetPreviewRot(playerid, BuyCar[playerid][5], 0.000000, 0.000000, 90.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, BuyCar[playerid][5], 0);

	BuyCar[playerid][6] = CreatePlayerTextDraw(playerid, 352.625000, 322.333251, "New Textdraw");
	PlayerTextDrawBackgroundColor(playerid,BuyCar[playerid][6], 0);
	PlayerTextDrawLetterSize(playerid, BuyCar[playerid][6], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, BuyCar[playerid][6], 48.750000, 49.583347);
	PlayerTextDrawAlignment(playerid, BuyCar[playerid][6], 1);
	PlayerTextDrawColor(playerid, BuyCar[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, BuyCar[playerid][6], true);
	PlayerTextDrawBoxColor(playerid, BuyCar[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, BuyCar[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, BuyCar[playerid][6], 1);
	PlayerTextDrawFont(playerid, BuyCar[playerid][6], 5);
	PlayerTextDrawSetProportional(playerid, BuyCar[playerid][6], 1);
	PlayerTextDrawSetPreviewModel(playerid, BuyCar[playerid][6], 1212);
	PlayerTextDrawSetPreviewRot(playerid, BuyCar[playerid][6], 0.000000, 0.000000, 45.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, BuyCar[playerid][6], 0);
	PlayerTextDrawSetSelectable(playerid, BuyCar[playerid][6], true);

	BuyCar[playerid][7] = CreatePlayerTextDraw(playerid, 397.000000, 340.999786, "1000000$");
	//PlayerTextDrawTextSize(playerid, BuyCar[playerid][7], 40.999786, 40.000000);
	PlayerTextDrawLetterSize(playerid, BuyCar[playerid][7], 0.406874, 1.331665);
	PlayerTextDrawAlignment(playerid, BuyCar[playerid][7], 1);
	PlayerTextDrawColor(playerid, BuyCar[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, BuyCar[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, BuyCar[playerid][7], 1);
	PlayerTextDrawBackgroundColor(playerid, BuyCar[playerid][7], 51);
	PlayerTextDrawFont(playerid, BuyCar[playerid][7], 3);
	PlayerTextDrawSetProportional(playerid, BuyCar[playerid][7], 1);
	//PlayerTextDrawSetSelectable(playerid, BuyCar[playerid][7], true);

	BuyCar[playerid][8] = CreatePlayerTextDraw(playerid, 447.250000, 313.083221, "ld_beat:cross");
	PlayerTextDrawLetterSize(playerid, BuyCar[playerid][8], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, BuyCar[playerid][8], 18.125000, 11.083333);
	PlayerTextDrawAlignment(playerid, BuyCar[playerid][8], 2);
	PlayerTextDrawColor(playerid, BuyCar[playerid][8], -1);
	PlayerTextDrawUseBox(playerid, BuyCar[playerid][8], true);
	PlayerTextDrawBoxColor(playerid, BuyCar[playerid][8], 255);
	PlayerTextDrawSetShadow(playerid, BuyCar[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, BuyCar[playerid][8], 1);
	PlayerTextDrawBackgroundColor(playerid, BuyCar[playerid][8], 51);
	PlayerTextDrawFont(playerid, BuyCar[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, BuyCar[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, BuyCar[playerid][8], true);

	BuyCar[playerid][9] = CreatePlayerTextDraw(playerid, 242.250000, 342.250000, "New Textdraw");
	PlayerTextDrawBackgroundColor(playerid,BuyCar[playerid][9], 0);
	PlayerTextDrawLetterSize(playerid, BuyCar[playerid][9], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, BuyCar[playerid][9], 48.750000, 49.583347);
	PlayerTextDrawAlignment(playerid, BuyCar[playerid][9], 1);
	PlayerTextDrawColor(playerid, BuyCar[playerid][9], -1);
	PlayerTextDrawUseBox(playerid, BuyCar[playerid][9], true);
	PlayerTextDrawBoxColor(playerid, BuyCar[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, BuyCar[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, BuyCar[playerid][9], 1);
	PlayerTextDrawFont(playerid, BuyCar[playerid][9], 5);
	PlayerTextDrawSetProportional(playerid, BuyCar[playerid][9], 1);
	PlayerTextDrawSetPreviewModel(playerid, BuyCar[playerid][9], 411);
	PlayerTextDrawSetPreviewRot(playerid, BuyCar[playerid][9], 90.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, BuyCar[playerid][9], 0);

	BuyCar[playerid][10] = CreatePlayerTextDraw(playerid, 354.250000, 350.749877, "New Textdraw");
	PlayerTextDrawBackgroundColor(playerid,BuyCar[playerid][10], 0);
	PlayerTextDrawLetterSize(playerid, BuyCar[playerid][10], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, BuyCar[playerid][10], 48.750000, 49.583347);
	PlayerTextDrawAlignment(playerid, BuyCar[playerid][10], 1);
	PlayerTextDrawColor(playerid, BuyCar[playerid][10], -1);
	PlayerTextDrawUseBox(playerid, BuyCar[playerid][10], true);
	PlayerTextDrawBoxColor(playerid, BuyCar[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, BuyCar[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, BuyCar[playerid][10], 1);
	PlayerTextDrawFont(playerid, BuyCar[playerid][10], 5);
	PlayerTextDrawSetProportional(playerid, BuyCar[playerid][10], 1);
	PlayerTextDrawSetPreviewModel(playerid, BuyCar[playerid][10], 19941);
	PlayerTextDrawSetPreviewRot(playerid, BuyCar[playerid][10], 0.000000, 0.000000, 45.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, BuyCar[playerid][10], 0);
	PlayerTextDrawSetSelectable(playerid, BuyCar[playerid][10], true);

	BuyCar[playerid][11] = CreatePlayerTextDraw(playerid, 397.375000, 368.249908, "5000g");
	//PlayerTextDrawTextSize(playerid, BuyCar[playerid][11], 40.000000, 40.000000);
	PlayerTextDrawLetterSize(playerid, BuyCar[playerid][11], 0.406874, 1.331665);
	PlayerTextDrawAlignment(playerid, BuyCar[playerid][11], 1);
	PlayerTextDrawColor(playerid, BuyCar[playerid][11], -1);
	PlayerTextDrawSetShadow(playerid, BuyCar[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, BuyCar[playerid][11], 1);
	PlayerTextDrawBackgroundColor(playerid, BuyCar[playerid][11], 51);
	PlayerTextDrawFont(playerid, BuyCar[playerid][11], 3);
	PlayerTextDrawSetProportional(playerid, BuyCar[playerid][11], 1);
	//PlayerTextDrawSetSelectable(playerid, BuyCar[playerid][11], true);

	BuyCar[playerid][12] = CreatePlayerTextDraw(playerid, 302.875000, 342.833343, "New Textdraw");
	PlayerTextDrawBackgroundColor(playerid,BuyCar[playerid][12], 0);
	PlayerTextDrawLetterSize(playerid, BuyCar[playerid][12], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, BuyCar[playerid][12], 48.750000, 49.583347);
	PlayerTextDrawAlignment(playerid, BuyCar[playerid][12], 1);
	PlayerTextDrawColor(playerid, BuyCar[playerid][12], -1);
	PlayerTextDrawUseBox(playerid, BuyCar[playerid][12], true);
	PlayerTextDrawBoxColor(playerid, BuyCar[playerid][12], 0);
	PlayerTextDrawSetShadow(playerid, BuyCar[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, BuyCar[playerid][12], 1);
	PlayerTextDrawFont(playerid, BuyCar[playerid][12], 5);
	PlayerTextDrawSetProportional(playerid, BuyCar[playerid][12], 1);
	PlayerTextDrawSetPreviewModel(playerid, BuyCar[playerid][12], 411);
	PlayerTextDrawSetPreviewRot(playerid, BuyCar[playerid][12], 270.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, BuyCar[playerid][12], 0);

	BuyCar[playerid][13] = CreatePlayerTextDraw(playerid, 190.750000, 398.750030, "usebox");
	PlayerTextDrawLetterSize(playerid, BuyCar[playerid][13], 0.000000, 1.303701);
	PlayerTextDrawTextSize(playerid, BuyCar[playerid][13], 162.375000, 0.000000);
	PlayerTextDrawAlignment(playerid, BuyCar[playerid][13], 1);
	PlayerTextDrawColor(playerid, BuyCar[playerid][13], 0);
	PlayerTextDrawUseBox(playerid, BuyCar[playerid][13], true);
	PlayerTextDrawBoxColor(playerid, BuyCar[playerid][13], 102);
	PlayerTextDrawSetShadow(playerid, BuyCar[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, BuyCar[playerid][13], 0);
	PlayerTextDrawFont(playerid, BuyCar[playerid][13], 0);

	BuyCar[playerid][14] = CreatePlayerTextDraw(playerid, 471.125000, 398.583251, "usebox");
	PlayerTextDrawLetterSize(playerid, BuyCar[playerid][14], 0.000000, 1.303701);
	PlayerTextDrawTextSize(playerid, BuyCar[playerid][14], 441.750000, 0.000000);
	PlayerTextDrawAlignment(playerid, BuyCar[playerid][14], 1);
	PlayerTextDrawColor(playerid, BuyCar[playerid][14], 0);
	PlayerTextDrawUseBox(playerid, BuyCar[playerid][14], true);
	PlayerTextDrawBoxColor(playerid, BuyCar[playerid][14], 102);
	PlayerTextDrawSetShadow(playerid, BuyCar[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, BuyCar[playerid][14], 0);
	PlayerTextDrawFont(playerid, BuyCar[playerid][14], 0);

	for(new i = 0; i < 15; i ++) {
		PlayerTextDrawShow(playerid, BuyCar[playerid][i]);
	}

	BuyCarTDShowed[playerid] = true;

}
else if(show == false) {
	for(new i = 0; i < 15; i ++) {
		PlayerTextDrawHide(playerid, BuyCar[playerid][i]);
		PlayerTextDrawDestroy(playerid, BuyCar[playerid][i]);
		BuyCar[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}

	BuyCarTDShowed[playerid] = false;}
}
//------------------------------------------------------------------------------
stock VremeTDControl(playerid, bool:show) {
if(show == true) {

	PVreme[playerid] = CreatePlayerTextDraw(playerid, 472.250000, 269.916778, "~w~Pricekajte, Vreme: ~b~180");
	PlayerTextDrawLetterSize(playerid, PVreme[playerid], 0.373749, 1.104166);
	PlayerTextDrawAlignment(playerid, PVreme[playerid], 1);
	PlayerTextDrawColor(playerid, PVreme[playerid], -1);
	PlayerTextDrawSetShadow(playerid, PVreme[playerid], 0);
	PlayerTextDrawSetOutline(playerid, PVreme[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, PVreme[playerid], 51);
	PlayerTextDrawFont(playerid, PVreme[playerid], 3);
	PlayerTextDrawSetProportional(playerid, PVreme[playerid], 1);

	PlayerTextDrawShow(playerid, PVreme[playerid]);

}
else if(show == false) {

	PlayerTextDrawHide(playerid, PVreme[playerid]);
	PlayerTextDrawDestroy(playerid, PVreme[playerid]);
	PVreme[playerid] = PlayerText:INVALID_TEXT_DRAW;}
}
//------------------------------------------------------------------------------
stock LoginTDControl(playerid, bool:show) {

if(show == true) {
	LoginTD[playerid][0] = CreatePlayerTextDraw(playerid, -16.881357, 1.583333, "box");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][0], 0.000000, 11.218153);
	PlayerTextDrawTextSize(playerid, LoginTD[playerid][0], 644.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, LoginTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, LoginTD[playerid][0], 111);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][0], 0);

	LoginTD[playerid][1] = CreatePlayerTextDraw(playerid, -13.601709, 345.166625, "box");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][1], 0.000000, 11.218153);
	PlayerTextDrawTextSize(playerid, LoginTD[playerid][1], 643.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, LoginTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, LoginTD[playerid][1], 111);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][1], 0);

	LoginTD[playerid][2] = CreatePlayerTextDraw(playerid, 278.755432, 61.666690, "amin");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][2], 0.414991, 2.410831);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][2], 8503295);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][2], 0);

	LoginTD[playerid][3] = CreatePlayerTextDraw(playerid, 282.035064, 50.583351, "fusion");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][3], 0.244450, 1.722498);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][3], 0);

	LoginTD[playerid][4] = CreatePlayerTextDraw(playerid, 245.490432, 80.916679, "]");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][4], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][4], 0);

	LoginTD[playerid][5] = CreatePlayerTextDraw(playerid, 339.195739, 80.916694, "]");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][5], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][5], 0);

	LoginTD[playerid][6] = CreatePlayerTextDraw(playerid, 349.971923, 60.499992, "]");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][6], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][6], 8503295);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][6], 0);

	LoginTD[playerid][7] = CreatePlayerTextDraw(playerid, 238.931396, 58.750000, "]");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][7], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][7], 8503295);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][7], 0);

	LoginTD[playerid][8] = CreatePlayerTextDraw(playerid, 246.427734, 38.333343, "]");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][8], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][8], 0);

	LoginTD[playerid][9] = CreatePlayerTextDraw(playerid, 338.258087, 37.166671, "]");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][9], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][9], 0);

	LoginTD[playerid][10] = CreatePlayerTextDraw(playerid, -0.014590, 341.666656, "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][10], 0.657687, 0.485832);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][10], 0);

	LoginTD[playerid][11] = CreatePlayerTextDraw(playerid, 3.265058, 341.666625, "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][11], 0.657687, 0.485832);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][11], 8503295);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][11], 0);

	LoginTD[playerid][12] = CreatePlayerTextDraw(playerid, 7.013226, 341.666656, "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][12], 0.657687, 0.485832);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][12], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][12], 255);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][12], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][12], 0);

	LoginTD[playerid][13] = CreatePlayerTextDraw(playerid, -7.042407, 100.166664, "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][13], 0.657687, 0.485832);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][13], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][13], 255);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][13], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][13], 0);

	LoginTD[playerid][14] = CreatePlayerTextDraw(playerid, -2.357194, 100.166679, "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][14], 0.657687, 0.485832);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][14], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][14], 8503295);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][14], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][14], 1);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][14], 0);

	LoginTD[playerid][15] = CreatePlayerTextDraw(playerid, -9.385012, 100.166664, "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][15], 0.657687, 0.485832);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][15], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][15], -1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][15], 0);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][15], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][15], 1);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][15], 0);

	LoginTD[playerid][16] = CreatePlayerTextDraw(playerid, 13.104002, 352.166687, "Developed_by:");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][16], 0.237891, 1.174165);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][16], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][16], 8503295);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][16], 1);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][16], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][16], 2);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][16], 0);

	LoginTD[playerid][17] = CreatePlayerTextDraw(playerid, 558.462768, 352.749877, "Credits:");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][17], 0.237891, 1.174165);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][17], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][17], 8503295);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][17], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][17], 1);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][17], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][17], 2);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][17], 0);

	LoginTD[playerid][18] = CreatePlayerTextDraw(playerid, 307.334594, 383.666473, "'United_we_stand,~n~Divided_we_fall,~n~Union_is_Strenght!'");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][18], 0.237891, 1.174165);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][18], 2);
	PlayerTextDrawColor(playerid, LoginTD[playerid][18], 8503295);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][18], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][18], 1);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][18], -222);
	PlayerTextDrawFont(playerid, LoginTD[playerid][18], 2);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][18], 0);

	LoginTD[playerid][19] = CreatePlayerTextDraw(playerid, 13.571806, 369.083068, "Vasic");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][19], 0.237891, 1.174165);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][19], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][19], -1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][19], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][19], 1);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][19], 8503064);
	PlayerTextDrawFont(playerid, LoginTD[playerid][19], 2);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][19], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][19], 0);

	LoginTD[playerid][20] = CreatePlayerTextDraw(playerid, 580.482543, 370.249664, "E-Trail_Hosting~n~Bryant~n~Bukenzi");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][20], 0.237891, 1.174165);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][20], 2);
	PlayerTextDrawColor(playerid, LoginTD[playerid][20], -1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][20], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][20], 1);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][20], 8503086);
	PlayerTextDrawFont(playerid, LoginTD[playerid][20], 2);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][20], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][20], 0);

	LoginTD[playerid][21] = CreatePlayerTextDraw(playerid, 257.671752, 54.083366, "G____G");
	PlayerTextDrawLetterSize(playerid, LoginTD[playerid][21], 0.789340, 3.227503);
	PlayerTextDrawAlignment(playerid, LoginTD[playerid][21], 1);
	PlayerTextDrawColor(playerid, LoginTD[playerid][21], 8503295);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][21], 0);
	PlayerTextDrawSetOutline(playerid, LoginTD[playerid][21], 1);
	PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][21], 255);
	PlayerTextDrawFont(playerid, LoginTD[playerid][21], 2);
	PlayerTextDrawSetProportional(playerid, LoginTD[playerid][21], 1);
	PlayerTextDrawSetShadow(playerid, LoginTD[playerid][21], 0);

	for(new i = 0; i < 22; i ++) {
		PlayerTextDrawShow(playerid, LoginTD[playerid][i]);
	}
}
else if(show == false) {

	for(new i = 0; i < 22; i ++) {

		PlayerTextDrawHide(playerid, LoginTD[playerid][i]);
		PlayerTextDrawDestroy(playerid, LoginTD[playerid][i]);
		LoginTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
}
}
//------------------------------------------------------------------------------
stock RegisterTDControl(playerid, bool:show) {
if(show == true) {
	RegisterTD[playerid][0] = CreatePlayerTextDraw(playerid, 507.250000, 14.844402, "box");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][0], 0.000000, 25.100004);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][0], 628.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][0], 102);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][0], 0);

	RegisterTD[playerid][1] = CreatePlayerTextDraw(playerid, 506.750274, -7.133349, "");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][1], 122.000000, 69.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][1], 255);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][1], 0);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][1], 5);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][1], 0);
	PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][1], 2267);
	PlayerTextDrawSetPreviewRot(playerid, RegisterTD[playerid][1], 295.000000, 360.000000, 0.000000, 0.684128);

	RegisterTD[playerid][2] = CreatePlayerTextDraw(playerid, 507.500000, 60.866699, "box");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][2], 0.000000, 1.976000);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][2], 628.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][2], 85);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][2], 0);

	RegisterTD[playerid][3] = CreatePlayerTextDraw(playerid, 567.540405, 16.455579, "-_Fusion_~w~gaming_-");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][3], 0.234999, 1.167555);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][3], 0.000000, 610.902954);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][3], 2);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][3], 10407167);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][3], 16711680);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][3], 1);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][3], 9474083);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][3], 1);

	RegisterTD[playerid][4] = CreatePlayerTextDraw(playerid, 564.940429, 45.333328, "Popunite_prazna_polja");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][4], 0.146999, 0.840889);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][4], 0.000000, 610.902954);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][4], -144);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][4], 16711680);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][4], 1);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][4], 9474083);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][4], 1);

	RegisterTD[playerid][5] = CreatePlayerTextDraw(playerid, 507.500000, 85.655204, "box");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][5], 0.000000, 1.976000);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][5], 628.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][5], 85);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][5], 0);

	RegisterTD[playerid][6] = CreatePlayerTextDraw(playerid, 507.500000, 110.554824, "box");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][6], 0.000000, 1.976000);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][6], 628.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][6], 85);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][6], 0);

	RegisterTD[playerid][7] = CreatePlayerTextDraw(playerid, 507.500000, 135.655029, "box");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][7], 0.000000, 1.976000);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][7], 628.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][7], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][7], 85);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][7], 0);

	RegisterTD[playerid][8] = CreatePlayerTextDraw(playerid, 507.500000, 161.456604, "box");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][8], 0.000000, 1.976000);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][8], 628.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][8], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][8], 85);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][8], 0);

	RegisterTD[playerid][9] = CreatePlayerTextDraw(playerid, 507.099975, 60.233314, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][9], 16.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][9], -130);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][9], 0);

	RegisterTD[playerid][10] = CreatePlayerTextDraw(playerid, 525.340087, 65.700019, "klik_za_unos_lozinke");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][10], 0.146999, 0.840889);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][10], 583.399658, 10.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][10], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][10], 16711680);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][10], 1);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][10], 1);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][10], 9021236);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][10], 2);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][10], 1);

	RegisterTD[playerid][11] = CreatePlayerTextDraw(playerid, 507.099975, 84.832939, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][11], 16.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][11], -130);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][11], 4);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][11], 0);

	RegisterTD[playerid][12] = CreatePlayerTextDraw(playerid, 525.340087, 90.099647, "klik_za_unos__(e-mail)");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][12], 0.146999, 0.840889);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][12], 583.399658, 10.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][12], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][12], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][12], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][12], 16711680);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][12], 1);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][12], 1);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][12], 9021236);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][12], 2);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][12], 1);

	RegisterTD[playerid][13] = CreatePlayerTextDraw(playerid, 507.099975, 110.032554, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][13], 16.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][13], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][13], -130);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][13], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][13], 4);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][13], 0);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][13], 0);

	RegisterTD[playerid][14] = CreatePlayerTextDraw(playerid, 525.340087, 115.299263, "klik_za_unos__godina");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][14], 0.146999, 0.840889);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][14], 583.399658, 10.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][14], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][14], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][14], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][14], 16711680);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][14], 1);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][14], 1);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][14], 9021236);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][14], 2);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][14], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][14], 1);

	RegisterTD[playerid][15] = CreatePlayerTextDraw(playerid, 506.849975, 135.232727, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][15], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][15], 16.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][15], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][15], -130);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][15], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][15], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][15], 4);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][15], 0);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][15], 0);

	RegisterTD[playerid][16] = CreatePlayerTextDraw(playerid, 525.340087, 140.199813, "klik_za_unos_drzave");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][16], 0.146999, 0.840889);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][16], 583.399658, 10.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][16], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][16], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][16], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][16], 16711680);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][16], 1);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][16], 1);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][16], 9021236);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][16], 2);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][16], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][16], 1);

	RegisterTD[playerid][17] = CreatePlayerTextDraw(playerid, 506.849975, 160.134246, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][17], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][17], 16.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][17], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][17], -130);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][17], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][17], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][17], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][17], 4);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][17], 0);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][17], 0);

	RegisterTD[playerid][18] = CreatePlayerTextDraw(playerid, 525.340087, 165.601364, "klik_za_unos_pola");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][18], 0.146999, 0.840889);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][18], 583.399658, 10.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][18], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][18], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][18], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][18], 16711680);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][18], 1);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][18], 1);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][18], 9021236);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][18], 2);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][18], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][18], 1);

	RegisterTD[playerid][19] = CreatePlayerTextDraw(playerid, 507.500000, 186.658142, "box");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][19], 0.000000, 1.976000);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][19], 628.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][19], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][19], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][19], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][19], 85);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][19], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][19], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][19], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][19], 1);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][19], 1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][19], 0);

	RegisterTD[playerid][20] = CreatePlayerTextDraw(playerid, 506.849975, 186.235839, "LD_BEAT:chit");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][20], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][20], 16.000000, 19.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][20], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][20], -130);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][20], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][20], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][20], 255);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][20], 4);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][20], 0);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][20], 0);

	RegisterTD[playerid][21] = CreatePlayerTextDraw(playerid, 525.340087, 191.802963, "klik_za_odabir_skina");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][21], 0.146999, 0.840889);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][21], 583.399658, 10.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][21], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][21], -1);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][21], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][21], 16711680);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][21], 1);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][21], 1);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][21], 9021236);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][21], 2);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][21], 1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][21], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][21], 1);

	RegisterTD[playerid][22] = CreatePlayerTextDraw(playerid, 506.500274, 190.388595, "");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][22], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][22], 122.000000, 69.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][22], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][22], 255);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][22], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][22], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][22], 0);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][22], 5);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][22], 0);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][22], 0);
	PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][22], 2267);
	PlayerTextDrawSetPreviewRot(playerid, RegisterTD[playerid][22], 241.000000, 360.000000, 360.000000, 0.684128);

	RegisterTD[playerid][23] = CreatePlayerTextDraw(playerid, 552.343383, 222.345428, "register");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][23], 0.234999, 1.167555);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][23], 30.000000, 30.902954);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][23], 2);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][23], 10407167);
	PlayerTextDrawUseBox(playerid, RegisterTD[playerid][23], 1);
	PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][23], 16711680);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][23], 1);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][23], 1);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][23], 9474083);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][23], 2);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][23], 1);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][23], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][23], 1);

	RegisterTD[playerid][24] = CreatePlayerTextDraw(playerid, 93.052734, 215.666687, "");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][24], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][24], 43.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][24], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][24], 255);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][24], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][24], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][24], 0);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][24], 5);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][24], 0);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][24], 0);
	PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][24], 19134);
	PlayerTextDrawSetPreviewRot(playerid, RegisterTD[playerid][24], 0.000000, 90.000000, 90.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][24], 1);

	RegisterTD[playerid][25] = CreatePlayerTextDraw(playerid, 244.385070, 215.666687, "");
	PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][25], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, RegisterTD[playerid][25], 43.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, RegisterTD[playerid][25], 1);
	PlayerTextDrawColor(playerid, RegisterTD[playerid][25], 255);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][25], 0);
	PlayerTextDrawSetOutline(playerid, RegisterTD[playerid][25], 0);
	PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][25], 0);
	PlayerTextDrawFont(playerid, RegisterTD[playerid][25], 5);
	PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][25], 0);
	PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][25], 0);
	PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][25], 19134);
	PlayerTextDrawSetPreviewRot(playerid, RegisterTD[playerid][25], 0.000000, 270.000000, 90.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][25], 1);

	for(new i = 0; i < 24; i ++) {
		PlayerTextDrawShow(playerid, RegisterTD[playerid][i]);
	}

	SelectTextDraw(playerid, FUSIONGAMING);
	ShowedRegister[playerid] = true;

}
else if(show == false) {
	for(new i = 0; i < 26; i ++) {
		PlayerTextDrawHide(playerid, RegisterTD[playerid][i]);
		PlayerTextDrawDestroy(playerid, RegisterTD[playerid][i]);
		RegisterTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}

	ShowedRegister[playerid] = false;}
}
//------------------------------------------------------------------------------
stock Boombox_Place(playerid) {
static
	Float:angle;

GetPlayerFacingAngle(playerid, angle);

strpack(BoomboxInfo[playerid][boomboxURL], "", 128 char);
GetPlayerPos(playerid, BoomboxInfo[playerid][boomboxPos][0], BoomboxInfo[playerid][boomboxPos][1], BoomboxInfo[playerid][boomboxPos][2]);

BoomboxInfo[playerid][boomboxPlaced] = true;
BoomboxInfo[playerid][boomboxInterior] = GetPlayerInterior(playerid);
BoomboxInfo[playerid][boomboxWorld] = GetPlayerVirtualWorld(playerid);
new string[128];
format(string, sizeof(string), "Vlasnik: %s\nKoristi '/radio url' da postavis pesmu\n'/radio podigni' da podignes svoj radio", ImeIgraca(playerid));

BoomboxInfo[playerid][boomboxObject] = CreateDynamicObject(2226, BoomboxInfo[playerid][boomboxPos][0], BoomboxInfo[playerid][boomboxPos][1], BoomboxInfo[playerid][boomboxPos][2] - 0.9, 0.0, 0.0, angle, BoomboxInfo[playerid][boomboxWorld], BoomboxInfo[playerid][boomboxInterior]);
BoomboxInfo[playerid][boomboxText3D] = CreateDynamic3DTextLabel(string, -1, BoomboxInfo[playerid][boomboxPos][0], BoomboxInfo[playerid][boomboxPos][1], BoomboxInfo[playerid][boomboxPos][2] - 0.7, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BoomboxInfo[playerid][boomboxWorld], BoomboxInfo[playerid][boomboxInterior]);

return 1;}

stock Boombox_Nearest(playerid)
{
foreach (new i : Player) if(BoomboxInfo[i][boomboxPlaced] && GetPlayerInterior(playerid) == BoomboxInfo[i][boomboxInterior] && GetPlayerVirtualWorld(playerid) == BoomboxInfo[i][boomboxWorld] && IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxInfo[i][boomboxPos][0], BoomboxInfo[i][boomboxPos][1], BoomboxInfo[i][boomboxPos][2])) {
	return i;}
return INVALID_PLAYER_ID;}

stock Boombox_SetURL(playerid, url[])
{
if(BoomboxInfo[playerid][boomboxPlaced]) {
	strpack(BoomboxInfo[playerid][boomboxURL], url, 256 char);

	foreach (new i : Player) if(Boombox[i] == playerid) {

		StopAudioStreamForPlayer(i);
		PlayAudioStreamForPlayer(i, url, BoomboxInfo[playerid][boomboxPos][0], BoomboxInfo[playerid][boomboxPos][1], BoomboxInfo[playerid][boomboxPos][2], 30.0, 1);
	}
}
return 1;}

stock Boombox_Destroy(playerid)
{
if(BoomboxInfo[playerid][boomboxPlaced])
{
	if(IsValidDynamicObject(BoomboxInfo[playerid][boomboxObject]))
		DestroyDynamicObject(BoomboxInfo[playerid][boomboxObject]);

	if(IsValidDynamic3DTextLabel(BoomboxInfo[playerid][boomboxText3D]))
		DestroyDynamic3DTextLabel(BoomboxInfo[playerid][boomboxText3D]);

	foreach (new i : Player) if(Boombox[i] == playerid) {
		StopAudioStreamForPlayer(i);
	}
	BoomboxInfo[playerid][boomboxPlaced] = false;
	BoomboxInfo[playerid][boomboxInterior] = 0;
	BoomboxInfo[playerid][boomboxWorld] = 0;}
return 1;}
//------------------------------------------------------------------------------
stock LogSave(gde[], string[]) {

new entry[128], s, m, se, day, year, month;
getdate(year, month, day);
gettimeEx(s, m, se);
FixHour(s);
s = shifthour;

format(entry, sizeof(entry), "%d/%d/%d | %d:%d:%d | %s\r\n", day, month, year, s, m, se, string);
new File:hFile;
hFile = fopen(gde, io_append);
fwrite(hFile, entry);
fclose(hFile);}
//------------------------------------------------------------------------------
stock GetZoneName(Float:x, Float:y, zone[], len) {

for(new i = 0; i != sizeof(gSAZones); i++)
{
	if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
	{
		return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
	}
}
return 0;}

stock escape(text[])
{
new
	ret[MAX_INI_ENTRY_TEXT * 2],
	ch,
	i,
	j;
while ((ch = text[i++]) && j < sizeof (ret))
{
	if(ch == '\'')
	{
		if(j < sizeof (ret) - 2)
		{
			ret[j++] = '\'';
			ret[j++] = '\'';
		}
	}
	else if(j < sizeof (ret))
	{
		ret[j++] = ch;
	}
	else
	{
		j++;
	}
}
ret[sizeof (ret) - 1] = '\0';
return ret;}

stock Float:PointAngle(playerid, Float:xa, Float:ya, Float:xb, Float:yb)
{
new Float:carangle;
new Float:xc, Float:yc;
new Float:angle;
xc = floatabs(floatsub(xa,xb));
yc = floatabs(floatsub(ya,yb));
if(yc == 0.0 || xc == 0.0)
{
	if(yc == 0 && xc > 0) angle = 0.0;
	else if(yc == 0 && xc < 0) angle = 180.0;
	else if(yc > 0 && xc == 0) angle = 90.0;
	else if(yc < 0 && xc == 0) angle = 270.0;
	else if(yc == 0 && xc == 0) angle = 0.0;}
else
{
	angle = atan(xc/yc);
	if(xb > xa && yb <= ya) angle += 90.0;
	else if(xb <= xa && yb < ya) angle = floatsub(90.0, angle);
	else if(xb < xa && yb >= ya) angle -= 90.0;
	else if(xb >= xa && yb > ya) angle = floatsub(270.0, angle);}
GetVehicleZAngle(GetPlayerVehicleID(playerid), carangle);
return floatadd(angle, -carangle);}

stock setPlayerGps(playerid, Float:x, Float:y, Float:z) {
if(PlayerInfo[playerid][xGpsLevel] >= 1) {
	if(IsValidDynamicMapIcon(PlayerGpsRadar[playerid][_pgrIconId])) {
		DestroyDynamicMapIcon(PlayerGpsRadar[playerid][_pgrIconId]);
	}

	PlayerGpsRadar[playerid][_pgrPos][0] = x;
	PlayerGpsRadar[playerid][_pgrPos][1] = y;
	PlayerGpsRadar[playerid][_pgrPos][2] = z;
	PlayerGpsRadar[playerid][_pgrIconId] = CreateDynamicMapIcon(x, y, z, 0, CRVENA, -1, -1, playerid, 6000.0, MAPICON_GLOBAL);

	SetTimerEx("UpdatePlayerGps", 100, false, "dd", playerid, 1);
	if(PlayerInfo[playerid][xGpsLevel] >= 3) {
		if(IsPlayerInAnyVehicle(playerid)) {

			if(IsValidDynamicObject(PlayerGpsRadar[playerid][_pgrObject])) {
				DestroyDynamicObject(PlayerGpsRadar[playerid][_pgrObject]);
			}

			new Float:VPos[3], Float:Rotation;

			PlayerGpsRadar[playerid][_pgrObject] = CreateDynamicObject(19133, 0, 0, 1100, 0.0, 0.0, 0.0);

			GetVehiclePos(GetPlayerVehicleID(playerid), VPos[0], VPos[1], VPos[2]);
			Rotation = PointAngle(playerid, VPos[0], VPos[1], x, y);
			AttachDynamicObjectToVehicle(PlayerGpsRadar[playerid][_pgrObject], GetPlayerVehicleID(playerid), 0.0, 0.0, 1.5, 0.0, 90.0, Rotation);
		}
	}
}
}
//------------------------------------------------------------------------------
CreateMapIcons() {
for(new i = 1; i < MAX_Business; i++) {
	if(BusinessInfo[i][bType] == VRSTA_NIKE || BusinessInfo[i][bType] == VRSTA_BINCO || BusinessInfo[i][bType] == VRSTA_SUBURBAN || BusinessInfo[i][bType] == VRSTA_ZIP || BusinessInfo[i][bType] == VRSTA_VICTIM) {
		CreateDynamicMapIcon(BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ], 45, BELA, -1, -1, -1, 300.0);
	}
	if(BusinessInfo[i][bType] == VRSTA_BURG) {
		CreateDynamicMapIcon(BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ], 10, BELA, -1, -1, -1, 300.0);
	}
	if(BusinessInfo[i][bType] == VRSTA_CLUCK) {
		CreateDynamicMapIcon(BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ], 14, BELA, -1, -1, -1, 300.0);
	}
	if(BusinessInfo[i][bType] == VRSTA_PIZZA) {
		CreateDynamicMapIcon(BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ], 29, BELA, -1, -1, -1, 300.0);
	}
	if(BusinessInfo[i][bType] == VRSTA_GYM) {
		CreateDynamicMapIcon(BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ], 54, BELA, -1, -1, -1, 300.0);
	}
	if(BusinessInfo[i][bType] == VRSTA_GUNSHOP) {
		CreateDynamicMapIcon(BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ], 6, BELA, -1, -1, -1, 300.0);
	}
	if(BusinessInfo[i][bType] == VRSTA_BAR) {
		CreateDynamicMapIcon(BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ], 49, BELA, -1, -1, -1, 300.0);
	}
	if(BusinessInfo[i][bType] == VRSTA_RESTORAN) {
		CreateDynamicMapIcon(BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ], 50, BELA, -1, -1, -1, 300.0);
	}
	if(BusinessInfo[i][bType] == VRSTA_NKLUB || BusinessInfo[i][bType] == VRSTA_DISCO) {
		CreateDynamicMapIcon(BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ], 52, BELA, -1, -1, -1, 300.0);
	}
	if(BusinessInfo[i][bType] == VRSTA_MARKET) {
		CreateDynamicMapIcon(BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ], 52, BELA, -1, -1, -1, 300.0);
	}
	if(BusinessInfo[i][bType] == VRSTA_ELEKTRONIK) {
		CreateDynamicMapIcon(BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ], 52, BELA, -1, -1, -1, 300.0);
	}
	if(BusinessInfo[i][bType] == VRSTA_TRAFIKA) {
		CreateDynamicMapIcon(BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ], 52, BELA, -1, -1, -1, 300.0);
	}
}
// Skole
CreateDynamicMapIcon(1207.3988, -1439.3783, 13.3828, 36 , BELA, -1, -1, -1, 300.0); // Srednja skola
CreateDynamicMapIcon(156.9468,-1615.8455,15.4050, 36 , BELA, -1, -1, -1, 300.0); // Osnovna skola
CreateDynamicMapIcon(1396.7015,-1571.1564,14.2701, 36 , BELA, -1, -1, -1, 300.0); // Fakultet

// Streljana
CreateDynamicMapIcon(1791.0719,-1165.2334,23.8281, 18 , BELA, -1, -1, -1, 300.0);

// Apoteka 
CreateDynamicMapIcon(1703.0662,-1167.8356,23.8281, 22 , BELA, -1, -1, -1, 300.0);

// Forma Ideale
CreateDynamicMapIcon(2375.2371,-1917.0723,13.9742, 51, BELA, -1, -1, -1, 300.0);

// Bolnica
CreateDynamicMapIcon(1172.9071, -1323.4137, 15.3990, 22, BELA, -1, -1, -1, 300.0);

// Policija
CreateDynamicMapIcon(1555.500488, -1675.764160, 16.195312, 30, BELA, -1, -1, -1, 300.0); 

// Mod Shops
CreateDynamicMapIcon(1041.1241, -1026.3285, 32.1016, 63, BELA, -1, -1, -1, 300.0);
CreateDynamicMapIcon(2644.8325, -2038.8018, 13.5500, 63, BELA, -1, -1, -1, 300.0);
CreateDynamicMapIcon(-1935.7455, 238.4695, 34.3125, 63, BELA, -1, -1, -1, 300.0);
CreateDynamicMapIcon(-2715.1943, 217.0293, 4.3132, 63, BELA, -1, -1, -1, 300.0);

// AutoSalon
CreateDynamicMapIcon(2523.1079,-1537.3499,24.1296, 55, BELA, -1, -1, -1, 300.0);
CreateDynamicMapIcon(950.3361,-1368.0842,13.5709, 55, BELA, -1, -1, -1, 300.0);
CreateDynamicMapIcon(1983.0079,-2014.4663,13.5781, 55, BELA, -1, -1, -1, 300.0);
CreateDynamicMapIcon(542.5590, -1293.0958, 18.5787, 55, BELA, -1, -1, -1, 300.0);
CreateDynamicMapIcon(2053.9011,-2206.8257,13.5469, 5, BELA, -1, -1, -1, 300.0); // Salon Letelica

// Bande
CreateDynamicMapIcon(1825.3826,-1979.9282,13.6373, 58, BELA, -1, -1, -1, 300.0); // Surenos
CreateDynamicMapIcon(2483.6699,-1670.3678,13.3359, 62, BELA, -1, -1, -1, 300.0); // GSF
CreateDynamicMapIcon(2561.1609,-966.8581,82.7007, 58, BELA, -1, -1, -1, 300.0); // Vagos
CreateDynamicMapIcon(2132.1436,-1468.1486,23.8219, 59, BELA, -1, -1, -1, 300.0); // Ballas

// Opstina
CreateDynamicMapIcon(1482.7301, -1771.4841, 18.7958, 56, BELA, -1, -1, -1, 300.0);

// Banka
CreateDynamicMapIcon(1465.159912, -1010.571777, 26.843799, 56, BELA, -1, -1, -1, 300.0);}
//------------------------------------------------------------------------------
public NewsOn() {
newsbre = 1;}
public AddsOn() {
adds = true;}
stock fcopy(oldname[], newname[]) {
new File:ohnd, File:nhnd;
if(!fexist(oldname)) return false;
ohnd=fopen(oldname, io_read);
nhnd=fopen(newname, io_write);
new buf2[1];
new i;
for(i=flength(ohnd);i>0;i--) {
	fputchar(nhnd, fgetchar(ohnd, buf2[0], false), false);}
fclose(ohnd);
fclose(nhnd);
return true;}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
stock CreateRoadblock(Object,Float:x,Float:y,Float:z,Float:Angle) {

for(new i = 0; i < sizeof(Roadblocks); i++) {

		if(Roadblocks[i][sCreated] == 0) {

		Roadblocks[i][sCreated] = 1;
		Roadblocks[i][sX] = x;
		Roadblocks[i][sY] = y;
		Roadblocks[i][sZ] = z-0.7;
		Roadblocks[i][sSpike] = false;
		Roadblocks[i][sObject] = CreateDynamicObject(Object, x, y, z-0.9, 0, 0, Angle);
		return 1;
		}
	}
return 1;}

stock CreateSpike(Object,Float:x,Float:y,Float:z,Float:Angle) {

for(new i = 0; i < sizeof(Roadblocks); i++) {

	if(Roadblocks[i][sCreated] == 0) {

		Roadblocks[i][sCreated]=1;
		Roadblocks[i][sX]=x;
		Roadblocks[i][sY]=y;
		Roadblocks[i][sZ]=z-0.7;
		Roadblocks[i][sSpike] = true;
		Roadblocks[i][sObject] = CreateDynamicObject(Object, x, y, z-1, 0, 0, Angle-90);
		return 1;
	}
}
return 0;}

stock DeleteAllRoadblocks(playerid)
{
for(new i = 0; i < sizeof(Roadblocks); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 100, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
	{
		if(Roadblocks[i][sCreated] == 1)
		{
			Roadblocks[i][sCreated] = 0;
			Roadblocks[i][sX] = 0.0;
			Roadblocks[i][sY] = 0.0;
			Roadblocks[i][sZ] = 0.0;
			Roadblocks[i][sSpike] = false;
			DestroyDynamicObject(Roadblocks[i][sObject]);
		}
		}
}
return 1;}
stock DeleteClosestRoadblock(playerid)
{
for(new i = 0; i < sizeof(Roadblocks); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 20.0, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
	{
			if(Roadblocks[i][sCreated] == 1)
		{
			Roadblocks[i][sCreated] = 0;
			Roadblocks[i][sX] = 0.0;
			Roadblocks[i][sY] = 0.0;
			Roadblocks[i][sZ] = 0.0;
			Roadblocks[i][sSpike] = false;
			DestroyDynamicObject(Roadblocks[i][sObject]);
			return 1;
			}
		}
	}
	return 1;}
//------------------------------------------------------------------------------
stock Fusion_SetPlayerWantedLevel(playerid, broj) {
switch(broj) {
	case 0: {
		PlayerTextDrawHide(playerid, WantedIgraca[playerid]);
		SetPlayerColor(playerid, 0xFFFFFF00);
	}
	case 1: {
		PlayerTextDrawSetString(playerid, WantedIgraca[playerid], "]");
		PlayerTextDrawShow(playerid, WantedIgraca[playerid]);
		SetPlayerColor(playerid, 0x6E000000);
	}
	case 2: {
		PlayerTextDrawSetString(playerid, WantedIgraca[playerid], "]]");
		PlayerTextDrawShow(playerid, WantedIgraca[playerid]);
		SetPlayerColor(playerid, 0x6E000000);
	}
	case 3: {
		PlayerTextDrawSetString(playerid, WantedIgraca[playerid], "]]]");
		PlayerTextDrawShow(playerid, WantedIgraca[playerid]);
		SetPlayerColor(playerid, 0x6E000000);
	}
	case 4: {
		PlayerTextDrawSetString(playerid, WantedIgraca[playerid], "]]]]");
		PlayerTextDrawShow(playerid, WantedIgraca[playerid]);
		SetPlayerColor(playerid, 0x6E000000);
	}
	case 5: {
		PlayerTextDrawSetString(playerid, WantedIgraca[playerid], "]]]]]");
		PlayerTextDrawShow(playerid, WantedIgraca[playerid]);
		SetPlayerColor(playerid, 0x6E000000);
	}
	case 6: {
		PlayerTextDrawSetString(playerid, WantedIgraca[playerid], "]]]]]]");
		PlayerTextDrawShow(playerid, WantedIgraca[playerid]);
		SetPlayerColor(playerid, 0x6E000000);
	}
	case 7: {
		PlayerTextDrawSetString(playerid, WantedIgraca[playerid], "]]]]]]]");
		PlayerTextDrawShow(playerid, WantedIgraca[playerid]);
		SetPlayerColor(playerid, 0x6E000000);
	}
	case 8: {
		PlayerTextDrawSetString(playerid, WantedIgraca[playerid], "]]]]]]]]");
		PlayerTextDrawShow(playerid, WantedIgraca[playerid]);
		SetPlayerColor(playerid, 0x6E000000);
	}
	case 9: {
		PlayerTextDrawSetString(playerid, WantedIgraca[playerid], "]]]]]]]]]");
		PlayerTextDrawShow(playerid, WantedIgraca[playerid]);
		SetPlayerColor(playerid, 0x6E000000);
	}
	case 10: {
		PlayerTextDrawSetString(playerid, WantedIgraca[playerid], "]]]]]]]]]]");
		PlayerTextDrawShow(playerid, WantedIgraca[playerid]);
		SetPlayerColor(playerid, 0x6E000000);
	}
}
return 1;}
//------------------------------------------------------------------------------
stock PostaviWanted(playerid, zlocin[], prijavio[], kolicina = 1) {
if(IsPlayerConnected(playerid)) {
	new string[256];
	Fusion_SetPlayerWantedLevel(playerid, PlayerInfo[playerid][xWanted]+kolicina);
	PlayerInfo[playerid][xWanted] += kolicina;

	if(PlayerInfo[playerid][xWanted] > 10) {
		Fusion_SetPlayerWantedLevel(playerid, 10);
		PlayerInfo[playerid][xWanted] = 10;
	}

	strmid(ZlocinInfo[playerid][zPrijavio], prijavio, 0, strlen(prijavio), 255);
	strmid(ZlocinInfo[playerid][zPocinio], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 255);
	strmid(ZlocinInfo[playerid][zZlocin], zlocin, 0, strlen(zlocin), 255);

	format(string, sizeof(string), ""col_server"- Pocinili ste zlocin: "col_white"%s "col_server"| Prijava od: "col_white"%s!", zlocin, prijavio);
	SCM(playerid, -1, string);
	format(string, sizeof(string), ""col_server"- Trenutni Wanted Level: "col_white"%d!", PlayerInfo[playerid][xWanted]);
	SCM(playerid, -1, string);
	SendInfoMessage(playerid, "Ukoliko izadjete sa servera sa Wantedom, automatski cete biti u zatvoru.");

	for(new id = 1; id < MAX_ORG; id++) {
		if(OI[id][oTip] == ORG_TIP_PD) {
			format(string, sizeof(string), ""col_server"- Imamo novi prijavljen zlocin od: "col_white"%s!", prijavio);
			OrgPoruka(id, -1, string);
			format(string, sizeof(string), ""col_server"- Pocinio: "col_white"%s "col_server"| Zlocin: "col_white"%s "col_server"| Wanted Level Pocinioca: %d!", ImeIgraca(playerid), zlocin, PlayerInfo[playerid][xWanted]);
			OrgPoruka(id, -1, string);
		}
	}
}
return 1;}
//------------------------------------------------------------------------------
stock Igrac2D(playerid, zone[], len)
{
new Float:x, Float:y, Float:z;
GetPlayerPos(playerid, x, y, z);
for(new i = 0; i != sizeof(gSAZones); i++)
{
	if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
	{
		return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
	}
}
return 0;}
//------------------------------------------------------------------------------
stock GetPlayerLocation(playerid)
{
new imeulice[MAX_ZONE_NAME];
	Igrac2D(playerid,imeulice,sizeof(imeulice));
	return imeulice;}
//------------------------------------------------------------------------------
stock SetTablice(h) {
new tablice[20];
if(10 > h)
{
	format(tablice, sizeof(tablice), "LS 000%d.", h);
	SetVehicleNumberPlate(h, tablice);}
else if(10 <= h && h < 100)
{
	format(tablice , sizeof(tablice), "LS 00%d.", h);
	SetVehicleNumberPlate(h, tablice);}
else if(100 <= h && h < 1000)
{
	format(tablice, sizeof(tablice), "LS 0%d.", h);
	SetVehicleNumberPlate(h, tablice);}
else if(1000 <= h && h < 2001)
{
	format(tablice, sizeof(tablice), "LS %d.", h);
	SetVehicleNumberPlate(h, tablice);}
return 1;}
//------------------------------------------------------------------------------
stock ini_GetKey(line[]) {

new keyRes[256];
keyRes[0] = 0;

if(strfind(line , "=" , true) == -1) return keyRes;

strmid(keyRes , line , 0 , strfind(line , "=" , true) , sizeof(keyRes));
return keyRes;}
//------------------------------------------------------------------------------
stock ini_GetValue(line[]) {
new valRes[256];
valRes[0]=0;

if(strfind(line , "=" , true) == -1) return valRes;

strmid(valRes , line , strfind(line , "=" , true)+1 , strlen(line) , sizeof(valRes));
return valRes;}
//------------------------------------------------------------------------------
stock Create3DandP(text[], Float:vXU, Float:vYU, Float:vZU, vInt, vVW, pickupid, Float:radius) {
CreateDynamic3DTextLabel(text, 0x0059FFAA, vXU, vYU, vZU, radius, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, vVW, vInt, -1, 20.0);
acc_CreateDynamicPickup(pickupid, 1, vXU, vYU, vZU, vVW, vInt);}
//------------------------------------------------------------------------------
stock UlicaHotela(i) {
new imeulice[MAX_ZONE_NAME];
	UlicaHotela2D(i, imeulice, sizeof(imeulice));
	return imeulice;}
//------------------------------------------------------------------------------
stock UlicaHotela2D(h, zone[], len) {
new Float:x22, Float:y22;
x22 = hotelInfo[h][hEnter][0]; y22 = hotelInfo[h][hEnter][1];
for(new i = 0; i != sizeof(gSAZones); i++) {
	if(x22 >= gSAZones[i][SAZONE_AREA][0] && x22 <= gSAZones[i][SAZONE_AREA][3] && y22 >= gSAZones[i][SAZONE_AREA][1] && y22 <= gSAZones[i][SAZONE_AREA][4])
	{
		return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
	}
}
return 0;}
//------------------------------------------------------------------------------
stock UlicaImovine(i)
{
new imeulice[MAX_ZONE_NAME];
	UlicaImovine2D(i, imeulice, sizeof(imeulice));
	return imeulice;}
//------------------------------------------------------------------------------
stock UlicaImovine2D(h, zone[], len)
{
new Float:x22, Float:y22;
x22 = II[h][iEnter][0]; y22 = II[h][iEnter][1];
for(new i = 0; i != sizeof(gSAZones); i++)
{
	if(x22 >= gSAZones[i][SAZONE_AREA][0] && x22 <= gSAZones[i][SAZONE_AREA][3] && y22 >= gSAZones[i][SAZONE_AREA][1] && y22 <= gSAZones[i][SAZONE_AREA][4])
	{
		return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
	}
}
return 0;}
//------------------------------------------------------------------------------
stock GetSpeed(playerid) {
new Float:ST[4];
if(IsPlayerInAnyVehicle(playerid))
	GetVehicleVelocity(GetPlayerVehicleID(playerid), ST[0], ST[1], ST[2]);
else
	GetPlayerVelocity(playerid, ST[0], ST[1], ST[2]);

ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 178.8617875;
return floatround(ST[3]);}
//------------------------------------------------------------------------------
stock IsPlayerFacingVehicle(playerid,vehicleid)
{
	new Float:pX,Float:pY,Float:pZ,Float:X,Float:Y,Float:Z,Float:ang;

	if(!IsPlayerConnected(playerid)) return 0;

	GetVehiclePos(vehicleid, X, Y, Z);
	GetPlayerPos(playerid, pX, pY, pZ);

	if(Y > pY) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if(Y < pY && X < pX) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if(Y < pY) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(X > pX) ang = (floatabs(floatabs(ang) + 180.0));
	else ang = (floatabs(ang) - 180.0);
	new Float:russia;
	GetPlayerFacingAngle(playerid,russia);
	if(ang-russia<-130 || ang-russia>130) return 0;
	else return 1;}
//------------------------------------------------------------------------------
GetNameByWatchID(playerid) {
new watchName[20] = "Rolex Datejust";

switch(PlayerInfo[playerid][xSat]) {
	case 0: watchName = "Nema sata";
	case 19039: watchName = "Rolex Datejust";
	case 19040: watchName = "Emporio Armani";
	case 19041: watchName = "Casio G-Shock";
	case 19042: watchName = "Michael Kors";
	case 19043: watchName = "Hugo Boss";}
return watchName;}
//------------------------------------------------------------------------------
stock UzmiTipUtakmice(broj) {
new watchName[10] = "ki 1";

switch(broj) {
	case 1: watchName = "ki 1";
	case 2: watchName = "ki x";
	case 3: watchName = "ki 2";}
return watchName;}
//------------------------------------------------------------------------------
GetReketName(reketID) {

new reketName[64] = "Nema";

if(reketID == -1 || reketID == 0) {

	format(reketName, sizeof(reketName), "%s", "Nema");}
else if(reketID != -1) {

	new orgFile[50];
	format(orgFile, sizeof(orgFile), O_FILE, reketID);
	if(fexist(orgFile)) {

		format(reketName, sizeof(reketName), "%s", OI[reketID][oName]);
	}
	else if(!fexist(orgFile)) {

		format(reketName, sizeof(reketName), "%s", "Nema");
	}

}

return reketName;}
//------------------------------------------------------------------------------
GetJobDegree(jobID)
{
new school[56] = "Bez kvalifikacija";

switch(jobID) {
	case POSAO_NEMA: school = "Bez kvalifikacija";
	case POSAO_KOSAC: school = "Osnovna skola";
	case POSAO_FARMER: school = "Osnovna skola";
	case POSAO_BUSVOZAC: school = "Osnovna, Srednja";
	case POSAO_RUDAR: school = "Osnovna, Srednja";
	case POSAO_KOMUNALAC: school = "Osnovna skola";
	case POSAO_PREVOZNIK: school = "Osnovna, Srednja";
	case POSAO_DRVOSECA: school = "Osnovna, Srednja";
	case POSAO_PNAMESTAJA: school = "Osnovna, Srednja";
	case POSAO_PEPSI: school = "Osnovna skola";
	case POSAO_VOCAR: school = "Bez kvalifikacija";
	case POSAO_PPROZORA: school = "Bez kvalifikacija";
	case POSAO_PREVOZNOVCA: school = "Osnovna, Srednja, Fakultet";
	case POSAO_PILOT: school = "Osnovna, Srednja, Fakultet";}
return school;}
getJobName(jobID)
{
new jobName[26] = "Nepostojeci posao";

switch(jobID) {
	case POSAO_NEMA: jobName = "Nezaposlen";
	//case POSAO_MEHANICAR: jobName = "Mehanicar";
	//case POSAO_MASINOVODJA: jobName = "Masinovodja";
	case POSAO_PREVOZNIK: jobName = "Prevoznik";
	case POSAO_KOSAC: jobName = "Kosac Trave";
	case POSAO_KOMUNALAC: jobName = "Komunalac";
	//case POSAO_PIZZA: jobName = "Dostavljac pizze";
	case POSAO_PILOT: jobName = "Pilot";
	case POSAO_FARMER: jobName = "Farmer";
	case POSAO_BUSVOZAC: jobName = "Bus vozac";
	case POSAO_RUDAR: jobName = "Rudar";
	case POSAO_PREVOZNOVCA: jobName = "Prevoznik Novca";
	case POSAO_PNAMESTAJA: jobName = "Proizvodjac Namestaja";
	case POSAO_PEPSI: jobName = "Pepsi Dostavljac";
	case POSAO_VOCAR: jobName = "Vocar";
	case POSAO_PPROZORA: jobName = "Perac Prozora";
	case POSAO_DRVOSECA: jobName = "Drvoseca";}
return jobName;}

//------------------------------------------------------------------------------
getGajbicaName(SLOTID)
{
new NAME[11] = "Jabuke";

switch(SLOTID)
{
	case -1: NAME = "Nema nista";
	case 0: NAME = "Prazna";
	case BILJKA_SLJIVA: NAME = "Sljive";
	case BILJKA_KRUSKA: NAME = "Kruske";
	case BILJKA_JABUKA: NAME = "Jabuke";
	case BILJKA_KUPUS: NAME = "Kupus";
	case BILJKA_RUZE: NAME = "Ruze";}
return NAME;}

getAdminRankName(playerid) {

new admin_rank[26] = "Nepostojeci admin";

if(PlayerInfo[playerid][xSkriptaRank] == 1) {
	admin_rank = "Developer";}
else if(PlayerInfo[playerid][xSkriptaRank] == 3) {
	admin_rank = "Mapper";}
else if(PlayerInfo[playerid][xAdmin] <= 0) {
	admin_rank = "Ne";}
else {
	switch(PlayerInfo[playerid][xAdmin]) {
		case 0: admin_rank = "AFG";
		case 1: admin_rank = "AFG";
		case 2: admin_rank = "AFG";
		case 3: admin_rank = "AFG";
		case 4: admin_rank = "AFG";
		case 5: admin_rank = "Head AFG";
		case 6: admin_rank = "Direktor";
		case 7: admin_rank = "Vlasnik";
	}
}
return admin_rank;}
//------------------------------------------------------------------------------
getOrgRank(playerid, orgID) {
new orgRank[64] = "Los Santos Police Department";

if(orgID == 0) orgRank = "Civil";
else {
	if(PlayerInfo[playerid][xRank] == 1) format(orgRank, sizeof(orgRank), "%s", OI[PlayerInfo[playerid][xClan]][oRank1]);
	else if(PlayerInfo[playerid][xRank] == 2) format(orgRank, sizeof(orgRank), "%s", OI[PlayerInfo[playerid][xClan]][oRank2]);
	else if(PlayerInfo[playerid][xRank] == 3) format(orgRank, sizeof(orgRank), "%s", OI[PlayerInfo[playerid][xClan]][oRank3]);
	else if(PlayerInfo[playerid][xRank] == 4) format(orgRank, sizeof(orgRank), "%s", OI[PlayerInfo[playerid][xClan]][oRank4]);
	else if(PlayerInfo[playerid][xRank] == 5) format(orgRank, sizeof(orgRank), "%s", OI[PlayerInfo[playerid][xClan]][oRank5]);
	else if(PlayerInfo[playerid][xRank] == 6) format(orgRank, sizeof(orgRank), "%s", OI[PlayerInfo[playerid][xClan]][oRank6]);}
return orgRank;}
//------------------------------------------------------------------------------
getOrgName(orgID) {
new orgName[64] = "Los Santos Police Department";

if(orgID == 0) orgName = "Civil";
else format(orgName, sizeof(orgName), "%s", OI[orgID][oName]);
return orgName;}
//------------------------------------------------------------------------------
NearestGate(playerid) {

for(new i = 1; i != MAX_GATES; i ++) if(GateData[i][gateModel] && IsPlayerInRangeOfPoint(playerid, GateData[i][gateRadius], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2])) {

	if(GetPlayerInterior(playerid) == GateData[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateData[i][gateWorld])
		return i;}
return -1;}
//------------------------------------------------------------------------------
stock Gate_Operate(playerid, gateid) {

if(gateid != -1 && GateData[gateid][gateModel]) {

	if(!GateData[gateid][gateOpened]) {

		GateData[gateid][gateOpened] = true;
		MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gateMove][0], GateData[gateid][gateMove][1], GateData[gateid][gateMove][2], GateData[gateid][gateSpeed], GateData[gateid][gateMove][3], GateData[gateid][gateMove][4], GateData[gateid][gateMove][5]);

		SendClientMessageEx(playerid, ZUTA, "K/V | Otvorili ste kapiju/vrata, zatvorice se sama za %d sekundi.", GateData[gateid][gateTime]/1000);
		
		new varstring[66];
		format(varstring, sizeof(varstring), "* %s uzima daljinski i otvara kapiju.", ImeIgraca(playerid));
		PorukaRadius(15.0, playerid, varstring, LJUBICASTA);

		if(GateData[gateid][gateTime] > 0) {
			GateData[gateid][gateTimer] = SetTimerEx("CloseGate", GateData[gateid][gateTime], false, "dfffffff", gateid, GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);
		}
	}
	else if(GateData[gateid][gateOpened]) {

		GateData[gateid][gateOpened] = false;
		MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);

		SCM(playerid, ZUTA, "K/V | Zatvorili ste kapiju/vrata.");
		new varstring[66];
		format(varstring, sizeof(varstring), "* %s uzima daljinski i zatvara kapiju.", ImeIgraca(playerid));
		PorukaRadius(15.0, playerid, varstring, LJUBICASTA);

		if(GateData[gateid][gateTime] > 0) {
			Fusion_KillTimer(GateData[gateid][gateTimer]);
		}
	}
}
return 1;}
//------------------------------------------------------------------------------
forward CloseGate(gateid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ);
public CloseGate(gateid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ) {

if(GateData[gateid][gateModel] && GateData[gateid][gateOpened]) {

	MoveDynamicObject(GateData[gateid][gateObject], fX, fY, fZ, speed, fRotX, fRotY, fRotZ);

	GateData[gateid][gateOpened] = false ;
	return 1;}
return 0;}
//------------------------------------------------------------------------------
GetNearestOrgPortID(playerid) {
for(new i = 1; i < MAX_ORG; i++) {
	for(new id = 0; id < OI[i][oMaxPort]; id++) {
		if(IsPlayerInRangeOfPoint(playerid, 3.0, PortOP[i][id][Pos1][0], PortOP[i][id][Pos1][1], PortOP[i][id][Pos1][2]) && GetPlayerVirtualWorld(playerid) == PortOP[i][id][VW][0] && GetPlayerInterior(playerid) == PortOP[i][id][Int][0]) {
			return id;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, PortOP[i][id][Pos2][0], PortOP[i][id][Pos2][1], PortOP[i][id][Pos2][2]) && GetPlayerVirtualWorld(playerid) == PortOP[i][id][VW][1] && GetPlayerInterior(playerid) == PortOP[i][id][Int][1]) {
			return id;
		}
	}
}
return -1;}
//------------------------------------------------------------------------------
GetNearestOrgIDPort(playerid) {
for(new i = 1; i < MAX_ORG; i++) {
	for(new id = 0; id < OI[i][oMaxPort]; id++) {
		if(IsPlayerInRangeOfPoint(playerid, 3.0, PortOP[i][id][Pos1][0], PortOP[i][id][Pos1][1], PortOP[i][id][Pos1][2]) && GetPlayerVirtualWorld(playerid) == PortOP[i][id][VW][0] && GetPlayerInterior(playerid) == PortOP[i][id][Int][0]) {
			return i;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, PortOP[i][id][Pos2][0], PortOP[i][id][Pos2][1], PortOP[i][id][Pos2][2]) && GetPlayerVirtualWorld(playerid) == PortOP[i][id][VW][1] && GetPlayerInterior(playerid) == PortOP[i][id][Int][1]) {
			return i;
		}
	}
}
return -1;}
//------------------------------------------------------------------------------
GetNearestHotel(playerid) {

for(new i = 1; i < MAX_HOTELS; i++) {

	if(IsPlayerInRangeOfPoint(playerid, 3.0, hotelInfo[i][hEnter][0], hotelInfo[i][hEnter][1], hotelInfo[i][hEnter][2])) { return i; }
}
return -1;}
//------------------------------------------------------------------------------
GetNearestProperty(playerid) {

for(new i = 1; i < MAX_IMOVINA; i++) {

	if(IsPlayerInRangeOfPoint(playerid, 3.0, II[i][iEnter][0], II[i][iEnter][1], II[i][iEnter][2])) { return i; }
}
return -1;}
//------------------------------------------------------------------------------
GetNearestSalon(playerid) {
for(new i = 1; i < MAX_AUTOS; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 3.0, AutoSalon[i][aPickupPos][0], AutoSalon[i][aPickupPos][1], AutoSalon[i][aPickupPos][2])) { return i; }
}
return -1;}
//------------------------------------------------------------------------------
GetNearestFurniture(playerid, hid) {

for(new a = 0; a < MAX_X_OBJECTS; a++) {

	if(IsPlayerInRangeOfPoint(playerid, 2.0, Furniture[hid][a][f_X], Furniture[hid][a][f_Y], Furniture[hid][a][f_Z]) && Furniture[hid][a][f_Model]) { return a; }
}
return -1;}
//------------------------------------------------------------------------------
GetPropertyName(i)
{
new pName[26] = "Nepostojeci posao";

if(i == -1 || i == 0){
	format(pName, sizeof(pName), "%s", "Nema nekretnine");}
else if(i != -1) {
	switch(II[i][iUsage])
	{
		case IMOVINA_KUCA: pName = "Kucu";
		case IMOVINA_STAN: pName = "Stan";
		case IMOVINA_VIKENDICA: pName = "Vikendicu";
	}
}

return pName;}
GetPropertyAName(i)
{
new pName[26] = "Nepostojeci posao";

if(i == -1 || i == 0){
	format(pName, sizeof(pName), "%s", "Nema nekretnine");}
else if(i != -1) {
	switch(II[i][iUsage])
	{
		case IMOVINA_KUCA: pName = "Kuca";
		case IMOVINA_STAN: pName = "Stan";
		case IMOVINA_VIKENDICA: pName = "Vikendica";
	}
}

return pName;}
//------------------------------------------------------------------------------
getBusinessType(f)
{
new jobName[26] = "Nepostojeci posao";

switch(BusinessInfo[f][bType]) {
	case VRSTA_RESTORAN: jobName = "Restoran";
	case VRSTA_CLUCK: jobName = "Cluckin' Bell";
	case VRSTA_ZIP: jobName = "Zip";
	case VRSTA_BINCO: jobName = "Binco";
	case VRSTA_NIKE: jobName = "Nike Shop";
	case VRSTA_SUBURBAN: jobName = "Suburban";
	case VRSTA_VICTIM: jobName = "Victim";
	case VRSTA_BAR: jobName = "Bar";
	case VRSTA_NKLUB: jobName = "Nocni Klub";
	case VRSTA_DISCO: jobName = "Diskoteka";
	case VRSTA_GUNSHOP: jobName = "Ammunation";
	case VRSTA_PIZZA: jobName = "Picerija";
	case VRSTA_BURG: jobName = "Burg";
	case VRSTA_MARKET: jobName = "Prodavnica 24/7";
	case VRSTA_GYM: jobName = "Teretana";
	case VRSTA_ELEKTRONIK: jobName = "Elektronik";
	case VRSTA_TRAFIKA: jobName = "Trafika";
	case VRSTA_JFIRMA: jobName = "Firma bez ulaza";
	case VRSTA_POSAO: jobName = "Poslovna firma";
	case VRSTA_RIBAR: jobName = "Ribolovacka firma";
	case VRSTA_RENT: jobName = "Rent a vehicle";
	case VRSTA_PUMPA: jobName = "Pumpa";
	case VRSTA_JAVNAK: jobName = "Javna Kuca";
	case VRSTA_KLAD: jobName = "Kladionica";
	case VRSTA_OGLAS: jobName = "Oglas";
	case VRSTA_TELEKOM: jobName = "Telekom";
	case VRSTA_PAYSPRAY: jobName = "Pay 'n' Spray";
	case VRSTA_KOMUNALIJE: jobName = "Komunalije";
	case VRSTA_VODOVOD: jobName = "Vodovod";
	case VRSTA_ELEKTRANA: jobName = "Elektrana";
	case VRSTA_LUTRIJA: jobName = "Lutrija";
	case VRSTA_CASINO: jobName = "Casino";
	case VRSTA_NEON: jobName = "Neon Shop";
	case VRSTA_RODA: jobName = "Market Roda";}
return jobName;}
getAmountFuel(carid)
{
new fuel;
if(IsVehicleBajs(carid)) fuel = 1000;
else if(IsVehicleMotor(carid)) fuel = 15;
else if(IsVehicleAuto(carid)) fuel = 40;
else if(IsVehicleC1(carid)) fuel = 55;
else if(IsVehicleC2(carid)) fuel = 70;
else if(IsVehicleC3(carid)) fuel = 70;
else if(IsVehicleBrod(carid)) fuel = 100;
else if(IsVehicleLetelica(carid)) fuel = 100;

return fuel;}
//------------------------------------------------------------------------------
OOCNews(color, const string[]) {
foreach(new i : Player) {
	if(PlayerLogged[i] == true) {
		if(PlayerInfo[i][xSVesti] == 1) {
			SCM(i, color, string);
		}
	}
}
}
AddAd(color, const string[]) {
foreach(new i : Player) {
	if(PlayerLogged[i] == true) {
		if(PlayerInfo[i][xSOglasi] == 1) {
			SCM(i, color, string);
		}
	}
}
}
//------------------------------------------------------------------------------

PoredTrafike(playerid) {

if(IsPlayerConnected(playerid)) {

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1374.6486,-1051.3281,26.7872)   ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 1522.3365,-1678.8428,13.5469)   ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 1884.9135,-1758.8334,13.5469)   ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 1143.2748,-938.2762,43.0301)   ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 1061.3086,-1829.3444,13.6905)   ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 1211.8568,-1352.6002,13.5739)   ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 1869.2694,-1455.4016,13.5466)   ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 1418.0715,-1717.1235,13.5469)   ||

		IsPlayerInRangeOfPoint(playerid, 3.0, 2284.1409,-1669.6038,15.1131)   ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 2246.4448,-1378.7106,23.9922)   ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 2077.4031,-1319.6155,23.9844)   ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 1352.3274,-2240.0898,13.5469)   ||



		IsPlayerInRangeOfPoint(playerid, 3.0, 2076.4241,-1851.7760,13.5469)) {

		return 1;
	}

}
return 0;}
//------------------------------------------------------------------------------

IsAtBank(playerid) {
if(IsPlayerConnected(playerid)) {
	if(IsPlayerInRangeOfPoint(playerid, 3.0, -169.4186, 913.5535, -15.5464)   ||
		IsPlayerInRangeOfPoint(playerid, 3.0, -164.3699, 913.7142, -15.5464)) {
		return 1;
	}

}
return 0;}
//------------------------------------------------------------------------------
stock Kickovanje(id, reason[])
{
SendClientMessage(id, -1, reason);
SetTimerEx("KickIgraca", 150, false, "d", id);
return 1;}
//==============================================================================
UnLockCar(carid)
{
new engine, lights, alarm, doors, bonnet, boot, objective;

GetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, boot, objective);
ac_SetVehicleParamsEx(carid, engine, lights, alarm, 0, bonnet, boot, objective);}
//==============================================================================
stock IsComponentidCompatible(modelid, componentid) {
if(componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
	componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
	componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
	componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086) {
	return componentid;}

switch(modelid) {
	case 400: if(componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 401: if(componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
	case 402: if(componentid == 1009 || componentid == 1009 || componentid == 1010) return componentid;
	case 404: if(componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
	case 405: if(componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000) return componentid;
	case 409: if(componentid == 1009) return componentid;
	case 410: if(componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
	case 411: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 412: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 415: if(componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
	case 418: if(componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016) return componentid;
	case 419: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 420: if(componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003) return componentid;
	case 421: if(componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000) return componentid;
	case 422: if(componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007) return componentid;
	case 426: if(componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003) return componentid;
	case 429: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 436: if(componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
	case 438: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 439: if(componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013) return componentid;
	case 442: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 445: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 451: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 458: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 466: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 467: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 474: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 475: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 477: if(componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007) return componentid;
	case 478: if(componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 479: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 480: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 489: if(componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000) return componentid;
	case 491: if(componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
	case 492: if(componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000) return componentid;
	case 496: if(componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020) return componentid;
	case 500: if(componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 506: if(componentid == 1009) return componentid;
	case 507: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 516: if(componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
	case 517: if(componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
	case 518: if(componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
	case 526: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 527: if(componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007) return componentid;
	case 529: if(componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
	case 533: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 534: if(componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106) return componentid;
	case 535: if(componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119) return componentid;
	case 536: if(componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108) return componentid;
	case 540: if(componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
	case 541: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 542: if(componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015) return componentid;
	case 545: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 546: if(componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
	case 547: if(componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000) return componentid;
	case 549: if(componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
	case 550: if(componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003) return componentid;
	case 551: if(componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003) return componentid;
	case 555: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 558: if(componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093) return componentid;
	case 559: if(componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009) return componentid;
	case 560: if(componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031) return componentid;
	case 561: if(componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057) return componentid;
	case 562: if(componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039) return componentid;
	case 565: if(componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048) return componentid;
	case 566: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 567: if(componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133) return componentid;
	case 575: if(componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042) return componentid;
	case 576: if(componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134) return componentid;
	case 579: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 580: if(componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
	case 585: if(componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
	case 587: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 589: if(componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
	case 600: if(componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007) return componentid;
	case 602: if(componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
	case 603: if(componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;}
return false;}
//==============================================================================
stock GetVehicleCameraPos(vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff=0.0, Float:yoff=0.0, Float:zoff=0.0) { // credits Pasha
new Float:rot;
GetVehicleZAngle(vehicleid, rot);
rot = 360 - rot;
GetVehiclePos(vehicleid, x, y, z);
x = floatsin(rot, degrees) * yoff + floatcos(rot, degrees) * xoff + x;
y = floatcos(rot, degrees) * yoff - floatsin(rot, degrees) * xoff + y;
z = zoff + z;}
//==============================================================================
SavePlayerVehicleTuning(autoid, componentid) {
	if(IsASpoiler(componentid))
		VehicleInfo[autoid][vSpoiler] = componentid;

else if(IsANitro(componentid))
	VehicleInfo[autoid][vNitro] = componentid;

else if(IsAFrontBumper(componentid))
	VehicleInfo[autoid][vFrontBumper] = componentid;

else if(IsARearBumper(componentid))
	VehicleInfo[autoid][vRearBumper] = componentid;

else if(IsAStereo(componentid))
	VehicleInfo[autoid][vStereo] = componentid;

else if(IsAExhaust(componentid))
	VehicleInfo[autoid][vExhaust] = componentid;

else if(IsALamp(componentid))
	VehicleInfo[autoid][vLamps] = componentid;

	else if(IsAHydraulic(componentid))
		VehicleInfo[autoid][vHydraulics] = componentid;

else if(IsAVents(componentid))
	VehicleInfo[autoid][vVents] = componentid;

else if(IsAHood(componentid))
	VehicleInfo[autoid][vHood] = componentid;

else if(IsAWheel(componentid))
	VehicleInfo[autoid][vWheels] = componentid;

else if(IsARoof(componentid))
	VehicleInfo[autoid][vRoof] = componentid;

else if(IsASkirt(componentid))
	VehicleInfo[autoid][vSkirt] = componentid;

SaveVehicle(autoid);}
//==============================================================================
IsASkirt(componentid) {
if(GetVehicleComponentType(componentid) == CARMODTYPE_SIDESKIRT)
	return true;

return false;}
//==============================================================================
IsASpoiler(componentid) {

if(GetVehicleComponentType(componentid) == CARMODTYPE_SPOILER)
	return true;

return false;}
//==============================================================================
IsANitro(componentid) {
if(GetVehicleComponentType(componentid) == CARMODTYPE_NITRO)
	return true;

return false;}
//==============================================================================
IsAFrontBumper(componentid) {
if(GetVehicleComponentType(componentid) == CARMODTYPE_FRONT_BUMPER)
	return true;

return false;}
//==============================================================================
IsARearBumper(componentid) {
if(GetVehicleComponentType(componentid) == CARMODTYPE_REAR_BUMPER)
	return true;

return false;}
//==============================================================================
IsAStereo(componentid) {
if(GetVehicleComponentType(componentid) == CARMODTYPE_STEREO)
	return true;

return false;}
//==============================================================================
IsAExhaust(componentid) {
if(GetVehicleComponentType(componentid) == CARMODTYPE_EXHAUST)
	return true;

return false;}
//==============================================================================
IsALamp(componentid) {
if(GetVehicleComponentType(componentid) == CARMODTYPE_LAMPS)
	return true;

return false;}
//==============================================================================
IsAHydraulic(componentid) {
if(GetVehicleComponentType(componentid) == CARMODTYPE_HYDRAULICS)
	return true;

return false;}
//==============================================================================
IsAVents(componentid) {
if(GetVehicleComponentType(componentid) == CARMODTYPE_VENT_RIGHT || GetVehicleComponentType(componentid) == CARMODTYPE_VENT_LEFT)
	return true;

return false;}
//==============================================================================
IsAHood(componentid) {
if(GetVehicleComponentType(componentid) == CARMODTYPE_HOOD)
	return true;

return false;}
//==============================================================================
IsAWheel(componentid) {
if(GetVehicleComponentType(componentid) == CARMODTYPE_WHEELS)
	return true;

return false;}
//==============================================================================
IsARoof(componentid) {
if(GetVehicleComponentType(componentid) == CARMODTYPE_ROOF)
	return true;

return false;}
//==============================================================================
TuneVehicle(vehicleid) {
if(vehicleid != -1) {
	if(VehicleInfo[vehicleid][vTuned] != 0) {
		if(VehicleInfo[vehicleid][vPaintJob] >= 0 && VehicleInfo[vehicleid][vPaintJob] < 6)
			ChangeVehiclePaintjob(VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vPaintJob]);
		if(IsASpoiler(VehicleInfo[vehicleid][vSpoiler]))
			AddVehicleComponent(VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vSpoiler]);
		if(IsANitro(VehicleInfo[vehicleid][vNitro]))
			AddVehicleComponent(VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vNitro]);
		if(IsAFrontBumper(VehicleInfo[vehicleid][vFrontBumper]))
			AddVehicleComponent(VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vFrontBumper]);
		if(IsARearBumper(VehicleInfo[vehicleid][vRearBumper]))
			AddVehicleComponent(VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vRearBumper]);
		if(IsAStereo(VehicleInfo[vehicleid][vStereo]))
			AddVehicleComponent(VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vStereo]);
		if(IsAExhaust(VehicleInfo[vehicleid][vExhaust]))
			AddVehicleComponent(VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vExhaust]);
		if(IsALamp(VehicleInfo[vehicleid][vLamps]))
			AddVehicleComponent(VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vLamps]);
		if(IsAHydraulic(VehicleInfo[vehicleid][vHydraulics]))
			AddVehicleComponent(VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vHydraulics]);
		if(IsAVents(VehicleInfo[vehicleid][vVents]))
			AddVehicleComponent(VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vVents]);
		if(IsAHood(VehicleInfo[vehicleid][vHood]))
			AddVehicleComponent(VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vHood]);
		if(IsAWheel(VehicleInfo[vehicleid][vWheels]))
			AddVehicleComponent(VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vWheels]);
		if(IsARoof(VehicleInfo[vehicleid][vRoof]))
			AddVehicleComponent(VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vRoof]);
		if(IsASkirt(VehicleInfo[vehicleid][vSkirt]))
			AddVehicleComponent(VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vSkirt]);

		ChangeVehicleColor(VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vColor1], VehicleInfo[vehicleid][vColor2]);
	}
}
}
//------------------------------------------------------------------------------
IsPlayerNearPlayer(Float:radi, playerid, targetid)
{
if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid)) {
	if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid)) {

		new Float:posx,
			Float:posy,
			Float:posz,
			Float:oldposx,
			Float:oldposy,
			Float:oldposz,
			Float:tempposx,
			Float:tempposy,
			Float:tempposz;

		GetPlayerPos(playerid, oldposx, oldposy, oldposz);

		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);

		if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
}
return 0;}
//------------------------------------------------------------------------------
stock ResetVehicleStatistics(i) {

if(i != INVALID_VEHICLE_ID) {

	if(Parked[i] != -1) {

		new Float:Pos[3];
		GetVehiclePos(i, Pos[0], Pos[1], Pos[2]);

		new parkID = IsCordsInOtherParkingZone(Pos[0], Pos[1]);

		if(parkID != -1) {
			ParkingPlaces[parkID][Parked[i]][parkTaken] = false;
		}
	}

	pizzaVehicle[i] = false;
	farmerVehicles[i][fvSeeds] = 0;
	farmerVehicles[i][fvMilk] = false;
	farmerVehicles[i][fvMilkpID] = -1;
	CisternFuel[i][0] = 0;
	CisternFuel[i][1] = 0;
	CisternFuel[i][2] = 0;
	CisternFuel[i][3] = 0;
	Parked[i] = -1;
	sljunak[i] = false;
	VehCement[i] = false;
	KutijaMatsa[i] = false;
	VehNovac[i] = false;
	KamionUsed[i] = -1;
	StateBox[i] = 0;
	BusyVehicle[i] = -1;
	Fusion_KillTimer(ParkingTime[i]);}
}

stock SetVehicleLabels(i) {

if(!VehicleInfo[i][Validv3DText]) {

	if(VehicleInfo[i][vUsage] == ADMIN_VOZILO) {

		VehicleInfo[i][Validv3DText] = true;
		VehicleInfo[i][v3DText] = Create3DTextLabel("[ AFG ] ", 0x33CCFFAA, 0.0, 0.0, 0.0, 50.0, 0, 1);
		Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
	}
	else if(VehicleInfo[i][vUsage] == PROMOTER_VOZILO) {

		VehicleInfo[i][Validv3DText] = true;
		VehicleInfo[i][v3DText] = Create3DTextLabel(" [ PROMOTER ] ", 0x33CCFFAA, 0.0, 0.0, 0.0, 50.0, 0, 1);
		Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
	}
	else if(VehicleInfo[i][vUsage] == VIP_VOZILO) {

		VehicleInfo[i][Validv3DText] = true;
		VehicleInfo[i][v3DText] = Create3DTextLabel("[ VIP ]", 0x33CCFFAA, 0.0, 0.0, 0.0, 50.0, 0, 1);
		Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
	}
	else if(VehicleInfo[i][vUsage] == HELPER_VOZILO) {

		VehicleInfo[i][Validv3DText] = true;
		VehicleInfo[i][v3DText] = Create3DTextLabel("[ HELPER ]", 0x33CCFFAA, 0.0, 0.0, 0.0, 50.0, 0, 1);
		Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
	}
	else if(VehicleInfo[i][vUsage] == IZLOZBENO_VOZILO) {

		VehicleInfo[i][Validv3DText] = true;
		VehicleInfo[i][v3DText] = Create3DTextLabel("[ IZLOZBENO VOZILO ]", 0x33CCFFAA, 0.0, 0.0, 0.0, 50.0, 0, 1);
		Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
	}
	else if(VehicleInfo[i][vUsage] == POSLOVNO_VOZILO) {
		if(VehicleInfo[i][vModel] == 572) {
			new szString[50];
			format(szString, sizeof(szString), "[ KOSAC TRAVE ]");

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(szString, 0x2867EDFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(VehicleInfo[i][vModel] == 531) {
			new szString[50];
			format(szString, sizeof(szString), "[ FARMER ]");

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(szString, 0x2867EDFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(VehicleInfo[i][vModel] == 532) {
			new szString[50];
			format(szString, sizeof(szString), "[ FARMER ]");

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(szString, 0x2867EDFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(VehicleInfo[i][vModel] == 478) {
			new szString[50];
			format(szString, sizeof(szString), "[ FARMER ]");

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(szString, 0x2867EDFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(VehicleInfo[i][vModel] == 437) {
			new szString[50];
			format(szString, sizeof(szString), "[ BUS VOZAC ]");

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(szString, 0x2867EDFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(VehicleInfo[i][vModel] == 578) {
			new szString[50];
			format(szString, sizeof(szString), "[ PREVOZNIK ]");

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(szString, 0x2867EDFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(VehicleInfo[i][vModel] == 455) {
			new szString[50];
			format(szString, sizeof(szString), "[ PREVOZNIK ]");

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(szString, 0x2867EDFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(VehicleInfo[i][vModel] == 609) {
			new szString[50];
			format(szString, sizeof(szString), "[ PEPSI DOSTAVLJAC ]");

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(szString, 0x2867EDFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(VehicleInfo[i][vModel] == 428) {
			new szString[50];
			format(szString, sizeof(szString), "[ PREVOZNIK NOVCA ]");

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(szString, 0x2867EDFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(VehicleInfo[i][vModel] == 519) {
			new szString[50];
			format(szString, sizeof(szString), "[ PILOT ]");

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(szString, 0x2867EDFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(VehicleInfo[i][vModel] == 553) {
			new szString[50];
			format(szString, sizeof(szString), "[ PILOT ]");

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(szString, 0x2867EDFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
	}
	else if(VehicleInfo[i][vUsage] == ORGANIZACIJSKO_VOZILO) {

		if(OI[VehicleInfo[i][vOrganization]][oTip] == ORG_TIP_PD) {

			new stringce[20];
			format(stringce, sizeof(stringce), "[ %s ]", OI[VehicleInfo[i][vOrganization]][oPreFix]);

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(stringce, 0x33CCFFAA, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(OI[VehicleInfo[i][vOrganization]][oTip] == ORG_TIP_BANDA) {

			new stringce[20];
			format(stringce, sizeof(stringce), "[ %s ]", OI[VehicleInfo[i][vOrganization]][oPreFix]);

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(stringce, 0x33CCFFAA, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(OI[VehicleInfo[i][vOrganization]][oTip] == ORG_TIP_MAFIJA) {

			new stringce[20];
			format(stringce, sizeof(stringce), "[ %s ]", OI[VehicleInfo[i][vOrganization]][oPreFix]);

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(stringce, 0x33CCFFAA, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(OI[VehicleInfo[i][vOrganization]][oTip] == ORG_TIP_MC) {

			new stringce[20];
			format(stringce, sizeof(stringce), "[ %s ]", OI[VehicleInfo[i][vOrganization]][oPreFix]);

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(stringce, 0x33CCFFAA, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(OI[VehicleInfo[i][vOrganization]][oTip] == ORG_TIP_SR) {

			new stringce[20];
			format(stringce, sizeof(stringce), "[ %s ]", OI[VehicleInfo[i][vOrganization]][oPreFix]);

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(stringce, 0x33CCFFAA, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(OI[VehicleInfo[i][vOrganization]][oTip] == ORG_TIP_MD) {

			new stringce[20];
			format(stringce, sizeof(stringce), "[ %s ]", OI[VehicleInfo[i][vOrganization]][oPreFix]);

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(stringce, 0x33CCFFAA, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(OI[VehicleInfo[i][vOrganization]][oTip] == ORG_TIP_CNN) {

			new stringce[20];
			format(stringce, sizeof(stringce), "[ %s ]", OI[VehicleInfo[i][vOrganization]][oPreFix]);

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(stringce, 0x33CCFFAA, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(OI[VehicleInfo[i][vOrganization]][oTip] == ORG_TIP_HITM) {

			new stringce[20];
			format(stringce, sizeof(stringce), "[ %s ]", OI[VehicleInfo[i][vOrganization]][oPreFix]);

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(stringce, 0x33CCFFAA, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(OI[VehicleInfo[i][vOrganization]][oTip] == ORG_TIP_ELEK) {

			new stringce[20];
			format(stringce, sizeof(stringce), "[ %s ]", OI[VehicleInfo[i][vOrganization]][oPreFix]);

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(stringce, 0x33CCFFAA, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(OI[VehicleInfo[i][vOrganization]][oTip] == ORG_TIP_TAXI) {

			new stringce[20];
			format(stringce, sizeof(stringce), "[ %s ]", OI[VehicleInfo[i][vOrganization]][oPreFix]);

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(stringce, 0x33CCFFAA, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
		else if(OI[VehicleInfo[i][vOrganization]][oTip] == ORG_TIP_PS) {

			new stringce[20];
			format(stringce, sizeof(stringce), "[ %s ]", OI[VehicleInfo[i][vOrganization]][oPreFix]);

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(stringce, 0x33CCFFAA, 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
	}
	else if(VehicleInfo[i][vUsage] == PUMPA_VOZILO) {

		if(VehicleInfo[i][vModel] == 584) {

			new fstationID = VehicleInfo[i][vFuelStation];

			new stringce[256];
			format(stringce, sizeof stringce, "{0F87FF]["col_white"CISTERNA {0F87FF]]\n{0F87FF]Dizel: {FFFFFF]%d/300 litara\n{0F87FF]Benzin: {FFFFFF]%d/300 litara\n{0F87FF]Gas: {FFFFFF]%d/300 litara\n{0F87FF]Gasno Ulje: {FFFFFF]%d/300 litara\n\n{0F87FF][{FFFFFF]%s {0F87FF]]", CisternFuel[VehicleInfo[i][vID]][0], CisternFuel[VehicleInfo[i][vID]][1], CisternFuel[VehicleInfo[i][vID]][3], CisternFuel[VehicleInfo[i][vID]][2], FuelStation[fstationID][fsName]);

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(stringce, 0x33CCFFAA, 0.0, 0.0, 0.0, 30.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
	}
}
else if(VehicleInfo[i][Validv3DText]) {

	if(VehicleInfo[i][vUsage] == PUMPA_VOZILO) {

		if(VehicleInfo[i][vModel] == 584) {

			new fstationID = VehicleInfo[i][vFuelStation];

			Delete3DTextLabel(VehicleInfo[i][v3DText]);

			new stringce[256];
			format(stringce, sizeof stringce, "{0F87FF]["col_white"CISTERNA {0F87FF]]\n{0F87FF]Dizel: {FFFFFF]%d/300 litara\n{0F87FF]Benzin: {FFFFFF]%d/300 litara\n{0F87FF]Gas: {FFFFFF]%d/300 litara\n{0F87FF]Gasno Ulje: {FFFFFF]%d/300 litara\n\n{0F87FF][{FFFFFF]%s {0F87FF]]", CisternFuel[VehicleInfo[i][vID]][0], CisternFuel[VehicleInfo[i][vID]][1], CisternFuel[VehicleInfo[i][vID]][3], CisternFuel[VehicleInfo[i][vID]][2], FuelStation[fstationID][fsName]);

			VehicleInfo[i][Validv3DText] = true;
			VehicleInfo[i][v3DText] = Create3DTextLabel(stringce, 0x33CCFFAA, 0.0, 0.0, 0.0, 30.0, 0, 1);
			Attach3DTextLabelToVehicle(VehicleInfo[i][v3DText], VehicleInfo[i][vID], 0.0, 0.0, 0.0);
		}
	}
}
}

stock ResetVehicle(i) {
VehicleInfo[i][vOwned] = 0;
VehicleInfo[i][vPrice] = 0;
strmid(VehicleInfo[i][vOwner], "Drzava", 0, strlen("Drzava"), 32);
VehicleInfo[i][vLocked] = 0;
VehicleInfo[i][vLokacijaX] = 0;
VehicleInfo[i][vLokacijaY] = 0;
VehicleInfo[i][vLokacijaZ] = 0;
VehicleInfo[i][vLokacijaA] = 0;
VehicleInfo[i][vVirtualWorld] = 0;
VehicleInfo[i][vInterior] = 0;
VehicleInfo[i][vUsage] = 0;
VehicleInfo[i][vJob] = -1;
VehicleInfo[i][vOrganization] = -1;
VehicleInfo[i][vFuelStation] = -1;
VehicleInfo[i][vColor1] = 0;
VehicleInfo[i][vColor2] = 0;
VehicleInfo[i][vModel] = 0;
VehicleInfo[i][vReg] = 0;
VehicleInfo[i][vRegVreme] = 0;
VehicleInfo[i][vTeh] = 0;
VehicleInfo[i][vGPS] = 0;
VehicleInfo[i][vOsiguranje] = 0;
VehicleInfo[i][vLock] = 0;
VehicleInfo[i][vAlarm] = 0;
VehicleInfo[i][vFuel] = 100;
VehicleInfo[i][vFuelType] = 0;
VehicleInfo[i][vNeon] = 0;
VehicleInfo[i][vTuned] = 0;
VehicleInfo[i][vImobilizator] = 0;
VehicleInfo[i][vSpoiler] = 0;
VehicleInfo[i][vHood] = 0;
VehicleInfo[i][vRoof] = 0;
VehicleInfo[i][vSkirt] = 0;
VehicleInfo[i][vLamps] = 0;
VehicleInfo[i][vNitro] = 0;
VehicleInfo[i][vExhaust] = 0;
VehicleInfo[i][vWheels] = 0;
VehicleInfo[i][vStereo] = 0;
VehicleInfo[i][vHydraulics] = 0;
VehicleInfo[i][vFrontBumper] = 0;
VehicleInfo[i][vRearBumper] = 0;
VehicleInfo[i][vVents] = 0;
VehicleInfo[i][vPaintJob] = 255;
VehicleInfo[i][vProvera] = -1;
VehicleInfo[i][vDrug][0] = 0;
VehicleInfo[i][vDrug][1] = 0;
VehicleInfo[i][vDrug][2] = 0;
VehicleInfo[i][vDrug][3] = 0;
VehicleInfo[i][vDrug][4] = 0;
VehicleInfo[i][vDrug][5] = 0;
VehicleInfo[i][vDrugCode][0] = 0;
VehicleInfo[i][vDrugCode][1] = 0;
VehicleInfo[i][vDrugCode][2] = 0;
VehicleInfo[i][vDrugCode][3] = 0;
VehicleInfo[i][vDrugCode][4] = 0;
VehicleInfo[i][vDrugCode][5] = 0;
VehicleInfo[i][vMaterijali] = 0;
VehicleInfo[i][vMelee] = 0;
VehicleInfo[i][vWeap1] = 0;
VehicleInfo[i][vAmmo1] = 0;
VehicleInfo[i][vWeap2] = 0;
VehicleInfo[i][vAmmo2] = 0;
VehicleInfo[i][vGajbica][0] = -1;
VehicleInfo[i][vGajbica][1] = -1;
VehicleInfo[i][vGajbica][2] = -1;
VehicleInfo[i][vGajbica][3] = -1;
VehicleInfo[i][vGajbica][4] = -1;
VehicleInfo[i][vGajbicaAmmount][0] = 0;
VehicleInfo[i][vGajbicaAmmount][1] = 0;
VehicleInfo[i][vGajbicaAmmount][2] = 0;
VehicleInfo[i][vGajbicaAmmount][3] = 0;
VehicleInfo[i][vGajbicaAmmount][4] = 0;
VehicleInfo[i][vNeaktivnost] = 0;
VehicleInfo[i][vKilometri] = 0;
VehicleInfo[i][vMetri] = 0;
VehicleInfo[i][vID] = -1;}
//------------------------------------------------------------------------------
stock ObrisiVozilo(autoid)
{
new string[64];
format(string, sizeof(string), V_FILE, autoid);
if(fexist(string)) { fremove(string); }
return 1;}
//------------------------------------------------------------------------------
stock KreirajInterijer(const ime[], Float:XUlaz, Float:YUlaz, Float:ZUlaz, Float:XIzlaz, Float:YIzlaz, Float:ZIzlaz, eIntID, IntIDx, vwID, vwIDx)
{
intide++;
strmid(IntInfo[intide][iIme], ime, 0, strlen(ime), 255);
IntInfo[intide][iXUlaz] = XUlaz;
IntInfo[intide][iYUlaz] = YUlaz;
IntInfo[intide][iZUlaz] = ZUlaz;
IntInfo[intide][iXIzlaz] = XIzlaz;
IntInfo[intide][iYIzlaz] = YIzlaz;
IntInfo[intide][iZIzlaz] = ZIzlaz;
IntInfo[intide][iIntID] = eIntID;
IntInfo[intide][iIntIDSpolja] = IntIDx;
IntInfo[intide][iVwID] = vwID;
IntInfo[intide][iVwIDSpolja] = vwIDx;

new string[64];
format(string, sizeof(string), ""col_server"[%s]\n"col_white"'ENTER' za ulaz", ime);
Create3DandP(string, XUlaz, YUlaz, ZUlaz, -1, -1, 19133, 15.0);
new string2[64];
format(string2, sizeof(string2), ""col_server"[%s]\n"col_white"'ENTER' za izlaz", ime);
Create3DandP(string2, XIzlaz, YIzlaz, ZIzlaz, -1, -1, 1239, 15.0);

return intide;}
//------------------------------------------------------------------------------
stock LoadVehicles() {

for(new i = 1; i < MAX_CARS; i++) {

	VehicleInfo[i][vID] = -1;
	new vFile[50];
	format(vFile, sizeof(vFile), V_FILE, i);
	if(fexist(vFile)) {

		INI_ParseFile(vFile, "OcitajVozilo", .bExtra = true, .extra = i);
		VehicleInfo[i][vID] = -1;
		VehicleInfo[i][vProvera] = i;
		VehicleInfo[i][Validv3DText] = false;
		if(VehicleInfo[i][vModel] != 0) {

			VehicleInfo[i][vID] = Fusion_CreateVehicle(i, VehicleInfo[i][vUsage], VehicleInfo[i][vOrganization], VehicleInfo[i][vJob], VehicleInfo[i][vFuelStation], VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ]+1.0, VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], 300000);
			ac_LinkVehicleToInterior(VehicleInfo[i][vID], VehicleInfo[i][vInterior]);
			SetVehicleVirtualWorld(VehicleInfo[i][vID], VehicleInfo[i][vVirtualWorld]);
			vCanDrive[VehicleInfo[i][vID]] = 1;

			if(VehicleInfo[i][vFuelType] == 0) {

				if(Diesel(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 1;
				else if(Gasoline(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 2;
				else if(GasOil(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 3;
			}

			ac_SetVehicleParamsEx(VehicleInfo[i][vID], 0, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
			if(IsVehicleBajs(VehicleInfo[i][vID])) {
				ac_SetVehicleParamsEx(VehicleInfo[i][vID], 1, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
			}
			ResetVehicleStatistics(VehicleInfo[i][vID]);
			VehicleInfo[i][vFuel] = getAmountFuel(VehicleInfo[i][vID]);

			if(VehicleInfo[i][vUsage] == PRIVATNO_VOZILO) {
				Fuel[VehicleInfo[i][vID]] = VehicleInfo[i][vFuel];
			}
			else if(VehicleInfo[i][vUsage] == POSLOVNO_VOZILO) {
				VehicleInfo[i][vFuel] = 100;
				Fuel[VehicleInfo[i][vID]] = 100;
			}
			else {
				Fuel[VehicleInfo[i][vID]] = getAmountFuel(VehicleInfo[i][vID]);
			}

			SetVehicleLabels(i);

			new h = VehicleInfo[i][vID];
			if(VehicleInfo[i][vReg] == 1) {
				SetTablice(h);
			}
			else if(VehicleInfo[i][vReg] == 2) {
				SetVehicleNumberPlate(h, VehicleInfo[i][vTablice]);
			}
			else  {
				SetVehicleNumberPlate(h, "NEMA");
			}

			TuneVehicle(i);
			SaveVehicle(i);

		}
		else if(VehicleInfo[i][vModel] == 0) {

			ResetVehicle(i);
			ObrisiVozilo(i);
			fremove(V_FILE);
		}
		//printf("acc_AddStaticVehicle(%d, %f, %f, %f, %f, %d, %d, %d, %d, %d)", VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ], VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], VehicleInfo[i][vUsage], VehicleInfo[i][vOrganization], VehicleInfo[i][vJob]);
	}
}
}
//------------------------------------------------------------------------------
stock GetVehicleZone(h, zone[], len)
{
new Float:x22, Float:y22;

new Float:x,
	Float:y,
	Float:z;

GetVehiclePos(h, x, y, z);

x22 = x; y22 = y;
for(new i = 0; i != sizeof(gSAZones); i++)
{
	if(x22 >= gSAZones[i][SAZONE_AREA][0] && x22 <= gSAZones[i][SAZONE_AREA][3] && y22 >= gSAZones[i][SAZONE_AREA][1] && y22 <= gSAZones[i][SAZONE_AREA][4])
	{
		return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
	}
}
return 0;}
//------------------------------------------------------------------------------
stock CreateTextDraws() {

_load_global_tds();

}

stock WarTDControl(playerid, bool:show) {
if(show == true) {
	WARTextDraw[playerid][0] = CreatePlayerTextDraw(playerid,640.000000, 220.000000, "          ");
	PlayerTextDrawBackgroundColor(playerid,WARTextDraw[playerid][0], 255);
	PlayerTextDrawFont(playerid,WARTextDraw[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid,WARTextDraw[playerid][0], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,WARTextDraw[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,WARTextDraw[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,WARTextDraw[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,WARTextDraw[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,WARTextDraw[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid,WARTextDraw[playerid][0], 150);
	PlayerTextDrawTextSize(playerid,WARTextDraw[playerid][0], 500.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid,WARTextDraw[playerid][0], 0);

	WARTextDraw[playerid][1] = CreatePlayerTextDraw(playerid,567.000000, 220.000000, "WAR");
	PlayerTextDrawAlignment(playerid,WARTextDraw[playerid][1], 2);
	PlayerTextDrawBackgroundColor(playerid,WARTextDraw[playerid][1], 255);
	PlayerTextDrawFont(playerid,WARTextDraw[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid,WARTextDraw[playerid][1], 0.419999, 0.899999);
	PlayerTextDrawColor(playerid,WARTextDraw[playerid][1], FUSIONGAMING);
	PlayerTextDrawSetOutline(playerid,WARTextDraw[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,WARTextDraw[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid,WARTextDraw[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid,WARTextDraw[playerid][1], 0);

	WARTextDraw[playerid][2] = CreatePlayerTextDraw(playerid,568.000000, 227.000000, "-");
	PlayerTextDrawAlignment(playerid,WARTextDraw[playerid][2], 2);
	PlayerTextDrawBackgroundColor(playerid,WARTextDraw[playerid][2], 255);
	PlayerTextDrawFont(playerid,WARTextDraw[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid,WARTextDraw[playerid][2], 12.080010, 0.899999);
	PlayerTextDrawColor(playerid,WARTextDraw[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,WARTextDraw[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,WARTextDraw[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid,WARTextDraw[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid,WARTextDraw[playerid][2], 0);

	WARTextDraw[playerid][3] = CreatePlayerTextDraw(playerid,527.000000, 234.000000, "Tim 1");
	PlayerTextDrawAlignment(playerid,WARTextDraw[playerid][3], 2);
	PlayerTextDrawBackgroundColor(playerid,WARTextDraw[playerid][3], 255);
	PlayerTextDrawFont(playerid,WARTextDraw[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid,WARTextDraw[playerid][3], 0.360000, 0.899999);
	PlayerTextDrawColor(playerid,WARTextDraw[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,WARTextDraw[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid,WARTextDraw[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid,WARTextDraw[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid,WARTextDraw[playerid][3], 0);

	WARTextDraw[playerid][4] = CreatePlayerTextDraw(playerid,608.000000, 234.000000, "Tim 2");
	PlayerTextDrawAlignment(playerid,WARTextDraw[playerid][4], 2);
	PlayerTextDrawBackgroundColor(playerid,WARTextDraw[playerid][4], 255);
	PlayerTextDrawFont(playerid,WARTextDraw[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid,WARTextDraw[playerid][4], 0.360000, 0.899999);
	PlayerTextDrawColor(playerid,WARTextDraw[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid,WARTextDraw[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid,WARTextDraw[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid,WARTextDraw[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid,WARTextDraw[playerid][4], 0);

	WARTextDraw[playerid][5] = CreatePlayerTextDraw(playerid,506.000000, 248.000000, "Ubistva: 100~n~Smrti: 100~n~Igraci: 10");
	PlayerTextDrawBackgroundColor(playerid,WARTextDraw[playerid][5], 255);
	PlayerTextDrawFont(playerid,WARTextDraw[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid,WARTextDraw[playerid][5], 0.230000, 0.899999);
	PlayerTextDrawColor(playerid,WARTextDraw[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid,WARTextDraw[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid,WARTextDraw[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid,WARTextDraw[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid,WARTextDraw[playerid][5], 0);

	WARTextDraw[playerid][6] = CreatePlayerTextDraw(playerid,573.000000, 248.000000, "Ubistva: 100~n~Smrti: 100~n~Igraci: 10");
	PlayerTextDrawBackgroundColor(playerid,WARTextDraw[playerid][6], 255);
	PlayerTextDrawFont(playerid,WARTextDraw[playerid][6], 2);
	PlayerTextDrawLetterSize(playerid,WARTextDraw[playerid][6], 0.230000, 0.899999);
	PlayerTextDrawColor(playerid,WARTextDraw[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid,WARTextDraw[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid,WARTextDraw[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid,WARTextDraw[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid,WARTextDraw[playerid][6], 0);

	WARTextDraw[playerid][7] = CreatePlayerTextDraw(playerid,568.000000, 275.000000, "-");
	PlayerTextDrawAlignment(playerid,WARTextDraw[playerid][7], 2);
	PlayerTextDrawBackgroundColor(playerid,WARTextDraw[playerid][7], 255);
	PlayerTextDrawFont(playerid,WARTextDraw[playerid][7], 2);
	PlayerTextDrawLetterSize(playerid,WARTextDraw[playerid][7], 12.080010, 0.899999);
	PlayerTextDrawColor(playerid,WARTextDraw[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid,WARTextDraw[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid,WARTextDraw[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid,WARTextDraw[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid,WARTextDraw[playerid][7], 0);

	WARTextDraw[playerid][8] = CreatePlayerTextDraw(playerid,567.000000, 284.000000, "10:00");
	PlayerTextDrawAlignment(playerid,WARTextDraw[playerid][8], 2);
	PlayerTextDrawBackgroundColor(playerid,WARTextDraw[playerid][8], 255);
	PlayerTextDrawFont(playerid,WARTextDraw[playerid][8], 2);
	PlayerTextDrawLetterSize(playerid,WARTextDraw[playerid][8], 0.459999, 1.300000);
	PlayerTextDrawColor(playerid,WARTextDraw[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid,WARTextDraw[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid,WARTextDraw[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid,WARTextDraw[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid,WARTextDraw[playerid][8], 0);


	for(new i = 0; i < 9; i ++) {
		PlayerTextDrawShow(playerid, WARTextDraw[playerid][i]);
	}

}
else if(show == false) {
	for(new i = 0; i < 9; i ++) {
		PlayerTextDrawHide(playerid, WARTextDraw[playerid][i]);
		PlayerTextDrawDestroy(playerid, WARTextDraw[playerid][i]);
		WARTextDraw[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
}
}

stock SetWarStatsTD(w) {
new string[128], stringcic[10];
foreach(new id : Player) {
		if(WARPInfo[id][WARIgrac] == w) {
		format(string ,sizeof(string),"~w~Ubistva: ~g~%d~n~~w~Smrti: ~b~%d~n~~w~Igraci: ~y~%d", WARInfo[w][WARTimSkor][0], WARInfo[w][WARTimSkor][1], WARInfo[w][WARTimClanovi][0]);
		PlayerTextDrawSetString(id, WARTextDraw[id][5],  string);
		format(string ,sizeof(string),"~w~Ubistva: ~g~%d~n~~w~Smrti: ~b~%d~n~~w~Igraci: ~y~%d", WARInfo[w][WARTimSkor][1], WARInfo[w][WARTimSkor][0], WARInfo[w][WARTimClanovi][1]);
		PlayerTextDrawSetString(id, WARTextDraw[id][6],  string);
		format(stringcic, sizeof(stringcic), "%s", OI[PlayerInfo[WARInfo[w][WARTimLider][0]][xLider]][oPreFix]);
		PlayerTextDrawSetString(id, WARTextDraw[id][3],  stringcic);
		format(stringcic, sizeof(stringcic), "%s", OI[PlayerInfo[WARInfo[w][WARTimLider][1]][xLider]][oPreFix]);
		PlayerTextDrawSetString(id, WARTextDraw[id][4],  stringcic);
	}
}
}

stock DestroyPlayerTextDraws(playerid) {

if(ShowedRegister[playerid] == true) {
	for(new i = 0; i < 25; i ++) {
		PlayerTextDrawHide(playerid, RegisterTD[playerid][i]);
		PlayerTextDrawDestroy(playerid, RegisterTD[playerid][i]);
		RegisterTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}

	ShowedRegister[playerid] = false;}
for(new i = 0; i < 22; i ++) {
	PlayerTextDrawHide(playerid, LoginTD[playerid][i]);
	PlayerTextDrawDestroy(playerid, LoginTD[playerid][i]);
	LoginTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;}
for(new i = 0; i < 12; i ++) {
	PlayerTextDrawDestroy(playerid, TaxistaTD[playerid][i]);
	TaxistaTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;}
for(new i = 0; i < 11; i ++) {
	PlayerTextDrawDestroy(playerid, Brzinomer[playerid][i]);
	Brzinomer[playerid][i] = PlayerText:INVALID_TEXT_DRAW;}

//PlayerTextDrawDestroy(playerid, FG_GPS[playerid]);
//FG_GPS[playerid] = PlayerText:INVALID_TEXT_DRAW;

PlayerTextDrawDestroy(playerid, SpecTextDraw[playerid]);
SpecTextDraw[playerid] = PlayerText:INVALID_TEXT_DRAW;

PlayerTextDrawDestroy(playerid, WantedIgraca[playerid]);
WantedIgraca[playerid] = PlayerText:INVALID_TEXT_DRAW;}

_load_player_tds(playerid)
{

FG_InGameP[playerid][0] = CreatePlayerTextDraw(playerid, 398.200042, 428.488891, "0");
PlayerTextDrawLetterSize(playerid, FG_InGameP[playerid][0], 0.112998, 0.542222);
PlayerTextDrawAlignment(playerid, FG_InGameP[playerid][0], 1);
PlayerTextDrawColor(playerid, FG_InGameP[playerid][0], 255);
PlayerTextDrawSetShadow(playerid, FG_InGameP[playerid][0], 1);
PlayerTextDrawBackgroundColor(playerid, FG_InGameP[playerid][0], -205);
PlayerTextDrawFont(playerid, FG_InGameP[playerid][0], 2);
PlayerTextDrawSetProportional(playerid, FG_InGameP[playerid][0], 1);

FG_InGameP[playerid][1] = CreatePlayerTextDraw(playerid, 474.804718, 428.488891, "0");
PlayerTextDrawLetterSize(playerid, FG_InGameP[playerid][1], 0.112998, 0.542222);
PlayerTextDrawAlignment(playerid, FG_InGameP[playerid][1], 1);
PlayerTextDrawColor(playerid, FG_InGameP[playerid][1], 255);
PlayerTextDrawSetShadow(playerid, FG_InGameP[playerid][1], 1);
PlayerTextDrawBackgroundColor(playerid, FG_InGameP[playerid][1], -205);
PlayerTextDrawFont(playerid, FG_InGameP[playerid][1], 2);
PlayerTextDrawSetProportional(playerid, FG_InGameP[playerid][1], 1);
return (true);}

_load_global_tds()
{
FG_InGame[0] = TextDrawCreate(100.733299, 424.814971, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[0], 433.000000, 15.000000);
TextDrawAlignment(FG_InGame[0], 1);
TextDrawColor(FG_InGame[0], 118364159);
TextDrawSetShadow(FG_InGame[0], 0);
TextDrawBackgroundColor(FG_InGame[0], 255);
TextDrawFont(FG_InGame[0], 4);
TextDrawSetProportional(FG_InGame[0], 0);

FG_InGame[1] = TextDrawCreate(90.799987, 421.440856, "ld_beat:chit");
TextDrawTextSize(FG_InGame[1], 19.000000, 21.799995);
TextDrawAlignment(FG_InGame[1], 1);
TextDrawColor(FG_InGame[1], 118364159);
TextDrawSetShadow(FG_InGame[1], 0);
TextDrawBackgroundColor(FG_InGame[1], 255);
TextDrawFont(FG_InGame[1], 4);
TextDrawSetProportional(FG_InGame[1], 0);

FG_InGame[2] = TextDrawCreate(495.067230, 487.758941, "");
TextDrawTextSize(FG_InGame[2], 87.000000, -119.000000);
TextDrawAlignment(FG_InGame[2], 1);
TextDrawColor(FG_InGame[2], 118364159);
TextDrawSetShadow(FG_InGame[2], 0);
TextDrawBackgroundColor(FG_InGame[2], -256);
TextDrawFont(FG_InGame[2], 5);
TextDrawBackgroundColor(FG_InGame[2], 0);
TextDrawSetProportional(FG_InGame[2], 0);
TextDrawSetPreviewModel(FG_InGame[2], 19177);
TextDrawSetPreviewRot(FG_InGame[2], 0.000000, 0.000000, 0.000000, 1.000000);

FG_InGame[3] = TextDrawCreate(491.467010, 494.059326, "");
TextDrawTextSize(FG_InGame[3], 87.000000, -119.000000);
TextDrawAlignment(FG_InGame[3], 1);
TextDrawColor(FG_InGame[3], 118364159);
TextDrawSetShadow(FG_InGame[3], 0);
TextDrawBackgroundColor(FG_InGame[3], -256);
TextDrawFont(FG_InGame[3], 5);
TextDrawBackgroundColor(FG_InGame[3], 0);
TextDrawSetProportional(FG_InGame[3], 0);
TextDrawSetPreviewModel(FG_InGame[3], 19177);
TextDrawSetPreviewRot(FG_InGame[3], 0.000000, 0.000000, 0.000000, 1.000000);

FG_InGame[4] = TextDrawCreate(491.033752, 399.955627, "");
TextDrawTextSize(FG_InGame[4], 83.000000, 50.000000);
TextDrawAlignment(FG_InGame[4], 1);
TextDrawColor(FG_InGame[4], 118364159);
TextDrawSetShadow(FG_InGame[4], 0);
TextDrawBackgroundColor(FG_InGame[4], -256);
TextDrawFont(FG_InGame[4], 5);
TextDrawBackgroundColor(FG_InGame[4], 0);
TextDrawSetProportional(FG_InGame[4], 0);
TextDrawSetPreviewModel(FG_InGame[4], 19177);
TextDrawSetPreviewRot(FG_InGame[4], 0.000000, 0.000000, 0.000000, 1.000000);

FG_InGame[5] = TextDrawCreate(532.633850, 424.770568, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[5], 2.670001, 15.020000);
TextDrawAlignment(FG_InGame[5], 1);
TextDrawColor(FG_InGame[5], 118364159);
TextDrawSetShadow(FG_InGame[5], 0);
TextDrawBackgroundColor(FG_InGame[5], 255);
TextDrawFont(FG_InGame[5], 4);
TextDrawSetProportional(FG_InGame[5], 0);

FG_InGame[6] = TextDrawCreate(534.300537, 425.600189, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[6], 2.000000, 13.000000);
TextDrawAlignment(FG_InGame[6], 1);
TextDrawColor(FG_InGame[6], 118364159);
TextDrawSetShadow(FG_InGame[6], 0);
TextDrawBackgroundColor(FG_InGame[6], 255);
TextDrawFont(FG_InGame[6], 4);
TextDrawSetProportional(FG_InGame[6], 0);

FG_InGame[7] = TextDrawCreate(533.000244, 427.547912, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[7], 175.000000, 0.230000);
TextDrawAlignment(FG_InGame[7], 1);
TextDrawColor(FG_InGame[7], -1);
TextDrawSetShadow(FG_InGame[7], 0);
TextDrawBackgroundColor(FG_InGame[7], 255);
TextDrawFont(FG_InGame[7], 4);
TextDrawSetProportional(FG_InGame[7], 0);

FG_InGame[8] = TextDrawCreate(530.400878, 431.348144, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[8], 175.000000, 0.230000);
TextDrawAlignment(FG_InGame[8], 1);
TextDrawColor(FG_InGame[8], -1);
TextDrawSetShadow(FG_InGame[8], 0);
TextDrawBackgroundColor(FG_InGame[8], 255);
TextDrawFont(FG_InGame[8], 4);
TextDrawSetProportional(FG_InGame[8], 0);

FG_InGame[9] = TextDrawCreate(527.801513, 435.048370, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[9], 175.000000, 0.230000);
TextDrawAlignment(FG_InGame[9], 1);
TextDrawColor(FG_InGame[9], -1);
TextDrawSetShadow(FG_InGame[9], 0);
TextDrawBackgroundColor(FG_InGame[9], 255);
TextDrawFont(FG_InGame[9], 4);
TextDrawSetProportional(FG_InGame[9], 0);

FG_InGame[10] = TextDrawCreate(95.499954, 419.707641, "PARTICLE:LAMP_SHAD_64");
TextDrawTextSize(FG_InGame[10], 433.000000, 15.000000);
TextDrawAlignment(FG_InGame[10], 1);
TextDrawColor(FG_InGame[10], 118364159);
TextDrawSetShadow(FG_InGame[10], 0);
TextDrawBackgroundColor(FG_InGame[10], 255);
TextDrawFont(FG_InGame[10], 4);
TextDrawSetProportional(FG_InGame[10], 0);

FG_InGame[11] = TextDrawCreate(97.200012, 423.285339, "PARTICLE:LAMP_SHAD_64");
TextDrawTextSize(FG_InGame[11], 433.000000, 9.000000);
TextDrawAlignment(FG_InGame[11], 1);
TextDrawColor(FG_InGame[11], -250);
TextDrawSetShadow(FG_InGame[11], 0);
TextDrawBackgroundColor(FG_InGame[11], 255);
TextDrawFont(FG_InGame[11], 4);
TextDrawSetProportional(FG_InGame[11], 0);

FG_InGame[12] = TextDrawCreate(93.133384, 429.218597, "((");
TextDrawLetterSize(FG_InGame[12], 0.121665, 0.442665);
TextDrawAlignment(FG_InGame[12], 1);
TextDrawColor(FG_InGame[12], -1);
TextDrawSetShadow(FG_InGame[12], 0);
TextDrawBackgroundColor(FG_InGame[12], 255);
TextDrawFont(FG_InGame[12], 1);
TextDrawSetProportional(FG_InGame[12], 1);

FG_InGame[13] = TextDrawCreate(136.966690, 580.844482, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[13], 4.769989, 3.000000);
TextDrawAlignment(FG_InGame[13], 1);
TextDrawColor(FG_InGame[13], -1);
TextDrawSetShadow(FG_InGame[13], 0);
TextDrawBackgroundColor(FG_InGame[13], 255);
TextDrawFont(FG_InGame[13], 4);
TextDrawSetProportional(FG_InGame[13], 0);

FG_InGame[14] = TextDrawCreate(225.067245, 601.759094, "");
TextDrawTextSize(FG_InGame[14], 19.000000, -25.000000);
TextDrawAlignment(FG_InGame[14], 1);
TextDrawColor(FG_InGame[14], -1);
TextDrawSetShadow(FG_InGame[14], 0);
TextDrawBackgroundColor(FG_InGame[14], -256);
TextDrawFont(FG_InGame[14], 5);
TextDrawSetProportional(FG_InGame[14], 0);
TextDrawBackgroundColor(FG_InGame[14], 0);
TextDrawSetPreviewModel(FG_InGame[14], 19177);
TextDrawSetPreviewRot(FG_InGame[14], 0.000000, 0.000000, 0.000000, 1.000000);

FG_InGame[15] = TextDrawCreate(321.666717, 428.103759, "00:00~n~00/00/0000");
TextDrawLetterSize(FG_InGame[15], 0.102664, 0.446814);
TextDrawAlignment(FG_InGame[15], 2);
TextDrawColor(FG_InGame[15], -1);
TextDrawSetShadow(FG_InGame[15], 0);
TextDrawBackgroundColor(FG_InGame[15], 255);
TextDrawFont(FG_InGame[15], 2);
TextDrawSetProportional(FG_InGame[15], 1);

FG_InGame[16] = TextDrawCreate(540.999694, 439.148193, "particle:cloudmasked");
TextDrawTextSize(FG_InGame[16], -25.000000, -14.000000);
TextDrawAlignment(FG_InGame[16], 1);
TextDrawColor(FG_InGame[16], 118364154);
TextDrawSetShadow(FG_InGame[16], 0);
TextDrawBackgroundColor(FG_InGame[16], 255);
TextDrawFont(FG_InGame[16], 4);
TextDrawSetProportional(FG_InGame[16], 0);

FG_InGame[17] = TextDrawCreate(540.999694, 439.148193, "particle:cloudmasked");
TextDrawTextSize(FG_InGame[17], -25.000000, -14.000000);
TextDrawAlignment(FG_InGame[17], 1);
TextDrawColor(FG_InGame[17], 118364154);
TextDrawSetShadow(FG_InGame[17], 0);
TextDrawBackgroundColor(FG_InGame[17], 255);
TextDrawFont(FG_InGame[17], 4);
TextDrawSetProportional(FG_InGame[17], 0);

FG_InGame[18] = TextDrawCreate(111.333000, 439.147979, "particle:cloudmasked");
TextDrawTextSize(FG_InGame[18], -12.000000, -11.000000);
TextDrawAlignment(FG_InGame[18], 1);
TextDrawColor(FG_InGame[18], -222);
TextDrawSetShadow(FG_InGame[18], 0);
TextDrawBackgroundColor(FG_InGame[18], 255);
TextDrawFont(FG_InGame[18], 4);
TextDrawSetProportional(FG_InGame[18], 0);

FG_InGame[19] = TextDrawCreate(115.333328, 428.933471, "Postujte_druge_igrace_kako_bi_i_oni_postovali_vas");
TextDrawLetterSize(FG_InGame[19], 0.103330, 0.550517);
TextDrawAlignment(FG_InGame[19], 1);
TextDrawColor(FG_InGame[19], -1);
TextDrawSetShadow(FG_InGame[19], 0);
TextDrawBackgroundColor(FG_InGame[19], 255);
TextDrawFont(FG_InGame[19], 2);
TextDrawSetProportional(FG_InGame[19], 1);

FG_InGame[20] = TextDrawCreate(96.333343, 410.211059, "");
TextDrawTextSize(FG_InGame[20], 21.000000, 35.000000);
TextDrawAlignment(FG_InGame[20], 1);
TextDrawColor(FG_InGame[20], -1);
TextDrawSetShadow(FG_InGame[20], 0);
TextDrawFont(FG_InGame[20], 5);
TextDrawBackgroundColor(FG_InGame[20], 0);
TextDrawSetProportional(FG_InGame[20], 0);
TextDrawSetPreviewModel(FG_InGame[20], 2345);
TextDrawSetPreviewRot(FG_InGame[20], 0.000000, 0.000000, 0.000000, 1.000000);

FG_InGame[21] = TextDrawCreate(414.133483, 468.162536, "");
TextDrawTextSize(FG_InGame[21], -53.000000, -73.000000);
TextDrawAlignment(FG_InGame[21], 1);
TextDrawColor(FG_InGame[21], -1);
TextDrawSetShadow(FG_InGame[21], 0);
TextDrawBackgroundColor(FG_InGame[21], -256);
TextDrawFont(FG_InGame[21], 5);
TextDrawBackgroundColor(FG_InGame[21], 0);
TextDrawSetProportional(FG_InGame[21], 0);
TextDrawSetPreviewModel(FG_InGame[21], 19177);
TextDrawSetPreviewRot(FG_InGame[21], 0.000000, 0.000000, 0.000000, 1.000000);

FG_InGame[22] = TextDrawCreate(366.867065, 412.288482, "");
TextDrawTextSize(FG_InGame[22], 49.000000, 41.000000);
TextDrawAlignment(FG_InGame[22], 1);
TextDrawColor(FG_InGame[22], -1);
TextDrawSetShadow(FG_InGame[22], 0);
TextDrawBackgroundColor(FG_InGame[22], -256);
TextDrawFont(FG_InGame[22], 5);
TextDrawSetProportional(FG_InGame[22], 0);
TextDrawBackgroundColor(FG_InGame[22], 0);
TextDrawSetPreviewModel(FG_InGame[22], 19177);
TextDrawSetPreviewRot(FG_InGame[22], 0.000000, 0.000000, 0.000000, 1.000000);

FG_InGame[23] = TextDrawCreate(368.766723, 468.132995, "");
TextDrawTextSize(FG_InGame[23], 53.000000, -73.000000);
TextDrawAlignment(FG_InGame[23], 1);
TextDrawColor(FG_InGame[23], -1);
TextDrawSetShadow(FG_InGame[23], 0);
TextDrawBackgroundColor(FG_InGame[23], -256);
TextDrawFont(FG_InGame[23], 5);
TextDrawBackgroundColor(FG_InGame[23], 0);
TextDrawSetProportional(FG_InGame[23], 0);
TextDrawSetPreviewModel(FG_InGame[23], 19177);
TextDrawSetPreviewRot(FG_InGame[23], 0.000000, 0.000000, 0.000000, 1.000000);

FG_InGame[24] = TextDrawCreate(395.666442, 427.862884, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[24], 47.000000, 7.000000);
TextDrawAlignment(FG_InGame[24], 1);
TextDrawColor(FG_InGame[24], -1);
TextDrawSetShadow(FG_InGame[24], 0);
TextDrawBackgroundColor(FG_InGame[24], 255);
TextDrawFont(FG_InGame[24], 4);
TextDrawSetProportional(FG_InGame[24], 0);

FG_InGame[25] = TextDrawCreate(544.100341, 430.681121, "particle:shad_ped");
TextDrawTextSize(FG_InGame[25], 90.000000, -3.000000);
TextDrawAlignment(FG_InGame[25], 1);
TextDrawColor(FG_InGame[25], 102);
TextDrawSetShadow(FG_InGame[25], 0);
TextDrawBackgroundColor(FG_InGame[25], 255);
TextDrawFont(FG_InGame[25], 4);
TextDrawSetProportional(FG_InGame[25], 0);

FG_InGame[26] = TextDrawCreate(544.100341, 434.381347, "particle:shad_ped");
TextDrawTextSize(FG_InGame[26], 90.000000, -3.000000);
TextDrawAlignment(FG_InGame[26], 1);
TextDrawColor(FG_InGame[26], 102);
TextDrawSetShadow(FG_InGame[26], 0);
TextDrawBackgroundColor(FG_InGame[26], 255);
TextDrawFont(FG_InGame[26], 4);
TextDrawSetProportional(FG_InGame[26], 0);

FG_InGame[27] = TextDrawCreate(544.100341, 438.381591, "particle:shad_ped");
TextDrawTextSize(FG_InGame[27], 90.000000, -3.000000);
TextDrawAlignment(FG_InGame[27], 1);
TextDrawColor(FG_InGame[27], 102);
TextDrawSetShadow(FG_InGame[27], 0);
TextDrawBackgroundColor(FG_InGame[27], 255);
TextDrawFont(FG_InGame[27], 4);
TextDrawSetProportional(FG_InGame[27], 0);

FG_InGame[28] = TextDrawCreate(544.100341, 438.381591, "particle:shad_ped");
TextDrawTextSize(FG_InGame[28], 90.000000, -3.000000);
TextDrawAlignment(FG_InGame[28], 1);
TextDrawColor(FG_InGame[28], 102);
TextDrawSetShadow(FG_InGame[28], 0);
TextDrawBackgroundColor(FG_InGame[28], 255);
TextDrawFont(FG_InGame[28], 4);
TextDrawSetProportional(FG_InGame[28], 0);

FG_InGame[29] = TextDrawCreate(544.100341, 434.481353, "particle:shad_ped");
TextDrawTextSize(FG_InGame[29], 90.000000, -3.000000);
TextDrawAlignment(FG_InGame[29], 1);
TextDrawColor(FG_InGame[29], 68);
TextDrawSetShadow(FG_InGame[29], 0);
TextDrawBackgroundColor(FG_InGame[29], 255);
TextDrawFont(FG_InGame[29], 4);
TextDrawSetProportional(FG_InGame[29], 0);

FG_InGame[30] = TextDrawCreate(408.399810, 420.296203, "");
TextDrawTextSize(FG_InGame[30], 75.000000, 15.000000);
TextDrawAlignment(FG_InGame[30], 1);
TextDrawColor(FG_InGame[30], 118364159);
TextDrawSetShadow(FG_InGame[30], 0);
TextDrawFont(FG_InGame[30], 5);
TextDrawBackgroundColor(FG_InGame[30], 0);
TextDrawSetProportional(FG_InGame[30], 0);
TextDrawSetPreviewModel(FG_InGame[30], 1317);
TextDrawSetPreviewRot(FG_InGame[30], 0.000000, 90.000000, 0.000000, 1.000000);

FG_InGame[31] = TextDrawCreate(412.966857, 421.670379, "");
TextDrawTextSize(FG_InGame[31], -10.000000, 13.000000);
TextDrawAlignment(FG_InGame[31], 1);
TextDrawColor(FG_InGame[31], -1);
TextDrawSetShadow(FG_InGame[31], 0);
TextDrawBackgroundColor(FG_InGame[31], -256);
TextDrawFont(FG_InGame[31], 5);
TextDrawBackgroundColor(FG_InGame[31], 0);
TextDrawSetProportional(FG_InGame[31], 0);
TextDrawSetPreviewModel(FG_InGame[31], 1317);
TextDrawSetPreviewRot(FG_InGame[31], 0.000000, 90.000000, 0.000000, 1.000000);

FG_InGame[32] = TextDrawCreate(490.738159, 468.162536, "");
TextDrawTextSize(FG_InGame[32], -53.000000, -73.000000);
TextDrawAlignment(FG_InGame[32], 1);
TextDrawColor(FG_InGame[32], -1);
TextDrawSetShadow(FG_InGame[32], 0);
TextDrawBackgroundColor(FG_InGame[32], -256);
TextDrawFont(FG_InGame[32], 5);
TextDrawBackgroundColor(FG_InGame[32], 0);
TextDrawSetProportional(FG_InGame[32], 0);
TextDrawSetPreviewModel(FG_InGame[32], 19177);
TextDrawSetPreviewRot(FG_InGame[32], 0.000000, 0.000000, 0.000000, 1.000000);

FG_InGame[33] = TextDrawCreate(443.471740, 412.288482, "");
TextDrawTextSize(FG_InGame[33], 49.000000, 41.000000);
TextDrawAlignment(FG_InGame[33], 1);
TextDrawColor(FG_InGame[33], -1);
TextDrawSetShadow(FG_InGame[33], 0);
TextDrawBackgroundColor(FG_InGame[33], -256);
TextDrawFont(FG_InGame[33], 5);
TextDrawBackgroundColor(FG_InGame[33], 0);
TextDrawSetProportional(FG_InGame[33], 0);
TextDrawSetPreviewModel(FG_InGame[33], 19177);
TextDrawSetPreviewRot(FG_InGame[33], 0.000000, 0.000000, 0.000000, 1.000000);

FG_InGame[34] = TextDrawCreate(445.371398, 468.132995, "");
TextDrawTextSize(FG_InGame[34], 53.000000, -73.000000);
TextDrawAlignment(FG_InGame[34], 1);
TextDrawColor(FG_InGame[34], -1);
TextDrawSetShadow(FG_InGame[34], 0);
TextDrawBackgroundColor(FG_InGame[34], -256);
TextDrawFont(FG_InGame[34], 5);
TextDrawBackgroundColor(FG_InGame[34], 0);
TextDrawSetProportional(FG_InGame[34], 0);
TextDrawSetPreviewModel(FG_InGame[34], 19177);
TextDrawSetPreviewRot(FG_InGame[34], 0.000000, 0.000000, 0.000000, 1.000000);

FG_InGame[35] = TextDrawCreate(472.271118, 427.862884, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[35], 47.000000, 7.000000);
TextDrawAlignment(FG_InGame[35], 1);
TextDrawColor(FG_InGame[35], -1);
TextDrawSetShadow(FG_InGame[35], 0);
TextDrawBackgroundColor(FG_InGame[35], 255);
TextDrawFont(FG_InGame[35], 4);
TextDrawSetProportional(FG_InGame[35], 0);

FG_InGame[36] = TextDrawCreate(485.004486, 420.296203, "");
TextDrawTextSize(FG_InGame[36], 75.000000, 15.000000);
TextDrawAlignment(FG_InGame[36], 1);
TextDrawColor(FG_InGame[36], 118364159);
TextDrawSetShadow(FG_InGame[36], 0);
TextDrawFont(FG_InGame[36], 5);
TextDrawBackgroundColor(FG_InGame[36], 0);
TextDrawSetProportional(FG_InGame[36], 0);
TextDrawSetPreviewModel(FG_InGame[36], 1317);
TextDrawSetPreviewRot(FG_InGame[36], 0.000000, 90.000000, 0.000000, 1.000000);

FG_InGame[37] = TextDrawCreate(489.571533, 421.670379, "");
TextDrawTextSize(FG_InGame[37], -10.000000, 13.000000);
TextDrawAlignment(FG_InGame[37], 1);
TextDrawColor(FG_InGame[37], -1);
TextDrawSetShadow(FG_InGame[37], 0);
TextDrawBackgroundColor(FG_InGame[37], -256);
TextDrawFont(FG_InGame[37], 5);
TextDrawBackgroundColor(FG_InGame[37], 0);
TextDrawSetProportional(FG_InGame[37], 0);
TextDrawSetPreviewModel(FG_InGame[37], 1317);
TextDrawSetPreviewRot(FG_InGame[37], 0.000000, 90.000000, 0.000000, 1.000000);

FG_InGame[38] = TextDrawCreate(387.904479, 435.988739, "LD_SPAC:white~n~");
TextDrawTextSize(FG_InGame[38], 48.019996, 0.069999);
TextDrawAlignment(FG_InGame[38], 1);
TextDrawColor(FG_InGame[38], -1);
TextDrawSetShadow(FG_InGame[38], 0);
TextDrawBackgroundColor(FG_InGame[38], 255);
TextDrawFont(FG_InGame[38], 4);
TextDrawSetProportional(FG_InGame[38], 0);

FG_InGame[39] = TextDrawCreate(464.404602, 435.988739, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[39], 48.019996, 0.069999);
TextDrawAlignment(FG_InGame[39], 1);
TextDrawColor(FG_InGame[39], -1);
TextDrawSetShadow(FG_InGame[39], 0);
TextDrawBackgroundColor(FG_InGame[39], 255);
TextDrawFont(FG_InGame[39], 4);
TextDrawSetProportional(FG_InGame[39], 0);

FG_InGame[40] = TextDrawCreate(446.666656, 428.418518, "....");
TextDrawLetterSize(FG_InGame[40], 0.130666, 0.513184);
TextDrawAlignment(FG_InGame[40], 1);
TextDrawColor(FG_InGame[40], -1);
TextDrawSetShadow(FG_InGame[40], 0);
TextDrawBackgroundColor(FG_InGame[40], 255);
TextDrawFont(FG_InGame[40], 1);
TextDrawSetProportional(FG_InGame[40], 1);

FG_InGame[41] = TextDrawCreate(355.199584, 428.418548, "....");
TextDrawLetterSize(FG_InGame[41], 0.130666, 0.513184);
TextDrawAlignment(FG_InGame[41], 1);
TextDrawColor(FG_InGame[41], -1);
TextDrawSetShadow(FG_InGame[41], 0);
TextDrawBackgroundColor(FG_InGame[41], 255);
TextDrawFont(FG_InGame[41], 1);
TextDrawSetProportional(FG_InGame[41], 1);

FG_InGame[42] = TextDrawCreate(282.199157, 428.418579, "....");
TextDrawLetterSize(FG_InGame[42], 0.130666, 0.513184);
TextDrawAlignment(FG_InGame[42], 1);
TextDrawColor(FG_InGame[42], -1);
TextDrawSetShadow(FG_InGame[42], 0);
TextDrawBackgroundColor(FG_InGame[42], 255);
TextDrawFont(FG_InGame[42], 1);
TextDrawSetProportional(FG_InGame[42], 1);

FG_InGame[43] = TextDrawCreate(127.833328, 422.740875, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[43], 405.000000, 0.769999);
TextDrawAlignment(FG_InGame[43], 1);
TextDrawColor(FG_InGame[43], 118364159);
TextDrawSetShadow(FG_InGame[43], 0);
TextDrawBackgroundColor(FG_InGame[43], 255);
TextDrawFont(FG_InGame[43], 4);
TextDrawSetProportional(FG_InGame[43], 0);

FG_InGame[44] = TextDrawCreate(125.100021, 421.466674, "/");
TextDrawLetterSize(FG_InGame[44], 0.218666, 0.587849);
TextDrawAlignment(FG_InGame[44], 1);
TextDrawColor(FG_InGame[44], 118364159);
TextDrawSetShadow(FG_InGame[44], 0);
TextDrawBackgroundColor(FG_InGame[44], 255);
TextDrawFont(FG_InGame[44], 2);
TextDrawSetProportional(FG_InGame[44], 1);

FG_InGame[45] = TextDrawCreate(100.599960, 430.681457, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[45], 3.949975, 1.429998);
TextDrawAlignment(FG_InGame[45], 1);
TextDrawColor(FG_InGame[45], -1);
TextDrawSetShadow(FG_InGame[45], 0);
TextDrawBackgroundColor(FG_InGame[45], 255);
TextDrawFont(FG_InGame[45], 4);
TextDrawSetProportional(FG_InGame[45], 0);

FG_InGame[46] = TextDrawCreate(101.233367, 424.555633, "f");
TextDrawLetterSize(FG_InGame[46], 0.219666, 1.509629);
TextDrawAlignment(FG_InGame[46], 1);
TextDrawColor(FG_InGame[46], -1);
TextDrawSetShadow(FG_InGame[46], 0);
TextDrawBackgroundColor(FG_InGame[46], 255);
TextDrawFont(FG_InGame[46], 1);
TextDrawSetProportional(FG_InGame[46], 1);

FG_InGame[47] = TextDrawCreate(102.866600, 428.418670, "ld_beat:chit");
TextDrawTextSize(FG_InGame[47], 7.000000, 8.000000);
TextDrawAlignment(FG_InGame[47], 1);
TextDrawColor(FG_InGame[47], -1);
TextDrawSetShadow(FG_InGame[47], 0);
TextDrawBackgroundColor(FG_InGame[47], 255);
TextDrawFont(FG_InGame[47], 4);
TextDrawSetProportional(FG_InGame[47], 0);

FG_InGame[48] = TextDrawCreate(104.366577, 430.218780, "ld_beat:chit");
TextDrawTextSize(FG_InGame[48], 5.000000, 5.000000);
TextDrawAlignment(FG_InGame[48], 1);
TextDrawColor(FG_InGame[48], 118364415);
TextDrawSetShadow(FG_InGame[48], 0);
TextDrawBackgroundColor(FG_InGame[48], 255);
TextDrawFont(FG_InGame[48], 4);
TextDrawSetProportional(FG_InGame[48], 0);

FG_InGame[49] = TextDrawCreate(103.433334, 432.655426, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[49], 2.000000, 1.959998);
TextDrawAlignment(FG_InGame[49], 1);
TextDrawColor(FG_InGame[49], 118364415);
TextDrawSetShadow(FG_InGame[49], 0);
TextDrawBackgroundColor(FG_InGame[49], 255);
TextDrawFont(FG_InGame[49], 4);
TextDrawSetProportional(FG_InGame[49], 0);

FG_InGame[50] = TextDrawCreate(103.433334, 432.355407, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[50], 2.000000, 1.959998);
TextDrawAlignment(FG_InGame[50], 1);
TextDrawColor(FG_InGame[50], 118364415);
TextDrawSetShadow(FG_InGame[50], 0);
TextDrawBackgroundColor(FG_InGame[50], 255);
TextDrawFont(FG_InGame[50], 4);
TextDrawSetProportional(FG_InGame[50], 0);

FG_InGame[51] = TextDrawCreate(102.966598, 428.618682, "ld_beat:chit");
TextDrawTextSize(FG_InGame[51], 7.000000, 8.000000);
TextDrawAlignment(FG_InGame[51], 1);
TextDrawColor(FG_InGame[51], -1);
TextDrawSetShadow(FG_InGame[51], 0);
TextDrawBackgroundColor(FG_InGame[51], 255);
TextDrawFont(FG_InGame[51], 4);
TextDrawSetProportional(FG_InGame[51], 0);

FG_InGame[52] = TextDrawCreate(103.266639, 431.392761, "ld_beat:chit");
TextDrawTextSize(FG_InGame[52], 3.000000, 3.000000);
TextDrawAlignment(FG_InGame[52], 1);
TextDrawColor(FG_InGame[52], 118364415);
TextDrawSetShadow(FG_InGame[52], 0);
TextDrawBackgroundColor(FG_InGame[52], 255);
TextDrawFont(FG_InGame[52], 4);
TextDrawSetProportional(FG_InGame[52], 0);

FG_InGame[53] = TextDrawCreate(107.666702, 431.996246, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[53], 1.000000, 5.000000);
TextDrawAlignment(FG_InGame[53], 1);
TextDrawColor(FG_InGame[53], -1);
TextDrawSetShadow(FG_InGame[53], 0);
TextDrawBackgroundColor(FG_InGame[53], 255);
TextDrawFont(FG_InGame[53], 4);
TextDrawSetProportional(FG_InGame[53], 0);

FG_InGame[54] = TextDrawCreate(103.966629, 429.692657, "ld_beat:chit");
TextDrawTextSize(FG_InGame[54], 4.929975, 5.649991);
TextDrawAlignment(FG_InGame[54], 1);
TextDrawColor(FG_InGame[54], 118364415);
TextDrawSetShadow(FG_InGame[54], 0);
TextDrawBackgroundColor(FG_InGame[54], 255);
TextDrawFont(FG_InGame[54], 4);
TextDrawSetProportional(FG_InGame[54], 0);

FG_InGame[55] = TextDrawCreate(106.266632, 435.759216, "ld_beat:chit");
TextDrawTextSize(FG_InGame[55], 2.579998, 2.640000);
TextDrawAlignment(FG_InGame[55], 1);
TextDrawColor(FG_InGame[55], -1);
TextDrawSetShadow(FG_InGame[55], 0);
TextDrawBackgroundColor(FG_InGame[55], 255);
TextDrawFont(FG_InGame[55], 4);
TextDrawSetProportional(FG_InGame[55], 0);

FG_InGame[56] = TextDrawCreate(105.366645, 435.759216, "ld_beat:chit");
TextDrawTextSize(FG_InGame[56], 2.579998, 2.640000);
TextDrawAlignment(FG_InGame[56], 1);
TextDrawColor(FG_InGame[56], -1);
TextDrawSetShadow(FG_InGame[56], 0);
TextDrawBackgroundColor(FG_InGame[56], 255);
TextDrawFont(FG_InGame[56], 4);
TextDrawSetProportional(FG_InGame[56], 0);

FG_InGame[57] = TextDrawCreate(104.866653, 435.759216, "ld_beat:chit");
TextDrawTextSize(FG_InGame[57], 2.579998, 2.640000);
TextDrawAlignment(FG_InGame[57], 1);
TextDrawColor(FG_InGame[57], -1);
TextDrawSetShadow(FG_InGame[57], 0);
TextDrawBackgroundColor(FG_InGame[57], 255);
TextDrawFont(FG_InGame[57], 4);
TextDrawSetProportional(FG_InGame[57], 0);

FG_InGame[58] = TextDrawCreate(107.833358, 429.503845, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[58], 1.000000, 2.000000);
TextDrawAlignment(FG_InGame[58], 1);
TextDrawColor(FG_InGame[58], -1);
TextDrawSetShadow(FG_InGame[58], 0);
TextDrawBackgroundColor(FG_InGame[58], 255);
TextDrawFont(FG_InGame[58], 4);
TextDrawSetProportional(FG_InGame[58], 0);

FG_InGame[59] = TextDrawCreate(106.933403, 425.914855, "]");
TextDrawLetterSize(FG_InGame[59], 0.089666, 0.336591);
TextDrawTextSize(FG_InGame[59], -12.000000, 0.000000);
TextDrawAlignment(FG_InGame[59], 1);
TextDrawColor(FG_InGame[59], -1);
TextDrawSetShadow(FG_InGame[59], 0);
TextDrawBackgroundColor(FG_InGame[59], 255);
TextDrawFont(FG_InGame[59], 2);
TextDrawSetProportional(FG_InGame[59], 1);

FG_InGame[60] = TextDrawCreate(96.333343, 410.211059, "");
TextDrawTextSize(FG_InGame[60], 21.000000, 35.000000);
TextDrawAlignment(FG_InGame[60], 1);
TextDrawColor(FG_InGame[60], -1);
TextDrawSetShadow(FG_InGame[60], 0);
TextDrawFont(FG_InGame[60], 5);
TextDrawBackgroundColor(FG_InGame[60], 0);
TextDrawSetProportional(FG_InGame[60], 0);
TextDrawSetPreviewModel(FG_InGame[60], 2345);
TextDrawSetPreviewRot(FG_InGame[60], 0.000000, 0.000000, 0.000000, 1.000000);

FG_InGame[61] = TextDrawCreate(553.400085, 427.918548, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[61], 34.000000, 7.000000);
TextDrawAlignment(FG_InGame[61], 1);
TextDrawColor(FG_InGame[61], 118364415);
TextDrawSetShadow(FG_InGame[61], 0);
TextDrawBackgroundColor(FG_InGame[61], 255);
TextDrawFont(FG_InGame[61], 4);
TextDrawSetProportional(FG_InGame[61], 0);

FG_InGame[62] = TextDrawCreate(528.734191, 397.144134, "");
TextDrawTextSize(FG_InGame[62], 49.000000, 68.540115);
TextDrawAlignment(FG_InGame[62], 1);
TextDrawColor(FG_InGame[62], 118364415);
TextDrawSetShadow(FG_InGame[62], 0);
TextDrawFont(FG_InGame[62], 5);
TextDrawBackgroundColor(FG_InGame[62], 0);
TextDrawSetProportional(FG_InGame[62], 0);
TextDrawSetPreviewModel(FG_InGame[62], 19177);
TextDrawSetPreviewRot(FG_InGame[62], 0.000000, 0.000000, 0.000000, 1.000000);

FG_InGame[63] = TextDrawCreate(589.799682, 428.003753, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[63], 34.000000, 7.000000);
TextDrawAlignment(FG_InGame[63], 1);
TextDrawColor(FG_InGame[63], 118364415);
TextDrawSetShadow(FG_InGame[63], 0);
TextDrawBackgroundColor(FG_InGame[63], 255);
TextDrawFont(FG_InGame[63], 4);
TextDrawSetProportional(FG_InGame[63], 0);

FG_InGame[64] = TextDrawCreate(648.966796, 395.814392, "");
TextDrawTextSize(FG_InGame[64], -50.000000, 71.000000);
TextDrawAlignment(FG_InGame[64], 1);
TextDrawColor(FG_InGame[64], 118364415);
TextDrawSetShadow(FG_InGame[64], 0);
TextDrawFont(FG_InGame[64], 5);
TextDrawBackgroundColor(FG_InGame[64], 0);
TextDrawSetProportional(FG_InGame[64], 0);
TextDrawSetPreviewModel(FG_InGame[64], 19177);
TextDrawSetPreviewRot(FG_InGame[64], 0.000000, 0.000000, 0.000000, 1.000000);

FG_InGame[65] = TextDrawCreate(577.699645, 428.733215, "HH:_~y~2x");
TextDrawLetterSize(FG_InGame[65], 0.117665, 0.506814);
TextDrawAlignment(FG_InGame[65], 3);
TextDrawColor(FG_InGame[65], -1);
TextDrawSetShadow(FG_InGame[65], 0);
TextDrawBackgroundColor(FG_InGame[65], 255);
TextDrawFont(FG_InGame[65], 2);
TextDrawSetProportional(FG_InGame[65], 1);

FG_InGame[66] = TextDrawCreate(620.397766, 429.207214, "HJ:_~r~OFF");
TextDrawLetterSize(FG_InGame[66], 0.112663, 0.456813);
TextDrawAlignment(FG_InGame[66], 3);
TextDrawColor(FG_InGame[66], -1);
TextDrawSetShadow(FG_InGame[66], 0);
TextDrawBackgroundColor(FG_InGame[66], 255);
TextDrawFont(FG_InGame[66], 2);
TextDrawSetProportional(FG_InGame[66], 1);

FG_InGame[67] = TextDrawCreate(549.536987, 14.355714, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[67], 55.640060, 13.739994);
TextDrawAlignment(FG_InGame[67], 1);
TextDrawColor(FG_InGame[67], 118364415);
TextDrawSetShadow(FG_InGame[67], 0);
TextDrawBackgroundColor(FG_InGame[67], 255);
TextDrawFont(FG_InGame[67], 4);
TextDrawSetProportional(FG_InGame[67], 0);

FG_InGame[68] = TextDrawCreate(532.141845, -3.311187, "");
TextDrawTextSize(FG_InGame[68], 89.839965, 23.000000);
TextDrawAlignment(FG_InGame[68], 1);
TextDrawColor(FG_InGame[68], 118364415);
TextDrawSetShadow(FG_InGame[68], 0);
TextDrawFont(FG_InGame[68], 5);
TextDrawBackgroundColor(FG_InGame[68], 0);
TextDrawSetProportional(FG_InGame[68], 0);
TextDrawSetPreviewModel(FG_InGame[68], 1317);
TextDrawSetPreviewRot(FG_InGame[68], 0.000000, 0.000000, 90.000000, 1.000000);

FG_InGame[69] = TextDrawCreate(532.108276, 44.536998, "");
TextDrawTextSize(FG_InGame[69], 89.909980, -24.000000);
TextDrawAlignment(FG_InGame[69], 1);
TextDrawColor(FG_InGame[69], 118364415);
TextDrawSetShadow(FG_InGame[69], 0);
TextDrawFont(FG_InGame[69], 5);
TextDrawBackgroundColor(FG_InGame[69], 0);
TextDrawSetProportional(FG_InGame[69], 0);
TextDrawSetPreviewModel(FG_InGame[69], 1317);
TextDrawSetPreviewRot(FG_InGame[69], 0.000000, 0.000000, 90.000000, 1.000000);

FG_InGame[70] = TextDrawCreate(565.034790, 12.303714, "/");
TextDrawLetterSize(FG_InGame[70], 0.418666, 0.583702);
TextDrawTextSize(FG_InGame[70], 0.418666, 0.583702);
TextDrawAlignment(FG_InGame[70], 1);
TextDrawColor(FG_InGame[70], -1);
TextDrawSetShadow(FG_InGame[70], 0);
TextDrawBackgroundColor(FG_InGame[70], 255);
TextDrawFont(FG_InGame[70], 2);
TextDrawSetProportional(FG_InGame[70], 1);

FG_InGame[71] = TextDrawCreate(564.334960, 15.503726, "/");
TextDrawLetterSize(FG_InGame[71], 0.418666, 0.583702);
TextDrawTextSize(FG_InGame[71], 0.418666, 0.583702);
TextDrawAlignment(FG_InGame[71], 1);
TextDrawColor(FG_InGame[71], -1);
TextDrawSetShadow(FG_InGame[71], 0);
TextDrawBackgroundColor(FG_InGame[71], 255);
TextDrawFont(FG_InGame[71], 2);
TextDrawSetProportional(FG_InGame[71], 1);

FG_InGame[72] = TextDrawCreate(563.101623, 12.896329, "/");
TextDrawLetterSize(FG_InGame[72], 0.196666, 1.508738);
TextDrawTextSize(FG_InGame[72], 0.418666, 0.583702);
TextDrawAlignment(FG_InGame[72], 1);
TextDrawColor(FG_InGame[72], -1);
TextDrawSetShadow(FG_InGame[72], 0);
TextDrawBackgroundColor(FG_InGame[72], 255);
TextDrawFont(FG_InGame[72], 2);
TextDrawSetProportional(FG_InGame[72], 1);

FG_InGame[73] = TextDrawCreate(573.168945, 18.529584, "G_A_M_I_N_G");
TextDrawLetterSize(FG_InGame[73], 0.081996, 0.326516);
TextDrawAlignment(FG_InGame[73], 1);
TextDrawColor(FG_InGame[73], -1);
TextDrawSetShadow(FG_InGame[73], 0);
TextDrawBackgroundColor(FG_InGame[73], 255);
TextDrawFont(FG_InGame[73], 1);
TextDrawSetProportional(FG_InGame[73], 1);

FG_InGame[74] = TextDrawCreate(548.866577, 36.640686, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[74], 57.000000, 10.000000);
TextDrawAlignment(FG_InGame[74], 1);
TextDrawColor(FG_InGame[74], 118364415);
TextDrawSetShadow(FG_InGame[74], 0);
TextDrawBackgroundColor(FG_InGame[74], 255);
TextDrawFont(FG_InGame[74], 4);
TextDrawSetProportional(FG_InGame[74], 0);

FG_InGame[75] = TextDrawCreate(546.999633, 35.977794, "ld_Beat:Chit");
TextDrawTextSize(FG_InGame[75], 4.000000, 4.000000);
TextDrawAlignment(FG_InGame[75], 1);
TextDrawColor(FG_InGame[75], 118364415);
TextDrawSetShadow(FG_InGame[75], 0);
TextDrawBackgroundColor(FG_InGame[75], 255);
TextDrawFont(FG_InGame[75], 4);
TextDrawSetProportional(FG_InGame[75], 0);

FG_InGame[76] = TextDrawCreate(546.999633, 43.377681, "ld_Beat:Chit");
TextDrawTextSize(FG_InGame[76], 4.000000, 4.000000);
TextDrawAlignment(FG_InGame[76], 1);
TextDrawColor(FG_InGame[76], 118364415);
TextDrawSetShadow(FG_InGame[76], 0);
TextDrawBackgroundColor(FG_InGame[76], 255);
TextDrawFont(FG_InGame[76], 4);
TextDrawSetProportional(FG_InGame[76], 0);

FG_InGame[77] = TextDrawCreate(603.533203, 36.070297, "ld_Beat:Chit");
TextDrawTextSize(FG_InGame[77], 4.000000, 4.000000);
TextDrawAlignment(FG_InGame[77], 1);
TextDrawColor(FG_InGame[77], 118364415);
TextDrawSetShadow(FG_InGame[77], 0);
TextDrawBackgroundColor(FG_InGame[77], 255);
TextDrawFont(FG_InGame[77], 4);
TextDrawSetProportional(FG_InGame[77], 0);

FG_InGame[78] = TextDrawCreate(603.533203, 43.270187, "ld_Beat:Chit");
TextDrawTextSize(FG_InGame[78], 4.000000, 4.000000);
TextDrawAlignment(FG_InGame[78], 1);
TextDrawColor(FG_InGame[78], 118364415);
TextDrawSetShadow(FG_InGame[78], 0);
TextDrawBackgroundColor(FG_InGame[78], 255);
TextDrawFont(FG_InGame[78], 4);
TextDrawSetProportional(FG_InGame[78], 0);

FG_InGame[79] = TextDrawCreate(547.533325, 38.281501, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[79], 4.000000, 7.000000);
TextDrawAlignment(FG_InGame[79], 1);
TextDrawColor(FG_InGame[79], 118364415);
TextDrawSetShadow(FG_InGame[79], 0);
TextDrawBackgroundColor(FG_InGame[79], 255);
TextDrawFont(FG_InGame[79], 4);
TextDrawSetProportional(FG_InGame[79], 0);

FG_InGame[80] = TextDrawCreate(603.133544, 38.051876, "LD_SPAC:white");
TextDrawTextSize(FG_InGame[80], 4.000000, 7.000000);
TextDrawAlignment(FG_InGame[80], 1);
TextDrawColor(FG_InGame[80], 118364415);
TextDrawSetShadow(FG_InGame[80], 0);
TextDrawBackgroundColor(FG_InGame[80], 255);
TextDrawFont(FG_InGame[80], 4);
TextDrawSetProportional(FG_InGame[80], 0);

FG_InGame[81] = TextDrawCreate(576.265930, 38.992603, "ONLINE:_~y~100");
TextDrawLetterSize(FG_InGame[81], 0.102664, 0.492222);
TextDrawAlignment(FG_InGame[81], 3);
TextDrawColor(FG_InGame[81], -1);
TextDrawSetShadow(FG_InGame[81], 0);
TextDrawBackgroundColor(FG_InGame[81], 255);
TextDrawFont(FG_InGame[81], 2);
TextDrawSetProportional(FG_InGame[81], 1);

FG_InGame[82] = TextDrawCreate(604.598876, 38.977787, "REKORD:_~y~165");
TextDrawLetterSize(FG_InGame[82], 0.102664, 0.492222);
TextDrawAlignment(FG_InGame[82], 3);
TextDrawColor(FG_InGame[82], -1);
TextDrawSetShadow(FG_InGame[82], 0);
TextDrawBackgroundColor(FG_InGame[82], 255);
TextDrawFont(FG_InGame[82], 2);
TextDrawSetProportional(FG_InGame[82], 1);

FG_InGame[83] = TextDrawCreate(394.999847, 428.588897, "~g~$");
TextDrawLetterSize(FG_InGame[83], 0.112998, 0.542222);
TextDrawAlignment(FG_InGame[83], 1);
TextDrawColor(FG_InGame[83], 255);
TextDrawSetShadow(FG_InGame[83], 1);
TextDrawBackgroundColor(FG_InGame[83], -205);
TextDrawFont(FG_InGame[83], 2);
TextDrawSetProportional(FG_InGame[83], 1);

FG_InGame[84] = TextDrawCreate(471.604522, 428.488891, "~y~G");
TextDrawLetterSize(FG_InGame[84], 0.112998, 0.542222);
TextDrawAlignment(FG_InGame[84], 1);
TextDrawColor(FG_InGame[84], 255);
TextDrawSetShadow(FG_InGame[84], 1);
TextDrawBackgroundColor(FG_InGame[84], -205);
TextDrawFont(FG_InGame[84], 2);
TextDrawSetProportional(FG_InGame[84], 1);
return (true);}

//============================================================================//

global_tds(playerid,response)
{
switch(response)
{
	  case false:
	  {
			  for(new i = 0; i < 85; ++i)
			  {
					 TextDrawHideForPlayer(playerid,FG_InGame[i]);
			  ]
	  ]
	  case true:
	  {
			  for(new i = 0; i < 85; ++i)
			  {
					 TextDrawShowForPlayer(playerid,FG_InGame[i]);
			  ]
	  }
}
return (true);}

fg_info_tds(playerid,response) 
{
switch(response)
{
	case false:
	{
		if(PlayerInfo[playerid][xRegistrovan] == 0) return 0;
		for(new i = 0; i < 3; ++i)
		{
			PlayerTextDrawShow(playerid,FG_InGameP[playerid][i]);
		}
	}
	case true:
	{
		for(new i = 0; i < 3; ++i)
		{
			PlayerTextDrawHide(playerid,FG_InGameP[playerid][i]);
		}
	}
}
return (true);}

update_fg_info_tds(playerid,option = false)
{
new string[20];

switch(option)
{
	case false: {

		if(PlayerInfo[playerid][xRegistrovan] == 0) return 0;
		if(PlayerInfo[playerid][xImaBRacun] == false)
		{  
			format(string,sizeof(string),"~r~Nema_racun",PlayerInfo[playerid][xBRacun]); 
			TextDrawHideForPlayer(playerid, FG_InGame[83]); //simbol "$" hide-uje se zbog izgleda
		}
		else
		{
			format(string,sizeof(string),"%d",PlayerInfo[playerid][xBRacun]);
			TextDrawShowForPlayer(playerid, FG_InGame[83]); //simbol "$" se prikazuje ako ima racun
		}

		PlayerTextDrawSetString(playerid, FG_InGameP[playerid][0], string);

		//------------------------------------------------------------------------//

		format(string,sizeof(string),"%d",PlayerInfo[playerid][xZlato]);
		PlayerTextDrawSetString(playerid, FG_InGameP[playerid][1], string);

		//------------------------------------------------------------------------//

		//getPlayerRank(playerid);

		//------------------------------------------------------------------------//

	}
}
return (true);}

stock CreatePlayerTextDraws(playerid) {

Novcici[playerid] = CreatePlayerTextDraw(playerid, 491.500000, 98.719993, "+$652000");
PlayerTextDrawLetterSize(playerid, Novcici[playerid], 0.400000, 1.600000);
PlayerTextDrawAlignment(playerid, Novcici[playerid], 1);
PlayerTextDrawColor(playerid, Novcici[playerid], 16711830);
PlayerTextDrawSetShadow(playerid, Novcici[playerid], 0);
PlayerTextDrawSetOutline(playerid, Novcici[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, Novcici[playerid], 255);
PlayerTextDrawFont(playerid, Novcici[playerid], 3);
PlayerTextDrawSetProportional(playerid, Novcici[playerid], 1);
PlayerTextDrawSetShadow(playerid, Novcici[playerid], 0);

Brzinomer[playerid][0] = CreatePlayerTextDraw(playerid, 530.066711, 381.059234, "LD_SPAC:white");
PlayerTextDrawTextSize(playerid, Brzinomer[playerid][0], 94.000000, 34.000000);
PlayerTextDrawAlignment(playerid, Brzinomer[playerid][0], 1);
PlayerTextDrawColor(playerid, Brzinomer[playerid][0], 118364159);
PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][0], 0);
PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][0], 255);
PlayerTextDrawFont(playerid, Brzinomer[playerid][0], 4);
PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][0], 0);

Brzinomer[playerid][1] = CreatePlayerTextDraw(playerid, 510.171173, 346.877441, "");
PlayerTextDrawTextSize(playerid, Brzinomer[playerid][1], 41.000000, 68.139816);
PlayerTextDrawAlignment(playerid, Brzinomer[playerid][1], 1);
PlayerTextDrawColor(playerid, Brzinomer[playerid][1], 118364415);
PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][1], 0);
PlayerTextDrawFont(playerid, Brzinomer[playerid][1], 5);
PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][1], 0);
PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][1], 0);
PlayerTextDrawSetPreviewModel(playerid, Brzinomer[playerid][1], 1317);
PlayerTextDrawSetPreviewRot(playerid, Brzinomer[playerid][1], 0.000000, 90.000000, 0.000000, 1.000000);

Brzinomer[playerid][2] = CreatePlayerTextDraw(playerid, 568.999450, 369.674163, "");
PlayerTextDrawTextSize(playerid, Brzinomer[playerid][2], -52.000000, 55.000000);
PlayerTextDrawAlignment(playerid, Brzinomer[playerid][2], 1);
PlayerTextDrawColor(playerid, Brzinomer[playerid][2], -1);
PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][2], 0);
PlayerTextDrawFont(playerid, Brzinomer[playerid][2], 5);
PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][2], 0);
PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][2], 0);
PlayerTextDrawSetPreviewModel(playerid, Brzinomer[playerid][2], 411);
PlayerTextDrawSetPreviewRot(playerid, Brzinomer[playerid][2], 0.000000, 0.000000, 90.000000, 1.000000);
PlayerTextDrawSetPreviewVehCol(playerid, Brzinomer[playerid][2], 1, 1);

Brzinomer[playerid][3] = CreatePlayerTextDraw(playerid, 496.866729, 381.389129, "PARTICLE:LAMP_SHAD_64");
PlayerTextDrawTextSize(playerid, Brzinomer[playerid][3], 136.000000, 16.000000);
PlayerTextDrawAlignment(playerid, Brzinomer[playerid][3], 1);
PlayerTextDrawColor(playerid, Brzinomer[playerid][3], -250);
PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][3], 0);
PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][3], 255);
PlayerTextDrawFont(playerid, Brzinomer[playerid][3], 4);
PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][3], 0);

Brzinomer[playerid][7] = CreatePlayerTextDraw(playerid, 574.333312, 392.429626, "200");
PlayerTextDrawLetterSize(playerid, Brzinomer[playerid][7], 0.225666, 0.965331);
PlayerTextDrawAlignment(playerid, Brzinomer[playerid][7], 1);
PlayerTextDrawColor(playerid, Brzinomer[playerid][7], -1);
PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][7], 0);
PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][7], 255);
PlayerTextDrawFont(playerid, Brzinomer[playerid][7], 3);
PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][7], 1);

Brzinomer[playerid][8] = CreatePlayerTextDraw(playerid, 591.666687, 395.333282, "IN_INFERNUS");
PlayerTextDrawLetterSize(playerid, Brzinomer[playerid][8], 0.121333, 0.405330);
PlayerTextDrawAlignment(playerid, Brzinomer[playerid][8], 1);
PlayerTextDrawColor(playerid, Brzinomer[playerid][8], -1);
PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][8], 0);
PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][8], 255);
PlayerTextDrawFont(playerid, Brzinomer[playerid][8], 1);
PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][8], 1);

Brzinomer[playerid][9] = CreatePlayerTextDraw(playerid, 511.666778, 414.674102, "LD_SPAC:white");
PlayerTextDrawTextSize(playerid, Brzinomer[playerid][9], 112.000000, -0.519999);
PlayerTextDrawAlignment(playerid, Brzinomer[playerid][9], 1);
PlayerTextDrawColor(playerid, Brzinomer[playerid][9], -1);
PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][9], 0);
PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][9], 255);
PlayerTextDrawFont(playerid, Brzinomer[playerid][9], 4);
PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][9], 0);

Brzinomer[playerid][10] = CreatePlayerTextDraw(playerid, 591.666748, 399.648315, "(BENZIN)");
PlayerTextDrawLetterSize(playerid, Brzinomer[playerid][10], 0.121333, 0.405330);
PlayerTextDrawAlignment(playerid, Brzinomer[playerid][10], 1);
PlayerTextDrawColor(playerid, Brzinomer[playerid][10], -1);
PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][10], 0);
PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][10], 255);
PlayerTextDrawFont(playerid, Brzinomer[playerid][10], 1);
PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][10], 1);

_load_player_tds(playerid);

RadarCol[playerid] = CreatePlayerTextDraw(playerid, -5.000, -2.000, "~n~");
PlayerTextDrawFont(playerid, RadarCol[playerid], 3);
PlayerTextDrawUseBox(playerid, RadarCol[playerid], 1);
PlayerTextDrawLetterSize(playerid, RadarCol[playerid], 0.500000, 50.300003);
PlayerTextDrawBoxColor(playerid, RadarCol[playerid], 0xFF0000FF);
PlayerTextDrawTextSize(playerid, RadarCol[playerid], 655.000, 625.000);
PlayerTextDrawColor(playerid, RadarCol[playerid], -1);

Fading[playerid] = CreatePlayerTextDraw(playerid, -5.000, -2.000, "~n~");
PlayerTextDrawFont(playerid, Fading[playerid], 3);
PlayerTextDrawUseBox(playerid, Fading[playerid], 1);
PlayerTextDrawLetterSize(playerid, Fading[playerid], 0.500000, 50.300003);
PlayerTextDrawBoxColor(playerid, Fading[playerid], -1);
PlayerTextDrawTextSize(playerid, Fading[playerid], 655.000, 625.000);
PlayerTextDrawColor(playerid, Fading[playerid], -1);
//
SpecTextDraw[playerid] = CreatePlayerTextDraw(playerid,270.000000, 330.000000, "~y~ID: ~w~241 ~n~~y~Ime: ~w~Harry_Winston ~n~~y~Novac: ~w~123536$ ~n~~y~Health: ~w~100");
PlayerTextDrawBackgroundColor(playerid,SpecTextDraw[playerid], 255);
PlayerTextDrawFont(playerid,SpecTextDraw[playerid], 2);
PlayerTextDrawLetterSize(playerid,SpecTextDraw[playerid], 0.300000, 1.000000);
PlayerTextDrawColor(playerid,SpecTextDraw[playerid], -1);
PlayerTextDrawSetOutline(playerid,SpecTextDraw[playerid], 0);
PlayerTextDrawSetProportional(playerid,SpecTextDraw[playerid], 1);
PlayerTextDrawSetShadow(playerid,SpecTextDraw[playerid], 1);
PlayerTextDrawSetSelectable(playerid,SpecTextDraw[playerid], 0);
//

WantedIgraca[playerid] = CreatePlayerTextDraw(playerid, 348.470855, 409.750274, "]");
PlayerTextDrawLetterSize(playerid, WantedIgraca[playerid], 0.236485, 0.876666);
PlayerTextDrawAlignment(playerid, WantedIgraca[playerid], 1);
PlayerTextDrawColor(playerid, WantedIgraca[playerid], -2147483393);
PlayerTextDrawSetShadow(playerid, WantedIgraca[playerid], 0);
PlayerTextDrawSetOutline(playerid, WantedIgraca[playerid], 0);
PlayerTextDrawBackgroundColor(playerid, WantedIgraca[playerid], 255);
PlayerTextDrawFont(playerid, WantedIgraca[playerid], 2);
PlayerTextDrawSetProportional(playerid, WantedIgraca[playerid], 1);
PlayerTextDrawSetShadow(playerid, WantedIgraca[playerid], 0);

WantedIgraca[playerid] = CreatePlayerTextDraw(playerid, 550.966918, 100.166625, "]_]_]_]_]_]_]_]_]_]");
PlayerTextDrawLetterSize(playerid, WantedIgraca[playerid], 0.237889, 1.203331);
PlayerTextDrawAlignment(playerid, WantedIgraca[playerid], 2);
PlayerTextDrawColor(playerid, WantedIgraca[playerid], -1507073);
PlayerTextDrawSetShadow(playerid, WantedIgraca[playerid], 1);
PlayerTextDrawSetOutline(playerid, WantedIgraca[playerid], 0);
PlayerTextDrawBackgroundColor(playerid, WantedIgraca[playerid], 1375731967);
PlayerTextDrawFont(playerid, WantedIgraca[playerid], 0);
PlayerTextDrawSetProportional(playerid, WantedIgraca[playerid], 1);
PlayerTextDrawSetShadow(playerid, WantedIgraca[playerid], 1);

//
PlayerGpsRadarText[playerid] = CreatePlayerTextDraw(playerid,320.000000, 380.000000, "Udaljenost: 0.0 metara~n~nigde");
PlayerTextDrawAlignment(playerid,PlayerGpsRadarText[playerid], 2);
PlayerTextDrawBackgroundColor(playerid,PlayerGpsRadarText[playerid], 255);
PlayerTextDrawFont(playerid,PlayerGpsRadarText[playerid], 2);
PlayerTextDrawLetterSize(playerid,PlayerGpsRadarText[playerid], 0.370000, 0.799999);
PlayerTextDrawColor(playerid,PlayerGpsRadarText[playerid], -1);
PlayerTextDrawSetOutline(playerid,PlayerGpsRadarText[playerid], 0);
PlayerTextDrawSetProportional(playerid,PlayerGpsRadarText[playerid], 1);
PlayerTextDrawSetShadow(playerid,PlayerGpsRadarText[playerid], 1);
PlayerTextDrawSetSelectable(playerid,PlayerGpsRadarText[playerid], 0);
PlayerTextDrawHide(playerid, PlayerGpsRadarText[playerid]);

//
TaxistaTD[playerid][0] = CreatePlayerTextDraw(playerid,419.000000, 372.000000, "         ");
PlayerTextDrawBackgroundColor(playerid,TaxistaTD[playerid][0], 255);
PlayerTextDrawFont(playerid,TaxistaTD[playerid][0], 1);
PlayerTextDrawLetterSize(playerid,TaxistaTD[playerid][0], 0.500000, 1.000000);
PlayerTextDrawColor(playerid,TaxistaTD[playerid][0], -1);
PlayerTextDrawSetOutline(playerid,TaxistaTD[playerid][0], 0);
PlayerTextDrawSetProportional(playerid,TaxistaTD[playerid][0], 1);
PlayerTextDrawSetShadow(playerid,TaxistaTD[playerid][0], 1);
PlayerTextDrawUseBox(playerid,TaxistaTD[playerid][0], 1);
PlayerTextDrawBoxColor(playerid,TaxistaTD[playerid][0], 255);
PlayerTextDrawTextSize(playerid,TaxistaTD[playerid][0], 201.000000, 0.000000);
PlayerTextDrawSetSelectable(playerid,TaxistaTD[playerid][0], 0);

TaxistaTD[playerid][1] = CreatePlayerTextDraw(playerid,250.000000, 371.000000, "TAXIMETAR");
PlayerTextDrawBackgroundColor(playerid,TaxistaTD[playerid][1], -65281);
PlayerTextDrawFont(playerid,TaxistaTD[playerid][1], 2);
PlayerTextDrawLetterSize(playerid,TaxistaTD[playerid][1], 0.479999, 1.100000);
PlayerTextDrawColor(playerid,TaxistaTD[playerid][1], -1);
PlayerTextDrawSetOutline(playerid,TaxistaTD[playerid][1], 0);
PlayerTextDrawSetProportional(playerid,TaxistaTD[playerid][1], 1);
PlayerTextDrawSetShadow(playerid,TaxistaTD[playerid][1], 0);
PlayerTextDrawSetSelectable(playerid,TaxistaTD[playerid][1], 0);

TaxistaTD[playerid][2] = CreatePlayerTextDraw(playerid,190.000000, 379.000000, "-");
PlayerTextDrawBackgroundColor(playerid,TaxistaTD[playerid][2], 255);
PlayerTextDrawFont(playerid,TaxistaTD[playerid][2], 1);
PlayerTextDrawLetterSize(playerid,TaxistaTD[playerid][2], 16.720027, 1.000000);
PlayerTextDrawColor(playerid,TaxistaTD[playerid][2], FUSIONGAMING);
PlayerTextDrawSetOutline(playerid,TaxistaTD[playerid][2], 0);
PlayerTextDrawSetProportional(playerid,TaxistaTD[playerid][2], 1);
PlayerTextDrawSetShadow(playerid,TaxistaTD[playerid][2], 1);
PlayerTextDrawSetSelectable(playerid,TaxistaTD[playerid][2], 0);

TaxistaTD[playerid][3] = CreatePlayerTextDraw(playerid,415.000000, 395.000000, "  ");
PlayerTextDrawBackgroundColor(playerid,TaxistaTD[playerid][3], 255);
PlayerTextDrawFont(playerid,TaxistaTD[playerid][3], 1);
PlayerTextDrawLetterSize(playerid,TaxistaTD[playerid][3], 0.500000, 1.000000);
PlayerTextDrawColor(playerid,TaxistaTD[playerid][3], -1);
PlayerTextDrawSetOutline(playerid,TaxistaTD[playerid][3], 0);
PlayerTextDrawSetProportional(playerid,TaxistaTD[playerid][3], 1);
PlayerTextDrawSetShadow(playerid,TaxistaTD[playerid][3], 1);
PlayerTextDrawUseBox(playerid,TaxistaTD[playerid][3], 1);
PlayerTextDrawBoxColor(playerid,TaxistaTD[playerid][3], -156);
PlayerTextDrawTextSize(playerid,TaxistaTD[playerid][3], 353.000000, -20.000000);
PlayerTextDrawSetSelectable(playerid,TaxistaTD[playerid][3], 0);

TaxistaTD[playerid][4] = CreatePlayerTextDraw(playerid,206.000000, 415.000000, "trenutna lokacija:");
PlayerTextDrawBackgroundColor(playerid,TaxistaTD[playerid][4], 255);
PlayerTextDrawFont(playerid,TaxistaTD[playerid][4], 3);
PlayerTextDrawLetterSize(playerid,TaxistaTD[playerid][4], 0.470000, 0.799999);
PlayerTextDrawColor(playerid,TaxistaTD[playerid][4], -1);
PlayerTextDrawSetOutline(playerid,TaxistaTD[playerid][4], 0);
PlayerTextDrawSetProportional(playerid,TaxistaTD[playerid][4], 1);
PlayerTextDrawSetShadow(playerid,TaxistaTD[playerid][4], 1);
PlayerTextDrawSetSelectable(playerid,TaxistaTD[playerid][4], 0);

TaxistaTD[playerid][5] = CreatePlayerTextDraw(playerid,416.000000, 430.000000, "  ");
PlayerTextDrawBackgroundColor(playerid,TaxistaTD[playerid][5], 255);
PlayerTextDrawFont(playerid,TaxistaTD[playerid][5], 1);
PlayerTextDrawLetterSize(playerid,TaxistaTD[playerid][5], 0.500000, 1.000000);
PlayerTextDrawColor(playerid,TaxistaTD[playerid][5], -1);
PlayerTextDrawSetOutline(playerid,TaxistaTD[playerid][5], 0);
PlayerTextDrawSetProportional(playerid,TaxistaTD[playerid][5], 1);
PlayerTextDrawSetShadow(playerid,TaxistaTD[playerid][5], 1);
PlayerTextDrawUseBox(playerid,TaxistaTD[playerid][5], 1);
PlayerTextDrawBoxColor(playerid,TaxistaTD[playerid][5], -156);
PlayerTextDrawTextSize(playerid,TaxistaTD[playerid][5], 232.000000, -20.000000);
PlayerTextDrawSetSelectable(playerid,TaxistaTD[playerid][5], 0);

TaxistaTD[playerid][6] = CreatePlayerTextDraw(playerid, 320.000000, 429.000000, "Las Venturas Airport");
PlayerTextDrawAlignment(playerid, TaxistaTD[playerid][6], 2);
PlayerTextDrawBackgroundColor(playerid,TaxistaTD[playerid][6], 255);
PlayerTextDrawFont(playerid,TaxistaTD[playerid][6], 3);
PlayerTextDrawLetterSize(playerid,TaxistaTD[playerid][6], 0.400000, 1.000000);
PlayerTextDrawColor(playerid,TaxistaTD[playerid][6], FUSIONGAMING);
PlayerTextDrawSetOutline(playerid,TaxistaTD[playerid][6], 0);
PlayerTextDrawSetProportional(playerid,TaxistaTD[playerid][6], 1);
PlayerTextDrawSetShadow(playerid,TaxistaTD[playerid][6], 1);
PlayerTextDrawSetSelectable(playerid,TaxistaTD[playerid][6], 0);

TaxistaTD[playerid][7] = CreatePlayerTextDraw(playerid,213.000000, 441.000000, "ld_beat:right");
PlayerTextDrawBackgroundColor(playerid,TaxistaTD[playerid][7], 255);
PlayerTextDrawFont(playerid,TaxistaTD[playerid][7], 4);
PlayerTextDrawLetterSize(playerid,TaxistaTD[playerid][7], 0.500000, 1.000000);
PlayerTextDrawColor(playerid,TaxistaTD[playerid][7], -1);
PlayerTextDrawSetOutline(playerid,TaxistaTD[playerid][7], 0);
PlayerTextDrawSetProportional(playerid,TaxistaTD[playerid][7], 1);
PlayerTextDrawSetShadow(playerid,TaxistaTD[playerid][7], 1);
PlayerTextDrawUseBox(playerid,TaxistaTD[playerid][7], 1);
PlayerTextDrawBoxColor(playerid,TaxistaTD[playerid][7], 255);
PlayerTextDrawTextSize(playerid,TaxistaTD[playerid][7], 20.000000, -15.000000);
PlayerTextDrawSetSelectable(playerid,TaxistaTD[playerid][7], 0);

TaxistaTD[playerid][8] = CreatePlayerTextDraw(playerid,206.000000, 394.000000, "Cena Voznje:");
PlayerTextDrawBackgroundColor(playerid,TaxistaTD[playerid][8], 255);
PlayerTextDrawFont(playerid,TaxistaTD[playerid][8], 3);
PlayerTextDrawLetterSize(playerid,TaxistaTD[playerid][8], 0.410000, 0.899999);
PlayerTextDrawColor(playerid,TaxistaTD[playerid][8], -1);
PlayerTextDrawSetOutline(playerid,TaxistaTD[playerid][8], 0);
PlayerTextDrawSetProportional(playerid,TaxistaTD[playerid][8], 1);
PlayerTextDrawSetShadow(playerid,TaxistaTD[playerid][8], 1);
PlayerTextDrawSetSelectable(playerid,TaxistaTD[playerid][8], 0);

TaxistaTD[playerid][9] = CreatePlayerTextDraw(playerid,385.000000, 394.000000, "1000$");
PlayerTextDrawAlignment(playerid, TaxistaTD[playerid][9], 2);
PlayerTextDrawBackgroundColor(playerid,TaxistaTD[playerid][9], 255);
PlayerTextDrawFont(playerid,TaxistaTD[playerid][9], 1);
PlayerTextDrawLetterSize(playerid,TaxistaTD[playerid][9], 0.500000, 1.000000);
PlayerTextDrawColor(playerid,TaxistaTD[playerid][9], FUSIONGAMING);
PlayerTextDrawSetOutline(playerid,TaxistaTD[playerid][9], 0);
PlayerTextDrawSetProportional(playerid,TaxistaTD[playerid][9], 1);
PlayerTextDrawSetShadow(playerid,TaxistaTD[playerid][9], 1);
PlayerTextDrawSetSelectable(playerid,TaxistaTD[playerid][9], 0);

TaxistaTD[playerid][10] = CreatePlayerTextDraw(playerid,190.000000, 419.000000, "-");
PlayerTextDrawBackgroundColor(playerid,TaxistaTD[playerid][10], 255);
PlayerTextDrawFont(playerid,TaxistaTD[playerid][10], 1);
PlayerTextDrawLetterSize(playerid,TaxistaTD[playerid][10], 12.720012, 1.000000);
PlayerTextDrawColor(playerid,TaxistaTD[playerid][10], FUSIONGAMING);
PlayerTextDrawSetOutline(playerid,TaxistaTD[playerid][10], 0);
PlayerTextDrawSetProportional(playerid,TaxistaTD[playerid][10], 1);
PlayerTextDrawSetShadow(playerid,TaxistaTD[playerid][10], 1);
PlayerTextDrawSetSelectable(playerid,TaxistaTD[playerid][10], 0);

TaxistaTD[playerid][11] = CreatePlayerTextDraw(playerid,193.000000, 399.000000, "-");
PlayerTextDrawBackgroundColor(playerid,TaxistaTD[playerid][11], 255);
PlayerTextDrawFont(playerid,TaxistaTD[playerid][11], 1);
PlayerTextDrawLetterSize(playerid,TaxistaTD[playerid][11], 8.519996, 1.000000);
PlayerTextDrawColor(playerid,TaxistaTD[playerid][11], FUSIONGAMING);
PlayerTextDrawSetOutline(playerid,TaxistaTD[playerid][11], 0);
PlayerTextDrawSetProportional(playerid,TaxistaTD[playerid][11], 1);
PlayerTextDrawSetShadow(playerid,TaxistaTD[playerid][11], 1);
PlayerTextDrawSetSelectable(playerid,TaxistaTD[playerid][11], 0);}
//------------------------------------------------------------------------------
OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
if (gPlayerUsingLoopingAnim[playerid] == 1)
ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, 1);
animation[playerid]++;}

IsKeyJustDown(key, newkeys, oldkeys)
{
if((newkeys & key) && !(oldkeys & key)) return 1;
return 0;}
LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
if (gPlayerUsingLoopingAnim[playerid] == 1)
gPlayerUsingLoopingAnim[playerid] = 1;
ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, 1);
animation[playerid]++;}

//-------------------------------------------------

StopLoopingAnim(playerid)
{
gPlayerUsingLoopingAnim[playerid] = 0;
ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);}

//-------------------------------------------------

PreloadAnimLib(playerid, animlib[])
{
ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0, 1);}

//------------------------------------------------------------------------------
stock UliceFirme(h) {
new imeulice[MAX_ZONE_NAME];
	UliceFirme2(h, imeulice, sizeof(imeulice));
	return imeulice;}
//------------------------------------------------------------------------------
stock UliceFirme2(h, zone[], len) {
new Float:x22, Float:y22;
x22 = BusinessInfo[h][bEnterX]; y22 = BusinessInfo[h][bEnterY];
for(new i = 0; i != sizeof(gSAZones); i++) {
	if(x22 >= gSAZones[i][SAZONE_AREA][0] && x22 <= gSAZones[i][SAZONE_AREA][3] && y22 >= gSAZones[i][SAZONE_AREA][1] && y22 <= gSAZones[i][SAZONE_AREA][4]) {
		return format(zone, len, gSAZones[i][SAZONE_NAME], 0); } ]
return 0;}
//------------------------------------------------------------------------------
stock RPImeIgraca(id) {
new ime[MAX_PLAYER_NAME];
	GetPlayerName(id, ime, sizeof ime);
return ime;}
//------------------------------------------------------------------------------
stock ImeIgraca(id) {
new ime[MAX_PLAYER_NAME];
if(Maskuse[id] == true) format(ime, sizeof(ime), "%s", RealName[id]);
	else GetPlayerName(id, ime, sizeof ime);
return ime;}
//------------------------------------------------------------------------------
stock GetNearestContainer(playerid) {
for(new b = 1; b < MAX_KONT; b++)
	{
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 
	KontInfo[b][koObjPos][0], 
	KontInfo[b][koObjPos][1], 
	KontInfo[b][koObjPos][2])) return b; 
}
return -1;}
//------------------------------------------------------------------------------
GetNearestBrzaHrana(playerid) {
for(new b = 1; b < MAX_BHRANA; b++) {
	if(IsPlayerInRangeOfPoint(playerid, 2.0, BrzaHranaInfo[b][bhObjPos][0], BrzaHranaInfo[b][bhObjPos][1], BrzaHranaInfo[b][bhObjPos][2])) return b; }
return -1;}
//------------------------------------------------------------------------------
GetNearestNargila(playerid) {
for(new b = 1; b < MAX_NARGILA; b++) {
	if(IsPlayerInRangeOfPoint(playerid, 2.0, NargilaInfo[b][gObjPos][0], NargilaInfo[b][gObjPos][1], NargilaInfo[b][gObjPos][2])) return b; }
return -1;}
//------------------------------------------------------------------------------
GetNearestGovornica(playerid) {
for(new b = 1; b < MAX_GOVORNICA; b++) {
	if(IsPlayerInRangeOfPoint(playerid, 2.0, GovornicaInfo[b][gObjPos][0], GovornicaInfo[b][gObjPos][1], GovornicaInfo[b][gObjPos][2])) return b; }
return -1;}
//------------------------------------------------------------------------------
GetNearestAtm(playerid) {
for(new b = 1; b < sizeof(atmInfo); b++) {
	if(IsPlayerInRangeOfPoint(playerid, 4.0, atmInfo[b][atmPos][0], atmInfo[b][atmPos][1], atmInfo[b][atmPos][2])) return b; }
return -1;}
//------------------------------------------------------------------------------
GetNearestBusiness(playerid) {
for(new b = 1; b < sizeof(BusinessInfo); b++) {
	if(IsPlayerInRangeOfPoint(playerid, 3.0, BusinessInfo[b][bEnterX], BusinessInfo[b][bEnterY], BusinessInfo[b][bEnterZ])) return b; }
return -1;}
GetNearestBusiness2(playerid) {
for(new b = 1; b < sizeof(BusinessInfo); b++) {
	if(IsPlayerInRangeOfPoint(playerid, 6.0, BusinessInfo[b][bEnterX], BusinessInfo[b][bEnterY], BusinessInfo[b][bEnterZ])) return b; }
return -1;}
//------------------------------------------------------------------------------
stock NextHotelID(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), HOTEL_FILE, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break;}}
	return (id);}
//------------------------------------------------------------------------------
stock NextGateID(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), GATE_FILE, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break;}}
	return (id);}
//------------------------------------------------------------------------------
stock SledeciIDFirme(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), F_FILE, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break;}}
	return (id);}
//------------------------------------------------------------------------------
stock SledeciIDImovine(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), IM_FILE, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break;}}
	return (id);}
//------------------------------------------------------------------------------
stock SledeciIDSalona(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), AS_FILE, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break; }}
	return (id);}
//------------------------------------------------------------------------------
SoundForAll(sound)
{
foreach(new i : Player)
{
	if(IsPlayerConnected(i)) PlayerPlaySound(i, sound, 0.0, 0.0, 0.0);}
}
//------------------------------------------------------------------------------
stock AdminPoruka(color, string[]) {
for(new i = 0; i < MAX_PLAYERS; i++) {
	if(IsPlayerConnected(i)) {
		if(PlayerInfo[i][xAdmin] >= 1 || IsPlayerAdmin(i)) {
			SCM(i, color, string); }}}
return true;}
stock SendAltChatMessage(message[]) {
for(new i = 0; i < MAX_PLAYERS; i++) 
{
	if(IsPlayerConnected(i))
	{
		if(PlayerInfo[i][xAdmin] >= 1 || IsPlayerAdmin(i))
		{
			for(new ai = 0; ai < MAX_LINES; ai ++)
			{
				if (ai == MAX_LINES - 1)
				{
					strmid(AltChatTD_Text[i][ai], message, 0, strlen(message));
					break;
				}
				strmid(AltChatTD_Text[i][ai], AltChatTD_Text[i][ai + 1], 0, strlen(AltChatTD_Text[i][ai + 1]));
			}
		 
			for (new ei = 0; ei < MAX_LINES; ei ++)
			{
				PlayerTextDrawSetString(i, AltChatTD_Player[ei], AltChatTD_Text[i][ei]);
			}
		}
	}
}
return true;}

stock AdminSMS(color, string[]) {
for(new i = 0; i < MAX_PLAYERS; i++) {
	if(IsPlayerConnected(i)) {
		if(PlayerInfo[i][xAdmin] >= 1 || IsPlayerAdmin(i)) {
			if(GetPVarInt(i, "ToggedPM") == 0) {
				SCM(i, color, string); }}}}
return true;}
stock AdminWisper(color, string[]) {
for(new i = 0; i < MAX_PLAYERS; i++) {
	if(IsPlayerConnected(i)) {
		if(PlayerInfo[i][xAdmin] >= 1 || IsPlayerAdmin(i)) {
			if(GetPVarInt(i, "ToggedWISP") == 0) {
				SCM(i, color, string); }}}}
return true;}
stock AdminRPoruka(color, string[]) {
for(new i = 0; i < MAX_PLAYERS; i++) {
	if(IsPlayerConnected(i)) {
		if(PlayerInfo[i][xAdmin] >= 1 || IsPlayerAdmin(i)) {
			if(GetPVarInt(i, "ToggedReport") == 0) {
				SCM(i, color, string); }}}}
return true;}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
stock RPTPoruka(color, string[]) {
for(new i = 0; i < MAX_PLAYERS; i++) {
	if(IsPlayerConnected(i)) {
		if(PlayerInfo[i][xAdmin] >= 6 || IsPlayerAdmin(i) || PlayerInfo[i][xHelper] >= 1) {
			if(GetPVarInt(i, "ToggedPomoc") == 0) {
				SCM(i, color, string); }}}}
return true;}
stock RPTChat(color, string[]) {
for(new i = 0; i < MAX_PLAYERS; i++) {
	if(IsPlayerConnected(i)) {
		if(PlayerInfo[i][xAdmin] >= 1 || IsPlayerAdmin(i) || PlayerInfo[i][xHelper] >= 1) {
			SCM(i, color, string); }}}
return true;}
stock HelperPoruka(color, string[]) {
for(new i = 0; i < MAX_PLAYERS; i++) {
	if(IsPlayerConnected(i)) {
		if(PlayerInfo[i][xHelper] >= 1) {
			SCM(i, color, string); }}}
return true;}
stock RPTChatPlus(color, string[]) {
for(new i = 0; i < MAX_PLAYERS; i++) {
	if(IsPlayerConnected(i)) {
		if(PlayerInfo[i][xAdmin] >= 1 || IsPlayerAdmin(i) || PlayerInfo[i][xHelper] >= 2) {
			SCM(i, color, string); }}}
return true;}
stock PROMChat(color, string[]) {
for(new i = 0; i < MAX_PLAYERS; i++) {
	if(IsPlayerConnected(i)) {
		if(PlayerInfo[i][xAdmin] >= 1 || IsPlayerAdmin(i) || PlayerInfo[i][xHelper] >= 1 || PlayerInfo[i][xVIPLevel] >= 1 || PlayerInfo[i][xYouTuber] >= 1) {
			if(GetPVarInt(i, "ToggedG") == 0) {
				SCM(i, color, string); }}}}
return true;}
stock LiderPoruka(color, string[]) {
for(new i = 0; i < MAX_PLAYERS; i++) {
	if(IsPlayerConnected(i)) {
		if(PlayerInfo[i][xAdmin] >= 1 || IsPlayerAdmin(i) || PlayerInfo[i][xLider] >= 1) {
			SCM(i, color, string); }}}
return true;}
stock PromoteriAdminChat(color, string[]) {

for(new i = 0; i < MAX_PLAYERS; i++) {

	if(IsPlayerConnected(i)) {

		if(PlayerInfo[i][xAdmin] >= 1 || IsPlayerAdmin(i) || PlayerInfo[i][xPromoter] >= 1) {

				SCM(i, color, string);
		}
	}
}
return true;}

//------------------------------------------------------------------------------
stock antiSpeedVehicle(carid) {
new v = GetVehicleModel(carid);
if(v == 593 || v == 592 || v == 577 || v == 553 || v == 520 || v == 519 || v == 511 || v == 460 || v == 563 || v == 548 || v == 497 || v == 488 || v == 487 || v == 469 || v == 447 || v == 417) {
	return 1;}
return 0;}
//------------------------------------------------------------------------------
forward OnPlayerFalla(playerid);
public OnPlayerFalla(playerid) {
if(antiCheatCS[playerid][SpeedFall]) return 1;

SetTimerEx("Reactivate", 8000, false, "i", playerid);
antiCheatCS[playerid][SpeedFall] = true;

return 1;}

forward FallingChecker(playerid);
public FallingChecker(playerid) {
new Float:Pos[4];

if(IsPlayerConnected(playerid))	{
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	Pos[3] = floatsqroot((Pos[0]-antiCheatCS[playerid][SpeedPos][0] * Pos[0]-antiCheatCS[playerid][SpeedPos][0]) + (Pos[1]-antiCheatCS[playerid][SpeedPos][1] * Pos[1]-antiCheatCS[playerid][SpeedPos][1]));

	if(Pos[3] < 10 && (antiCheatCS[playerid][SpeedPos][2] - Pos[2]) > 5) {

		OnPlayerFalla(playerid);
	}
	antiCheatCS[playerid][SpeedPos][0] = Pos[0];
	antiCheatCS[playerid][SpeedPos][1] = Pos[1];
	antiCheatCS[playerid][SpeedPos][2] = Pos[2];}
return 1;}

forward Reactivate(playerid);
public Reactivate(playerid) {

antiCheatCS[playerid][SpeedFall] = false;

return 1;}
//------------------------------------------------------------------------------
stock AntiCheat(playerid) { // - Kompatibilno sa Nex-AC
if(PlayerLogged[playerid] == true) {
	//SendClientMessageEx(playerid, -1,"%d",PritisnoFire[playerid]);
	//Anti PrisonBreak 
	if(PlayerInfo[playerid][xZatvor] == ALKATRAZ && spawnose[playerid] == 1){
		if(!IsPlayerInArea(playerid, 91.5063, 1797.7030, 326.1263, 1956.2998)) return ACKick(playerid, "Bezanje iz Alkatraza");
	}
	// -- Anti Health
	if(antiCheatSS[antiHealthH] == true) {
		new Float:Zivot;
		GetPlayerHealth(playerid, Zivot);
		if(KodSprunk(playerid)) {
			Fusion_SetPlayerHealth(playerid, Zivot);
			return 1;
		}
		if(Zivot > antiCheatCS[playerid][TrueHealth] && !KodSprunk(playerid)) {
			Fusion_SetPlayerHealth(playerid, antiCheatCS[playerid][TrueHealth]);
			return 1;
		}
		antiCheatCS[playerid][TrueHealth] = Zivot;
	}
	// -- Anti Armour
	if(antiCheatSS[antiArmourH] == true) {
		new Float:Armour;
		GetPlayerArmour(playerid, Armour);
		if(Armour > antiCheatCS[playerid][TrueArmour]) {
			Fusion_SetPlayerArmour(playerid, antiCheatCS[playerid][TrueArmour]);
			return 1;
		}
		antiCheatCS[playerid][TrueArmour] = Armour;
	}
	// -- Anti JetPack
	if(antiCheatSS[antiJetPackH] == true) {
		if(PlayerInfo[playerid][xAdmin] < 1) {
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
				OnPlayerCheat(playerid, DETECT_JETPACK_HACK, 0, 0);
		}
	}
	// -- Anti Money
	if(antiCheatSS[antiMoneyH] == true) {
		new PraviNovac = PlayerInfo[playerid][xNovac],
			StvoreniNovac = GetPlayerMoney(playerid);

		if(StvoreniNovac > PraviNovac) {
			ResetujBarNovac(playerid);
			UpdejtujBarNovac(playerid, PraviNovac);
		}
		else if(StvoreniNovac < PraviNovac) {
			if(antiCheatCS[playerid][InTuningGarage])
				PlayerInfo[playerid][xNovac] = StvoreniNovac;
			else if(((PraviNovac - StvoreniNovac) == 1) && (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT))
				PlayerInfo[playerid][xNovac] -= 1;
		}
	}
	antiCheatCS[playerid][RemoveVehicle] = false;}
return 1;}
//------------------------------------------------------------------------------
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ) {
if(playerid == INVALID_PLAYER_ID) return 1;
if(PlayerInfo[playerid][xAdmin] >= 6 && AdminDuty[playerid]) {
	antiCheatCS[playerid][TeleportCheck] = 4;
	ac_SetPlayerPosFindZ(playerid, fX, fY, fZ);}
return 1;}
stock Fusion_IsNotWeaponNoAmmo(weaponid) {
new wslot = g_aWeaponSlots[weaponid];
if(wslot != 0 && wslot != 1 && wslot != 10) return 1;
return 0;}

stock Fusion_IsGiveVehicleWeapon(weaponid) {
if(weaponid == 46 || weaponid == 2) return 1;
return 0;}

GiveWeaponToPlayer(playerid, weaponid, ammo) {

	if(antiCheatCS[playerid][WeaponCheck] == 1) antiCheatCS[playerid][WeaponCheck] = 2;
if(IsValidWeapon(weaponid)) {

	antiCheatCS[playerid][LastAmmoChecks] = 0;
	antiCheatCS[playerid][WeaponDetect] = 3;
		antiCheatCS[playerid][Weapon][g_aWeaponSlots[weaponid]] = weaponid;
	antiCheatCS[playerid][Ammo][g_aWeaponSlots[weaponid]] += ammo;
		GivePlayerWeapon(playerid, weaponid, ammo);}
if(antiCheatCS[playerid][WeaponCheck] == 2) antiCheatCS[playerid][WeaponCheck] = 1;

return 1;}

SetWeaponAmmo(playerid, weapon, ammo) {

if(antiCheatCS[playerid][WeaponCheck] == 1) antiCheatCS[playerid][WeaponCheck] = 2;
new wslot = g_aWeaponSlots[weapon];
	if(weapon > 0 && 47 > weapon && wslot != -1) {
		antiCheatCS[playerid][WeaponDetect] = 3;
		antiCheatCS[playerid][LastAmmoChecks] = 0;
	antiCheatCS[playerid][Ammo][wslot] = ammo;
	SetPlayerAmmo(playerid, weapon, ammo);}
if(antiCheatCS[playerid][WeaponCheck] == 2) antiCheatCS[playerid][WeaponCheck] = 1;

return 1;}


ResetAllWeapons(playerid) {

if(antiCheatCS[playerid][WeaponCheck] == 1) antiCheatCS[playerid][WeaponCheck] = 2;
for(new i = 0; i < MAX_W_SLOTS; i++) {
	antiCheatCS[playerid][WeaponDetect] = 3;
	antiCheatCS[playerid][LastAmmoChecks] = 0;
	antiCheatCS[playerid][Weapon][i] = 0;
	antiCheatCS[playerid][Ammo][i] = 0;}
ResetPlayerWeapons(playerid);
if(antiCheatCS[playerid][WeaponCheck]==2) antiCheatCS[playerid][WeaponCheck] = 1;

return 1;}

RemovePlayerWeapon(playerid, weaponid) {

if(antiCheatCS[playerid][WeaponCheck] == 1) antiCheatCS[playerid][WeaponCheck] = 2;
antiCheatCS[playerid][WeaponDetect] = 3;
antiCheatCS[playerid][LastAmmoChecks] = 0;

ResetPlayerWeapons(playerid);

for(new i = 0; i < 13; i ++) {
	if(antiCheatCS[playerid][Weapon][i] != weaponid) {
		GivePlayerWeapon(playerid, antiCheatCS[playerid][Weapon][i], antiCheatCS[playerid][Ammo][i]);
	}
	else {
		antiCheatCS[playerid][Weapon][i] = 0;
		antiCheatCS[playerid][Ammo][i] = 0;
	}
}
if(antiCheatCS[playerid][WeaponCheck] == 2) antiCheatCS[playerid][WeaponCheck] = 1;
return true;}

stock GetWeapon(playerid) {

new weaponid = GetPlayerWeapon(playerid);
new wslot = g_aWeaponSlots[weaponid];
if(IsValidWeapon(weaponid) && wslot != -1 && antiCheatCS[playerid][Weapon][wslot] == weaponid)
	return weaponid;

return 0;}

stock HavePlayerWeapon(playerid) {
switch(GetPlayerWeapon(playerid)) {
	case 16..18, 22..39, 41, 42: return true;}
return false;}

stock GetPlayerWeaponAmmo(playerid, weaponid) {
new wd[2][13];
for(new i; i < 13; i++) GetPlayerWeaponData(playerid, i, wd[0][i], wd[1][i]);
for(new i; i < 13; i++) {
	if(weaponid == wd[0][i]) return wd[1][i];}
return 0;}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ) {
if(PlayerInfo[playerid][xAdmin] <= 0)
{
if(ForbiddenWeap(playerid)) return 0;}
if(GetPlayerWeapon(playerid) == 0 && !IsPlayerInAnyVehicle(playerid))//anti weapon cleo
{
return 0;}
if(antiCheatCS[playerid][Ammo][GetWeaponSlot(GetPlayerWeapon(playerid))] <= 0)//anti weapon ghost
{
return 0;}
new varstring[256];
if(hittype != BULLET_HIT_TYPE_NONE) {
	if(!(-1000.0 <= fX <= 1000.0) || !(-1000.0 <= fY <= 1000.0) || !(-1000.0 <= fZ <= 1000.0)) {
		format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s je kickovan sa servera. Razlog: "col_white"Bullet Crash", ImeIgraca(playerid));
		AdminPoruka(SVETLOCRVENA, varstring);
		Kickovanje(playerid, "{af001d][ FG:RPG ] : {FFFFFF]Kikovani ste sa servera zbog koriscenja cheata. (Bullet Crash Hack)");
		return 0;
	}
}

if(hittype == BULLET_HIT_TYPE_PLAYER) {
	if(hitid == playerid) {
		format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s je kickovan sa servera. Razlog: "col_white"Bullet Crash", ImeIgraca(playerid));
		AdminPoruka(SVETLOCRVENA, varstring);
		Kickovanje(playerid, "{af001d][ FG:RPG ] : {FFFFFF]Kikovani ste sa servera zbog koriscenja cheata. (Bullet Crash Hack)");
		return 0;
	}
}
if(hittype == BULLET_HIT_TYPE_PLAYER) {
	if(fX == 0.000000 && fY == 0.000000 && fZ == 0.500000 && weaponid == 0) {
		format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s je kickovan sa servera. Razlog: "col_white"Command kill", ImeIgraca(playerid));
		AdminPoruka(SVETLOCRVENA, varstring);
		Kickovanje(playerid, "{af001d][ FG:RPG ] : {FFFFFF]Kikovani ste sa servera zbog koriscenja cheata. (Command Kill)");
		return 0;
	}
}

if(hittype == 0 && !IsValidWeapon(weaponid)) {
	if(fX == 0.000000 && fY == 0.000000 && fZ == 0.000000) {
		format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s je kickovan sa servera. Razlog: "col_white"Bullet Crash", ImeIgraca(playerid));
		AdminPoruka(SVETLOCRVENA, varstring);
		Kickovanje(playerid, "{af001d][ FG:RPG ] : {FFFFFF]Kikovani ste sa servera zbog koriscenja cheata. (Bullet Crash Hack)");
		return 0;
	}
}

if(antiCheatCS[playerid][LastAmmo] != 0 && weaponid != 38) {
	if(HavePlayerWeapon(playerid)) {
		if(antiCheatCS[playerid][LastAmmo] == GetPlayerWeaponAmmo(playerid, weaponid)) {
			antiCheatCS[playerid][LastAmmoChecks]++;
			if(antiCheatCS[playerid][LastAmmoChecks] >= 10) {
				antiCheatCS[playerid][LastAmmoChecks] = 0;
				antiCheatCS[playerid][LastAmmo] = 0;

				//format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Moguc infinite ammo hack || %s[ID: %d] | Koristi /spec!!!", ImeIgraca(playerid), playerid);
				//AdminPoruka(ANTICHEAT, varstring);
			}
		}
	}
}
antiCheatCS[playerid][LastAmmo] = GetPlayerAmmo(playerid);
//
antiCheatCS[playerid][LastWShot] = tickcount();

if(GetPlayerAmmo(playerid) <= 1) {
	antiCheatCS[playerid][WeaponDetect] = 3;

	antiCheatCS[playerid][Weapon][g_aWeaponSlots[weaponid]] = 0;
	antiCheatCS[playerid][Ammo][g_aWeaponSlots[weaponid]] = 0;}
if(TreniranjeProvera[playerid] == 1)
{
	if(IsPlayerInRangeOfPoint(playerid,2.0,300.3199,-138.5692,1004.0625) || IsPlayerInRangeOfPoint(playerid,2.0,300.2065,-130.9500,1004.0625) ||
	IsPlayerInRangeOfPoint(playerid,2.0,300.2224,-127.9862,1004.0625) || IsPlayerInRangeOfPoint(playerid,2.0,300.3398,-135.5488,1004.0625)) 
	{
		if(GetPlayerAmmo(playerid) < 2)
		{
			if(Trenira[playerid] == ORUZJE_PISTOL) {
					PlayerInfo[playerid][xPistolSkill] += 30;
					SendInfoMessage(playerid, "Zavrsili ste trening za Pistol, i dobili ste +30 skill poena na tom oruzju. (/skills)");
					SavePlayer(playerid); Fusion_KillTimer(treniranjetimer[playerid]);
					Trenira[playerid] = 0; TreniranjeProvera[playerid] = 0;    

					SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, PlayerInfo[playerid][xPistolSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][xDeagleSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][xShotgunSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[playerid][xSawnSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][xCombatSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][xMPSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][xAKSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][xM4Skill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRifLE, PlayerInfo[playerid][xSniperSkill]);

					ResetAllWeapons(playerid);
			}
			else if(Trenira[playerid] == ORUZJE_DEAGLE) {
					PlayerInfo[playerid][xDeagleSkill] += 30;
					SendInfoMessage(playerid, "Zavrsili ste trening za Desert Eagle, i dobili ste +30 skill poena na tom oruzju. (/skills)");
					SavePlayer(playerid); Fusion_KillTimer(treniranjetimer[playerid]);
					Trenira[playerid] = 0; TreniranjeProvera[playerid] = 0;  

					SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, PlayerInfo[playerid][xPistolSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][xDeagleSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][xShotgunSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[playerid][xSawnSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][xCombatSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][xMPSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][xAKSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][xM4Skill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRifLE, PlayerInfo[playerid][xSniperSkill]);

					ResetAllWeapons(playerid);
			}
			else if(Trenira[playerid] == ORUZJE_SHOTGUN) {
					PlayerInfo[playerid][xShotgunSkill] += 30;
					SendInfoMessage(playerid, "Zavrsili ste trening za Shotgun, i dobili ste +30 skill poena na tom oruzju. (/skills)");
					SavePlayer(playerid); Fusion_KillTimer(treniranjetimer[playerid]);
					Trenira[playerid] = 0; TreniranjeProvera[playerid] = 0;     

					SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, PlayerInfo[playerid][xPistolSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][xDeagleSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][xShotgunSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[playerid][xSawnSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][xCombatSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][xMPSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][xAKSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][xM4Skill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRifLE, PlayerInfo[playerid][xSniperSkill]);

					ResetAllWeapons(playerid);
			}
			else if(Trenira[playerid] == ORUZJE_SAWNOFF) {
					PlayerInfo[playerid][xSawnSkill] += 30;
					SendInfoMessage(playerid, "Zavrsili ste trening za Sawnoff Shotgun, i dobili ste +30 skill poena na tom oruzju. (/skills)");
					SavePlayer(playerid); Fusion_KillTimer(treniranjetimer[playerid]);
					Trenira[playerid] = 0; TreniranjeProvera[playerid] = 0;     

					SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, PlayerInfo[playerid][xPistolSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][xDeagleSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][xShotgunSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[playerid][xSawnSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][xCombatSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][xMPSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][xAKSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][xM4Skill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRifLE, PlayerInfo[playerid][xSniperSkill]);

					ResetAllWeapons(playerid);
			}
			else if(Trenira[playerid] == ORUZJE_COMBAT) {
					PlayerInfo[playerid][xCombatSkill] += 30;
					SendInfoMessage(playerid, "Zavrsili ste trening za Combat Shotgun, i dobili ste +30 skill poena na tom oruzju. (/skills)");
					SavePlayer(playerid); Fusion_KillTimer(treniranjetimer[playerid]);
					Trenira[playerid] = 0; TreniranjeProvera[playerid] = 0;      

					SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, PlayerInfo[playerid][xPistolSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][xDeagleSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][xShotgunSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[playerid][xSawnSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][xCombatSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][xMPSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][xAKSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][xM4Skill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRifLE, PlayerInfo[playerid][xSniperSkill]);

					ResetAllWeapons(playerid);
			}
			else if(Trenira[playerid] == ORUZJE_MP5) {
					PlayerInfo[playerid][xMPSkill] += 30;
					SendInfoMessage(playerid, "Zavrsili ste trening za MP5, i dobili ste +30 skill poena na tom oruzju. (/skills)");
					SavePlayer(playerid); Fusion_KillTimer(treniranjetimer[playerid]);
					Trenira[playerid] = 0; TreniranjeProvera[playerid] = 0;     

					SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, PlayerInfo[playerid][xPistolSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][xDeagleSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][xShotgunSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[playerid][xSawnSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][xCombatSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][xMPSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][xAKSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][xM4Skill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRifLE, PlayerInfo[playerid][xMPSkill]);

					ResetAllWeapons(playerid);
			}
			else if(Trenira[playerid] == ORUZJE_AK47) {
					PlayerInfo[playerid][xAKSkill] += 30;
					SendInfoMessage(playerid, "Zavrsili ste trening za AK-47, i dobili ste +30 skill poena na tom oruzju. (/skills)");
					SavePlayer(playerid); Fusion_KillTimer(treniranjetimer[playerid]);
					Trenira[playerid] = 0; TreniranjeProvera[playerid] = 0;     

					SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, PlayerInfo[playerid][xPistolSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][xDeagleSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][xShotgunSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[playerid][xSawnSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][xCombatSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][xMPSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][xAKSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][xM4Skill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRifLE, PlayerInfo[playerid][xSniperSkill]);

					ResetAllWeapons(playerid);
			}
			else if(Trenira[playerid] == ORUZJE_M4) {
					PlayerInfo[playerid][xM4Skill] += 30;
					SendInfoMessage(playerid, "Zavrsili ste trening za M4, i dobili ste +30 skill poena na tom oruzju. (/skills)");
					SavePlayer(playerid); Fusion_KillTimer(treniranjetimer[playerid]);
					Trenira[playerid] = 0; TreniranjeProvera[playerid] = 0;     

					SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, PlayerInfo[playerid][xPistolSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][xDeagleSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][xShotgunSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[playerid][xSawnSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][xCombatSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][xMPSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][xAKSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][xM4Skill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRifLE, PlayerInfo[playerid][xSniperSkill]);

					ResetAllWeapons(playerid);
			}
			else if(Trenira[playerid] == ORUZJE_SNIPER) {
					PlayerInfo[playerid][xSniperSkill] += 30;
					SendInfoMessage(playerid, "Zavrsili ste trening za Sniper Rifle, i dobili ste +30 skill poena na tom oruzju. (/skills)");
					SavePlayer(playerid); Fusion_KillTimer(treniranjetimer[playerid]);
					Trenira[playerid] = 0; TreniranjeProvera[playerid] = 0;     

					SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, PlayerInfo[playerid][xPistolSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][xDeagleSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][xShotgunSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[playerid][xSawnSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][xCombatSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][xMPSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][xAKSkill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][xM4Skill]);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRifLE, PlayerInfo[playerid][xSniperSkill]);

					ResetAllWeapons(playerid); 
			}
		}
	}
	else
	{
		SendErrorMessage(playerid, "Pomerili ste se sa mesta pucanja i prekinuli trening.");
		SavePlayer(playerid);
		Trenira[playerid] = 0; TreniranjeProvera[playerid] = 0;

		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, PlayerInfo[playerid][xPistolSkill]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][xDeagleSkill]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][xShotgunSkill]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[playerid][xSawnSkill]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][xCombatSkill]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][xMPSkill]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][xAKSkill]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][xM4Skill]);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRifLE, PlayerInfo[playerid][xSniperSkill]);

		ResetAllWeapons(playerid);
		Fusion_KillTimer(treniranjetimer[playerid]);
	}
}
return 1;}

//------------------------------------------------------------------------------
stock KodSprunk(playerid) {
	if(IsPlayerInRangeOfPoint(playerid, 4, -2420.219, 984.578, 44.297)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -2420.180, 985.945, 44.297)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2225.203, -1153.422, 1025.906)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2576.703, -1284.430, 1061.094)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2155.906, 1606.773, 1000.055)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2209.906, 1607.195, 1000.055)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2222.203, 1606.773, 1000.055)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 495.969, -24.320, 1000.734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 501.828, -1.430, 1000.734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 373.828, -178.141, 1000.734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 330.680, 178.500, 1020.070)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 331.922, 178.500, 1020.070)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 350.906, 206.086, 1008.477)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 361.563, 158.617, 1008.477)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 371.594, 178.453, 1020.070)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 374.891, 188.977, 1008.477)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2155.844, 1607.875, 1000.063)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2202.453, 1617.008, 1000.063)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2209.242, 1621.211, 1000.063)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2222.367, 1602.641, 1000.063)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 500.563, -1.367, 1000.734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 379.039, -178.883, 1000.734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2480.86,-1959.27,12.9609)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 1634.11,-2237.53,12.8906)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2139.52,-1161.48,23.3594)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2153.23,-1016.15,62.2344)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -1350.12,493.859,10.5859)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -2229.19,286.414,34.7031)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 1659.46,1722.86,10.2188)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2647.7,1129.66,10.2188)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2845.73,1295.05,10.7891)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 1398.84,2222.61,10.4219)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -1455.12,2591.66,55.2344)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -76.0312,1227.99,19.125)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 662.43,-552.164,15.7109)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -253.742,2599.76,62.2422)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2271.73,-76.4609,25.9609)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 1789.21,-1369.27,15.1641)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 1729.79,-1943.05,12.9453)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2060.12,-1897.64,12.9297)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 1928.73,-1772.45,12.9453)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2325.98,-1645.13,14.2109)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2352.18,-1357.16,23.7734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 1154.73,-1460.89,15.1562)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -1350.12,492.289,10.5859)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -2118.97,-423.648,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -2118.62,-422.414,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -2097.27,-398.336,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -2092.09,-490.055,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -2063.27,-490.055,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -2005.65,-490.055,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -2034.46,-490.055,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -2068.56,-398.336,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -2039.85,-398.336,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -2011.14,-398.336,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -1980.79,142.664,27.0703)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2319.99,2532.85,10.2188)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 1520.15,1055.27,10.00)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2503.14,1243.7,10.2188)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 2085.77,2071.36,10.4531)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -862.828,1536.61,21.9844)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -14.7031,1175.36,18.9531)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, -253.742,2597.95,62.2422)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 201.016,-107.617,0.898438)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 4, 1277.84,372.516,18.9531)) return 1;
	else return 0;}
//------------------------------------------------------------------------------
stock strreplace(string[], find, replace) {
for(new i=0; string[i]; i++) {
	if(string[i] == find) {
		string[i] = replace;}}
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

stock SaveZPoruka(orgid, boja, string[]) 	{

if(OI[orgid][oSavez] != -1) {

	foreach(new i : Player) {

		if((PlayerInfo[i][xClan] == orgid || PlayerInfo[i][xClan] == OI[orgid][oSavez]) && PlayerInfo[i][xRank] >= 5) 	{

			SCM(i, boja, string);
		}
	}
}
return true;}

stock OrgPoruka(orgid, boja, string[]) 	{
foreach(new i : Player) {
	if(PlayerInfo[i][xClan] == orgid || PlayerInfo[i][xLider] == orgid) 	{
		if(PlayerInfo[i][xSFChat] == 1) {
			SCM(i, boja, string); }}}
return true;}
stock OrgPorukaLeader(orgid, boja, string[]) 	{
foreach(new i : Player) {
	if(PlayerInfo[i][xLider] == orgid) 	{
		SCM(i, boja, string);
	}
}
return true;}
stock OrgPorukaMD(orgid, boja, string[]) 	{
foreach(new i : Player) {
	if(PlayerInfo[i][xClan] == orgid || PlayerInfo[i][xLider] == orgid) 	{
		if(GetPVarInt(i, "ToggedFR") == 0) {
			if(MedicDuty[i] == true) {
				SCM(i, boja, string); }}}}
return true;}
//------------------------------------------------------------------------------
stock OrgPoruka1(orgid, boja, string[]) 	{
foreach(new i : Player) {
	if(PlayerInfo[i][xClan] == orgid || PlayerInfo[i][xLider] == orgid) 	{
		if(GetPVarInt(i, "ToggedDC") == 0) {
			SCM(i, boja, string); }}}
return true;}
//------------------------------------------------------------------------------
GetNearestOrganization(playerid) {
for(new b = 1; b < MAX_ORG; b++) {
	if(IsPlayerInRangeOfPoint(playerid, 2.0, OI[b][oPozExtX], OI[b][oPozExtY], OI[b][oPozExtZ])) return b; }
return -1;}
//------------------------------------------------------------------------------
stock Business_Refresh(b) {
new string[512];

if(IsValidDynamicPickup(FirmaPickup[b]))
	ac_DestroyDynamicPickup(FirmaPickup[b]);

if(IsValidDynamic3DTextLabel(FirmaLabel[b]))
	DestroyDynamic3DTextLabel(FirmaLabel[b]);

if(BusinessInfo[b][bOwned] == 0) {
	format(string,sizeof(string), "{00DCF5]Firma na prodaju"col_white"[ID %d]{00DCF5]\n{00DCF5]Ime : "col_white"%s\n{00DCF5]Cena Firme : "col_white"%d$\n{00DCF5]Vrsta Firme : "col_white"%s\n{00DCF5]Potreban level: "col_white"%d\n{00DCF5]Adresa Firme: "col_white"%s\n{00DCF5]Za kupovinu upisite\n/kupifirmu", b, BusinessInfo[b][bName], BusinessInfo[b][bPrice], getBusinessType(b), BusinessInfo[b][bLevel], UliceFirme(b));
	FirmaPickup[b] = acc_CreateDynamicPickup(1274, 1, BusinessInfo[b][bEnterX], BusinessInfo[b][bEnterY], BusinessInfo[b][bEnterZ]);}
else if(BusinessInfo[b][bOwned] == 1) {
	format(string,sizeof(string), ""col_white"[ID %d]{00DCF5]Ime : "col_white"%s\n{00DCF5]Vlasnik Firme : "col_white"%s\n{00DCF5]Vrsta Firme : "col_white"%s\n{00DCF5]Adresa Firme : "col_white"%s\n{00DCF5]Neaktivnost: "col_white"%dh\n{00DCF5]Fakture: "col_white"%d\n{00DCF5]Reket: "col_white"%s",
		b,
		BusinessInfo[b][bName],
		BusinessInfo[b][bOwner],
		getBusinessType(b), UliceFirme(b),
		BusinessInfo[b][bNeaktivnost], BusinessInfo[b][bFacture],
		GetReketName(BusinessInfo[b][bReket]));

	FirmaPickup[b] = acc_CreateDynamicPickup(1274, 1, BusinessInfo[b][bEnterX], BusinessInfo[b][bEnterY], BusinessInfo[b][bEnterZ]);}

FirmaLabel[b] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, BusinessInfo[b][bEnterX], BusinessInfo[b][bEnterY], BusinessInfo[b][bEnterZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
return true;}
//------------------------------------------------------------------------------
getTypePName(type) {
new typeName[26] = "Nepostojeca vrsta";

switch(type)
{
	case 0: typeName = "Nema";
	case MALA_KUCA: typeName = "Mala kuca";
	case SREDNJA_KUCA: typeName = "Srednja kuca";
	case VELIKA_KUCA: typeName = "Velika kuca";
	case VILA_KUCA: typeName = "Vila";}
return typeName;}
//------------------------------------------------------------------------------
stock HotelRefresh(h) {
new string[256];
if(h != -1) {
	if(IsValidDynamicPickup(hotelInfo[h][hPickup]))
		ac_DestroyDynamicPickup(hotelInfo[h][hPickup]);

	if(IsValidDynamic3DTextLabel(hotelInfo[h][h3DText]))
		DestroyDynamic3DTextLabel(hotelInfo[h][h3DText]);


	if(hotelInfo[h][hOwned] == 0) {
		format(string, sizeof(string), "{36AB00]Hotel na Prodaju"col_white"[ID %d]{36AB00]\n{36AB00]Cena: "col_white"%d$\n{36AB00]Potreban level: "col_white"%d\n{36AB00]Adresa: "col_white"%s\n{36AB00]Za kupovinu "col_white"/kupihotel", h, hotelInfo[h][hPrice], hotelInfo[h][hLevel], hotelInfo[h][hAdress]);
	}
	else if(hotelInfo[h][hOwned] == 1) {
		format(string, sizeof(string), ""col_white"[ID %d]{36AB00]Vlasnik: "col_white"%s\n{36AB00]Adresa: "col_white"%s\n{36AB00]Cena najma: "col_white"%d\n{36AB00]'ENTER' za ulaz u hotel", h, hotelInfo[h][hOwner], hotelInfo[h][hAdress], hotelInfo[h][hRoomPrice]);
	}
	hotelInfo[h][hPickup] = acc_CreateDynamicPickup(1318, 1, hotelInfo[h][hEnter][0], hotelInfo[h][hEnter][1], hotelInfo[h][hEnter][2]);
	hotelInfo[h][h3DText] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, hotelInfo[h][hEnter][0], hotelInfo[h][hEnter][1], hotelInfo[h][hEnter][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);}
return true;}
//------------------------------------------------------------------------------
stock PropertyRefresh(im) {

new string[300];

if(im != -1) {

	if(IsValidDynamicPickup(ImovinaPickup[im]))
		ac_DestroyDynamicPickup(ImovinaPickup[im]);

	if(IsValidDynamic3DTextLabel(ImovinaLabel[im]))
		DestroyDynamic3DTextLabel(ImovinaLabel[im]);
		
	if(IsValidDynamicMapIcon(ImovinaMapIcon[im]))
		DestroyDynamicMapIcon(ImovinaMapIcon[im]);

	if(II[im][iUsage] == IMOVINA_KUCA) {

		if(II[im][iOwned] == 0) {
			format(string, sizeof(string),""col_server"Kuca na Prodaju"col_white"[ID %d]"col_server"\nVrsta: "col_white"%s\n"col_server"Cena: "col_white"%d$\n"col_server"Potreban level: "col_white"%d\n"col_server"Adresa: "col_white"%s\n"col_server"Za kupovinu "col_white"/kupiimovinu", im, getTypePName(II[im][iVrsta]), II[im][iPrice], II[im][iLevel], II[im][iAdress]);
			ImovinaPickup[im] = acc_CreateDynamicPickup(1273, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2] , 0, 0);
			ImovinaMapIcon[im] = CreateDynamicMapIcon(II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 31, BELA, -1, -1, -1, 300.0, MAPICON_LOCAL);
		}
		else if(II[im][iOwned] == 1 && II[im][iRentable] == 0) {
			format(string, sizeof(string),""col_white"[ID %d]"col_server"Vlasnik: "col_white"%s\n"col_server"Adresa: "col_white"%s\n"col_server"Vrsta: "col_white"%s\n"col_server"Neaktivnost: "col_white"%dh\n"col_server"'ENTER' za ulaz u imovinu", im, II[im][iOwner], II[im][iAdress], getTypePName(II[im][iVrsta]), II[im][iNeaktivnost]);
			ImovinaPickup[im] = acc_CreateDynamicPickup(19522, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2] , 0, 0);
		}
		else if(II[im][iOwned] == 1 && II[im][iRentable] == 1) {
			format(string, sizeof(string),""col_white"[ID %d]"col_server"Vlasnik: "col_white"%s\n"col_server"Adresa: "col_white"%s\n"col_server"Vrsta: "col_white"%s\n"col_server"Neaktivnost: "col_white"%dh\n"col_server"Cena renta: "col_white"%d\n"col_server"Da rentate sobu kucajte /rentroom", im, II[im][iOwner], II[im][iAdress], getTypePName(II[im][iVrsta]), II[im][iNeaktivnost], II[im][iRentPrice]);
			ImovinaPickup[im] = acc_CreateDynamicPickup(19522, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2] , 0, 0);
		}
	}
	else if(II[im][iUsage] == IMOVINA_STAN) {
		if(II[im][iOwned] == 0) {
			format(string, sizeof(string),""col_crvena"Stan na Prodaju"col_white"[ID %d]"col_crvena"\nCena: "col_white"%d$\n"col_crvena"Potreban level: "col_white"%d\n"col_crvena"Adresa: "col_white"%s\n"col_crvena"Za kupovinu "col_white"/kupiimovinu", im, II[im][iPrice], II[im][iLevel], II[im][iAdress]);
			ImovinaPickup[im] = acc_CreateDynamicPickup(19523, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2] , 0, 0);
			ImovinaMapIcon[im] = CreateDynamicMapIcon(II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 31, BELA, -1, -1, -1, 300.0, MAPICON_LOCAL);
		}
		else if(II[im][iOwned] == 1 && II[im][iRentable] == 0) {
			format(string, sizeof(string),""col_white"[ID %d]"col_crvena"Vlasnik: "col_white"%s\n"col_crvena"Adresa: "col_white"%s\n"col_crvena"Neaktivnost: "col_white"%dh\n"col_crvena"'ENTER' za ulaz u imovinu", im, II[im][iOwner], II[im][iAdress], II[im][iNeaktivnost]);
			ImovinaPickup[im] = acc_CreateDynamicPickup(19523, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2] , 0, 0);
		}
		else if(II[im][iOwned] == 1 && II[im][iRentable] == 1) {
			format(string, sizeof(string),""col_white"[ID %d]"col_crvena"Vlasnik: "col_white"%s\n"col_crvena"Adresa: "col_white"%s\n"col_crvena"Neaktivnost: "col_white"%dh\n"col_crvena"Cena renta: "col_white"%d\n"col_crvena"Da rentate sobu kucajte /rentroom", im, II[im][iOwner], II[im][iAdress], II[im][iNeaktivnost], II[im][iRentPrice]);
			ImovinaPickup[im] = acc_CreateDynamicPickup(19523, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2] , 0, 0);
		}
	}
	else if(II[im][iUsage] == IMOVINA_VIKENDICA) {
		if(II[im][iOwned] == 0) {
			format(string, sizeof(string),"{007d80]Vikendica na Prodaju"col_white"[ID %d]{007d80]\nCena: "col_white"%d$\n{007d80]Potreban level: "col_white"%d\n{007d80]Adresa: "col_white"%s\n{007d80]Za kupovinu "col_white"/kupiimovinu", im, II[im][iPrice], II[im][iLevel], II[im][iAdress]);
			ImovinaPickup[im] = acc_CreateDynamicPickup(19524, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2] , 0, 0);
			ImovinaMapIcon[im] = CreateDynamicMapIcon(II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 31, BELA, -1, -1, -1, 300.0, MAPICON_LOCAL);
		}
		else if(II[im][iOwned] == 1 && II[im][iRentable] == 0) {
			format(string, sizeof(string),""col_white"[ID %d]{007d80]Vlasnik: "col_white"%s\n{007d80]Adresa: "col_white"%s\n{007d80]Neaktivnost: "col_white"%dh\n'{007d80]ENTER' za ulaz u imovinu", im, II[im][iOwner], II[im][iAdress], II[im][iNeaktivnost]);
			ImovinaPickup[im] = acc_CreateDynamicPickup(19524, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2] , 0, 0);
		}
		else if(II[im][iOwned] == 1 && II[im][iRentable] == 1) {
			format(string, sizeof(string),""col_white"[ID %d]{007d80]Vlasnik: "col_white"%s\n{007d80]Adresa: "col_white"%s\n{007d80]Neaktivnost: "col_white"%dh\n{007d80]Cena renta: "col_white"%d\n{007d80]Da rentate sobu kucajte /rentroom", im, II[im][iOwner], II[im][iAdress], II[im][iNeaktivnost], II[im][iRentPrice]);
			ImovinaPickup[im] = acc_CreateDynamicPickup(19524, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2] , 0, 0);
		}
	}
	ImovinaLabel[im] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);}
return true;}
//------------------------------------------------------------------------------
stock Orge3D(id) {
new string[256];
ac_DestroyDynamicPickup(OrgPickup[id]);
Delete3DTextLabel(Org3D[id]);
format(string, sizeof(string),""col_white"%s\nLIDER: %s & %s \n{FF6200]Za ulaz u interijer pritisnite\n"col_white"'ENTER'", OI[id][oName], OI[id][oLider1], OI[id][oLider2]);
Org3D[id] = Create3DTextLabel(string, -1, OI[id][oPozExtX], OI[id][oPozExtY], OI[id][oPozExtZ], 25, 0, 1);
OrgPickup[id] = acc_CreateDynamicPickup(1314, 1, OI[id][oPozExtX], OI[id][oPozExtY], OI[id][oPozExtZ]);
if(OI[id][oDutyPoint][0] != 0 && OI[id][oDutyPoint][1] != 0) {
	ac_DestroyDynamicPickup(DutyPointPickup[id]);
	DestroyDynamic3DTextLabel(OrgDuty3D[id]);
	OrgDuty3D[id] = CreateDynamic3DTextLabel(""col_white"[/undercover]\n"col_server"[/duty]", -1, OI[id][oDutyPoint][0], OI[id][oDutyPoint][1], OI[id][oDutyPoint][2], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[id][oDutyVW], OI[id][oDutyInt], -1, 20.0);
	DutyPointPickup[id] = acc_CreateDynamicPickup(1239, 1, OI[id][oDutyPoint][0], OI[id][oDutyPoint][1], OI[id][oDutyPoint][2], OI[id][oDutyVW], OI[id][oDutyInt], -1, 20.0);}
if(OI[id][oEquipPoint][0] != 0 && OI[id][oEquipPoint][1] != 0) {
	ac_DestroyDynamicPickup(EquipPointPickup[id]);
	DestroyDynamic3DTextLabel(OrgEquip3D[id]);
	OrgEquip3D[id] = CreateDynamic3DTextLabel(""col_white"Da otvorite meni za opremu kucajte\n"col_server"[/equipment]", -1, OI[id][oEquipPoint][0], OI[id][oEquipPoint][1], OI[id][oEquipPoint][2], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[id][oEquipVW], OI[id][oEquipInt], -1, 20.0);
	EquipPointPickup[id] = acc_CreateDynamicPickup(1239, 1, OI[id][oEquipPoint][0], OI[id][oEquipPoint][1], OI[id][oEquipPoint][2], OI[id][oEquipVW], OI[id][oEquipInt], -1, 20.0);}
if(OI[id][oDrugField][0] != 0 && OI[id][oDrugField][1] != 0) {
	ac_DestroyDynamicPickup(OrgFieldPickup[id]);
	DestroyDynamic3DTextLabel(OrgField3d[id]);
	new stringfield[128];
	format(stringfield, sizeof(stringfield), ""col_white"Poljana za sadjenje droge\n"col_server"%s", OI[id][oName]);
	OrgField3d[id] = CreateDynamic3DTextLabel(stringfield, -1, OI[id][oDrugField][0], OI[id][oDrugField][1], OI[id][oDrugField][2], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1, 50.0);
	OrgFieldPickup[id] = acc_CreateDynamicPickup(1239, 1, OI[id][oDrugField][0], OI[id][oDrugField][1], OI[id][oDrugField][2], 0, 0, -1, 50.0);}
if(OI[id][oSafePos][0] != 0 && OI[id][oSafePos][1] != 0) {
	ac_DestroyDynamicPickup(OrgSafePickup[id]);
	DestroyDynamic3DTextLabel(OrgSafe3d[id]);
	new stringfield[128];
	format(stringfield, sizeof(stringfield), ""col_white"Sef za koriscenje /orgsef\n"col_server"%s", OI[id][oName]);
	OrgSafe3d[id] = CreateDynamic3DTextLabel(stringfield, -1, OI[id][oSafePos][0], OI[id][oSafePos][1], OI[id][oSafePos][2], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[id][oVw], OI[id][oInt], -1, 20.0);
	OrgSafePickup[id] = acc_CreateDynamicPickup(1239, 1, OI[id][oSafePos][0], OI[id][oSafePos][1], OI[id][oSafePos][2], OI[id][oVw], OI[id][oInt], -1, 20.0);}
return true;}
//------------------------------------------------------------------------------
stock Fusion_SetPlayerHealth(playerid, Float:Zivot) {

if(Zivot < 0.0) {
	Zivot = 0.0;}
if(Zivot > 100.0) {
	Zivot = 100.0;}

SetPlayerHealth(playerid, Zivot);
antiCheatCS[playerid][TrueHealth] = Zivot;
return true;}
stock DodajIgracuHP(playerid, value)
{
new Float:Health; GetPlayerHealth(playerid, Health); Fusion_SetPlayerHealth(playerid, Health+value);}
//------------------------------------------------------------------------------
stock Fusion_SetPlayerArmour(playerid, Float: armor) {
if(armor > 100.0) {
	armor = 100.0;}
SetPlayerArmour(playerid, armor);
antiCheatCS[playerid][TrueArmour] = armor;
return true;}
stock DodajIgracuArmour(playerid, value)
{
new Float:Armour; GetPlayerArmour(playerid, Armour); Fusion_SetPlayerArmour(playerid, Armour+value);}
//------------------------------------------------------------------------------
PocetniNovac(playerid, novac) {
new Strg[15];
if(novac > 0) {
	format(Strg, sizeof(Strg), "~g~$%d", novac);
	GameTextForPlayer(playerid, Strg, 3000, 1); }
else if(novac < 0) {
	format(Strg, sizeof(Strg), "~r~$%d", novac);
	GameTextForPlayer(playerid, Strg, 3000, 1); }
PlayerInfo[playerid][xNovac] = novac;
ResetujBarNovac(playerid);
UpdejtujBarNovac(playerid, PlayerInfo[playerid][xNovac]);
return true;}
//------------------------------------------------------------------------------
stock BusinessMoney(businessID, ammount, id) {

if(businessID == -1) return 1;
if(id != -1 && PlayerInfo[id][xOnlineSati] < 3) return 1;
if(ammount < 0 || ammount > 99999999) return 1;

if(BusinessInfo[businessID][bReket] == -1) {

	BusinessInfo[businessID][bMoney] += ammount;
	SaveBusiness(businessID);}
else if(BusinessInfo[businessID][bReket] != -1) {

	new dvajesposto = (ammount/100)*20;
	new osamdesetposto = (ammount/100)*80;

	BusinessInfo[businessID][bMoney] += osamdesetposto;
	SaveBusiness(businessID);

	OI[BusinessInfo[businessID][bReket]][oSafeMoney] += dvajesposto;
	SaveBusiness(BusinessInfo[businessID][bReket]);}
return 1;}
//------------------------------------------------------------------------------
stock BusinessRodaMoney(ammount, id) {
new businessID = -1;

for(new i = 1; i < MAX_Business; i++) {

	if(BusinessInfo[i][bType] == VRSTA_RODA) {

		businessID = i;
		break;
	}
}

if(businessID == -1) return 1;
BusinessMoney(businessID, ammount, id);
return 1;}
stock BusinessTrafikaMoney(playerid, ammount) {

new businessID = -1;

for(new i = 1; i < MAX_Business; i++) {

	if(IsPlayerInRangeOfPoint(playerid, 15.0, BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ]) && BusinessInfo[i][bType] == VRSTA_TRAFIKA) {

		businessID = i;
		break;
	}
}

if(businessID == -1) return 1;
BusinessMoney(businessID, ammount, playerid);
return 1;}
//------------------------------------------------------------------------------
stock BusinessTelekomMoney(ammount, id) {

new businessID = -1;

for(new i = 1; i < MAX_Business; i++) {

	if(BusinessInfo[i][bType] == VRSTA_TELEKOM) {

		businessID = i;
		break;
	}
}

if(businessID == -1) return 1;
BusinessMoney(businessID, ammount, id);
return 1;}
//------------------------------------------------------------------------------
stock BusinessOglasMoney(ammount, id) {

new businessID = -1;

for(new i = 1; i < MAX_Business; i++) {

	if(BusinessInfo[i][bType] == VRSTA_OGLAS) {

		businessID = i;
		break;
	}
}

if(businessID == -1) return 1;
BusinessMoney(businessID, ammount, id);
return 1;}
//------------------------------------------------------------------------------
stock BusinessElektranaMoney(ammount, id) {

new businessID = -1;

for(new i = 1; i < MAX_Business; i++) {

	if(BusinessInfo[i][bType] == VRSTA_ELEKTRANA) {

		businessID = i;
		break;
	}
}

if(businessID == -1) return 1;
BusinessMoney(businessID, ammount, id);
return 1;}
//------------------------------------------------------------------------------
stock BusinessLutrijaMoney(ammount, id) {

new businessID = -1;

for(new i = 1; i < MAX_Business; i++) {

	if(BusinessInfo[i][bType] == VRSTA_LUTRIJA) {

		businessID = i;
		break;
	}
}

if(businessID == -1) return 1;
BusinessMoney(businessID, ammount, id);
return 1;}
//------------------------------------------------------------------------------
stock BusinessKomunalijeMoney(ammount, id) {

new businessID = -1;

for(new i = 1; i < MAX_Business; i++) {

	if(BusinessInfo[i][bType] == VRSTA_KOMUNALIJE) {

		businessID = i;
		break;
	}
}

if(businessID == -1) return 1;
BusinessMoney(businessID, ammount, id);
return 1;}
//------------------------------------------------------------------------------
stock BusinessVodovodMoney(ammount, id) {

new businessID = -1;

for(new i = 1; i < MAX_Business; i++) {

	if(BusinessInfo[i][bType] == VRSTA_VODOVOD) {

		businessID = i;
		break;
	}
}

if(businessID == -1) return 1;
BusinessMoney(businessID, ammount, id);
return 1;}
//------------------------------------------------------------------------------
stock BusinessJobMoney(jobID, ammount) {
new businessID = -1;
for (new i = 1; i < MAX_Business; i++) {
	if(BusinessInfo[i][bType] == VRSTA_POSAO) {
		if(BusinessInfo[i][bJobID] == jobID) {
			businessID = i;
			break;
		}
	}
}
if(businessID == -1) return 1;
BusinessMoney(businessID, ammount, -1);
return 1;}

stock BusinessRibarMoney(playerid, ammount) {

new businessID = -1;
for(new i = 1; i < MAX_Business; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 100.0, BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ])) {
		if(BusinessInfo[i][bType] == VRSTA_RIBAR) {
			businessID = i;
			break;
		}
	}
}
if(businessID == -1) return 1;
BusinessMoney(businessID, ammount, -1);
return 1;}
stock BusinessRentMoney(playerid, ammount) {
new businessID = -1;
for(new i = 1; i < MAX_Business; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 100.0, BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ])) {
		if(BusinessInfo[i][bType] == VRSTA_RENT) {
			businessID = i;
			break;
		}
	}
}
if(businessID == -1) return 1;
BusinessMoney(businessID, ammount, -1);
return 1;}

stock BusinessPaySprayMoney(playerid, ammount) {

new businessID = -1;
for(new i = 1; i < MAX_Business; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 100.0, BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ])) {
		if(BusinessInfo[i][bType] == VRSTA_PAYSPRAY) {
			businessID = i;
			break;
		}
	}
}
if(businessID == -1) return 1;
BusinessMoney(businessID, ammount, -1);
return 1;}
stock BusinessPumpaMoney(playerid, ammount) {
new businessID = -1;
for(new i = 1; i < MAX_Business; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 100.0, BusinessInfo[i][bEnterX], BusinessInfo[i][bEnterY], BusinessInfo[i][bEnterZ])) {
		if(BusinessInfo[i][bType] == VRSTA_PUMPA) {
			businessID = i;
			break;
		}
	}
}
if(businessID == -1) return 1;
BusinessMoney(businessID, ammount, -1);
return 1;}
stock BusinessJavnaKucaMoney(playerid, ammount) {

new businessID = -1;

if(uFirmi[playerid] != -1) {

	if(BusinessInfo[uFirmi[playerid]][bType] == VRSTA_JAVNAK) {

		businessID = uFirmi[playerid];
	}
}

if(businessID == -1) return 1;
BusinessMoney(businessID, ammount, -1);
return 1;}
stock BusinessNeonMoney(playerid, ammount) {

new businessID = -1;

if(uFirmi[playerid] != -1) {

	if(BusinessInfo[uFirmi[playerid]][bType] == VRSTA_NEON) {

		businessID = uFirmi[playerid];
	}
}

if(businessID == -1) return 1;
BusinessMoney(businessID, ammount, -1);
return 1;}
//------------------------------------------------------------------------------

DajIgracuNovac(playerid, novac) {

Fusion_KillTimer(novactd[playerid]); 
PlayerInfo[playerid][xNovac] += novac;
ResetujBarNovac(playerid);
UpdejtujBarNovac(playerid, PlayerInfo[playerid][xNovac]);
PlusTD(playerid, novac);
novactd[playerid] = SetTimerEx("PlusSakrij", 5000, false, "d", playerid);
SetPVarInt(playerid, "novactdCalled", 1);
SavePlayer(playerid);
//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");
return PlayerInfo[playerid][xNovac];}

DajIgracuPlatu(playerid) {//dajplatu

Fusion_KillTimer(novactd[playerid]);
new plata = jobsInfos[(PlayerInfo[playerid][xPosao]-1)][jPlata];
new procenat = ((jobsInfos[(PlayerInfo[playerid][xPosao]-1)][jPlata]/100) * PlayerInfo[playerid][xPlataPoen]);
new poencic = PlayerInfo[playerid][xLevel] * 5;

new isplata = 0;

if(jobsInfos[(PlayerInfo[playerid][xPosao]-1)][jDuplaPlata] == true){
	isplata = plata + plata + procenat;
	PlayerInfo[playerid][xNovac] += isplata;
	if(poencic >= PlayerInfo[playerid][xPlataPoen]) {
		PlayerInfo[playerid][xPlataPoen]++;
		if(PlayerInfo[playerid][xVIPLevel] >= 5) PlayerInfo[playerid][xPlataPoen]++;
		SendJobMessage(playerid, "Zaradili ste %d$. Sada imate [%d/%d] platnih poena. (/platnipoenihelp)",isplata,PlayerInfo[playerid][xPlataPoen],poencic);
	}
	else {
		SendJobMessage(playerid, "Zaradili ste %d$. Imate maksimalan broj platnih poena za vas level [%d/%d]. (/platnipoenihelp)",isplata,PlayerInfo[playerid][xPlataPoen],poencic);
	}

	ResetujBarNovac(playerid);
	UpdejtujBarNovac(playerid, PlayerInfo[playerid][xNovac]);
	PlusTD(playerid, isplata);
	novactd[playerid] = SetTimerEx("PlusSakrij", 5000, false, "d", playerid);
	SetPVarInt(playerid, "novactdCalled", 1);
	//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");}
else if(jobsInfos[(PlayerInfo[playerid][xPosao]-1)][jDuplaPlata] == false){
	isplata = plata + procenat;
	PlayerInfo[playerid][xNovac] += isplata;
	if(poencic >= PlayerInfo[playerid][xPlataPoen]) {
		PlayerInfo[playerid][xPlataPoen]++;
		SendJobMessage(playerid, "Zaradili ste %d$. Sada imate [%d/%d] platnih poena. (/platnipoenihelp)",isplata,PlayerInfo[playerid][xPlataPoen],poencic);
	}
	else {
		SendJobMessage(playerid, "Zaradili ste %d$. Imate maksimalan broj platnih poena za vas level [%d/%d]. (/platnipoenihelp)",isplata,PlayerInfo[playerid][xPlataPoen],poencic);
	}

	ResetujBarNovac(playerid);
	UpdejtujBarNovac(playerid, PlayerInfo[playerid][xNovac]);
	PlusTD(playerid, isplata);
	novactd[playerid] = SetTimerEx("PlusSakrij", 5000, false, "d", playerid);
	SetPVarInt(playerid, "novactdCalled", 1);
	//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");}
SavePlayer(playerid);
return PlayerInfo[playerid][xNovac];}

SetIgracuNovac(playerid, novac) {
PlayerInfo[playerid][xNovac] = novac;
ResetujBarNovac(playerid);
UpdejtujBarNovac(playerid, PlayerInfo[playerid][xNovac]);
SavePlayer(playerid);
return PlayerInfo[playerid][xNovac];

}

forward PlusTD(playerid, kolicina);
public PlusTD(playerid, kolicina)
{
new pare[15];
if(kolicina > 0){
	PlayerTextDrawColor(playerid, Novcici[playerid], 16711830);
	format(pare, sizeof pare, "+$%d", kolicina);
	PlayerTextDrawSetString(playerid,Novcici[playerid], pare);
	PlayerTextDrawShow(playerid, Novcici[playerid]);
	}
	else
	{
	PlayerTextDrawColor(playerid, Novcici[playerid], -16777066);
		format(pare, sizeof pare, "-$%d", kolicina);
	PlayerTextDrawSetString(playerid,Novcici[playerid], pare);
	PlayerTextDrawShow(playerid, Novcici[playerid]);
	}
return 1;}
forward PlusSakrij(playerid, vrsta);
public PlusSakrij(playerid, vrsta)
{
PlayerTextDrawHide(playerid, Novcici[playerid]);
return 1;}
//------------------------------------------------------------------------------
stock ForbiddenWeap(playerid) {
new weap = GetPlayerWeapon(playerid);
if(weap == 35 || weap == 36 || weap == 37 || weap == 38 || weap == 39 || weap == 40 || weap == 42 || weap == 44 || weap == 45) {
	return true;}
return false;}
//------------------------------------------------------------------------------
stock Korisnici(playerid) {
new string[128];
format(string, sizeof(string), I_FILE, ImeIgraca(playerid));
return string;}
//------------------------------------------------------------------------------
stock Admini(playerid) {
new string[128];
format(string, sizeof(string), A_FILE, ImeIgraca(playerid));
return string;}
stock Inventory(playerid) {
new string[64];
format(string, sizeof(string), INV_FILE, ImeIgraca(playerid));
return string;}
stock KladIme(playerid) {
new string[64];
format(string, sizeof(string), KLAD_FILE, ImeIgraca(playerid));
return string;}
//------------------------------------------------------------------------------
IsValidRoleplayName(const name[]) {

if(!name[0] || strfind(name, "_") == -1)
	return 0;

else for (new i = 0, len = strlen(name); i != len; i ++) {
	if((i == 0) && (name[i] < 'A' || name[i] > 'Z'))
		return 0;

	else if((i != 0 && i < len  && name[i] == '_') && (name[i + 1] < 'A' || name[i + 1] > 'Z'))
		return 0;

	else if((name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z') && name[i] != '_' && name[i] != '.')
		return 0;}
return 1;}

//===============================[Kraj]=======================================
main()
{
print("[BAZA] Mod je ucitan i spreman za pokretanje.");
print("Developed with love by Vasic - www.vasic.dev");}
task SendMSG[250000]()
{
foreach(new i : Player) {
	if(PlayerInfo[i][xLevel] < 10) {
		if(PlayerInfo[i][xSPoruke] == 1) {
			new randMSG = random(sizeof(RandomMSG));
			SendClientMessage(i, -1, RandomMSG[randMSG]);
		}
	}
}
return 1;}
task BrziTajmer[150]()
{
foreach(new i : Player) {
//speed
	if(IsPlayerInAnyVehicle(i)&& GetPlayerState(i) == PLAYER_STATE_DRIVER) {
		new vehicle = GetPlayerVehicleID(i);
		if(!IsVehicleBajs(vehicle)) { //&& !IsVehicleBrod(vehicle)) {// && !IsVehicleLetelica(vehicle)) {

			new string[30];
			format(string, sizeof(string), "%d", GetSpeed(i));
			PlayerTextDrawSetString(i, Brzinomer[i][7], string);
		}
	}
	new vehicleid = GetPlayerVehicleID(i),
		plantid,
		Float:behindHarvester[3];

	if(vehicleid != INVALID_VEHICLE_ID) {

		if(PlayerInfo[i][xPosao] == POSAO_FARMER) {

			if(isAHarvester(vehicleid)) {

				plantid = getPlayerNearFarmerPlant(i);

				if(plantid != (-1) && !plantInfo[plantid][farmWheatCreated] && (0 <= farmerInfo[i][fifarmerPlantsPlanted] <= MAX_FARMERS_PLANTS_PLANTED)) {
					GetDynamicObjectPos(plantInfo[plantid][farmObject], behindHarvester[0], behindHarvester[1], behindHarvester[2]);
					DestroyDynamicObject(plantInfo[plantid][farmObject]);
					plantInfo[plantid][farmObject] = CreateDynamicObject(806, behindHarvester[0], behindHarvester[1], behindHarvester[2], 0.0, 0.0, 0.0);
					plantInfo[plantid][farmWheatCreated] = true;
					farmerInfo[i][fifarmerWheatCreated]++;
					if(farmerInfo[i][fifarmerWheatCreated] == MAX_FARMERS_PLANTS_PLANTED) {
						SendJobMessage(i, "Poznjao si sve useve, sada ih oberi i odnesi na prikazani marker.");
						ac_SetVehicleToRespawn(vehicleid);
						Fusion_SetPlayerCheckpoint(i, -1100.0110, -1142.8070, 129.2188, 3.0);
						CheckpointStatus[i] = 28;
					}
				}
			}
		}
	}

	if(GetNearestRadar(i) != -1) {

		if(IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER) {

			if(!IsVehicleBajs(vehicleid) && !alreadyPictured[i] && GetSpeed(i) > radarInfo[GetNearestRadar(i)][radarMaxSpeed]) {

				if(!PoliceDuty[i] && !AdminDuty[i]) {

					PlayerInfo[i][xRadarBodovi]++;

					alreadyPictured[i] = true;
					SetTimerEx("RemoveRadarPictured", 10000, false, "i", i);
					GameTextForPlayer(i, "~w~RADAR VAS JE USLIKAO", 2000, 5);
					SCM(i, -1, ""col_red"___________________________"col_white"RADAR"col_red"___________________________");
					SendClientMessageEx(i, -1, "Prekoracili ste maksimalnu brzinu od "col_red"%dkm/h.", radarInfo[GetNearestRadar(i)][radarMaxSpeed]);
					SendClientMessageEx(i, -1, "Radar vas je uslikao, kazna je "col_red"%d$.", radarInfo[GetNearestRadar(i)][radarPrice]);

					if(PlayerInfo[i][xRadarBodovi] == 3 ||
						PlayerInfo[i][xRadarBodovi] == 6 ||
						PlayerInfo[i][xRadarBodovi] == 9 ||
						PlayerInfo[i][xRadarBodovi] == 12 ||
						PlayerInfo[i][xRadarBodovi] == 15) {

						SendClientMessageEx(i, -1, "Oduzeto vam je jos "col_red"2000$"col_white" zbog "col_red"%d "col_white"neplacenih radar poena.", PlayerInfo[i][xRadarBodovi]);
						SendInfoMessage(i, "Redovno placajte Vase radar poene u policijskoj stanici kako ne bi izgubili vozacku!");
						DajIgracuNovac(i, -2000);
					}
					else if(PlayerInfo[i][xRadarBodovi] >= 18) {

						if(PlayerInfo[i][xVozacka] != 0) {

							PlayerInfo[i][xVozacka] = 0;
							SCM(i, -1, "Oduzeta vam je vozacka dozvola zbog "col_red"18 "col_white"neplacenih radar poena.");
						}
					}
					SCM(i, -1, ""col_red"_____________________________________________________________");
					RadarColor(i);
				}
			}
		}
	}

	new Float:Pos[3];
	GetPlayerPos(i, Pos[0], Pos[1], Pos[2]);
	if((Pos[2] >= -30.0000 && Pos[2] <= -20.5000) && IsPlayerInDynamicArea(i, bankSafe) && SruseniLaseri == false && VecjeUsao[i] == false && GetFactionType(i) != ORG_TIP_PD && WatchingTV{ i } == 0) {
		PostaviWanted(i, "Ulaz u sef banke", "Nepoznati", 3);
		VecjeUsao[i] = true;
	}
	else if(!IsPlayerInDynamicArea(i, bankSafe) && VecjeUsao[i] == true) {
		VecjeUsao[i] = false;
	}

	if(PosaoTDShowed[i] == true || StatsTDShowed[i] == true || BuyCarTDShowed[i] == true) {
		SelectTextDraw(i, FUSIONGAMING);
	}
}
return 1;}
//------------------------------------------------------------------------------

forward neaktivnostFirmi(b);
public neaktivnostFirmi(b) {


new fFile[50];
format(fFile, sizeof(fFile), F_FILE, b);

if(fexist(fFile)) {

	if(BusinessInfo[b][bOwned] == 1) {

		BusinessInfo[b][bNeaktivnost]++;
		BusinessInfo[b][bFacture]--;

		new time = gettime();
		if(BusinessInfo[b][bReket] != -1 && BusinessInfo[b][bReketTime] != 0 && (time - BusinessInfo[b][bReketTime]) >= 604800)
		{
			BusinessInfo[b][bReket] = -1;
			BusinessInfo[b][bReketTime] = 0;
		}

		if(BusinessInfo[b][bNeaktivnost] >= 300) {

			new string[256];

			format(string, sizeof(string), "FirmaID: %d | Prodana zbog neaktivnosti vlasnika %s ", b, BusinessInfo[b][bOwner]);
			LogSave("Ostalo/LogNeaktivnost.log", string);

			BusinessInfo[b][bOwned] = 0;
			BusinessInfo[b][bNeaktivnost] = 0;
			BusinessInfo[b][bFacture] = 100;
			strmid(BusinessInfo[b][bOwner], "Drzava", 0, strlen("Drzava"), 32);

		}

		if(BusinessInfo[b][bFacture] <= 0) {

			new string[256];

			format(string, sizeof(string), "FirmaID: %d | Prodana zbog nedostatka fakturi %s ", b, BusinessInfo[b][bOwner]);
			LogSave("Ostalo/LogFakture.log", string);

			BusinessInfo[b][bOwned] = 0;
			BusinessInfo[b][bNeaktivnost] = 0;
			BusinessInfo[b][bFacture] = 100;
			strmid(BusinessInfo[b][bOwner], "Drzava", 0, strlen("Drzava"), 32);

		}

		SaveBusiness(b);
		Business_Refresh(b);
	}
}

if(b+1 < MAX_Business) SetTimerEx("neaktivnostFirmi", 10, false, "d", b+1);
return 1;}

forward neaktivnostImovine(i);
public neaktivnostImovine(i) {


new ifile[50];
format(ifile, sizeof(ifile), IM_FILE, i);

if(fexist(ifile)) {

	if(II[i][iOwned] == 1) {

		II[i][iNeaktivnost]++;
		if(II[i][iNeaktivnost] >= 500) {

			new string[256];

			format(string, sizeof(string), "ImovinaID: %d | Prodana zbog neaktivnosti vlasnika %s.", i, II[i][iOwner]);
			LogSave("Ostalo/LogNeaktivnost.log", string);

			II[i][iOwned] = 0;
			II[i][iNeaktivnost] = 0;
			strmid(II[i][iOwner], "Drzava", 0, strlen("Drzava"), 32);
			PropertyRefresh(i);

		}
		SaveProperty(i);
		PropertyRefresh(i);
	}
}

if(i+1 < MAX_IMOVINA) SetTimerEx("neaktivnostImovine", 10, false, "d", i+1);
return 1;}

forward neaktivnostVozila(c);
public neaktivnostVozila(c) {


new vFile[50];
format(vFile, sizeof(vFile), V_FILE, c);

if(fexist(vFile)) {

	if(VehicleInfo[c][vUsage] == PRIVATNO_VOZILO && VehicleInfo[c][vOwned] == 1) {


		VehicleInfo[c][vRegVreme]--;
		if(VehicleInfo[c][vRegVreme] == 0) {

			VehicleInfo[c][vReg] = 0;
			VehicleInfo[c][vTeh] = 0;

		}
		if(VehicleInfo[c][vRegVreme] == -720) {

			Fusion_DestroyVehicle(VehicleInfo[c][vID]);

			VehicleInfo[c][vVirtualWorld] = 0;
			VehicleInfo[c][vInterior] = 0;

			VehicleInfo[c][vOwned] = 0;
			VehicleInfo[c][vNeaktivnost] = 0;
			VehicleInfo[c][vPrice] = -1;

			VehicleInfo[c][vLokacijaX] = -2112.0281;
			VehicleInfo[c][vLokacijaY] = 2729.6250;
			VehicleInfo[c][vLokacijaZ] = 166.0840;
			VehicleInfo[c][vLokacijaA] = 202.9713;

			VehicleInfo[c][vID] = Fusion_CreateVehicle(c, PRIVATNO_VOZILO, -1, -1, -1, VehicleInfo[c][vModel], VehicleInfo[c][vLokacijaX], VehicleInfo[c][vLokacijaY], VehicleInfo[c][vLokacijaZ]+1.0, VehicleInfo[c][vLokacijaA], VehicleInfo[c][vColor1], VehicleInfo[c][vColor2], 300000);
			ac_LinkVehicleToInterior(VehicleInfo[c][vID], VehicleInfo[c][vInterior]);
			SetVehicleVirtualWorld(VehicleInfo[c][vID], VehicleInfo[c][vVirtualWorld]);

			strmid(VehicleInfo[c][vOwner], "Drzava", 0, strlen("Drzava"), 32);

			TuneVehicle(c);

			ac_SetVehicleParamsEx(VehicleInfo[c][vID], 0, 0, 0, VehicleInfo[c][vLocked], 0, 0, 0);
			if(IsVehicleBajs(VehicleInfo[c][vID])) {
				ac_SetVehicleParamsEx(VehicleInfo[c][vID], 1, 0, 0, VehicleInfo[c][vLocked], 0, 0, 0);
			}

		}

		VehicleInfo[c][vNeaktivnost]++;
		if(VehicleInfo[c][vNeaktivnost] >= 300) {

			Fusion_DestroyVehicle(VehicleInfo[c][vID]);

			VehicleInfo[c][vVirtualWorld] = 0;
			VehicleInfo[c][vInterior] = 0;

			VehicleInfo[c][vOwned] = 0;
			VehicleInfo[c][vNeaktivnost] = 0;
			VehicleInfo[c][vPrice] = -1;

			VehicleInfo[c][vLokacijaX] = -2112.0281;
			VehicleInfo[c][vLokacijaY] = 2729.6250;
			VehicleInfo[c][vLokacijaZ] = 166.0840;
			VehicleInfo[c][vLokacijaA] = 202.9713;

			VehicleInfo[c][vID] = Fusion_CreateVehicle(c, PRIVATNO_VOZILO, -1, -1, -1, VehicleInfo[c][vModel], VehicleInfo[c][vLokacijaX], VehicleInfo[c][vLokacijaY], VehicleInfo[c][vLokacijaZ]+1.0, VehicleInfo[c][vLokacijaA], VehicleInfo[c][vColor1], VehicleInfo[c][vColor2], 300000);
			ac_LinkVehicleToInterior(VehicleInfo[c][vID], VehicleInfo[c][vInterior]);
			SetVehicleVirtualWorld(VehicleInfo[c][vID], VehicleInfo[c][vVirtualWorld]);

			strmid(VehicleInfo[c][vOwner], "Drzava", 0, strlen("Drzava"), 32);

			TuneVehicle(c);

			ac_SetVehicleParamsEx(VehicleInfo[c][vID], 0, 0, 0, VehicleInfo[c][vLocked], 0, 0, 0);
			if(IsVehicleBajs(VehicleInfo[c][vID])) {
				ac_SetVehicleParamsEx(VehicleInfo[c][vID], 1, 0, 0, VehicleInfo[c][vLocked], 0, 0, 0);
			}
		}
		SaveVehicle(c);
	}
}

if(c+1 < MAX_CARS) SetTimerEx("neaktivnostVozila", 10, false, "d", c+1);
return 1;}
task NeaktivnostDodavanje[3600000]()
{

SetTimerEx("neaktivnostFirmi", 10, false, "d", 0);

SetTimerEx("neaktivnostImovine", 15000, false, "d", 0);

SetTimerEx("neaktivnostVozila", 80000, false, "d", 0);

for(new b = 1; b < MAX_Business; b++) {

	new fFile[50];
	format(fFile, sizeof(fFile), F_FILE, b);

	if(fexist(fFile)) {

		if(BusinessInfo[b][bOwned] == 1) {

			BusinessInfo[b][bNeaktivnost]++;
			if(BusinessInfo[b][bNeaktivnost] >= 300) {

				new string[256];

				format(string, sizeof(string), "FirmaID: %d | Prodana zbog neaktivnosti vlasnika %s ", b, BusinessInfo[b][bOwner]);
				LogSave("Ostalo/LogNeaktivnost.log", string);

				BusinessInfo[b][bOwned] = 0;
				BusinessInfo[b][bNeaktivnost] = 0;
				strmid(BusinessInfo[b][bOwner], "Drzava", 0, strlen("Drzava"), 32);
				SaveBusiness(b);
				Business_Refresh(b);
			}
		}
	}
}
for(new i = 1; i < MAX_IMOVINA; i++) {

	new ifile[50];
	format(ifile, sizeof(ifile), IM_FILE, i);

	if(fexist(ifile)) {

		if(II[i][iOwned] == 1) {

			II[i][iNeaktivnost]++;
			if(II[i][iNeaktivnost] >= 300) {

				new string[256];

				format(string, sizeof(string), "ImovinaID: %d | Prodana zbog neaktivnosti vlasnika %s ", i, II[i][iOwner]);
				LogSave("Ostalo/LogNeaktivnost.log", string);

				II[i][iOwned] = 0;
				II[i][iNeaktivnost] = 0;
				strmid(II[i][iOwner], "Drzava", 0, strlen("Drzava"), 32);
				PropertyRefresh(i);
				SaveProperty(i);

			}
		}
	}
}
for(new c = 1; c < MAX_CARS; c++) {

	new vFile[50];
	format(vFile, sizeof(vFile), V_FILE, c);

	if(fexist(vFile)) {

		if(VehicleInfo[c][vUsage] == PRIVATNO_VOZILO && VehicleInfo[c][vOwned] == 1) {

			VehicleInfo[c][vNeaktivnost]++;
			if(VehicleInfo[c][vNeaktivnost] >= 300) {

				Fusion_DestroyVehicle(VehicleInfo[c][vID]);

				VehicleInfo[c][vVirtualWorld] = 0;
				VehicleInfo[c][vInterior] = 0;

				VehicleInfo[c][vOwned] = 0;
				VehicleInfo[c][vNeaktivnost] = 0;
				VehicleInfo[c][vPrice] = -1;

				VehicleInfo[c][vLokacijaX] = -2112.0281;
				VehicleInfo[c][vLokacijaY] = 2729.6250;
				VehicleInfo[c][vLokacijaZ] = 166.0840;
				VehicleInfo[c][vLokacijaA] = 202.9713;

				VehicleInfo[c][vID] = Fusion_CreateVehicle(c, PRIVATNO_VOZILO, -1, -1, -1, VehicleInfo[c][vModel], VehicleInfo[c][vLokacijaX], VehicleInfo[c][vLokacijaY], VehicleInfo[c][vLokacijaZ]+1.0, VehicleInfo[c][vLokacijaA], VehicleInfo[c][vColor1], VehicleInfo[c][vColor2], 300000);
				ac_LinkVehicleToInterior(VehicleInfo[c][vID], VehicleInfo[c][vInterior]);
				SetVehicleVirtualWorld(VehicleInfo[c][vID], VehicleInfo[c][vVirtualWorld]);

				TuneVehicle(c);

				ac_SetVehicleParamsEx(VehicleInfo[c][vID], 0, 0, 0, VehicleInfo[c][vLocked], 0, 0, 0);
				if(IsVehicleBajs(VehicleInfo[c][vID])) {
					ac_SetVehicleParamsEx(VehicleInfo[c][vID], 1, 0, 0, VehicleInfo[c][vLocked], 0, 0, 0);
				}

				SaveVehicle(c);
			}
		}
	}
}

return 1;}
//------------------------------------------------------------------------------
task Spectator[3030]()
{
foreach(new i : Player) {
	if(Spectate[i] > -1 && Spectate[i] < 500) {
		new targetid = Spectate[i];
		if(IsPlayerConnected(targetid)) {
			ac_TogglePlayerSpectating(i, 1);
			if(PlayerInfo[i][xAdmin] >= 1 || PlayerInfo[i][xHelper] >= 2) {
				new Float:health, specstring[180];
				GetPlayerHealth(targetid, health);
				if(IsPlayerInAnyVehicle(targetid)) {
					new Float:X, Float:Y, Float:Z;
					new carid = GetPlayerVehicleID(targetid);
					PlayerSpectateVehicle(i, carid);
					GetVehicleVelocity(carid, X, Y, Z);
					new Float:Speed = floatmul(floatsqroot(floatadd(floatadd(floatpower(X, 2), floatpower(Y, 2)),  floatpower(Z, 2))), 130.0);
					format(specstring, sizeof(specstring), "~y~ID: ~w~%d ~n~~y~Ime: ~w~%s ~n~~y~Novac: ~w~%d$ ~n~~y~Health: ~w~%1.f ~n~~y~Brzina: ~w~%i~n~~y~Oruzje: ~w~%s(%d m)", targetid, ImeIgraca(targetid), PlayerInfo[targetid][xNovac], health, floatround(Speed, floatround_floor), WeaponInfos[GetPlayerWeapon(targetid)][wName], GetPlayerAmmo(targetid));
					PlayerTextDrawSetString(i, SpecTextDraw[i], specstring);
				}
				else {
					PlayerSpectatePlayer(i, targetid);
					format(specstring, sizeof(specstring), "~y~ID: ~w~%d ~n~~y~Ime: ~w~%s ~n~~y~Novac: ~w~%d$ ~n~~y~Health: ~w~%1.f~n~~y~Oruzje: ~w~%s(%d m)", targetid, ImeIgraca(targetid), PlayerInfo[targetid][xNovac], health, WeaponInfos[GetPlayerWeapon(targetid)][wName], GetPlayerAmmo(targetid));
					PlayerTextDrawSetString(i, SpecTextDraw[i], specstring);
				}
				ac_SetPlayerInterior(i, GetPlayerInterior(targetid));
				SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(targetid));
			}
		}
	}
}
return 1;}
//------------------------------------------------------------------------------
forward StopSearchNadji(playerid);
public StopSearchNadji(playerid) {
SearchNadji[playerid] = IPI;
return true;}
//------------------------------------------------------------------------------

forward Fusion_SetSpawnInfo(playerid);
public Fusion_SetSpawnInfo(playerid) {
new rand;
TeleportNexAc[playerid] = true;
if(playerid % 2 == 0) {
	rand = random(sizeof(RandomLSSpawn1));
	antiCheatCS[playerid][TeleportPos][0] = RandomLSSpawn1[rand][0];
	antiCheatCS[playerid][TeleportPos][1] = RandomLSSpawn1[rand][1];
	antiCheatCS[playerid][TeleportPos][2] = RandomLSSpawn1[rand][2];
	SetSpawnInfo(playerid, 0, PlayerInfo[playerid][xSkin], RandomLSSpawn1[rand][0], RandomLSSpawn1[rand][1], RandomLSSpawn1[rand][2], 360.00, 0, 0, 0, 0, 0, 0);}
else {
	rand = random(sizeof(RandomLSSpawn2));
	antiCheatCS[playerid][TeleportPos][0] = RandomLSSpawn2[rand][0];
	antiCheatCS[playerid][TeleportPos][1] = RandomLSSpawn2[rand][1];
	antiCheatCS[playerid][TeleportPos][2] = RandomLSSpawn2[rand][2];
	SetSpawnInfo(playerid, 0, PlayerInfo[playerid][xSkin], RandomLSSpawn2[rand][0], RandomLSSpawn2[rand][1], RandomLSSpawn2[rand][2], 360.00, 0, 0, 0, 0, 0, 0);}
antiCheatCS[playerid][TeleportCheck] = 4;
return true;}

//------------------------------------------------------------------------------
public UlazIzlaz(playerid) {
antiCheatCS[playerid][TeleportCheck] = 4;
TeleportNexAc[playerid] = true;
for(new i= 1; i < MAX_ORG; i++) {

	if(IsPlayerInRangeOfPoint(playerid, 2.0, OI[i][oPozExtX], OI[i][oPozExtY], OI[i][oPozExtZ])) {

		if(OI[i][oTip] == ORG_TIP_PD || OI[i][oTip] == ORG_TIP_CNN || OI[i][oTip] == ORG_TIP_MD || OI[i][oTip] == ORG_TIP_TAXI) {

			FadeFromBlack(playerid);
			AntiSK(playerid);
			ac_SetPlayerPos(playerid, OI[i][oPozIntX], OI[i][oPozIntY], OI[i][oPozIntZ]);
			GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
			SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, false);
			ac_SetPlayerInterior(playerid, OI[i][oInt]);
			SetPlayerVirtualWorld(playerid, OI[i][oVw]);
			inOrgInt[playerid] = i;
		}
		else {

			if(PlayerInfo[playerid][xClan] == i || PlayerInfo[playerid][xAdmin] >= 6) {

				FadeFromBlack(playerid);
				AntiSK(playerid);
				ac_SetPlayerPos(playerid, OI[i][oPozIntX], OI[i][oPozIntY], OI[i][oPozIntZ]);
				GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
				SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, false);
				ac_SetPlayerInterior(playerid, OI[i][oInt]);
				SetPlayerVirtualWorld(playerid, OI[i][oVw]);
				inOrgInt[playerid] = i;
			}
			else return GameTextForPlayer(playerid, "~r~Zakljucano", 5000, 6);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, OI[i][oPozIntX], OI[i][oPozIntY], OI[i][oPozIntZ]) && GetPlayerVirtualWorld(playerid) == OI[i][oVw]) {

		FadeFromBlack(playerid);
		AntiSK(playerid);
		ac_SetPlayerPos(playerid, OI[i][oPozExtX], OI[i][oPozExtY], OI[i][oPozExtZ]);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 0);
		ac_SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		inOrgInt[playerid] = -1;
	}
}
for(new i = 1; i < MAX_ORG; i++) {
	for(new id = 0; id < OI[i][oMaxPort]; id++) {
		if(PlayerInfo[playerid][xClan] == i) {
			if(IsPlayerInRangeOfPoint(playerid, 2.0, PortOP[i][id][Pos1][0], PortOP[i][id][Pos1][1], PortOP[i][id][Pos1][2]) && GetPlayerVirtualWorld(playerid) == PortOP[i][id][VW][0] && GetPlayerInterior(playerid) == PortOP[i][id][Int][0]) {
				ac_SetPlayerPos(playerid, PortOP[i][id][Pos2][0], PortOP[i][id][Pos2][1], PortOP[i][id][Pos2][2]);
				AntiSK(playerid);
				GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
				SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, false);
				ac_SetPlayerInterior(playerid, PortOP[i][id][Int][1]);
				SetPlayerVirtualWorld(playerid, PortOP[i][id][VW][1]);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.0, PortOP[i][id][Pos2][0], PortOP[i][id][Pos2][1], PortOP[i][id][Pos2][2]) && GetPlayerVirtualWorld(playerid) == PortOP[i][id][VW][1] && GetPlayerInterior(playerid) == PortOP[i][id][Int][1]) {
				ac_SetPlayerPos(playerid, PortOP[i][id][Pos1][0], PortOP[i][id][Pos1][1], PortOP[i][id][Pos1][2]);
				AntiSK(playerid);
				GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
				SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, false);
				ac_SetPlayerInterior(playerid, PortOP[i][id][Int][0]);
				SetPlayerVirtualWorld(playerid, PortOP[i][id][VW][0]);
			}
		}
	}
}
for(new i= 1; i < MAX_IMOVINA; i++) {

	if(IsPlayerInRangeOfPoint(playerid, 2.0, II[i][iEnter][0], II[i][iEnter][1], II[i][iEnter][2])) {
		if(PlayerInfo[playerid][xWanted] > 0) return SendErrorMessage(playerid, "Ne mozete ulaziti u ovaj tip enterijera, imate wanted.");
		if(II[i][iLocked] == 0) {

			FadeFromBlack(playerid);
			AntiSK(playerid);
			ac_SetPlayerPos(playerid, II[i][iExit][0], II[i][iExit][1], II[i][iExit][2]);
			GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
			SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, false);
			ac_SetPlayerInterior(playerid, II[i][iInterior]);
			SetPlayerVirtualWorld(playerid, II[i][iVW]);
			inProperty[playerid] = i;
		}
		else return GameTextForPlayer(playerid, "~r~Zakljucano", 5000, 6);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, II[i][iExit][0], II[i][iExit][1], II[i][iExit][2]) && GetPlayerVirtualWorld(playerid) == II[i][iVW]) {

		FadeFromBlack(playerid);
		AntiSK(playerid);
		ac_SetPlayerPos(playerid, II[i][iEnter][0], II[i][iEnter][1], II[i][iEnter][2]);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 0);
		ac_SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		inProperty[playerid] = -1;
	}
}
for(new i = 1; i < MAX_HOTELS; i++) {

	if(IsPlayerInRangeOfPoint(playerid, 2.0, hotelInfo[i][hEnter][0], hotelInfo[i][hEnter][1], hotelInfo[i][hEnter][2])) {

		if(hotelInfo[i][hLocked] == 0) {

			FadeFromBlack(playerid);
			AntiSK(playerid);
			ac_SetPlayerPos(playerid, hotelInfo[i][hExit][0], hotelInfo[i][hExit][1], hotelInfo[i][hExit][2]);
			GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
			SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, false);
			ac_SetPlayerInterior(playerid, hotelInfo[i][hInterior]);
			SetPlayerVirtualWorld(playerid, hotelInfo[i][hVW]);
			inHotel[playerid] = i;
		}
		else return GameTextForPlayer(playerid, "~r~Zakljucano", 5000, 6);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, hotelInfo[i][hExit][0], hotelInfo[i][hExit][1], hotelInfo[i][hExit][2]) && GetPlayerVirtualWorld(playerid) == hotelInfo[i][hVW]) {

		FadeFromBlack(playerid);
		AntiSK(playerid);
		ac_SetPlayerPos(playerid, hotelInfo[i][hEnter][0], hotelInfo[i][hEnter][1], hotelInfo[i][hEnter][2]);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 0);
		ac_SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		inHotel[playerid] = -1;
	}
}
for(new f = 1; f < MAX_Business; f++) {

	if(IsPlayerInRangeOfPoint(playerid, 1.0, BusinessInfo[f][bEnterX], BusinessInfo[f][bEnterY], BusinessInfo[f][bEnterZ])) {

		if(BusinessInfo[f][bLocked] == 1) return SendErrorMessage(playerid, "Ova firma je zakljucana!");
		if(BusinessInfo[f][bType] == VRSTA_JFIRMA) return SendErrorMessage(playerid, "Ova firma nema ulaz.");
		else if(BusinessInfo[f][bType] == VRSTA_TRAFIKA) return SendErrorMessage(playerid, "Ova firma nema ulaz.");
		else if(BusinessInfo[f][bType] == VRSTA_POSAO) return SendErrorMessage(playerid, "Ova firma nema ulaz.");
		else if(BusinessInfo[f][bType] == VRSTA_RIBAR) return SendErrorMessage(playerid, "Ova firma nema ulaz.");
		else if(BusinessInfo[f][bType] == VRSTA_RENT) return SendErrorMessage(playerid, "Ova firma nema ulaz.");
		else if(BusinessInfo[f][bType] == VRSTA_OGLAS) return SendErrorMessage(playerid, "Ova firma nema ulaz.");
		else if(BusinessInfo[f][bType] == VRSTA_TELEKOM) return SendErrorMessage(playerid, "Ova firma nema ulaz.");
		else if(BusinessInfo[f][bType] == VRSTA_PAYSPRAY) return SendErrorMessage(playerid, "Ova firma nema ulaz.");
		else if(BusinessInfo[f][bType] == VRSTA_KOMUNALIJE) return SendErrorMessage(playerid, "Ova firma nema ulaz.");
		else if(BusinessInfo[f][bType] == VRSTA_VODOVOD) return SendErrorMessage(playerid, "Ova firma nema ulaz.");
		else if(BusinessInfo[f][bType] == VRSTA_ELEKTRANA) return SendErrorMessage(playerid, "Ova firma nema ulaz.");
		else if(BusinessInfo[f][bType] == VRSTA_LUTRIJA) return SendErrorMessage(playerid, "Ova firma nema ulaz.");
		else if(BusinessInfo[f][bType] == VRSTA_NEON) return SendErrorMessage(playerid, "Ova firma nema ulaz.");

		FadeFromBlack(playerid);
		AntiSK(playerid);
		ac_SetPlayerPos(playerid, BusinessInfo[f][bExitX], BusinessInfo[f][bExitY], BusinessInfo[f][bExitZ]);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, false);
		ac_SetPlayerInterior(playerid, BusinessInfo[f][bInInt]);
		SetPlayerVirtualWorld(playerid, BusinessInfo[f][bInVW]);
		uFirmi[playerid] = f;
		if(BusinessInfo[f][bType] == VRSTA_MARKET) {
			if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) return SendErrorMessage(playerid, "Ne mozete uci sa objektom u desnoj ruci.");
			SendUsageMessage(playerid, "/ubaci [opcija] | /izbaci [opcija]");
			SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 19592, 6, 0.08, -0.12, -0.07, -54.0, -95.0, 15.0, 1.00, 1.00, 1.00);
			new varstring[64];
			format(varstring, sizeof(varstring), "%s desnom rukom uzima korpu za kupovinu.", ImeIgraca(playerid));
			PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		}
		SetPlayerTime(playerid, 12, 0);
		if(BusinessInfo[f][bType] == VRSTA_JAVNAK) {
			SetPlayerTime(playerid, 20, 0);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, BusinessInfo[f][bExitX], BusinessInfo[f][bExitY], BusinessInfo[f][bExitZ]) && GetPlayerVirtualWorld(playerid) == BusinessInfo[f][bInVW]) {

		if(BusinessInfo[f][bType] == VRSTA_MARKET) {
			UzeoIzMarketa[playerid][0] = 0;
			UzeoIzMarketa[playerid][1] = 0;
			UzeoIzMarketa[playerid][2] = 0;
			UzeoIzMarketa[playerid][3] = 0;
			UzeoIzMarketa[playerid][4] = 0;
			UzeoIzMarketa[playerid][5] = 0;
			UzeoIzMarketa[playerid][6] = 0;
			UzeoIzMarketa[playerid][7] = 0;
			UzeoIzMarketa[playerid][8] = 0;
			UzeoIzMarketa[playerid][9] = 0;
			UzeoIzMarketa[playerid][10] = 0;
			UkupnaCena[playerid] = 0;
			RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
		}

		FadeFromBlack(playerid);
		AntiSK(playerid);
		ac_SetPlayerPos(playerid, BusinessInfo[f][bEnterX], BusinessInfo[f][bEnterY], BusinessInfo[f][bEnterZ]);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, false);
		ac_SetPlayerInterior(playerid, BusinessInfo[f][bInt]);
		SetPlayerVirtualWorld(playerid, BusinessInfo[f][bVW]);
		uFirmi[playerid] = -1;
		SetPlayerTime(playerid, ServerInfo[VremeInGame], 0);
	}
}
for(new i; i < MAX_INTERIJERA; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 1.5, IntInfo[i][iXUlaz], IntInfo[i][iYUlaz], IntInfo[i][iZUlaz]) && GetPlayerVirtualWorld(playerid) == IntInfo[i][iVwIDSpolja] && !IsPlayerInAnyVehicle(playerid)) {
		if(PlayerInfo[playerid][xWanted] > 0) return SendErrorMessage(playerid, "Ne mozete ulaziti u ovaj tip enterijera, imate wanted.");
		//if(gettime() < CommandTime[playerid]) 	return SendErrorMessage(playerid, "U enterijer mozete ulaziti/izlaziti na svakih 5 sekundi!");
		FadeFromBlack(playerid);
		AntiSK(playerid);
		ac_SetPlayerInterior(playerid, IntInfo[i][iIntID]);
		SetPlayerVirtualWorld(playerid, IntInfo[i][iVwID]);
		ac_SetPlayerPos(playerid, IntInfo[i][iXIzlaz], IntInfo[i][iYIzlaz], IntInfo[i][iZIzlaz]);
		SetPlayerFacingAngle(playerid, IntInfo[i][iAIzlaz]);
		SetCameraBehindPlayer(playerid);
		SetTimerEx("SlobodnoSada", 3000, false, "i", playerid);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		TogglePlayerControllable(playerid, false);
		SetPlayerTime(playerid, 12, 0);
		uInterijeru[playerid] = i;
		CommandTime[playerid] = gettime() + 5;

	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.5, IntInfo[i][iXIzlaz], IntInfo[i][iYIzlaz], IntInfo[i][iZIzlaz]) && GetPlayerVirtualWorld(playerid) == IntInfo[i][iVwID]) {
		FadeFromBlack(playerid);
		AntiSK(playerid);
	  
		SetTimerEx("SlobodnoSada", 3000, false, "i", playerid);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		TogglePlayerControllable(playerid, false);
		SetPlayerVirtualWorld(playerid, IntInfo[i][iVwIDSpolja]);
		ac_SetPlayerInterior(playerid, IntInfo[i][iIntIDSpolja]);
		ac_SetPlayerPos(playerid, IntInfo[i][iXUlaz], IntInfo[i][iYUlaz], IntInfo[i][iZUlaz]);
		SetPlayerFacingAngle(playerid, IntInfo[i][iAUlaz]);
		SetCameraBehindPlayer(playerid);
		SetPlayerTime(playerid, ServerInfo[VremeInGame], 0);
		uInterijeru[playerid] = -1;
	}
	
}
if(IsPlayerInRangeOfPoint(playerid, 1.5, 1924.3861, -1524.3082, 2429.4849)) { // CNN Studio

	FadeFromBlack(playerid);
	AntiSK(playerid);
	SetCameraBehindPlayer(playerid);
	SetTimerEx("SlobodnoSada", 3000, false, "i", playerid);
	GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
	TogglePlayerControllable(playerid, false);
	ac_SetPlayerInterior(playerid, 3);
	SetPlayerVirtualWorld(playerid, 3);
	ac_SetPlayerPos(playerid, 1917.1879, -1533.8624, 2429.4897);}
if(IsPlayerInRangeOfPoint(playerid, 1.5, 1524.6689, -1726.9661, -60.5881)) { // PD KROV

		if(GetFactionType(playerid) == ORG_TIP_PD) {
		AntiSK(playerid);
		SetCameraBehindPlayer(playerid);
		SetTimerEx("SlobodnoSada", 3000, false, "i", playerid);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		TogglePlayerControllable(playerid, false);
		ac_SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		ac_SetPlayerPos(playerid, 1564.8328, -1666.9375, 28.3956);
	}
}
if(IsPlayerInRangeOfPoint(playerid, 1.5, 1879.1925,2339.4995,10.9799)) { // Heki helipad
	SetCameraBehindPlayer(playerid);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	ac_SetPlayerPos(playerid, 1871.5922,2332.8225,14.7813);}
if(IsPlayerInRangeOfPoint(playerid, 1.5, 1871.5922,2332.8225,14.7813)) { // Heki helipad
	SetCameraBehindPlayer(playerid);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	ac_SetPlayerPos(playerid, 1879.1925,2339.4995,10.9799);}
if(IsPlayerInRangeOfPoint(playerid, 1.5, 1533.1113, -1736.2327, -64.0829)) { // PD GARAZA
	if(GetFactionType(playerid) == ORG_TIP_PD) {
		AntiSK(playerid);
		SetCameraBehindPlayer(playerid);
		SetTimerEx("SlobodnoSada", 3000, false, "i", playerid);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		TogglePlayerControllable(playerid, false);
		ac_SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		ac_SetPlayerPos(playerid, 1524.4833, -1677.7874, 6.2188);
	}
}
if(IsPlayerInRangeOfPoint(playerid, 1.5, 1564.8328, -1666.9375, 28.3956)) { //// PD KROV
	if(GetFactionType(playerid) == ORG_TIP_PD) {
		AntiSK(playerid);
		SetCameraBehindPlayer(playerid);
		SetTimerEx("SlobodnoSada", 3000, false, "i", playerid);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		TogglePlayerControllable(playerid, false);
		ac_SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, 3);
		ac_SetPlayerPos(playerid, 1524.6689, -1726.9661, -60.5881);
	}
}
if(IsPlayerInRangeOfPoint(playerid, 1.5, 1524.4833, -1677.7874, 6.2188)) { // PD GARAZA
	if(GetFactionType(playerid) == ORG_TIP_PD) {
		AntiSK(playerid);
		SetCameraBehindPlayer(playerid);
		SetTimerEx("SlobodnoSada", 3000, false, "i", playerid);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		TogglePlayerControllable(playerid, false);
		ac_SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, 3);
		ac_SetPlayerPos(playerid, 1533.1113, -1736.2327, -64.0829);
	}
}

if(IsPlayerInRangeOfPoint(playerid, 3.0, 1700.5277, -1667.7759, 20.2188)) { // AFK Zona

	SetCameraBehindPlayer(playerid);
	AntiSK(playerid); 
	SetTimerEx("SlobodnoSada", 3000, false, "i", playerid);
	GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
	TogglePlayerControllable(playerid, false);
	SetPlayerVirtualWorld(playerid, 0);
	ac_SetPlayerInterior(playerid, 0);
	ac_SetPlayerPos(playerid, 1471.4055, -1178.0507, 23.9228);}

if(IsPlayerInRangeOfPoint(playerid, 3.0, 1471.4055, -1178.0507, 23.9228)) { // AFK Zona
	if(PlayerInfo[playerid][xWanted] == 0) {
		antiCheatCS[playerid][TeleportCheck] = 4;
		AntiSK(playerid);
		new rand = random(sizeof(RandomAFKZone));
		ac_SetPlayerPos(playerid, RandomAFKZone[rand][0], RandomAFKZone[rand][1], RandomAFKZone[rand][2]);
		SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		TogglePlayerControllable(playerid, false);
		SetCameraBehindPlayer(playerid);
		ac_SetPlayerInterior(playerid, 18);
		SetPlayerVirtualWorld(playerid, 0);
	}
	else return SendErrorMessage(playerid, "Ne mozete sa wantedom u AFK zonu.");}

if(IsPlayerInRangeOfPoint(playerid, 1.5, 1917.1879, -1533.8624, 2429.4897)) { // CNN Studio
	AntiSK(playerid);
	SetCameraBehindPlayer(playerid);
	SetTimerEx("SlobodnoSada", 3000, false, "i", playerid);
	GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
	TogglePlayerControllable(playerid, false);
	ac_SetPlayerInterior(playerid, 3);
	SetPlayerVirtualWorld(playerid, 3);
	ac_SetPlayerPos(playerid, 1924.3861, -1524.3082, 2429.4849);}
if(IsPlayerInRangeOfPoint(playerid, 2.0, 1673.9718, 1967.7209, 10.8203)) { // Promoter
	if(PlayerInfo[playerid][xPromoter] >= 1 || PlayerInfo[playerid][xHelper] >= 1 || PlayerInfo[playerid][xAdmin] >= 1) {
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
		ac_SetPlayerInterior(playerid, 12);
		ac_SetPlayerPos(playerid, 2324.4663, -1149.5472, 1050.7101);
	}
	else return GameTextForPlayer(playerid, "~r~Zakljucano", 5000, 6);}
if(IsPlayerInRangeOfPoint(playerid, 2.0, 2324.4663, -1149.5472, 1050.7101)) { // Promoter
	if(PlayerInfo[playerid][xPromoter] >= 1 || PlayerInfo[playerid][xHelper] >= 1 || PlayerInfo[playerid][xAdmin] >= 1) {
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
		ac_SetPlayerInterior(playerid, 0);
		ac_SetPlayerPos(playerid, 1673.9718, 1967.7209, 10.8203);
	}
	else return GameTextForPlayer(playerid, "~r~Zakljucano", 5000, 6);}


if(IsPlayerInRangeOfPoint(playerid, 2.0, 602.1806, 867.9139, -42.9609)) { // Rudnik
	if(PlayerInfo[playerid][xPosao] == POSAO_RUDAR || PlayerInfo[playerid][xHelper] >= 1 || PlayerInfo[playerid][xAdmin] >= 1 || GetFactionType(playerid) == ORG_TIP_PD) {
		SetPlayerVirtualWorld(playerid, 1);
		ac_SetPlayerInterior(playerid, 1);
		ac_SetPlayerPos(playerid, 611.9000, 884.3919, 807.5499-900);
		SetCameraBehindPlayer(playerid);
		//SendErrorMessage(playerid, "Trenutno nije u funkciji");
	}
	else return GameTextForPlayer(playerid, "~r~Zakljucano", 5000, 6);}
if(IsPlayerInRangeOfPoint(playerid, 2.0, 611.9000, 884.3919, 807.5499-900)) { // Rudnik
	if(PlayerInfo[playerid][xPosao] == POSAO_RUDAR || PlayerInfo[playerid][xHelper] >= 1 || PlayerInfo[playerid][xAdmin] >= 1 || GetFactionType(playerid) == ORG_TIP_PD) {
		SetPlayerVirtualWorld(playerid, 0);
		ac_SetPlayerInterior(playerid, 0);
		ac_SetPlayerPos(playerid, 602.1806, 867.9139, -42.9609);
		SetCameraBehindPlayer(playerid);
		//SendErrorMessage(playerid, "Trenutno nije u funkciji");
	}
	else return GameTextForPlayer(playerid, "~r~Zakljucano", 5000, 6);}

if(IsPlayerInRangeOfPoint(playerid, 1.5, 1462.6173, -1005.6067, 57.5132)) { // tajni ulaz PD/SAJ

		if(GetFactionType(playerid) == ORG_TIP_PD) {
		AntiSK(playerid);
		SetCameraBehindPlayer(playerid);
		SetTimerEx("SlobodnoSada", 1000, false, "i", playerid);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		TogglePlayerControllable(playerid, false);
		ac_SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 0);
		ac_SetPlayerPos(playerid, -150.5422, 925.9362, -19.7741);
	}
}
return true;}
//------------------------------------------------------------------------------
task RandomPoruke[20000]()
{
TextDrawSetString(FG_InGame[19] , RandomSPoruke[random(sizeof(RandomSPoruke))]);
return true;}
//------------------------------------------------------------------------------
public split(const strsrc[], strdest[][], delimiter)
{
new i, li;
new aNum;
new len;
while(i <= strlen(strsrc)){
	if(strsrc[i]==delimiter || i==strlen(strsrc)){
		len = strmid(strdest[aNum], strsrc, li, i, 128);
		strdest[aNum][len] = 0;
		li = i+1;
		aNum++;
	}
	i++;}
return 1;}
//------------------------------------------------------------------------------
public ImmobCountForPlayer(playerid)
{
if(GetPVarInt(playerid, "immobsecounds"))
{
	new immobstring[34];
	format(immobstring,sizeof(immobstring),"~w~Preostalo sekundi: ~g~%d", GetPVarInt(playerid, "immobsecounds")-1);
	GameTextForPlayer(playerid, immobstring, 1100, 4);
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);

	PovecajPVarInt(playerid, "immobsecounds", -1);

	if(!GetPVarInt(playerid, "immobsecounds"))
	{
		Fusion_KillTimer(GetPVarInt(playerid, "immobcounttimer"));
	}
}
}

public BreakLockCountForPlayer(playerid)
{
new Float:X, Float:Y, Float:Z;
GetVehiclePos(GetPVarInt(playerid, "BreakingVehicle"), X, Y, Z);
if(!IsPlayerInRangeOfPoint(playerid, 3.0, X, Y, Z))
{
	TogglePlayerControllable(playerid, 1);

	Fusion_KillTimer(GetPVarInt(playerid, "BreakLockTimer"));
	Fusion_KillTimer(GetPVarInt(playerid, "breakcounttimer"));
	SetPVarInt(playerid, "BreakLockTimerCalled", 0);
	SetPVarInt(playerid, "BreakingLock", 0);

	SendErrorMessage(playerid, "Vozilo u koje pokusavate provaliti nije blizu vas.");}
if(GetPVarInt(playerid, "breaksecounds"))
{
	new breakstring[34];
	format(breakstring,sizeof(breakstring),"~w~Preostalo sekundi: ~g~%d", GetPVarInt(playerid, "breaksecounds")-1);
	GameTextForPlayer(playerid, breakstring, 1100, 4);
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);

	PovecajPVarInt(playerid, "breaksecounds", -1);

	if(!GetPVarInt(playerid, "breaksecounds"))
	{
		Fusion_KillTimer(GetPVarInt(playerid, "breakcounttimer"));
	}
}
}
public VehicleBreakLock(playerid, vehicleid, autoid) {
if(IsPlayerConnected(playerid))
{
	SetPVarInt(playerid, "BreakingLock", 0);
	GameTextForPlayer(playerid, "~w~Vozilo ~g~otkljucano", 5000, 6);
	PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	VehicleInfo[autoid][vLocked] = 0;
	TogglePlayerControllable(playerid, true);
	UnLockCar(vehicleid);}
}
//------------------------------------------------------------------------------
public TrashLimitOff(playerid) {
if(GetNearestContainer(playerid) == -1) return SendErrorMessage(playerid, "Otisao si od kontejnera i nisi nasao nista.");
new rands = random(4)+1, varstring[96];
switch(rands) {
	case 1: {
		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "** Alat za obijanje je nadjen u kontejneru (( Maska_%d ))", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "** Alat za obijanje je nadjen u kontejneru (( %s ))", ImeIgraca(playerid));
		PlayerInfo[playerid][xToolkit] = true;
	}
	case 2: {
		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "** Upaljac je nadjen u kontejneru (( Maska_%d ))", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "** Upaljac je nadjen u kontejneru (( %s ))", ImeIgraca(playerid));
		PlayerInfo[playerid][xUpaljac] = 1;
	}
	case 3: {
		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "** Spric sa iglom je nadjen u kontejneru (( Maska_%d ))", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "** Spric sa iglom je nadjen u kontejneru (( %s ))", ImeIgraca(playerid));
		PlayerInfo[playerid][xInekcija] = true;
	}
	case 4: {
		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "** Uze je nadjeno u kontejneru (( Maska_%d ))", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "** Uze je nadjeno u kontejneru (( %s ))", ImeIgraca(playerid));
		Uze[playerid] = true;
	}
	case 5: {
		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "** Sat je nadjen u kontejneru (( Maska_%d ))", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "** Sat je nadjen u kontejneru (( %s ))", ImeIgraca(playerid));
		PlayerInfo[playerid][xSat] = 19039;
	}
}
PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
TrashSearch[playerid] = 0;
VremeTDControl(playerid, false);
ClearAnimations(playerid);
TogglePlayerControllable(playerid, true);
return 1;}

public JediTimerOff(playerid) {
//  if(GetNearestBrzaHrana(playerid) == -1) return SendErrorMessage(playerid, "Ne smete se udaljavati od brze hrane dok jedete.");
JediSearch[playerid] = 0;
DodajIgracuHP(playerid, 50);
VremeTDControl(playerid, false);
ClearAnimations(playerid);
TogglePlayerControllable(playerid, true);
return 1;}

public NargilaTimerOff(playerid) {
//  if(GetNearestBrzaHrana(playerid) == -1) return SendErrorMessage(playerid, "Ne smete se udaljavati od brze hrane dok jedete.");
PusiNargilu[playerid] = 0;
NargilaLimit[playerid] = 10;
DodajIgracuHP(playerid, 10);
VremeTDControl(playerid, false);
ClearAnimations(playerid);
TogglePlayerControllable(playerid, true);
return 1;}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

public OnVehicleDamageStatusUpdate(vehicleid, playerid) {
static fc_tires, fc_lights;
GetVehicleDamageStatus(vehicleid, fc_lights, fc_tires, fc_lights, fc_tires);
if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
	if(fc_lights || fc_tires)
		return 1;

	new time = GetTickCount();
	switch(time - antiCheatCS[playerid][CPSTick]) {
		case 0 .. 500: {
			antiCheatCS[playerid][CPSCount] ++;
			if(antiCheatCS[playerid][CPSCount] >= 10) {
				ClearChat(playerid, 128);
				SendClientMessage(playerid, -1, " {af001d][ FG:RPG ] : {FFFFFF]Kikovani ste sa servera zbog koriscenja cheata. (Cleo Particle Hack)");
				SendErrorMessage(playerid, "Admini su obavesteni i ovaj pokusaj koriscenja cheata je zabelezen.");
				SendErrorMessage(playerid, "Ukoliko smatrate da je ovo greska, obratite se vlasniku sa screenshotom.");
				new varstring[128];
				format(varstring, sizeof(varstring), "~r~(AC) - ~w~%s je kikovan zbog sumnje na cheat - ~r~Cleo Particle Hack.", ImeIgraca(playerid));
				SendAltChatMessage(varstring);	
				SetTimerEx("KickIgraca", 1000, 0, "d", playerid);
				return 1;
			}
		}
		default: antiCheatCS[playerid][CPSCount] = 0;
	}
	antiCheatCS[playerid][CPSTick] = time;}
return 1;}

//------------------------------------------------------------------------------
public UpdatePlayerGps(playerid, fresh) {
new bool:arrived = false;
if(IsPlayerInRangeOfPoint(playerid, 20.0, PlayerGpsRadar[playerid][_pgrPos][0], PlayerGpsRadar[playerid][_pgrPos][1], PlayerGpsRadar[playerid][_pgrPos][2])) {
	arrived = true;
	if(IsValidDynamicMapIcon(PlayerGpsRadar[playerid][_pgrIconId])) {
		DestroyDynamicMapIcon(PlayerGpsRadar[playerid][_pgrIconId]);
	}

	PlayerGpsRadar[playerid][_pgrIconId] = -1;}

if(!arrived) {
	if(PlayerInfo[playerid][xGpsLevel] >= 2) {
		new Float:x1, Float:y1, Float:z1;
		GetPlayerPos(playerid, x1, y1, z1);

		new Float:x2 = PlayerGpsRadar[playerid][_pgrPos][0];
		new Float:y2 = PlayerGpsRadar[playerid][_pgrPos][1];
		new Float:z2 = PlayerGpsRadar[playerid][_pgrPos][2];

		new distanceString[64], Float:distance = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
		new zonen[32];

		GetZoneName(x2, y2, zonen, sizeof(zonen));
		format(distanceString, sizeof(distanceString), "Udaljenost: %.2f metara~n~%s", distance, zonen);
		PlayerTextDrawSetString(playerid, PlayerGpsRadarText[playerid], distanceString);

		if(fresh) {
			PlayerTextDrawShow(playerid, PlayerGpsRadarText[playerid]);
		}
	}
	if(PlayerInfo[playerid][xGpsLevel] >= 3) {
		if(IsPlayerInAnyVehicle(playerid)) {

			new Float:x2 = PlayerGpsRadar[playerid][_pgrPos][0];
			new Float:y2 = PlayerGpsRadar[playerid][_pgrPos][1];
			new Float:VPos[3], Float:Rotation;

			GetVehiclePos(GetPlayerVehicleID(playerid), VPos[0], VPos[1], VPos[2]);
			Rotation = PointAngle(playerid, VPos[0], VPos[1], x2, y2);
			AttachDynamicObjectToVehicle(PlayerGpsRadar[playerid][_pgrObject], GetPlayerVehicleID(playerid), 0.0, 0.0, 1.5, 0.0, 90.0, Rotation);
		}
	}
	SetTimerEx("UpdatePlayerGps", 100, false, "dd", playerid, 0);} else {
	PlayerTextDrawHide(playerid, PlayerGpsRadarText[playerid]);
	DestroyDynamicMapIcon(PlayerGpsRadar[playerid][_pgrIconId]);
	DestroyDynamicObject(PlayerGpsRadar[playerid][_pgrObject]);
	PlayerGpsRadar[playerid][_pgrIconId] = -1;
	PlayerGpsRadar[playerid][_pgrObject] = -1;}
}

public GetPlayerBusinessId(playerid, type) {
for (new i = 1; i < MAX_Business; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 50.0, BusinessInfo[i][bExitX], BusinessInfo[i][bExitY], BusinessInfo[i][bExitZ]) && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bInVW])
	{
		if(BusinessInfo[i][bType] == type)
		{
			return i;
		}
	}
}

return -1;}

//------------------------------------------------------------------------------
//public EventTimeR() {
task EventTimeR[1000]()
{
if(EventInfo[eID] != 0) {
	EventInfo[EventTime]--;
	switch(EventInfo[EventTime]) {
		case 0: {
			foreach(new i : Player) {
				if(PlayerCP[i] > 0) {
					SetPlayerRaceCheckpoint(i, 0, CheckPoint[EventInfo[eID]][PlayerCP[i]][CPX], CheckPoint[EventInfo[eID]][PlayerCP[i]][CPY], CheckPoint[EventInfo[eID]][PlayerCP[i]][CPZ], CheckPoint[EventInfo[eID]][PlayerCP[i]+1][CPX], CheckPoint[EventInfo[eID]][PlayerCP[i]+1][CPY], CheckPoint[EventInfo[eID]][PlayerCP[i]+1][CPZ], 7.0);
					TogglePlayerControllable(i, true);
					GameTextForPlayer(i ,"~g~GO GO GO!!!", 2000, 5);
				}
			}
		}
		case 1: {
			foreach(new i : Player) {
				if(PlayerCP[i] > 0) {
					GameTextForPlayer(i ,"~r~1", 999, 5);
				}
			}
		}
		case 2: {
			foreach(new i : Player) {
				if(PlayerCP[i] > 0) {
					GameTextForPlayer(i ,"~y~2", 999, 5);
				}
			}
		}
		case 3: {
			foreach(new i : Player) {
				if(PlayerCP[i] > 0) {
					GameTextForPlayer(i ,"~b~3", 999, 5);
				}
			}
		}
		case 8: {
			new varstring[128];
			format(varstring, sizeof(varstring), ""col_orange"%s Event | "col_white"Event pocinje za {A6A6A6]5 sekundi.", Event[EventInfo[eID]][Name]);
			SCMA(-1, varstring);
		}
		case 13: {
			new varstring[128];
			format(varstring, sizeof(varstring), ""col_orange"%s Event | "col_white"Imate {A6A6A6]10 "col_white"sekundi da se prijavite.", Event[EventInfo[eID]][Name]);
			SCMA(-1, varstring);
		}
	}
}

}
//------------------------------------------------------------------------------

forward TimerIzazov(playerid);
public TimerIzazov(playerid) {
if(TrkaIzazov[playerid] != 0) {
	TrkaIzazov[playerid]--;
	switch(TrkaIzazov[playerid]) {
		case 0: {
			SetPlayerRaceCheckpoint(playerid, 0, -1431.3984, -129.8569, 1045.4110, -1456.4524, -282.5754, 1050.6942, 7.0);
			TrkaCheckpoint[playerid] = 1;
			Fusion_KillTimer(IzazivanjeTimer[playerid]);
			TogglePlayerControllable(playerid, true);
			GameTextForPlayer(playerid ,"~g~GO GO GO!!!", 2000, 5);
		}
		case 1: {
			GameTextForPlayer(playerid ,"~r~1", 999, 5);
		}
		case 2: {
			GameTextForPlayer(playerid ,"~y~2", 999, 5);
		}
		case 3: {
			GameTextForPlayer(playerid ,"~b~3", 999, 5);
		}
	}
}
}
//------------------------------------------------------------------------------
forward VehicleRentRespawn(vehicleid);
public VehicleRentRespawn(vehicleid) {
	if(vehicleid != INVALID_VEHICLE_ID) {
		if(TipVozila[vehicleid] != RENTANO_VOZILO) occupied[vehicleid] = true;
		if(Parked[vehicleid] != -1) occupied[vehicleid] = true;
		if(IsTrailerAttachedToVehicle(vehicleid)) occupied[GetVehicleTrailer(vehicleid)] = true;
		if(!occupied[vehicleid]) {
			ac_SetVehicleToRespawn(vehicleid);
		} else occupied[vehicleid] = false;
	}
	if(vehicleid+1 < MAX_VEHICLES) SetTimerEx("VehicleRentRespawn", 10, false, "d", vehicleid+1);
	else ServerInfo[RRVehicle] = false, SCMA(0x86C6DBAA, "[RESPAWN] Respawn praznih rentanih vozila je zavrsen!");
	return 1;}

forward VehicleOrgRespawn(vehicleid);
public VehicleOrgRespawn(vehicleid) {
	if(vehicleid != INVALID_VEHICLE_ID) {
		if(TipVozila[vehicleid] != ORGANIZACIJSKO_VOZILO) occupied[vehicleid] = true;
		if(Parked[vehicleid] != -1) occupied[vehicleid] = true;
		if(IsTrailerAttachedToVehicle(vehicleid)) occupied[GetVehicleTrailer(vehicleid)] = true;
		if(!occupied[vehicleid]) {
			ac_SetVehicleToRespawn(vehicleid);
		} else occupied[vehicleid] = false;
	}
	if(vehicleid+1 < MAX_VEHICLES) SetTimerEx("VehicleOrgRespawn", 10, false, "d", vehicleid+1);
	else ServerInfo[RRVehicle] = false, SCMA(0x86C6DBAA, "[RESPAWN] Respawn praznih organizacijskih vozila je zavrsen!");
	return 1;}

forward VehicleLiderOrgRespawn(playerid,org,vehicleid);
public VehicleLiderOrgRespawn(playerid,org,vehicleid) {
	if(vehicleid != INVALID_VEHICLE_ID) {
		if(TipVozila[vehicleid] != ORGANIZACIJSKO_VOZILO) occupied[vehicleid] = true;
		if(Parked[vehicleid] != -1) occupied[vehicleid] = true;
		if(IsTrailerAttachedToVehicle(vehicleid)) occupied[GetVehicleTrailer(vehicleid)] = true;
		if(OrgaVozila[vehicleid] != PlayerInfo[playerid][xClan]) occupied[vehicleid] = true;
		if(!occupied[vehicleid]) {
			ac_SetVehicleToRespawn(vehicleid);
		} else occupied[vehicleid] = false;
	}
	if(vehicleid+1 < MAX_VEHICLES) SetTimerEx("VehicleLiderOrgRespawn",10,false,"ddd",playerid,PlayerInfo[playerid][xLider],vehicleid+1);
	else ServerInfo[RRVehicle] = false;
	return 1;}

forward VehicleJobsRespawn(vehicleid);
public VehicleJobsRespawn(vehicleid) {
	if(vehicleid != INVALID_VEHICLE_ID) {
		if(TipVozila[vehicleid] != POSLOVNO_VOZILO) occupied[vehicleid] = true;
		if(Parked[vehicleid] != -1) occupied[vehicleid] = true;
		if(IsTrailerAttachedToVehicle(vehicleid)) occupied[GetVehicleTrailer(vehicleid)] = true;
		if(!occupied[vehicleid]) {
			ac_SetVehicleToRespawn(vehicleid);
		} else occupied[vehicleid] = false;
	}
	if(vehicleid+1 < MAX_VEHICLES) SetTimerEx("VehicleJobsRespawn", 10, false, "d", vehicleid+1);
	else ServerInfo[RRVehicle] = false, SCMA(0x86C6DBAA, "[RESPAWN] Respawn praznih poslovnih vozila je zavrsen!");
	return 1;}

forward VehiclePrivateRespawn(vehicleid);
public VehiclePrivateRespawn(vehicleid) {
	if(vehicleid != INVALID_VEHICLE_ID) {
		if(TipVozila[vehicleid] != PRIVATNO_VOZILO) occupied[vehicleid] = true;
		if(Parked[vehicleid] != -1) occupied[vehicleid] = true;
		if(IsTrailerAttachedToVehicle(vehicleid)) occupied[GetVehicleTrailer(vehicleid)] = true;
		if(!occupied[vehicleid]) {
			ac_SetVehicleToRespawn(vehicleid);
		} else occupied[vehicleid] = false;
	}
	if(vehicleid+1 < MAX_VEHICLES) SetTimerEx("VehiclePrivateRespawn", 10, false, "d", vehicleid+1);
	else ServerInfo[RRVehicle] = false, SCMA(0x86C6DBAA, "[RESPAWN] Respawn praznih privatnih vozila je zavrsen!");
	return 1;}

forward RespawnCallGlobal();
public RespawnCallGlobal() {
for(new i = 0; i < MAX_PLAYERS; i++) {
	if(IsPlayerConnected(i)) {
		if(IsPlayerInAnyVehicle(i)) {
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(i))) occupied[GetVehicleTrailer(GetPlayerVehicleID(i))] = true;
			if(!occupied[GetPlayerVehicleID(i)]) {
				occupied[GetPlayerVehicleID(i)] = true;

			}
		}
	}
}
SetTimerEx("VehicleRespawn", 10, false, "d", 0);
ServerInfo[RRVehicle] = true;
SCMA(0x86C6DBAA, "[RESPAWN] Server je pokrenuo respawn svih vozila!");
return 1;}

forward RespawnCall(playerid, broj);
public RespawnCall(playerid, broj) {
new varstring[100];
switch(broj) {
	case 1: {
		for(new i = 0; i < MAX_PLAYERS; i++) {
			if(IsPlayerConnected(i)) {
				if(IsPlayerInAnyVehicle(i)) {
					if(!occupied[GetPlayerVehicleID(i)])
						occupied[GetPlayerVehicleID(i)] = true;
				}
			}
		}
		SetTimerEx("VehiclePrivateRespawn", 10, false, "d", 0);
		ServerInfo[RRVehicle] = true;
		format(varstring, sizeof(varstring), "[RESPAWN] %s je pokrenuo respawn praznih privatnih vozila!", ImeIgraca(playerid));
		SCMA(0x86C6DBAA, varstring);
	}
	case 2: {
		for(new i = 0; i < MAX_PLAYERS; i++) {
			if(IsPlayerConnected(i)) {
				if(IsPlayerInAnyVehicle(i)) {
					if(!occupied[GetPlayerVehicleID(i)])
						occupied[GetPlayerVehicleID(i)] = true;
				}
			}
		}
		SetTimerEx("VehicleJobsRespawn", 10, false, "d", 0);
		ServerInfo[RRVehicle] = true;
		format(varstring, sizeof(varstring), "[RESPAWN] %s je pokrenuo respawn praznih poslovnih vozila!", ImeIgraca(playerid));
		SCMA(0x86C6DBAA, varstring);
	}
	case 3: {
		for(new i = 0; i < MAX_PLAYERS; i++) {
			if(IsPlayerConnected(i)) {
				if(IsPlayerInAnyVehicle(i)) {
					if(!occupied[GetPlayerVehicleID(i)])
						occupied[GetPlayerVehicleID(i)] = true;
				}
			}
		}

		SetTimerEx("VehicleOrgRespawn", 10, false, "d", 0);
		ServerInfo[RRVehicle] = true;
		format(varstring, sizeof(varstring), "[RESPAWN] %s je pokrenuo respawn praznih organizacijskih vozila!", ImeIgraca(playerid));
		SCMA(0x86C6DBAA, varstring);
	}
	case 4: {
		for(new i = 0; i < MAX_PLAYERS; i++) {
			if(IsPlayerConnected(i)) {
					if(IsPlayerInAnyVehicle(i)) {
					if(!occupied[GetPlayerVehicleID(i)])
						occupied[GetPlayerVehicleID(i)] = true;
				}
			}
		}
		SetTimerEx("VehicleRentRespawn", 10, false, "d", 0);
		ServerInfo[RRVehicle] = true;
		format(varstring, sizeof(varstring), "[RESPAWN] %s je pokrenuo respawn praznih rentanih vozila!", ImeIgraca(playerid));
		SCMA(0x86C6DBAA, varstring);
	}
	case 5: {
		for(new i = 0; i < MAX_PLAYERS; i++) {
			if(IsPlayerConnected(i)) {
				if(IsPlayerInAnyVehicle(i)) {
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(i))) occupied[GetVehicleTrailer(GetPlayerVehicleID(i))] = true;
					if(!occupied[GetPlayerVehicleID(i)])
						occupied[GetPlayerVehicleID(i)] = true;
				}
			}
		}
		SetTimerEx("VehicleRespawn", 10, false, "d", 0);
		ServerInfo[RRVehicle] = true;
		format(varstring, sizeof(varstring), "[RESPAWN] %s je pokrenuo respawn svih vozila!", ImeIgraca(playerid));
		SCMA(0x86C6DBAA, varstring);
	}
	case 6: {
		for(new i = 0; i < MAX_PLAYERS; i++) {
			if(IsPlayerConnected(i)) {
				if(IsPlayerInAnyVehicle(i)) {
					if(!occupied[GetPlayerVehicleID(i)])
						occupied[GetPlayerVehicleID(i)] = true;
				}
			}
		}
		SetTimerEx("VehicleLiderOrgRespawn",10,false,"ddd",playerid,PlayerInfo[playerid][xLider],0);
		ServerInfo[RRVehicle] = true;
	}
}
return 1;}

forward VehicleRespawn(vehicleid);
public VehicleRespawn(vehicleid) {
	if(vehicleid != INVALID_VEHICLE_ID) {
		if(Parked[vehicleid] != -1) occupied[vehicleid] = true;
		if(!occupied[vehicleid]) {
			ac_SetVehicleToRespawn(vehicleid);
		} else occupied[vehicleid] = false;
	}
	if(vehicleid+1 < MAX_VEHICLES) SetTimerEx("VehicleRespawn", 10, false, "d", vehicleid+1);
	else ServerInfo[RRVehicle] = false, SCMA(0x86C6DBAA, "[RESPAWN] Respawn svih vozila je zavrsen!");
	return 1;}
//------------------------------------------------------------------------------
IsACabrio(model)
{
if(	model == 424 || model == 429 || model == 430 || model == 439 || model == 446 ||
	model == 448 || model == 452 || model == 453 || model == 454 || model == 457 ||
	model == 461 || model == 462 || model == 463 || model == 468 || model == 471 ||
	model == 472 || model == 473 || model == 476 || model == 480 || model == 481 ||
	model == 484 || model == 485 || model == 486 || model == 493 || model == 500 ||
	model == 506 || model == 509 || model == 510 || model == 512 || model == 513 ||
	model == 521 || model == 522 || model == 523 || model == 530 || model == 531 ||
	model == 533 || model == 536 || model == 539 || model == 555 || model == 567 ||
	model == 568 || model == 571 || model == 572 || model == 575 || model == 581 ||
	model == 586)
{
	return 1;}
return 0;}
//------------------------------------------------------------------------------
RenamePlayer(staroime[], name[], playerid) {

new oldname[40], newname[40];
new voziloid1 = PlayerInfo[playerid][xVoziloID][0];
new voziloid2 = PlayerInfo[playerid][xVoziloID][1];
new voziloid3 = PlayerInfo[playerid][xVoziloID][2];
new voziloid4 = PlayerInfo[playerid][xVoziloID][3];
new imovina1 = PlayerInfo[playerid][xProperty][0];
new imovina2 = PlayerInfo[playerid][xProperty][1];
new imovina3 = PlayerInfo[playerid][xProperty][2];
new firma = PlayerInfo[playerid][xFirmaID];
new hotel = PlayerInfo[playerid][xHotelID];
format(oldname, sizeof(oldname), "Korisnici/%s.ini", staroime);
format(newname, sizeof(newname), "Korisnici/%s.ini", name);
if(fexist(newname)) return SendErrorMessage(playerid, "Novo ime vec postoji u bazi podataka!");
if(PlayerInfo[playerid][xProperty][0] != -1 && strcmp(ImeIgraca(playerid), II[imovina1][iOwner], true) == 0)
{
	strmid(II[imovina1][iOwner], name, 0, strlen(name), 24);
	PropertyRefresh(imovina1); SaveProperty(imovina1);}
if(PlayerInfo[playerid][xProperty][1] != -1 && strcmp(ImeIgraca(playerid), II[imovina2][iOwner], true) == 0)
{
	strmid(II[imovina2][iOwner], name, 0, strlen(name), 24);
	PropertyRefresh(imovina2); SaveProperty(imovina2);}
if(PlayerInfo[playerid][xProperty][2] != -1 && strcmp(ImeIgraca(playerid), II[imovina3][iOwner], true) == 0)
{
	strmid(II[imovina3][iOwner], name, 0, strlen(name), 24);
	PropertyRefresh(imovina3); SaveProperty(imovina3);}
if(PlayerInfo[playerid][xFirmaID] != -1 && strcmp(ImeIgraca(playerid), BusinessInfo[firma][bOwner], true) == 0) {
	strmid(BusinessInfo[firma][bOwner], name, 0, strlen(name), 24);
	Business_Refresh(firma); SaveBusiness(firma);}
if(PlayerInfo[playerid][xHotelID] != -1 && strcmp(ImeIgraca(playerid), hotelInfo[hotel][hOwner], true) == 0) {
	strmid(hotelInfo[hotel][hOwner], name, 0, strlen(name), 24);
	HotelRefresh(hotel); SaveHotel(hotel);}
if(PlayerInfo[playerid][xVoziloID][0] != -1 && strcmp(ImeIgraca(playerid), VehicleInfo[voziloid1][vOwner], true) == 0)
{
	strmid(VehicleInfo[voziloid1][vOwner], name, 0, strlen(name), 24);
	SaveVehicle(voziloid1);}
if(PlayerInfo[playerid][xVoziloID][1] != -1 && strcmp(ImeIgraca(playerid), VehicleInfo[voziloid2][vOwner], true) == 0)
{
	strmid(VehicleInfo[voziloid2][vOwner], name, 0, strlen(name), 24);
	SaveVehicle(voziloid2);}
if(PlayerInfo[playerid][xVoziloID][2] != -1 && strcmp(ImeIgraca(playerid), VehicleInfo[voziloid3][vOwner], true) == 0)
{
	strmid(VehicleInfo[voziloid3][vOwner], name, 0, strlen(name), 24);
	SaveVehicle(voziloid3);}
if(PlayerInfo[playerid][xVoziloID][3] != -1 && strcmp(ImeIgraca(playerid), VehicleInfo[voziloid4][vOwner], true) == 0)
{
	strmid(VehicleInfo[voziloid4][vOwner], name, 0, strlen(name), 24);
	SaveVehicle(voziloid4);}

if(fexist(Inventory(playerid))) {

	new oldinv[40], newinv[40];
	format(oldinv, sizeof(oldinv), "Inventory/%s.ini", staroime);
	format(newinv, sizeof(newinv), "Inventory/%s.ini", name);
	frename(oldinv, newinv);}
frename(oldname, newname); SetPlayerName(playerid, name);
return 1;}
//------------------------------------------------------------------------------
public ClearKnock(playerid)
{
TogglePlayerControllable(playerid, true);
ClearAnimations(playerid);
	KnockedDown[playerid] = false;}
//------------------------------------------------------------------------------
public ClearPlayerRob(playerid)
{
	IgracOpljackan[playerid] = false;}
//------------------------------------------------------------------------------
public Taxitimer(playerid) {
new stringB[5],string[64];
if(IsPlayerInAnyVehicle(playerid)) {
	if(VoziIgracaID[playerid] != INVALID_PLAYER_ID && GetPlayerVehicleID(playerid) == GetPlayerVehicleID(VoziIgracaID[playerid])) {
		if(GetSpeed(playerid) > 5) {
			if(PlayerInfo[VoziIgracaID[playerid]][xNovac] >= CenaVoznje[playerid]) {
				CenaVoznje[playerid] += 1850; //povecano sa 800 na 1850
				format(string, sizeof(string), "%s", GetPlayerLocation(VoziIgracaID[playerid]));
				PlayerTextDrawSetString(playerid, TaxistaTD[playerid][6], string);
				format(string, sizeof(string), "%s", GetPlayerLocation(VoziIgracaID[playerid]));
				PlayerTextDrawSetString(VoziIgracaID[playerid], TaxistaTD[VoziIgracaID[playerid]][6], string);

				format(stringB, sizeof(stringB), "%d$", CenaVoznje[playerid]);
				PlayerTextDrawSetString(playerid, TaxistaTD[playerid][9], stringB);
				format(stringB, sizeof(stringB), "%d$", CenaVoznje[playerid]);
				PlayerTextDrawSetString(VoziIgracaID[playerid], TaxistaTD[VoziIgracaID[playerid]][9], stringB);
			}
			else {
				TaximetarUkljucen[playerid] = false;

				PlayerTextDrawHide(VoziIgracaID[playerid], TaxistaTD[VoziIgracaID[playerid]][0]);
				PlayerTextDrawHide(VoziIgracaID[playerid], TaxistaTD[VoziIgracaID[playerid]][1]);
				PlayerTextDrawHide(VoziIgracaID[playerid], TaxistaTD[VoziIgracaID[playerid]][2]);
				PlayerTextDrawHide(VoziIgracaID[playerid], TaxistaTD[VoziIgracaID[playerid]][3]);
				PlayerTextDrawHide(VoziIgracaID[playerid], TaxistaTD[VoziIgracaID[playerid]][4]);
				PlayerTextDrawHide(VoziIgracaID[playerid], TaxistaTD[VoziIgracaID[playerid]][5]);
				PlayerTextDrawHide(VoziIgracaID[playerid], TaxistaTD[VoziIgracaID[playerid]][6]);
				PlayerTextDrawHide(VoziIgracaID[playerid], TaxistaTD[VoziIgracaID[playerid]][7]);
				PlayerTextDrawHide(VoziIgracaID[playerid], TaxistaTD[VoziIgracaID[playerid]][8]);
				PlayerTextDrawHide(VoziIgracaID[playerid], TaxistaTD[VoziIgracaID[playerid]][9]);
				PlayerTextDrawHide(VoziIgracaID[playerid], TaxistaTD[VoziIgracaID[playerid]][10]);
				PlayerTextDrawHide(VoziIgracaID[playerid], TaxistaTD[VoziIgracaID[playerid]][11]);

				DajIgracuNovac(VoziIgracaID[playerid], -CenaVoznje[playerid]);
				DajIgracuNovac(playerid, CenaVoznje[playerid]);

				SendClientMessageEx(VoziIgracaID[playerid], ZUTA, "Zavrsili ste voznju jer nemate dovoljno novca. Naplaceno vam je %d.", CenaVoznje[playerid]);
				SendClientMessageEx(playerid, ZUTA, "Klijent nema dovoljno novca te je izasao i naplatili ste mu %d$ za voznju", CenaVoznje[playerid]);

				PlayerTextDrawSetString(playerid, TaxistaTD[playerid][6], "N/A");
				PlayerTextDrawShow(playerid, TaxistaTD[playerid][6]);
				PlayerTextDrawSetString(playerid, TaxistaTD[playerid][9], "N/A");
				PlayerTextDrawShow(playerid, TaxistaTD[playerid][9]);

				ac_RemovePlayerFromVehicle(VoziIgracaID[playerid]);
				CenaVoznje[playerid] = 0;
				Fusion_KillTimer(TaxiTimer[playerid]);
				offeredByCabbie[VoziIgracaID[playerid]] = INVALID_PLAYER_ID;
				VoziIgracaID[playerid] = INVALID_PLAYER_ID;
			}
		}
	}
}
return 1;}

// - Streljana Sistem
forward TreniranjeTimer(playerid);
public TreniranjeTimer(playerid) {
if(Trenira[playerid] == ORUZJE_PISTOL) {
	if(GetPlayerAmmo(playerid) < 1) {
		PlayerInfo[playerid][xPistolSkill] += 30;
		SendInfoMessage(playerid, "Zavrsili ste trening za Pistol, i dobili ste +30 skill poena na tom oruzju. (/skills)");
		}
		else {
			SendErrorMessage(playerid, "Niste zavrsili trening jer niste ispucali sve metke iz sarzera.");
		}
}
else if(Trenira[playerid] == ORUZJE_DEAGLE) {
	if(GetPlayerAmmo(playerid) < 1) {
		PlayerInfo[playerid][xDeagleSkill] += 30;
		SendInfoMessage(playerid, "Zavrsili ste trening za Desert Eagle, i dobili ste +30 skill poena na tom oruzju. (/skills)");
		}
		else {
			SendErrorMessage(playerid, "Niste zavrsili trening jer niste ispucali sve metke iz sarzera.");
		}
}
else if(Trenira[playerid] == ORUZJE_SHOTGUN) {
	if(GetPlayerAmmo(playerid) < 1) {
		PlayerInfo[playerid][xShotgunSkill] += 30;
		SendInfoMessage(playerid, "Zavrsili ste trening za Shotgun, i dobili ste +30 skill poena na tom oruzju. (/skills)");
		}
		else {
			SendErrorMessage(playerid, "Niste zavrsili trening jer niste ispucali sve metke iz sarzera.");
		}
}
else if(Trenira[playerid] == ORUZJE_SAWNOFF) {
	if(GetPlayerAmmo(playerid) < 1) {
		PlayerInfo[playerid][xSawnSkill] += 30;
		SendInfoMessage(playerid, "Zavrsili ste trening za Sawnoff Shotgun, i dobili ste +30 skill poena na tom oruzju. (/skills)");
		}
		else {
			SendErrorMessage(playerid, "Niste zavrsili trening jer niste ispucali sve metke iz sarzera.");
		}
}
else if(Trenira[playerid] == ORUZJE_COMBAT) {
	if(GetPlayerAmmo(playerid) < 1) {
		PlayerInfo[playerid][xCombatSkill] += 30;
		SendInfoMessage(playerid, "Zavrsili ste trening za Combat Shotgun, i dobili ste +30 skill poena na tom oruzju. (/skills)");
		}
		else {
			SendErrorMessage(playerid, "Niste zavrsili trening jer niste ispucali sve metke iz sarzera.");
		}
}
else if(Trenira[playerid] == ORUZJE_MP5) {
	if(GetPlayerAmmo(playerid) < 1) {
		PlayerInfo[playerid][xMPSkill] += 30;
		SendInfoMessage(playerid, "Zavrsili ste trening za MP5, i dobili ste +30 skill poena na tom oruzju. (/skills)");
		}
		else {
			SendErrorMessage(playerid, "Niste zavrsili trening jer niste ispucali sve metke iz sarzera.");
		}
}
else if(Trenira[playerid] == ORUZJE_AK47) {
	if(GetPlayerAmmo(playerid) < 1) {
		PlayerInfo[playerid][xAKSkill] += 30;
		SendInfoMessage(playerid, "Zavrsili ste trening za AK-47, i dobili ste +30 skill poena na tom oruzju. (/skills)");
		}
		else {
			SendErrorMessage(playerid, "Niste zavrsili trening jer niste ispucali sve metke iz sarzera.");
		}
}
else if(Trenira[playerid] == ORUZJE_M4) {
	if(GetPlayerAmmo(playerid) < 1) {
		PlayerInfo[playerid][xM4Skill] += 30;
		SendInfoMessage(playerid, "Zavrsili ste trening za M4, i dobili ste +30 skill poena na tom oruzju. (/skills)");
		}
	else {
			SendErrorMessage(playerid, "Niste zavrsili trening jer niste ispucali sve metke iz sarzera.");
		}
}
else if(Trenira[playerid] == ORUZJE_SNIPER) {
	if(GetPlayerAmmo(playerid) < 1) {
		PlayerInfo[playerid][xSniperSkill] += 30;
		SendInfoMessage(playerid, "Zavrsili ste trening za Sniper Rifle, i dobili ste +30 skill poena na tom oruzju. (/skills)");
		}
		else {
			SendErrorMessage(playerid, "Niste zavrsili trening jer niste ispucali sve metke iz sarzera.");
		}
}
SavePlayer(playerid);
Trenira[playerid] = 0; TreniranjeProvera[playerid] = 0;

SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, PlayerInfo[playerid][xPistolSkill]);
SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][xDeagleSkill]);
SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][xShotgunSkill]);
SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[playerid][xSawnSkill]);
SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][xCombatSkill]);
SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][xMPSkill]);
SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][xAKSkill]);
SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][xM4Skill]);
SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRifLE, PlayerInfo[playerid][xSniperSkill]);

ResetAllWeapons(playerid);
Fusion_KillTimer(treniranjetimer[playerid]);
return 1;}

// - Ribar Hobi
forward IgracPecao(playerid);
public IgracPecao(playerid)
{
new fish = randomRay(1,4), str[128], novcanik = randomRay(500,1600),string[128],fweight = randomRay(2,12);
RemovePlayerAttachedObject(playerid,0);
IgracPeca[playerid] = false;
if(!IsPlayerInRangeOfPoint(playerid,3.0, PecanjePozX[playerid],PecanjePozY[playerid],PecanjePozZ[playerid]))	return SendErrorMessage(playerid,"Pomerili ste se sa mesta za pecanje i ispustili ribu.");
switch(fish)
{
	case 1: {   str = ""col_server"Nazalost ovog puta ste upecali samo {FF0000]kesu.";  }
	case 2: {       format(string,sizeof(string),""col_server"Upecali ste novcanik u kome ima {38CF53]%i$.",novcanik);  str = string;  DajIgracuNovac(playerid, novcanik); }
	case 3: {   format(string,sizeof(string),""col_server"Upecali ste ribu {38CF53]%s "col_server"sa tezinom od {38CF53]%i "col_server"kilograma.",GetFishSpecie(),fweight); str = string; PlayerInfo[playerid][xRibaKG] += fweight; PlayerInfo[playerid][xRiba] += 1;}
	case 4: str = ""col_server"Zao nam je ali ovog puta{FF0000] niste upecali nista.";}
SPD(playerid, dialog_FISHJUSTCAUGHT, DSMSG, ""col_server"PECANJE - "col_white"Obavestenje", str, "Zatvori", "");
return true;}

stock GetFishSpecie()
{
	new fishspecie = randomRay(0,4), strz[64];
	switch(fishspecie)
	{
		case 0: strz = "Smudj";
		case 1: strz = "Saran";
		case 2: strz = "Amur";
		case 3: strz = "Deverika";
		case 4: strz = "Klen";
	}
	return strz;}

stock randomRay(minnum = cellmin, maxnum = cellmax) return random(maxnum - minnum + 1) + minnum;
//------------------------------------------------------------------------------
public PocetniTut(playerid, izbor) {
if(izbor == 1) {
	SetPlayerCameraPos(playerid, 1465.5031, -1713.1963, 31.2710);
	SetPlayerCameraLookAt(playerid, 1465.9106, -1714.1077, 30.9309);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1);
	ac_SetPlayerPos(playerid, 1465.5031, -1713.1963, 31.2710);
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, FUSIONGAMING, ".:OPSTINA:.");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, BELA, "Opstina je jedno od najbitnijih mesta na serveru. Naime, u njoj mozete da nadjete posao,");
	SendClientMessage(playerid, BELA, "da kupite fakture, kao i da izvadite pasos i respawnujete Vase vozilo.");
	TimerTutorial[playerid] = SetTimerEx("PocetniTut", 17000, false, "ii", playerid, 2);}
else if(izbor == 2) {
	SetPlayerCameraPos(playerid, 1498.2783, -1684.1090, 29.7540);
	SetPlayerCameraLookAt(playerid, 1499.2570, -1683.9119, 29.4788);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1);
	ac_SetPlayerPos(playerid, 1498.2783, -1684.1090, 29.7540);
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, FUSIONGAMING, ".:POLICIJA:.");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, BELA, "Policija je najsigurnije mesto za Vas, takodje u njoj mozete da uzmete tablice za svoje vozilo,");
	SendClientMessage(playerid, BELA, "kao i da kupite dozvolu za oruzje, ali budite pazljivi kako ga koristite.");
	TimerTutorial[playerid] = SetTimerEx("PocetniTut", 17000, false, "ii", playerid, 3);}
else if(izbor == 3) {
	SetPlayerCameraPos(playerid, 1493.3752, -1043.0861, 32.8577);
	SetPlayerCameraLookAt(playerid, 1492.5215, -1042.5664, 32.6826);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1);
	ac_SetPlayerPos(playerid, 1493.3752, -1043.0861, 32.8577);
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, FUSIONGAMING, ".:BANKA:.");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, BELA, "Banka je mesto gde se cuva Vas novac, u njoj mozete da podignete kredit, kao i platu.");
	SendClientMessage(playerid, BELA, "Ali, budite oprezni kada se banka pljacka, tada ne zelite da se nadjete u njoj.");
	TimerTutorial[playerid] = SetTimerEx("PocetniTut", 17000, false, "ii", playerid, 4);}
else if(izbor == 4) {
	//SetPlayerCameraPos(playerid, 1493.3752, -1043.0861, 32.8577);
	//SetPlayerCameraLookAt(playerid, 1492.5215, -1042.5664, 32.6826);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1);
	InterpolateCameraPos(playerid, 1384.313110, -1149.264526, 34.405216, 1439.712402, -1166.892700, 30.116310, 8000);
	InterpolateCameraLookAt(playerid, 1388.043457, -1152.504394, 33.638717, 1435.705444, -1169.830810, 29.557582, 8000);
	ac_SetPlayerPos(playerid, 1384.313110, -1149.264526, 34.405216);
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, FUSIONGAMING, ".:ZLATARA:.");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, BELA, "Zlatara je mesto gde mozete da kupite sat, kao i da prodate zlato.");
	SendClientMessage(playerid, BELA, "Zlato mozete da nabavite samo kopanjem u rudniku, ali i u zlatari ima pljackasa!");
	TimerTutorial[playerid] = SetTimerEx("PocetniTut", 17000, false, "ii", playerid, 5);}
else if(izbor == 5) {
	//SetPlayerCameraPos(playerid, 1493.3752, -1043.0861, 32.8577);
	//SetPlayerCameraLookAt(playerid, 1492.5215, -1042.5664, 32.6826);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1);
	InterpolateCameraPos(playerid, 1211.136474, -1300.948486, 33.019840, 1201.203247, -1340.284667, 21.660621, 8000);
	InterpolateCameraLookAt(playerid, 1206.788452, -1303.159667, 31.922084, 1197.121215, -1337.527099, 20.804187, 8000);
	ac_SetPlayerPos(playerid, 1211.136474, -1300.948486, 33.019840);
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, FUSIONGAMING, ".:BOLNICA:.");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, BELA, "Bolnica je mesto gde mozete da izlecite Vasu zavisnost od narkotika.");
	SendClientMessage(playerid, BELA, "Posle smrti u bolnici cete se spawnovati. U njoj mozete kupiti pojedine lekove.");
	TimerTutorial[playerid] = SetTimerEx("PocetniTut", 17000, false, "ii", playerid, 6);}
else if(izbor == 6) {
	//SetPlayerCameraPos(playerid, 1493.3752, -1043.0861, 32.8577);
	//SetPlayerCameraLookAt(playerid, 1492.5215, -1042.5664, 32.6826);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1);
	InterpolateCameraPos(playerid, 834.599304, -1591.083618, 29.972484, 818.362121, -1647.779052, 20.928974, 8000);
	InterpolateCameraLookAt(playerid, 830.887512, -1594.121093, 28.559619, 815.110534, -1644.111572, 19.940649, 8000);
	ac_SetPlayerPos(playerid, 834.599304, -1591.083618, 29.972484);
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, FUSIONGAMING, ".:MCDONALDS:.");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, BELA, "McDonalds, tacnije Burg, je mesto za okupljanje igraca, i mesto gde je stvarno odlicna hrana.");
	SendClientMessage(playerid, BELA, "Takodje se tamo organizuju mnogi dogadjaji kao sto su Car Show, Maraton, okupljanja itd.");
	TimerTutorial[playerid] = SetTimerEx("PocetniTut", 17000, false, "ii", playerid, 7);}
else if(izbor == 7) {
	//SetPlayerCameraPos(playerid, 1493.3752, -1043.0861, 32.8577);
	//SetPlayerCameraLookAt(playerid, 1492.5215, -1042.5664, 32.6826);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1);
	InterpolateCameraPos(playerid, 967.874694, -1318.442993, 19.237180, 906.083984, -1361.667480, 23.647050, 5000);
	InterpolateCameraLookAt(playerid, 964.382751, -1322.002319, 19.608369, 911.038391, -1361.635864, 22.974275, 5000);
	ac_SetPlayerPos(playerid, 967.874694, -1318.442993, 19.237180);
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, FUSIONGAMING, ".:SALONI VOZILA:.");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, BELA, "Salon je mesto gde mozete kupiti vozilo za sebe. Na nasem serveru postoje 4 auto salona.");
	SendClientMessage(playerid, BELA, "Pored auto salona, tu su saloni bicikala, plovila, letelica i motora.");
	SendClientMessage(playerid, BELA, "Da bi kupili vozilo morate biti minimalno 5 level. Na pocetku imate 3 slobodna slota vozila.");
	TimerTutorial[playerid] = SetTimerEx("PocetniTut", 17000, false, "ii", playerid, 8);}
else if(izbor == 8) {
	//SetPlayerCameraPos(playerid, 1493.3752, -1043.0861, 32.8577);
	//SetPlayerCameraLookAt(playerid, 1492.5215, -1042.5664, 32.6826);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1);
	InterpolateCameraPos(playerid, 1450.937988, -1166.997070, 36.242935, 1486.833496, -1136.438598, 31.152679, 8000);
	InterpolateCameraLookAt(playerid, 1451.141479, -1162.227172, 34.757526, 1481.890625, -1136.194335, 30.439908, 8000);
	ac_SetPlayerPos(playerid, 1450.937988, -1166.997070, 36.242935);
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, FUSIONGAMING, ".:NIKE SHOP:.");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, BELA, "Nike Shop je mesto gde mozete promeniti izgled Vaseg karaktera.");
	SendClientMessage(playerid, BELA, "Mozete kupiti kacket, naocare ili neko odelo. Cene su jeftine i prihvatljive.");
	TimerTutorial[playerid] = SetTimerEx("PocetniTut", 17000, false, "ii", playerid, 9);}
else if(izbor == 9) {
	//SetPlayerCameraPos(playerid, 1493.3752, -1043.0861, 32.8577);
	//SetPlayerCameraLookAt(playerid, 1492.5215, -1042.5664, 32.6826);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1);
	InterpolateCameraPos(playerid, 1297.050659, -1563.063476, 15.779391, 1298.065429, -1528.662841, 15.779391, 4000);
	InterpolateCameraLookAt(playerid, 1292.152465, -1562.542846, 14.921162, 1294.141845, -1531.658325, 14.984086, 4000);
	ac_SetPlayerPos(playerid, 1297.050659, -1563.063476, 15.779391);
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, FUSIONGAMING, ".:LUTRIJA:.");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, BELA, "Lutrija je mesto gde mozete kupiti lotto listic, kao i podici dobitak ako ste dobili.");
	SendClientMessage(playerid, BELA, "Okusajte svoju srecu, jer ko igra taj i dobija!");
	TimerTutorial[playerid] = SetTimerEx("PocetniTut", 17000, false, "ii", playerid, 10);}
else if(izbor == 10) {
	//SetPlayerCameraPos(playerid, 1493.3752, -1043.0861, 32.8577);
	//SetPlayerCameraLookAt(playerid, 1492.5215, -1042.5664, 32.6826);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1);
	InterpolateCameraPos(playerid, 1299.980834, -1629.895996, 18.606193, 1298.862182, -1662.179443, 16.415971, 10000);
	InterpolateCameraLookAt(playerid, 1296.885742, -1633.820556, 18.471929, 1294.810791, -1659.259033, 16.655298, 10000);
	ac_SetPlayerPos(playerid, 1299.980834, -1629.895996, 18.606193);
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, FUSIONGAMING, ".:WinWin:.");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, BELA, "WinWin je vrsta elektronik prodavnice koja sluzi za kupovinu tehnologije.");
	SendClientMessage(playerid, BELA, "Nalazi se odmah pored glavne ulice servera, i u njemu mozete nabaviti razne tehnoloske proizvode.");
	TimerTutorial[playerid] = SetTimerEx("PocetniTut", 17000, false, "ii", playerid, 11);}
else if(izbor == 11) {
	//SetPlayerCameraPos(playerid, 1331.9996, -1424.3234, 55.6316);
	//SetPlayerCameraLookAt(playerid, 1331.6726, -1423.3738, 55.0025);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1);
	InterpolateCameraPos(playerid, 1950.140747, 246.349609, 37.040019, 1746.920410, 111.750595, 73.549972, 8000);
	InterpolateCameraLookAt(playerid, 1946.411621, 243.030441, 36.762180, 1751.434082, 112.842391, 71.696716, 8000);
	ac_SetPlayerPos(playerid, 1950.140747, 246.349609, 37.040019);
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, FUSIONGAMING, ".:POSLOVI:.");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, BELA, "Nasi poslovi rade na principu Vaseg stepena skolovanja. Sto je on veci, to imate bolji odabir poslova.");
	SendClientMessage(playerid, BELA, "Na samom pocetku, postoji samo dva posla za koje Vam ne treba skola, to su Vocar i Perac Prozora.");
	SendClientMessage(playerid, BELA, "Za pocetak Vam je to dovoljno da zaradite novac. Postoji tri stepena skole - Osnovna, Srednja i Fakultet.");
	SendClientMessage(playerid, BELA, "Nudimo Vam sirok asortiman poslova i svaki se razlicito vrednuje, verujemo da cete naci posao po Vasem ukusu!");
	TimerTutorial[playerid] = SetTimerEx("PocetniTut", 25000, false, "ii", playerid, 12);}
else if(izbor == 12) {
	//SetPlayerCameraPos(playerid, 1331.9996, -1424.3234, 55.6316);
	//SetPlayerCameraLookAt(playerid, 1331.6726, -1423.3738, 55.0025);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1);
	InterpolateCameraPos(playerid, 1283.655883, -2434.193359, 18.741750, 1228.286499, -2380.712402, 17.080398, 4000);
	InterpolateCameraLookAt(playerid, 1280.160400, -2430.666503, 18.155702, 1225.111938, -2376.858642, 17.347820, 4000);
	ac_SetPlayerPos(playerid, 1283.655883, -2434.193359, 18.741750);
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, FUSIONGAMING, ".:HOBI:.");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, BELA, "Ribar je pored posla nesto kao hobi, potrebna Vam je samo oprema i dozvola za pecanje.");
	SendClientMessage(playerid, BELA, "Nije Vam potrebna skola da bi radili kao ribar. Nadamo se da cete naci dobru druzinu tamo!");
	TimerTutorial[playerid] = SetTimerEx("PocetniTut", 17000, false, "ii", playerid, 13);}
else if(izbor == 13) {
	//SetPlayerCameraPos(playerid, 1331.9996, -1424.3234, 55.6316);
	//SetPlayerCameraLookAt(playerid, 1331.6726, -1423.3738, 55.0025);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1);
	InterpolateCameraPos(playerid, 951.250549, -2125.155029, 124.245536, 1060.635864, -2088.568115, 93.678985, 3000);
	InterpolateCameraLookAt(playerid, 955.719055, -2123.322753, 122.951324, 1064.647705, -2085.817871, 92.520851, 3000);
	ac_SetPlayerPos(playerid, 951.250549, -2125.155029, 124.245536);
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, FUSIONGAMING, ".:ORGANIZACIJE:.");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, BELA, "Na nasem serveru postoje bande, mafije i drzavne organizacije.");
	SendClientMessage(playerid, BELA, "Drzavne organizacije su organizacije poput policije i taksi sluzbe.");
	SendClientMessage(playerid, BELA, "Mafije i bande se bave ilegalnim poslovima i ratuju izmedju sebe, klonite ih se!");
	TimerTutorial[playerid] = SetTimerEx("PocetniTut", 17000, false, "ii", playerid, 14);}
else if(izbor == 14) {
	//SetPlayerCameraPos(playerid, 1331.9996, -1424.3234, 55.6316);
	//SetPlayerCameraLookAt(playerid, 1331.6726, -1423.3738, 55.0025);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1);
	InterpolateCameraPos(playerid, 124.076454, 1705.124023, 177.270736, 145.604278, 1759.252929, 107.942588, 4000);
	InterpolateCameraLookAt(playerid, 125.366760, 1708.271606, 173.606353, 146.989929, 1762.895263, 104.810020, 4000);
	ac_SetPlayerPos(playerid, 124.076454, 1705.124023, 177.270736);
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, FUSIONGAMING, ".:ALKATRAZ:.");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, BELA, "Alkatraz mesto gde niko ne zeli ni da pomisli da bude, mesto gde ste okruzeni sa 4 zida.");
	SendClientMessage(playerid, BELA, "Ovde zavrsavaju samo igraci koji se jako lose ponasaju! Trudite se da ne krsite pravila servera i RolePlay-a.");
	TimerTutorial[playerid] = SetTimerEx("PocetniTut", 17000, false, "ii", playerid, 15);}
else if(izbor == 15) {
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1);
	//InterpolateCameraPos(playerid, 811.637634, -897.638916, 110.817565, 2942.714111, -1546.280639, 94.192047, 30000, CAMERA_MOVE);
	//InterpolateCameraLookAt(playerid, 816.143005, -899.792785, 110.567672, 2939.016357, -1547.983520, 91.289039, 30000, CAMERA_MOVE);
	InterpolateCameraPos(playerid, 1182.8593, -1388.1046, 67.0030, 1214.9131, -1292.0134, 42.4529, 4000);
	InterpolateCameraLookAt(playerid, 1183.6987, -1387.5530, 66.5529, 1215.6923, -1292.6460, 42.0227, 4000);
	ac_SetPlayerPos(playerid, 1312.0939, -1334.4344, 12.8126);
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, FUSIONGAMING, ".:KRAJ:.");
	SendClientMessage(playerid, SIVA," ");
	SendClientMessage(playerid, BELA, "Stigli smo i do kraja ovog tutoriala, nadamo se da ste ga procitali i da ste naucili nesto.");
	SendClientMessage(playerid, BELA, "Hvala Vam sto ste odabrali nas server da zapocnete igru, obecavamo Vam da Vas necemo izneveriti.");
	SendClientMessage(playerid, BELA, "Dobro upamtite sledece komande koje ce Vam biti korisne ako ste pocetnik. {28E053]/pitaj /report /help /forum /teamspeak");
	SendClientMessage(playerid, BELA, "Zelimo Vam srecnu i ugodnu igru - Fusion Gaming Staff Team.");
	TimerTutorial[playerid] = SetTimerEx("PocetniTut", 22000, false, "ii", playerid, 16);}
else if(izbor == 16) {
	ClearChat(playerid, 25);
	PlayerInfo[playerid][xPocetniTut] = 1;
	ac_TogglePlayerSpectating(playerid, false); PlayerLogged[playerid] = true;
	antiCheatCS[playerid][TeleportCheck] = 4;
	antiCheatCS[playerid][WeaponDetect] = 4;
	SetCameraBehindPlayer(playerid); TogglePlayerControllable(playerid, true);
	ac_SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
	Fusion_SetSpawnInfo(playerid);
	ac_SpawnPlayer(playerid); SavePlayer(playerid);
	TimerTutorial[playerid] = SetTimerEx("PocetniTut", 300, false, "ii", playerid, 17);
	//CreatePlayerVehicles(playerid);}
else if(izbor == 17) {
	EnableAntiCheatForPlayer(playerid, 2, 1);
	EnableAntiCheatForPlayer(playerid, 7, 1);
	EnableAntiCheatForPlayer(playerid, 9, 1);
	EnableAntiCheatForPlayer(playerid, 0, 1);

	PocetniTutorialStartovan[playerid] = false;

	ServerInfo[RegistrovanihKorisnika]++;

	SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogTekstovi[1], "U redu", "");

	global_tds(playerid, true); // Pokazuje td-eve
	EnableHealthBarForPlayer(playerid, true);

	ResetAllWeapons(playerid);

	PlayerInfo[playerid][xGpsLevel] = 3;

	new playersip[128];
	GetPlayerIp(playerid, playersip, sizeof(playersip));
	new drzava[64];
	GetPlayerCountry(playerid, drzava, sizeof(drzava));

	if(strcmp(drzava, "Serbia", true) == 0) imaVPN[playerid] = 0;
	else if(strcmp(drzava, "Croatia", true) == 0) imaVPN[playerid] = 0;
	else if(strcmp(drzava, "Bosnia and Herzegovina", true) == 0) imaVPN[playerid] = 0;
	else if(strcmp(drzava, "Montenegro", true) == 0) imaVPN[playerid] = 0;
	else if(strcmp(drzava, "Macedonia", true) == 0) imaVPN[playerid] = 0;
	else if(strcmp(drzava, "Albania", true) == 0) imaVPN[playerid] = 0;
	else if(strcmp(drzava, "Romania", true) == 0) imaVPN[playerid] = 0;
	else if(strcmp(drzava, "Bulgaria", true) == 0) imaVPN[playerid] = 0;
	else if(strcmp(drzava, "Unknown", true) == 0) imaVPN[playerid] = 0;
	else imaVPN[playerid] = 1;

	new varstring[128];
	format(varstring, sizeof(varstring), "REGISTER: Igrac %s se registrovao na server(ID:%d)", ImeIgraca(playerid), playerid);
	RPTChat(ZUTA, varstring);
	format(varstring, sizeof(varstring), "REGISTER: "col_red"Idite i pomozite mu !!! "col_yelow"(/goto %d)", playerid);
	HelperPoruka(ZUTA, varstring);
	format(varstring, sizeof(varstring), "REGISTER: Drzava: %s, IP:%s", drzava, playersip);
	AdminPoruka(ZUTA, varstring);
	if(imaVPN[playerid] == 1) {
		format(varstring, sizeof(varstring), ""col_crvena">>> [ANTI-VPN]: %s("col_white"%d"col_crvena") nije sa naseg podrucja - Drzava: "col_white"%s", ImeIgraca(playerid), playerid, drzava);
		AdminPoruka(-1, varstring);
		new string[128];
		format(string, sizeof(string), "Igrac: %s | Drzava: %s", ImeIgraca(playerid), drzava);
		LogSave("Ostalo/LogVPN.log", string);
	}

	PlayerInfo[playerid][xSPoruke] = 1;
	PlayerInfo[playerid][xSOglasi] = 1;
	PlayerInfo[playerid][xSVesti] = 1;
	PlayerInfo[playerid][xSFChat] = 1;
	PlayerInfo[playerid][xSHud] = 1;
	if(PlayerInfo[playerid][xBrojTelefona] == 0) {
		PlayerInfo[playerid][xSTelefon] = 0;
	}
	else if(PlayerInfo[playerid][xBrojTelefona] != 0) {
		PlayerInfo[playerid][xSTelefon] = 1;
	}
	SetPlayerScore(playerid, PlayerInfo[playerid][xLevel]);}
return 1;}
//------------------------------------------------------------------------------
public KSpam(playerid)
{
if(GetPVarInt(playerid, "Kladjenje") == 1)
{
	SetPVarInt(playerid, "Kladjenje", 0);}
return 1;}
//------------------------------------------------------------------------------
forward RekordTimer(playerid);
public RekordTimer(playerid)
{
onlinepl++;
new string1[24];
format(string1, 24, "ONLINE:_~y~%d", NumberOfConnectedPlayers());
TextDrawSetString(FG_InGame[81], string1);
if(ServerInfo[RekordServera] < onlinepl)
{
	ServerInfo[RekordServera]=onlinepl;
	new string[256];
	format(string, sizeof(string), "{12e683]((REKORD)) - {FFFFFF]Upravo je oboren rekord i trenutni rekord je {12e683]%d{FFFFFF] igraca - HVALA VAM!", ServerInfo[RekordServera]);
	SCMA(-1, string);
	format(string1, 24, "ONLINE:_~y~%d", NumberOfConnectedPlayers());
	TextDrawSetString(FG_InGame[81], string1);
	format(string1, 24, "REKORD:_~y~%d", ServerInfo[RekordServera]);
	TextDrawSetString(FG_InGame[82], string1);}
return 1;}
stock razdvoji(const strsrc[], strdest[][], delimiter)
{
new i, li;
new aNum;
new len;
while(i <= strlen(strsrc))
{
	if(strsrc[i] == delimiter || i == strlen(strsrc))
	{
		len = strmid(strdest[aNum], strsrc, li, i, 128);
		strdest[aNum][len] = 0;
		li = i+1;
		aNum++;
	}
	i++;}
return 1;}

//------------------------------------------------------------------------------
ShowDialogStats(playerid)
{
if(IsPlayerConnected(playerid))
{

	new pol[7], str[1024], drzava[32];
	new varstring[144];

	new DialogStrgEx[1440];

	strcat(DialogStrgEx, ""col_white"-> Statistika korisnika\n\n");

	strcat(DialogStrgEx, ""col_white"Licna karta\n");

	if(PlayerInfo[playerid][xPol] == 1) pol = "Musko";
	else if(PlayerInfo[playerid][xPol] == 2) pol = "Zensko";

	switch(PlayerInfo[playerid][xDrzava]) {
		case 1: { drzava = "Las Venturas";}
		case 2: { drzava = "San Fierro";}
		case 3: { drzava = "Los Santos";}
		case 4: { drzava = "Fort Carson";}
		case 5: { drzava = "Palomino Creek";}
		case 6: { drzava = "Ostalo";}
	}

	format(str, sizeof(str), ""col_server"Ime i Prezime: "col_white"[%s]\n"col_server"Pol: "col_white"[%s]\n"col_server"Godine: "col_white"[%d]\n"col_server"Drzava: "col_white"[%s]\n\n",
		ImeIgraca(playerid),
		pol,
		PlayerInfo[playerid][xGodine],
		drzava);
	strcat(DialogStrgEx, str);
	strcat(DialogStrgEx, ""col_white"Posao\n");
	format(varstring, sizeof(varstring), ""col_server"Ime: "col_white"[%s]\n"col_server"Ugovor: "col_white"[%d/3]\n\n", getJobName(PlayerInfo[playerid][xPosao]), PlayerInfo[playerid][xUgovor]);
	strcat(DialogStrgEx, varstring);
	strcat(DialogStrgEx, ""col_white"Organizacija\n");

	format(str, sizeof(str), ""col_server"Ime: "col_white"[%s]\n"col_server"Rank: "col_white"[%s]\n"col_server"Vreme u org: "col_white"[%dh]\n\n",
		getOrgName(PlayerInfo[playerid][xClan]),
		getOrgRank(playerid, PlayerInfo[playerid][xClan]),
		PlayerInfo[playerid][xOrgUgovor]);

	strcat(DialogStrgEx, str);

	strcat(DialogStrgEx, ""col_white"Novcano stanje\n");
	format(str, sizeof(str), ""col_server"Dzep: "col_white"[%d$]\n"col_server"Banka: "col_white"[%d$]\n"col_server"Platni racun: "col_white"[%d$]\n"col_server"Zlato: "col_white"[%dg]\n\n",
		PlayerInfo[playerid][xNovac],
		PlayerInfo[playerid][xBRacun],
		PlayerInfo[playerid][xPlatniRacun],
		PlayerInfo[playerid][xZlato]);

	strcat(DialogStrgEx, str);

	new nxtlevel = PlayerInfo[playerid][xLevel]+1,
		expamount = nxtlevel*levelexp,
		exp = PlayerInfo[playerid][xRespekt],
		promoter[10];

	if(PlayerInfo[playerid][xPromoter] == 0) promoter = "Ne";
	else if(PlayerInfo[playerid][xPromoter] == 1) promoter = "Da";

	strcat(DialogStrgEx, ""col_white"Opste informacije\n");
	format(str, sizeof(str), ""col_server"Level: "col_white"[%d]\n"col_server"Sati igranja: "col_white"[%d]\n"col_server"Respekti: "col_white"[%d/%d]\n"col_server"Spawn Health: "col_white"[%.2f]\n"col_server"Admin: "col_white"[%s]\n"col_server"Helper Level: "col_white"[%d]\n"col_server"VIP Level: "col_white"[%d]\n"col_server"Trajanje VIPa: "col_white"[%dh]\n"col_server"Vreme do plate: "col_white"[%d min]\n",
		PlayerInfo[playerid][xLevel],
		PlayerInfo[playerid][xOnlineSati],
		exp,
		expamount,
		(50+PlayerInfo[playerid][xSHealth]),
		getAdminRankName(playerid),
		PlayerInfo[playerid][xHelper],
		PlayerInfo[playerid][xVIPLevel],
		PlayerInfo[playerid][xVipTime],
		(60-PlayerInfo[playerid][xPayDay]));
	strcat(DialogStrgEx, str);

	new osnovna[20], srednja[20], faks[20];

	if(PlayerInfo[playerid][xOsnovna] == 3) { osnovna = "Da";} else { osnovna = "Ne";}
	if(PlayerInfo[playerid][xSrednja] == 6) { srednja = "Da";} else { srednja = "Ne";}
	if(PlayerInfo[playerid][xFakultet] == 15) { faks = "Da";} else { faks = "Ne";}

	format(str, sizeof(str), ""col_server"Broj Telefona: "col_white"%d\n"col_server"Uhapsen: "col_white"%d\n"col_server"Ozenjen/Udata: "col_white"%s\n"col_server"Materijali: "col_white"%d\n"col_server"Upozorenja "col_white"[%d/5]\n"col_server"Promoter: "col_white"[%s]\n"col_server"RP Poeni: "col_white"[%d]\n"col_server"FG Poeni: "col_white"[%d]\n"col_server"Osnovna/Srednja/Fakultet: "col_white"[%s/%s/%s]\n\n",
		PlayerInfo[playerid][xBrojTelefona],
		PlayerInfo[playerid][xUhapsen],
		PlayerInfo[playerid][xMarriedTo],
		PlayerInfo[playerid][xMaterijali],
		PlayerInfo[playerid][xWarn],
		promoter,
		PlayerInfo[playerid][xRPPoen],
		PlayerInfo[playerid][xFGpoeni],
		osnovna,
		srednja,
		faks);

	strcat(DialogStrgEx, str);

	new year, month,day, tmphour, tmpminute, tmpsecond;
	getdate(year, month, day);
	gettimeEx(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	
	tmphour = shifthour;
	format(str, sizeof(str), "%02d/%02d/%d - %s%d:%s%d:%s%d", day, month, year, (tmphour < 10) ? ("0") : (""), tmphour, (tmpminute < 10) ? ("0") : (""), tmpminute, (tmpsecond < 10) ? ("0") : (""), tmpsecond);
	strcat(DialogStrgEx, str);
	SPD(playerid, dialog_STATS, DSMSG, D_NASLOV, DialogStrgEx, "Napred", "Zatvori");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));}
}
//------------------------------------------------------------------------------
ShowStats(playerid, targetid)
{
if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid))
{
	new pol[7];
	if(PlayerInfo[playerid][xPol] == 1) pol = "musko";
	else if(PlayerInfo[playerid][xPol] == 2) pol = "zensko";

	new varstring[110];

	new nxtlevel = PlayerInfo[targetid][xLevel]+1,
		expamount = nxtlevel*levelexp,
		warns = PlayerInfo[targetid][xWarn],
		level = PlayerInfo[targetid][xLevel],
		exp = PlayerInfo[targetid][xRespekt];

	new playersip[128];
	GetPlayerIp(targetid, playersip, sizeof(playersip));

	new weapon[13],
		weapname[13][50],
		bullets[13];

	for(new wslot = 0; wslot < 13; wslot++) {
		GetPlayerWeaponData(targetid, wslot, weapon[wslot], bullets[wslot]);

		GetWeaponName(weapon[wslot], weapname[wslot], 50);
	}


	SendClientMessage(playerid, 0x5BD3FFAA,"_________________________________________________");
	format(varstring, sizeof(varstring),"*** %s ***", ImeIgraca(targetid));
	SendClientMessage(playerid, FUSIONGAMING,varstring);
	format(varstring, sizeof(varstring), "Pol [%s] | Level:[%d] | Sati Igranja:[%d]", pol, level, PlayerInfo[targetid][xOnlineSati]);
	SendClientMessage(playerid, 0xFFFFFFAA,varstring);
	format(varstring, sizeof(varstring), "Respekt:[%d/%d] | Novac: [%d$] | Banka: [%d$]", exp, expamount, PlayerInfo[targetid][xNovac], PlayerInfo[targetid][xBRacun]);
	SendClientMessage(playerid, 0xFFFFFFAA,varstring);
	format(varstring, sizeof(varstring), "Upozorenja: [%d/5] | Posao: [%s] | Posao ugovor: [%d/3]", warns, getJobName(PlayerInfo[targetid][xPosao]), PlayerInfo[targetid][xUgovor]);
	SendClientMessage(playerid, 0xFFFFFFAA,varstring);
	format(varstring, sizeof(varstring), "Godine: [%d] | Organizacija: [%s] | Rank: [%d]", PlayerInfo[targetid][xGodine], getOrgName(PlayerInfo[targetid][xClan]), PlayerInfo[targetid][xRank]);
	SendClientMessage(playerid, 0xFFFFFFAA,varstring);
	format(varstring, sizeof(varstring), "Kljuc Imovine1 [%d] | Kljuc Imovine2 [%d] | Kljuc Imovine3 [%d]", PlayerInfo[targetid][xProperty][0], PlayerInfo[targetid][xProperty][1], PlayerInfo[targetid][xProperty][2]);
	SendClientMessage(playerid, 0xF0F0F0FF,varstring);
	format(varstring, sizeof(varstring), "Kljuc Firme [%d] | Garaza [%d] | WOF [%d]", PlayerInfo[targetid][xFirmaID], PlayerInfo[targetid][xGarageID], PlayerInfo[targetid][xWOF]);
	SendClientMessage(playerid, 0xF0F0F0FF,varstring);
	format(varstring, sizeof(varstring), "Kljuc Vozila1 [%d] | Kljuc Vozila2 [%d]", PlayerInfo[targetid][xVoziloID][0], PlayerInfo[targetid][xVoziloID][1]);
	SendClientMessage(playerid, 0xF0F0F0FF,varstring);
	format(varstring, sizeof(varstring), "Kljuc Vozila3 [%d] | Kljuc Vozila4 [%d]", PlayerInfo[targetid][xVoziloID][2], PlayerInfo[targetid][xVoziloID][3]);
	SendClientMessage(playerid, 0xF0F0F0FF,varstring);
	//format(varstring, sizeof(varstring), "Aktivnost igraca u staff timu: %d minuta", PlayerInfo[targetid][xStaffMin]);
	//SendClientMessage(playerid, 0xF0F0F0FF, varstring);
	format(varstring, sizeof(varstring), "Kljuc hotela: [%d] | IP Adresa: [%s] | Poslednji put ulogovan: [%s] ", PlayerInfo[targetid][xHotelID], playersip, PlayerInfo[targetid][xLastLogin]);
	SendClientMessage(playerid, 0xF0F0F0FF, varstring);
	format(varstring, sizeof(varstring), "%s[0] | %s[%d] | %s[%d] | %s[%d] | %s[%d] | %s[%d]", weapname[0], weapname[1], bullets[1], weapname[2], bullets[2], weapname[3], bullets[3], weapname[4], bullets[4], weapname[5], bullets[5]);
	SendClientMessage(playerid, 0xF0F0F0FF,  varstring);
	format(varstring, sizeof(varstring), "%s[%d] | %s[%d] | %s[%d] | %s[0] | %s[0] | %s[0]", weapname[6], bullets[6], weapname[7], bullets[7] ,weapname[8], bullets[8], weapname[9], weapname[10], weapname[11]);
	SendClientMessage(playerid, 0xF0F0F0FF,varstring);
	SendClientMessage(playerid, 0x5BD3FFAA,"_________________________________________________");}
}
//------------------------------------------------------------------------------
ShowPDStats(playerid, targetid)
{
if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid))
{
	new coordsstring[84];
	new DialogStrgEx[420];
	strcat(DialogStrgEx, "__________________________________________________________________\n");
	format(coordsstring, sizeof(coordsstring),"*** %s ***\n", ImeIgraca(targetid));
	strcat(DialogStrgEx, coordsstring);
	format(coordsstring, sizeof(coordsstring), "Dao ticketa: [%d] | Oduzeo novaca preko ticketa: [%d]\n", PlayerInfo[targetid][xPDStatsTicket], PlayerInfo[targetid][xPDStatsTicketMoney]);
	strcat(DialogStrgEx, coordsstring);
	format(coordsstring, sizeof(coordsstring), "Oduzeo oruzja: [%d] |  Oduzeo droge: [%d]\n", PlayerInfo[targetid][xTakenWeps], PlayerInfo[targetid][xTakenDrugs]);
	strcat(DialogStrgEx, coordsstring);
	format(coordsstring, sizeof(coordsstring), "Puta uhitio nekoga: [%d]\n", PlayerInfo[targetid][xPDUhapsio]);
	strcat(DialogStrgEx, coordsstring);
	strcat(DialogStrgEx, "__________________________________________________________________");
	SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));}
}
//------------------------------------------------------------------------------
ShowAdminStats(playerid, targetid) {
if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid)) {
	new varstring[128];
	new DialogStrgEx[420];
	strcat(DialogStrgEx, "__________________________________________________________________\n");
	format(varstring, sizeof(varstring),"*** %s ***\n", ImeIgraca(targetid));
	strcat(DialogStrgEx, varstring);
	format(varstring, sizeof(varstring), "Dao banova: [%d] | Dao warnova: [%d] | Kickovao puta: [%d]\n", AI[targetid][aTBan], AI[targetid][aTWarn], AI[targetid][aTKick]);
	strcat(DialogStrgEx, varstring);
	format(varstring, sizeof(varstring), "Oduzeo novca: [%d] | Odgovorenih PMova: [%d] |  Stavio u zatvor/areu: [%d]\n", AI[targetid][aTCharge], AI[targetid][aTPM], AI[targetid][aTJail]);
	strcat(DialogStrgEx, varstring);
	format(varstring, sizeof(varstring), "Unbanovao puta: [%d] |  Unwarnovao puta: [%d] |  Unjailovao puta: [%d]\n", AI[targetid][aTUnban] , AI[targetid][aTUnwarn] , AI[targetid][aTUnjail]);
	strcat(DialogStrgEx, varstring);
	format(varstring, sizeof(varstring), "On Duty Time: [%dh:%dmin]\n", PlayerInfo[targetid][xADutyTime]/60, PlayerInfo[targetid][xADutyTimeMin]);
	strcat(DialogStrgEx, varstring);
	strcat(DialogStrgEx, "__________________________________________________________________");
	SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));}
}
ShowHelperStats(playerid, targetid) {
if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid)) {
	new ifile[64];
	new varstring[128];
	new DialogStrgEx[420];
	format(ifile, sizeof(ifile), I_FILE, ImeIgraca(targetid));
	INI_ParseFile(ifile, "ShowOffStats");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
	strcat(DialogStrgEx, "__________________________________________________________________\n");
	format(varstring, sizeof(varstring),"*** Helper %s ***\n", ImeIgraca(targetid));
	strcat(DialogStrgEx, varstring);
	format(varstring, sizeof(varstring), "On Duty Time: [%dh:%dmin] | Odgovorenih ASKQ-ova: [%d]\n", PlayerInfo[targetid][xHDutyTime]/60, PlayerInfo[targetid][xHDutyTimeMin], PlayerInfo[targetid][xHAskq]);
	strcat(DialogStrgEx, varstring);
	format(varstring, sizeof(varstring), "Poslednji put ulogovan: %s\n", OfflineCheck[LastLogin]);
	strcat(DialogStrgEx, varstring);
	strcat(DialogStrgEx, "__________________________________________________________________");
	SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));}
}
//------------------------------------------------------------------------------
public BackupClear(playerid, calledbytimer) {
if(IsPlayerConnected(playerid)) {
	if(GetFactionType(playerid) == ORG_TIP_PD) {
		if(GetPVarInt(playerid, "RequestingBackup") == 1) {
			foreach(new i : Player) {
				if(IsPlayerConnected(i)) {
					if(OI[PlayerInfo[i][xClan]][oTip] == ORG_TIP_PD) {
						Fusion_DisablePlayerCheckpoint(i);
					}
				}
			}
			if(calledbytimer != 1) {
				SCM(playerid, 0x8D8DFF00, "Vase pojacanje je izbrisano.");
			}
			else {
				SCM(playerid, 0x8D8DFF00, "Vas zahtev za pojacanje je izbrisano automatksi.");
			}
			SetPVarInt(playerid, "RequestingBackup", 0);
		}
		else
		{
			if(calledbytimer != 1) {
				SendErrorMessage(playerid, "Nemate aktivan zahtev za pojacanje!");
			}
		}
	}
}
return 1;}

//------------------------------------------------------------------------------
public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart) {
	if(issuerid == INVALID_PLAYER_ID) return 1;
FakeKill[playerid][issuerid] = true;
if(issuerid != INVALID_PLAYER_ID && issuerid != INVALID_PLAYER_ID && amount == 0 && weapon == 0 && bodypart == 3) {
	new varstring[166];
	format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s je kickovan sa servera. Razlog: "col_white"Command kill", ImeIgraca(issuerid));
	AdminPoruka(SVETLOCRVENA, varstring);
	Kickovanje(playerid, "{af001d][ FG:RPG ] : {FFFFFF]Kikovani ste sa servera zbog koriscenja cheata. (Kill Hack)");
	return 0;}
if(PlayerInfo[issuerid][xLevel] <= 2)
{
	new Float:x, Float:y, Float:z;
	GameTextForPlayer(issuerid, "~r~Ne udarajte druge igrace. Bolje nadjite posao!", 5000, 3);
	GetPlayerPos(issuerid, x, y, z);
	ac_SetPlayerPos(issuerid, x, y, z+5);
	SCM(issuerid, CRVENA, "Ne udarajte druge igrace. Bolje nadjite posao!");}
//zastita za SAFE ZONE
new Float:php;
for(new Sz; Sz < MAX_SZONE; Sz++)
{
		if(IsPlayerInSafeZone(issuerid, Sz))
	{
		   //new Float:x, Float:y, Float:z;
		   //GetPlayerPos(issuerid, x, y, z);
		   //ac_SetPlayerPos(issuerid, x, y, z+5);
		   TogglePlayerControllable(issuerid, false);
		   SetTimerEx("SlobodnoSada", 3000, false, "i", issuerid);
		   SCM(issuerid, CRVENA, "Ne mozes napadati igrace u sigurnoj zoni!");
	}
	if(IsPlayerInSafeZone(playerid, Sz))
	{
		   GetPlayerHealth(playerid,php);
		   Fusion_SetPlayerHealth(playerid,98.0);
	}
}

if(issuerid != INVALID_PLAYER_ID) {
	if(OI[PlayerInfo[issuerid][xClan]][oTip] == ORG_TIP_PD && !IsPlayerInAnyVehicle(issuerid) && !IsPlayerInAnyVehicle(playerid) && GetWeapon(issuerid) == 23 && ImaTazer[issuerid] == true && !AdminDuty[playerid]) {
		if(GetFactionType(playerid) == ORG_TIP_PD) return SCM(issuerid, CRVENA, "Ne mozes tazovati PD!");

		new Float:Pos[3];
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		if(IsPlayerInRangeOfPoint(issuerid, 10.0, Pos[0], Pos[1], Pos[2])) {

			new varstring[90];
			format(varstring, sizeof(varstring), "%s puca tazerom na %s i pogadja ga.", ImeIgraca(issuerid), ImeIgraca(playerid));
			PorukaRadius(20.0, issuerid, varstring, LJUBICASTA);
			TogglePlayerControllable(playerid, false);

			if(Maskuse[playerid] == true) {
				SetPlayerName(playerid, RealName[playerid]);
				Maskuse[playerid] = false;
			}

			PlayerCuffed[playerid] = 1;
			Fusion_SetPlayerHealth(playerid, 50);
			SetPVarInt(playerid, "CuffTimerCalled", 1);
			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
			TazerTimer[playerid] = SetTimerEx("TazovanTajmer", 15000, false, "i", playerid);
			return 0;
		}
	}
	if(playerid != INVALID_PLAYER_ID && issuerid != INVALID_PLAYER_ID)
	{
		if(SKSK[playerid] == 1)
		{
			if(NaDmEventu[playerid] == false && WARPInfo[playerid][WARIgrac] == -1 && !AdminDuty[playerid] && PlayerCuffed[playerid] == 0)
			{
				if(PlayerInfo[playerid][xLevel] > 0)
				{
					Fusion_SetPlayerHealth(playerid, 98.0);
				}
				GameTextForPlayer(issuerid, "~r~Nemoj raditi~n~SpawnKill!", 5000, 1);
			}

		}
	}
}
return 1;}

public TazovanTajmer(playerid) {
if(PlayerCuffed[playerid] == 1) {

	PlayerCuffed[playerid] = 0;
	SetPVarInt(playerid, "CuffTimerCalled", 0);
	TogglePlayerControllable(playerid, true);
	GameTextForPlayer(playerid, "~y~Tazer zavrsen", 5000, 3);
	ClearAnimations(playerid);
	Fusion_KillTimer(TazerTimer[playerid]);}
return 1;}

OtherCheck(playerid) 
{
if(PlayerInfo[playerid][xZatvor] > 0) 
{
		 if(PlayerInfo[playerid][xZatvorVreme] > 0)
		PlayerInfo[playerid][xZatvorVreme] -= 1;

	if(PlayerInfo[playerid][xZatvorVreme] <= 0) 
	{
		if(PlayerInfo[playerid][xZatvor] == OBICAN_ZATVOR) 
		{
			new rand = random(sizeof(RandomCelije));
			ac_SetPlayerPos(playerid, RandomCelije[rand][0], RandomCelije[rand][1], RandomCelije[rand][2]);
			SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, false);
			ac_SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 1);
		}
		if(PlayerInfo[playerid][xZatvor] == ALKATRAZ) {
			SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
			ac_SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			ac_SetPlayerPos(playerid, 90.2101, 1920.4854, 17.9422);
		}
		PlayerInfo[playerid][xZatvor] = 0; PlayerInfo[playerid][xZatvorVreme] = 0;
		SendInfoMessage(playerid, "Isteklo vam je vreme zatvora, pusteni ste.");
		GameTextForPlayer(playerid, "~g~Sloboda~n~~w~Pokusajte biti bolji gradjanin", 5000, 1);

		ac_SetPlayerInterior(playerid, (false));
		SetPlayerVirtualWorld(playerid, (false));
	}
}
}
//------------------------------------------------------------------------------
stock CrimInRange(Float:radi, playerid, copid) {
if(IsPlayerConnected(playerid) && IsPlayerConnected(copid)) {
	new Float:posx,
		Float:posy,
		Float:posz,
		Float:oldposx,
		Float:oldposy,
		Float:oldposz,
		Float:tempposx,
		Float:tempposy;

	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	GetPlayerPos(copid, posx, posy, posz);

	tempposx = (oldposx -posx);
	tempposy = (oldposy -posy);

	if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)))
	{
		return 1;
	}
}
return 0;}
//------------------------------------------------------------------------------
public Provala(playerid)
{
new varstring[90];
for(new i = 1; i < MAX_IMOVINA; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 2, II[i][iEnter][0], II[i][iEnter][1], II[i][iEnter][2])) {
		if(GetPVarInt(playerid, "Pokusaj") == 1) {
			if(II[i][iAlarm] == 1) {
				format(varstring, sizeof(varstring), "[%s ALARM] BEEP BEEP BEEP!!", II[i][iAdress]);
				PorukaRadius(60.0, playerid, varstring, LJUBICASTA);
			}
			else if(II[i][iAlarm] == 2) {
				foreach(new h : Player) {
					if(IsPlayerConnected(h)) {
						if(strcmp(ImeIgraca(h), II[i][iOwner], true) == 0) {
							SCM(h, ZUTA, "SMS: Netko vam je provalio bravu! Pozovite policiju, Vas Alarm!");
						}
					}
				}
				format(varstring, sizeof(varstring), "[%s ALARM] BEEP BEEP BEEP!!", II[i][iAdress]);
				PorukaRadius(60.0, playerid, varstring, LJUBICASTA);
			}
			else if(II[i][iAlarm] >= 3)
			{
				foreach(new h : Player)
				{
					if(IsPlayerConnected(h))
					{
						if(strcmp(ImeIgraca(h), II[i][iOwner], true) == 0)
						{
							SCM(h, ZUTA, "SMS: Netko vam pokusava provaliti u kucu, Vas Alarm!");
						}
					}
				}
				for(new id = 1; id < MAX_ORG; id++) {
					if(OI[id][oTip] == ORG_TIP_PD) {
						OrgPoruka(id, 0x2641FEAA, "HQ: Svim jedinicama: Prijavio: Tihi Alarm");
						OrgPoruka(id, 0x2641FEAA, "HQ: Zlocin: Provala u kucu || Osumnjiceni: Nepoznat");
						format(varstring, sizeof(varstring), "HQ: Adresa kuce: %s", II[i][iAdress]);
						OrgPoruka(id, 0x2641FEAA, varstring);
						format(varstring, sizeof(varstring), "[%s ALARM] BEEP BEEP BEEP!!", II[i][iAdress]);
						PorukaRadius(60.0, playerid, varstring, LJUBICASTA);
					}
				}
			}
			II[i][iLocked] = 0; Odbrojavanje[playerid] = 0;
			VremeTDControl(playerid, false);
			SCM(playerid, SVETLOPLAVA, "Onesposobili ste bravu, sada mozete uci u kucu!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			TogglePlayerControllable(playerid, 1);
			SetPVarInt(playerid, "Pokusaj", 0);
		}
	}
}
return 1;}
//------------------------------------------------------------------------------
forward SaveSports();
public SaveSports() {

if(fexist(F_SPORT)) {
	fremove(F_SPORT);}

new File:_h_handler = fopen(F_SPORT, io_append), _s_str[256];

for(new i = 0; i < MAX_SPORTS; i++) {
	format(_s_str, sizeof(_s_str), "%d,%d,%s,%f,%f,%f\r\n", supportInfo[i][supportID], supportInfo[i][supportCreated], supportInfo[i][supportName], supportInfo[i][supportPos][0], supportInfo[i][supportPos][1], supportInfo[i][supportPos][2]);
	fwrite(_h_handler, _s_str);}

fclose(_h_handler);

return 1;}
forward LoadSports();
public LoadSports() {

if(fexist(F_SPORT)) {
	new File:_h_handler = fopen(F_SPORT, io_read), _l_str[256], i = 0;
	new arrCoords[6][64];
	while(fread(_h_handler, _l_str)) {
		split(_l_str, arrCoords, ',');
		supportInfo[i][supportID] = strval(arrCoords[0]);
		supportInfo[i][supportCreated] = strval(arrCoords[1]);
		strmid(supportInfo[i][supportName], arrCoords[2], 0, strlen(arrCoords[2]), 255);
		supportInfo[i][supportPos][0] = floatstr(arrCoords[3]);
		supportInfo[i][supportPos][1] = floatstr(arrCoords[4]);
		supportInfo[i][supportPos][2] = floatstr(arrCoords[5]);

		i++;
	}

	fclose(_h_handler);}

return 1;}
//------------------------------------------------------------------------------
forward SaveAports();
public SaveAports() {

if(fexist(F_APORT)) {
	fremove(F_APORT);}

new File:_h_handler = fopen(F_APORT, io_append), _s_str[256];

for(new i = 0; i < MAX_APORTS; i++) {
	format(_s_str, sizeof(_s_str), "%d,%d,%s,%f,%f,%f\r\n", aportInfo[i][aportID], aportInfo[i][aportCreated], aportInfo[i][aportName], aportInfo[i][aportPos][0], aportInfo[i][aportPos][1], aportInfo[i][aportPos][2]);
	fwrite(_h_handler, _s_str);}

fclose(_h_handler);

return 1;}
forward LoadAports();
public LoadAports() {

if(fexist(F_APORT)) {
	new File:_h_handler = fopen(F_APORT, io_read), _l_str[256], i = 0;
	new arrCoords[6][64];
	while(fread(_h_handler, _l_str)) {
		split(_l_str, arrCoords, ',');
		aportInfo[i][aportID] = strval(arrCoords[0]);
		aportInfo[i][aportCreated] = strval(arrCoords[1]);
		strmid(aportInfo[i][aportName], arrCoords[2], 0, strlen(arrCoords[2]), 255);
		aportInfo[i][aportPos][0] = floatstr(arrCoords[3]);
		aportInfo[i][aportPos][1] = floatstr(arrCoords[4]);
		aportInfo[i][aportPos][2] = floatstr(arrCoords[5]);

		i++;
	}

	fclose(_h_handler);}

return 1;}
//------------------------------------------------------------------------------
forward SaveVports();
public SaveVports() {

if(fexist(F_VPORT)) {
	fremove(F_VPORT);}

new File:_h_handler = fopen(F_VPORT, io_append), _s_str[256];

for(new i = 0; i < MAX_VPORTS; i++) {
	format(_s_str, sizeof(_s_str), "%d,%d,%s,%f,%f,%f\r\n", vportInfo[i][vportID], vportInfo[i][vportCreated], vportInfo[i][vportName], vportInfo[i][vportPos][0], vportInfo[i][vportPos][1], vportInfo[i][vportPos][2]);
	fwrite(_h_handler, _s_str);}

fclose(_h_handler);

return 1;}
forward LoadVports();
public LoadVports() {

if(fexist(F_VPORT)) {
	new File:_h_handler = fopen(F_VPORT, io_read), _l_str[256], i = 0;
	new arrCoords[6][64];
	while(fread(_h_handler, _l_str)) {
		split(_l_str, arrCoords, ',');
		vportInfo[i][vportID] = strval(arrCoords[0]);
		vportInfo[i][vportCreated] = strval(arrCoords[1]);
		strmid(vportInfo[i][vportName], arrCoords[2], 0, strlen(arrCoords[2]), 255);
		vportInfo[i][vportPos][0] = floatstr(arrCoords[3]);
		vportInfo[i][vportPos][1] = floatstr(arrCoords[4]);
		vportInfo[i][vportPos][2] = floatstr(arrCoords[5]);

		i++;
	}

	fclose(_h_handler);}

return 1;}
//------------------------------------------------------------------------------
forward SavePports();
public SavePports() {

if(fexist(F_PPORT)) {
	fremove(F_PPORT);}

new File:_h_handler = fopen(F_PPORT, io_append), _s_str[256];

for(new i = 0; i < MAX_PPORTS; i++) {
	format(_s_str, sizeof(_s_str), "%d,%d,%s,%f,%f,%f\r\n", pportInfo[i][pportID], pportInfo[i][pportCreated], pportInfo[i][pportName], pportInfo[i][pportPos][0], pportInfo[i][pportPos][1], pportInfo[i][pportPos][2]);
	fwrite(_h_handler, _s_str);}

fclose(_h_handler);

return 1;}
forward LoadPports();
public LoadPports() {

if(fexist(F_PPORT)) {
	new File:_h_handler = fopen(F_PPORT, io_read), _l_str[256], i = 0;
	new arrCoords[6][64];
	while(fread(_h_handler, _l_str)) {
		split(_l_str, arrCoords, ',');
		pportInfo[i][pportID] = strval(arrCoords[0]);
		pportInfo[i][pportCreated] = strval(arrCoords[1]);
		strmid(pportInfo[i][pportName], arrCoords[2], 0, strlen(arrCoords[2]), 255);
		pportInfo[i][pportPos][0] = floatstr(arrCoords[3]);
		pportInfo[i][pportPos][1] = floatstr(arrCoords[4]);
		pportInfo[i][pportPos][2] = floatstr(arrCoords[5]);

		i++;
	}

	fclose(_h_handler);}

return 1;}
//------------------------------------------------------------------------------
public SaveFurniture(hid) {
new _h_str[28];
format(_h_str, sizeof(_h_str), "Furniture/imovina_%03d.cfg", hid);

if(fexist(_h_str)) {
	fremove(_h_str);}

new File:_h_handler = fopen(_h_str, io_append), _s_str[256];

for (new i = 0; i < MAX_X_OBJECTS; i++) {
	format(_s_str, sizeof(_s_str), "%d,%f,%f,%f,%f,%f,%f,%d\r\n", Furniture[hid][i][f_Model], Furniture[hid][i][f_X], Furniture[hid][i][f_Y], Furniture[hid][i][f_Z], Furniture[hid][i][f_rX], Furniture[hid][i][f_rY], Furniture[hid][i][f_rZ], Furniture[hid][i][f_VW]);
	fwrite(_h_handler, _s_str);}

fclose(_h_handler);

return 1;}
public LoadFurniture(hid) {
new _h_str[28];
format(_h_str, sizeof(_h_str), "Furniture/imovina_%03d.cfg", hid);

if(fexist(_h_str)) {
	new File:_h_handler = fopen(_h_str, io_read), _l_str[256], i = 0;
	new arrCoords[8][64];
	while (fread(_h_handler, _l_str)) {
		split(_l_str, arrCoords, ',');
		Furniture[hid][i][f_Model] = strval(arrCoords[0]);
		Furniture[hid][i][f_X] = floatstr(arrCoords[1]);
		Furniture[hid][i][f_Y] = floatstr(arrCoords[2]);
		Furniture[hid][i][f_Z] = floatstr(arrCoords[3]);
		Furniture[hid][i][f_rX] = floatstr(arrCoords[4]);
		Furniture[hid][i][f_rY] = floatstr(arrCoords[5]);
		Furniture[hid][i][f_rZ] = floatstr(arrCoords[6]);
		Furniture[hid][i][f_VW] = strval(arrCoords[7]);
		//sscanf(_l_str, "p<|>e<dffffffd>", Furniture[hid][i]);
		if(Furniture[hid][i][f_Model]) {
			Furniture[hid][i][f_Object] = CreateDynamicObject(Furniture[hid][i][f_Model], Furniture[hid][i][f_X], Furniture[hid][i][f_Y], Furniture[hid][i][f_Z], Furniture[hid][i][f_rX], Furniture[hid][i][f_rY], Furniture[hid][i][f_rZ], II[hid][iVW], II[hid][iInterior], -1, 200.0);
		} else {
			Furniture[hid][i][f_VW] = 0;
			Furniture[hid][i][f_X] = 0.0;
			Furniture[hid][i][f_Y] = 0.0;
			Furniture[hid][i][f_Z] = 0.0;
			Furniture[hid][i][f_rX] = 0.0;
			Furniture[hid][i][f_rY] = 0.0;
			Furniture[hid][i][f_rZ] = 0.0;
		}

		i++;
	}

	fclose(_h_handler);
	SaveFurniture(hid);}

return 1;}
//------------------------------------------------------------------------------
forward RobZiceAtm(playerid);
public RobZiceAtm(playerid) {

if(playerid != IPI && PlayerLogged[playerid] && robbingATM[playerid] != -1) {

	if(robbingATM[playerid] == GetNearestAtm(playerid)) {

		new stringic[128];

		robbingATMSeconds[playerid]--;

		format(stringic, sizeof(stringic), "~w~Ostani pored ~r~bankomata ~w~dok~n~vreme ne istekne %d sec!", robbingATMSeconds[playerid]);
		GameTextForPlayer(playerid, stringic, 1000, 4);

		if(robbingATMSeconds[playerid] == 0) {

			Fusion_KillTimer(atmrobTimer[playerid]);

			new brojcina = random(14);

			robbingATMSeconds[playerid] = 95;
			if(brojcina < 7) {
				atmTDControl(playerid, false);
				PostaviWanted(playerid, "Pokusaj pljacke bankomata", "Nepoznati", 3);

				atmInfo[robbingATM[playerid]][atmVremeDoRoba] = 60;
				SacuvajATM(robbingATM[playerid]);
				PlayerInfo[playerid][xPljackaVreme] = 60;

				SendInfoMessage(playerid, "Isekli ste pogresnu zicu i oglasili alarm.");
			}
			else if(brojcina >= 7) {

				SelectTextDraw(playerid, FUSIONGAMING);

				atmInfo[robbingATM[playerid]][atmPreseceneZice] = true;
				SacuvajATM(robbingATM[playerid]);

				SendInfoMessage(playerid, "Uspesno ste srusili odbrambeni sistem.");
				SendInfoMessage(playerid, "Sada mozete ukrasti novac iz bankomata.");
			}
			EnableAntiCheatForPlayer(playerid, 49, 1);
		}
	}
	else {
		atmTDControl(playerid, false);

		Fusion_KillTimer(atmrobTimer[playerid]);

		PostaviWanted(playerid, "Pokusaj pljacke bankomata", "Nepoznati", 3);
		atmInfo[robbingATM[playerid]][atmVremeDoRoba] = 60;
		SacuvajATM(robbingATM[playerid]);
		PlayerInfo[playerid][xPljackaVreme] = 60;

		robbingATM[playerid] = -1;
		robbingATMSeconds[playerid] = 95;

		EnableAntiCheatForPlayer(playerid, 49, 1);
		SendInfoMessage(playerid, "Pomerili ste se od bankomata i probijanje istog je prekinuto.");
	}
}
}
//------------------------------------------------------------------------------
forward ProgresAtmBar(playerid);
public ProgresAtmBar(playerid) {
if(robbingATM[playerid] == GetNearestAtm(playerid)) {
	new Float:Value = GetPlayerProgressBarValue(playerid, playeratmBar[playerid]);
	if(Value != 100) {
		SetPlayerProgressBarValue(playerid, playeratmBar[playerid], Value+1);

		new stringic[5];
		format(stringic, sizeof(stringic), "%d%", floatround(Value+1));
		PlayerTextDrawSetString(playerid, atmrobLoading[playerid][1], stringic);

		atmrobTimer[playerid] = SetTimerEx("ProgresAtmBar", 1000, false, "d", playerid);
	}
	else if(Value == 100) {
		if(LaptopRuke[playerid]) {
			SelectTextDraw(playerid, FUSIONGAMING);
			Fusion_KillTimer(atmrobTimer[playerid]);
			atmLoadingTDControl(playerid, false);

			HidePlayerProgressBar(playerid, playeratmBar[playerid]);
			DestroyPlayerProgressBar(playerid, playeratmBar[playerid]);
			playeratmBar[playerid] = PlayerBar:INVALID_PLAYER_BAR_ID;

			atmInfo[robbingATM[playerid]][atmProbijenBios] = true;
			SacuvajATM(robbingATM[playerid]);

			SendInfoMessage(playerid, "Uspesno ste srusili odbrambeni sistem.");
			SendInfoMessage(playerid, "Sada mozete prebaciti novac na vas racun.");

			EnableAntiCheatForPlayer(playerid, 49, 1);

			robbingATM[playerid] = -1;
		}
		else {
			atmTDControl(playerid, false);

			Fusion_KillTimer(atmrobTimer[playerid]);
			atmLoadingTDControl(playerid, false);

			HidePlayerProgressBar(playerid, playeratmBar[playerid]);
			DestroyPlayerProgressBar(playerid, playeratmBar[playerid]);
			playeratmBar[playerid] = PlayerBar:INVALID_PLAYER_BAR_ID;

			PostaviWanted(playerid, "Pokusaj pljacke bankomata", "Nepoznati", 3);

			atmInfo[robbingATM[playerid]][atmVremeDoRoba] = 60;
			SacuvajATM(robbingATM[playerid]);
			PlayerInfo[playerid][xPljackaVreme] = 60;

			robbingATM[playerid] = -1;

			EnableAntiCheatForPlayer(playerid, 49, 1);
			SendInfoMessage(playerid, "Nemate laptop u rukama i prekunuta vam je pljacka.");
		}
	}
}
else {
	atmTDControl(playerid, false);

	Fusion_KillTimer(atmrobTimer[playerid]);
	atmLoadingTDControl(playerid, false);

	HidePlayerProgressBar(playerid, playeratmBar[playerid]);
	DestroyPlayerProgressBar(playerid, playeratmBar[playerid]);
	playeratmBar[playerid] = PlayerBar:INVALID_PLAYER_BAR_ID;

	PostaviWanted(playerid, "Pokusaj pljacke bankomata", "Nepoznati", 3);

	atmInfo[robbingATM[playerid]][atmVremeDoRoba] = 60;
	SacuvajATM(robbingATM[playerid]);
	PlayerInfo[playerid][xPljackaVreme] = 60;

	robbingATM[playerid] = -1;

	EnableAntiCheatForPlayer(playerid, 49, 1);
	SendInfoMessage(playerid, "Pomerili ste se od bankomata i vase hakovanje istog je prekinuto.");}
}
//------------------------------------------------------------------------------
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid) {
new varstring[144];
if(_:playertextid != INVALID_TEXT_DRAW) {
		if(playertextid == BuyCar[playerid][1]) {
			new as = GetNearestSalon(playerid), slotid = AutoSalon[as][aIzlogVeh];
		if(as != -1) {
			if(ModelCar[playerid] == (AutoSalon[as][aMaxVehModel]-1)) return 1;

			ModelCar[playerid]++;

			new string[128];
			format(string, sizeof(string), "%s", ImeVozila[AutoSalon[as][aVehModel][ModelCar[playerid]]-400]);
			PlayerTextDrawSetString(playerid, BuyCar[playerid][3], string);


			format(string, sizeof(string), "~w~%d$", VehPrice[AutoSalon[as][aVehModel][ModelCar[playerid]]-400][1]);
			PlayerTextDrawSetString(playerid, BuyCar[playerid][7], string);

			format(string, sizeof(string), "~w~%dg", VehPrice[AutoSalon[as][aVehModel][ModelCar[playerid]]-400][2]);
			PlayerTextDrawSetString(playerid, BuyCar[playerid][11], string);

			PlayerTextDrawSetPreviewModel(playerid, BuyCar[playerid][5],AutoSalon[as][aVehModel][ModelCar[playerid]]);
			PlayerTextDrawShow(playerid, BuyCar[playerid][5]);
			PlayerTextDrawSetPreviewModel(playerid, BuyCar[playerid][12],AutoSalon[as][aVehModel][ModelCar[playerid]]);
			PlayerTextDrawShow(playerid, BuyCar[playerid][12]);
			PlayerTextDrawSetPreviewModel(playerid, BuyCar[playerid][9],AutoSalon[as][aVehModel][ModelCar[playerid]]);
			PlayerTextDrawShow(playerid, BuyCar[playerid][9]);

			SetPlayerCameraPos(playerid, AutoSalon[as][aCameraPos][0], AutoSalon[as][aCameraPos][1], AutoSalon[as][aCameraPos][2]);
			SetPlayerCameraLookAt(playerid, AutoSalon[as][aCameraLookAt][0], AutoSalon[as][aCameraLookAt][1], AutoSalon[as][aCameraLookAt][2]);

			Fusion_DestroyVehicle(VehicleInfo[slotid][vID]);
			VehicleInfo[slotid][vID] = Fusion_CreateVehicle(slotid, VehicleInfo[slotid][vUsage], VehicleInfo[slotid][vOrganization], VehicleInfo[slotid][vJob], VehicleInfo[slotid][vFuelStation], AutoSalon[as][aVehModel][ModelCar[playerid}}, VehicleInfo[slotid][vLokacijaX], VehicleInfo[slotid][vLokacijaY], VehicleInfo[slotid][vLokacijaZ]+1.0, VehicleInfo[slotid][vLokacijaA], -1, -1, -1);
			SetVehicleVirtualWorld(VehicleInfo[slotid][vID], AutoSalon[as][aVW]);
			ac_LinkVehicleToInterior(VehicleInfo[slotid][vID], AutoSalon[as][aInt]);

			SelectTextDraw(playerid, FUSIONGAMING);
		}
		return true;
	}
		if(playertextid == BuyCar[playerid][4]) {
			new as = GetNearestSalon(playerid), slotid = AutoSalon[as][aIzlogVeh];
		if(as != -1) {
			if(ModelCar[playerid] == 0) return 1;
			ModelCar[playerid]--;

			new string[128];
			format(string, sizeof(string), "%s", ImeVozila[AutoSalon[as][aVehModel][ModelCar[playerid]]-400]);
			PlayerTextDrawSetString(playerid, BuyCar[playerid][3], string);

			format(string, sizeof(string), "~w~%d$", VehPrice[AutoSalon[as][aVehModel][ModelCar[playerid]]-400][1]);
			PlayerTextDrawSetString(playerid, BuyCar[playerid][7], string);

			format(string, sizeof(string), "~w~%dg", VehPrice[AutoSalon[as][aVehModel][ModelCar[playerid]]-400][2]);
			PlayerTextDrawSetString(playerid, BuyCar[playerid][11], string);

			PlayerTextDrawSetPreviewModel(playerid, BuyCar[playerid][5],AutoSalon[as][aVehModel][ModelCar[playerid]]);
			PlayerTextDrawShow(playerid, BuyCar[playerid][5]);
			PlayerTextDrawSetPreviewModel(playerid, BuyCar[playerid][12],AutoSalon[as][aVehModel][ModelCar[playerid]]);
			PlayerTextDrawShow(playerid, BuyCar[playerid][12]);
			PlayerTextDrawSetPreviewModel(playerid, BuyCar[playerid][9],AutoSalon[as][aVehModel][ModelCar[playerid]]);
			PlayerTextDrawShow(playerid, BuyCar[playerid][9]);

			SetPlayerCameraPos(playerid, AutoSalon[as][aCameraPos][0], AutoSalon[as][aCameraPos][1], AutoSalon[as][aCameraPos][2]);
			SetPlayerCameraLookAt(playerid, AutoSalon[as][aCameraLookAt][0], AutoSalon[as][aCameraLookAt][1], AutoSalon[as][aCameraLookAt][2]);

			Fusion_DestroyVehicle(VehicleInfo[slotid][vID]);
			VehicleInfo[slotid][vID] = Fusion_CreateVehicle(slotid, VehicleInfo[slotid][vUsage], VehicleInfo[slotid][vOrganization], VehicleInfo[slotid][vJob], VehicleInfo[slotid][vFuelStation], AutoSalon[as][aVehModel][ModelCar[playerid}}, VehicleInfo[slotid][vLokacijaX], VehicleInfo[slotid][vLokacijaY], VehicleInfo[slotid][vLokacijaZ]+1.0, VehicleInfo[slotid][vLokacijaA], -1, -1, -1);
			SetVehicleVirtualWorld(VehicleInfo[slotid][vID], AutoSalon[as][aVW]);
			ac_LinkVehicleToInterior(VehicleInfo[slotid][vID], AutoSalon[as][aInt]);

			SelectTextDraw(playerid, FUSIONGAMING);
		}
		return true;
	}
	if(playertextid == BuyCar[playerid][8]) {
		new as = GetNearestSalon(playerid), slotid = AutoSalon[as][aIzlogVeh];
		if(as != -1) {
			AutoSalon[as][AlreadyBuying] = false;

			PlayerBuyingAS[playerid] = -1;
			ModelCar[playerid] = 0;

			Fusion_DestroyVehicle(VehicleInfo[slotid][vID]);
			VehicleInfo[slotid][vID] = Fusion_CreateVehicle(slotid, VehicleInfo[slotid][vUsage], VehicleInfo[slotid][vOrganization], VehicleInfo[slotid][vJob], VehicleInfo[slotid][vFuelStation], AutoSalon[as][aVehModel][0], VehicleInfo[slotid][vLokacijaX], VehicleInfo[slotid][vLokacijaY], VehicleInfo[slotid][vLokacijaZ]+1.0, VehicleInfo[slotid][vLokacijaA], -1, -1, -1);
			SetVehicleVirtualWorld(VehicleInfo[slotid][vID], AutoSalon[as][aVW]);
			ac_LinkVehicleToInterior(VehicleInfo[slotid][vID], AutoSalon[as][aInt]);

			BuyCarTDControl(playerid, false);
			TogglePlayerControllable(playerid, true);

			SetCameraBehindPlayer(playerid);
			CancelSelectTextDraw(playerid);
		}
		return true;
	}
	if(playertextid == BuyCar[playerid][10])  {

		new as = GetNearestSalon(playerid);
		if(as != -1) {

			new DialogStrgEx[356];

			strcat(DialogStrgEx, ""col_server"__________________________________________________________________\n");
			format(varstring, sizeof(varstring),""col_white"Da li ste sigurni da zelite kupiti vozilo "col_server"%s.\n", ImeVozila[AutoSalon[as][aVehModel][ModelCar[playerid]]-400]);
			strcat(DialogStrgEx, varstring);
			format(varstring, sizeof(varstring),""col_white"Cena: "col_server"%dg zlata.\n", VehPrice[AutoSalon[as][aVehModel][ModelCar[playerid]]- 400][2]);
			strcat(DialogStrgEx, varstring);
			strcat(DialogStrgEx, ""col_server"__________________________________________________________________");

			SPD(playerid, dialog_VEHGOLDBUY, DSMSG, D_NASLOV, DialogStrgEx, "Kupi", "Odustani");
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));


		}
		return true;
	}
	if(playertextid == BuyCar[playerid][6])  {

		new as = GetNearestSalon(playerid);
		if(as != -1) {

			new DialogStrgEx[356];

			strcat(DialogStrgEx, ""col_server"__________________________________________________________________\n");
			format(varstring, sizeof(varstring),""col_white"Da li ste sigurni da zelite kupiti vozilo "col_server"%s.\n", ImeVozila[AutoSalon[as][aVehModel][ModelCar[playerid]]-400]);
			strcat(DialogStrgEx, varstring);
			format(varstring, sizeof(varstring),""col_white"Cena: "col_server"%d$.\n", VehPrice[AutoSalon[as][aVehModel][ModelCar[playerid]]- 400][1]);
			strcat(DialogStrgEx, varstring);
			strcat(DialogStrgEx, ""col_server"__________________________________________________________________");

			SPD(playerid, dialog_VEHMONEYBUY, DSMSG, D_NASLOV, DialogStrgEx, "Kupi", "Odustani");
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));


		}
		return true;
	}
	if(playertextid == fg_betTD[playerid][31]) {

		new str[128];

		new DialogStrgEx[545];
		strcat(DialogStrgEx, str);

		for(new i = 0; i < 10; i++) {

			format(str, sizeof(str), "%s vs %s\n", bettingInfo[Parovi[i][parID][0]][teamName], bettingInfo[Parovi[i][parID][1]][teamName]);

			strcat(DialogStrgEx, str);
		}

		SPD(playerid, dialog_UPLATITIKET, DSL, "Izaberi par:", DialogStrgEx, "Izaberi", "Odustani");
		strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
		return true;
	}
		if(playertextid == RegisterTD[playerid][10]) {
		SPD(playerid, dialog_REGISTER, DSI, "Registracija", "Password moze sadrzavati minimalno 6 a maximalno 24 znaka", "Registriraj", "Izadji");
		return true;
	}
	if(playertextid == RegisterTD[playerid][18]) {
		SPD(playerid, dialog_POL, DSMSG, "Pol", "Izaberite pol vaseg IC lika", "Musko", "Zensko");
		return true;
	}
	if(playertextid == RegisterTD[playerid][25]) { // desno
		if(BiraPol[playerid] > 0) {
			if(BiraPol[playerid] == 1) {
				BiraPol[playerid] = 2;
			}
			else if(BiraPol[playerid] == 2) {
				BiraPol[playerid] = 1;
			}
		}
		if(BiraSkin[playerid] > 0) {
			if(RegSex[playerid] == 1) { // musko
				if(BiraSkin[playerid] == 4) BiraSkin[playerid] = 0;
				BiraSkin[playerid]++;
				PlayerInfo[playerid][xSkin] = MaleSkinIDs[BiraSkin[playerid]-1][0];
				SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
				new ranims = random(sizeof(RandomRegAnims));
				ApplyAnimation(playerid, RandomRegAnims[ranims][0], RandomRegAnims[ranims][1], 4.0, 1, 1, 1, 0, -1);
			}
			else if(RegSex[playerid] == 2) { // zensko
				if(BiraSkin[playerid] == 4) BiraSkin[playerid] = 0;
				BiraSkin[playerid]++;
				PlayerInfo[playerid][xSkin] = FemaleSkinIDs[BiraSkin[playerid]-1][0];
				SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
				new ranims = random(sizeof(RandomRegAnims));
				ApplyAnimation(playerid, RandomRegAnims[ranims][0], RandomRegAnims[ranims][1], 4.0, 1, 1, 1, 0, -1);
			}
		}
		return true;
	}
	if(playertextid == RegisterTD[playerid][24]) { // levo
		if(BiraPol[playerid] > 0) {
			if(BiraPol[playerid] == 1) {
				BiraPol[playerid] = 2;
			}
			else if(BiraPol[playerid] == 2) {
				BiraPol[playerid] = 1;
			}
		}
		if(BiraSkin[playerid] > 0) {
			if(RegSex[playerid] == 1) { // musko
				if(BiraSkin[playerid] == 1) BiraSkin[playerid] = 5;
				BiraSkin[playerid]--;
				PlayerInfo[playerid][xSkin] = MaleSkinIDs[BiraSkin[playerid]-1][0];	      
				SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
				new ranims = random(sizeof(RandomRegAnims));
				ApplyAnimation(playerid, RandomRegAnims[ranims][0], RandomRegAnims[ranims][1], 4.0, 1, 1, 1, 0, -1);
			}
			else if(RegSex[playerid] == 2) { // zensko
				if(BiraSkin[playerid] == 1) BiraSkin[playerid] = 5;
				BiraSkin[playerid]--;
				PlayerInfo[playerid][xSkin] = FemaleSkinIDs[BiraSkin[playerid]-1][0];
				SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
				new ranims = random(sizeof(RandomRegAnims));
				ApplyAnimation(playerid, RandomRegAnims[ranims][0], RandomRegAnims[ranims][1], 4.0, 1, 1, 1, 0, -1);
			}
		}
		return true;
	}
	if(playertextid == RegisterTD[playerid][21]) { // skin
		PlayerTextDrawShow(playerid, RegisterTD[playerid][24]);
		PlayerTextDrawShow(playerid, RegisterTD[playerid][25]);
		PlayerTextDrawColor(playerid, RegisterTD[playerid][20], FUSIONGAMING);
		PlayerTextDrawShow(playerid, RegisterTD[playerid][20]);
		if(RegSex[playerid] == 1) {
			PlayerInfo[playerid][xSkin] = 29;
			SetPlayerSkin(playerid, MaleSkinIDs[0][0]);
		}
		else if(RegSex[playerid] == 2) {
			PlayerInfo[playerid][xSkin] = 214;
			SetPlayerSkin(playerid, FemaleSkinIDs[0][0]);
		}
		BiraPol[playerid] = 0;
		BiraSkin[playerid] = 1;
		return true;
	}
	if(playertextid == RegisterTD[playerid][16]) {
		SPD(playerid, dialog_COUNTRY, DSL, "Poreklo", "Srbija\nHrvatska\nMakedonija\nCrna Gora\nBosna i Hercegovina\nOstalo", "Odabir", "Izadji");
		return true;
	}
	if(playertextid == RegisterTD[playerid][14]) {
		SPD(playerid, dialog_AGE, DSI, "Godine", "U prazni prostor ispod unesite vase godine\nMinimalno 12 maximalno 70", "Unos", "Izadji");
		return true;
	}
	if(playertextid == RegisterTD[playerid][12]) {
		SPD(playerid, dialog_MAIL, DSI, "Mail", "U prazni prostor ispod unesite vasu e-mail adresu.\nE-mail adresa ce nam posluziti u vracanju vasih passworda.(Bez maila nema vracanja passworda)", "Unos", "Izadji");
		return true;
	}
	if(playertextid == RegisterTD[playerid][23]) {
		if(InputPassword[playerid] == false) return SendErrorMessage(playerid, "Nisi odabrao lozinku.");
		if(ChoseCountry[playerid] == false) return SendErrorMessage(playerid, "Nisi odabrao poreklo.");
		if(InputAge[playerid] == false) return SendErrorMessage(playerid, "Nisi odabrao godine starosti.");
		if(InputMail[playerid] == false) return SendErrorMessage(playerid, "Nisi uneo email.");
		if(RegSex[playerid] == 0) return SendErrorMessage(playerid, "Nisi odabrao pol.");
		CancelSelectTextDraw(playerid);
		IgracSeRegistruje[playerid] = false;
		RegisterTDControl(playerid, false);
		EnableHealthBarForPlayer(playerid, false);
		PlayerInfo[playerid][xRegistrovan] = 1;
		PlayerInfo[playerid][xPocetniTut] = 0;
		PlayerInfo[playerid][xSpawn] = SetRandomSpawn(playerid);
		PlayerInfo[playerid][xLevel] = ServerInfo[PocetniLevel];
		SetPlayerVirtualWorld(playerid, 0);
		ac_SetPlayerInterior(playerid,0);
		new datum[64]; new year, month,day;
		getdate(year, month, day);
		new tmphour, tmpminute, tmpsecond;
		gettimeEx(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		
		tmphour = shifthour;
			format(datum, sizeof(datum), "%02d.%02d.%d. u %d:%d:%d", day, month, year, tmphour, tmpminute, tmpsecond);
		strmid(PlayerInfo[playerid][xLastLogin], datum, 0, strlen(datum), 64);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerScore(playerid, PlayerInfo[playerid][xLevel]);
		DajIgracuNovac(playerid, ServerInfo[PocetniNovaca]);
		PlayerInfo[playerid][xGpsLevel] = 3;
		SavePlayer(playerid);
		SendInfoMessage(playerid, "Uspesno ste se registrovali na Fusion Gaming RPG te vam zelimo dobrodoslicu!");
		ac_TogglePlayerSpectating(playerid, true);
		fg_info_tds(playerid, false);

	//----------------------------------------------------------------//

		InterpolateCameraPos(playerid, 1442.196777, -1036.519042, 98.164505, 1437.779174, -877.146728, 79.653503, 10000);
		InterpolateCameraLookAt(playerid, 1441.901733, -1031.603759, 97.296478, 1437.557250, -872.178222, 79.139259, 10000);
		ac_SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 1);
		ac_SetPlayerPos(playerid, 1442.196777, -1036.519042, 98.164505);
		SendClientMessage(playerid, SIVA," ");
		SendClientMessage(playerid, SIVA," ");
		SendClientMessage(playerid, SIVA," ");
		SendClientMessage(playerid, SIVA," ");
		SendClientMessage(playerid, SIVA," ");
		SendClientMessage(playerid, SIVA," ");
		SendClientMessage(playerid, FUSIONGAMING, ".:FUSION GAMING:.");
		SendClientMessage(playerid, SIVA," ");
		SendClientMessage(playerid, BELA, "Dobrodosli na Fusion Gaming, hvala vam sto ste odlucili da zapocnete igru ovde.");
		SendClientMessage(playerid, BELA, "Bice Vam prikazan tutorijal o serveru, nadamo se da cete dobro upamtiti neke stvari!");
		TimerTutorial[playerid] = SetTimerEx("PocetniTut", 17000, false, "ii", playerid, 1);
		PocetniTutorialStartovan[playerid] = true;
		return true;
	}
	if(playertextid == TuningBuy[playerid][7]) { // desno
		if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu.");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti na mestu vozaca.");

		if(TPInfo[playerid][tPaintjob] == false) {

			new compid = -1, vehicleid = GetPlayerVehicleID(playerid);

			for(new i = (TPInfo[playerid][tID]+1); i < MAX_COMPONENTS; i++) {
				if(cInfo[i][cType] == TPInfo[playerid][tType]) {
					if(cInfo[i][cID] == IsComponentidCompatible(GetVehicleModel(vehicleid), cInfo[i][cID])) {
						compid = i;
						break;
					}
				}
			}
			if(compid == -1) return SendErrorMessage(playerid, "Nema vise kompatibilnih komponenti izabrane vrste za vas model auta.");

			RemoveVehicleComponent(vehicleid, cInfo[TPInfo[playerid][tID]][cID]);

			TPInfo[playerid][tID] = compid;

			format(varstring, sizeof(varstring), "%s", cInfo[compid][cName]);
			PlayerTextDrawSetString(playerid, TuningBuy[playerid][3], varstring);

			AddVehicleComponent(vehicleid, cInfo[compid][cID]);

			SelectTextDraw(playerid, FUSIONGAMING);
		}
		else if(TPInfo[playerid][tPaintjob] == true) {

			new paintid = -1, vehicleid = GetPlayerVehicleID(playerid);

			for(new i = (TPInfo[playerid][tID]+1); i < NUMBER_TYPE_PAINTJOB; i++) {
				if(pjInfo[i][vehID] == GetVehicleModel(vehicleid)) {
					paintid = i;
					break;
				}
			}
			if(paintid == -1) return SendErrorMessage(playerid, "Nema vise kompatibilnih boja za vas model auta.");

			TPInfo[playerid][tID] = paintid;

			format(varstring, sizeof(varstring), "%s", pjInfo[paintid][pNameBre]);
			PlayerTextDrawSetString(playerid, TuningBuy[playerid][3], varstring);

			ChangeVehiclePaintjob(vehicleid, pjInfo[paintid][pNumber]);

			SelectTextDraw(playerid, FUSIONGAMING);
		}
		return true;
	}
	if(playertextid == TuningBuy[playerid][8]) { // levo
		if(TPInfo[playerid][tPaintjob] == false) {

			if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu.");
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti na mestu vozaca.");

			new compid = -1, vehicleid = GetPlayerVehicleID(playerid);

			for(new i = (TPInfo[playerid][tID]-1); i > 0; i--) {
				if(cInfo[i][cType] == TPInfo[playerid][tType]) {
					if(cInfo[i][cID] == IsComponentidCompatible(GetVehicleModel(vehicleid), cInfo[i][cID])) {
						compid = i;
						break;
					}
				}
			}
			if(compid == -1) return SendErrorMessage(playerid, "Nema vise kompatibilnih komponenti izabrane vrste za vas model auta.");

			RemoveVehicleComponent(vehicleid, cInfo[TPInfo[playerid][tID]][cID]);

			TPInfo[playerid][tID] = compid;

			format(varstring, sizeof(varstring), "%s", cInfo[compid][cName]);
			PlayerTextDrawSetString(playerid, TuningBuy[playerid][3], varstring);

			AddVehicleComponent(vehicleid, cInfo[compid][cID]);

			SelectTextDraw(playerid, FUSIONGAMING);
		}
		else if(TPInfo[playerid][tPaintjob] == true) {

			new paintid = -1, vehicleid = GetPlayerVehicleID(playerid);

			for(new i = (TPInfo[playerid][tID]-1); i > 0; i--) {
				if(pjInfo[i][vehID] == GetVehicleModel(vehicleid)) {
					paintid = i;
					break;
				}
			}
			if(paintid == -1) return SendErrorMessage(playerid, "Nema vise kompatibilnih boja za vas model auta.");

			TPInfo[playerid][tID] = paintid;

			format(varstring, sizeof(varstring), "%s", pjInfo[paintid][pNameBre]);
			PlayerTextDrawSetString(playerid, TuningBuy[playerid][3], varstring);

			ChangeVehiclePaintjob(vehicleid, pjInfo[paintid][pNumber]);

			SelectTextDraw(playerid, FUSIONGAMING);
		}
		return true;
	}
	if(playertextid == TuningBuy[playerid][9]) { // buy
		if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu.");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti na mestu vozaca.");

		new Float:Pos[6], vehicleid = GetPlayerVehicleID(playerid);

		if(TPInfo[playerid][tPaintjob] == false) {

			new cid = TPInfo[playerid][tID];

			RemoveVehicleComponent(vehicleid, cInfo[TPInfo[playerid][tID]][cID]);

			VehicleInfo[vehicleid][vTuned] = true;

			AddVehicleComponent(vehicleid, cInfo[cid][cID]);

		}
		else if(TPInfo[playerid][tPaintjob] == true) {

			new paintid = TPInfo[playerid][tID];

			VehicleInfo[vehicleid][vTuned] = true;

			VehicleInfo[vehicleid][vPaintJob] = pjInfo[paintid][pNumber];

			ChangeVehicleColor(vehicleid, TPInfo[playerid][PJColor][0], TPInfo[playerid][PJColor][1]);

			ChangeVehiclePaintjob(vehicleid, pjInfo[paintid][pNumber]);

		}
		GetVehicleCameraPos(vehicleid, Pos[0], Pos[1], Pos[2], 0, 6, 2);
		SetPlayerCameraPos(playerid, Pos[0], Pos[1], Pos[2]);

		GetVehiclePos(vehicleid, Pos[0],Pos[1],Pos[2]);
		SetPlayerCameraLookAt(playerid, Pos[0],Pos[1],Pos[2]);

		CancelSelectTextDraw(playerid);

		TuningTDShow(playerid, false);
		TogglePlayerControllable(playerid, true);

		SPD(playerid, dialog_TUNING, DSL, D_NASLOV, "Paintjobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nWheels\nCar Stereo\nHydraulics\nNitro", D_ODABERI, D_ODUSTANI);
		return true;
	}
	if(playertextid == TuningBuy[playerid][13]) { // close

		if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu.");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti na mestu vozaca.");

		new Float:Pos[6], vehicleid = GetPlayerVehicleID(playerid);

		if(TPInfo[playerid][tPaintjob] == false) {

			RemoveVehicleComponent(vehicleid, cInfo[TPInfo[playerid][tID]][cID]);
		}
		else if(TPInfo[playerid][tPaintjob] == true) {
			ChangeVehiclePaintjob(vehicleid, 3);
			ChangeVehicleColor(vehicleid, TPInfo[playerid][PJColor][0], TPInfo[playerid][PJColor][1]);
		}

		GetVehicleCameraPos(vehicleid, Pos[0], Pos[1], Pos[2], 0, 6, 2);
		SetPlayerCameraPos(playerid, Pos[0], Pos[1], Pos[2]);

		GetVehiclePos(vehicleid, Pos[0],Pos[1],Pos[2]);
		SetPlayerCameraLookAt(playerid, Pos[0],Pos[1],Pos[2]);

		CancelSelectTextDraw(playerid);

		TuningTDShow(playerid, false);
		TogglePlayerControllable(playerid, true);

		SPD(playerid, dialog_TUNING, DSL, D_NASLOV, "Paintjobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nWheels\nCar Stereo\nHydraulics\nNitro", D_ODABERI, D_ODUSTANI);
		return true;
	}
	//
	if(playertextid == atmTD[playerid][1]) { // presecanje zica
		new atmid = GetNearestAtm(playerid);
		if(atmid == -1) return SendErrorMessage(playerid, "Nisi pored bankomata.");
		if(atmInfo[atmid][atmPreseceneZice] == true) return SendErrorMessage(playerid, "Vec su presecene zice.");
		if(atmInfo[atmid][atmVremeDoRoba] != 0) return SendErrorMessage(playerid, "Ovaj bankomat je vec opljackan.");
		if(GetWeapon(playerid) != 4) return SendErrorMessage(playerid, "Morate da imate noz u rukama");

		atmrobTimer[playerid] = SetTimerEx("RobZiceAtm", 1000, true, "d", playerid);
		robbingATM[playerid] = atmid;
		robbingATMSeconds[playerid] = 95;

		CancelSelectTextDraw(playerid);
		SendInfoMessage(playerid, "Poceli ste sa obijanjem bankomata, ne pomerajte se sa svog mesta.");
		return true;
	}
	if(playertextid == atmTD[playerid][2]) { // ulazak u bios
		new atmid = GetNearestAtm(playerid);
		if(!LaptopRuke[playerid]) return SendErrorMessage(playerid, "Nemate laptop u rukama.");
		if(atmid == -1) return SendErrorMessage(playerid, "Nisi pored bankomata.");
		if(atmInfo[atmid][atmProbijenBios] == true) return SendErrorMessage(playerid, "Vec je hakovan ovaj bankomat.");
		if(atmInfo[atmid][atmVremeDoRoba] != 0) return SendErrorMessage(playerid, "Ovaj bankomat je vec opljackan.");

		playeratmBar[playerid] = CreatePlayerProgressBar(playerid, 191.00, 197.00, 259.50, 5.19, FUSIONGAMING, 100.0, BAR_DIRECTION_RIGHT);
		SetPlayerProgressBarValue(playerid, playeratmBar[playerid], 0.0);
		ShowPlayerProgressBar(playerid, playeratmBar[playerid]);

		robbingATM[playerid] = atmid;
		atmLoadingTDControl(playerid, true);

		PlayerTextDrawSetString(playerid, atmrobLoading[playerid][1], "0%");

		atmrobTimer[playerid] = SetTimerEx("ProgresAtmBar", 1000, false, "d", playerid);

		CancelSelectTextDraw(playerid);
		return true;
	}
	if(playertextid == atmTD[playerid][3]) { // kradja novca
		new atmid = GetNearestAtm(playerid);
		if(atmid == -1) return SendErrorMessage(playerid, "Nisi pored bankomata.");
		if(atmInfo[atmid][atmVremeDoRoba] != 0) return SendErrorMessage(playerid, "Ovaj bankomat je vec opljackan.");
		if(atmInfo[atmid][atmPreseceneZice] == true) {
			new pokusaj = random(4);
			if(pokusaj == 1) {
				Fusion_KillTimer(atmrobTimer[playerid]);

				SendInfoMessage(playerid, "Niste uspeli ukrasti novac, alarm se oglasio.");
				PostaviWanted(playerid, "Pokusaj pljacke bankomata", "Nepoznati", 3);

				atmInfo[atmid][atmVremeDoRoba] = 60;
				SacuvajATM(atmid);
				PlayerInfo[playerid][xPljackaVreme] = 60;

				EnableAntiCheatForPlayer(playerid, 49, 1);
				atmTDControl(playerid, false);
			}
			else {
				Fusion_KillTimer(atmrobTimer[playerid]);

				new money = (random(15000)+40000);
				DajIgracuNovac(playerid, money);
				SavePlayer(playerid); update_fg_info_tds(playerid);
				SendInfoMessage(playerid, "Uspesno ste ukrali iz bankomata %d$.", money);
				PostaviWanted(playerid, "Pljacka bankomata", "Nepoznati", 3);

				atmInfo[atmid][atmVremeDoRoba] = 120;
				SacuvajATM(atmid);
				PlayerInfo[playerid][xPljackaVreme] = 120;

				EnableAntiCheatForPlayer(playerid, 49, 1);
				atmTDControl(playerid, false);
			}
		}
		else if(atmInfo[atmid][atmProbijenBios] == true) {
			new pokusaj = random(4);
			if(pokusaj == 1) {
				Fusion_KillTimer(atmrobTimer[playerid]);

				SendInfoMessage(playerid, "Niste uspeli prebaciti novac na vas racun, sistem zastite bankomata je ponovno podignut.");
				PostaviWanted(playerid, "Pokusaj pljacke bankomata", "Nepoznati", 3);

				atmInfo[atmid][atmVremeDoRoba] = 60;
				SacuvajATM(atmid);
				PlayerInfo[playerid][xPljackaVreme] = 60;

				EnableAntiCheatForPlayer(playerid, 49, 1);
				atmTDControl(playerid, false);
			}
			else {
				Fusion_KillTimer(atmrobTimer[playerid]);

				new money = (random(5000)+10000);
				PlayerInfo[playerid][xBRacun] += money;
				SavePlayer(playerid); update_fg_info_tds(playerid);
				SendInfoMessage(playerid, "Uspesno ste sa bankomata prebacili %d$ na vas racun.", money);
				PostaviWanted(playerid, "Pljacka bankomata", "Nepoznati", 3);

				atmInfo[atmid][atmVremeDoRoba] = 120;
				SacuvajATM(atmid);
				PlayerInfo[playerid][xPljackaVreme] = 120;

				EnableAntiCheatForPlayer(playerid, 49, 1);
				atmTDControl(playerid, false);
			}
		}
		else return SendErrorMessage(playerid, "Moras prvo da hakujes bankomat ili da mu preseces zice.");
		return true;
	}
	//
	if(playertextid == buyWatch[playerid][3]) {
		new text[30];
		if(WatchModel[playerid] == 19039) {
			if(PlayerInfo[playerid][xNovac] < 521) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
			DajIgracuNovac(playerid, -521);
			text = "Rolex Datejust za 521$";
			PlayerInfo[playerid][xSat] = 19039;
		}
		else if(WatchModel[playerid] == 19040) {
			if(PlayerInfo[playerid][xNovac] < 618) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
			DajIgracuNovac(playerid, -618);
			text = "Emporio Armani za 618$";
			PlayerInfo[playerid][xSat] = 19040;
		}
		else if(WatchModel[playerid] == 19041) {
			if(PlayerInfo[playerid][xNovac] < 723) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
			DajIgracuNovac(playerid, -723);
			text = "Casio G-Shock za 723$";
			PlayerInfo[playerid][xSat] = 19041;
		}
		else if(WatchModel[playerid] == 19042) {
			if(PlayerInfo[playerid][xNovac] < 819) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
			DajIgracuNovac(playerid, -819);
			text = "Michael Kors za 819$";
			PlayerInfo[playerid][xSat] = 19042;
		}
		else if(WatchModel[playerid] == 19043) {
			if(PlayerInfo[playerid][xNovac] < 916) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
			DajIgracuNovac(playerid, -916);
			text = "Hugo Boss za 916$";
			PlayerInfo[playerid][xSat] = 19043;
		}

		SendInfoMessage(playerid, "Uspesno si kupio sat marke %s.(koristi komandu /time).", text);

		SavePlayer(playerid);

		buyWatchTDControl(playerid, false);
		return true;
	}
	if(playertextid == buyWatch[playerid][7]) {
		SendInfoMessage(playerid, "Odustali ste od kupovine sata.");
		buyWatchTDControl(playerid, false);
		return true;
	}
	if(playertextid == buyWatch[playerid][4]) {
		new text[30];
		if(WatchModel[playerid] == 19043) return 1;
		WatchModel[playerid]++;
		PlayerTextDrawSetPreviewModel(playerid, buyWatch[playerid][1], WatchModel[playerid]);
		PlayerTextDrawShow(playerid, buyWatch[playerid][1]);
		if(WatchModel[playerid] == 19039) text = "Rolex Datejust - 521$";
		else if(WatchModel[playerid] == 19040) text = "Emporio Armani - 618$";
		else if(WatchModel[playerid] == 19041) text = "Casio G-Shock - 723$";
		else if(WatchModel[playerid] == 19042) text = "Michael Kors - 819$";
		else if(WatchModel[playerid] == 19043) text = "Hugo Boss - 916$";
		PlayerTextDrawSetString(playerid, buyWatch[playerid][2], text);
		return true;
	}
	if(playertextid == buyWatch[playerid][5]) {
		new text[30];
		if(WatchModel[playerid] == 19039) return 1;
		WatchModel[playerid]--;
		PlayerTextDrawSetPreviewModel(playerid, buyWatch[playerid][1], WatchModel[playerid]);
		PlayerTextDrawShow(playerid, buyWatch[playerid][1]);
		if(WatchModel[playerid] == 19039) text = "Rolex Datejust - 521$";
		else if(WatchModel[playerid] == 19040) text = "Emporio Armani - 618$";
		else if(WatchModel[playerid] == 19041) text = "Casio G-Shock - 723$";
		else if(WatchModel[playerid] == 19042) text = "Michael Kors - 819$";
		else if(WatchModel[playerid] == 19043) text = "Hugo Boss - 916$";
		PlayerTextDrawSetString(playerid, buyWatch[playerid][2], text);
		return true;
	}
	//
		if(playertextid == Ormar[playerid][8]) {
			if(II[inProperty[playerid]][iSkin][0] == GetPlayerSkin(playerid)) { II[inProperty[playerid]][iSkin][0] = 0;}
			if(II[inProperty[playerid]][iSkin][1] == GetPlayerSkin(playerid)) { II[inProperty[playerid]][iSkin][1] = 0;}
			if(II[inProperty[playerid]][iSkin][2] == GetPlayerSkin(playerid)) { II[inProperty[playerid]][iSkin][2] = 0;}

		SaveProperty(inProperty[playerid]);
		PlayerInfo[playerid][xSkin] = GetPlayerSkin(playerid);
		SCM(playerid, FUSIONGAMING, "Obukli ste drugu odecu. ");
		ac_SetPlayerPos(playerid, II[inProperty[playerid]][iExit][0], II[inProperty[playerid]][iExit][1], II[inProperty[playerid]][iExit][2]);
		ac_SetPlayerInterior(playerid, II[inProperty[playerid]][iInterior]);
		SetPlayerVirtualWorld(playerid, II[inProperty[playerid]][iVW]);
		ClearAnimations(playerid);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, false);
		CancelSelectTextDraw(playerid);
		OrmarTDControl(playerid, false);
		TogglePlayerControllable(playerid, true);
		return true;
	}
		if(playertextid == Ormar[playerid][3]) {
			if(II[inProperty[playerid]][iSkin][0] == 0) return SendErrorMessage(playerid, " U ovom slotu nemate odecu.");
			c_SetPlayerSkin(playerid, II[inProperty[playerid]][iSkin][0]); ApplyAnimation(playerid, "CLOTHES","CLO_Pose_Legs",4.1,1,0,0,0,0, 1);
			return true;
		}
		if(playertextid == Ormar[playerid][4]) {
			if(II[inProperty[playerid]][iSkin][1] == 0) return SendErrorMessage(playerid, " U ovom slotu nemate odecu.");
			c_SetPlayerSkin(playerid, II[inProperty[playerid]][iSkin][1]); ApplyAnimation(playerid, "CLOTHES","CLO_Pose_Legs",4.1,1,0,0,0,0, 1);
			return true;
		}
		if(playertextid == Ormar[playerid][5]) {
			if(II[inProperty[playerid]][iSkin][2] == 0) return SendErrorMessage(playerid, " U ovom slotu nemate odecu.");
			c_SetPlayerSkin(playerid, II[inProperty[playerid]][iSkin][2]); ApplyAnimation(playerid, "CLOTHES","CLO_Pose_Legs",4.1,1,0,0,0,0, 1);
			return true;
		}
		if(playertextid == Ormar[playerid][9]) {
			ac_SetPlayerPos(playerid, II[inProperty[playerid]][iExit][0], II[inProperty[playerid]][iExit][1], II[inProperty[playerid]][iExit][2]);
		ac_SetPlayerInterior(playerid, II[inProperty[playerid]][iInterior]);
		SetPlayerVirtualWorld(playerid, II[inProperty[playerid]][iVW]);
		SCM(playerid, FUSIONGAMING, "Odustali ste od oblacenja nove odece. ");
		c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
		ClearAnimations(playerid);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, false);
		CancelSelectTextDraw(playerid);
		OrmarTDControl(playerid, false);
		TogglePlayerControllable(playerid, true);
		return true;
		}
		if(playertextid == ObjektTD[playerid][4]) {
		if(ListaoObjekte[playerid] == 0) return 1;
		ListaoObjekte[playerid]--;
		new i = ListaoObjekte[playerid];
		DestroyDynamicObject(glavniobjekt);
		glavniobjekt = CreateDynamicObject(OBPR[i][0], OBPR1[i][0], OBPR1[i][1], OBPR1[i][2],  OBPR1[i][3], OBPR1[i][4], OBPR1[i][5]);
		Streamer_Update(playerid);

		format(varstring, sizeof(varstring), "cena: ~w~%d$", OBPR[i][1]);
		PlayerTextDrawSetString(playerid, ObjektTD[playerid][1], varstring);
		return true;
		}
	if(playertextid == ObjektTD[playerid][2]) {

		if(ListaoObjekte[playerid] == (MAX_OBJ_FURNITURE-1)) return 1;
		ListaoObjekte[playerid]++;
		new i = ListaoObjekte[playerid];
		DestroyDynamicObject(glavniobjekt);
		glavniobjekt = CreateDynamicObject(OBPR[i][0], OBPR1[i][0], OBPR1[i][1], OBPR1[i][2],  OBPR1[i][3], OBPR1[i][4], OBPR1[i][5]);
		Streamer_Update(playerid);

		format(varstring, sizeof(varstring), "cena: ~w~%d$", OBPR[i][1]);
		PlayerTextDrawSetString(playerid, ObjektTD[playerid][1], varstring);
		return true;
		}
		if(playertextid == ObjektTD[playerid][5]) {
			new i = ListaoObjekte[playerid];

		if(ServerInfo[Namestaj] == 0) return SendErrorMessage(playerid, "Nema vise namestaja u resursima za namestaje.");

			if(PlayerInfo[playerid][xNovac] < OBPR[i][1]) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
		if(PlayerInfo[playerid][xObject][0] == -1) { PlayerInfo[playerid][xObject][0] = OBPR[i][0];}
		else if(PlayerInfo[playerid][xObject][1] == -1) { PlayerInfo[playerid][xObject][1] = OBPR[i][0];}
		else if(PlayerInfo[playerid][xObject][2] == -1) { PlayerInfo[playerid][xObject][2] = OBPR[i][0];}
		else if(PlayerInfo[playerid][xObject][3] == -1) { PlayerInfo[playerid][xObject][3] = OBPR[i][0];}
		else if(PlayerInfo[playerid][xObject][4] == -1) { PlayerInfo[playerid][xObject][4] = OBPR[i][0];}
		else if(PlayerInfo[playerid][xObject][5] == -1) { PlayerInfo[playerid][xObject][5] = OBPR[i][0];}
		else if(PlayerInfo[playerid][xObject][6] == -1) { PlayerInfo[playerid][xObject][6] = OBPR[i][0];}
		else if(PlayerInfo[playerid][xObject][7] == -1) { PlayerInfo[playerid][xObject][7] = OBPR[i][0];}
		else if(PlayerInfo[playerid][xObject][8] == -1) { PlayerInfo[playerid][xObject][8] = OBPR[i][0];}
		else if(PlayerInfo[playerid][xObject][9] == -1) { PlayerInfo[playerid][xObject][9] = OBPR[i][0];}
		else { SendErrorMessage(playerid, "Vec ste kupili 10 objekta, nema mesta vise u kamionu."); return 1; }
		DajIgracuNovac(playerid, -OBPR[i][1]);
		SCM(playerid, FUSIONGAMING, "Uspesno ste kupili namestaj!");
		SCM(playerid, FUSIONGAMING, "Na mjestu gdje zelite postaviti namestaj, upisite /namestaj postavi");
		SCM(playerid, FUSIONGAMING, "Mozete kupiti 10 namestaja odjednom.");
		ServerInfo[Namestaj] -= 1;
			SaveServerStats();
			return true;
		}
		if(playertextid == ObjektTD[playerid][3]) {

		nekokupujenamestaj = 0;
		KupujeNamestaj[playerid] = 0;
		ListaoObjekte[playerid] = 0;
		TogglePlayerControllable(playerid, true);
		DestroyDynamicObject(glavniobjekt);
		SetCameraBehindPlayer(playerid);
		CancelSelectTextDraw(playerid);
		ObjektTDControl(playerid, false);
		return true;
		}
		if(playertextid == Police_TV[playerid][7]) {
			SPD(playerid, dialog_SEARCH_NAME, DSI, D_NASLOV, "Upisite Ime i prezime gradjanina(Ime_Prezime) kojega zelite potraziti u bazi podataka:", D_ODABERI, D_ODUSTANI);
			return true;
		}
		if(playertextid == Police_TV[playerid][8]) {
		SPD(playerid, dialog_SEARCH_NUMBERPLATE, DSI, D_NASLOV, "Unesite broj tablice u prazno polje.(bez nula-00 i bez LS(samo broj))", D_ODABERI, D_ODUSTANI);
			return true;
		}
		if(playertextid == Police_TV[playerid][9]) {
			new DialogStrgEx[545];
			strcat(DialogStrgEx, "|_______-=Popis svih zatvorenika=-________|\n");
		foreach(new i : Player) {
			if(IsPlayerConnected(i)) {
				if(PlayerInfo[i][xZatvor] == OBICAN_ZATVOR) {
					format(varstring, sizeof(varstring), "%s\n", ImeIgraca(i));
					strcat(DialogStrgEx, varstring);
				}
			}
		}
		SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
		strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
		return true;
		}
		if(playertextid == Police_TV[playerid][10]) {
			new DialogStrgEx[545];
			strcat(DialogStrgEx, "|_______-=Popis svih osumnjicenih=-________|\n");
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][xWanted] > 0)
				{
					format(varstring, sizeof(varstring), "- %s | Wanted Level: %d\n", ImeIgraca(i), PlayerInfo[i][xWanted]);
					strcat(DialogStrgEx, varstring);
				}
			}
		}
		SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
		strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
		return true;
		}
		if(playertextid == Police_TV[playerid][11]) {
			if(GetPVarInt(playerid, "RequestingBackup") != 1) {
			format(varstring, sizeof(varstring), "SVE JEDINICE: %s trazi pojacanje i oznacen je na GPSu (crveno).", ImeIgraca(playerid));
			SetPVarInt(playerid, "RequestingBackup", 1);

			foreach(new i : Player) {
				if(IsPlayerConnected(i)) {
					if(OI[PlayerInfo[i][xClan]][oTip] == ORG_TIP_PD) {
						SetPlayerMarkerForPlayer(i, playerid, 0xFF0000FF);
						SCM(i, 0x8D8DFF00, varstring);
					}
				}
			}
			SCM(playerid, 0x8D8DFF00, "Ukucajte /bkc da bi ste izbrisali pojacanje.");
			backuptimer[playerid] = SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
		} else return SendErrorMessage(playerid, "Vec imate aktivan zahtev za pojacanje!");
		return true;
	}
		if(playertextid == Police_TV[playerid][12]) {
			SPD(playerid, dialog_OCISTIDOSIJE, DSI, D_NASLOV, "Upisite Ime i prezime gradjanina(Ime_Prezime).", D_ODABERI, D_ODUSTANI);
			return true;
	}
		if(playertextid == Police_TV[playerid][13]) {
			SPD(playerid, dialog_POSTAVIPOTERU, DSI, D_NASLOV, "Upisite Ime i prezime gradjanina(Ime_Prezime) i razlog optuzbe.", D_ODABERI, D_ODUSTANI);
			return true;
		}
		//
		if(playertextid == PizzaMenu[playerid][7]) {

		if(PlayerInfo[playerid][xNovac] < 67) return SendErrorMessage(playerid, "Nemate dovoljno novca 67$!");
		BusinessMoney(uFirmi[playerid] , 67, playerid);
		DajIgracuNovac(playerid, -67);
		//DajIgracuGlad(playerid, 13);
		DodajIgracuHP(playerid, 30);
		format(varstring, sizeof(varstring), "* %s uzima kupljene stvari od prodavacice i jede.", ImeIgraca(playerid));
		PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
		OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		PizzaMenuTDControl(playerid, false);
			return true;
		}
		if(playertextid == PizzaMenu[playerid][10]) {

		if(PlayerInfo[playerid][xNovac] < 79) return SendErrorMessage(playerid, "Nemate dovoljno novca 79$!");
		BusinessMoney(uFirmi[playerid] , 79, playerid);
		DajIgracuNovac(playerid, -79);
		//DajIgracuGlad(playerid, 14);
		DodajIgracuHP(playerid, 30);
		format(varstring, sizeof(varstring), "* %s uzima kupljene stvari od prodavacice i jede.", ImeIgraca(playerid));
		PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
		OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		PizzaMenuTDControl(playerid, false);
			return true;
		}
		if(playertextid == PizzaMenu[playerid][13]) {

		if(PlayerInfo[playerid][xNovac] < 81) return SendErrorMessage(playerid, "Nemate dovoljno novca 81$!");

		BusinessMoney(uFirmi[playerid] , 81, playerid);
		DajIgracuNovac(playerid, -81);
		//DajIgracuGlad(playerid, 15);
		DodajIgracuHP(playerid, 30);

		format(varstring, sizeof(varstring), "* %s uzima kupljene stvari od prodavacice i jede.", ImeIgraca(playerid));
		PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
		OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		PizzaMenuTDControl(playerid, false);
			return true;
		}
		if(playertextid == PizzaMenu[playerid][16]) {

		if(PlayerInfo[playerid][xNovac] < 89) return SendErrorMessage(playerid, "Nemate dovoljno novca 89$!");

		BusinessMoney(uFirmi[playerid] , 89, playerid);
		DajIgracuNovac(playerid, -89);
		//DajIgracuGlad(playerid, 16);
		DodajIgracuHP(playerid, 30);

		format(varstring, sizeof(varstring), "* %s uzima kupljene stvari od prodavacice i jede.", ImeIgraca(playerid));
		PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
		OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		PizzaMenuTDControl(playerid, false);
			return true;
		}
		if(playertextid == PizzaMenu[playerid][19]) {

		if(PlayerInfo[playerid][xNovac] < 98) return SendErrorMessage(playerid, "Nemate dovoljno novca 98$!");

		BusinessMoney(uFirmi[playerid] , 98, playerid);
		DajIgracuNovac(playerid, -98);
		//DajIgracuGlad(playerid, 17);
		DodajIgracuHP(playerid, 30);

		format(varstring, sizeof(varstring), "* %s uzima kupljene stvari od prodavacice i jede.", ImeIgraca(playerid));
		PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
		OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		PizzaMenuTDControl(playerid, false);
			return true;
		}
		if(playertextid == PizzaMenu[playerid][22]) {

		if(PlayerInfo[playerid][xNovac] < 108) return SendErrorMessage(playerid, "Nemate dovoljno novca 108$!");

		BusinessMoney(uFirmi[playerid] , 108, playerid);
		DajIgracuNovac(playerid, -108);
		//DajIgracuGlad(playerid, 18);
		DodajIgracuHP(playerid, 30);

		format(varstring, sizeof(varstring), "* %s uzima kupljene stvari od prodavacice i jede.", ImeIgraca(playerid));
		PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
		OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		PizzaMenuTDControl(playerid, false);
			return true;
		}
	}
	return 1;}

//------------------------------------------------------------------------------
DrugCheck(playerid) {
new hour,minuite,second;

if(PlayerDrugged[playerid] == true) {

	if(GetPVarInt(playerid, "PlayerDruggedSeconds") > 0)
		PovecajPVarInt(playerid, "PlayerDruggedSeconds", -1);
	else {
		gettimeEx(hour, minuite, second);
		FixHour(hour);
		hour = shifthour;

		SetPlayerDrunkLevel(playerid, 0);
		PlayerDrugged[playerid] = false;
		SetPVarInt(playerid, "PlayerDruggedSeconds", 0);
		PlayerStoned[playerid] = false;
		SetPlayerWeather(playerid, 6);
		SetPlayerTime(playerid, hour, minuite);
	}
}
}
//------------------------------------------------------------------------------
public CarCheck(playerid)
{
new Float:health;
if(IsPlayerConnected(playerid)) {

	GetPlayerHealth(playerid, health);
	if(NaDmEventu[playerid] == false && WARPInfo[playerid][WARIgrac] == -1) {
		if(PlayerInfo[playerid][xHeroinAddict] == true && PlayerInfo[playerid][xHeroinUsed] < 1)
		{
			Fusion_SetPlayerHealth(playerid, health - 3.5);
			ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
			GameTextForPlayer(playerid, "~r~Niste uzeli svoju dozu, vase telo zeli drogu!", 2000, 6);
		}
		else if(PlayerInfo[playerid][xMethAddict] == true && PlayerInfo[playerid][xMethUsed] < 1)
		{
			Fusion_SetPlayerHealth(playerid, health - 3.2);
			ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
			GameTextForPlayer(playerid, "~r~Niste uzeli vasu dozu metamfetamina, vase telo zeli drogu!", 2000, 6);
		}
		else if(PlayerInfo[playerid][xCokeCrackAddict] == true && PlayerInfo[playerid][xCokeCrackUsed] < 1)
		{
			Fusion_SetPlayerHealth(playerid, health - 3.0);
			ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
			GameTextForPlayer(playerid, "~r~Niste uzeli svoju dozu, vase telo zeli drogu!", 2000, 6);
		}
	}

}
return 1;}
//------------------------------------------------------------------------------
task TwentyMinutesTimer[1200000]()
{
TestReakcije(); // Matematika
}
//------------------------------------------------------------------------------
task FifteenMinutesTimer[900000]()
{
foreach(new i : Player) {
	CarCheck(i);}

StartReaction(); // Brzi prst

SaveServerStats();}
//------------------------------------------------------------------------------
task FiveMinutesTimer[420000]()
{

for(new plants = 1; plants < MAX_PLANTS; plants++) {

		if(DrogaStab[plants][wPlanted] == 1) {

			DrogaStab[plants][wHoursPassed]++;

			if(DrogaStab[plants][wHoursPassed] <= 8) {
			MoveDynamicObject(DrogaStab[plants][wObjectID], DrogaStab[plants][Plantx], DrogaStab[plants][Planty], DrogaStab[plants][Plantz]+0.2, 5);
			DrogaStab[plants][Plantz] += 0.2;
			}

			if(DrogaStab[plants][wHoursPassed] > 12) {

				DrogaStab[plants][Plantx] = 0;
			DrogaStab[plants][Planty] = 0;
			DrogaStab[plants][Plantz] = 0;
			DrogaStab[plants][wType] = 0;
			DrogaStab[plants][wPlanted] = 0;
			DrogaStab[plants][wHoursPassed] = 0;
			strmid(DrogaStab[plants][wOwner], "Niko", 0, strlen("Niko"), 255);
			DrogaStab[plants][wViwo] = 0;
			DestroyDynamicObject(DrogaStab[plants][wObjectID]);
			}
	}
}
}
//------------------------------------------------------------------------------
GetDrugNameByDrugID(drugid) {
new varstring[24];
switch(drugid) {
	case 1000..1999: //Marihuana
	{
		format(varstring, sizeof(varstring), "Marihuana");
	}
	case 2000..2999: //LSD
	{
		format(varstring, sizeof(varstring), "LSD");
	}
	case 3000..3999: //Methamphetamine
	{
		format(varstring, sizeof(varstring), "Methamphetamine");
	}
	case 4000..4999: //Heroin
	{
		format(varstring, sizeof(varstring), "Heroin");
	}
	case 5000..5999: //Cocaine
	{
		format(varstring, sizeof(varstring), "Kokain");
	}
	case 6000..6999: //Blue Methamphetamine
	{
		format(varstring, sizeof(varstring), "Plavi Methamphetamine");
	}
	case 7000..7999: //crack
	{
		format(varstring, sizeof(varstring), "Crack");
	}
	default:
	{
		format(varstring, sizeof(varstring), "Prazno");
	}
}
return varstring;}

UsingCrack(playerid, drugid) {

if(IsPlayerConnected(playerid)) {

	if(IsAStrongCrack(drugid)) {

		PlayerInfo[playerid][xCokeCrackIndicator] += 100;
		if(PlayerInfo[playerid][xCokeCrackAddict] == true)
			PlayerInfo[playerid][xCokeCrackUsed] = 6;

		//DajIgracuGlad(playerid, 30);
		DodajIgracuArmour(playerid, 30);
	}
	else if(IsAGoodCrack(drugid))
	{
		PlayerInfo[playerid][xCokeCrackIndicator] += 80;
		if(PlayerInfo[playerid][xCokeCrackAddict] == true)
			PlayerInfo[playerid][xCokeCrackUsed] = 5;

		//DajIgracuGlad(playerid, 25);
		DodajIgracuArmour(playerid, 25);
	}
	else if(IsABadCrack(drugid))
	{
		PlayerInfo[playerid][xCokeCrackIndicator] += 60;
		if(PlayerInfo[playerid][xCokeCrackAddict] == true)
			PlayerInfo[playerid][xCokeCrackUsed] = 3;

		//DajIgracuGlad(playerid, 20);
		DodajIgracuArmour(playerid, 20);
	}
	else if(IsAVeryBadCrack(drugid))
	{
		PlayerInfo[playerid][xCokeCrackIndicator] += 45;
		if(PlayerInfo[playerid][xCokeCrackAddict] == true)
			PlayerInfo[playerid][xCokeCrackUsed] = 1;

		//DajIgracuGlad(playerid, 15);
		DodajIgracuArmour(playerid, 15);

		if(PlayerInfo[playerid][xCokeCrackIndicator] > 680) {

			PlayerInfo[playerid][xUbijen] = 1;
			SCM(playerid, ZUTA, "Predozirali ste se krekom i umrli.");
			Fusion_SetPlayerHealth(playerid, 0);
		}
	}
	if(PlayerInfo[playerid][xCokeCrackIndicator] > 750 && PlayerInfo[playerid][xCokeCrackAddict] == false)
		PlayerInfo[playerid][xCokeCrackAddict] = true;}
}


UsingCocaine(playerid, drugid)
{
if(IsPlayerConnected(playerid))
{
	if(IsAStrongCocaine(drugid))
	{
		PlayerInfo[playerid][xCokeCrackIndicator] += 100;
		if(PlayerInfo[playerid][xCokeCrackAddict] == true)
			PlayerInfo[playerid][xCokeCrackUsed] = 6;

		//DajIgracuGlad(playerid, 30);
		DodajIgracuArmour(playerid, 30);
	}
	else if(IsAGoodCocaine(drugid))
	{
		PlayerInfo[playerid][xCokeCrackIndicator] += 80;
		if(PlayerInfo[playerid][xCokeCrackAddict] == true)
			PlayerInfo[playerid][xCokeCrackUsed] = 5;

		//DajIgracuGlad(playerid, 25);
		DodajIgracuArmour(playerid, 25);
	}
	else if(IsABadCocaine(drugid))
	{
		PlayerInfo[playerid][xCokeCrackIndicator] += 60;
		if(PlayerInfo[playerid][xCokeCrackAddict] == true)
			PlayerInfo[playerid][xCokeCrackUsed] = 3;

		//DajIgracuGlad(playerid, 20);
		DodajIgracuArmour(playerid, 20);
	}
	else if(IsAVeryBadCocaine(drugid))
	{
		PlayerInfo[playerid][xCokeCrackIndicator] += 45;
		if(PlayerInfo[playerid][xCokeCrackAddict] == true)
			PlayerInfo[playerid][xCokeCrackUsed] = 1;

		//DajIgracuGlad(playerid, 15);
		DodajIgracuArmour(playerid, 15);

		if(PlayerInfo[playerid][xCokeCrackIndicator] > 680) {

			PlayerInfo[playerid][xUbijen] = 1;
			SCM(playerid, ZUTA, "Predozirali ste se kokainom i umrli.");
			Fusion_SetPlayerHealth(playerid, 0);
		}
	}
	if(PlayerInfo[playerid][xCokeCrackIndicator] > 750 && PlayerInfo[playerid][xCokeCrackAddict] == false)
		PlayerInfo[playerid][xCokeCrackAddict] = true;}
}

UsingBMeth(playerid, drugid) {
if(IsPlayerConnected(playerid)) {

	if(IsAStrongBlueMeth(drugid)) {

		PlayerInfo[playerid][xMethIndicator] += 100;
		if(PlayerInfo[playerid][xMethAddict] == true)
			PlayerInfo[playerid][xMethUsed] = 6;

		//DajIgracuGlad(playerid, 30);
		DodajIgracuArmour(playerid, 30);
	}
	else if(IsAGoodBlueMeth(drugid)) {

		PlayerInfo[playerid][xMethIndicator] += 90;
		if(PlayerInfo[playerid][xMethAddict] == true)
			PlayerInfo[playerid][xMethUsed] = 5;

		//DajIgracuGlad(playerid, 25);
		DodajIgracuArmour(playerid, 25);
	}
	else if(IsABadBlueMeth(drugid)) {

		PlayerInfo[playerid][xMethIndicator] += 80;
		if(PlayerInfo[playerid][xMethAddict] == true)
			PlayerInfo[playerid][xMethUsed] = 3;

		//DajIgracuGlad(playerid, 20);
		DodajIgracuArmour(playerid, 20);
	}
	else if(IsAVeryBadBlueMeth(drugid))
	{
		PlayerInfo[playerid][xMethIndicator] += 40;
		if(PlayerInfo[playerid][xMethAddict] == true)
			PlayerInfo[playerid][xMethUsed] = 1;

		//DajIgracuGlad(playerid, 15);
		DodajIgracuArmour(playerid, 15);

		if(PlayerInfo[playerid][xMethIndicator] > 385) {

			PlayerInfo[playerid][xUbijen] = 1;
			SCM(playerid, ZUTA, "Predozirali ste se metom i umrli.");
			Fusion_SetPlayerHealth(playerid, 0);
		}
	}
	if(PlayerInfo[playerid][xMethIndicator] > 450 && PlayerInfo[playerid][xMethAddict] == false)
		PlayerInfo[playerid][xMethAddict] = true;}
}

UsingMeth(playerid, drugid)
{
if(IsPlayerConnected(playerid)) {
	if(IsAStrongMeth(drugid)) {

		PlayerInfo[playerid][xMethIndicator] += 95;
		if(PlayerInfo[playerid][xMethAddict] == true)
			PlayerInfo[playerid][xMethUsed] = 6;

		//DajIgracuGlad(playerid, 30);
		DodajIgracuArmour(playerid, 30);
	}
	else if(IsAGoodMeth(drugid)) {

		PlayerInfo[playerid][xMethIndicator] += 85;
		if(PlayerInfo[playerid][xMethAddict] == true)
			PlayerInfo[playerid][xMethUsed] = 5;

		//DajIgracuGlad(playerid, 25);
		DodajIgracuArmour(playerid, 25);
	}
	else if(IsABadMeth(drugid)) {

		PlayerInfo[playerid][xMethIndicator] += 70;
		if(PlayerInfo[playerid][xMethAddict] == true)
			PlayerInfo[playerid][xMethUsed] = 3;

		//DajIgracuGlad(playerid, 20);
		DodajIgracuArmour(playerid, 20);
	}
	else if(IsAVeryBadMeth(drugid)) {

		PlayerInfo[playerid][xMethIndicator] += 35;
		if(PlayerInfo[playerid][xMethAddict] == true)
			PlayerInfo[playerid][xMethUsed] = 1;

		//DajIgracuGlad(playerid, 15);
		DodajIgracuArmour(playerid, 15);

		if(PlayerInfo[playerid][xMethIndicator] > 380) {

			PlayerInfo[playerid][xUbijen] = 1;
			SCM(playerid, ZUTA, "Predozirali ste se metom i umrli.");
			Fusion_SetPlayerHealth(playerid, 0);
		}
	}
	if(PlayerInfo[playerid][xMethIndicator] > 450 && PlayerInfo[playerid][xMethAddict] == false)
		PlayerInfo[playerid][xMethAddict] = true;}
}

UsingHeroin(playerid, drugid) {
if(IsPlayerConnected(playerid)) {
	if(IsAStrongHeroin(drugid))
	{
		PlayerInfo[playerid][xHeroinIndicator] += 100;

		if(PlayerInfo[playerid][xHeroinAddict] == true)
			PlayerInfo[playerid][xHeroinUsed] = 6;

		//DajIgracuGlad(playerid, 30);
		DodajIgracuArmour(playerid, 30);
	}
	else if(IsAGoodHeroin(drugid))
	{
		PlayerInfo[playerid][xHeroinIndicator] += 90;

		if(PlayerInfo[playerid][xHeroinAddict] == true)
			PlayerInfo[playerid][xHeroinUsed] = 5;

		//DajIgracuGlad(playerid, 25);
		DodajIgracuArmour(playerid, 25);
	}
	else if(IsABadHeroin(drugid))
	{
		PlayerInfo[playerid][xHeroinIndicator] += 75;

		if(PlayerInfo[playerid][xHeroinAddict] == true)
			PlayerInfo[playerid][xHeroinUsed] = 3;

		//DajIgracuGlad(playerid, 20);
		DodajIgracuArmour(playerid, 20);
	}
	else if(IsAVeryBadHeroin(drugid))
	{
		PlayerInfo[playerid][xHeroinIndicator] += 40;

		if(PlayerInfo[playerid][xHeroinAddict] == true)
			PlayerInfo[playerid][xHeroinUsed] = 1;

		//DajIgracuGlad(playerid, 15);
		DodajIgracuArmour(playerid, 15);
		if(PlayerInfo[playerid][xHeroinIndicator] > 250) {

			PlayerInfo[playerid][xUbijen] = 1;
			SCM(playerid, ZUTA, "Predozirali ste se heroinom i umrli.");
			Fusion_SetPlayerHealth(playerid, 0);
		}
	}

	if(PlayerInfo[playerid][xHeroinIndicator] > 300 && PlayerInfo[playerid][xHeroinAddict] == false)
		PlayerInfo[playerid][xHeroinAddict] = true;

}
}

IsAMarijuana(drugid)
{
if(drugid >= 1000 && drugid <= 1999)
{
	return true;}
return false;}

IsALSD(drugid)
{
if(drugid >= 2000 && drugid <= 2999)
{
	return true;}
return false;}

IsAMethamphetamine(drugid)
{
if(drugid >= 3000 && drugid <= 3999)
{
	return true;}
return false;}

IsAHeroin(drugid)
{
if(drugid >= 4000 && drugid <= 4999)
{
	return true;}
return false;}


IsACocaine(drugid)
{
if(drugid >= 5000 && drugid <= 5999)
{
	return true;}
return false;}

IsACrack(drugid)
{
if(drugid >= 7000 && drugid <= 7999)
{
	return true;}
return false;}

IsAStrongCrack(drugid)
{
if(drugid >= 7800 && drugid <= 7999)
{
	return true;}
return false;}

IsAGoodCrack(drugid)
{
if(drugid >= 7500 && drugid <= 7799)
{
	return true;}
return false;}

IsABadCrack(drugid)
{
if(drugid >= 7200 && drugid <= 7499)
{
	return true;}
return false;}

IsAVeryBadCrack(drugid)
{
if(drugid >= 7000 && drugid <= 7199)
{
	return true;}
return false;}


IsABlueMeth(drugid)
{
if(drugid >= 6000 && drugid <= 6999)
{
	return true;}
return false;}

IsAStrongHeroin(drugid)
{
if(drugid >= 4549 && drugid <= 4741)
{
	return true;}
return false;}

IsAGoodHeroin(drugid)
{
if(drugid >= 4742 && drugid <= 4999)
{
	return true;}
return false;}

IsABadHeroin(drugid)
{
if(drugid >= 4244 && drugid <= 4548)
{
	return true;}
return false;}

IsAVeryBadHeroin(drugid)
{
if(drugid >= 4000 && drugid <= 4243)
{
	return true;}
return false;}

IsAStrongBlueMeth(drugid)
{
if(drugid >= 6800 && drugid <= 6999)
{
	return true;}
return false;}

IsAGoodBlueMeth(drugid)
{
if(drugid >= 6500 && drugid <= 6799)
{
	return true;}
return false;}

IsABadBlueMeth(drugid)
{
if(drugid >= 6200 && drugid <= 6499)
{
	return true;}
return false;}

IsAVeryBadBlueMeth(drugid)
{
if(drugid >= 6000 && drugid <= 6199)
{
	return true;}
return false;}

IsAStrongLSD(drugid)
{
if(drugid >= 2800 && drugid <= 2999)
{
	return true;}
return false;}

IsAGoodLSD(drugid)
{
if(drugid >= 2500 && drugid <= 2799)
{
	return true;}
return false;}

IsABadLSD(drugid)
{
if(drugid >= 2200 && drugid <= 2499)
{
	return true;}
return false;}

IsAVeryBadLSD(drugid)
{
if(drugid >= 2000 && drugid <= 2199)
{
	return true;}
return false;}

IsAStrongMeth(drugid)
{
if(drugid >= 3800 && drugid <= 3999)
{
	return true;}
return false;}

IsAGoodMeth(drugid)
{
if(drugid >= 3500 && drugid <= 3799)
{
	return true;}
return false;}

IsABadMeth(drugid)
{
if(drugid >= 3200 && drugid <= 3499)
{
	return true;}
return false;}

IsAVeryBadMeth(drugid)
{
if(drugid >= 3000 && drugid <= 3199)
{
	return true;}
return false;}


IsAStrongCocaine(drugid) {
if(drugid >= 5800 && drugid <= 5999) {
	return true;}
return false;}

IsAGoodCocaine(drugid) {
if(drugid >= 5500 && drugid <= 5799){
	return true;}
return false;}

IsABadCocaine(drugid) {
if(drugid >= 5200 && drugid <= 5499) {
	return true;}
return false;}

IsAVeryBadCocaine(drugid) {
if(drugid >= 5000 && drugid <= 5199) {
	return true;}
return false;}
//------------------------------------------------------------------------------
public FakultetCasovi(playerid, broj) {
if(PlayerInfo[playerid][xFakultet] != 15) {
	PlayerInfo[playerid][xFakultet] = broj;
	Odbrojavanje[playerid] = 0; Uciskolu[playerid] = false;
	FakultetLimit--;
	if(FakultetLimit < 0)
	{
		FakultetLimit = 0;
	}
	Fusion_KillTimer(SkolaTimer[playerid]);
	PlayerInfo[playerid][xSkolaLimit] = 1;
	SendInfoMessage(playerid, "Polozio si %d deo (od mogucih 15) fakultet.", broj);
	TogglePlayerControllable(playerid, true);
	VremeTDControl(playerid, false);
	new varstring[50];
	format(varstring, sizeof(varstring), "* %s ustaje sa stolice.", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	ClearAnimations(playerid); SavePlayer(playerid);
	SavePlayer(playerid);}
return 1;}
public SrednjaCasovi(playerid, broj) {
if(PlayerInfo[playerid][xSrednja] != 6) {
	PlayerInfo[playerid][xSrednja] = broj;
	Odbrojavanje[playerid] = 0; Uciskolu[playerid] = false;
	sSkolaLimit--;
	if(sSkolaLimit < 0)
	{
		sSkolaLimit = 0;
	}
	Fusion_KillTimer(SkolaTimer[playerid]);
	PlayerInfo[playerid][xSkolaLimit] = 1;
	SendInfoMessage(playerid, "Polozio si %d deo (od mogucih 6) srednje skole. ", broj);
	TogglePlayerControllable(playerid, true);
	VremeTDControl(playerid, false);
	new varstring[50];
	format(varstring, sizeof(varstring), "* %s ustaje sa stolice.", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	ClearAnimations(playerid); SavePlayer(playerid);
	SavePlayer(playerid);}
}
public OsnovnaCasovi(playerid, broj) {
if(PlayerInfo[playerid][xOsnovna] != 3) {
	PlayerInfo[playerid][xOsnovna] = broj;
	Odbrojavanje[playerid] = 0; Uciskolu[playerid] = false;
	oSkolaLimit--;
	if(oSkolaLimit < 0)
	{
		oSkolaLimit = 0;
	}
	Fusion_KillTimer(SkolaTimer[playerid]);
	PlayerInfo[playerid][xSkolaLimit] = 1;
	TogglePlayerControllable(playerid, true);
	SendInfoMessage(playerid, "Polozio si %d deo (od mogucih 3) osnovne skole. ", broj);
	VremeTDControl(playerid, false);
	new varstring[50];
	format(varstring, sizeof(varstring), "* %s ustaje sa stolice.", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	ClearAnimations(playerid); SavePlayer(playerid);
	SavePlayer(playerid);}
return 1;}
//------------------------------------------------------------------------------
PlayerPlayMusic(playerid)
{
if(IsPlayerConnected(playerid))
{
	SetTimer("StopMusic", 5000, 0);
	PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);}
}
public StopMusic()
{
foreach(new i : Player)
{
	if(IsPlayerConnected(i))
	{
		PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
	}
}
}
//------------------------------------------------------------------------------
public TravaT(i) {
new Float:Pos[3];
if(PlayerInfo[i][xPosao] == POSAO_KOSAC && KrenuoKosenje[i] && GetVehicleModel(GetPlayerVehicleID(i)) == 572) {
	for(new j = 0; j < 38; j++) {
		if(GrassID[j][i] == 804) {
			GetDynamicObjectPos(Grass[j][i], Pos[0], Pos[1], Pos[2]);
			if(IsPlayerInRangeOfPoint(i, 2.0, Pos[0], Pos[1], Pos[2])) {

				if(PokosenaTrava[i] == 37) {
					new time = gettime();
					new ostatak = (NovoVreme[i] - (time - StaroVreme[i]));
					if((time - StaroVreme[i]) < NovoVreme[i]) {
						SendErrorMessage(i, "Zavrsili ste posao ranije nego sto je predvidjeno. ");
						SendErrorMessage(i, "Sacekajte jos %d sekundi i prodjite ponovo kroz objekt.", ostatak);
						new varstring[128];
						format(varstring, sizeof(varstring), "| AC | %s[ID: %d] je zavrsio kosaca pre vremena(za %d od %d sekundi).", ImeIgraca(i), i, (NovoVreme[i]-ostatak), NovoVreme[i]);
						AdminPoruka(ANTICHEAT, varstring);
						return 1;
					}
				}

				DestroyDynamicObject(Grass[j][i]);
				GrassID[j][i] = 19473;

				PokosenaTrava[i]++;
				new travastring[24];
				format(travastring, sizeof(travastring), "%d/38", PokosenaTrava[i]);
				PlayerTextDrawSetString(i, KosacTD[i][1], travastring);
				break;
			}
		}
	}

	if(PokosenaTrava[i] == 38) {
		Fusion_KillTimer(TravaTimer[i]);
		SCM(i, SVETLOPLAVA, "Pokosili ste svu travu.");
		PokosenaTrava[i] = 0;
		ac_SetVehicleToRespawn(GetPlayerVehicleID(i));
		DajIgracuPlatu(i);
		if(ServerInfo[HappyJob] == 1)
		{
			SendJobMessage(i, "Dobili ste dodatnih 8000$ jer je ukljucena dupla plata na ovom poslu.");
			DajIgracuNovac(i, 8000);
			BusinessJobMoney(POSAO_KOSAC, 5000);
		}
		KrenuoKosenje[i] = false;
		KosacTDControl(i, false);
		BusinessJobMoney(POSAO_KOSAC, 2500);
	}
}
return 1;}
//------------------------------------------------------------------------------
AFKCheck(playerid) {
GetPlayerPos(playerid, antiCheatCS[playerid][AFKSecondPos][0], antiCheatCS[playerid][AFKSecondPos][1], antiCheatCS[playerid][AFKSecondPos][2]);

if(!floatcmp(antiCheatCS[playerid][AFKSecondPos][0], antiCheatCS[playerid][AFKFirstPos][0]) && !floatcmp(antiCheatCS[playerid][AFKSecondPos][1], antiCheatCS[playerid][AFKFirstPos][1])) {
	if(PlayerInfo[playerid][xAdmin] != 7) {
		antiCheatCS[playerid][AFKMinute]++;
	}
}
else {
	antiCheatCS[playerid][AFKMinute] = 0;}

	antiCheatCS[playerid][AFKFirstPos][0] = antiCheatCS[playerid][AFKSecondPos][0];
antiCheatCS[playerid][AFKFirstPos][1] = antiCheatCS[playerid][AFKSecondPos][1];
antiCheatCS[playerid][AFKFirstPos][2] = antiCheatCS[playerid][AFKSecondPos][2];

if(antiCheatCS[playerid][AFKMinute] >= 15 && PlayerInfo[playerid][xZatvor] == 0) {

	if(PlayerInfo[playerid][xWanted] == 0) {

		SendInfoMessage(playerid, "Bili ste duze od 15 minuta AFK. Prebaceni ste u afk zonu.");

		antiCheatCS[playerid][TeleportCheck] = 4;

		if(NaDmEventu[playerid] == true) {
			NaDmEventu[playerid] = false;
			ResetAllWeapons(playerid);
		}
		
		if(NaDustu[playerid] == true) {
			NaDustu[playerid] = false;
			ResetAllWeapons(playerid);
		}
		
		if(NaInferno[playerid] == true) {
			NaInferno[playerid] = false;
			ResetAllWeapons(playerid);
		}
		
		if(NaAssault[playerid] == true) {
			NaAssault[playerid] = false;
			ResetAllWeapons(playerid);
		}
		
		if(NaSnow[playerid] == true) {
			NaSnow[playerid] = false;
			ResetAllWeapons(playerid);
		}

		new rand = random(sizeof(RandomAFKZone));
		ac_SetPlayerPos(playerid, RandomAFKZone[rand][0], RandomAFKZone[rand][1], RandomAFKZone[rand][2]);
		SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		TogglePlayerControllable(playerid, false);
		SetCameraBehindPlayer(playerid);
		ac_SetPlayerInterior(playerid, 18);
		SetPlayerVirtualWorld(playerid, 0);
	}
}
}

//------------------------------------------------------------------------------

public PayDay(playerid) {

if(PlayerLogged[playerid] == true) {

	new stariiznos = PlayerInfo[playerid][xBRacun];
	new varstring[128];
	new donatorkamata = 0, platapd = 0, plataadms = 0, plataprom = 0, platadonator = 0;

	PlayerInfo[playerid][xRespekt]++;
	if(ServerInfo[HappyHours] == true && PlayerInfo[playerid][xYouTuber] == 0) PlayerInfo[playerid][xRespekt]++;
	if(ServerInfo[HappyHoursx3] == true && PlayerInfo[playerid][xYouTuber] == 0) PlayerInfo[playerid][xRespekt] += 2;
	if(PlayerInfo[playerid][xYouTuber] == 1) PlayerInfo[playerid][xRespekt] ++;

	PlayerInfo[playerid][xOnlineSati]++;
	PlayerInfo[playerid][xPayDay] = 0;
	PlayerInfo[playerid][xSkolaLimit] = 0;
	PlayerInfo[playerid][xLesLimit] = 0;
	PlayerInfo[playerid][xAktivpoeni]++;
	if(PlayerInfo[playerid][xVIPLevel] >= 5) PlayerInfo[playerid][xAktivpoeni]++;
	SendInfoMessage(playerid, "Dobili ste jedan aktivan poen, vise o tome: /aktivnipoenihelp");

	if(PlayerInfo[playerid][xBRacun] < 0) {
		SendErrorMessage(playerid, "Vas bankovni racun je u minusu, izmirite dug pre nego sto dobijete kaznu.");
	}
	if(PlayerInfo[playerid][xNovac] < 0) {
		if(PlayerInfo[playerid][xZatvor] == 0) {
			SendErrorMessage(playerid, "Vas novac je bio u minusu i zavrsili ste u zatvoru.");

			ResetAllWeapons(playerid);

			PlayerInfo[playerid][xZatvor] = OBICAN_ZATVOR;
			PlayerInfo[playerid][xZatvorVreme] = 15;

			new rand = random(sizeof(RandomZatvor));
			ac_SetPlayerPos(playerid, RandomZatvor[rand][0], RandomZatvor[rand][1], RandomZatvor[rand][2]);
			SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
			GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
			TogglePlayerControllable(playerid, false);
			SetCameraBehindPlayer(playerid);
			ac_SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}

	if(GetFactionType(playerid) == ORG_TIP_PD) {
		if(antiCheatCS[playerid][AFKMinute] == 0 && !IsPlayerPaused(playerid)) {
			platapd = 2000;
		}
	}
	else if(GetFactionType(playerid) == ORG_TIP_CNN) {
		if(antiCheatCS[playerid][AFKMinute] == 0 && !IsPlayerPaused(playerid)) {
			platapd = 1200;
		}
	}
	else if(GetFactionType(playerid) == ORG_TIP_MD) {
		if(antiCheatCS[playerid][AFKMinute] == 0 && !IsPlayerPaused(playerid)) {
			platapd = 1200;
		}
	}

	if(PlayerInfo[playerid][xPromoter] > 0) {
		if(antiCheatCS[playerid][AFKMinute] == 0 && !IsPlayerPaused(playerid)) {
			plataprom = 3000;
		}
	}

	if(PlayerInfo[playerid][xYouTuber] == 1) {
		if(antiCheatCS[playerid][AFKMinute] == 0 && !IsPlayerPaused(playerid)) {
			platadonator = 5000;
		}
	}

	if(PlayerInfo[playerid][xHelper] > 0) {
		if(antiCheatCS[playerid][AFKMinute] < 2 && !IsPlayerPaused(playerid)) {
			plataadms = 2000+(PlayerInfo[playerid][xHelper]*200);
		}
	}

	if(PlayerInfo[playerid][xAdmin] > 0) {
		if(antiCheatCS[playerid][AFKMinute] < 2 && !IsPlayerPaused(playerid)) {
			plataadms = 2200+(PlayerInfo[playerid][xAdmin]*200);
		}
	}
	if(PlayerInfo[playerid][xRentID] != -1) {
		new id = PlayerInfo[playerid][xRentID];
		if(II[id][iRentable] == 1) {
			if(II[id][iRentPrice] > PlayerInfo[playerid][xNovac]) {

				II[id][iRentovano]--;
				SaveProperty(id);

				PlayerInfo[playerid][xRentID] = -1;
				PlayerInfo[playerid][xSpawn] = SPAWN_OBICAN_LS_1;
				SendClientMessageEx(playerid, ZUTA, "Niste imali dovoljno novca za rent, izbaceni ste.");
			}
			else {
				II[id][iMoney] += II[id][iRentPrice];
				SaveProperty(id);

				DajIgracuNovac(playerid, -II[id][iRentPrice]);
				SendClientMessageEx(playerid, ZUTA, "Platili ste rent %d$.", II[id][iRentPrice]);
			}
		}
		else if(II[id][iRentable] == 0) {
			II[id][iRentovano]--;
			SaveProperty(id);

			PlayerInfo[playerid][xRentID] = -1;
			PlayerInfo[playerid][xSpawn] = SPAWN_OBICAN_LS_1;

			SendClientMessageEx(playerid, ZUTA, "Kuca koju ste rentali vise nije na iznajmljivanje.");
		}
	}
	//LEVELUP
	new nxtlevel = PlayerInfo[playerid][xLevel]+1;
	new expamount = nxtlevel*levelexp;
	if(PlayerInfo[playerid][xRespekt] >= expamount) {
			format(varstring, sizeof(varstring), "~g~LEVEL UP~n~~w~Sada si Level %d", nxtlevel);
		GameTextForPlayer(playerid, varstring, 5000, 1);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		PlayerPlayMusic(playerid);
		PlayerInfo[playerid][xLevel]++;
		SetPlayerScore(playerid, PlayerInfo[playerid][xLevel]);
		PlayerInfo[playerid][xPoboljsanja] += 2;
		PlayerInfo[playerid][xRespekt] = 0; // ..
		SavePlayer(playerid);
		format(varstring, sizeof(varstring), "   Kupio si Level %d Ukucaj /upgrade za neke bonuse", nxtlevel);
		SCM(playerid, SVETLOPLAVA, varstring);
		format(varstring, sizeof(varstring), "   Imas %d neiskoristenih Upgrade Poena", PlayerInfo[playerid][xPoboljsanja]);
		SCM(playerid, BELA, varstring);
	}

	if(PlayerInfo[playerid][xIznosRate] > 0 &&
		PlayerInfo[playerid][xPreostaloZaOtplatu] > 0 &&
		PlayerInfo[playerid][xIznosKredita] > 0)
	{
		if(PlayerInfo[playerid][xPreostaloZaOtplatu] < PlayerInfo[playerid][xIznosRate]) {
			PlayerInfo[playerid][xIznosRate] = PlayerInfo[playerid][xPreostaloZaOtplatu];
		}
		PlayerInfo[playerid][xPreostaloZaOtplatu] -= PlayerInfo[playerid][xIznosRate];
		PlayerInfo[playerid][xBRacun] -= PlayerInfo[playerid][xIznosRate];
		if(PlayerInfo[playerid][xPreostaloZaOtplatu] < 0) PlayerInfo[playerid][xPreostaloZaOtplatu] = 0;
		if(PlayerInfo[playerid][xPreostaloZaOtplatu] <= 0) { PlayerInfo[playerid][xIznosKredita] = 0; PlayerInfo[playerid][xIznosRate] = 0;}
	}

	if(PlayerInfo[playerid][xHotelRoom] != -1) {
		new hid = PlayerInfo[playerid][xHotelRoom];
		hotelInfo[hid][hMoney] += hotelInfo[hid][hRoomPrice];
		DajIgracuNovac(playerid, -hotelInfo[hid][hRoomPrice]);
		SaveHotel(hid);
		SendClientMessageEx(playerid, -1, "Platili ste %d$ cenu najma.", hotelInfo[hid][hRoomPrice]);
	}

	new iznosplate = 0, osnova = 0, prihod = 0, rashod = 0, struja = 0, voda = 0, smece = 0, grijanje = 0, porez = 0, stecaj = 0;
	osnova = 45 + random(5);

		iznosplate = ((osnova*PlayerInfo[playerid][xLevel])+PlayerInfo[playerid][xPlatniRacun]);

	if(PlayerInfo[playerid][xOsnovna] == 3) { iznosplate = iznosplate + 400; SCM(playerid, ZUTA, "Vi imate osnovnu skolu i dobili ste kao bonus 400$!"); }
	if(PlayerInfo[playerid][xSrednja] == 6) { iznosplate = iznosplate + 600; SCM(playerid, ZUTA, "Vi imate srednju skolu i dobili ste kao bonus 600$!"); }
	if(PlayerInfo[playerid][xFakultet] == 15) { iznosplate = iznosplate + 800; SCM(playerid, ZUTA, "Vi imate fakultet i dobili ste kao bonus 800$!"); }

	if(PlayerInfo[playerid][xProperty][0] != -1) {
		new imovina = PlayerInfo[playerid][xProperty][0];
		if(II[imovina][iUsage] == IMOVINA_KUCA) {
			if(II[imovina][iVrsta] == MALA_KUCA) { porez += 300;}
			else if(II[imovina][iVrsta] == SREDNJA_KUCA) { porez += 500;}
			else if(II[imovina][iVrsta] == VELIKA_KUCA) { porez += 650;}
			else if(II[imovina][iVrsta] == VILA_KUCA) { porez += 900;}
		}
		else if(II[imovina][iUsage] == IMOVINA_STAN) { porez += 150;}
		else if(II[imovina][iUsage] == IMOVINA_VIKENDICA) { porez += 400;}
		struja += (250 + random(50)); voda += (150 + random(50)); smece += 150; grijanje += 250;
		donatorkamata = 2;

		if(PlayerInfo[playerid][xVIPLevel] >= 4) {
			donatorkamata = 4;
		}

		if(PlayerInfo[playerid][xVIPLevel] >= 5) {
			donatorkamata = 5;
		}

		if(PlayerInfo[playerid][xAdmin] >= 1) {
			donatorkamata = 6;
		}

		if(PlayerInfo[playerid][xHelper] >= 1) {
			donatorkamata = 5;
		}

	}

	if(PlayerInfo[playerid][xProperty][1] != -1) {
		new imovina = PlayerInfo[playerid][xProperty][1];
		if(II[imovina][iUsage] == IMOVINA_KUCA) {
			if(II[imovina][iVrsta] == MALA_KUCA) { porez += 300;}
			else if(II[imovina][iVrsta] == SREDNJA_KUCA) { porez += 500;}
			else if(II[imovina][iVrsta] == VELIKA_KUCA) { porez += 650;}
			else if(II[imovina][iVrsta] == VILA_KUCA) { porez += 900;}
		}
		else if(II[imovina][iUsage] == IMOVINA_STAN) { porez += 150;}
		else if(II[imovina][iUsage] == IMOVINA_VIKENDICA) { porez += 400;}
		struja += (250 + random(50)); voda += (150 + random(50)); smece += 150; grijanje += 250;
		donatorkamata = 2;

		if(PlayerInfo[playerid][xVIPLevel] >= 4) {
			donatorkamata = 4;
		}

		if(PlayerInfo[playerid][xVIPLevel] >= 5) {
			donatorkamata = 5;
		}

		if(PlayerInfo[playerid][xAdmin] >= 1) {
			donatorkamata = 6;
		}

		if(PlayerInfo[playerid][xHelper] >= 1) {
			donatorkamata = 5;
		}

	}

	if(PlayerInfo[playerid][xProperty][2] != -1) {
		new imovina = PlayerInfo[playerid][xProperty][2];
		if(II[imovina][iUsage] == IMOVINA_KUCA) {
			if(II[imovina][iVrsta] == MALA_KUCA) { porez += 900;}
			else if(II[imovina][iVrsta] == SREDNJA_KUCA) { porez += 1500;}
			else if(II[imovina][iVrsta] == VELIKA_KUCA) { porez += 3650;}
			else if(II[imovina][iVrsta] == VILA_KUCA) { porez += 6900;}
		}
		else if(II[imovina][iUsage] == IMOVINA_STAN) { porez += 800;}
		else if(II[imovina][iUsage] == IMOVINA_VIKENDICA) { porez += 600;}
		struja += (650 + random(50)); voda += (950 + random(50)); smece += 250; grijanje += 450;
		donatorkamata = 2;

		if(PlayerInfo[playerid][xVIPLevel] >= 4) {
			donatorkamata = 4;
		}

		if(PlayerInfo[playerid][xVIPLevel] >= 5) {
			donatorkamata = 5;
		}

		if(PlayerInfo[playerid][xAdmin] >= 1) {
			donatorkamata = 6;
		}

		if(PlayerInfo[playerid][xHelper] >= 1) {
			donatorkamata = 5;
		}

	}

	if(PlayerInfo[playerid][xVIPLevel] >= 5) {
		PlayerInfo[playerid][xRespekt]++;
		DajIgracuNovac(playerid, 2500);
	}

	if(PlayerInfo[playerid][xFirmaID] != -1) { porez += 50;}

	if(donatorkamata != 0) {
		if(PlayerInfo[playerid][xBRacun] >= 100000 && PlayerInfo[playerid][xBRacun] <= 4000000) {
			stecaj = (PlayerInfo[playerid][xBRacun]/1000) * donatorkamata;
		}
	}

	BusinessVodovodMoney(450, playerid);
	BusinessElektranaMoney(850, playerid);
	BusinessKomunalijeMoney(650, playerid);

	//new strp1[300], strp2[300], strp[600];

	new moneyy = 0;

	if(PlayerInfo[playerid][xPromoter] != 0) moneyy = 3000;

	prihod = iznosplate + stecaj + platapd + plataadms + plataprom + platadonator;
	rashod = struja + voda + porez + smece + grijanje;
	PlayerInfo[playerid][xBRacun] += prihod + moneyy;
	PlayerInfo[playerid][xBRacun] -= rashod;
	PlayerInfo[playerid][xPlatniRacun] = 0;

	new penza = 0;
	if(PlayerInfo[playerid][xPenzija] == 1) { penza = 10000;} else { penza = 0;}
	//format(strp1, sizeof(strp1), "Addiko Bank | Plata je stigla na vas racun\n\nPlata: %d$\nPenzija: %d$\nSteceni interes: %d$\n\nKredit Informacije\nIznos kredita: %d$\nIznos rate: %d$\nZa otplatu: %d%\n\n", (iznosplate+platapd+plataadms+plataprom),penza, stecaj, PlayerInfo[playerid][xIznosKredita], PlayerInfo[playerid][xIznosRate], PlayerInfo[playerid][xPreostaloZaOtplatu]);
	//format(strp2, sizeof(strp2), "Platili ste\nPorez na imovinu: %d$\nStruja: %d$\nVoda: %d$\nSmece: %d$\nGrejanje: %d$\n\nStari iznos: %d$\nNovi iznos: %d$", porez, struja, voda, smece, grijanje, stariiznos, PlayerInfo[playerid][xBRacun]);

	//format(strp, sizeof(strp), "%s%s", strp1, strp2);
	//SPD(playerid, dialog_PAYDAY, DSMSG, D_NASLOV, strp, D_ODABERI, "");
	
	new platas[40],penzos[40],stecajs[40],ikredits[40],irate[40],otplata[40],porezs[40],strujas[40];
	new vodas[40],smeces[40],grejanjes[40],noviiznoss[40];

	PaydayTDControl(playerid, true);

	//PRIHODI
	format(platas, sizeof(platas), "PLATA:_~w~%d~g~$", (iznosplate+platapd+plataadms+plataprom));
	PlayerTextDrawSetString(playerid, PaydayTD[playerid][5], platas);

	format(penzos, sizeof(penzos), "PENZIJA:_~w~%d~g~$", penza);
	PlayerTextDrawSetString(playerid, PaydayTD[playerid][6], penzos);

	format(stecajs, sizeof(stecajs), "STECENI_INTERES:_~w~%d~g~$", stecaj);
	PlayerTextDrawSetString(playerid, PaydayTD[playerid][7], stecajs);

	//KREDITI
	format(ikredits, sizeof(ikredits), "IZNOS_KREDITA:_~w~%d~g~$", PlayerInfo[playerid][xIznosKredita]);
	PlayerTextDrawSetString(playerid, PaydayTD[playerid][8], ikredits);

	format(irate, sizeof(irate), "IZNOS_RATE:_~w~%d~g~$", PlayerInfo[playerid][xIznosRate]);
	PlayerTextDrawSetString(playerid, PaydayTD[playerid][9], irate);

	format(otplata, sizeof(otplata), "ZA_OTPLATU:_~w~%d~g~$", PlayerInfo[playerid][xPreostaloZaOtplatu]);
	PlayerTextDrawSetString(playerid, PaydayTD[playerid][10], otplata);

	//RASHODI
	format(porezs, sizeof(porezs), "POREZ:_~w~%d~g~$", porez);
	PlayerTextDrawSetString(playerid, PaydayTD[playerid][11], porezs);

	format(strujas, sizeof(strujas), "STRUJA:_~w~%d~g~$", struja);
	PlayerTextDrawSetString(playerid, PaydayTD[playerid][12], strujas);

	format(vodas, sizeof(vodas), "VODA:_~w~%d~g~$", voda);
	PlayerTextDrawSetString(playerid, PaydayTD[playerid][13], vodas);

	format(smeces, sizeof(smeces), "SMECE:_~w~%d~g~$", smece);
	PlayerTextDrawSetString(playerid, PaydayTD[playerid][14], smeces);

	format(grejanjes, sizeof(grejanjes), "GREJANJE:_~w~%d~g~$", grijanje);
	PlayerTextDrawSetString(playerid, PaydayTD[playerid][15], grejanjes);

	format(noviiznoss, sizeof(noviiznoss), "%d~g~$_~w~/_%d~g~$", stariiznos, PlayerInfo[playerid][xBRacun]);
	PlayerTextDrawSetString(playerid, PaydayTD[playerid][17], noviiznoss);
	
	for(new i = 0; i < 18; i++) {
		PlayerTextDrawShow(playerid, PaydayTD[playerid][i]);
	}
		SetTimerEx("MakniPayday", 7000, false, "i", playerid);

		SCM(playerid, ZUTA, "Plata je stigla na vas bankovni racun!");


	if(PlayerInfo[playerid][xPosao] > 0) PlayerInfo[playerid][xUgovor] += 1;

	if(PlayerInfo[playerid][xClan] != 0) PlayerInfo[playerid][xOrgUgovor]++;

	if(PlayerInfo[playerid][xBRacun] <= -200000) {
		if(PlayerInfo[playerid][xProperty][0] != -1) {
			new imovina = PlayerInfo[playerid][xProperty][0];
			II[imovina][iLevel] = 99;
			II[imovina][iOwned] = 0;
			II[imovina][iNeaktivnost] = 0;
			strmid(II[imovina][iOwner], "Drzava", 0, strlen("Drzava"), 32);
			PropertyRefresh(imovina);
			SaveProperty(imovina);
			PlayerInfo[playerid][xProperty][0] = -1;
		}
		if(PlayerInfo[playerid][xProperty][1] != -1) {
			new imovina = PlayerInfo[playerid][xProperty][1];
			II[imovina][iLevel] = 99;
			II[imovina][iOwned] = 0;
			II[imovina][iNeaktivnost] = 0;
			strmid(II[imovina][iOwner], "Drzava", 0, strlen("Drzava"), 32);
			PropertyRefresh(imovina);
			SaveProperty(imovina);
			PlayerInfo[playerid][xProperty][1] = -1;
		}
		if(PlayerInfo[playerid][xProperty][2] != -1) {
			new imovina = PlayerInfo[playerid][xProperty][2];
			II[imovina][iLevel] = 99;
			II[imovina][iOwned] = 0;
			II[imovina][iNeaktivnost] = 0;
			strmid(II[imovina][iOwner], "Drzava", 0, strlen("Drzava"), 32);
			PropertyRefresh(imovina);
			SaveProperty(imovina);
			PlayerInfo[playerid][xProperty][2] = -1;
		}
		SCM(playerid, ZUTA, "Zbog neizmirenih dugova u banci(-200.000$), oduzeta vam je sva imovina!");
	}

	if(PlayerInfo[playerid][xRespekt] >= expamount) {
		format(varstring, sizeof(varstring), "~g~LEVEL UP~n~~w~Sada si Level %d", nxtlevel);
		GameTextForPlayer(playerid, varstring, 5000, 1);
		//PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		//PlayerPlayMusic(playerid);
		PlayerInfo[playerid][xLevel]++;
		SetPlayerScore(playerid, PlayerInfo[playerid][xLevel]);
		PlayerInfo[playerid][xPoboljsanja] += 2;
		PlayerInfo[playerid][xRespekt] = 0;
		format(varstring, sizeof(varstring), "Sada si level %d ukucaj /upgrade za neke bonuse", nxtlevel);
		SCM(playerid, SVETLOPLAVA, varstring);
		format(varstring, sizeof(varstring), "Imas %d neiskoristenih Upgrade Poena", PlayerInfo[playerid][xPoboljsanja]);
		SCM(playerid, BELA, varstring);
		PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/iwvvqev10x/levelup.mp3");


		if(PlayerInfo[playerid][xLevel] == 50)
		{
			PlayerInfo[playerid][xPenzija] = 1;
			SCM(playerid, ZUTA, "Sada ste level 50 i stekli ste pravo na penziju. Dobijacete svakog sata $10.000 na vas bankovni racun!");
		}
	}

	if(PlayerInfo[playerid][xPenzija] == 1)
	{
		PlayerInfo[playerid][xBRacun] += 10000;
		SCM(playerid, ZUTA, "Stigla vam je penzija. Proverite Vas bankovni racun!");
	}

	if(PlayerInfo[playerid][xRPPoen] > 0) {

		DajIgracuNovac(playerid, PlayerInfo[playerid][xRPPoen]*1000);

		SendClientMessageEx(playerid, ZUTA, "Dobili ste %d$ zbog %d RP poena.", PlayerInfo[playerid][xRPPoen]*1000, PlayerInfo[playerid][xRPPoen]);
		//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");

	}

	if(PlayerInfo[playerid][xRPPoen] < 0) {

		DajIgracuNovac(playerid, -PlayerInfo[playerid][xRPPoen]*1000);

		SendClientMessageEx(playerid, ZUTA, "Izgubili ste %d$ zbog %d RP poena.", PlayerInfo[playerid][xRPPoen]*1000, PlayerInfo[playerid][xRPPoen]);

	}

	if(PlayerInfo[playerid][xOnlineSati] == 500 || PlayerInfo[playerid][xOnlineSati] == 1000 ||
		PlayerInfo[playerid][xOnlineSati] == 1500 || PlayerInfo[playerid][xOnlineSati] == 2000 ||
		PlayerInfo[playerid][xOnlineSati] == 2500 || PlayerInfo[playerid][xOnlineSati] == 3000 ||
		PlayerInfo[playerid][xOnlineSati] == 3500 || PlayerInfo[playerid][xOnlineSati] == 4000 ||
		PlayerInfo[playerid][xOnlineSati] == 4500 || PlayerInfo[playerid][xOnlineSati] == 5000 ||
		PlayerInfo[playerid][xOnlineSati] == 5500 || PlayerInfo[playerid][xOnlineSati] == 6000) {

		PlayerInfo[playerid][xFGpoeni]++;
		SendClientMessageEx(playerid, ZUTA, "Dobili ste jedan FGpoen zbog %d online sati.", PlayerInfo[playerid][xOnlineSati]);
	}
	if(PlayerInfo[playerid][xVipTime] != 0)
	{
		PlayerInfo[playerid][xVipTime]--;
	}
	if(PlayerInfo[playerid][xVIPLevel] >= 1 && PlayerInfo[playerid][xVipTime] == 0)
	{
		SCM(playerid, SVETLOCRVENA, "Vas VIP level je istekao.");
		PlayerInfo[playerid][xVIPLevel] = 0;
			PlayerInfo[playerid][xVipTime] = 0;
	}

	SavePlayer(playerid);
	update_fg_info_tds(playerid);

}
return 1;}
//------------------------------------------------------------------------------
public PayCheck(playerid) {
if(PlayerLogged[playerid] == true) {

	PlayerInfo[playerid][xPayDay] += 1;

	if(PlayerInfo[playerid][xAdmin] >= 1) PlayerInfo[playerid][xStaffMin]++;

	if(PlayerInfo[playerid][xHelper] >= 1) PlayerInfo[playerid][xStaffMin]++;

	VremeZaCuvanje[playerid]++;
	if(VremeZaCuvanje[playerid] == 30) {
		VremeZaCuvanje[playerid] = 0;
		SavePlayer(playerid);
	}

	if(PlayerInfo[playerid][xPayDay] == 30) {
		if(PlayerInfo[playerid][xHeroinAddict] == true) {
			if(PlayerInfo[playerid][xHeroinUsed] > 0)
				PlayerInfo[playerid][xHeroinUsed] -= 1;
		}
		else {
			if(PlayerInfo[playerid][xHeroinIndicator] > 0)
				PlayerInfo[playerid][xHeroinIndicator] -= 10;
		}
		if(PlayerInfo[playerid][xMethAddict] == true) {
			if(PlayerInfo[playerid][xMethUsed] > 0)
				PlayerInfo[playerid][xMethUsed] -= 1;
		}
		else {
			if(PlayerInfo[playerid][xMethIndicator] > 0)
				PlayerInfo[playerid][xMethIndicator] -= 10;
		}
		if(PlayerInfo[playerid][xCokeCrackAddict] == true) {
			if(PlayerInfo[playerid][xCokeCrackUsed] > 0)
				PlayerInfo[playerid][xCokeCrackUsed] -= 1;
		}
		else {
			if(PlayerInfo[playerid][xCokeCrackIndicator] > 0)
				PlayerInfo[playerid][xCokeCrackIndicator] -= 10;
		}
	}

	if(PlayerInfo[playerid][xPayDay] >= 60) {
		PayDay(playerid);
	}
}
return 1;}
//------------------------------------------------------------------------------
getPosBehindVehicle(vehicleid, &Float:x, &Float:y, &Float:z, Float:offset = 0.5)
{
if(vehicleid == INVALID_VEHICLE_ID) return;

new
	Float:vehicleSize[3],
	Float:vehiclePos[3];

GetVehiclePos(vehicleid, vehiclePos[0], vehiclePos[1], vehiclePos[2]);
GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, vehicleSize[0], vehicleSize[1], vehicleSize[2]);
getXYBehindVehicle(vehicleid, vehiclePos[0], vehiclePos[1], (vehicleSize[1]/2)+offset);

x = vehiclePos[0];
y = vehiclePos[1];
z = vehiclePos[2];
return;}
getXYBehindVehicle(vehicleid, &Float:q, &Float:w, Float:distance)
{
new Float:a;
GetVehiclePos(vehicleid, q, w, a);
GetVehicleZAngle(vehicleid, a);
q += (distance * -floatsin(-a, degrees));
w += (distance * -floatcos(-a, degrees));
return;}

stock getPlayerNearestVehicle(playerid) {
static
	Float:fX,
	Float:fY,
	Float:fZ;

for (new i = 1; i != MAX_VEHICLES; i ++) if(IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
{
	if(IsPlayerInRangeOfPoint(playerid, 10.0, fX, fY, fZ)) return i;}
return INVALID_VEHICLE_ID;}
stock getPlayerNearestTractor(playerid) {
static
	Float:fX,
	Float:fY,
	Float:fZ;

for (new i = 1; i != MAX_VEHICLES; i ++) if(IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0, fX, fY, fZ)) return i;}
return INVALID_VEHICLE_ID;}
stock getPlayerNearestPizzaVehicle(playerid) {
static
	Float:fX,
	Float:fY,
	Float:fZ;

for (new i = 1; i != MAX_VEHICLES; i ++) if(IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
{
	if(IsPlayerInRangeOfPoint(playerid, 2.0, fX, fY, fZ)) return i;}
return INVALID_VEHICLE_ID;}
//------------------------------------------------------------------------------
forward FarmerCows(playerid, id);
public FarmerCows(playerid, id) {

if(id < 14) {
	TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid);
	DestroyPlayerObject(playerid, farmerInfo[playerid][fiBucketObject]);
	SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 2613, 1, -0.200000, 1.000000, -0.699999, -9.000000, 90.000000, -21.000000);
	farmerInfo[playerid][fiCowNumber] = id;
	Fusion_SetPlayerCheckpoint(playerid, milkInfo[id][cpPos][0], milkInfo[id][cpPos][1], milkInfo[id][cpPos][2], 1.0);
	CheckpointStatus[playerid] = 16;
	SendJobMessage(playerid, "Pomuzli ste kravu, pratite markere dalje!");
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1);}
else if(id == 14) {
	SendJobMessage(playerid, "Zavrsili ste sa kravama, ubacite mleko u kamionet(tipkom {36AB00]~k~~PED_FIREWEAPON~ "col_white").");
	TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid);
	DestroyPlayerObject(playerid, farmerInfo[playerid][fiBucketObject]);
	SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 2613, 1, -0.200000, 1.000000, -0.699999, -9.000000, 90.000000, -21.000000);
	farmerInfo[playerid][fiCowNumber] = 14;
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1);}
return 1;}
//------------------------------------------------------------------------------
forward AntiSK(playerid);
public AntiSK(playerid)
{
if(SKSK[playerid] == 0)
{
	SKSK[playerid] = 1;
	SendInfoMessage(playerid, "Zasticeni ste 4 sekundi od SK-a!");
	SetTimerEx("SKSKSKTimer", 4000, false, "i", playerid);}
}
forward SKSKSKTimer(playerid);
public SKSKSKTimer(playerid)
{
if(PlayerInfo[playerid][xRegistrovan] == 1)
{
	if(SKSK[playerid] == 1)
	{
		SKSK[playerid] = 0;
		SendInfoMessage(playerid, "Zastita od SK-a je prosla!");
	}
}
}
forward ZatvoriGranice(broj);
public ZatvoriGranice(broj)
{
if(broj == 1) {

	MoveDynamicObject(rampagranice1_1, 55.31342, -1536.24329, 4.94900,2.0,   360.00000, 90.00000, 261.81335);}
else if(broj == 2) {

	MoveDynamicObject(rampagranice1_2, 44.93288, -1526.56641, 4.94900,2.0,   360.00000, 90.00000, 81.97999);}
else if(broj == 3) {

	//MoveDynamicObject(rampagranice2_1, 1726.18066, 476.95074, 29.97990, 2.0, 0.00000, -91.00000, 160.00217);
	MoveDynamicObject(rampagranice2_2, 1807.45789, 804.24640, 11.00290, 2.0,  0.00000, -91.00000, 360.00000);}
else if(broj == 4) {

	//MoveDynamicObject(rampagranice2_3, 1719.41956, 478.73383, 29.97990, 2.0, 0.00000, -91.00000, 341.00000);
	MoveDynamicObject(rampagranice2_4, 1786.00269, 790.59589, 11.21290, 2.0,   0.00000, -91.00000, 180.00000);}
return 1;}
//------------------------------------------------------------------------------
public Istovar(playerid, vehicleid, broj)
{
if(broj == 1) {
	TogglePlayerControllable(playerid, true);
	WOOD[vehicleid] = false;
	DestroyDynamicObject(WOODObject[vehicleid]);
	GameTextForPlayer(playerid, "~w~Drvece je istovareno..", 5000, 1);
	Fusion_SetPlayerCheckpoint(playerid, -569.0004, -93.3358, 63.9587, 5.0);
	CheckpointStatus[playerid] = 29;
	SendJobMessage(playerid, "Drvece je istovareno, vozi sada nazad do baze posla da uzmes zaradu.");
	StaroVreme[playerid] = gettime();
	NovoVreme[playerid] = 130;}
if(broj == 2) {

	TogglePlayerControllable(playerid, true);
	GameTextForPlayer(playerid, "~w~Sljunak je istovaren..", 5000, 1);
	Fusion_SetPlayerCheckpoint(playerid, 620.8951, 832.1742, -42.9609, 5.0);
	CheckpointStatus[playerid] = 30;
	SendJobMessage(playerid, "Sljunak je istovaren, vozi sada nazad do baze posla da uzmes zaradu.");
	StaroVreme[playerid] = gettime();
	NovoVreme[playerid] = 133;}
	if(broj == 3) {


}
if(broj == 4) {


}
if(broj == 5) {


}
if(broj == 6) {


}
if(broj == 7) {

	TogglePlayerControllable(playerid, true);
	GameTextForPlayer(playerid, "~w~Cement je istovaren..", 5000, 1);
	Fusion_SetPlayerCheckpoint(playerid, 2427.3550, -1357.1913, 23.8696, 5.0);
	CheckpointStatus[playerid] = 24;
	SendJobMessage(playerid, "Cement je istovaren, vozi sada nazad do baze posla.");
	StaroVreme[playerid] = gettime();
	NovoVreme[playerid] = 65;}
if(broj == 8) {

	Fusion_DisablePlayerCheckpoint(playerid);
	CheckpointStatus[playerid] = 0;
	VehNovac[GetPlayerVehicleID(playerid)] = false;
	PlayerPrevozNovca[playerid] = -1;
	DajIgracuPlatu(playerid);
	if(ServerInfo[HappyJob] == 12)
	{
		SendJobMessage(playerid, "Dobili ste dodatnih 60000$ jer je ukljucena dupla plata na ovom poslu.");
		DajIgracuNovac(playerid, 60000);
		BusinessJobMoney(POSAO_PREVOZNOVCA, 16000);
	}
	BusinessJobMoney(POSAO_PREVOZNOVCA, ((PLATA_PREVOZNOVCA)/10));
	ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));

	ServerInfo[NovacBanka] += 50000;
	if(ServerInfo[NovacBanka] > 1000000) ServerInfo[NovacBanka] = 1000000;
		SaveServerStats();

		new novacstring[256];
	format(novacstring, sizeof(novacstring), ""col_white"Trenutno u sefu ima "col_server"%d$\n"col_white"Da opljackate banku kucajte\n"col_server"[/pljackajbanku]", ServerInfo[NovacBanka]);
	UpdateDynamic3DTextLabelText(ServerInfo[NovacLabel], BELA, novacstring);

	format(novacstring, sizeof(novacstring), ""col_white"[STANJE NOVCA]\n"col_white"Trenutno u sefu ima "col_server"%d$\n"col_white"Maksimalno moze imati "col_server"1000000$\n"col_server"Addiko Bank", ServerInfo[NovacBanka]);
	UpdateDynamic3DTextLabelText(ServerInfo[NovacLabel2], BELA, novacstring);

	StaroVreme[playerid] = 0;
	NovoVreme[playerid] = 0;

	TogglePlayerControllable(playerid, true);

}
return 1;}
public Utovar(playerid, vehicleid, broj) {
if(broj == 1) {
	TogglePlayerControllable(playerid, true);
	WOOD[GetPlayerVehicleID(playerid)] = true;
	WOODObject[GetPlayerVehicleID(playerid)] = CreateDynamicObject(18609, 0, 0, 1500, 0, 0, 0);
	AttachDynamicObjectToVehicle(WOODObject[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.075000, -4.874999, 0.750000, 0.000000, 0.000000, 0.000000);
	GameTextForPlayer(playerid, "~w~Drvece je utovareno, odvezi ga u pilanu..", 5000, 1);
	Fusion_SetPlayerCheckpoint(playerid, 2163.7754, -2299.2244, 14.2532, 5.0);
	CheckpointStatus[playerid] = 3;
	SendJobMessage(playerid, "Drvece je utovareno, vozi u pilanu da istovaris.");
	StaroVreme[playerid] = gettime();
	NovoVreme[playerid] = 129;}
if(broj == 2) {
	TogglePlayerControllable(playerid, true);
	sljunak[vehicleid] = true;
	GameTextForPlayer(playerid, "~w~Sljunak je utovaren, odvezi ga u Zagreb na gradiliste..", 5000, 1);
	Fusion_SetPlayerCheckpoint(playerid, -2119.2505,245.4850,35.2527, 10.0);
	CheckpointStatus[playerid] = 4;
	SendJobMessage(playerid, "Sljunak je utovaren, vozi u Zagreb na gradiliste.");
	StaroVreme[playerid] = gettime();
	NovoVreme[playerid] = 145;}
if(broj == 3) {

}
if(broj == 4) {
	VehCement[vehicleid] = true;
	PlayerCement[playerid] = vehicleid;
	TogglePlayerControllable(playerid, true);
	GameTextForPlayer(playerid, "~w~Cement je utovaren..", 5000, 1);
	Fusion_SetPlayerCheckpoint(playerid, 2632.2288, -2201.7471, 13.4481, 5.0);
	CheckpointStatus[playerid] = 23;
	SendJobMessage(playerid, "Cement je utovaren, odvezi ga sada nazad.");
	StaroVreme[playerid] = gettime();
	NovoVreme[playerid] = 145;}
if(broj == 5) {
	VehNovac[vehicleid] = true;
	PlayerPrevozNovca[playerid] = vehicleid;
	TogglePlayerControllable(playerid, true);
	GameTextForPlayer(playerid, "~w~Novac je utovaren..", 5000, 1);
	Fusion_SetPlayerCheckpoint(playerid, 1504.6968, -1025.6024, 23.7875, 5.0);
	CheckpointStatus[playerid] = 36;
	SendJobMessage(playerid, "Novac je utovaren, odvezi ga sada nazad u banku.");
	StaroVreme[playerid] = gettime();
	NovoVreme[playerid] = 200;}
return 1;}
//------------------------------------------------------------------------------
public Postaviotable(playerid, izbor) {

if(VehicleInfo[izbor][vReg] == 1) {
	SetTablice(VehicleInfo[izbor][vID]);}
else if(VehicleInfo[izbor][vReg] == 2) {
	SetVehicleNumberPlate(VehicleInfo[izbor][vID], VehicleInfo[izbor][vTablice]);}
ClearAnimations(playerid);
ac_SetVehicleToRespawn(VehicleInfo[izbor][vID]);
SCM(playerid, SVETLOPLAVA, "Postavio si tablice na vozilo.");
return 1;}
//------------------------------------------------------------------------------
public Fillup(playerid, fuel)
{
new VID = GetPlayerVehicleID(playerid);
new fsID = GetNearestFuelStation(playerid);
TogglePlayerControllable(playerid, true);

Fuel[VID] += fuel;
FuelTime[VID] = 0;

PuniGorivo[playerid] = false;

VehicleInfo[ScriptIDVozila[VID]][vFuel] = Fuel[VID];

if(VehicleInfo[ScriptIDVozila[VID]][vFuelType] == 1) {

	SendClientMessageEx(playerid, SVETLOPLAVA, "* Vozilo napunjeno dizelom, za: $%d.", fuel*FuelStation[fsID][fsDieselPrice]);
	DajIgracuNovac(playerid, -(fuel*FuelStation[fsID][fsDieselPrice]));
	BusinessPumpaMoney(playerid, fuel*FuelStation[fsID][fsDieselPrice]);
	FuelStation[fsID][fsDieselL] -= fuel;
	FStation_Save(fsID);}
else if(VehicleInfo[ScriptIDVozila[VID]][vFuelType] == 2) {

	SendClientMessageEx(playerid, SVETLOPLAVA, "* Vozilo napunjeno benzinom, za: $%d.", fuel*FuelStation[fsID][fsGasolinePrice]);
	DajIgracuNovac(playerid, -(fuel*FuelStation[fsID][fsGasolinePrice]));
	BusinessPumpaMoney(playerid, fuel*FuelStation[fsID][fsGasolinePrice]);
	FuelStation[fsID][fsGasolineL] -= fuel;
	FStation_Save(fsID);}
else if(VehicleInfo[ScriptIDVozila[VID]][vFuelType] == 3) {

	SendClientMessageEx(playerid, SVETLOPLAVA, "* Vozilo napunjeno gasnim uljem, za: $%d.", fuel*FuelStation[fsID][fsGasOilPrice]);
	DajIgracuNovac(playerid, -(fuel*FuelStation[fsID][fsGasOilPrice]));
	BusinessPumpaMoney(playerid, fuel*FuelStation[fsID][fsGasOilPrice]);
	FuelStation[fsID][fsGasOilL] -= fuel;
	FStation_Save(fsID);}
}
//------------------------------------------------------------------------------
public CheckGas(playerid) {
static bool:InVehicle[MAX_PLAYERS];
if(InVehicle[playerid]) {
	InVehicle[playerid] = false;}
if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
	new vehicle = GetPlayerVehicleID(playerid),
		engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
	if(engine == 1) {
			FuelTime[vehicle]++;
			if(Fuel[vehicle] >= 1) {
				if(FuelTime[vehicle] == 2) {
					if(Fuel[vehicle] <= 10) PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);

					if(GetPVarInt(playerid, "gGas") == 1) {
						if(!InVehicle[playerid]) {
							InVehicle[playerid] = true;
						}
						if(!IsVehicleBajs(vehicle)) Fuel[vehicle] --;
					}
					if(TipVozila[vehicle] == POSLOVNO_VOZILO || TipVozila[vehicle] == ADMIN_VOZILO || TipVozila[vehicle] == ORGANIZACIJSKO_VOZILO || TipVozila[vehicle] == POSLOVNO_VOZILO ||
					TipVozila[vehicle] == RENTANO_VOZILO || TipVozila[vehicle] == HELPER_VOZILO || IsVehicleBajs(vehicle) || IsVehicleBrod(vehicle) || IsVehicleLetelica(vehicle)) {
						Fuel[vehicle] ++;
					}
					FuelTime[vehicle] = 0;
				}
			}
			else {
				SetPVarInt(playerid, "NoFuel", 1);
				TogglePlayerControllable(playerid, false);
				SCM(playerid, CRVENA, "Nema vise goriva. Upisite /exit da bi ste napustili vozilo ili zovite mehanicara /call 555.");
			}
			if(ScriptIDVozila[vehicle] != -1) VehicleInfo[ScriptIDVozila[vehicle]][vFuel] = Fuel[vehicle];
	}
}
	return 1;}
//------------------------------------------------------------------------------
FixHour(hour)
{
hour = timeshift+hour;

if(hour < 0)
{
	hour = hour+24;}
else if(hour > 23)
{
	hour = hour-24;}
shifthour = hour;
return 1;}
//------------------------------------------------------------------------------

forward StalksCheck(id);
public StalksCheck(id) {

new ifile[50];
format(ifile, sizeof(ifile), F_STALK, id);

if(fexist(ifile)) {

	new string[180], vrsta[10];
	if(stalkInfo[id][sPlanted] == true && stalkInfo[id][sGrow] == false) {

		if(stalkInfo[id][sType] == BILJKA_SLJIVA) { vrsta = "Sljiva";}
		else if(stalkInfo[id][sType] == BILJKA_KRUSKA) { vrsta = "Kruska";}
		else if(stalkInfo[id][sType] == BILJKA_JABUKA) { vrsta = "Jabuka";}
		else if(stalkInfo[id][sType] == BILJKA_KUPUS) { vrsta = "Kupus";}
		else if(stalkInfo[id][sType] == BILJKA_RUZE) { vrsta = "Ruze";}

		if(stalkInfo[id][sHour] >= 0 && stalkInfo[id][sMinut] >= 1) {
			stalkInfo[id][sMinut]--;
			format(string, sizeof(string), "Biljka jos nije izrasla!\nVreme do izrastanja: %d sati, %d minuta\nVrsta biljke: %s", stalkInfo[id][sHour], stalkInfo[id][sMinut], vrsta);
		}
		else if(stalkInfo[id][sHour] >= 1 && stalkInfo[id][sMinut] == 0) {
			stalkInfo[id][sHour]--;
			stalkInfo[id][sMinut] = 60;
			format(string, sizeof(string), "Biljka jos nije izrasla!\nVreme do izrastanja: %d sati, %d minuta\nVrsta biljke: %s", stalkInfo[id][sHour], stalkInfo[id][sMinut], vrsta);
		}
		else if(stalkInfo[id][sHour] == 0 && stalkInfo[id][sMinut] == 0) {
			stalkInfo[id][sGrow] = true;
			format(string, sizeof(string), "Biljka je izrasla!\nDa oberes voce kucaj /oberidrvo\nVrsta biljke: %s", vrsta);
		}
		UpdateDynamic3DTextLabelText(stalkInfo[id][s3D], BELA, string);
		Stalk_Save(id);
	}
}

if(id+1 < MAX_STALKS) SetTimerEx("StalksCheck", 10, false, "d", id+1);
return 1;}

task SyncTime[60000]()
{
new tmphour,
		tmpminute,
			tmpsecond,
				year,
					month,
						day,
						   stringicc[20];

getdate(year, month, day);
gettimeEx(tmphour, tmpminute, tmpsecond);
FixHour(tmphour);

tmphour = shifthour;
format(stringicc, sizeof(stringicc), "%s%d:%s%d~n~%d/%d/%d", (tmphour < 10) ? ("0") : (""), tmphour, (tmpminute < 10) ? ("0") : (""), tmpminute, day, month, year);
TextDrawSetString(FG_InGame[15], stringicc);

for(new i = 1; i < MAX_ATM; i++) {
	if(atmInfo[i][atmExists] == true) {
		if(atmInfo[i][atmVremeDoRoba] != 0) {
			atmInfo[i][atmVremeDoRoba]--;
			if(atmInfo[i][atmVremeDoRoba] == 0) {
				atmInfo[i][atmPreseceneZice] = false;
				atmInfo[i][atmProbijenBios] = false;
			}
		}
	}
}

for(new i = 1; i < MAX_GZONE; i++) {

	if(gZoneInfo[i][gZoneTime] != 0) {

		gZoneInfo[i][gZoneTime]--;
	}
}

if(tmpminute == 30 || tmpminute == 0) {
	if(PljackaUToku) return SCMA(0x86C6DBAA, "[RESPAWN] Automatski respawn vozila se nece odrzati zbog pljacke banke.");
	if(ZlataraUToku) return SCMA(0x86C6DBAA, "[RESPAWN] Automatski respawn vozila se nece odrzati zbog pljacke zlatare.");
	SetTimer("RespawnCallGlobal", 60000, false);
	SCMA(0x86C6DBAA, "[RESPAWN] Server je automatski aktivirao respawn svih vozila!");
	SCMA(0x86C6DBAA, "[RESPAWN] Respawn ce biti pokrenut za 1 minut.");}

if(tmpminute == 45) {

	SetTimerEx("StalksCheck", 10, false, "d", 0);}

if((tmphour > ghour) || (tmphour == 0 && ghour == 23)) {

	new varstring[92];
	format(varstring, sizeof(varstring), "Hvala Vam sto igrate na Fusion Gaming Community, trenutno je "col_yelow"%d:00 sati.", tmphour);
	OOCNews(BELA, varstring);
	ghour = tmphour;

	for(new i = 0; i < sizeof(Roadblocks); i++)
	{
			if(PljackaUToku) return 1;
			if(ZlataraUToku) return 1;
			if(Roadblocks[i][sCreated] == 1)
			{
				Roadblocks[i][sCreated] = 0;
				Roadblocks[i][sX] = 0.0;
				Roadblocks[i][sY] = 0.0;
				Roadblocks[i][sZ] = 0.0;
				Roadblocks[i][sSpike] = false;
				DestroyDynamicObject(Roadblocks[i][sObject]);
				return 1;
			}
	}

	if(tmphour == 21) {
		SetWeather(1);
	}

	if(realtime) {
		SetWorldTime(tmphour);
		ServerInfo[VremeInGame] = tmphour;
	}

	for(new i = 1; i < MAX_GZONE; i++) {

		if(gZoneInfo[i][gZoneGangID] != -1) {

			OI[gZoneInfo[i][gZoneGangID]][oSafeMoney] += 500;
			SaveOrganization(gZoneInfo[i][gZoneGangID]);

		}
	}

	SetTimerEx("IzvlacenjeKuglica", 3000, false, "d", 1);

	for(new f = 0; f < MAX_GOBJ; f++) {

		if(IsValidDynamicObject(dGunData[f][gObjID]))
			DestroyDynamicObject(dGunData[f][gObjID]);

		dGunData[f][ObjPos][0] = 0.0;
		dGunData[f][ObjPos][1] = 0.0;
		dGunData[f][ObjPos][2] = 0.0;
		dGunData[f][gObjID] = -1;
		dGunData[f][ObjData][0] = 0;
		dGunData[f][ObjData][1] = 0;
	}

	IzvuciRezultateKladionica();

	foreach(new playerid : Player) {

		new bool:tiket = false;
		if(KladionicaListic[playerid][Uplaceno] && !KladionicaListic[playerid][Zavrseno]) {

			for(new i = 0; i < 10; i++) {

				if(KladionicaListic[playerid][keciksdva][i] != -1) {

					if(Parovi[KladionicaListic[playerid][parID][i]][Rezultat][2] == KladionicaListic[playerid][keciksdva][i]) {

						tiket = true;
					}
					else if(Parovi[KladionicaListic[playerid][parID][i]][Rezultat][2] != KladionicaListic[playerid][keciksdva][i]) {

						tiket = false;
						break;
					}

				}
			}
		}
		if(tiket == true) {

			KladionicaListic[playerid][Status] = true;
			KladionicaListic[playerid][Zavrseno] = true;
			KladionicaListic[playerid][Uplaceno] = true;
			SaveKladionica(playerid);
		}
		else if(tiket == false) {

			KladionicaListic[playerid][Status] = false;
			KladionicaListic[playerid][Uplaceno] = true;
			KladionicaListic[playerid][Zavrseno] = true;
			SaveKladionica(playerid);

		}
	}

	PostaviParoveKladionica();}
foreach(new i : Player) {
	AFKCheck(i);

	PayCheck(i);

	CheckGas(i);

	OtherCheck(i);

	if(PlayerInfo[i][xHelper] != 0) {
		if(AdminDuty[i] == true) {
			PlayerInfo[i][xHDutyTimeMin]++;
			PlayerInfo[i][xHDutyTime]++;
			if(PlayerInfo[i][xHDutyTimeMin] >= 60) {
				PlayerInfo[i][xHDutyTimeMin] = 0;
			}
		}
	}

	if(PlayerInfo[i][xAdmin] != 0) {
		if(AdminDuty[i] == true) {
			PlayerInfo[i][xADutyTimeMin]++;
			PlayerInfo[i][xADutyTime]++;
			if(PlayerInfo[i][xADutyTimeMin] >= 60) {
				PlayerInfo[i][xADutyTimeMin] = 0;
			}
		}
	}

	if(PlayerInfo[i][xWanted] != 0 && GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == 0) {
		MinutiIgraca[i]++;
		if(MinutiIgraca[i] == 5) {
			MinutiIgraca[i] = 0;
			PlayerInfo[i][xWanted]--;
			if(PlayerInfo[i][xVIPLevel] >= 4) PlayerInfo[i][xWanted]--;
			if(PlayerInfo[i][xVIPLevel] >= 5) PlayerInfo[i][xWanted]--;
			Fusion_SetPlayerWantedLevel(i, PlayerInfo[i][xWanted]);
			if(PlayerInfo[i][xWanted] == 0) {
				strmid(ZlocinInfo[i][zPrijavio], "Nema", 0, strlen("Nema"), 255);
				strmid(ZlocinInfo[i][zPocinio], "Nema", 0, strlen("Nema"), 255);
				strmid(ZlocinInfo[i][zZlocin], "Nema", 0, strlen("Nema"), 255);
			}
		}
	}

	if(PlayerInfo[i][xPljackaVreme] != 0) {
		PlayerInfo[i][xPljackaVreme]--;
	}

	if(PlayerInfo[i][xHangarTime] != 0) {

		PlayerInfo[i][xHangarTime]--;
	}

	if(PlayerInfo[i][xUzoPaket] != 0) {

		PlayerInfo[i][xUzoPaket]--;
	}

	if(PlayerInfo[i][xZauzimanjeVreme] != 0) {

		PlayerInfo[i][xZauzimanjeVreme]--;
	}

	if(PlayerInfo[i][xSvercer] != 0) {

		PlayerInfo[i][xSvercer]--;
	}
	for(new ai = 0; ai < MAX_PLAYERS; ai++) {
		if(IsPlayerConnected(ai)) {
			if(Trenirao[ai] > 0) Trenirao[ai]--;
		}
	}
}
return 1;}
//------------------------------------------------------------------------------

stock KonvertujVremeAB(vreme)
{
new minuti, sekunde, string[15];
if(vreme > 59)
{
	minuti = floatround(vreme/60);
	sekunde = floatround(vreme - minuti*60);
	if(sekunde > 9) format(string, sizeof(string), "%dhrs:%dmin", minuti, sekunde);
	else format(string, sizeof(string), "%dhrs:0%dmin", minuti, sekunde);}
else
{
	sekunde = floatround(vreme);
	if(sekunde > 9) format(string, sizeof(string), "0hrs:%dmin", sekunde);
	else format(string, sizeof(string), "0hrs:0%dmin", sekunde);}
return string;}

stock KonvertujVreme(vreme)
{
new minuti, sekunde, string[15];
if(vreme > 59)
{
	minuti = floatround(vreme/60);
	sekunde = floatround(vreme - minuti*60);
	if(sekunde > 9) format(string, sizeof(string), "%dmin:%dsec", minuti, sekunde);
	else format(string, sizeof(string), "%dmin:0%dsec", minuti, sekunde);}
else
{
	sekunde = floatround(vreme);
	if(sekunde > 9) format(string, sizeof(string), "0min:%dsec", sekunde);
	else format(string, sizeof(string), "0min:0%dsec", sekunde);}
return string;}

task GlobalTimer[1000]()
{
new id = -1;

new tmphour,
		tmpminute,
			tmpsecond,
				year,
					month,
						day,
						   stringicc[30];

getdate(year, month, day);
gettimeEx(tmphour, tmpminute, tmpsecond);
FixHour(tmphour);

tmphour = shifthour;
format(stringicc, sizeof(stringicc), "%s%d:%s%d~n~%d/%d/%d", (tmphour < 10) ? ("0") : (""), tmphour, (tmpminute < 10) ? ("0") : (""), tmpminute, day, month, year);
TextDrawSetString(FG_InGame[15], stringicc);

if(cseconds) {

	format(cstring, 6, "~w~%d", cseconds-1);
	GameTextForAll(cstring, 1100, 4);
	SoundForAll(1056);

	cseconds --;

	if(!cseconds)
	{
		GameTextForAll("~r~GO GO GO!!!", 2000, 4);
		SoundForAll(1057);
	}
}

foreach(new i : Player) {

	//fuel
	if(IsPlayerInAnyVehicle(i)&& GetPlayerState(i) == PLAYER_STATE_DRIVER) {
		new vehicle = GetPlayerVehicleID(i);
		if(!IsVehicleBajs(vehicle)) {
			new stringic[30];
			format(stringic, sizeof(stringic), "%d~N~L", Fuel[vehicle]);
			PlayerTextDrawSetString(i, Brzinomer[i][6], stringic);
		}
	}

	if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {

		for(new rb = 0; rb < sizeof(Roadblocks); rb++) {

			if(IsPlayerInRangeOfPoint(i, 3.0, Roadblocks[rb][sX], Roadblocks[rb][sY], Roadblocks[rb][sZ])) {

				if(Roadblocks[rb][sCreated] == 1 && Roadblocks[rb][sSpike]) {

					new panels, tires, doors, lights;
					new carid = GetPlayerVehicleID(i);
					GetVehicleDamageStatus(carid, panels, doors, lights, tires);
					ac_UpdateVehicleDamageStatus(carid, panels, doors, lights, 15);
					return 0;
				}
			}
		}
	}
	//Radio
	if(RadioStatus[i] == 1 && !IsPlayerInAnyVehicle(i)) return RadioStatus[i] = 0, StopAudioStreamForPlayer(i);

	if(SearchNadji[i] != -1) {

		if(IsPlayerConnected(SearchNadji[i])) {

			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(SearchNadji[i], X, Y, Z);
			Fusion_SetPlayerCheckpoint(i, X, Y, Z, 6);
		}
		else if(!IsPlayerConnected(SearchNadji[i])) SearchNadji[i] = -1;

	}

	if(BlowJobCount[i] != 0) {

		BlowJobCount[i]--;
		new stringic[10];
		format(stringic, sizeof(stringic), "%d", BlowJobCount[i]);
		PlayerTextDrawSetString(i, BLOWJOBCOVER[i][4], stringic);
	}

	if(NaDmEventu[i] == false && WARPInfo[i][WARIgrac] == -1) {
		if(TogTag[i] == true) {
			if(IsPlayerPaused(i)) {
				new afktajm[30];
				format(afktajm, sizeof(afktajm), "[ AFK %s ]", KonvertujVreme(GetPlayerPausedTime(i)/1000));
				SetPlayerChatBubble(i, afktajm, LJUBICASTA, 40.0, 10000);
			}
			else
			{
				SetPlayerChatBubble(i, " ", -1, 40.0, 10000);		
			}
		}
		else 
		{
			if(IsPlayerPaused(i)) {
				new afktajm[30];
				format(afktajm, sizeof(afktajm), "[ AFK %s ]", KonvertujVreme(GetPlayerPausedTime(i)/1000));
				SetPlayerChatBubble(i, afktajm, LJUBICASTA, 40.0, 10000);
			}
			else if(PlayerInfo[i][xSkriptaRank] == 1) {
				SetPlayerChatBubble(i, "[ SKRIPTER ]", FUSIONGAMING, 40.0, 10000);
			}
			else if(PlayerInfo[i][xSkriptaRank] == 2) {
				SetPlayerChatBubble(i, "[ Z.HEAD AFG ]", FUSIONGAMING, 40.0, 10000);
			}
			else if(PlayerInfo[i][xSkriptaRank] == 3) {
				SetPlayerChatBubble(i, "[ MAPPING TEAM ]", FUSIONGAMING, 40.0, 10000);
			}
			else if(PlayerInfo[i][xSkriptaRank] == 6) {
				SetPlayerChatBubble(i, "[ DEVELOPER/MAPPER ]", FUSIONGAMING, 40.0, 10000);
			}
			else if(PlayerInfo[i][xAdmin] == 7) {
				SetPlayerChatBubble(i, "[ VLASNIK ]", CRVENA, 40.0, 10000);
				SetPlayerColor(i, CRNA);
			}
			else if(PlayerInfo[i][xAdmin] == 6) {
				SetPlayerChatBubble(i, "[ DIREKTOR ]", CRVENA, 40.0, 10000);
			}
			else if(PlayerInfo[i][xAdmin] == 5) {
				SetPlayerChatBubble(i, "[ HEAD AFG ]", FUSIONGAMING, 40.0, 10000);
			}
			else if(PlayerInfo[i][xAdmin] == 4) {
				SetPlayerChatBubble(i, "[ AFG 4 ]", FUSIONGAMING, 40.0, 10000);
			}
			else if(PlayerInfo[i][xAdmin] == 3) {
				SetPlayerChatBubble(i, "[ AFG 3 ]", FUSIONGAMING, 40.0, 10000);
			}
			else if(PlayerInfo[i][xAdmin] == 2) {
				SetPlayerChatBubble(i, "[ AFG 2 ]", FUSIONGAMING, 40.0, 10000);
			}
			else if(PlayerInfo[i][xAdmin] == 1) {
				SetPlayerChatBubble(i, "[ AFG 1 ]", FUSIONGAMING, 40.0, 10000);
			}
			else if(PlayerInfo[i][xHelper] == 3) {
				SetPlayerChatBubble(i, "[ H-HEAD ]", Helper, 40.0, 10000);
			}
			else if(PlayerInfo[i][xHelper] >= 1 && PlayerInfo[i][xHelper] <= 2) {
				SetPlayerChatBubble(i, "[ HELPER ]", Helper, 40.0, 10000);
			}
			else if(PlayerInfo[i][xVIPLevel] == 1 && PlayerInfo[i][xWanted] == 0) {
				SetPlayerChatBubble(i, "[ BRONZE VIP ]", 0x00CD7F32, 40.0, 10000);
			}
			else if(PlayerInfo[i][xVIPLevel] == 2 && PlayerInfo[i][xWanted] == 0) {
				SetPlayerChatBubble(i, "[ SILVER VIP ]", 0x005E5D5B, 40.0, 10000);
			}
			else if(PlayerInfo[i][xVIPLevel] == 3 && PlayerInfo[i][xWanted] == 0) {
				SetPlayerChatBubble(i, "[ GOLDEN VIP ]", 0x00FFD700, 40.0, 10000);
			}
			else if(PlayerInfo[i][xVIPLevel] == 4 && PlayerInfo[i][xWanted] == 0) {
				SetPlayerChatBubble(i, "[ PLATINUM VIP ]", 0x001566BD, 40.0, 10000);
			}
			else if(PlayerInfo[i][xVIPLevel] == 5 && PlayerInfo[i][xWanted] == 0) {
				SetPlayerChatBubble(i, "[ SUPER VIP ]", 0x00DB0016, 40.0, 10000);
				if(!PlayerInfo[i][xDBO]) {
					SetPlayerColor(i, 0x00FF0000);
				}
			}
			else if(PlayerInfo[i][xMute] != 0) {
				SetPlayerChatBubble(i, "[ MUTIRAN ]", CRVENA, 40.0, 10000);
			}
			else if(PlayerInfo[i][xYouTuber] == 1) {
				SetPlayerChatBubble(i, "[ YOUTUBER ]", 0xb042f4FF, 40.0, 10000);
			}
			else if(PlayerInfo[i][xPromoter] == 1) {
				SetPlayerChatBubble(i, "[ PROMOTER ]", LJUBICASTA, 40.0, 10000);
			}
			else if(PlayerInfo[i][xLevel] == 1  || PlayerInfo[i][xLevel] == 2) {
				SetPlayerChatBubble(i, "[ NOVAJLIJA ]", 0x00E5FFFF, 40.0, 10000);
			}
		}
	}
	
	if(PlayerInfo[i][xMute] != 0) {
		PlayerInfo[i][xMute]--;
		if(PlayerInfo[i][xMute] <= 0) {
			PlayerInfo[i][xMute] = 0;
		}
	}
	if(PlayerInfo[i][xMuteAd] != 0) {
		PlayerInfo[i][xMuteAd]--;
		if(PlayerInfo[i][xMuteAd] <= 0) {
			PlayerInfo[i][xMuteAd] = 0;
		}
	}
	if(PlayerInfo[i][xDisarm] != 0) {
		PlayerInfo[i][xDisarm]--;
		if(PlayerInfo[i][xDisarm] <= 0) {
			PlayerInfo[i][xDisarm] = 0;
		}
	}
	if(VremeZaNovac[i] != 0) {
		VremeZaNovac[i]--;
		if(VremeZaNovac[i] == 0) {
			SendClientMessageEx(i, NARACRVENA, "Preziveli ste 2 minuta i dobili %d$.", PljackaNovac[i]);
			RemovePlayerAttachedObject(i, 2);
			DajIgracuNovac(i, PljackaNovac[i]);
			PljackaNovac[i] = 0;
		}
	}

	if(VremeZaZlato[i] != 0) {
		VremeZaZlato[i]--;
		if(VremeZaZlato[i] == 0) {
			SendClientMessageEx(i, NARACRVENA, "Preziveli ste 2 minuta i dobili %dg zlata.", PljackaZlato[i]);
			PlayerInfo[i][xZlato] += PljackaZlato[i];
			SavePlayer(i);
			PljackaZlato[i] = 0;
			update_fg_info_tds(i);
		}
	}
	if(Polaganje[i] >= 1) {
		if(IsPlayerInAnyVehicle(i)) {
			if(GetSpeed(i) > 100) {
				GreskaVoznja[i]++;
				SCM(i, -1, ""col_orange"[Instruktor]: "col_white"Prekoracili ste brzinu od 100km/h na gradskoj voznji i dobili gresku!");
				if(GreskaVoznja[i] == 3) {
					Polaganje[i] = 0;
					GreskaVoznja[i] = 0;
					Fusion_DisablePlayerCheckpoint(i);
					ac_RemovePlayerFromVehicle(i);
					SCM(i, -1, ""col_orange"[Instruktor]: "col_white"Pali ste na vozackom ispitu jer ste prekoracili brzinu od 100km/h 3 puta!");
					ac_SetVehicleToRespawn(GetPlayerVehicleID(i));
				}
			}
		}
	}
	if(IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER && GetSpeed(i) > 10) {

		new autoid = ScriptIDVozila[GetPlayerVehicleID(i)];

		if(autoid != -1) {

			VehicleInfo[autoid][vMetri] += (GetSpeed(i)*10)/36;
			if(VehicleInfo[autoid][vMetri] > 999) {

				VehicleInfo[autoid][vKilometri]++;
				VehicleInfo[autoid][vMetri] = 0;
			}
		}
	}

	if(ReportGlobal[i] > 0) ReportGlobal[i]--;

	if(GotoCMD[i] > 0) GotoCMD[i]--;

	if(vRTC[i] > 0) vRTC[i]--;

	if(VIPPort[i] > 0) VIPPort[i]--;

	if(PromoterPort[i] > 0) PromoterPort[i]--;

	if(NargilaLimit[i] > 0) NargilaLimit[i]--;

	if(FixVehGlobal[i] > 0) FixVehGlobal[i]--;

	if(NewGlobal[i] > 0) NewGlobal[i]--;

	if(antiCheatCS[i][SpamChat] > 0) antiCheatCS[i][SpamChat]--;

	if(antiCheatCS[i][SpamCommand] > 0) antiCheatCS[i][SpamCommand]--;

	if(DropedGun[i] > 0) DropedGun[i]--;

	CarDamageTimer(i);

	CheckWeapons(i);

	CheckTeleports(i);

	DrugCheck(i);

	AntiCheat(i);

	CellphoneCheck(i);

	if(GetFactionType(i) != ORG_TIP_PD && !IsPlayerInAnyVehicle(i)) {

		if(GetPlayerWeapon(i) >= 24 && GetPlayerWeapon(i) <= 40) {

			if(Javno3(i) || Javno4(i) || Javno5(i) || Javno6(i) || Javno7(i) || Javno8(i) || IsPlayerInRangeOfPoint(i, 10, 1133.5189, -936.0316, 47.7939)) {

				if(antiCheatCS[i][ArmedWeapon] < 3) {
					SetPlayerArmedWeapon(i, 0);
					antiCheatCS[i][ArmedWeapon] ++;
					SendClientMessageEx(i, ANTICHEAT, "Ne mozete koristiti oruzje na javnom mestu! Upozorenje %d/3.", antiCheatCS[i][ArmedWeapon]);
				}
				if(antiCheatCS[i][ArmedWeapon] == 3) {

					SendClientMessageEx(i, ANTICHEAT, "Ne mozete koristiti oruzje na javnom mestu! Upozorenje %d/3.", antiCheatCS[i][ArmedWeapon]);
					antiCheatCS[i][ArmedWeapon] = 0;
					GameTextForPlayer(i, "~r~Oduzeto vam je oruzje!", 2500, 1);
					ResetAllWeapons(i);
					return 1;
				}
			}
		}
	}

	if(TrashLimit[i] != 0) {
		TrashLimit[i]--;
	}

	if(Odbrojavanje[i] != 0) {
		new varstring[34];
		format(varstring, sizeof(varstring), "~w~Pricekajte, Vreme: ~b~%d", Odbrojavanje[i]);
		PlayerTextDrawSetString(i, PVreme[i], varstring);
		Odbrojavanje[i]--;
	}

	if((id = Boombox_Nearest(i)) != INVALID_PLAYER_ID && Boombox[i] != id && strlen (BoomboxInfo[id][boomboxURL]) && !IsPlayerInAnyVehicle(i)) {
		new str[128];
		strunpack(str, BoomboxInfo[id][boomboxURL]);
		Boombox[i] = id;

		StopAudioStreamForPlayer(i);
		PlayAudioStreamForPlayer(i, str, BoomboxInfo[id][boomboxPos][0], BoomboxInfo[id][boomboxPos][1], BoomboxInfo[id][boomboxPos][2], 30.0, 1);
	}
	else if(Boombox[i] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint(i, 30.0, BoomboxInfo[Boombox[i]][boomboxPos][0], BoomboxInfo[Boombox[i]][boomboxPos][1], BoomboxInfo[Boombox[i]][boomboxPos][2])) {
		Boombox[i] = INVALID_PLAYER_ID;
		StopAudioStreamForPlayer(i);
	}

	if(PlayerInfo[i][xLevel] < 3){
		for(new g = 0; g < 13; g++) {
			new sweapon, sammo;
				GetPlayerWeaponData(i, g, sweapon, sammo);
			if(sweapon != 0 && sammo != 0) {
					ResetAllWeapons(i);
					new varstring[144];
					GameTextForPlayer(i, "~w~Ti si novajlija, ne mozes~n~~b~posedovati oruzje!", 5000, 3);
					format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Oruzje || %s[ID: %d] | Level manji od 3 !", ImeIgraca(i), i);
				AdminPoruka(ANTICHEAT, varstring);
			}
		}
	}

	if(GetPlayerSurfingVehicleID(i) != INVALID_VEHICLE_ID &&
		!AdminDuty[i] &&
		GetSpeed(i) > 50 &&
		!IsVehicleBrod(GetPlayerSurfingVehicleID(i)) &&
		GetVehicleModel(GetPlayerSurfingVehicleID(i)) != 406 &&
		GetVehicleModel(GetPlayerSurfingVehicleID(i)) != 422 &&
		GetVehicleModel(GetPlayerSurfingVehicleID(i)) != 433) {

		new Float:slx, Float:sly, Float:slz;
		GetPlayerPos(i, slx, sly, slz);
		ac_SetPlayerPos(i, slx, sly, slz+5);

		SCM(i, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Slapovan si jer je zabranjeno voziti se na autu!");
	}

}
return 1;}

//------------------------------------------------------------------------------
public CarDamageTimer(playerid) {
new Float:vHealth,
	newcar = GetPlayerVehicleID(playerid),
	engine, lights, alarm, doors, bonnet, boot, objective;

if(IsPlayerInAnyVehicle(playerid)) {
	if(!IsVehicleLetelica(newcar) && !IsVehicleBrod(newcar) && !IsVehicleBajs(newcar)) {

		GetVehicleHealth(newcar, vHealth);

		if(vHealth >= 250 && vHealth <= 350) {
			GetVehicleParamsEx(newcar,engine, lights, alarm, doors, bonnet, boot, objective);
			ac_SetVehicleParamsEx(newcar,0,lights,alarm,doors,bonnet,boot,objective);
			SetCameraBehindPlayer(playerid);
			GameTextForPlayer(playerid, "~r~Vozilo je unisteno. Koristite /exit za napustanje vozila.", 3000, 1);
			vCanDrive[newcar] = 0;
		}
	}
}
}
//------------------------------------------------------------------------------
public AntiSpawnCrash()
{
carspawntimer = 0;}
//------------------------------------------------------------------------------
public KickIgraca(playerid)
{
Kick(playerid);
return 1;}

stock IsTrailerVehicle(id)
{
if(id == 435 || id == 450 || id == 569 || id == 584 || id == 591 || id == 606 || id == 610) return true;

return false;}

forward Resetwarning(playerid);
public Resetwarning(playerid)
{
admingsupozoreni[playerid] = 0;
return true;}

forward ACKick(playerid, string[]);
public ACKick(playerid, string[])
{
if(acspam[playerid] == 1) return true;
acspam[playerid] = 1;
new varstring[128];
format(varstring, sizeof(varstring), "| AC | %s(%d) je kickovan sa servera. Razlog: "col_white"%s", ImeIgraca(playerid),playerid,string);
AdminPoruka(SVETLOCRVENA, varstring);
new playersip[100];
GetPlayerIp(playerid,playersip,sizeof(playersip));
new string2[500];
	format(string2,500,""col_server"- Nick: '%s'\n- IP: '%s'\n\nKickovani ste sa servera zbog '%s'.\nAko mislite da je ovo neki bug\nili greska, prijavite adminima.",ImeIgraca(playerid),playersip,string);
	SPD(playerid, dialog_AC, DSMSG, "{F81414]ZG:AC - Kick", string2, "OK", "");
	KickIgraca(playerid);
return true;}

forward ACWarning(playerid, string[]);
public ACWarning(playerid, string[])
{
if(admingsupozoreni[playerid] == 1) return 1;
else
{
admingsupozoreni[playerid] = 1;
SetTimerEx("Resetwarning", 5000, false, "i", playerid);
//	new adminima[300];
new varstring[90];
format(varstring, sizeof(varstring), "| AC | Moguce %s || %s[ID: %d] | Koristi /spec!!!", string,ImeIgraca(playerid), playerid);
AdminPoruka(ANTICHEAT, varstring);}
return true;}
//------------------------------------------------------------------------------
public GPSConnect(playerid, gpslvl, vehicleid)
{
// if login edit if(Bit1_Get(g_PlayerLogged, playerid) != 0)

	if(gpslvl == 1)
	{
		new TmpZone[MAX_ZONE_NAME];
		GetVehicleZone(vehicleid, TmpZone, sizeof(TmpZone));
		SendInfoMessage(playerid, "Vase vozilo je u cetvrti: %s", TmpZone);

		new Float:x,Float:y,Float:z;
		GetVehiclePos(vehicleid, x, y, z);

		Fusion_SetPlayerCheckpoint(playerid, x, y, z, 5.0);
		CheckpointStatus[playerid] = 1;
		SetPVarInt(playerid, "LocatingCar", 1);
		SetPVarInt(playerid, "GPSTimerCalled", 0);

		GameTextForPlayer(playerid, "~g~gps aktiviran", 3000, 1);
	}
	return 1;}
//------------------------------------------------------------------------------
public BoxTrain(playerid) {
if(Training[playerid] == 0) {
	TogglePlayerControllable(playerid, 0);
	ac_SetPlayerPos(playerid, 768.1064,14.3897,1000.6992);
	SetPlayerFacingAngle(playerid, 266.8890);
	SetPlayerCameraPos(playerid, 765.4290,8.6809,1000.7123);
	SetPlayerCameraLookAt(playerid, 768.1064,14.3897,1000.6992);
	ApplyAnimation(playerid,"GYMNASIUM","GYMshadowbox",4.1,1,1,1,1,9500);
	SetTimerEx("BoxTrain", 10000, false, "i", playerid);
	Training[playerid]  = 1;
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Training... ~n~~l~]]]",10000,3);}
else if(Training[playerid] == 1) {
	SetPlayerCameraPos(playerid, 771.5601,11.3144,1000.7026);
	SetPlayerCameraLookAt(playerid, 768.1064,14.3897,1000.6992);
	ApplyAnimation(playerid,"GYMNASIUM","GYMshadowbox",4.1,1,1,1,1,14500);
	SetTimerEx("BoxTrain", 15000, false, "i", playerid);
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Training... ~n~~y~] ~l~]]",15000,3);
	Training[playerid]  = 2;}
else if(Training[playerid] == 2) {
	BusinessMoney(uFirmi[playerid], 500, playerid);
	SetPlayerCameraPos(playerid, 772.9484,-0.2051,1000.7241);
	SetPlayerCameraLookAt(playerid, 768.1064,14.3897,1000.6992);
	ApplyAnimation(playerid,"GYMNASIUM","GYMshadowbox",4.1,1,1,1,1,19500);
	SetTimerEx("BoxTrain", 20000, false, "i", playerid);
	Training[playerid]  = 3;
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Training... ~n~~y~]] ~l~]",20000,3);}
else if(Training[playerid] == 3) {
	TogglePlayerControllable(playerid, 1);
	SetCameraBehindPlayer(playerid);
	ClearAnimations(playerid);
	SCM(playerid, FUSIONGAMING, "Zavrsio si svoj trening, i naucio borbeni stil Boxing!");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Finished! ~n~~y~]]]",10000,3);
		SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
	PlayerInfo[playerid][xBStil] = 1; SavePlayer(playerid);
	Training[playerid]  = 0;}
return 1;}
//------------------------------------------------------------------------------
public KungTrain(playerid) {
if(Training[playerid]  == 0) {
	TogglePlayerControllable(playerid, 0);
	ac_SetPlayerPos(playerid, 772.6890,5.4252,1000.7802);
	SetPlayerFacingAngle(playerid, 89.2975);
	SetPlayerCameraPos(playerid, 767.2456,-0.7102,1000.7197);
	SetPlayerCameraLookAt(playerid, 772.6890,5.4252,1000.7802);
	ApplyAnimation(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,7500);
	SetTimerEx("KungTrain", 8000, false, "i", playerid);
	Training[playerid]  = 1;
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Training... ~n~~l~]]]",10000,3);}
else if(Training[playerid]  == 1) {
	SetPlayerCameraPos(playerid, 765.4534,8.1254,1000.7133);
	SetPlayerCameraLookAt(playerid, 772.6890,5.4252,1000.7802);
	ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,12500);
	SetTimerEx("KungTrain", 13000, false, "i", playerid);
	Training[playerid]  = 2;
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Training... ~n~~b~] ~l~]]",13000,3);}
else if(Training[playerid]  == 2) {
	BusinessMoney(uFirmi[playerid], 500, playerid);
	SetPlayerCameraPos(playerid, 774.3497,10.2337,1000.7027);
	SetPlayerCameraLookAt(playerid, 772.6890,5.4252,1000.7802);
	ApplyAnimation(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,17500);
	SetTimerEx("KungTrain", 18000, false, "i", playerid);
	Training[playerid]  = 3;
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Training... ~n~~b~]] ~l~]",18000,3);}
else if(Training[playerid]  == 3)
{
	TogglePlayerControllable(playerid, 1);
	SetCameraBehindPlayer(playerid);
	ClearAnimations(playerid);
	SCM(playerid, FUSIONGAMING, "Zavrsio si svoj trening, i naucio borbeni stil Kung Fu-a!");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Finished! ~n~~b~]]]",10000,3);
	SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
	PlayerInfo[playerid][xBStil] = 2; SavePlayer(playerid);
	Training[playerid]  = 0;}
return 1;}
//------------------------------------------------------------------------------
public GrabTrain(playerid)
{
if(Training[playerid]  == 0)
{
	TogglePlayerControllable(playerid, 0);
	ac_SetPlayerPos(playerid, 767.1951,-2.5557,1000.7187);
	SetPlayerFacingAngle(playerid, 172.0182);
	SetPlayerCameraPos(playerid, 772.6243,-0.1576,1000.7242);
	SetPlayerCameraLookAt(playerid, 767.1951,-2.5557,1000.7187);
	ApplyAnimation(playerid,"GANGS","shake_carSH",4.0,1,0,0,0,8500);
	SetTimerEx("GrabTrain", 9000, false, "i", playerid);
	Training[playerid]  = 1;
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~Training... ~n~~l~]]]",9000,3);}
else if(Training[playerid]  == 1)
{
	SetPlayerCameraPos(playerid, 763.0099,2.6098,1001.5942);
	SetPlayerCameraLookAt(playerid, 767.1951,-2.5557,1000.7187);
	ApplyAnimation(playerid,"GANGS","shake_cara",4.0,1,0,0,0,13500);
	SetTimerEx("GrabTrain", 14000, false, "i", playerid);
	Training[playerid]  = 2;
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~Training... ~n~~p~] ~l~]]",14000,3);}
else if(Training[playerid]  == 2)
{
	BusinessMoney(uFirmi[playerid], 500, playerid);
	SetPlayerCameraPos(playerid, 769.8934,8.1243,1000.7101);
	SetPlayerCameraLookAt(playerid, 767.1951,-2.5557,1000.7187);
	ApplyAnimation(playerid,"FIGHT_D","FightD_G",4.0,1,0,0,0,18500);
	SetTimerEx("GrabTrain", 19000, false, "i", playerid);
	Training[playerid]  = 3;
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~Training... ~n~~p~]] ~l~]",19000,3);}
else if(Training[playerid]  == 3)
{
	TogglePlayerControllable(playerid, 1);
	SetCameraBehindPlayer(playerid);
	ClearAnimations(playerid);
	SCM(playerid, FUSIONGAMING, "Zavrsio si svoj trening, i naucio borbeni stil Grab'n'Kick!");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Finished! ~n~~p~]]]",10000,3);
		SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
	PlayerInfo[playerid][xBStil] = 4; SavePlayer(playerid);
	Training[playerid]  = 0;}
return 1;}
//------------------------------------------------------------------------------
public KneeTrain(playerid) {
if(Training[playerid]  == 0) {
	TogglePlayerControllable(playerid, 0);
	ac_SetPlayerPos(playerid, 772.4446,5.4702,1000.7802);
	SetPlayerFacingAngle(playerid, 89.8261);
	SetPlayerCameraPos(playerid, 764.1777,5.6911,1000.7161);
	SetPlayerCameraLookAt(playerid, 772.4446,5.4702,1000.7802);
	ApplyAnimation(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,29500);
	SetTimerEx("KneeTrain", 30000, false, "i", playerid);
	Training[playerid]  = 1;
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Training... ~n~~l~]]]",30000,3);}
else if(Training[playerid]  == 1) {
	SetPlayerCameraPos(playerid, 770.2583,-2.5223,1000.7255);
	SetPlayerCameraLookAt(playerid, 772.4446,5.4702,1000.7802);
	ApplyAnimation(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,34500);
	SetTimerEx("KneeTrain", 35000, false, "i", playerid);
	Training[playerid]  = 2;
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Training... ~n~~r~] ~l~]]",35000,3);}
else if(Training[playerid]  == 2) {
	BusinessMoney(uFirmi[playerid], 500, playerid);
	SetPlayerCameraPos(playerid, 765.2747,12.5178,1000.7049);
	SetPlayerCameraLookAt(playerid, 772.4446,5.4702,1000.7802);
	ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,36500);
	SetTimerEx("KneeTrain", 37000, false, "i", playerid);
	Training[playerid]  = 3;
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Training... ~n~~r~]] ~l~]",37000,3);}
else if(Training[playerid]  == 3) {
	TogglePlayerControllable(playerid, 1);
	SetCameraBehindPlayer(playerid);
	ClearAnimations(playerid);
	SCM(playerid, FUSIONGAMING, "Zavrsio si svoj trening, i naucio borbeni stil KneeHead!");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Finished! ~n~~r~]]]",10000,3);
	SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
	PlayerInfo[playerid][xBStil] = 3; SavePlayer(playerid);
	Training[playerid]  = 0;}
return 1;}
//------------------------------------------------------------------------------
public VehicleEngineStart(playerid) {
if(IsPlayerConnected(playerid)) {
	new engine,lights,alarm,doors,bonnet,boot,objective,
		vehicle = GetPlayerVehicleID(playerid),
		Float:vHealth,
		RandomStart;

	RandomStart = random(10);
	GetVehicleHealth(vehicle, vHealth);
	SetPVarInt(playerid, "StartingVehicle", 0);
	if(vHealth >= 800 && vHealth <= 1000) {
		switch(RandomStart) {
			case 0..8:
			{
				//vEngine[vehicle] = ON;
				SendInfoMessage(playerid, "Uspesno ste pokrenuli motor.");
				TogglePlayerControllable(playerid, true);
				GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
				ac_SetVehicleParamsEx(vehicle,1,lights,alarm,doors,bonnet,boot,objective);
			}
			case 9:
				SendInfoMessage(playerid, "Niste uspeli pokrenuti motor.");
		}
	}
	else if(vHealth >= 500 && vHealth <= 799)
	{
		switch(RandomStart)
		{
			case 0..7:
			{
				//vEngine[vehicle] = ON;
				SendInfoMessage(playerid, "Uspesno ste pokrenuli motor.");
				TogglePlayerControllable(playerid, true);
				GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
				ac_SetVehicleParamsEx(vehicle,1,lights,alarm,doors,bonnet,boot,objective);
			}
			case 8,9:
				SendInfoMessage(playerid, "Niste uspeli pokrenuti motor.");
		}
	}
	else if(vHealth >= 351 && vHealth <= 499)
	{
		switch(RandomStart)
		{
			case 0..5:
			{
				//vEngine[vehicle] = ON;
				SendInfoMessage(playerid, "Uspesno ste pokrenuli motor.");
				TogglePlayerControllable(playerid, true);
				GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
				ac_SetVehicleParamsEx(vehicle,1,lights,alarm,doors,bonnet,boot,objective);
			}
			case 6..9:
				SendInfoMessage(playerid, "Niste uspeli pokrenuti motor.");
		}
	}
}
return 1;}
//------------------------------------------------------------------------------
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
new Float:oldX, Float:oldY, Float:oldZ,
	Float:oldRotX, Float:oldRotY, Float:oldRotZ;
GetObjectPos(objectid, oldX, oldY, oldZ);
GetObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
if(response == EDIT_RESPONSE_FINAL)
{
	if(ObjectEdition_TYPE[playerid] != 255) {
		new hid = inProperty[playerid];
			new i = ObjectEdition_TYPE[playerid];
		if(hid != -1) {
			Furniture[hid][i][f_X] = x;
			Furniture[hid][i][f_Y] = y;
			Furniture[hid][i][f_Z] = z;
			Furniture[hid][i][f_rX] = rx;
			Furniture[hid][i][f_rY] = ry;
			Furniture[hid][i][f_rZ] = rz;
			Furniture[hid][i][f_VW] = GetPlayerVirtualWorld(playerid);
			SCM(playerid, FUSIONGAMING, "Namestaj sacuvan");
			DestroyDynamicObject(Furniture[hid][i][f_Object]);
			Furniture[hid][i][f_Object] = CreateDynamicObject(Furniture[hid][i][f_Model], Furniture[hid][i][f_X], Furniture[hid][i][f_Y], Furniture[hid][i][f_Z], Furniture[hid][i][f_rX], Furniture[hid][i][f_rY], Furniture[hid][i][f_rZ], II[hid][iVW], II[hid][iInterior], -1, 200.0);
			SaveFurniture(hid); ObjectEdition_TYPE[playerid] = 255;
			return true;
		}
	}
	if(EditDGate[playerid] != -1) {
		new g = EditDGate[playerid];

		GateData[g][gatePos][0] = x;
		GateData[g][gatePos][1] = y;
		GateData[g][gatePos][2] = z;
		GateData[g][gatePos][3] = rx;
		GateData[g][gatePos][4] = ry;
		GateData[g][gatePos][5] = rz;

		SendInfoMessage(playerid, "Uspesno sacuvana pozicija zatvorene kapije.");
		SCM(playerid, FUSIONGAMING, "Sada sacuvajte poziciju otvorene kapije.");

		EditDynamicObject(playerid, GateData[g][gateObject]);
		SaveGate(g); EditDGate[playerid] = -1; EditDGateMove[playerid] = g;
		return true;
	}
	if(EditDGateMove[playerid] != -1) {
		new g = EditDGateMove[playerid];

		GateData[g][gateMove][0] = x;
		GateData[g][gateMove][1] = y;
		GateData[g][gateMove][2] = z;
		GateData[g][gateMove][3] = rx;
		GateData[g][gateMove][4] = ry;
		GateData[g][gateMove][5] = rz;

		SendInfoMessage(playerid, "Uspesno sacuvana pozicija otvorene kapije.");
		SPD(playerid, dialog_CREATEGATE_2, DSI, D_NASLOV, "Unesite brzinu zatvaranja i otvaranja kapije(0-20.0).", D_ODABERI, D_NAZAD);
		DestroyDynamicObject(GateData[g][gateObject]);
		GateData[g][gateObject] = CreateDynamicObject(GateData[g][gateModel], GateData[g][gatePos][0], GateData[g][gatePos][1], GateData[g][gatePos][2], GateData[g][gatePos][3], GateData[g][gatePos][4], GateData[g][gatePos][5], GateData[g][gateWorld], GateData[g][gateInterior]);

		SaveGate(g); EditDGate[playerid] = g; EditDGateMove[playerid] = -1;
		return true;
	}
	if(CreatingField[playerid] != -1) {
		new id = IsCordsInField(CreatingField[playerid], x, y);

		if(id != CreatingField[playerid]) return EditDynamicObject(playerid, fieldInfo[CreatingField[playerid]][fieldObject]), SendErrorMessage(playerid, "Ne moze znak da ide izvan polja");

		DestroyDynamicObject(fieldInfo[id][fieldObject]);

		fieldInfo[id][fieldObject] = CreateDynamicObject(19470, x, y, z, rx, ry, rz, -1, -1, -1, 200.0);
		fieldInfo[id][fieldObjectPos][0] = x;
		fieldInfo[id][fieldObjectPos][1] = y;
		fieldInfo[id][fieldObjectPos][2] = z;
		fieldInfo[id][fieldObjectPos][3] = rx;
		fieldInfo[id][fieldObjectPos][4] = ry;
		fieldInfo[id][fieldObjectPos][5] = rz;

		new string[180];
		format(string, sizeof(string), ""col_server"Imanje - "col_white"%d "col_server"- na prodaju\nCena: "col_white"%d\n"col_server"Level: "col_white"%d\n"col_server"Za kupovinu kucajte "col_white"/kupiimanje", id, fieldInfo[id][fieldPrice], fieldInfo[id][fieldLevel]);
		fieldInfo[id][field3D] = CreateDynamic3DTextLabel(string, BELA, fieldInfo[id][fieldObjectPos][0], fieldInfo[id][fieldObjectPos][1], fieldInfo[id][fieldObjectPos][2]+1, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

		Field_Save(id);
		SPD(playerid, dialog_CREATEFIELD, DSI, D_NASLOV, "Unesite u prazno polje level i cenu imanja.\nPrimer: 4 12323", D_ODABERI, D_NAZAD);
		return true;
	}
	if(EditKontejnera[playerid] != -1) {
		new i = EditKontejnera[playerid];
		DestroyDynamicObject(KontInfo[i][koObjID]);

		KontInfo[i][koObjPos][0] = x;
		KontInfo[i][koObjPos][1] = y;
		KontInfo[i][koObjPos][2] = z;
		KontInfo[i][koObjRot][0] = rx;
		KontInfo[i][koObjRot][1] = ry;
		KontInfo[i][koObjRot][2] = rz;
		KontInfo[i][koObjID] = CreateDynamicObject(1331, x, y, z, rx, ry, rz);
		SacuvajKont(i);
		EditKontejnera[playerid] = -1;
		return true;
	}
	if(EditBrzeHrane[playerid] != -1) {
		new i = EditBrzeHrane[playerid];
		DestroyDynamicObject(BrzaHranaInfo[i][bhObjID]);

		BrzaHranaInfo[i][bhObjPos][0] = x;
		BrzaHranaInfo[i][bhObjPos][1] = y;
		BrzaHranaInfo[i][bhObjPos][2] = z;
		BrzaHranaInfo[i][bhObjRot][0] = rx;
		BrzaHranaInfo[i][bhObjRot][1] = ry;
		BrzaHranaInfo[i][bhObjRot][2] = rz;
		BrzaHranaInfo[i][bhObjID] = CreateDynamicObject(1340, x, y, z, rx, ry, rz);
		SacuvajBrzuHranu(i);
		EditBrzeHrane[playerid] = -1;
		return true;
	}
	if(EditGovornice[playerid] != -1) {
		new i = EditGovornice[playerid];
		DestroyDynamicObject(GovornicaInfo[i][gObjID]);

		GovornicaInfo[i][gObjPos][0] = x;
		GovornicaInfo[i][gObjPos][1] = y;
		GovornicaInfo[i][gObjPos][2] = z;
		GovornicaInfo[i][gObjRot][0] = rx;
		GovornicaInfo[i][gObjRot][1] = ry;
		GovornicaInfo[i][gObjRot][2] = rz;
		GovornicaInfo[i][gObjID] = CreateDynamicObject(1216, x, y, z, rx, ry, rz);
		SacuvajGovornicu(i);
		EditGovornice[playerid] = -1;
		return true;
	}
	if(EditNargile[playerid] != -1) {
		new i = EditNargile[playerid];
		DestroyDynamicObject(NargilaInfo[i][gObjID]);

		NargilaInfo[i][gObjPos][0] = x;
		NargilaInfo[i][gObjPos][1] = y;
		NargilaInfo[i][gObjPos][2] = z;
		NargilaInfo[i][gObjRot][0] = rx;
		NargilaInfo[i][gObjRot][1] = ry;
		NargilaInfo[i][gObjRot][2] = rz;
		NargilaInfo[i][gObjID] = CreateDynamicObject(2726, x, y, z, rx, ry, rz);
		SacuvajNargilu(i);
		EditNargile[playerid] = -1;
		return true;
	}
	if(EditSprayGang[playerid] != -1) {
		new i = EditSprayGang[playerid];
		DestroyDynamicObject(gZoneInfo[i][gZoneObjID]);

		gZoneInfo[i][gZoneObjPos][0] = x;
		gZoneInfo[i][gZoneObjPos][1] = y;
		gZoneInfo[i][gZoneObjPos][2] = z;
		gZoneInfo[i][gZoneObjPos][3] = rx;
		gZoneInfo[i][gZoneObjPos][4] = ry;
		gZoneInfo[i][gZoneObjPos][5] = rz;
		gZoneInfo[i][gZoneObjID] = CreateDynamicObject(18663, x, y, z, rx, ry, rz);
		
		new id = IsCordsInGZone(CreatingGZoneID[playerid], x, y);

		if(id != CreatingGZoneID[playerid]) return SendErrorMessage(playerid, "Moras sacuvati u zoni koju kreiras.");

		gZoneInfo[id][gZonePickupPos][0] = x;
		gZoneInfo[id][gZonePickupPos][1] = y;
		gZoneInfo[id][gZonePickupPos][2] = z;

		gZoneInfo[id][gZoneTaken] = false;
		gZoneInfo[id][gZoneTakeable] = true;
		gZoneInfo[id][gZoneTime] = 0;

		gZoneInfo[id][gZonePickup] = acc_CreateDynamicPickup(365, 1, gZoneInfo[id][gZonePickupPos][0], gZoneInfo[id][gZonePickupPos][1], gZoneInfo[id][gZonePickupPos][2], 0, 0);
		gZoneInfo[id][gZone3D] = CreateDynamic3DTextLabel(""col_white"[TERITORIJA]\nTeritorija je "col_server"slobodna"col_white"\nAko zelite da zauzmete ovu teritoriju kucajte "col_server"/zauzmi", BELA, gZoneInfo[id][gZonePickupPos][0], gZoneInfo[id][gZonePickupPos][1], gZoneInfo[id][gZonePickupPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		new stringic[24];
		format(stringic, sizeof(stringic), "0x%s88", gZoneInfo[id][gZoneColor]);
		GangZoneShowForAll(gZoneInfo[id][gZoneID], HexToInt(stringic));

		GZone_Save(id);

		CreatingGZone[playerid] = -1;
		CreatingGZoneID[playerid] = -1;
		
		GZone_Save(i);
		EditSprayGang[playerid] = -1;
		return true;
	}
	if(EditATM[playerid] != -1)	{
		new i = EditATM[playerid];
		DestroyDynamicObject(atmInfo[i][atmObject]);

		atmInfo[i][atmPos][0] = x;
		atmInfo[i][atmPos][1] = y;
		atmInfo[i][atmPos][2] = z;
		atmInfo[i][atmPos][3] = rx;
		atmInfo[i][atmPos][4] = ry;
		atmInfo[i][atmPos][5] = rz;
		atmInfo[i][atmPreseceneZice] = false;
		atmInfo[i][atmProbijenBios] = false;
		atmInfo[i][atmVremeDoRoba] = 0;
		atmInfo[i][atmExists] = true;
		atmInfo[i][atmObject] = CreateDynamicObject(2942, x, y, z, rx, ry, rz);
		SacuvajATM(i);

		atmInfo[i][atmText3D] = CreateDynamic3DTextLabel(""col_white"Da koristite bankomat kucajte\n"col_server"[ /atm /robatm ]", -1, atmInfo[i][atmPos][0], atmInfo[i][atmPos][1], atmInfo[i][atmPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);

		EditATM[playerid] = -1;
		return true;
	}
	if(EditPresents[playerid] != -1)	{
		new i = EditPresents[playerid];
		DestroyDynamicObject(presentsInfo[i][presObject]);

		new object = 19054;
		new rand = random(5);
		switch(rand) {
			case 0: object = 19054;
			case 1: object = 19055;
			case 2: object = 19056;
			case 3: object = 19057;
			case 4: object = 19058;
		}

		presentsInfo[i][presPos][0] = x;
		presentsInfo[i][presPos][1] = y;
		presentsInfo[i][presPos][2] = z;
		presentsInfo[i][presPos][3] = rx;
		presentsInfo[i][presPos][4] = ry;
		presentsInfo[i][presPos][5] = rz;
		presentsInfo[i][presPlaced] = true;
		presentsInfo[i][presTaken] = false;
		presentsInfo[i][presObject] = CreateDynamicObject(object, x, y, z, rx, ry, rz);
		SavePresent(i);

		presentsInfo[i][pres3d] = CreateDynamic3DTextLabel(""col_white"Poklon nije otvoren!\n\n"col_red"/poklon", -1, presentsInfo[i][presPos][0], presentsInfo[i][presPos][1], presentsInfo[i][presPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);

		EditPresents[playerid] = -1;
		return true;
	}
	if(EditCTrees[playerid] != -1)	{
		new i = EditCTrees[playerid];
		DestroyDynamicObject(CTree[i][ctObject]);

		CTree[i][ctPos][0] = x;
		CTree[i][ctPos][1] = y;
		CTree[i][ctPos][2] = z;
		CTree[i][ctPos][3] = rx;
		CTree[i][ctPos][4] = ry;
		CTree[i][ctPos][5] = rz;
		CTree[i][ctPlaced] = true;
		CTree[i][ctObject] = CreateDynamicObject(19076, x, y, z, rx, ry, rz);
		SaveCTree(i);

		CTree[i][ct3d] = CreateDynamic3DTextLabel("{3f37e5]Zelimo vam srecne Bozicne\ni novogodisnje praznike!\n*** 2023 ***", -1, CTree[i][ctPos][0], CTree[i][ctPos][1], CTree[i][ctPos][2]+2, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);

		EditCTrees[playerid] = -1;
		return true;
	}
	if(EditXOrbs[playerid] != -1)	{
		new i = EditXOrbs[playerid];
		DestroyDynamicObject(XmasOrbs[i][xoObject]);

		new object = 19059;
		new rand = random(5);
		switch(rand) {
			case 0: object = 19059;
			case 1: object = 19060;
			case 2: object = 19061;
			case 3: object = 19062;
			case 4: object = 19063;
		}

		XmasOrbs[i][xoPos][0] = x;
		XmasOrbs[i][xoPos][1] = y;
		XmasOrbs[i][xoPos][2] = z;
		XmasOrbs[i][xoPos][3] = rx;
		XmasOrbs[i][xoPos][4] = ry;
		XmasOrbs[i][xoPos][5] = rz;
		XmasOrbs[i][xoPlaced] = true;
		XmasOrbs[i][xoObject] = CreateDynamicObject(object, x, y, z, rx, ry, rz);
		SaveXOrb(i);

		EditXOrbs[playerid] = -1;
		return true;
	}
	if(CreateParkingID[playerid] != -1)	{

		new parkID = CreateParkingID[playerid];
		if(CreatingParkingLevel[playerid] == 1) {

			DestroyDynamicObject(ParkingInfo[parkID][parkObject]);

			ParkingInfo[parkID][parkObjectPos][0] = x;
			ParkingInfo[parkID][parkObjectPos][1] = y;
			ParkingInfo[parkID][parkObjectPos][2] = z;
			ParkingInfo[parkID][parkObjectPos][3] = rx;
			ParkingInfo[parkID][parkObjectPos][4] = ry;
			ParkingInfo[parkID][parkObjectPos][5] = rz;

			CreatingParkingLevel[playerid] = 2;

			ParkingInfo[parkID][parkObject] = CreateDynamicObject(4639, x, y, z, rx, ry, rz , 0, 0, -1, 200.0);
			Parking_Save(parkID);

			SendInfoMessage(playerid, "Sada dodajte pickup za kupovinu listica na slovo Y.");

		}
		return true;
	}
	if(EditRadar[playerid] != -1)	{

		new radarID = EditRadar[playerid];
		DestroyDynamicObject(radarInfo[radarID][radarObject]);

		radarInfo[radarID][radarPos][0] = x;
		radarInfo[radarID][radarPos][1] = y;
		radarInfo[radarID][radarPos][2] = z;
		radarInfo[radarID][radarPos][3] = rx;
		radarInfo[radarID][radarPos][4] = ry;
		radarInfo[radarID][radarPos][5] = rz;
		radarInfo[radarID][radarObject] = CreateDynamicObject(18880, x, y, z, rx, ry, rz);
		SaveRadar(radarID);

		EditRadar[playerid] = -1;
		return true;
	}
}
if(response == EDIT_RESPONSE_CANCEL) {

	if(ObjectEdition_TYPE[playerid] != 255) {
		new hid = inProperty[playerid];
		new i = ObjectEdition_TYPE[playerid];
		if(hid != -1) {
			Furniture[hid][i][f_X] = oldX;
			Furniture[hid][i][f_Y] = oldY;
			Furniture[hid][i][f_Z] = oldZ;
			Furniture[hid][i][f_rX] = oldRotX;
			Furniture[hid][i][f_rY] = oldRotY;
			Furniture[hid][i][f_rZ] = oldRotZ;
			Furniture[hid][i][f_VW] = GetPlayerVirtualWorld(playerid);
			SCM(playerid, CRVENA, "Odustali ste od postavljanja objekta.");
			DestroyDynamicObject(Furniture[hid][i][f_Object]);
			Furniture[hid][i][f_Object] = CreateDynamicObject(Furniture[hid][i][f_Model], Furniture[hid][i][f_X], Furniture[hid][i][f_Y], Furniture[hid][i][f_Z], Furniture[hid][i][f_rX], Furniture[hid][i][f_rY], Furniture[hid][i][f_rZ], II[hid][iVW], II[hid][iInterior], -1, 200.0);
			SaveFurniture(hid); ObjectEdition_TYPE[playerid] = 255;
			return true;
		}
	}
}
return 1;}
//------------------------------------------------------------------------------
public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
if(response) {

	if(EditingBody[playerid] == 1) {

		if(fScaleX > 2.0 || fScaleY > 2.0 || fScaleZ > 2.0) {
			EditAttachedObject(playerid, OBJECT_SLOT_MASKSUNGL);
			SendErrorMessage(playerid, "Losa pozicija naocara odradi je ponovo.");
			return true;
		}

		PlayerInfo[playerid][xSungMaskPos][0] = fOffsetX;
		PlayerInfo[playerid][xSungMaskPos][1] = fOffsetY;
		PlayerInfo[playerid][xSungMaskPos][2] = fOffsetZ;
		PlayerInfo[playerid][xSungMaskPos][3] = fRotX;
		PlayerInfo[playerid][xSungMaskPos][4] = fRotY;
		PlayerInfo[playerid][xSungMaskPos][5] = fRotZ;
		PlayerInfo[playerid][xSungMaskPos][6] = fScaleX;
		PlayerInfo[playerid][xSungMaskPos][7] = fScaleY;
		PlayerInfo[playerid][xSungMaskPos][8] = fScaleZ;
		EditingBody[playerid] = 0; SavePlayer(playerid);
	}
	else if(EditingBody[playerid] == 2) {

		if(fScaleX > 2.0 || fScaleY > 2.0 || fScaleZ > 2.0) {
			EditAttachedObject(playerid, OBJECT_SLOT_BANDANA);
			SendErrorMessage(playerid, "Losa pozicija marame odradi je ponovo.");
			return true;
		}
		PlayerInfo[playerid][xFacePos][0] = fOffsetX;
		PlayerInfo[playerid][xFacePos][1] = fOffsetY;
		PlayerInfo[playerid][xFacePos][2] = fOffsetZ;
		PlayerInfo[playerid][xFacePos][3] = fRotX;
		PlayerInfo[playerid][xFacePos][4] = fRotY;
		PlayerInfo[playerid][xFacePos][5] = fRotZ;
		PlayerInfo[playerid][xFacePos][6] = fScaleX;
		PlayerInfo[playerid][xFacePos][7] = fScaleY;
		PlayerInfo[playerid][xFacePos][8] = fScaleZ;
		EditingBody[playerid] = 0; SavePlayer(playerid);
	}
	else if(EditingBody[playerid] == 3) {

		if(fScaleX > 2.0 || fScaleY > 2.0 || fScaleZ > 2.0) {
			EditAttachedObject(playerid, OBJECT_SLOT_HEAD);
			SendErrorMessage(playerid, "Losa pozicija kape/marame/sesira odradi je ponovo.");
			return true;
		}
		PlayerInfo[playerid][xHeadPos][0] = fOffsetX;
		PlayerInfo[playerid][xHeadPos][1] = fOffsetY;
		PlayerInfo[playerid][xHeadPos][2] = fOffsetZ;
		PlayerInfo[playerid][xHeadPos][3] = fRotX;
		PlayerInfo[playerid][xHeadPos][4] = fRotY;
		PlayerInfo[playerid][xHeadPos][5] = fRotZ;
		PlayerInfo[playerid][xHeadPos][6] = fScaleX;
		PlayerInfo[playerid][xHeadPos][7] = fScaleY;
		PlayerInfo[playerid][xHeadPos][8] = fScaleZ;
		EditingBody[playerid] = 0; SavePlayer(playerid);
	}
	else if(EditingBody[playerid] == 4) {

		if(fScaleX > 2.0 || fScaleY > 2.0 || fScaleZ > 2.0) {
			EditAttachedObject(playerid, OBJECT_SLOT_HEAD);
			SendErrorMessage(playerid, "Losa pozicija kape/marame/sesira odradi je ponovo.");
			return true;
		}
		PlayerInfo[playerid][xHeadPos][0] = fOffsetX;
		PlayerInfo[playerid][xHeadPos][1] = fOffsetY;
		PlayerInfo[playerid][xHeadPos][2] = fOffsetZ;
		PlayerInfo[playerid][xHeadPos][3] = fRotX;
		PlayerInfo[playerid][xHeadPos][4] = fRotY;
		PlayerInfo[playerid][xHeadPos][5] = fRotZ;
		PlayerInfo[playerid][xHeadPos][6] = fScaleX;
		PlayerInfo[playerid][xHeadPos][7] = fScaleY;
		PlayerInfo[playerid][xHeadPos][8] = fScaleZ;
		EditingBody[playerid] = 0; SavePlayer(playerid);
	}
	else if(EditingBody[playerid] == 5) {

		if(fScaleX > 2.0 || fScaleY > 2.0 || fScaleZ > 2.0) {
			EditAttachedObject(playerid, OBJECT_SLOT_HEAD);
			SendErrorMessage(playerid, "Losa pozicija kape/marame/sesira odradi je ponovo.");
			return true;
		}
		PlayerInfo[playerid][xHeadPos][0] = fOffsetX;
		PlayerInfo[playerid][xHeadPos][1] = fOffsetY;
		PlayerInfo[playerid][xHeadPos][2] = fOffsetZ;
		PlayerInfo[playerid][xHeadPos][3] = fRotX;
		PlayerInfo[playerid][xHeadPos][4] = fRotY;
		PlayerInfo[playerid][xHeadPos][5] = fRotZ;
		PlayerInfo[playerid][xHeadPos][6] = fScaleX;
		PlayerInfo[playerid][xHeadPos][7] = fScaleY;
		PlayerInfo[playerid][xHeadPos][8] = fScaleZ;
		EditingBody[playerid] = 0; SavePlayer(playerid);
	}
	else if(EditingBody[playerid] == 6) {

		if(fScaleX > 2.0 || fScaleY > 2.0 || fScaleZ > 2.0) {
			EditAttachedObject(playerid, OBJECT_SLOT_HELMET);
			SendErrorMessage(playerid, "Losa pozicija kacige odradi je ponovo.");
			return true;
		}
		PlayerInfo[playerid][xHelmetPos][0] = fOffsetX;
		PlayerInfo[playerid][xHelmetPos][1] = fOffsetY;
		PlayerInfo[playerid][xHelmetPos][2] = fOffsetZ;
		PlayerInfo[playerid][xHelmetPos][3] = fRotX;
		PlayerInfo[playerid][xHelmetPos][4] = fRotY;
		PlayerInfo[playerid][xHelmetPos][5] = fRotZ;
		PlayerInfo[playerid][xHelmetPos][6] = fScaleX;
		PlayerInfo[playerid][xHelmetPos][7] = fScaleY;
		PlayerInfo[playerid][xHelmetPos][8] = fScaleZ;
		EditingBody[playerid] = 0; SavePlayer(playerid);
	}
}

if(!response) {
	if(EditingBody[playerid] == 1) {
		RemovePlayerAttachedObject(playerid, OBJECT_SLOT_MASKSUNGL);
		SungOn[playerid] = false;
	}
	else if(EditingBody[playerid] == 2) {
		RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BANDANA);
		FaceOn[playerid] = false;
	}
	else if(EditingBody[playerid] >= 3 && EditingBody[playerid] <= 5) {
		RemovePlayerAttachedObject(playerid, OBJECT_SLOT_HEAD);
		HeadOn[playerid] = false;
	}
	else if(EditingBody[playerid] == 6) {
		RemovePlayerAttachedObject(playerid, OBJECT_SLOT_HELMET);
		HelmetOn[playerid] = false;
	}
}

return 1;}
//------------------------------------------------------------------------------
public OnModelSelectionResponse(playerid, extraid, index, modelid, response) {
if((extraid == 1 && response) && inventoryInfo[playerid][index][invExists]) {

	new name[64];
	ChosenItem[playerid] = index;
	format(name, sizeof(name), "%s (%d)", inventoryInfo[playerid][index][invItem], inventoryInfo[playerid][index][invQuantity]);
	SPD(playerid, dialog_INVENTORY, DSL, name, "Koristi predmet\nDaj predmet\nBaci predmet", "Odaberi", "Odustani");

}
return true;}
//------------------------------------------------------------------------------
public OnPlayerModelSelection(playerid, response, listid, modelid) {

if(listid == skinlist) {

	if(response) {

		if(PlayerInfo[playerid][xClan] != 0) return SendErrorMessage(playerid, "Ne mozete kupiti skin jer ste u organizaciji.");
		if(PlayerInfo[playerid][xNovac] < 5000) return SendErrorMessage(playerid, " Nemate dovoljno novca(5000 $).");
		SendInfoMessage(playerid, "Kupio si odecu za 5000$.");
		PlayerInfo[playerid][xSkin] = modelid;
		c_SetPlayerSkin(playerid, modelid);
		SavePlayer(playerid); DajIgracuNovac(playerid, -5000);


		if(IsPlayerInRangeOfPoint(playerid, 3.0, 0, 0, 0)) {
			BusinessRodaMoney(250, playerid);
		}
		else {
			BusinessMoney(uFirmi[playerid], 250, playerid);
		}
	}
	else return SCM(playerid, CRVENA, "Ugasio si kupovinu odece.");
	return 1;}
return 1;}
//------------------------------------------------------------------------------
public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
if(extraid == 1)
{
	if(response)
	{
		SetPlayerAttachedObject(playerid, OBJECT_SLOT_MASKSUNGL, modelid, 2, 0.10, 0.03, 0, 0, 90, 90, 1.2, 1.2, 1.4);
		EditAttachedObject(playerid, OBJECT_SLOT_MASKSUNGL); EditingBody[playerid] = 1;
		PlayerInfo[playerid][xSungMask] = modelid; SavePlayer(playerid); DajIgracuNovac(playerid, -400);
		BusinessMoney(uFirmi[playerid], 400, playerid); SungOn[playerid] = true;
	}
}
else if(extraid == 2)
{
	if(response)
	{
		SetPlayerAttachedObject(playerid, OBJECT_SLOT_BANDANA, modelid, 2, 0.09, 0.02, -0.01, -90, 0, -90, 1.15, 1.15, 1.15);
		EditAttachedObject(playerid, OBJECT_SLOT_BANDANA); EditingBody[playerid] = 2;
		PlayerInfo[playerid][xFace] = modelid; SavePlayer(playerid); DajIgracuNovac(playerid, -500);
		BusinessMoney(uFirmi[playerid], 500, playerid); FaceOn[playerid] = true;
	}
}
else if(extraid == 3)
{
	if(response)
	{
		SetPlayerAttachedObject(playerid, OBJECT_SLOT_HEAD, modelid, 2, 0.12, 0.01 ,0, -90, 0, -90, 1.2, 1.2, 1.1);
		EditAttachedObject(playerid, OBJECT_SLOT_HEAD); EditingBody[playerid] = 3;
		PlayerInfo[playerid][xHead] = modelid; SavePlayer(playerid); DajIgracuNovac(playerid, -500);
		BusinessMoney(uFirmi[playerid], 500, playerid); HeadOn[playerid] = true;
	}
}
else if(extraid == 4)
{
	if(response)
	{
		SetPlayerAttachedObject(playerid, OBJECT_SLOT_HEAD, modelid, 2,0.15,0.02,-0.01,0,0,0,1.3,1.2,1.3);
		EditAttachedObject(playerid, OBJECT_SLOT_HEAD); EditingBody[playerid] = 4;
		PlayerInfo[playerid][xHead] = modelid; SavePlayer(playerid); DajIgracuNovac(playerid, -700);
		BusinessMoney(uFirmi[playerid], 700, playerid); HeadOn[playerid] = true;
	}
}
else if(extraid == 5)
{
	if(response)
	{
		SetPlayerAttachedObject(playerid, OBJECT_SLOT_HEAD, modelid, 2,0.14,0.01,-0.01,0,0,0,1.2,1.2,1.2);
		EditAttachedObject(playerid, OBJECT_SLOT_HEAD); EditingBody[playerid] = 5;
		PlayerInfo[playerid][xHead] = modelid; SavePlayer(playerid); DajIgracuNovac(playerid, -600);
		BusinessMoney(uFirmi[playerid], 600, playerid); HeadOn[playerid] = true;
	}
}
else if(extraid == 6)
{
	if(response)
	{
		if(modelid == -1) return SendErrorMessage(playerid, " U ovom slotu nemate kupljeni objekt.");
		new Float:X, Float:Y, Float:Z, Float:A, i = (MAX_X_OBJECTS+2), hid = inProperty[playerid];
		GetPlayerPos(playerid, X, Y, Z); GetPlayerFacingAngle(playerid, A);
		if(inProperty[playerid] == -1) return SendErrorMessage(playerid, " Niste u vasoj kuci/stanu/vikendici.");
		if(strcmp(ImeIgraca(playerid), II[inProperty[playerid]][iOwner], true) == 0)
		{
			for(new a = 0; a < MAX_X_OBJECTS; a++) {
				if(!Furniture[hid][a][f_Model]) {
					i = a;
					break;
				} else continue;
			}

			if(i != (MAX_X_OBJECTS+2)) {
				if(modelid == PlayerInfo[playerid][xObject][0]) { PlayerInfo[playerid][xObject][0] = -1;}
				else if(modelid == PlayerInfo[playerid][xObject][1]) { PlayerInfo[playerid][xObject][1] = -1;}
				else if(modelid == PlayerInfo[playerid][xObject][2]) { PlayerInfo[playerid][xObject][2] = -1;}
				else if(modelid == PlayerInfo[playerid][xObject][3]) { PlayerInfo[playerid][xObject][3] = -1;}
				else if(modelid == PlayerInfo[playerid][xObject][4]) { PlayerInfo[playerid][xObject][4] = -1;}
				else if(modelid == PlayerInfo[playerid][xObject][5]) { PlayerInfo[playerid][xObject][5] = -1;}
				else if(modelid == PlayerInfo[playerid][xObject][6]) { PlayerInfo[playerid][xObject][6] = -1;}
				else if(modelid == PlayerInfo[playerid][xObject][7]) { PlayerInfo[playerid][xObject][7] = -1;}
				else if(modelid == PlayerInfo[playerid][xObject][8]) { PlayerInfo[playerid][xObject][8] = -1;}
				else if(modelid == PlayerInfo[playerid][xObject][9]) { PlayerInfo[playerid][xObject][9] = -1;}
				Furniture[hid][i][f_Model] = modelid;
				Furniture[hid][i][f_X] = X;
				Furniture[hid][i][f_Y] = Y;
				Furniture[hid][i][f_Z] = Z;
				Furniture[hid][i][f_rX] = 0.0;
				Furniture[hid][i][f_rY] = 0.0;
				Furniture[hid][i][f_rZ] = A;
				Furniture[hid][i][f_VW] = GetPlayerVirtualWorld(playerid);
				Furniture[hid][i][f_Object] = CreateDynamicObject(Furniture[hid][i][f_Model], Furniture[hid][i][f_X]+2, Furniture[hid][i][f_Y], Furniture[hid][i][f_Z]+ 0.6, Furniture[hid][i][f_rX], Furniture[hid][i][f_rY], Furniture[hid][i][f_rZ], II[hid][iVW], II[hid][iInterior], -1, 200.0);
				Streamer_Update(playerid);
				EditDynamicObject(playerid, Furniture[hid][i][f_Object]);
				SCM(playerid, FUSIONGAMING, "Pozicioniraj namestaj.");
				SCM(playerid, BELA, "Koristite ~k~~PED_SPRINT~ da bi pomerali kameru.");
				SaveFurniture(hid); ObjectEdition_TYPE[playerid] = i;
			} else {
				SendErrorMessage(playerid, "Svi slotovi su zauzeti");
				SendErrorMessage(playerid, "/namestaj izbrisi za brisanje");
			}
		} else return SendErrorMessage(playerid, "Ova imovina nije vasa..");
	}
}
else if(extraid == 7) {

	if(response) {

		SetPlayerAttachedObject(playerid, OBJECT_SLOT_HELMET, modelid, 2, 0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000);
		EditAttachedObject(playerid, OBJECT_SLOT_HELMET); EditingBody[playerid] = 6;
		PlayerInfo[playerid][xHelmet] = modelid; SavePlayer(playerid); DajIgracuNovac(playerid, -10000);
		HelmetOn[playerid] = true;
	}
}
return 1;}
//------------------------------------------------------------------------------
public LoadEvent(id, name[], value[])
{
new string[6];
INI_String("Name", Event[id][Name], 64);
INI_Float("TCPX", Event[id][TCPX]);
INI_Float("TCPY", Event[id][TCPY]);
INI_Float("TCPZ", Event[id][TCPZ]);
INI_Float("TCPA", Event[id][TCPA]);
INI_Float("TCPX2", Event[id][TCPX2]);
INI_Float("TCPY2", Event[id][TCPY2]);
INI_Float("TCPZ2", Event[id][TCPZ2]);
INI_Float("TCPA2", Event[id][TCPA2]);
INI_Int("Veh", Event[id][VehID]);
for(new i = 2; i <= MAX_CP; i++)
{
	format(string, 6, "CPX%d",i);
	INI_Float(string, CheckPoint[id][i][CPX]);
	format(string, 6,"CPY%d",i);
	INI_Float(string, CheckPoint[id][i][CPY]);
	format(string, 6, "CPZ%d",i);
	INI_Float(string, CheckPoint[id][i][CPZ]);}
INI_Int("MaxCP", Event[id][MaxCP]);
return 1;}
//------------------------------------------------------------------------------
public OcitajKont(id, name[], value[])
{
INI_Float("ObjPos1", KontInfo[id][koObjPos][0]);
INI_Float("ObjPos2", KontInfo[id][koObjPos][1]);
INI_Float("ObjPos3", KontInfo[id][koObjPos][2]);
INI_Float("ObjRot1", KontInfo[id][koObjRot][0]);
INI_Float("ObjRot2", KontInfo[id][koObjRot][1]);
INI_Float("ObjRot3", KontInfo[id][koObjRot][2]);
return true;}
//------------------------------------------------------------------------------
public OcitajBrzuHranu(id, name[], value[])
{
INI_Float("ObjPos1", BrzaHranaInfo[id][bhObjPos][0]);
INI_Float("ObjPos2", BrzaHranaInfo[id][bhObjPos][1]);
INI_Float("ObjPos3", BrzaHranaInfo[id][bhObjPos][2]);
INI_Float("ObjRot1", BrzaHranaInfo[id][bhObjRot][0]);
INI_Float("ObjRot2", BrzaHranaInfo[id][bhObjRot][1]);
INI_Float("ObjRot3", BrzaHranaInfo[id][bhObjRot][2]);
return true;}
//------------------------------------------------------------------------------
public OcitajGovornicu(id, name[], value[])
{
INI_Float("ObjPos1", GovornicaInfo[id][gObjPos][0]);
INI_Float("ObjPos2", GovornicaInfo[id][gObjPos][1]);
INI_Float("ObjPos3", GovornicaInfo[id][gObjPos][2]);
INI_Float("ObjRot1", GovornicaInfo[id][gObjRot][0]);
INI_Float("ObjRot2", GovornicaInfo[id][gObjRot][1]);
INI_Float("ObjRot3", GovornicaInfo[id][gObjRot][2]);
return true;}
//------------------------------------------------------------------------------
public OcitajNargilu(id, name[], value[])
{
INI_Float("ObjPos1", NargilaInfo[id][gObjPos][0]);
INI_Float("ObjPos2", NargilaInfo[id][gObjPos][1]);
INI_Float("ObjPos3", NargilaInfo[id][gObjPos][2]);
INI_Float("ObjRot1", NargilaInfo[id][gObjRot][0]);
INI_Float("ObjRot2", NargilaInfo[id][gObjRot][1]);
INI_Float("ObjRot3", NargilaInfo[id][gObjRot][2]);
return true;}
//------------------------------------------------------------------------------
public LoadATM(id, name[], value[])
{
INI_Float("atmPos1", atmInfo[id][atmPos][0]);
INI_Float("atmPos2", atmInfo[id][atmPos][1]);
INI_Float("atmPos3", atmInfo[id][atmPos][2]);
INI_Float("atmPos4", atmInfo[id][atmPos][3]);
INI_Float("atmPos5", atmInfo[id][atmPos][4]);
INI_Float("atmPos6", atmInfo[id][atmPos][5]);
INI_Bool("atmPreseceneZice", atmInfo[id][atmPreseceneZice]);
INI_Bool("atmProbijenBios", atmInfo[id][atmProbijenBios]);
INI_Int("atmVremeDoRoba", atmInfo[id][atmVremeDoRoba]);
INI_Bool("atmExists", atmInfo[id][atmExists]);
return true;}
//------------------------------------------------------------------------------
public SacuvajKont(id)
{
new file4[40];
format(file4, sizeof(file4), KO_FILE, id);
new INI:File = INI_Open(file4);
INI_WriteFloat(File, "ObjPos1", KontInfo[id][koObjPos][0]);
INI_WriteFloat(File, "ObjPos2", KontInfo[id][koObjPos][1]);
INI_WriteFloat(File, "ObjPos3", KontInfo[id][koObjPos][2]);
INI_WriteFloat(File, "ObjRot1", KontInfo[id][koObjRot][0]);
INI_WriteFloat(File, "ObjRot2", KontInfo[id][koObjRot][1]);
INI_WriteFloat(File, "ObjRot3", KontInfo[id][koObjRot][2]);
INI_Close(File);
return true;}
//------------------------------------------------------------------------------
public SacuvajBrzuHranu(id)
{
new file4[40];
format(file4, sizeof(file4), BRZAHRANA_FILE, id);
new INI:File = INI_Open(file4);
INI_WriteFloat(File, "ObjPos1", BrzaHranaInfo[id][bhObjPos][0]);
INI_WriteFloat(File, "ObjPos2", BrzaHranaInfo[id][bhObjPos][1]);
INI_WriteFloat(File, "ObjPos3", BrzaHranaInfo[id][bhObjPos][2]);
INI_WriteFloat(File, "ObjRot1", BrzaHranaInfo[id][bhObjRot][0]);
INI_WriteFloat(File, "ObjRot2", BrzaHranaInfo[id][bhObjRot][1]);
INI_WriteFloat(File, "ObjRot3", BrzaHranaInfo[id][bhObjRot][2]);
INI_Close(File);
return true;}
//------------------------------------------------------------------------------
public SacuvajGovornicu(id)
{
new file4[40];
format(file4, sizeof(file4), GOVORNICA_FILE, id);
new INI:File = INI_Open(file4);
INI_WriteFloat(File, "ObjPos1", GovornicaInfo[id][gObjPos][0]);
INI_WriteFloat(File, "ObjPos2", GovornicaInfo[id][gObjPos][1]);
INI_WriteFloat(File, "ObjPos3", GovornicaInfo[id][gObjPos][2]);
INI_WriteFloat(File, "ObjRot1", GovornicaInfo[id][gObjRot][0]);
INI_WriteFloat(File, "ObjRot2", GovornicaInfo[id][gObjRot][1]);
INI_WriteFloat(File, "ObjRot3", GovornicaInfo[id][gObjRot][2]);
INI_Close(File);
return true;}
//------------------------------------------------------------------------------
public SacuvajNargilu(id)
{
new file4[40];
format(file4, sizeof(file4), NARGILA_FILE, id);
new INI:File = INI_Open(file4);
INI_WriteFloat(File, "ObjPos1", NargilaInfo[id][gObjPos][0]);
INI_WriteFloat(File, "ObjPos2", NargilaInfo[id][gObjPos][1]);
INI_WriteFloat(File, "ObjPos3", NargilaInfo[id][gObjPos][2]);
INI_WriteFloat(File, "ObjRot1", NargilaInfo[id][gObjRot][0]);
INI_WriteFloat(File, "ObjRot2", NargilaInfo[id][gObjRot][1]);
INI_WriteFloat(File, "ObjRot3", NargilaInfo[id][gObjRot][2]);
INI_Close(File);
return true;}
//------------------------------------------------------------------------------
public SacuvajATM(id)
{
new file4[40];
format(file4, sizeof(file4), ATM_FILE, id);
new INI:File = INI_Open(file4);
INI_WriteFloat(File, "atmPos1", atmInfo[id][atmPos][0]);
INI_WriteFloat(File, "atmPos2", atmInfo[id][atmPos][1]);
INI_WriteFloat(File, "atmPos3", atmInfo[id][atmPos][2]);
INI_WriteFloat(File, "atmPos4", atmInfo[id][atmPos][3]);
INI_WriteFloat(File, "atmPos5", atmInfo[id][atmPos][4]);
INI_WriteFloat(File, "atmPos6", atmInfo[id][atmPos][5]);
INI_WriteBool(File, "atmPreseceneZice", atmInfo[id][atmPreseceneZice]);
INI_WriteBool(File, "atmProbijenBios", atmInfo[id][atmProbijenBios]);
INI_WriteInt(File, "atmVremeDoRoba", atmInfo[id][atmVremeDoRoba]);
INI_WriteBool(File, "atmExists", atmInfo[id][atmExists]);
INI_Close(File);
return true;}
//------------------------------------------------------------------------------
forward LoadRadar(radarID, name[], value[]);
public LoadRadar(radarID, name[], value[]) {

INI_Int("MaxSpeed", radarInfo[radarID][radarMaxSpeed]);
INI_Int("Price", radarInfo[radarID][radarPrice]);
INI_Float("Pos1", radarInfo[radarID][radarPos][0]);
INI_Float("Pos2", radarInfo[radarID][radarPos][1]);
INI_Float("Pos3", radarInfo[radarID][radarPos][2]);
INI_Float("Pos4", radarInfo[radarID][radarPos][3]);
INI_Float("Pos5", radarInfo[radarID][radarPos][4]);
INI_Float("Pos6", radarInfo[radarID][radarPos][5]);

return true;}
stock SaveRadar(radarID) {

new file4[64];
format(file4, sizeof(file4), F_RADARS, radarID);
new INI:File = INI_Open(file4);
INI_WriteInt(File, "MaxSpeed", radarInfo[radarID][radarMaxSpeed]);
INI_WriteInt(File, "Price", radarInfo[radarID][radarPrice]);
INI_WriteFloat(File, "Pos1", radarInfo[radarID][radarPos][0]);
INI_WriteFloat(File, "Pos2", radarInfo[radarID][radarPos][1]);
INI_WriteFloat(File, "Pos3", radarInfo[radarID][radarPos][2]);
INI_WriteFloat(File, "Pos4", radarInfo[radarID][radarPos][3]);
INI_WriteFloat(File, "Pos5", radarInfo[radarID][radarPos][4]);
INI_WriteFloat(File, "Pos6", radarInfo[radarID][radarPos][5]);
INI_Close(File);

return true;}
//------------------------------------------------------------------------------
public OcitajFirmu(idx, name[], value[])
{
INI_Int("Kupljen", BusinessInfo[idx][bOwned]);
INI_Int("Cena", BusinessInfo[idx][bPrice]);
INI_String("Vlasnik", BusinessInfo[idx][bOwner], MAX_PLAYER_NAME);
INI_Int("Tip", BusinessInfo[idx][bType]);
INI_Int("Zakljucana", BusinessInfo[idx][bLocked]);
INI_Int("Novac", BusinessInfo[idx][bMoney]);
INI_Float("UlazX", BusinessInfo[idx][bEnterX]);
INI_Float("UlazY", BusinessInfo[idx][bEnterY]);
INI_Float("UlazZ", BusinessInfo[idx][bEnterZ]);
INI_Float("IzasaoX", BusinessInfo[idx][bExitX]);
INI_Float("IzasaoY", BusinessInfo[idx][bExitY]);
INI_Float("IzasaoZ", BusinessInfo[idx][bExitZ]);
INI_Int("Int", BusinessInfo[idx][bInt]);
INI_Int("VW", BusinessInfo[idx][bVW]);
INI_Int("Uinterioru", BusinessInfo[idx][bInInt]);
INI_Int("Uvw", BusinessInfo[idx][bInVW]);
INI_String("Ime", BusinessInfo[idx][bName], 64);
INI_Int("Level", BusinessInfo[idx][bLevel]);
INI_Int("JobID", BusinessInfo[idx][bJobID]);
INI_Int("Neaktivnost", BusinessInfo[idx][bNeaktivnost]);
INI_Int("Facture", BusinessInfo[idx][bFacture]);
INI_Int("Reket", BusinessInfo[idx][bReket]);
INI_Float("ReketTime", BusinessInfo[idx][bReketTime]);
return true;}
//------------------------------------------------------------------------------
public SaveBusiness(id) {
new file4[40];
format(file4, sizeof(file4), F_FILE, id);
new INI:File = INI_Open(file4);
INI_SetTag(File, "Informacije");
INI_WriteInt(File, "Kupljen", BusinessInfo[id][bOwned]);
INI_WriteInt(File, "Cena", BusinessInfo[id][bPrice]);
INI_WriteString(File, "Vlasnik", BusinessInfo[id][bOwner]);
INI_WriteInt(File, "Tip", BusinessInfo[id][bType]);
INI_WriteInt(File, "Zakljucana", BusinessInfo[id][bLocked]);
INI_WriteInt(File, "Novac", BusinessInfo[id][bMoney]);
INI_WriteFloat(File, "UlazX", BusinessInfo[id][bEnterX]);
INI_WriteFloat(File, "UlazY", BusinessInfo[id][bEnterY]);
INI_WriteFloat(File, "UlazZ", BusinessInfo[id][bEnterZ]);
INI_WriteFloat(File, "IzasaoX", BusinessInfo[id][bExitX]);
INI_WriteFloat(File, "IzasaoY", BusinessInfo[id][bExitY]);
INI_WriteFloat(File, "IzasaoZ", BusinessInfo[id][bExitZ]);
INI_WriteInt(File, "Int", BusinessInfo[id][bInt]);
INI_WriteInt(File, "VW", BusinessInfo[id][bVW]);
INI_WriteInt(File, "Uinterioru", BusinessInfo[id][bInInt]);
INI_WriteInt(File, "Uvw", BusinessInfo[id][bInVW]);
INI_WriteString(File, "Ime", BusinessInfo[id][bName]);
INI_WriteInt(File, "Level", BusinessInfo[id][bLevel]);
INI_WriteInt(File, "JobID", BusinessInfo[id][bJobID]);
INI_WriteInt(File, "Neaktivnost", BusinessInfo[id][bNeaktivnost]);
INI_WriteInt(File, "Facture", BusinessInfo[id][bFacture]);
INI_WriteInt(File, "Reket", BusinessInfo[id][bReket]);
INI_WriteFloat(File, "ReketTime", BusinessInfo[id][bReketTime]);
INI_Close(File);
return true;}
//------------------------------------------------------------------------------
forward SaveSalon(id);
public SaveSalon(id) {
new ifile[40];
format(ifile, sizeof(ifile), AS_FILE, id);
new INI:File = INI_Open(ifile);
INI_WriteInt(File, "MaxVehModel", AutoSalon[id][aMaxVehModel]);
INI_WriteInt(File, "VehModel1", AutoSalon[id][aVehModel][0]);
INI_WriteInt(File, "VehModel2", AutoSalon[id][aVehModel][1]);
INI_WriteInt(File, "VehModel3", AutoSalon[id][aVehModel][2]);
INI_WriteInt(File, "VehModel4", AutoSalon[id][aVehModel][3]);
INI_WriteInt(File, "VehModel5", AutoSalon[id][aVehModel][4]);
INI_WriteInt(File, "VehModel6", AutoSalon[id][aVehModel][5]);
INI_WriteInt(File, "VehModel7", AutoSalon[id][aVehModel][6]);
INI_WriteInt(File, "VehModel8", AutoSalon[id][aVehModel][7]);
INI_WriteInt(File, "VehModel9", AutoSalon[id][aVehModel][8]);
INI_WriteInt(File, "VehModel10", AutoSalon[id][aVehModel][9]);
INI_WriteInt(File, "VehModel11", AutoSalon[id][aVehModel][10]);
INI_WriteInt(File, "VehModel12", AutoSalon[id][aVehModel][11]);
INI_WriteInt(File, "VehModel13", AutoSalon[id][aVehModel][12]);
INI_WriteInt(File, "VehModel14", AutoSalon[id][aVehModel][13]);
INI_WriteInt(File, "VehModel15", AutoSalon[id][aVehModel][14]);
INI_WriteInt(File, "VehModel16", AutoSalon[id][aVehModel][15]);
INI_WriteInt(File, "VehAmmount1", AutoSalon[id][aVehAmmount][0]);
INI_WriteInt(File, "VehAmmount2", AutoSalon[id][aVehAmmount][1]);
INI_WriteInt(File, "VehAmmount3", AutoSalon[id][aVehAmmount][2]);
INI_WriteInt(File, "VehAmmount4", AutoSalon[id][aVehAmmount][3]);
INI_WriteInt(File, "VehAmmount5", AutoSalon[id][aVehAmmount][4]);
INI_WriteInt(File, "VehAmmount6", AutoSalon[id][aVehAmmount][5]);
INI_WriteInt(File, "VehAmmount7", AutoSalon[id][aVehAmmount][6]);
INI_WriteInt(File, "VehAmmount8", AutoSalon[id][aVehAmmount][7]);
INI_WriteInt(File, "VehAmmount9", AutoSalon[id][aVehAmmount][8]);
INI_WriteInt(File, "VehAmmount10", AutoSalon[id][aVehAmmount][9]);
INI_WriteInt(File, "VehAmmount11", AutoSalon[id][aVehAmmount][10]);
INI_WriteInt(File, "VehAmmount12", AutoSalon[id][aVehAmmount][11]);
INI_WriteInt(File, "VehAmmount13", AutoSalon[id][aVehAmmount][12]);
INI_WriteInt(File, "VehAmmount14", AutoSalon[id][aVehAmmount][13]);
INI_WriteInt(File, "VehAmmount15", AutoSalon[id][aVehAmmount][14]);
INI_WriteInt(File, "VehAmmount16", AutoSalon[id][aVehAmmount][15]);
INI_WriteFloat(File, "VehBuyedPosX", AutoSalon[id][aVehBuyedPos][0]);
INI_WriteFloat(File, "VehBuyedPosY", AutoSalon[id][aVehBuyedPos][1]);
INI_WriteFloat(File, "VehBuyedPosZ", AutoSalon[id][aVehBuyedPos][2]);
INI_WriteFloat(File, "VehBuyedPosA", AutoSalon[id][aVehBuyedPos][3]);
INI_WriteFloat(File, "PickupPosX", AutoSalon[id][aPickupPos][0]);
INI_WriteFloat(File, "PickupPosY", AutoSalon[id][aPickupPos][1]);
INI_WriteFloat(File, "PickupPosZ", AutoSalon[id][aPickupPos][2]);
INI_WriteFloat(File, "CameraPosX", AutoSalon[id][aCameraPos][0]);
INI_WriteFloat(File, "CameraPosY", AutoSalon[id][aCameraPos][1]);
INI_WriteFloat(File, "CameraPosZ", AutoSalon[id][aCameraPos][2]);
INI_WriteFloat(File, "CameraLookAtX", AutoSalon[id][aCameraLookAt][0]);
INI_WriteFloat(File, "CameraLookAtY", AutoSalon[id][aCameraLookAt][1]);
INI_WriteFloat(File, "CameraLookAtZ", AutoSalon[id][aCameraLookAt][2]);
INI_WriteInt(File, "VirtualW", AutoSalon[id][aVW]);
INI_WriteInt(File, "Interior", AutoSalon[id][aInt]);
INI_WriteInt(File, "IzlogVeh", AutoSalon[id][aIzlogVeh]);
INI_Close(File);
return 1;}
//------------------------------------------------------------------------------
forward LoadSalon(id, name[], value[]);
public LoadSalon(id, name[], value[]) {
INI_Int("MaxVehModel", AutoSalon[id][aMaxVehModel]);
INI_Int("VehModel1", AutoSalon[id][aVehModel][0]);
INI_Int("VehModel2", AutoSalon[id][aVehModel][1]);
INI_Int("VehModel3", AutoSalon[id][aVehModel][2]);
INI_Int("VehModel4", AutoSalon[id][aVehModel][3]);
INI_Int("VehModel5", AutoSalon[id][aVehModel][4]);
INI_Int("VehModel6", AutoSalon[id][aVehModel][5]);
INI_Int("VehModel7", AutoSalon[id][aVehModel][6]);
INI_Int("VehModel8", AutoSalon[id][aVehModel][7]);
INI_Int("VehModel9", AutoSalon[id][aVehModel][8]);
INI_Int("VehModel10", AutoSalon[id][aVehModel][9]);
INI_Int("VehModel11", AutoSalon[id][aVehModel][10]);
INI_Int("VehModel12", AutoSalon[id][aVehModel][11]);
INI_Int("VehModel13", AutoSalon[id][aVehModel][12]);
INI_Int("VehModel14", AutoSalon[id][aVehModel][13]);
INI_Int("VehModel15", AutoSalon[id][aVehModel][14]);
INI_Int("VehModel16", AutoSalon[id][aVehModel][15]);
INI_Int("VehAmmount1", AutoSalon[id][aVehAmmount][0]);
INI_Int("VehAmmount2", AutoSalon[id][aVehAmmount][1]);
INI_Int("VehAmmount3", AutoSalon[id][aVehAmmount][2]);
INI_Int("VehAmmount4", AutoSalon[id][aVehAmmount][3]);
INI_Int("VehAmmount5", AutoSalon[id][aVehAmmount][4]);
INI_Int("VehAmmount6", AutoSalon[id][aVehAmmount][5]);
INI_Int("VehAmmount7", AutoSalon[id][aVehAmmount][6]);
INI_Int("VehAmmount8", AutoSalon[id][aVehAmmount][7]);
INI_Int("VehAmmount9", AutoSalon[id][aVehAmmount][8]);
INI_Int("VehAmmount10", AutoSalon[id][aVehAmmount][9]);
INI_Int("VehAmmount11", AutoSalon[id][aVehAmmount][10]);
INI_Int("VehAmmount12", AutoSalon[id][aVehAmmount][11]);
INI_Int("VehAmmount13", AutoSalon[id][aVehAmmount][12]);
INI_Int("VehAmmount14", AutoSalon[id][aVehAmmount][13]);
INI_Int("VehAmmount15", AutoSalon[id][aVehAmmount][14]);
INI_Int("VehAmmount16", AutoSalon[id][aVehAmmount][15]);
INI_Float("VehBuyedPosX", AutoSalon[id][aVehBuyedPos][0]);
INI_Float("VehBuyedPosY", AutoSalon[id][aVehBuyedPos][1]);
INI_Float("VehBuyedPosZ", AutoSalon[id][aVehBuyedPos][2]);
INI_Float("VehBuyedPosA", AutoSalon[id][aVehBuyedPos][3]);
INI_Float("PickupPosX", AutoSalon[id][aPickupPos][0]);
INI_Float("PickupPosY", AutoSalon[id][aPickupPos][1]);
INI_Float("PickupPosZ", AutoSalon[id][aPickupPos][2]);
INI_Float("CameraPosX", AutoSalon[id][aCameraPos][0]);
INI_Float("CameraPosY", AutoSalon[id][aCameraPos][1]);
INI_Float("CameraPosZ", AutoSalon[id][aCameraPos][2]);
INI_Float("CameraLookAtX", AutoSalon[id][aCameraLookAt][0]);
INI_Float("CameraLookAtY", AutoSalon[id][aCameraLookAt][1]);
INI_Float("CameraLookAtZ", AutoSalon[id][aCameraLookAt][2]);
INI_Int("VirtualW", AutoSalon[id][aVW]);
INI_Int("Interior", AutoSalon[id][aInt]);
INI_Int("IzlogVeh", AutoSalon[id][aIzlogVeh]);
return true;}
//------------------------------------------------------------------------------
GetNearestAktor(playerid) {
for(new b = 1; b < sizeof(AktorInfo); b++) {
	if(IsPlayerInRangeOfPoint(playerid, 2.0, AktorInfo[b][aktorX], AktorInfo[b][aktorY], AktorInfo[b][aktorZ])) return b; }
return -1;}
stock NextAktorID(const len) {
new id = (-1);
for(new loop = (0), provjera = (-1), Data_[64] = "\0"; loop != len; ++ loop) {
   provjera = (loop+1);
   format(Data_, (sizeof Data_), AKTOR_FILE, provjera);
   if(!fexist(Data_)) {
	  id = (provjera);
	  break;}}
	return (id);}
stock SaveAktor(id) {
new aktorFile[60];
format(aktorFile, sizeof(aktorFile), AKTOR_FILE, id);
new INI:File = INI_Open(aktorFile);
INI_WriteString(File, "Ime", AktorInfo[id][aktorime]);
INI_WriteFloat(File, "Lokacija_X", AktorInfo[id][aktorX]);
INI_WriteFloat(File, "Lokacija_Y", AktorInfo[id][aktorY]);
INI_WriteFloat(File, "Lokacija_Z", AktorInfo[id][aktorZ]);
INI_WriteFloat(File, "Rotacija_A", AktorInfo[id][aktorA]);
INI_WriteInt(File, "Skin", AktorInfo[id][aktorskin]);
INI_Close(File);}
forward LoadAktor(id, name[], value[]);
public LoadAktor(id, name[], value[]) {
INI_String("Ime", AktorInfo[id][aktorime]);
INI_Float("Lokacija_X", AktorInfo[id][aktorX]);
INI_Float("Lokacija_Y", AktorInfo[id][aktorY]);
INI_Float("Lokacija_Z", AktorInfo[id][aktorZ]);
INI_Float("Rotacija_A", AktorInfo[id][aktorA]);
INI_Int("Skin", AktorInfo[id][aktorskin]);
return 1;}
//------------------------------------------------------------------------------
stock SaveGate(id) {
new ifile[40];
format(ifile, sizeof(ifile), GATE_FILE, id);
new INI:File = INI_Open(ifile);
INI_WriteString(File, "Owner", GateData[id][gateOwner]);
INI_WriteInt(File, "Model", GateData[id][gateModel]);
INI_WriteInt(File, "For", GateData[id][gateFor]);
INI_WriteInt(File, "OrgID", GateData[id][gateOrgID]);
INI_WriteFloat(File, "Speed", GateData[id][gateSpeed]);
INI_WriteFloat(File, "Radius", GateData[id][gateRadius]);
INI_WriteInt(File, "Time", GateData[id][gateTime]);
INI_WriteFloat(File, "Pos1", GateData[id][gatePos][0]);
INI_WriteFloat(File, "Pos2", GateData[id][gatePos][1]);
INI_WriteFloat(File, "Pos3", GateData[id][gatePos][2]);
INI_WriteFloat(File, "Pos4", GateData[id][gatePos][3]);
INI_WriteFloat(File, "Pos5", GateData[id][gatePos][4]);
INI_WriteFloat(File, "Pos6", GateData[id][gatePos][5]);
INI_WriteInt(File, "Interior", GateData[id][gateInterior]);
INI_WriteInt(File, "World", GateData[id][gateWorld]);
INI_WriteFloat(File, "Move1", GateData[id][gateMove][0]);
INI_WriteFloat(File, "Move2", GateData[id][gateMove][1]);
INI_WriteFloat(File, "Move3", GateData[id][gateMove][2]);
INI_WriteFloat(File, "Move4", GateData[id][gateMove][3]);
INI_WriteFloat(File, "Move5", GateData[id][gateMove][4]);
INI_WriteFloat(File, "Move6", GateData[id][gateMove][5]);
INI_Close(File);
return 1;}
//------------------------------------------------------------------------------
forward LoadGate(id, name[], value[]);
public LoadGate(id, name[], value[]) {

INI_String("Owner", GateData[id][gateOwner], MAX_PLAYER_NAME);
INI_Int("Model", GateData[id][gateModel]);
INI_Int("For", GateData[id][gateFor]);
INI_Int("OrgID", GateData[id][gateOrgID]);
INI_Float("Speed", GateData[id][gateSpeed]);
INI_Float("Radius", GateData[id][gateRadius]);
INI_Int("Time", GateData[id][gateTime]);
INI_Float("Pos1", GateData[id][gatePos][0]);
INI_Float("Pos2", GateData[id][gatePos][1]);
INI_Float("Pos3", GateData[id][gatePos][2]);
INI_Float("Pos4", GateData[id][gatePos][3]);
INI_Float("Pos5", GateData[id][gatePos][4]);
INI_Float("Pos6", GateData[id][gatePos][5]);
INI_Int("Interior", GateData[id][gateInterior]);
INI_Int("World", GateData[id][gateWorld]);
INI_Float("Move1", GateData[id][gateMove][0]);
INI_Float("Move2", GateData[id][gateMove][1]);
INI_Float("Move3", GateData[id][gateMove][2]);
INI_Float("Move4", GateData[id][gateMove][3]);
INI_Float("Move5", GateData[id][gateMove][4]);
INI_Float("Move6", GateData[id][gateMove][5]);

return 1;}
//------------------------------------------------------------------------------
stock SaveHotel(id) {
new ifile[40];
format(ifile, sizeof(ifile), HOTEL_FILE, id);
new INI:File = INI_Open(ifile);
INI_WriteInt(File, "Owned", hotelInfo[id][hOwned]);
INI_WriteString(File, "Owner", hotelInfo[id][hOwner]);
INI_WriteFloat(File, "Enter1", hotelInfo[id][hEnter][0]);
INI_WriteFloat(File, "Enter2", hotelInfo[id][hEnter][1]);
INI_WriteFloat(File, "Enter3", hotelInfo[id][hEnter][2]);
INI_WriteFloat(File, "Exit1", hotelInfo[id][hExit][0]);
INI_WriteFloat(File, "Exit2", hotelInfo[id][hExit][1]);
INI_WriteFloat(File, "Exit3", hotelInfo[id][hExit][2]);
INI_WriteInt(File, "Price", hotelInfo[id][hPrice]);
INI_WriteInt(File, "RoomPrice", hotelInfo[id][hRoomPrice]);
INI_WriteInt(File, "Money", hotelInfo[id][hMoney]);
INI_WriteInt(File, "Interior", hotelInfo[id][hInterior]);
INI_WriteInt(File, "VW", hotelInfo[id][hVW]);
INI_WriteInt(File, "Level", hotelInfo[id][hLevel]);
INI_WriteInt(File, "Locked", hotelInfo[id][hLocked]);
INI_WriteString(File, "Adress", hotelInfo[id][hAdress]);
INI_WriteString(File, "Guest_1", hotelInfo[id][hGuest_1]);
INI_WriteString(File, "Guest_2", hotelInfo[id][hGuest_2]);
INI_WriteString(File, "Guest_3", hotelInfo[id][hGuest_3]);
INI_WriteString(File, "Guest_4", hotelInfo[id][hGuest_4]);
INI_WriteString(File, "Guest_5", hotelInfo[id][hGuest_5]);
INI_WriteString(File, "Guest_6", hotelInfo[id][hGuest_6]);
INI_WriteString(File, "Guest_7", hotelInfo[id][hGuest_7]);
INI_WriteString(File, "Guest_8", hotelInfo[id][hGuest_8]);
INI_WriteString(File, "Guest_9", hotelInfo[id][hGuest_9]);
INI_WriteString(File, "Guest_10", hotelInfo[id][hGuest_10]);
INI_WriteInt(File, "Porez", hotelInfo[id][hPorez]);
INI_WriteInt(File, "VrednostPoreza", hotelInfo[id][hVrednostPoreza]);
INI_Close(File);
return 1;}
forward LoadHotel(id, name[], value[]);
public LoadHotel(id, name[], value[]) {

INI_Int("Owned", hotelInfo[id][hOwned]);
INI_String("Owner", hotelInfo[id][hOwner], MAX_PLAYER_NAME);
INI_Float("Enter1", hotelInfo[id][hEnter][0]);
INI_Float("Enter2", hotelInfo[id][hEnter][1]);
INI_Float("Enter3", hotelInfo[id][hEnter][2]);
INI_Float("Exit1", hotelInfo[id][hExit][0]);
INI_Float("Exit2", hotelInfo[id][hExit][1]);
INI_Float("Exit3", hotelInfo[id][hExit][2]);
INI_Int("Price", hotelInfo[id][hPrice]);
INI_Int("RoomPrice", hotelInfo[id][hRoomPrice]);
INI_Int("Money", hotelInfo[id][hMoney]);
INI_Int("Interior", hotelInfo[id][hInterior]);
INI_Int("VW", hotelInfo[id][hVW]);
INI_Int("Level", hotelInfo[id][hLevel]);
INI_Int("Locked", hotelInfo[id][hLocked]);
INI_String("Adress", hotelInfo[id][hAdress], 38);
INI_String("Guest_1", hotelInfo[id][hGuest_1], MAX_PLAYER_NAME);
INI_String("Guest_2", hotelInfo[id][hGuest_2], MAX_PLAYER_NAME);
INI_String("Guest_3", hotelInfo[id][hGuest_3], MAX_PLAYER_NAME);
INI_String("Guest_4", hotelInfo[id][hGuest_4], MAX_PLAYER_NAME);
INI_String("Guest_5", hotelInfo[id][hGuest_5], MAX_PLAYER_NAME);
INI_String("Guest_6", hotelInfo[id][hGuest_6], MAX_PLAYER_NAME);
INI_String("Guest_7", hotelInfo[id][hGuest_7], MAX_PLAYER_NAME);
INI_String("Guest_8", hotelInfo[id][hGuest_8], MAX_PLAYER_NAME);
INI_String("Guest_9", hotelInfo[id][hGuest_9], MAX_PLAYER_NAME);
INI_String("Guest_10", hotelInfo[id][hGuest_10], MAX_PLAYER_NAME);
INI_Int("Porez", hotelInfo[id][hPorez]);
INI_Int("VrednostPoreza", hotelInfo[id][hVrednostPoreza]);
return 1;}
//------------------------------------------------------------------------------
public SaveProperty(id) {
new ifile[40];
format(ifile, sizeof(ifile), IM_FILE, id);
new INI:File = INI_Open(ifile);
INI_WriteInt(File, "Owned", II[id][iOwned]);
INI_WriteString(File, "Owner", II[id][iOwner]);
INI_WriteInt(File, "Usage", II[id][iUsage]);
INI_WriteFloat(File, "Enter1", II[id][iEnter][0]);
INI_WriteFloat(File, "Enter2", II[id][iEnter][1]);
INI_WriteFloat(File, "Enter3", II[id][iEnter][2]);
INI_WriteFloat(File, "Exit1", II[id][iExit][0]);
INI_WriteFloat(File, "Exit2", II[id][iExit][1]);
INI_WriteFloat(File, "Exit3", II[id][iExit][2]);
INI_WriteInt(File, "Price", II[id][iPrice]);
INI_WriteInt(File, "Locked", II[id][iLocked]);
INI_WriteInt(File, "Interior", II[id][iInterior]);
INI_WriteInt(File, "VW", II[id][iVW]);
INI_WriteInt(File, "Vrsta", II[id][iVrsta]);
INI_WriteInt(File, "Ormar", II[id][iOrmar]);
INI_WriteInt(File, "Skin1", II[id][iSkin][0]);
INI_WriteInt(File, "Skin2", II[id][iSkin][1]);
INI_WriteInt(File, "Skin3", II[id][iSkin][2]);
INI_WriteInt(File, "SafeStatus", II[id][iSafeStatus]);
INI_WriteInt(File, "SafePass", II[id][iSafePass]);
INI_WriteInt(File, "Oruzje1", II[id][iOruzje][0]);
INI_WriteInt(File, "Oruzje2", II[id][iOruzje][1]);
INI_WriteInt(File, "Oruzje3", II[id][iOruzje][2]);
INI_WriteInt(File, "Oruzje4", II[id][iOruzje][3]);
INI_WriteInt(File, "Municija1", II[id][iMunicija][0]);
INI_WriteInt(File, "Municija2", II[id][iMunicija][1]);
INI_WriteInt(File, "Municija3", II[id][iMunicija][2]);
INI_WriteInt(File, "Municija4", II[id][iMunicija][3]);
INI_WriteInt(File, "Drug1", II[id][iDrug][0]);
INI_WriteInt(File, "Drug2", II[id][iDrug][1]);
INI_WriteInt(File, "Drug3", II[id][iDrug][2]);
INI_WriteInt(File, "Drug4", II[id][iDrug][3]);
INI_WriteInt(File, "Drug5", II[id][iDrug][4]);
INI_WriteInt(File, "Drug6", II[id][iDrug][5]);
INI_WriteInt(File, "Drug7", II[id][iDrug][6]);
INI_WriteInt(File, "Drug8", II[id][iDrug][7]);
INI_WriteInt(File, "Drug9", II[id][iDrug][8]);
INI_WriteInt(File, "Drug10", II[id][iDrug][9]);
INI_WriteInt(File, "DrugCode1", II[id][iDrugCode][0]);
INI_WriteInt(File, "DrugCode2", II[id][iDrugCode][1]);
INI_WriteInt(File, "DrugCode3", II[id][iDrugCode][2]);
INI_WriteInt(File, "DrugCode4", II[id][iDrugCode][3]);
INI_WriteInt(File, "DrugCode5", II[id][iDrugCode][4]);
INI_WriteInt(File, "DrugCode6", II[id][iDrugCode][5]);
INI_WriteInt(File, "DrugCode7", II[id][iDrugCode][6]);
INI_WriteInt(File, "DrugCode8", II[id][iDrugCode][7]);
INI_WriteInt(File, "DrugCode9", II[id][iDrugCode][8]);
INI_WriteInt(File, "DrugCode10", II[id][iDrugCode][9]);
INI_WriteInt(File, "DoorLevel", II[id][iDoorLevel]);
INI_WriteInt(File, "Alarm", II[id][iAlarm]);
INI_WriteInt(File, "LockLevel", II[id][iLockLevel]);
INI_WriteInt(File, "Time", II[id][iTime]);
INI_WriteFloat(File, "PizzaTime", II[id][iPizzaTime]);
INI_WriteInt(File, "Level", II[id][iLevel]);
INI_WriteString(File, "Adress", II[id][iAdress]);
INI_WriteInt(File, "Neaktivnost", II[id][iNeaktivnost]);
INI_WriteInt(File, "Rentable", II[id][iRentable]);
INI_WriteInt(File, "RentPrice", II[id][iRentPrice]);
INI_WriteInt(File, "Rentovano", II[id][iRentovano]);
INI_WriteInt(File, "Money", II[id][iMoney]);
INI_WriteInt(File, "Mats", II[id][iMats]);
INI_Close(File);
return 1;}
//------------------------------------------------------------------------------
public OcitajImovinu(id, name[], value[]) {
INI_Int("Owned", II[id][iOwned]);
INI_String("Owner", II[id][iOwner], MAX_PLAYER_NAME);
INI_Int("Usage", II[id][iUsage]);
INI_Float("Enter1", II[id][iEnter][0]);
INI_Float("Enter2", II[id][iEnter][1]);
INI_Float("Enter3", II[id][iEnter][2]);
INI_Float("Exit1", II[id][iExit][0]);
INI_Float("Exit2", II[id][iExit][1]);
INI_Float("Exit3", II[id][iExit][2]);
INI_Int("Price", II[id][iPrice]);
INI_Int("Locked", II[id][iLocked]);
INI_Int("Interior", II[id][iInterior]);
INI_Int("VW", II[id][iVW]);
INI_Int("Vrsta", II[id][iVrsta]);
INI_Int("Ormar", II[id][iOrmar]);
INI_Int("Skin1", II[id][iSkin][0]);
INI_Int("Skin2", II[id][iSkin][1]);
INI_Int("Skin3", II[id][iSkin][2]);
INI_Int("SafeStatus", II[id][iSafeStatus]);
INI_Int("SafePass", II[id][iSafePass]);
INI_Int("Oruzje1", II[id][iOruzje][0]);
INI_Int("Oruzje2", II[id][iOruzje][1]);
INI_Int("Oruzje3", II[id][iOruzje][2]);
INI_Int("Oruzje4", II[id][iOruzje][3]);
INI_Int("Municija1", II[id][iMunicija][0]);
INI_Int("Municija2", II[id][iMunicija][1]);
INI_Int("Municija3", II[id][iMunicija][2]);
INI_Int("Municija4", II[id][iMunicija][3]);
INI_Int("Drug1", II[id][iDrug][0]);
INI_Int("Drug2", II[id][iDrug][1]);
INI_Int("Drug3", II[id][iDrug][2]);
INI_Int("Drug4", II[id][iDrug][3]);
INI_Int("Drug5", II[id][iDrug][4]);
INI_Int("Drug6", II[id][iDrug][5]);
INI_Int("Drug7", II[id][iDrug][6]);
INI_Int("Drug8", II[id][iDrug][7]);
INI_Int("Drug9", II[id][iDrug][8]);
INI_Int("Drug10", II[id][iDrug][9]);
INI_Int("DrugCode1", II[id][iDrugCode][0]);
INI_Int("DrugCode2", II[id][iDrugCode][1]);
INI_Int("DrugCode3", II[id][iDrugCode][2]);
INI_Int("DrugCode4", II[id][iDrugCode][3]);
INI_Int("DrugCode5", II[id][iDrugCode][4]);
INI_Int("DrugCode6", II[id][iDrugCode][5]);
INI_Int("DrugCode7", II[id][iDrugCode][6]);
INI_Int("DrugCode8", II[id][iDrugCode][7]);
INI_Int("DrugCode9", II[id][iDrugCode][8]);
INI_Int("DrugCode10", II[id][iDrugCode][9]);
INI_Int("DoorLevel", II[id][iDoorLevel]);
INI_Int("Alarm", II[id][iAlarm]);
INI_Int("LockLevel", II[id][iLockLevel]);
INI_Int("Time", II[id][iTime]);
INI_Float("PizzaTime", II[id][iPizzaTime]);
INI_Int("Level", II[id][iLevel]);
INI_String("Adress", II[id][iAdress], 38);
INI_Int("Neaktivnost", II[id][iNeaktivnost]);
INI_Int("Rentable", II[id][iRentable]);
INI_Int("RentPrice", II[id][iRentPrice]);
INI_Int("Rentovano", II[id][iRentovano]);
INI_Int("Money", II[id][iMoney]);
INI_Int("Mats", II[id][iMats]);
return true;}
//------------------------------------------------------------------------------
public SaveVehicle(id) {
new file4[40];
format(file4, sizeof(file4), V_FILE, id);
new INI:File = INI_Open(file4);
INI_SetTag(File, "Informacije");
INI_WriteInt(File, "Kupljen", VehicleInfo[id][vOwned]);
INI_WriteInt(File, "Cena", VehicleInfo[id][vPrice]);
INI_WriteString(File, "Vlasnik", VehicleInfo[id][vOwner]);
INI_WriteInt(File, "Zakljucana", VehicleInfo[id][vLocked]);
INI_WriteFloat(File, "LokacijaX", VehicleInfo[id][vLokacijaX]);
INI_WriteFloat(File, "LokacijaY", VehicleInfo[id][vLokacijaY]);
INI_WriteFloat(File, "LokacijaZ", VehicleInfo[id][vLokacijaZ]);
INI_WriteFloat(File, "LokacijaA", VehicleInfo[id][vLokacijaA]);
INI_WriteInt(File, "VirtualWorld", VehicleInfo[id][vVirtualWorld]);
INI_WriteInt(File, "Interior", VehicleInfo[id][vInterior]);
INI_WriteInt(File, "Koriscenje", VehicleInfo[id][vUsage]);
INI_WriteInt(File, "Posao", VehicleInfo[id][vJob]);
INI_WriteInt(File, "Orga", VehicleInfo[id][vOrganization]);
INI_WriteInt(File, "FuelStation", VehicleInfo[id][vFuelStation]);
INI_WriteInt(File, "Boja1", VehicleInfo[id][vColor1]);
INI_WriteInt(File, "Boja2", VehicleInfo[id][vColor2]);
INI_WriteInt(File, "Model", VehicleInfo[id][vModel]);
INI_WriteInt(File, "Reg", VehicleInfo[id][vReg]);
INI_WriteInt(File, "RegVreme", VehicleInfo[id][vRegVreme]);
INI_WriteString(File, "Tablice", VehicleInfo[id][vTablice]);
INI_WriteInt(File, "Teh", VehicleInfo[id][vTeh]);
INI_WriteInt(File, "GPS", VehicleInfo[id][vGPS]);
INI_WriteInt(File, "Osiguranje", VehicleInfo[id][vOsiguranje]);
INI_WriteInt(File, "Lock", VehicleInfo[id][vLock]);
INI_WriteInt(File, "Alarm", VehicleInfo[id][vAlarm]);
INI_WriteInt(File, "Fuel", VehicleInfo[id][vFuel]);
INI_WriteInt(File, "FuelType", VehicleInfo[id][vFuelType]);
INI_WriteInt(File, "Neon", VehicleInfo[id][vNeon]);
INI_WriteInt(File, "Tuned", VehicleInfo[id][vTuned]);
INI_WriteInt(File, "Imobilizator", VehicleInfo[id][vImobilizator]);
INI_WriteInt(File, "Spoiler", VehicleInfo[id][vSpoiler]);
INI_WriteInt(File, "Hood", VehicleInfo[id][vHood]);
INI_WriteInt(File, "Roof", VehicleInfo[id][vRoof]);
INI_WriteInt(File, "Skirt", VehicleInfo[id][vSkirt]);
INI_WriteInt(File, "Lamps", VehicleInfo[id][vLamps]);
INI_WriteInt(File, "Nitro", VehicleInfo[id][vNitro]);
INI_WriteInt(File, "Exhaust", VehicleInfo[id][vExhaust]);
INI_WriteInt(File, "Wheels", VehicleInfo[id][vWheels]);
INI_WriteInt(File, "Stereo", VehicleInfo[id][vStereo]);
INI_WriteInt(File, "Hydraulics", VehicleInfo[id][vHydraulics]);
INI_WriteInt(File, "FrontBumper", VehicleInfo[id][vFrontBumper]);
INI_WriteInt(File, "RearBumper", VehicleInfo[id][vRearBumper]);
INI_WriteInt(File, "Vents", VehicleInfo[id][vVents]);
INI_WriteInt(File, "PaintJob", VehicleInfo[id][vPaintJob]);
INI_WriteInt(File, "Provera", VehicleInfo[id][vProvera]);
INI_WriteInt(File, "ID", VehicleInfo[id][vID]);
INI_WriteInt(File, "Drug1", VehicleInfo[id][vDrug][0]);
INI_WriteInt(File, "Drug2", VehicleInfo[id][vDrug][1]);
INI_WriteInt(File, "Drug3", VehicleInfo[id][vDrug][2]);
INI_WriteInt(File, "Drug4", VehicleInfo[id][vDrug][3]);
INI_WriteInt(File, "Drug5", VehicleInfo[id][vDrug][4]);
INI_WriteInt(File, "Drug6", VehicleInfo[id][vDrug][5]);
INI_WriteInt(File, "DrugCode1", VehicleInfo[id][vDrugCode][0]);
INI_WriteInt(File, "DrugCode2", VehicleInfo[id][vDrugCode][1]);
INI_WriteInt(File, "DrugCode3", VehicleInfo[id][vDrugCode][2]);
INI_WriteInt(File, "DrugCode4", VehicleInfo[id][vDrugCode][3]);
INI_WriteInt(File, "DrugCode5", VehicleInfo[id][vDrugCode][4]);
INI_WriteInt(File, "DrugCode6", VehicleInfo[id][vDrugCode][5]);
INI_WriteInt(File, "Materijali", VehicleInfo[id][vMaterijali]);
INI_WriteInt(File, "Melee", VehicleInfo[id][vMelee]);
INI_WriteInt(File, "Weap1", VehicleInfo[id][vWeap1]);
INI_WriteInt(File, "Ammo1", VehicleInfo[id][vAmmo1]);
INI_WriteInt(File, "Weap2", VehicleInfo[id][vWeap2]);
INI_WriteInt(File, "Ammo2", VehicleInfo[id][vAmmo2]);
INI_WriteInt(File, "Gajbica1", VehicleInfo[id][vGajbica][0]);
INI_WriteInt(File, "Gajbica2", VehicleInfo[id][vGajbica][1]);
INI_WriteInt(File, "Gajbica3", VehicleInfo[id][vGajbica][2]);
INI_WriteInt(File, "Gajbica4", VehicleInfo[id][vGajbica][3]);
INI_WriteInt(File, "Gajbica5", VehicleInfo[id][vGajbica][4]);
INI_WriteInt(File, "GajbicaKolicina1", VehicleInfo[id][vGajbicaAmmount][0]);
INI_WriteInt(File, "GajbicaKolicina2", VehicleInfo[id][vGajbicaAmmount][1]);
INI_WriteInt(File, "GajbicaKolicina3", VehicleInfo[id][vGajbicaAmmount][2]);
INI_WriteInt(File, "GajbicaKolicina4", VehicleInfo[id][vGajbicaAmmount][3]);
INI_WriteInt(File, "GajbicaKolicina5", VehicleInfo[id][vGajbicaAmmount][4]);
INI_WriteInt(File, "Neaktivnost", VehicleInfo[id][vNeaktivnost]);
INI_WriteInt(File, "Kilometri", VehicleInfo[id][vKilometri]);
INI_WriteInt(File, "Metri", VehicleInfo[id][vMetri]);
INI_Close(File);
return true;}
//------------------------------------------------------------------------------
public OcitajVozilo(id, name[], value[]) {
INI_Int("Kupljen", VehicleInfo[id][vOwned]);
INI_Int("Cena", VehicleInfo[id][vPrice]);
INI_String("Vlasnik", VehicleInfo[id][vOwner], MAX_PLAYER_NAME);
INI_Int("Zakljucana", VehicleInfo[id][vLocked]);
INI_Float("LokacijaX", VehicleInfo[id][vLokacijaX]);
INI_Float("LokacijaY", VehicleInfo[id][vLokacijaY]);
INI_Float("LokacijaZ", VehicleInfo[id][vLokacijaZ]);
INI_Float("LokacijaA", VehicleInfo[id][vLokacijaA]);
INI_Int("VirtualWorld", VehicleInfo[id][vVirtualWorld]);
INI_Int("Interior", VehicleInfo[id][vInterior]);
INI_Int("Koriscenje", VehicleInfo[id][vUsage]);
INI_Int("Posao", VehicleInfo[id][vJob]);
INI_Int("Orga", VehicleInfo[id][vOrganization]);
INI_Int("FuelStation", VehicleInfo[id][vFuelStation]);
INI_Int("Boja1", VehicleInfo[id][vColor1]);
INI_Int("Boja2", VehicleInfo[id][vColor2]);
INI_Int("Model", VehicleInfo[id][vModel]);
INI_Int("Reg", VehicleInfo[id][vReg]);
INI_Int("RegVreme", VehicleInfo[id][vRegVreme]);
INI_String("Tablice", VehicleInfo[id][vTablice], 16);
INI_Int("Teh", VehicleInfo[id][vTeh]);
INI_Int("GPS", VehicleInfo[id][vGPS]);
INI_Int("Osiguranje", VehicleInfo[id][vOsiguranje]);
INI_Int("Lock", VehicleInfo[id][vLock]);
INI_Int("Alarm", VehicleInfo[id][vAlarm]);
INI_Int("Fuel", VehicleInfo[id][vFuel]);
INI_Int("FuelType", VehicleInfo[id][vFuelType]);
INI_Int("Neon", VehicleInfo[id][vNeon]);
INI_Int("Tuned", VehicleInfo[id][vTuned]);
INI_Int("Imobilizator", VehicleInfo[id][vImobilizator]);
INI_Int("Spoiler", VehicleInfo[id][vSpoiler]);
INI_Int("Hood", VehicleInfo[id][vHood]);
INI_Int("Roof", VehicleInfo[id][vRoof]);
INI_Int("Skirt", VehicleInfo[id][vSkirt]);
INI_Int("Lamps", VehicleInfo[id][vLamps]);
INI_Int("Nitro", VehicleInfo[id][vNitro]);
INI_Int("Exhaust", VehicleInfo[id][vExhaust]);
INI_Int("Wheels", VehicleInfo[id][vWheels]);
INI_Int("Stereo", VehicleInfo[id][vStereo]);
INI_Int("Hydraulics", VehicleInfo[id][vHydraulics]);
INI_Int("FrontBumper", VehicleInfo[id][vFrontBumper]);
INI_Int("RearBumper", VehicleInfo[id][vRearBumper]);
INI_Int("Vents", VehicleInfo[id][vVents]);
INI_Int("PaintJob", VehicleInfo[id][vPaintJob]);
INI_Int("Provera", VehicleInfo[id][vProvera]);
INI_Int("Drug1", VehicleInfo[id][vDrug][0]);
INI_Int("Drug2", VehicleInfo[id][vDrug][1]);
INI_Int("Drug3", VehicleInfo[id][vDrug][2]);
INI_Int("Drug4", VehicleInfo[id][vDrug][3]);
INI_Int("Drug5", VehicleInfo[id][vDrug][4]);
INI_Int("Drug6", VehicleInfo[id][vDrug][5]);
INI_Int("DrugCode1", VehicleInfo[id][vDrugCode][0]);
INI_Int("DrugCode2", VehicleInfo[id][vDrugCode][1]);
INI_Int("DrugCode3", VehicleInfo[id][vDrugCode][2]);
INI_Int("DrugCode4", VehicleInfo[id][vDrugCode][3]);
INI_Int("DrugCode5", VehicleInfo[id][vDrugCode][4]);
INI_Int("DrugCode6", VehicleInfo[id][vDrugCode][5]);
INI_Int("Materijali", VehicleInfo[id][vMaterijali]);
INI_Int("Melee", VehicleInfo[id][vMelee]);
INI_Int("Weap1", VehicleInfo[id][vWeap1]);
INI_Int("Ammo1", VehicleInfo[id][vAmmo1]);
INI_Int("Weap2", VehicleInfo[id][vWeap2]);
INI_Int("Ammo2", VehicleInfo[id][vAmmo2]);
INI_Int("Gajbica1", VehicleInfo[id][vGajbica][0]);
INI_Int("Gajbica2", VehicleInfo[id][vGajbica][1]);
INI_Int("Gajbica3", VehicleInfo[id][vGajbica][2]);
INI_Int("Gajbica4", VehicleInfo[id][vGajbica][3]);
INI_Int("Gajbica5", VehicleInfo[id][vGajbica][4]);
INI_Int("GajbicaKolicina1", VehicleInfo[id][vGajbicaAmmount][0]);
INI_Int("GajbicaKolicina2", VehicleInfo[id][vGajbicaAmmount][1]);
INI_Int("GajbicaKolicina3", VehicleInfo[id][vGajbicaAmmount][2]);
INI_Int("GajbicaKolicina4", VehicleInfo[id][vGajbicaAmmount][3]);
INI_Int("GajbicaKolicina5", VehicleInfo[id][vGajbicaAmmount][4]);
INI_Int("Neaktivnost", VehicleInfo[id][vNeaktivnost]);
INI_Int("Kilometri", VehicleInfo[id][vKilometri]);
INI_Int("Metri", VehicleInfo[id][vMetri]);
INI_Int("ID", VehicleInfo[id][vID]);
return true;}

public PorukaRadius(Float:radi, playerid, string[], col1)
{
if(IsPlayerConnected(playerid))
{
	new Float:posx,
		Float:posy,
		Float:posz,
		Float:oldposx,
		Float:oldposy,
		Float:oldposz,
		Float:tempposx,
		Float:tempposy,
		Float:tempposz,
		vehicleid = GetPlayerVehicleID(playerid),
		modelid = GetVehicleModel(vehicleid),
		vehicleid2,
		modelid2;

	GetPlayerPos(playerid, oldposx, oldposy, oldposz);

	foreach(new i : Player) {
		if(IsPlayerConnected(i)) {
			if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
			{
				if(!GetPVarInt(i, "BigEar"))
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);

					if(IsPlayerInAnyVehicle(playerid) && !IsACabrio(modelid) && VehicleWindows[vehicleid] == 0) {
						if(IsPlayerInVehicle(i, vehicleid)) {
							SCM(i, col1, string);
						}
					}
					else {
						vehicleid2 = GetPlayerVehicleID(i);
						modelid2 = GetVehicleModel(vehicleid2);

						if(!IsPlayerInAnyVehicle(i) || IsACabrio(modelid2) || VehicleWindows[vehicleid2] != 0) {
							if(((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
							{
								SCM(i, col1, string);
							}
							else if(((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
							{
								SCM(i, col1, string);
							}
							else if(((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
							{
								SCM(i, col1, string);
							}
							else if(((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
							{
								SCM(i, col1, string);
							}
							else if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
							{
								SCM(i, col1, string);
							}
						}
					}
				}
				else {
					SCM(i, col1, string);
				}
			}
		}
	}
}
return 1;}
//--------------------------------WOF-------------------------------------------
forward UcitajWOF(idwof, name[], value[]);
public UcitajWOF(idwof, name[], value[])
{
INI_Int("Postavljena",WOFInfo[idwof][fPostavljen]);
INI_Int("ImaVlasnika",WOFInfo[idwof][fImaVlasnika]);
INI_String("Vlasnik",WOFInfo[idwof][fVlasnik],32);
INI_Int("Cena",WOFInfo[idwof][fCena]);
INI_Float("WOFX",WOFInfo[idwof][fWOFX]);
INI_Float("WOFY",WOFInfo[idwof][fWOFY]);
INI_Float("WOFZ",WOFInfo[idwof][fWOFZ]);
return true;}
forward SacuvajWOF(idwof);
public SacuvajWOF(idwof)
{
new wFile[128];
format(wFile, sizeof(wFile),"WalkOfFame/WOF_%d.ini",idwof);
new INI:File = INI_Open(wFile);
INI_WriteInt(File,"Postavljena",WOFInfo[idwof][fPostavljen]);
INI_WriteInt(File,"ImaVlasnika",WOFInfo[idwof][fImaVlasnika]);
INI_WriteString(File,"Vlasnik",WOFInfo[idwof][fVlasnik]);
INI_WriteInt(File,"Cena",WOFInfo[idwof][fCena]);
INI_WriteFloat(File,"WOFX",WOFInfo[idwof][fWOFX]);
INI_WriteFloat(File,"WOFY",WOFInfo[idwof][fWOFY]);
INI_WriteFloat(File,"WOFZ",WOFInfo[idwof][fWOFZ]);
INI_Close(File);
return true;}
stock WOFLabelIPickup(b)
{
new string[256];
	if(WOFInfo[b][fImaVlasnika] == 0)
	{
		DestroyDynamic3DTextLabel(WOFLabel[b]);
		ac_DestroyDynamicPickup(WOFPickup[b]);
	format(string,sizeof(string),""col_yelow"WALK OF FAME\n"col_white"|====================|\n"col_yelow"Cena: "col_white"$%d\n"col_yelow"Vlasnik: "col_white"%s\n"col_yelow"ID: "col_white"%d\n"col_yelow"Za kupovinu plocice "col_white"/donatewof\n|====================|",WOFInfo[b][fCena],WOFInfo[b][fVlasnik],b);
	WOFLabel[b] = CreateDynamic3DTextLabel(string ,-1,WOFInfo[b][fWOFX], WOFInfo[b][fWOFY], WOFInfo[b][fWOFZ],15);
	WOFPickup[b] = acc_CreateDynamicPickup(1277, 1, WOFInfo[b][fWOFX], WOFInfo[b][fWOFY], WOFInfo[b][fWOFZ]);}
if(WOFInfo[b][fImaVlasnika] == 1)
{
	DestroyDynamic3DTextLabel(WOFLabel[b]);
	ac_DestroyDynamicPickup(WOFPickup[b]);
	format(string,sizeof(string),""col_yelow"WALK OF FAME\n"col_white"|====================|\n"col_yelow"Donirao: "col_white"$%d\n"col_yelow"Ime: "col_white"%s\n"col_yelow"ID: "col_white"%d\n|====================|",WOFInfo[b][fCena],WOFInfo[b][fVlasnik],b);
	WOFLabel[b] = CreateDynamic3DTextLabel(string ,-1,WOFInfo[b][fWOFX], WOFInfo[b][fWOFY], WOFInfo[b][fWOFZ],15);
	WOFPickup[b] = acc_CreateDynamicPickup(1277, 1, WOFInfo[b][fWOFX], WOFInfo[b][fWOFY], WOFInfo[b][fWOFZ]);}
return true;}

UzmiIDWOF(playerid)
{
for(new i = 0; i < MAX_WOF; i++)
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0, WOFInfo[i][fWOFX], WOFInfo[i][fWOFY], WOFInfo[i][fWOFZ]))
	{
		return i;
	}
}
return -1;}
//------------------------------------------------------------------------------
public SaveOrganization(id)
{
new org_file[40];
format (org_file, sizeof(org_file), O_FILE, id);
new INI:File = INI_Open(org_file);
INI_SetTag(File, "Organizacija");

INI_WriteInt(File, "ID", OI[id][oID]);
INI_WriteString(File, "Ime", OI[id][oName]);
INI_WriteString(File, "PreFix", OI[id][oPreFix]);
INI_WriteString(File, "Color", OI[id][oColor]);

INI_WriteInt(File, "Tip", OI[id][oTip]);
INI_WriteInt(File, "Suspended", OI[id][oSuspended]);
INI_WriteInt(File, "MaxClanova", OI[id][oMaxClanova]);
INI_WriteInt(File, "UbacenihClanova", OI[id][oUbacenihClanova]);

INI_WriteInt(File, "Skin1", OI[id][oSkin1]);
INI_WriteInt(File, "Skin2", OI[id][oSkin2]);
INI_WriteInt(File, "Skin3", OI[id][oSkin3]);
INI_WriteInt(File, "Skin4", OI[id][oSkin4]);
INI_WriteInt(File, "Skin5", OI[id][oSkin5]);
INI_WriteInt(File, "Skin6", OI[id][oSkin6]);

INI_WriteInt(File, "ZSkin1", OI[id][oZSkin1]);
INI_WriteInt(File, "ZSkin2", OI[id][oZSkin2]);
INI_WriteInt(File, "ZSkin3", OI[id][oZSkin3]);
INI_WriteInt(File, "ZSkin4", OI[id][oZSkin4]);
INI_WriteInt(File, "ZSkin5", OI[id][oZSkin5]);
INI_WriteInt(File, "ZSkin6", OI[id][oZSkin6]);

INI_WriteString(File, "Lider1", OI[id][oLider1]);
INI_WriteString(File, "Lider2", OI[id][oLider2]);

INI_WriteString(File, "Clan1", OI[id][oClan1]);
INI_WriteString(File, "Clan2", OI[id][oClan2]);
INI_WriteString(File, "Clan3", OI[id][oClan3]);
INI_WriteString(File, "Clan4", OI[id][oClan4]);
INI_WriteString(File, "Clan5", OI[id][oClan5]);
INI_WriteString(File, "Clan6", OI[id][oClan6]);
INI_WriteString(File, "Clan7", OI[id][oClan7]);
INI_WriteString(File, "Clan8", OI[id][oClan8]);
INI_WriteString(File, "Clan9", OI[id][oClan9]);
INI_WriteString(File, "Clan10", OI[id][oClan10]);
INI_WriteString(File, "Clan11", OI[id][oClan11]);
INI_WriteString(File, "Clan12", OI[id][oClan12]);
INI_WriteString(File, "Clan13", OI[id][oClan13]);
INI_WriteString(File, "Clan14", OI[id][oClan14]);
INI_WriteString(File, "Clan15", OI[id][oClan15]);
INI_WriteString(File, "Clan16", OI[id][oClan16]);
INI_WriteString(File, "Clan17", OI[id][oClan17]);
INI_WriteString(File, "Clan18", OI[id][oClan18]);
INI_WriteString(File, "Clan19", OI[id][oClan19]);
INI_WriteString(File, "Clan20", OI[id][oClan20]);
INI_WriteString(File, "Clan21", OI[id][oClan21]);
INI_WriteString(File, "Clan22", OI[id][oClan22]);
INI_WriteString(File, "Clan23", OI[id][oClan23]);
INI_WriteString(File, "Clan24", OI[id][oClan24]);
INI_WriteString(File, "Clan25", OI[id][oClan25]);
INI_WriteString(File, "Clan26", OI[id][oClan26]);
INI_WriteString(File, "Clan27", OI[id][oClan27]);
INI_WriteString(File, "Clan28", OI[id][oClan28]);
INI_WriteString(File, "Clan29", OI[id][oClan29]);
INI_WriteString(File, "Clan30", OI[id][oClan30]);

INI_WriteString(File, "Rank1", OI[id][oRank1]);
INI_WriteString(File, "Rank2", OI[id][oRank2]);
INI_WriteString(File, "Rank3", OI[id][oRank3]);
INI_WriteString(File, "Rank4", OI[id][oRank4]);
INI_WriteString(File, "Rank5", OI[id][oRank5]);
INI_WriteString(File, "Rank6", OI[id][oRank6]);

INI_WriteFloat(File, "PozExtX", OI[id][oPozExtX]);
INI_WriteFloat(File, "PozExtY", OI[id][oPozExtY]);
INI_WriteFloat(File, "PozExtZ", OI[id][oPozExtZ]);

INI_WriteFloat(File, "PozIntX", OI[id][oPozIntX]);
INI_WriteFloat(File, "PozIntY", OI[id][oPozIntY]);
INI_WriteFloat(File, "PozIntZ", OI[id][oPozIntZ]);

INI_WriteFloat(File, "DutyPoint1", OI[id][oDutyPoint][0]);
INI_WriteFloat(File, "DutyPoint2", OI[id][oDutyPoint][1]);
INI_WriteFloat(File, "DutyPoint3", OI[id][oDutyPoint][2]);

INI_WriteInt(File, "DutyInt", OI[id][oDutyInt]);
INI_WriteInt(File, "DutyVW", OI[id][oDutyVW]);

INI_WriteFloat(File, "EquipPoint1", OI[id][oEquipPoint][0]);
INI_WriteFloat(File, "EquipPoint2", OI[id][oEquipPoint][1]);
INI_WriteFloat(File, "EquipPoint3", OI[id][oEquipPoint][2]);

INI_WriteInt(File, "EquipInt", OI[id][oEquipInt]);
INI_WriteInt(File, "EquipVW", OI[id][oEquipVW]);
INI_WriteInt(File, "SprayID", OI[id][oSprayID]);

INI_WriteInt(File, "Savez", OI[id][oSavez]);

INI_WriteInt(File, "MaxPort", OI[id][oMaxPort]);
INI_WriteInt(File, "ControlType", OI[id][oControlType]);
INI_WriteFloat(File, "DrugField1", OI[id][oDrugField][0]);
INI_WriteFloat(File, "DrugField2", OI[id][oDrugField][1]);
INI_WriteFloat(File, "DrugField3", OI[id][oDrugField][2]);
INI_WriteFloat(File, "SafePos1", OI[id][oSafePos][0]);
INI_WriteFloat(File, "SafePos2", OI[id][oSafePos][1]);
INI_WriteFloat(File, "SafePos3", OI[id][oSafePos][2]);

INI_WriteInt(File, "SafeMoney", OI[id][oSafeMoney]);
INI_WriteInt(File, "SafeDrug1", OI[id][oSafeDrug][0]);
INI_WriteInt(File, "SafeDrug2", OI[id][oSafeDrug][1]);
INI_WriteInt(File, "SafeDrug3", OI[id][oSafeDrug][2]);
INI_WriteInt(File, "SafeDrug4", OI[id][oSafeDrug][3]);
INI_WriteInt(File, "SafeDrugCode1", OI[id][oSafeDrugCode][0]);
INI_WriteInt(File, "SafeDrugCode2", OI[id][oSafeDrugCode][1]);
INI_WriteInt(File, "SafeDrugCode3", OI[id][oSafeDrugCode][2]);
INI_WriteInt(File, "SafeDrugCode4", OI[id][oSafeDrugCode][3]);

INI_WriteInt(File, "Int", OI[id][oInt]);
INI_WriteInt(File, "Vw", OI[id][oVw]);

INI_Close(File);
return 1;}
forward LoadPorts(id, name[], value[]);
public LoadPorts(id, name[], value[]) {
new string[15];

for(new i = 0; i < OI[id][oMaxPort]; i++) {

	format(string, sizeof(string), "Pos1X%d", i);
	INI_Float(string, PortOP[id][i][Pos1][0]);

	format(string, sizeof(string), "Pos1Y%d", i);
	INI_Float(string, PortOP[id][i][Pos1][1]);

	format(string, sizeof(string), "Pos1Z%d", i);
	INI_Float(string, PortOP[id][i][Pos1][2]);

	format(string, sizeof(string), "Int1%d", i);
	INI_Int(string, PortOP[id][i][Int][0]);

	format(string, sizeof(string), "VW1%d", i);
	INI_Int(string, PortOP[id][i][VW][0]);

	format(string, sizeof(string), "Pos2X%d", i);
	INI_Float(string, PortOP[id][i][Pos2][0]);

	format(string, sizeof(string), "Pos2Y%d", i);
	INI_Float(string, PortOP[id][i][Pos2][1]);

	format(string, sizeof(string), "Pos2Z%d", i);
	INI_Float(string, PortOP[id][i][Pos2][2]);

	format(string, sizeof(string), "Int2%d", i);
	INI_Int(string, PortOP[id][i][Int][1]);

	format(string, sizeof(string), "VW2%d", i);
	INI_Int(string, PortOP[id][i][VW][1]);

}
return 1;}
//------------------------------------------------------------------------------
public UcitajOrganizaciju(id, name[], value[])
{
INI_Int("ID", OI[id][oID]);
INI_String("Ime", OI[id][oName], ORG_IME);
INI_String("PreFix", OI[id][oPreFix], 10);
INI_String("Color", OI[id][oColor], 24);

INI_Int("Tip", OI[id][oTip]);
INI_Int("Suspended", OI[id][oSuspended]);
INI_Int("MaxClanova", OI[id][oMaxClanova]);
INI_Int("UbacenihClanova", OI[id][oUbacenihClanova]);

INI_Int("Skin1", OI[id][oSkin1]);
INI_Int("Skin2", OI[id][oSkin2]);
INI_Int("Skin3", OI[id][oSkin3]);
INI_Int("Skin4", OI[id][oSkin4]);
INI_Int("Skin5", OI[id][oSkin5]);
INI_Int("Skin6", OI[id][oSkin6]);

INI_Int("ZSkin1", OI[id][oZSkin1]);
INI_Int("ZSkin2", OI[id][oZSkin2]);
INI_Int("ZSkin3", OI[id][oZSkin3]);
INI_Int("ZSkin4", OI[id][oZSkin4]);
INI_Int("ZSkin5", OI[id][oZSkin5]);
INI_Int("ZSkin6", OI[id][oZSkin6]);

INI_String("Lider1", OI[id][oLider1], ORG_LIDER);
INI_String("Lider2", OI[id][oLider2], ORG_LIDER);

INI_String("Clan1", OI[id][oClan1], ORG_CLAN);
INI_String("Clan2", OI[id][oClan2], ORG_CLAN);
INI_String("Clan3", OI[id][oClan3], ORG_CLAN);
INI_String("Clan4", OI[id][oClan4], ORG_CLAN);
INI_String("Clan5", OI[id][oClan5], ORG_CLAN);
INI_String("Clan6", OI[id][oClan6], ORG_CLAN);
INI_String("Clan7", OI[id][oClan7], ORG_CLAN);
INI_String("Clan8", OI[id][oClan8], ORG_CLAN);
INI_String("Clan9", OI[id][oClan9], ORG_CLAN);
INI_String("Clan10", OI[id][oClan10], ORG_CLAN);
INI_String("Clan11", OI[id][oClan11], ORG_CLAN);
INI_String("Clan12", OI[id][oClan12], ORG_CLAN);
INI_String("Clan13", OI[id][oClan13], ORG_CLAN);
INI_String("Clan14", OI[id][oClan14], ORG_CLAN);
INI_String("Clan15", OI[id][oClan15], ORG_CLAN);
INI_String("Clan16", OI[id][oClan16], ORG_CLAN);
INI_String("Clan17", OI[id][oClan17], ORG_CLAN);
INI_String("Clan18", OI[id][oClan18], ORG_CLAN);
INI_String("Clan19", OI[id][oClan19], ORG_CLAN);
INI_String("Clan20", OI[id][oClan20], ORG_CLAN);
INI_String("Clan21", OI[id][oClan21], ORG_CLAN);
INI_String("Clan22", OI[id][oClan22], ORG_CLAN);
INI_String("Clan23", OI[id][oClan23], ORG_CLAN);
INI_String("Clan24", OI[id][oClan24], ORG_CLAN);
INI_String("Clan25", OI[id][oClan25], ORG_CLAN);
INI_String("Clan26", OI[id][oClan26], ORG_CLAN);
INI_String("Clan27", OI[id][oClan27], ORG_CLAN);
INI_String("Clan28", OI[id][oClan28], ORG_CLAN);
INI_String("Clan29", OI[id][oClan29], ORG_CLAN);
INI_String("Clan30", OI[id][oClan30], ORG_CLAN);

INI_String("Rank1", OI[id][oRank1], ORG_RANK);
INI_String("Rank2", OI[id][oRank2], ORG_RANK);
INI_String("Rank3", OI[id][oRank3], ORG_RANK);
INI_String("Rank4", OI[id][oRank4], ORG_RANK);
INI_String("Rank5", OI[id][oRank5], ORG_RANK);
INI_String("Rank6", OI[id][oRank6], ORG_RANK);

INI_Float("PozExtX", OI[id][oPozExtX]);
INI_Float("PozExtY", OI[id][oPozExtY]);
INI_Float("PozExtZ", OI[id][oPozExtZ]);

INI_Float("PozIntX", OI[id][oPozIntX]);
INI_Float("PozIntY", OI[id][oPozIntY]);
INI_Float("PozIntZ", OI[id][oPozIntZ]);

INI_Float("DutyPoint1", OI[id][oDutyPoint][0]);
INI_Float("DutyPoint2", OI[id][oDutyPoint][1]);
INI_Float("DutyPoint3", OI[id][oDutyPoint][2]);

INI_Int("DutyInt", OI[id][oDutyInt]);
INI_Int("DutyVW", OI[id][oDutyVW]);

INI_Float("EquipPoint1", OI[id][oEquipPoint][0]);
INI_Float("EquipPoint2", OI[id][oEquipPoint][1]);
INI_Float("EquipPoint3", OI[id][oEquipPoint][2]);

INI_Int("EquipInt", OI[id][oEquipInt]);
INI_Int("EquipVW", OI[id][oEquipVW]);
INI_Int("SprayID", OI[id][oSprayID]);

INI_Int("Savez", OI[id][oSavez]);

INI_Int("MaxPort", OI[id][oMaxPort]);
INI_Int("ControlType", OI[id][oControlType]);
INI_Float("DrugField1", OI[id][oDrugField][0]);
INI_Float("DrugField2", OI[id][oDrugField][1]);
INI_Float("DrugField3", OI[id][oDrugField][2]);
INI_Float("SafePos1", OI[id][oSafePos][0]);
INI_Float("SafePos2", OI[id][oSafePos][1]);
INI_Float("SafePos3", OI[id][oSafePos][2]);

INI_Int("SafeMoney", OI[id][oSafeMoney]);
INI_Int("SafeDrug1", OI[id][oSafeDrug][0]);
INI_Int("SafeDrug2", OI[id][oSafeDrug][1]);
INI_Int("SafeDrug3", OI[id][oSafeDrug][2]);
INI_Int("SafeDrug4", OI[id][oSafeDrug][3]);
INI_Int("SafeDrugCode1", OI[id][oSafeDrugCode][0]);
INI_Int("SafeDrugCode2", OI[id][oSafeDrugCode][1]);
INI_Int("SafeDrugCode3", OI[id][oSafeDrugCode][2]);
INI_Int("SafeDrugCode4", OI[id][oSafeDrugCode][3]);

INI_Int("Int", OI[id][oInt]);
INI_Int("Vw", OI[id][oVw]);

return 1;}
//------------------------------------------------------------------------------
public SlobodnoSada(playerid) {
if(PlayerCP[playerid] == 0)
	TogglePlayerControllable(playerid, true);}
//------------------------------------------------------------------------------
forward MakniPayday(playerid);
public MakniPayday(playerid) {
	PaydayTDControl(playerid, false);}
//------------------------------------------------------------------------------
forward IzlecenOdZavisnosti(playerid);
public IzlecenOdZavisnosti(playerid) {
Fusion_KillTimer(BolnicaTimer[playerid]);

TogglePlayerControllable(playerid, false);
SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
GameTextForPlayer(playerid, "~g~Sacekajte par sekundi...", 2000, 4);
ClearAnimations(playerid);
ac_SetPlayerInterior(playerid, 5);
SetPlayerVirtualWorld(playerid, 5);
ac_SetPlayerPos(playerid, -2325.9255,119.0592,-5.3942);
SetPlayerFacingAngle(playerid, 180.3581);
SetCameraBehindPlayer(playerid);

VremeTDControl(playerid, false);

SendClientMessage(playerid, -1, ""col_green"[DOKTOR]: {FFFFFF]Izlecili smo vasu zavisnost. Prijatan dan.");
return 1;}
//------------------------------------------------------------------------------
forward PustenIzBolnice(playerid);
public PustenIzBolnice(playerid) {
Fusion_KillTimer(BolnicaTimer[playerid]);
if(PlayerInfo[playerid][xUbijen] == 1) {
	PlayerInfo[playerid][xUbijen] = 0;
	TogglePlayerControllable(playerid, false);
	SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
	GameTextForPlayer(playerid, "~g~Sacekajte par sekundi...", 2000, 4);
	ClearAnimations(playerid);
	ac_SetPlayerInterior(playerid, 5);
	SetPlayerVirtualWorld(playerid, 5);
	ac_SetPlayerPos(playerid, -2325.9255,119.0592,-5.3942);
	SetPlayerFacingAngle(playerid, 180.3581);
	SetCameraBehindPlayer(playerid);
	SendClientMessage(playerid, -1, ""col_green"[DOKTOR]: {FFFFFF]Izleceni ste, pazite se sledeceg puta. Naplaceno Vam je 3000$.");
	DajIgracuNovac(playerid, -3000);}
return 1;}
//------------------------------------------------------------------------------
public PostaviSpawn(playerid)
{
new OrgID = PlayerInfo[playerid][xClan];
if(IsPlayerConnected(playerid)) {
	if(PlayerInfo[playerid][xUbijen] == 1) {

		TogglePlayerControllable(playerid, false);

		Fusion_SetPlayerHealth(playerid, 80.0);
		ac_SetPlayerInterior(playerid, playerid+1);
		SetPlayerVirtualWorld(playerid, playerid+1);

		ac_SetPlayerPos(playerid, -2291.1831,119.9234,-4.4141);
		SetPlayerFacingAngle(playerid, 270.4962);
		LoopingAnim(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);

		SendClientMessage(playerid, -1, ""col_green"[DOKTOR]: {FFFFFF]Bicete izleceni za 15 sekundi, sacekajte malo...");

		InterpolateCameraPos(playerid, -2287.646484, 123.272109, -3.711278, -2293.113037, 123.070518, -4.156746, 10000, CAMERA_MOVE);
		InterpolateCameraLookAt(playerid, -2291.025146, 119.771987, -4.866029, -2290.749023, 118.772224, -5.124464, 10000, CAMERA_MOVE);

		BolnicaTimer[playerid] = SetTimerEx("PustenIzBolnice", 15000, false, "i", playerid);
	}
	else {

		if(PlayerInfo[playerid][xZatvor] == OBICAN_ZATVOR)
		{
			new rand = random(sizeof(RandomZatvor));
			ac_SetPlayerPos(playerid, RandomZatvor[rand][0], RandomZatvor[rand][1],RandomZatvor[rand][2]);
			SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
			GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
			TogglePlayerControllable(playerid, false);
			SCM(playerid, CRVENA, "Nedovrsena zatvorska kazna, natrag u zatvor.");
			SetCameraBehindPlayer(playerid);
			ac_SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

		}
		else if(PlayerInfo[playerid][xZatvor] == ALKATRAZ)
		{
			ac_SetPlayerPos(playerid, 268.5777, 1857.9351, 9.8133);
			SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
			GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
			TogglePlayerControllable(playerid, false);
			SCM(playerid, CRVENA, "Nedovrsena zatvorska kazna, natrag u ALKATRAZ.");
			SetCameraBehindPlayer(playerid);
			ac_SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 1);
			SetPlayerWorldBounds(playerid, 337.5694, 101.5826, 1940.9759, 1798.7453);

		}
		else {

			if(PlayerInfo[playerid][xSpawn] == SPAWN_ADMIN) {
				if(PlayerInfo[playerid][xAdmin] >= 1) {
					AntiSK(playerid);
					ac_SetPlayerPos(playerid, 2654.2854,665.4189,10.8444);
					SetPlayerFacingAngle(playerid, 85.2555);
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					TogglePlayerControllable(playerid, false);
					SetCameraBehindPlayer(playerid);
					ac_SetPlayerInterior(playerid, 0);
				}
				else {
					new rand = random(sizeof(RandomLSSpawn1));
					AntiSK(playerid);
					ac_SetPlayerPos(playerid, RandomLSSpawn1[rand][0], RandomLSSpawn1[rand][1], RandomLSSpawn1[rand][2]);
					SetPlayerFacingAngle(playerid, 360.000);
					printf("spawnovan");
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					TogglePlayerControllable(playerid, false);
					SetCameraBehindPlayer(playerid);
					ac_SetPlayerInterior(playerid, 0);
					PlayerInfo[playerid][xSpawn] = SPAWN_OBICAN_LS_1;
				}
			}
			else if(PlayerInfo[playerid][xSpawn] == SPAWN_HELPER) {
				if(PlayerInfo[playerid][xHelper] >= 1) {
					AntiSK(playerid);
					ac_SetPlayerPos(playerid, 2481.1704,1525.2040,11.7737);
					SetPlayerFacingAngle(playerid, 309.3450);
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					TogglePlayerControllable(playerid, false);
					SetCameraBehindPlayer(playerid);
					ac_SetPlayerInterior(playerid, 0);
				}
				else {
					new rand = random(sizeof(RandomLSSpawn1));
					AntiSK(playerid);
					ac_SetPlayerPos(playerid, RandomLSSpawn1[rand][0], RandomLSSpawn1[rand][1], RandomLSSpawn1[rand][2]);
					SetPlayerFacingAngle(playerid, 360.000);
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					TogglePlayerControllable(playerid, false);
					SetCameraBehindPlayer(playerid);
					ac_SetPlayerInterior(playerid, 0);
					PlayerInfo[playerid][xSpawn] = SPAWN_OBICAN_LS_1;
				}
			}
			else if(PlayerInfo[playerid][xSpawn] == SPAWN_OBICAN_LS_1) {
				new rand = random(sizeof(RandomLSSpawn1));
				AntiSK(playerid);
				ac_SetPlayerPos(playerid, RandomLSSpawn1[rand][0], RandomLSSpawn1[rand][1],RandomLSSpawn1[rand][2]);
				SetPlayerFacingAngle(playerid, 360.000);
				SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
				GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
				TogglePlayerControllable(playerid, false);
				SetCameraBehindPlayer(playerid);
				ac_SetPlayerInterior(playerid, 0);
			}
			else if(PlayerInfo[playerid][xSpawn] == SPAWN_BAZA) {
				AntiSK(playerid);
				ac_SetPlayerPos(playerid, OI[OrgID][oPozIntX], OI[OrgID][oPozIntY] , OI[OrgID][oPozIntZ]);
				SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
				GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
				TogglePlayerControllable(playerid, false);
				SetCameraBehindPlayer(playerid);
				ac_SetPlayerInterior(playerid, OI[OrgID][oInt]);
				SetPlayerVirtualWorld(playerid, OI[OrgID][oVw]);
				inOrgInt[playerid] = OrgID;
			}
			else if(PlayerInfo[playerid][xSpawn] == SPAWN_IMOVINA_1) {
				if(PlayerInfo[playerid][xProperty][0] != -1) {
					AntiSK(playerid);
					new i = PlayerInfo[playerid][xProperty][0];

					ac_SetPlayerPos(playerid, II[i][iExit][0], II[i][iExit][1], II[i][iExit][2]);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					SetCameraBehindPlayer(playerid);
					TogglePlayerControllable(playerid, false);
					ac_SetPlayerInterior(playerid, II[i][iInterior]);
					SetPlayerVirtualWorld(playerid, II[i][iVW]);
					inProperty[playerid] = i;
				}
				else {
					AntiSK(playerid);
					new rand = random(sizeof(RandomLSSpawn1));
					ac_SetPlayerPos(playerid, RandomLSSpawn1[rand][0], RandomLSSpawn1[rand][1],RandomLSSpawn1[rand][2]);
					SetPlayerFacingAngle(playerid, 360.000);
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					TogglePlayerControllable(playerid, false);
					SetCameraBehindPlayer(playerid);
					ac_SetPlayerInterior(playerid, 0);
					PlayerInfo[playerid][xSpawn] = SPAWN_OBICAN_LS_1;
				}

			}
			else if(PlayerInfo[playerid][xSpawn] == SPAWN_IMOVINA_2) {
				if(PlayerInfo[playerid][xProperty][1] != -1) {
					new i = PlayerInfo[playerid][xProperty][1];
					AntiSK(playerid);
					ac_SetPlayerPos(playerid, II[i][iExit][0], II[i][iExit][1], II[i][iExit][2]);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					SetCameraBehindPlayer(playerid);
					TogglePlayerControllable(playerid, false);
					ac_SetPlayerInterior(playerid, II[i][iInterior]);
					SetPlayerVirtualWorld(playerid, II[i][iVW]);
					inProperty[playerid] = i;
				}
				else {
					AntiSK(playerid);
					new rand = random(sizeof(RandomLSSpawn1));
					ac_SetPlayerPos(playerid, RandomLSSpawn1[rand][0], RandomLSSpawn1[rand][1],RandomLSSpawn1[rand][2]);
					SetPlayerFacingAngle(playerid, 360.000);
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					TogglePlayerControllable(playerid, false);
					SetCameraBehindPlayer(playerid);
					ac_SetPlayerInterior(playerid, 0);
					PlayerInfo[playerid][xSpawn] = SPAWN_OBICAN_LS_1;
				}

			}
			else if(PlayerInfo[playerid][xSpawn] == SPAWN_IMOVINA_3) {
				if(PlayerInfo[playerid][xProperty][2] != -1) {
					new i = PlayerInfo[playerid][xProperty][2];
					AntiSK(playerid);
					ac_SetPlayerPos(playerid, II[i][iExit][0], II[i][iExit][1], II[i][iExit][2]);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					SetCameraBehindPlayer(playerid);
					TogglePlayerControllable(playerid, false);
					ac_SetPlayerInterior(playerid, II[i][iInterior]);
					SetPlayerVirtualWorld(playerid, II[i][iVW]);
					inProperty[playerid] = i;
				}
				else {
					AntiSK(playerid);
					new rand = random(sizeof(RandomLSSpawn1));
					ac_SetPlayerPos(playerid, RandomLSSpawn1[rand][0], RandomLSSpawn1[rand][1],RandomLSSpawn1[rand][2]);
					SetPlayerFacingAngle(playerid, 360.000);
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					TogglePlayerControllable(playerid, false);
					SetCameraBehindPlayer(playerid);
					ac_SetPlayerInterior(playerid, 0);
					PlayerInfo[playerid][xSpawn] = SPAWN_OBICAN_LS_1;
				}

			}
			else if(PlayerInfo[playerid][xSpawn] == SPAWN_BELAKUCA) {
				ac_SetPlayerPos(playerid, 1292.5704, -832.4692, 1085.6328);
				AntiSK(playerid);
				SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
				GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
				TogglePlayerControllable(playerid, false);
				SetCameraBehindPlayer(playerid);
				ac_SetPlayerInterior(playerid, 5);
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if(PlayerInfo[playerid][xSpawn] == SPAWN_OBICAN_LS_2) {
				AntiSK(playerid);
				new rand = random(sizeof(RandomLSSpawn2));
				ac_SetPlayerPos(playerid, RandomLSSpawn2[rand][0], RandomLSSpawn2[rand][1],RandomLSSpawn2[rand][2]);
				SetPlayerFacingAngle(playerid, 360.000);
				SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
				GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
				TogglePlayerControllable(playerid, false);
				SetCameraBehindPlayer(playerid);
				ac_SetPlayerInterior(playerid, 0);
			}
			else if(PlayerInfo[playerid][xSpawn] == SPAWN_OBICAN_SF) {
				AntiSK(playerid);
				new rand = random(sizeof(RandomSFSpawn));
				ac_SetPlayerPos(playerid, RandomSFSpawn[rand][0], RandomSFSpawn[rand][1],RandomSFSpawn[rand][2]);
				SetPlayerFacingAngle(playerid, 360.000);
				SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
				GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
				TogglePlayerControllable(playerid, false);
				SetCameraBehindPlayer(playerid);
				ac_SetPlayerInterior(playerid, 0);
			}
			else if(PlayerInfo[playerid][xSpawn] == SPAWN_RENTHOTEL) {
				if(PlayerInfo[playerid][xHotelRoom] != -1) {
					new i = PlayerInfo[playerid][xHotelRoom];
					AntiSK(playerid);
					if(strcmp(ImeIgraca(playerid), hotelInfo[i][hGuest_1], true) == 0) {
						ac_SetPlayerPos(playerid, 2246.6826, -1160.8252, 1029.7969);
					}
					else if(strcmp(ImeIgraca(playerid), hotelInfo[i][hGuest_2], true) == 0) {
						ac_SetPlayerPos(playerid, 2235.9670, -1158.5640, 1029.7969);
					}
					else if(strcmp(ImeIgraca(playerid), hotelInfo[i][hGuest_3], true) == 0) {
						ac_SetPlayerPos(playerid, 2235.7524, -1169.7406, 1029.8043);
					}
					else if(strcmp(ImeIgraca(playerid), hotelInfo[i][hGuest_4], true) == 0) {
						ac_SetPlayerPos(playerid, 2227.1511, -1182.9784, 1029.8043);
					}
					else if(strcmp(ImeIgraca(playerid), hotelInfo[i][hGuest_5], true) == 0) {
						ac_SetPlayerPos(playerid, 2207.9285, -1194.5630, 1029.7969);
					}
					else if(strcmp(ImeIgraca(playerid), hotelInfo[i][hGuest_6], true) == 0) {
						ac_SetPlayerPos(playerid, 2198.8984, -1174.5468, 1029.8043);
					}
					else if(strcmp(ImeIgraca(playerid), hotelInfo[i][hGuest_7], true) == 0) {
						ac_SetPlayerPos(playerid, 2188.1833, -1155.7197, 1029.7969);
					}
					else if(strcmp(ImeIgraca(playerid), hotelInfo[i][hGuest_8], true) == 0) {
						ac_SetPlayerPos(playerid, 2198.7791, -1158.6515, 1029.7969);
					}
					else if(strcmp(ImeIgraca(playerid), hotelInfo[i][hGuest_9], true) == 0) {
						ac_SetPlayerPos(playerid, 2188.1833, -1155.7197, 1029.7969);
					}
					else if(strcmp(ImeIgraca(playerid), hotelInfo[i][hGuest_10], true) == 0) {
						ac_SetPlayerPos(playerid, 2198.7791, -1158.6515, 1029.7969);
					}
					else {
						PlayerInfo[playerid][xHotelRoom] = -1;
						AntiSK(playerid);
						SCM(playerid, SVETLOPLAVA, "* Iseljeni ste iz hotela!");
						new rand = random(sizeof(RandomLSSpawn1));
						ac_SetPlayerPos(playerid, RandomLSSpawn1[rand][0], RandomLSSpawn1[rand][1],RandomLSSpawn1[rand][2]);
						SetPlayerFacingAngle(playerid, 360.000);
						SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
						GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
						TogglePlayerControllable(playerid, false);
						SetCameraBehindPlayer(playerid);
						ac_SetPlayerInterior(playerid, 0);
						PlayerInfo[playerid][xSpawn] = SPAWN_OBICAN_LS_1;
						return 1;
					}
					AntiSK(playerid);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					SetCameraBehindPlayer(playerid);
					TogglePlayerControllable(playerid, false);
					ac_SetPlayerInterior(playerid, hotelInfo[i][hInterior]);
					SetPlayerVirtualWorld(playerid, hotelInfo[i][hVW]);
					inHotel[playerid] = i;
				}
				else {
					new rand = random(sizeof(RandomLSSpawn1));
					AntiSK(playerid);
					ac_SetPlayerPos(playerid, RandomLSSpawn1[rand][0], RandomLSSpawn1[rand][1], RandomLSSpawn1[rand][2]);
					SetPlayerFacingAngle(playerid, 360.000);
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					TogglePlayerControllable(playerid, false);
					SetCameraBehindPlayer(playerid);
					ac_SetPlayerInterior(playerid, 0);
					PlayerInfo[playerid][xSpawn] = SPAWN_OBICAN_LS_1;
				}

			}
			else if(PlayerInfo[playerid][xSpawn] == SPAWN_PROMOTER) {
				if(PlayerInfo[playerid][xPromoter] >= 1) {
					AntiSK(playerid);
					ac_SetPlayerPos(playerid, 893.6500, -1635.7056, 14.9297);
					SetPlayerFacingAngle(playerid, 360.000);
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					TogglePlayerControllable(playerid, false);
					SetCameraBehindPlayer(playerid);
					ac_SetPlayerInterior(playerid, 0);
				}
				else {
					new rand = random(sizeof(RandomLSSpawn1));
					AntiSK(playerid);
					ac_SetPlayerPos(playerid, RandomLSSpawn1[rand][0], RandomLSSpawn1[rand][1], RandomLSSpawn1[rand][2]);
					SetPlayerFacingAngle(playerid, 360.000);
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					TogglePlayerControllable(playerid, false);
					SetCameraBehindPlayer(playerid);
					ac_SetPlayerInterior(playerid, 0);
					PlayerInfo[playerid][xSpawn] = SPAWN_OBICAN_LS_1;
				}
			}
			else if(PlayerInfo[playerid][xSpawn] == SPAWN_VIP) {
				if(PlayerInfo[playerid][xVIPLevel] >= 1 || PlayerInfo[playerid][xYouTuber] == 1) {
					AntiSK(playerid);
					ac_SetPlayerPos(playerid, -502.9827,321.1388,3.2187);
					SetPlayerFacingAngle(playerid, 116.6439);
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					TogglePlayerControllable(playerid, false);
					SetCameraBehindPlayer(playerid);
					ac_SetPlayerInterior(playerid, 0);
				}
				else {
					new rand = random(sizeof(RandomLSSpawn1));
					AntiSK(playerid);
					ac_SetPlayerPos(playerid, RandomLSSpawn1[rand][0], RandomLSSpawn1[rand][1], RandomLSSpawn1[rand][2]);
					SetPlayerFacingAngle(playerid, 360.000);
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					TogglePlayerControllable(playerid, false);
					SetCameraBehindPlayer(playerid);
					ac_SetPlayerInterior(playerid, 0);
					PlayerInfo[playerid][xSpawn] = SPAWN_OBICAN_LS_1;
				}
			}
			else if(PlayerInfo[playerid][xSpawn] == SPAWN_RENT) {
				if(PlayerInfo[playerid][xRentID] != -1) {
					new i = PlayerInfo[playerid][xRentID];
					AntiSK(playerid);
					ac_SetPlayerPos(playerid, II[i][iExit][0], II[i][iExit][1], II[i][iExit][2]);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					SetCameraBehindPlayer(playerid);
					TogglePlayerControllable(playerid, false);
					ac_SetPlayerInterior(playerid, II[i][iInterior]);
					SetPlayerVirtualWorld(playerid, II[i][iVW]);
					inProperty[playerid] = i;
				}
				else {
					new rand = random(sizeof(RandomLSSpawn1));
					AntiSK(playerid);
					ac_SetPlayerPos(playerid, RandomLSSpawn1[rand][0], RandomLSSpawn1[rand][1], RandomLSSpawn1[rand][2]);
					SetPlayerFacingAngle(playerid, 360.000);
					SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
					GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
					TogglePlayerControllable(playerid, false);
					SetCameraBehindPlayer(playerid);
					ac_SetPlayerInterior(playerid, 0);
					PlayerInfo[playerid][xSpawn] = SPAWN_OBICAN_LS_1;
				}
			}
		}
	}
}
return true;}
//------------------------------------------------------------------------------

forward SaveInventory(playerid);
public SaveInventory(playerid) {
new string[15];
new INI:File = INI_Open(Inventory(playerid));

INI_SetTag(File, "Informacije");

for(new i = 0; i < MAX_INVENTORY; i++) {

	format(string, sizeof(string), "Exist%d", i);
	INI_WriteBool(File, string, inventoryInfo[playerid][i][invExists]);

	format(string, sizeof(string), "Name%d", i);
	INI_WriteString(File, string, inventoryInfo[playerid][i][invItem]);

	format(string, sizeof(string), "Model%d", i);
	INI_WriteInt(File, string, inventoryInfo[playerid][i][invModel]);

	format(string, sizeof(string), "Quantity%d", i);
	INI_WriteInt(File, string, inventoryInfo[playerid][i][invQuantity]);}

INI_Close(File);
return true;}

forward LoadInventory(playerid, name[], value[]);
public LoadInventory(playerid, name[], value[]) {
new string[15];

for(new i = 0; i < MAX_INVENTORY; i++) {

	format(string, sizeof(string), "Exist%d", i);
	INI_Bool(string, inventoryInfo[playerid][i][invExists]);

	format(string, sizeof(string), "Name%d", i);
	INI_String(string, inventoryInfo[playerid][i][invItem], 32);

	format(string, sizeof(string), "Model%d", i);
	INI_Int(string, inventoryInfo[playerid][i][invModel]);

	format(string, sizeof(string), "Quantity%d", i);
	INI_Int(string, inventoryInfo[playerid][i][invQuantity]);

}
return 1;}

forward ProveraInvOruzja(playerid, ID);
public ProveraInvOruzja(playerid, ID) {

if(playerid != IPI) {

	Fusion_KillTimer(ProveriInvOruzje[playerid]);

	if(ID >= 0 && ID < MAX_INVENTORY) {

		for(new i = 0; i < 47; i++) {
			if((WeaponInfos[i][wModel] >= 321 && WeaponInfos[i][wModel] <= 372) && WeaponInfos[i][wModel] == inventoryInfo[playerid][ID][invModel]) {
				OruzjeUInventoriju[playerid]++;
				break;
			}
		}
	}

	if(ID+1 < MAX_INVENTORY) ProveriInvOruzje[playerid] = SetTimerEx("ProveraInvOruzja", 10, false, "dd", playerid, ID+1);}
return 1;}


forward SaveKladionica(playerid);
public SaveKladionica(playerid) {

new string[30];
new INI:File = INI_Open(KladIme(playerid));

INI_SetTag(File, "Informacije");

INI_WriteBool(File, "Uplaceno", KladionicaListic[playerid][Uplaceno]);
INI_WriteBool(File, "Zavrseno", KladionicaListic[playerid][Zavrseno]);
INI_WriteInt(File, "Uplata", KladionicaListic[playerid][Uplata]);
INI_WriteFloat(File, "Dobitak", KladionicaListic[playerid][Dobitak]);
INI_WriteBool(File, "Status", KladionicaListic[playerid][Status]);
INI_WriteString(File, "HourPobeda", KladionicaListic[playerid][HourPobeda]);

for(new i = 0; i < 10; i++) {

	format(string, sizeof(string), "parID%d", i);
	INI_WriteInt(File, string, KladionicaListic[playerid][parID][i]);

	format(string, sizeof(string), "keciksdva%d", i);
	INI_WriteInt(File, string, KladionicaListic[playerid][keciksdva][i]);

	format(string, sizeof(string), "Kvota%d", i);
	INI_WriteFloat(File, string, KladionicaListic[playerid][Kvota][i]);

	format(string, sizeof(string), "teamID1%d", i);
	INI_WriteInt(File, string, KladionicaListic[playerid][teamID1][i]);

	format(string, sizeof(string), "teamID2%d", i);
	INI_WriteInt(File, string, KladionicaListic[playerid][teamID2][i]);

}


INI_Close(File);
return true;}


forward LoadKladionica(playerid, name[], value[]);
public LoadKladionica(playerid, name[], value[]) {

new string[30];

INI_Bool("Uplaceno", KladionicaListic[playerid][Uplaceno]);
INI_Bool("Zavrseno", KladionicaListic[playerid][Zavrseno]);
INI_Int("Uplata", KladionicaListic[playerid][Uplata]);
INI_Float("Dobitak", KladionicaListic[playerid][Dobitak]);
INI_Bool("Status", KladionicaListic[playerid][Status]);
INI_String("HourPobeda", KladionicaListic[playerid][HourPobeda], 24);

for(new i = 0; i < 10; i++) {

	format(string, sizeof(string), "parID%d", i);
	INI_Int(string, KladionicaListic[playerid][parID][i]);

	format(string, sizeof(string), "keciksdva%d", i);
	INI_Int(string, KladionicaListic[playerid][keciksdva][i]);

	format(string, sizeof(string), "Kvota%d", i);
	INI_Float(string, KladionicaListic[playerid][Kvota][i]);

	format(string, sizeof(string), "teamID1%d", i);
	INI_Int(string, KladionicaListic[playerid][teamID1][i]);

	format(string, sizeof(string), "teamID2%d", i);
	INI_Int(string, KladionicaListic[playerid][teamID2][i]);

}
return 1;}

//------------------------------------------------------------------------------
forward RemoveAttachedObject(playerid, slot);
public RemoveAttachedObject(playerid, slot) {
if(IsPlayerConnected(playerid) && IsPlayerAttachedObjectSlotUsed(playerid, slot)) {
	RemovePlayerAttachedObject(playerid, slot);}
return true;}
//------------------------------------------------------------------------------

IsInventoryWeapon(name[]) {

for(new i = 0; i < 47; i++) {

	if(strcmp(WeaponInfos[i][wName], name, true) == 0) { return true; }
}
return false;}

forward OnPlayerUseItem(playerid, itemid, name[]);
public OnPlayerUseItem(playerid, itemid, name[]) {

new varstring[83];
if(!strcmp(name, "Pizza", true)) {

	//DajIgracuGlad(playerid, 9);
	DodajIgracuHP(playerid, 50);

	if(gZone_Time[playerid] != 0) gZone_InvMax1[playerid] += 1;

	else if(!IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) {
		SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 2702, 6, 0.173041, 0.049197, 0.056789, 0.000000, 274.166107, 299.057983, 1.000000, 1.000000, 1.000000);
		SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, OBJECT_SLOT_RHAND);
	}

	Inventory_Remove(playerid, "Pizza");

	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
	format(varstring, sizeof(varstring), "%s jede picu.", ImeIgraca(playerid));
	PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);}
else if(!strcmp(name, "Hamburger", true)) {

	//DajIgracuGlad(playerid, 5);
	DodajIgracuHP(playerid, 35);

	if(gZone_Time[playerid] != 0) gZone_InvMax1[playerid] += 1;

	else if(!IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) {
		SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 2703, 6, 0.078287, 0.019677, -0.001004, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, OBJECT_SLOT_RHAND);
	}

	Inventory_Remove(playerid, "Hamburger");

	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
	format(varstring, sizeof(varstring), "%s jede hamburger.", ImeIgraca(playerid));
	PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);}
else if(!strcmp(name, "Piletina", true)) {

	//DajIgracuGlad(playerid, 20);
	DodajIgracuHP(playerid, 100);

	if(gZone_Time[playerid] != 0) gZone_InvMax1[playerid] += 1;

	Inventory_Remove(playerid, "Piletina");

	ApplyAnimation(playerid, "VENDING", "VEND_Eat_P", 4.1, 0, 0, 0, 0, 0, 1);
	format(varstring, sizeof(varstring), "%s jede piletinu.", ImeIgraca(playerid));
	PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);}
else if(!strcmp(name, "Sok", true)) {
	//DajIgracuGlad(playerid, 1);

	if(gZone_Time[playerid] != 0) gZone_InvMax1[playerid] += 1;

	format(varstring, sizeof(varstring), "* %s pije sok.", ImeIgraca(playerid));
	PorukaRadius(15.0, playerid, varstring, LJUBICASTA);

	Inventory_Remove(playerid, "Sok");

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);}
else if(!strcmp(name, "Pivo", true)) {
	//DajIgracuGlad(playerid, 8);

	if(gZone_Time[playerid] != 0) gZone_InvMax1[playerid] += 1;

	new drunklevel = GetPlayerDrunkLevel(playerid);

	SetPlayerDrunkLevel(playerid, drunklevel + 200);

	if(drunklevel > 2000) {
		GameTextForPlayer(playerid, "~p~Pijani ste", 3500, 1);
	}
	format(varstring, sizeof(varstring), "* %s pije pivo.", ImeIgraca(playerid));
	PorukaRadius(15.0, playerid, varstring, LJUBICASTA);

	Inventory_Remove(playerid, "Pivo");

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);}
else if(!strcmp(name, "Kantica", true)) {
	if(ImaKanticu[playerid] == true) return SendErrorMessage(playerid, "Vec imas kanticu u ruci.");
	if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) return SendErrorMessage(playerid, "Vec imate jedan objekt u desnoj ruci.");

	ImaKanticu[playerid] = true;
	SendJobMessage(playerid, "Uzeli ste kanticu sa gorivom iz inventorija. ");
	SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 1650, 6, 0.145482, 0.035119, 0.040793, 8.881844, 276.183959, 329.795593, 1.561557, 1.177534, 1.265636);

	Inventory_Remove(playerid, "Kantica");}
else if(!strcmp(name, "Maska", true)) {
	SendInfoMessage(playerid, "Koristi /maskon i /maskoff.");}
else if(!strcmp(name, "Srafciger", true)) {

	if(NosiObjekt[playerid][0] == true) return SendErrorMessage(playerid, "Vec imas srafciger u rukama.");
	if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_LHAND)) return SendErrorMessage(playerid, "Vec imas neki objekt u lijevoj ruci!");

	SetPlayerAttachedObject(playerid, OBJECT_SLOT_LHAND, 18644, 5, 0.082183, 0.021501, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	NosiObjekt[playerid][0] = true;
	SCM(playerid, ZUTA, "Uzeo si srafciger.");

	Inventory_Remove(playerid, "Srafciger");}
else if(!strcmp(name, "Pajser", true)) {

	if(NosiObjekt[playerid][1] == true) return SendErrorMessage(playerid, "Vec imas pajser u rukama.");
	if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_LHAND)) return SendErrorMessage(playerid, "Vec imas neki objekt u lijevoj ruci!");

	SetPlayerAttachedObject(playerid, OBJECT_SLOT_LHAND, 18634, 5, 0.083787, 0.042288, 0.124473, 359.138671, 273.522338, 93.422569, 1.000000, 1.000000, 1.000000);
	NosiObjekt[playerid][1] = true;
	SCM(playerid, ZUTA, "Uzeo si pajser.");

	Inventory_Remove(playerid, "Pajser");}
else if(!strcmp(name, "Cekic", true)) {

	if(NosiObjekt[playerid][2] == true) return SendErrorMessage(playerid, "Vec imas cekic u rukama.");
	if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_LHAND)) return SendErrorMessage(playerid, "Vec imas neki objekt u lijevoj ruci!");

	SetPlayerAttachedObject(playerid, OBJECT_SLOT_LHAND, 18635, 5, 0.006891, 0.061260, 0.000000, 171.156280, 0.000000, 350.823333, 1.000000, 1.000000, 1.000000);
	NosiObjekt[playerid][2] = true;
	SCM(playerid, ZUTA, "Uzeo si cekic.");

	Inventory_Remove(playerid, "Cekic");}
else if(!strcmp(name, "Dinamit", true)) {
	if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) return SendErrorMessage(playerid, "Vec imate objekt u desnoj ruci.");
	SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 1654, 6, 0.09, 0.02, -0.00, 0.0, 0.0, 0.0, 1.00, 1.00, 1.00);
	Dinamit[playerid] = true;
	SCM(playerid, ZUTA, "Izvadio si dinamit iz inventorija.");

	Inventory_Remove(playerid, "Dinamit");}
else if(!strcmp(name, "Laptop", true)) {
	if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) return SendErrorMessage(playerid, "Vec imate objekt u desnoj ruci.");
	SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 19893, 6, 0.04, -0.00, -0.13, -109.0, -2.0, -94.0, 1.00, 1.00, 1.00);
	LaptopRuke[playerid] = true;
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1);
	SCM(playerid, ZUTA, "Izvadio si laptop iz inventorija.");

	Inventory_Remove(playerid, "Laptop");}
else {
	new gunid = -1;
	for(new i = 0; i < 47; i++) {
		if(!strcmp(name, WeaponInfos[i][wName], true)) {
			gunid = i;
			break;
		}
	}
	if(gunid != -1) {
		if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete uzeti oruzje, imate zabranu - /disarmtime.");
	   
		new wslot = WeaponInfos[gunid][wSlot];

		new weapon, bullet;

		GetPlayerWeaponData(playerid, wslot, weapon, bullet);

		if(bullet != 0) return SendErrorMessage(playerid, "Vec imas oruzje u tom slotu.");

		GiveWeaponToPlayer(playerid, WeaponInfos[gunid][wID], inventoryInfo[playerid][itemid][invQuantity]);

		//Inventory_Remove(playerid, WeaponInfos[gunid][wName], inventoryInfo[playerid][itemid][invQuantity]);

		Inventory_Remove_2(playerid, itemid, inventoryInfo[playerid][itemid][invQuantity]);

		OruzjeUInventoriju[playerid]--;

		format(varstring, sizeof(varstring), "* %s vadi %s iz inventorija.", ImeIgraca(playerid), WeaponInfos[gunid][wName]);
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);

		SendInfoMessage(playerid, "Uspesno ste izvadili iz inventorija %s.", WeaponInfos[gunid][wName]);
	}
}
return 1;}
//------------------------------------------------------------------------------
forward OpenInventory(playerid);
public OpenInventory(playerid)
{
if(!IsPlayerConnected(playerid))
	return false;

static
	items[MAX_INVENTORY],
	amounts[MAX_INVENTORY];

for(new i = 0; i < 20; i++) {
		if(inventoryInfo[playerid][i][invExists]) {
			items[i] = inventoryInfo[playerid][i][invModel];
			amounts[i] = inventoryInfo[playerid][i][invQuantity];
	}
	else {
		items[i] = -1;
		amounts[i] = -1;
	}
}

return ShowModelESelectionMenu(playerid, "Inventory", 1, items, sizeof(items), 0.0, 0.0, 0.0, 1.0, -1, true, amounts);}
//------------------------------------------------------------------------------
stock Inventory_Add(playerid, item[], model, quantity = 1) {
new
	itemid = Inventory_GetItemID(playerid, item);

if(itemid == -1 || (model >= 321 && model <= 372)) {
	itemid = Inventory_GetFreeID(playerid);

	if(itemid != -1) {
		inventoryInfo[playerid][itemid][invExists] = true;
		inventoryInfo[playerid][itemid][invModel] = model;
		inventoryInfo[playerid][itemid][invQuantity] = quantity;

		strmid(inventoryInfo[playerid][itemid][invItem], item, 0, strlen(item), 32);

		SaveInventory(playerid);
		return itemid;
	}
	return -1;}
else {
	inventoryInfo[playerid][itemid][invQuantity] += quantity;

	SaveInventory(playerid);}
return itemid;}
stock Inventory_GetItemID(playerid, item[])
{
for(new i = 0; i < MAX_INVENTORY; i++) {
	if(!inventoryInfo[playerid][i][invExists])
		continue;

	if(!strcmp(inventoryInfo[playerid][i][invItem], item)) return i;}
return -1;}

stock Inventory_GetFreeID(playerid) {
if(Inventory_Items(playerid) >= 20)
	return -1;

for(new i = 0; i < MAX_INVENTORY; i++) {
	if(!inventoryInfo[playerid][i][invExists])
		return i;}
return -1;}

stock Inventory_Items(playerid) {
new count;

for(new i = 0; i != MAX_INVENTORY; i++) if(inventoryInfo[playerid][i][invExists]) {
	count++;}
return count;}

stock Inventory_Count(playerid, item[]) {
new itemid = Inventory_GetItemID(playerid, item);

if(itemid != -1)
	return inventoryInfo[playerid][itemid][invQuantity];

return false;}

stock Inventory_HasItem(playerid, item[]) {
return (Inventory_GetItemID(playerid, item) != -1);}

stock Inventory_SetQuantity(playerid, item[], quantity) {
new
	itemid = Inventory_GetItemID(playerid, item),
	string[128];

if(itemid != -1) {
	inventoryInfo[playerid][itemid][invQuantity] = quantity;

	SaveInventory(playerid);}
return true;}

stock Inventory_Remove(playerid, item[], quantity = 1) {
new
	itemid = Inventory_GetItemID(playerid, item);

if(itemid != -1) {
	if(inventoryInfo[playerid][itemid][invQuantity] > 0) {
		inventoryInfo[playerid][itemid][invQuantity] -= quantity;
	}
	if(quantity == -1 || inventoryInfo[playerid][itemid][invQuantity] < 1) {
		inventoryInfo[playerid][itemid][invExists] = false;
		inventoryInfo[playerid][itemid][invModel] = 0;
		inventoryInfo[playerid][itemid][invQuantity] = 0;
		strmid(inventoryInfo[playerid][itemid][invItem], "None", 0, strlen("None"), 32);

		SaveInventory(playerid);
	}
	else if(quantity != -1 && inventoryInfo[playerid][itemid][invQuantity] > 0) {

		SaveInventory(playerid);
	}
	return true;}
return false;}

stock Inventory_Remove_2(playerid, itemid, quantity = 1) {

if(itemid != -1) {
	if(inventoryInfo[playerid][itemid][invQuantity] > 0) {
		inventoryInfo[playerid][itemid][invQuantity] -= quantity;
	}
	if(quantity == -1 || inventoryInfo[playerid][itemid][invQuantity] < 1) {
		inventoryInfo[playerid][itemid][invExists] = false;
		inventoryInfo[playerid][itemid][invModel] = 0;
		inventoryInfo[playerid][itemid][invQuantity] = 0;
		strmid(inventoryInfo[playerid][itemid][invItem], "None", 0, strlen("None"), 32);

		SaveInventory(playerid);
	}
	else if(quantity != -1 && inventoryInfo[playerid][itemid][invQuantity] > 0) {

		SaveInventory(playerid);
	}
	return true;}
return false;}

stock Inventory_Clear(playerid) {

for(new i = 0; i < MAX_INVENTORY; i ++) {
	if(inventoryInfo[playerid][i][invExists]) {
		inventoryInfo[playerid][i][invExists] = false;
		inventoryInfo[playerid][i][invModel] = 0;
		inventoryInfo[playerid][i][invQuantity] = 0;
	}
}

SaveInventory(playerid);

}

stock Inventory_Set(playerid, item[], model, amount) {
new itemid = Inventory_GetItemID(playerid, item);

if(itemid == -1 && amount > 0)
	Inventory_Add(playerid, item, model, amount);

else if(amount > 0 && itemid != -1)
	Inventory_SetQuantity(playerid, item, amount);

else if(amount < 1 && itemid != -1)
	Inventory_Remove(playerid, item, -1);

return true;}

//------------------------------------------------------------------------------
ResetujAdmina(playerid) {
AI[playerid][aTBan] = 0;
AI[playerid][aTWarn] = 0;
AI[playerid][aTKick] = 0;
AI[playerid][aTCharge] = 0;
AI[playerid][aTJail] = 0;
AI[playerid][aTUnjail] = 0;
AI[playerid][aTUnwarn] = 0;
AI[playerid][aTUnban] = 0;
AI[playerid][aTPM] = 0;}
//------------------------------------------------------------------------------
public OcitajAdmina(playerid, name[], value[]) {

INI_Int("aTBan", AI[playerid][aTBan]);
INI_Int("aTWarn", AI[playerid][aTWarn]);
INI_Int("aTKick", AI[playerid][aTKick]);
INI_Int("aTCharge", AI[playerid][aTCharge]);
INI_Int("aTJail", AI[playerid][aTJail]);
INI_Int("aTUnjail", AI[playerid][aTUnjail]);
INI_Int("aTUnwarn", AI[playerid][aTUnwarn]);
INI_Int("aTUnban", AI[playerid][aTUnban]);
INI_Int("aTPM", AI[playerid][aTPM]);
return 1;}
//------------------------------------------------------------------------------
public SacuvajAdmina(playerid) {
new INI:File = INI_Open(Admini(playerid));
INI_SetTag(File, "Informacije");
INI_WriteInt(File, "aTBan", AI[playerid][aTBan]);
INI_WriteInt(File, "aTWarn", AI[playerid][aTWarn]);
INI_WriteInt(File, "aTKick", AI[playerid][aTKick]);
INI_WriteInt(File, "aTCharge", AI[playerid][aTCharge]);
INI_WriteInt(File, "aTJail", AI[playerid][aTJail]);
INI_WriteInt(File, "aTUnjail", AI[playerid][aTUnjail]);
INI_WriteInt(File, "aTUnwarn", AI[playerid][aTUnwarn]);
INI_WriteInt(File, "aTUnban", AI[playerid][aTUnban]);
INI_WriteInt(File, "aTPM", AI[playerid][aTPM]);
INI_Close(File);
return true;}
//------------------------------------------------------------------------------
SavePlayer(playerid) {

	new INI:File = INI_Open(Korisnici(playerid));
	INI_SetTag(File, "Informacije");
	INI_WriteString(File, "Lozinka", PlayerInfo[playerid][xLozinka]);
	INI_WriteInt(File, "Pol", PlayerInfo[playerid][xPol]);
	INI_WriteInt(File, "Godine", PlayerInfo[playerid][xGodine]);
	INI_WriteInt(File, "Novac", PlayerInfo[playerid][xNovac]);
	INI_WriteInt(File, "Level", PlayerInfo[playerid][xLevel]);
	INI_WriteInt(File, "Respekt", PlayerInfo[playerid][xRespekt]);
	INI_WriteInt(File, "Poboljsanja", PlayerInfo[playerid][xPoboljsanja]);
	INI_WriteInt(File, "PayDay", PlayerInfo[playerid][xPayDay]);
	INI_WriteInt(File, "Admin", PlayerInfo[playerid][xAdmin]);
	INI_WriteInt(File, "ASlot", PlayerInfo[playerid][xASlot]);
	INI_WriteInt(File, "HSlot", PlayerInfo[playerid][xHSlot]);
	INI_WriteInt(File, "Skin", PlayerInfo[playerid][xSkin]);
	INI_WriteInt(File, "Spawn", PlayerInfo[playerid][xSpawn]);
	INI_WriteInt(File, "Lider", PlayerInfo[playerid][xLider]);
	INI_WriteInt(File, "Clan", PlayerInfo[playerid][xClan]);
	INI_WriteInt(File, "Rank", PlayerInfo[playerid][xRank]);
	INI_WriteInt(File, "VoziloID1", PlayerInfo[playerid][xVoziloID][0]);
	INI_WriteInt(File, "VoziloID2", PlayerInfo[playerid][xVoziloID][1]);
	INI_WriteInt(File, "VoziloID3", PlayerInfo[playerid][xVoziloID][2]);
	INI_WriteInt(File, "VoziloID4", PlayerInfo[playerid][xVoziloID][3]);
	INI_WriteInt(File, "Materijali", PlayerInfo[playerid][xMaterijali]);
	INI_WriteInt(File, "FirmaID", PlayerInfo[playerid][xFirmaID]);
	INI_WriteInt(File, "Posao", PlayerInfo[playerid][xPosao]);
	INI_WriteInt(File, "Ugovor", PlayerInfo[playerid][xUgovor]);
	INI_WriteInt(File, "MehSkill", PlayerInfo[playerid][xMehSkill]);
	INI_WriteInt(File, "MDelovi", PlayerInfo[playerid][xMDelovi]);
	INI_WriteInt(File, "Head", PlayerInfo[playerid][xHead]);
	INI_WriteFloat(File, "HeadPos1", PlayerInfo[playerid][xHeadPos][0]);
	INI_WriteFloat(File, "HeadPos2", PlayerInfo[playerid][xHeadPos][1]);
	INI_WriteFloat(File, "HeadPos3", PlayerInfo[playerid][xHeadPos][2]);
	INI_WriteFloat(File, "HeadPos4", PlayerInfo[playerid][xHeadPos][3]);
	INI_WriteFloat(File, "HeadPos5", PlayerInfo[playerid][xHeadPos][4]);
	INI_WriteFloat(File, "HeadPos6", PlayerInfo[playerid][xHeadPos][5]);
	INI_WriteFloat(File, "HeadPos7", PlayerInfo[playerid][xHeadPos][6]);
	INI_WriteFloat(File, "HeadPos8", PlayerInfo[playerid][xHeadPos][7]);
	INI_WriteFloat(File, "HeadPos9", PlayerInfo[playerid][xHeadPos][8]);
	INI_WriteInt(File, "Face", PlayerInfo[playerid][xFace]);
	INI_WriteFloat(File, "FacePos1", PlayerInfo[playerid][xFacePos][0]);
	INI_WriteFloat(File, "FacePos2", PlayerInfo[playerid][xFacePos][1]);
	INI_WriteFloat(File, "FacePos3", PlayerInfo[playerid][xFacePos][2]);
	INI_WriteFloat(File, "FacePos4", PlayerInfo[playerid][xFacePos][3]);
	INI_WriteFloat(File, "FacePos5", PlayerInfo[playerid][xFacePos][4]);
	INI_WriteFloat(File, "FacePos6", PlayerInfo[playerid][xFacePos][5]);
	INI_WriteFloat(File, "FacePos7", PlayerInfo[playerid][xFacePos][6]);
	INI_WriteFloat(File, "FacePos8", PlayerInfo[playerid][xFacePos][7]);
	INI_WriteFloat(File, "FacePos9", PlayerInfo[playerid][xFacePos][8]);
	INI_WriteInt(File, "SungMask", PlayerInfo[playerid][xSungMask]);
	INI_WriteFloat(File, "SungMaskPos1", PlayerInfo[playerid][xSungMaskPos][0]);
	INI_WriteFloat(File, "SungMaskPos2", PlayerInfo[playerid][xSungMaskPos][1]);
	INI_WriteFloat(File, "SungMaskPos3", PlayerInfo[playerid][xSungMaskPos][2]);
	INI_WriteFloat(File, "SungMaskPos4", PlayerInfo[playerid][xSungMaskPos][3]);
	INI_WriteFloat(File, "SungMaskPos5", PlayerInfo[playerid][xSungMaskPos][4]);
	INI_WriteFloat(File, "SungMaskPos6", PlayerInfo[playerid][xSungMaskPos][5]);
	INI_WriteFloat(File, "SungMaskPos7", PlayerInfo[playerid][xSungMaskPos][6]);
	INI_WriteFloat(File, "SungMaskPos8", PlayerInfo[playerid][xSungMaskPos][7]);
	INI_WriteFloat(File, "SungMaskPos9", PlayerInfo[playerid][xSungMaskPos][8]);
	INI_WriteInt(File, "Cigare", PlayerInfo[playerid][xCigare]);
	INI_WriteInt(File, "Upaljac", PlayerInfo[playerid][xUpaljac]);
	INI_WriteInt(File, "BStil", PlayerInfo[playerid][xBStil]);
	INI_WriteInt(File, "Registrovan", PlayerInfo[playerid][xRegistrovan]);
	INI_WriteFloat(File, "SHealth", PlayerInfo[playerid][xSHealth]);
	INI_WriteInt(File, "BrojTelefona", PlayerInfo[playerid][xBrojTelefona]);
	INI_WriteInt(File, "Vozacka", PlayerInfo[playerid][xVozacka]);
	INI_WriteInt(File, "Motorska", PlayerInfo[playerid][xMotorska]);
	INI_WriteInt(File, "KamionskaC1", PlayerInfo[playerid][xKamionskaC1]);
	INI_WriteInt(File, "KamionskaC2", PlayerInfo[playerid][xKamionskaC2]);
	INI_WriteInt(File, "KamionskaC3", PlayerInfo[playerid][xKamionskaC3]);
	INI_WriteInt(File, "Brodska", PlayerInfo[playerid][xBrodska]);
	INI_WriteInt(File, "Letelica", PlayerInfo[playerid][xLetelica]);
	INI_WriteInt(File, "Ribarska", PlayerInfo[playerid][xRibarska]);
	INI_WriteInt(File, "Osnovna", PlayerInfo[playerid][xOsnovna]);
	INI_WriteInt(File, "Srednja", PlayerInfo[playerid][xSrednja]);
	INI_WriteInt(File, "Fakultet", PlayerInfo[playerid][xFakultet]);
	INI_WriteInt(File, "SkolaLimit", PlayerInfo[playerid][xSkolaLimit]);
	INI_WriteInt(File, "Ubijen", PlayerInfo[playerid][xUbijen]);
	INI_WriteInt(File, "Drug1", PlayerInfo[playerid][xDrug][0]);
	INI_WriteInt(File, "Drug2", PlayerInfo[playerid][xDrug][1]);
	INI_WriteInt(File, "Drug3", PlayerInfo[playerid][xDrug][2]);
	INI_WriteInt(File, "Drug4", PlayerInfo[playerid][xDrug][3]);
	INI_WriteInt(File, "Drug5", PlayerInfo[playerid][xDrug][4]);
	INI_WriteInt(File, "DrugCode1", PlayerInfo[playerid][xDrugCode][0]);
	INI_WriteInt(File, "DrugCode2", PlayerInfo[playerid][xDrugCode][1]);
	INI_WriteInt(File, "DrugCode3", PlayerInfo[playerid][xDrugCode][2]);
	INI_WriteInt(File, "DrugCode4", PlayerInfo[playerid][xDrugCode][3]);
	INI_WriteInt(File, "DrugCode5", PlayerInfo[playerid][xDrugCode][4]);
	INI_WriteInt(File, "Solna", PlayerInfo[playerid][xSolna]);
	INI_WriteInt(File, "Pseudo", PlayerInfo[playerid][xPseudo]);
	INI_WriteInt(File, "SodaB", PlayerInfo[playerid][xSodaB]);
	INI_WriteInt(File, "Crvenif", PlayerInfo[playerid][xCrvenif]);
	INI_WriteInt(File, "LysAcid", PlayerInfo[playerid][xLysAcid]);
	INI_WriteInt(File, "DesVoda", PlayerInfo[playerid][xDesVoda]);
	INI_WriteInt(File, "Marihuana", PlayerInfo[playerid][xMarihuana]);
	INI_WriteInt(File, "Opium", PlayerInfo[playerid][xOpium]);
	INI_WriteInt(File, "Kalcijum", PlayerInfo[playerid][xKalcij]);
	INI_WriteInt(File, "AmonijumHlorid", PlayerInfo[playerid][xAmonijH]);
	INI_WriteInt(File, "Kokain", PlayerInfo[playerid][xKokain]);
	INI_WriteInt(File, "Kokain2", PlayerInfo[playerid][xKokain2]);
	INI_WriteInt(File, "MetilAmin", PlayerInfo[playerid][xMetilAmin]);
	INI_WriteBool(File, "HeroinAddict", PlayerInfo[playerid][xHeroinAddict]);
	INI_WriteInt(File, "HeroinUsed", PlayerInfo[playerid][xHeroinUsed]);
	INI_WriteInt(File, "HeroinIndicator", PlayerInfo[playerid][xHeroinIndicator]);
	INI_WriteBool(File, "CokeCrackAddict", PlayerInfo[playerid][xCokeCrackAddict]);
	INI_WriteInt(File, "CokeCrackUsed", PlayerInfo[playerid][xCokeCrackUsed]);
	INI_WriteInt(File, "CokeCrackIndicator", PlayerInfo[playerid][xCokeCrackIndicator]);
	INI_WriteBool(File, "MethAddict", PlayerInfo[playerid][xMethAddict]);
	INI_WriteInt(File, "MethIndicator", PlayerInfo[playerid][xMethIndicator]);
	INI_WriteInt(File, "MethUsed", PlayerInfo[playerid][xMethUsed]);
	INI_WriteBool(File, "Inekcija", PlayerInfo[playerid][xInekcija]);
	INI_WriteBool(File, "Toolkit", PlayerInfo[playerid][xToolkit]);
	INI_WriteInt(File, "Property1", PlayerInfo[playerid][xProperty][0]);
	INI_WriteInt(File, "Property2", PlayerInfo[playerid][xProperty][1]);
	INI_WriteInt(File, "Property3", PlayerInfo[playerid][xProperty][2]);
	INI_WriteBool(File, "GunLicense", PlayerInfo[playerid][xGunLicense]);
	INI_WriteInt(File, "TelefonBon", PlayerInfo[playerid][xTelefonBon]);
	INI_WriteInt(File, "ModelTelefona", PlayerInfo[playerid][xModelTelefona]);
	INI_WriteInt(File, "Snaga", PlayerInfo[playerid][xSnaga]);
	INI_WriteInt(File, "Zatvor", PlayerInfo[playerid][xZatvor]);
	INI_WriteInt(File, "ZatvorVreme", PlayerInfo[playerid][xZatvorVreme]);
	INI_WriteInt(File, "Wanted", PlayerInfo[playerid][xWanted]);
	INI_WriteInt(File, "Uhapsen", PlayerInfo[playerid][xUhapsen]);
	INI_WriteInt(File, "PDUhapsio", PlayerInfo[playerid][xPDUhapsio]);
	INI_WriteInt(File, "PDStatsTicket", PlayerInfo[playerid][xPDStatsTicket]);
	INI_WriteInt(File, "PDStatsTicketMoney", PlayerInfo[playerid][xPDStatsTicketMoney]);
	INI_WriteInt(File, "TakenWeps", PlayerInfo[playerid][xTakenWeps]);
	INI_WriteInt(File, "TakenDrugs", PlayerInfo[playerid][xTakenDrugs]);
	INI_WriteInt(File, "PocetniTut", PlayerInfo[playerid][xPocetniTut]);
	INI_WriteInt(File, "AKod", PlayerInfo[playerid][xAKod]);
	INI_WriteInt(File, "Sat", PlayerInfo[playerid][xSat]);
	INI_WriteInt(File, "MaskID", PlayerInfo[playerid][xMaskID]);
	INI_WriteInt(File, "BRacun", PlayerInfo[playerid][xBRacun]);
	INI_WriteInt(File, "PreostaloZaOtplatu", PlayerInfo[playerid][xPreostaloZaOtplatu]);
	INI_WriteInt(File, "IznosRate", PlayerInfo[playerid][xIznosRate]);
	INI_WriteInt(File, "IznosKredita", PlayerInfo[playerid][xIznosKredita]);
	INI_WriteInt(File, "OnlineSati", PlayerInfo[playerid][xOnlineSati]);
	INI_WriteInt(File, "Helper", PlayerInfo[playerid][xHelper]);
	INI_WriteInt(File, "HAskq", PlayerInfo[playerid][xHAskq]);
	INI_WriteInt(File, "HDutyTime", PlayerInfo[playerid][xHDutyTime]);
	INI_WriteInt(File, "HDutyTimeMin", PlayerInfo[playerid][xHDutyTimeMin]);
	INI_WriteInt(File, "ADutyTime", PlayerInfo[playerid][xADutyTime]);
	INI_WriteInt(File, "ADutyTimeMin", PlayerInfo[playerid][xADutyTimeMin]);
	INI_WriteInt(File, "Warn", PlayerInfo[playerid][xWarn]);
	INI_WriteInt(File, "Mute", PlayerInfo[playerid][xMute]);
	INI_WriteInt(File, "MuteAd", PlayerInfo[playerid][xMuteAd]);
	INI_WriteInt(File, "Disarm", PlayerInfo[playerid][xDisarm]);
	INI_WriteInt(File, "OffWarn", PlayerInfo[playerid][xOffWarn]);
	INI_WriteInt(File, "OffFine", PlayerInfo[playerid][xOffFine]);
	INI_WriteFloat(File, "Marker1", PlayerInfo[playerid][xMarker][0]);
	INI_WriteFloat(File, "Marker2", PlayerInfo[playerid][xMarker][1]);
	INI_WriteFloat(File, "Marker3", PlayerInfo[playerid][xMarker][2]);
	INI_WriteInt(File, "BrojNews", PlayerInfo[playerid][xBrojNews]);
	INI_WriteInt(File, "OrgUgovor", PlayerInfo[playerid][xOrgUgovor]);
	INI_WriteInt(File, "GpsLevel", PlayerInfo[playerid][xGpsLevel]);
	INI_WriteInt(File, "Helmet", PlayerInfo[playerid][xHelmet]);
	INI_WriteInt(File, "BanDays", PlayerInfo[playerid][xBDays]);
	INI_WriteInt(File, "BanMonths", PlayerInfo[playerid][xBMonths]);
	INI_WriteInt(File, "BanYear", PlayerInfo[playerid][xBYears]);
	INI_WriteInt(File, "GradRank", PlayerInfo[playerid][xGradRank]);
	INI_WriteInt(File, "SkriptaRank", PlayerInfo[playerid][xSkriptaRank]);
	INI_WriteInt(File, "UlazBL", PlayerInfo[playerid][xUlazBL]);
	INI_WriteBool(File, "Boombox", PlayerInfo[playerid][xBoombox]);
	INI_WriteFloat(File, "HelmetPos1", PlayerInfo[playerid][xHelmetPos][0]);
	INI_WriteFloat(File, "HelmetPos2", PlayerInfo[playerid][xHelmetPos][1]);
	INI_WriteFloat(File, "HelmetPos3", PlayerInfo[playerid][xHelmetPos][2]);
	INI_WriteFloat(File, "HelmetPos4", PlayerInfo[playerid][xHelmetPos][3]);
	INI_WriteFloat(File, "HelmetPos5", PlayerInfo[playerid][xHelmetPos][4]);
	INI_WriteFloat(File, "HelmetPos6", PlayerInfo[playerid][xHelmetPos][5]);
	INI_WriteFloat(File, "HelmetPos7", PlayerInfo[playerid][xHelmetPos][6]);
	INI_WriteFloat(File, "HelmetPos8", PlayerInfo[playerid][xHelmetPos][7]);
	INI_WriteFloat(File, "HelmetPos9", PlayerInfo[playerid][xHelmetPos][8]);
	INI_WriteInt(File, "Drzava", PlayerInfo[playerid][xDrzava]);
	INI_WriteString(File, "Email", PlayerInfo[playerid][xEmail]);
	INI_WriteInt(File, "VIPLevel", PlayerInfo[playerid][xVIPLevel]);
	INI_WriteInt(File, "YouTuber", PlayerInfo[playerid][xYouTuber]);
	INI_WriteInt(File, "HitmenCena", PlayerInfo[playerid][xHitmenCena]);
	INI_WriteInt(File, "Objekt1", PlayerInfo[playerid][xObject][0]);
	INI_WriteInt(File, "Objekt2", PlayerInfo[playerid][xObject][1]);
	INI_WriteInt(File, "Objekt3", PlayerInfo[playerid][xObject][2]);
	INI_WriteInt(File, "Objekt4", PlayerInfo[playerid][xObject][3]);
	INI_WriteInt(File, "Objekt5", PlayerInfo[playerid][xObject][4]);
	INI_WriteInt(File, "Objekt6", PlayerInfo[playerid][xObject][5]);
	INI_WriteInt(File, "Objekt7", PlayerInfo[playerid][xObject][6]);
	INI_WriteInt(File, "Objekt8", PlayerInfo[playerid][xObject][7]);
	INI_WriteInt(File, "Objekt9", PlayerInfo[playerid][xObject][8]);
	INI_WriteInt(File, "Objekt10", PlayerInfo[playerid][xObject][9]);
	INI_WriteInt(File, "LesLimit", PlayerInfo[playerid][xLesLimit]);
	INI_WriteString(File, "OffPJail", PlayerInfo[playerid][xOffPJail]);
	INI_WriteString(File, "OffPPrison", PlayerInfo[playerid][xOffPPrison]);
	INI_WriteString(File, "OffPMute", PlayerInfo[playerid][xOffPMute]);
	INI_WriteString(File, "OffPWarn", PlayerInfo[playerid][xOffPWarn]);
	INI_WriteString(File, "OffPFine", PlayerInfo[playerid][xOffPFine]);
	INI_WriteInt(File, "StaffMin", PlayerInfo[playerid][xoffProperty1Check]);
	INI_WriteInt(File, "offProperty1Check", PlayerInfo[playerid][xoffProperty1Check]);
	INI_WriteInt(File, "offProperty2Check", PlayerInfo[playerid][xoffProperty2Check]);
	INI_WriteInt(File, "offProperty3Check", PlayerInfo[playerid][xoffProperty3Check]);
	INI_WriteInt(File, "offVozilo1Check", PlayerInfo[playerid][xoffVozilo1Check]);
	INI_WriteInt(File, "offVozilo2Check", PlayerInfo[playerid][xoffVozilo2Check]);
	INI_WriteInt(File, "offVozilo3Check", PlayerInfo[playerid][xoffVozilo3Check]);
	INI_WriteInt(File, "offFirmaCheck", PlayerInfo[playerid][xoffFirmaCheck]);
	INI_WriteInt(File, "offHotelCheck", PlayerInfo[playerid][xoffHotelCheck]);
	INI_WriteString(File, "LastLogin", PlayerInfo[playerid][xLastLogin]);
	INI_WriteBool(File, "Married", PlayerInfo[playerid][xMarried]);
	INI_WriteString(File, "MarriedTo", PlayerInfo[playerid][xMarriedTo]);
	INI_WriteBool(File, "TogMob", PlayerInfo[playerid][xTogMob]);
	INI_WriteInt(File, "HotelID", PlayerInfo[playerid][xHotelID]);
	INI_WriteInt(File, "HotelRoom", PlayerInfo[playerid][xHotelRoom]);
	INI_WriteInt(File, "Promoter", PlayerInfo[playerid][xPromoter]);
	INI_WriteInt(File, "FieldID", PlayerInfo[playerid][xFieldID]);
	INI_WriteInt(File, "Sljive", PlayerInfo[playerid][xSljive]);
	INI_WriteInt(File, "Kruske", PlayerInfo[playerid][xKruske]);
	INI_WriteInt(File, "Jabuke", PlayerInfo[playerid][xJabuke]);
	INI_WriteInt(File, "Kupus", PlayerInfo[playerid][xKupus]);
	INI_WriteInt(File, "Ruze", PlayerInfo[playerid][xRuze]);
	INI_WriteInt(File, "SemeSljive", PlayerInfo[playerid][xSemeSljive]);
	INI_WriteInt(File, "SemeKruske", PlayerInfo[playerid][xSemeKruske]);
	INI_WriteInt(File, "SemeJabuke", PlayerInfo[playerid][xSemeJabuke]);
	INI_WriteInt(File, "SemeKupusa", PlayerInfo[playerid][xSemeKupusa]);
	INI_WriteInt(File, "SemeRuze", PlayerInfo[playerid][xSemeRuze]);
	INI_WriteInt(File, "LottoNumber", PlayerInfo[playerid][xLottoNumber]);
	INI_WriteInt(File, "LottoMoney", PlayerInfo[playerid][xLottoMoney]);
	INI_WriteInt(File, "DeagleSkill", PlayerInfo[playerid][xDeagleSkill]);
	INI_WriteInt(File, "PistolSkill", PlayerInfo[playerid][xPistolSkill]);
	INI_WriteInt(File, "M4Skill", PlayerInfo[playerid][xM4Skill]);
	INI_WriteInt(File, "AKSkill", PlayerInfo[playerid][xAKSkill]);
	INI_WriteInt(File, "MPSkill", PlayerInfo[playerid][xMPSkill]);
	INI_WriteInt(File, "ShotgunSkill", PlayerInfo[playerid][xShotgunSkill]);
	INI_WriteInt(File, "SawnSkill", PlayerInfo[playerid][xSawnSkill]);
	INI_WriteInt(File, "SniperSkill", PlayerInfo[playerid][xSniperSkill]);
	INI_WriteInt(File, "CombatSkill", PlayerInfo[playerid][xCombatSkill]);
	INI_WriteInt(File, "GarageID", PlayerInfo[playerid][xGarageID]);
	INI_WriteBool(File, "ImaBRacun", PlayerInfo[playerid][xImaBRacun]);
	INI_WriteInt(File, "PlatniRacun", PlayerInfo[playerid][xPlatniRacun]);
	INI_WriteInt(File, "PlataPoen", PlayerInfo[playerid][xPlataPoen]);
	INI_WriteBool(File, "DonatorSlot", PlayerInfo[playerid][xDonatorSlot]);
	INI_WriteInt(File, "PljackaVreme", PlayerInfo[playerid][xPljackaVreme]);
	INI_WriteBool(File, "LeaveJail", PlayerInfo[playerid][xLeaveJail]);
	INI_WriteInt(File, "BailPrice", PlayerInfo[playerid][xBailPrice]);
	INI_WriteInt(File, "HangarTime", PlayerInfo[playerid][xHangarTime]);
	INI_WriteInt(File, "UzoPaket", PlayerInfo[playerid][xUzoPaket]);
	INI_WriteInt(File, "Event1Mesto", PlayerInfo[playerid][xEvent1Mesto]);
	INI_WriteInt(File, "Event2Mesto", PlayerInfo[playerid][xEvent2Mesto]);
	INI_WriteInt(File, "Event3Mesto", PlayerInfo[playerid][xEvent3Mesto]);
	INI_WriteInt(File, "DMEventUbistva", PlayerInfo[playerid][xDMEventUbistva]);
	INI_WriteInt(File, "RentID", PlayerInfo[playerid][xRentID]);
	INI_WriteInt(File, "Zlato", PlayerInfo[playerid][xZlato]);
	INI_WriteInt(File, "RezervniKljucevi", PlayerInfo[playerid][xRezervniKljucevi]);
	INI_WriteInt(File, "RadarBodovi", PlayerInfo[playerid][xRadarBodovi]);
	INI_WriteBool(File, "DBO", PlayerInfo[playerid][xDBO]);
	INI_WriteInt(File, "DBoja", PlayerInfo[playerid][xDBoja]);
	INI_WriteInt(File, "RPPoen", PlayerInfo[playerid][xRPPoen]);
	INI_WriteInt(File, "PodFGpoeni", PlayerInfo[playerid][xPodFGpoeni]);
	INI_WriteInt(File, "FGpoeni", PlayerInfo[playerid][xFGpoeni]);
	INI_WriteInt(File, "Aktivpoeni", PlayerInfo[playerid][xAktivpoeni]);
	INI_WriteInt(File, "VipTime", PlayerInfo[playerid][xVipTime]);
	INI_WriteInt(File, "ZauzimanjeVreme", PlayerInfo[playerid][xZauzimanjeVreme]);
	INI_WriteInt(File, "Poklon", PlayerInfo[playerid][xPoklon]);
	INI_WriteBool(File, "Paketic", PlayerInfo[playerid][xPaketic]);
	INI_WriteString(File, "KljucKapije", PlayerInfo[playerid][xKljucKapije]);
	INI_WriteInt(File, "Svercer", PlayerInfo[playerid][xSvercer]);
	INI_WriteInt(File, "TestAFG", PlayerInfo[playerid][xTestAFG]);
	INI_WriteInt(File, "DonateVip", PlayerInfo[playerid][xDonateVip]);
	INI_WriteInt(File, "WOF", PlayerInfo[playerid][xWOF]);
	INI_WriteInt(File, "Penzija", PlayerInfo[playerid][xPenzija]);
	INI_WriteInt(File, "Ribe", PlayerInfo[playerid][xRiba]);
	INI_WriteInt(File, "RibaKG", PlayerInfo[playerid][xRibaKG]);
	INI_WriteInt(File, "Ranac", PlayerInfo[playerid][xRanac]);
	INI_WriteInt(File, "Kockica", PlayerInfo[playerid][xKockica]);
	INI_WriteInt(File, "SPoruke", PlayerInfo[playerid][xSPoruke]);
	INI_WriteInt(File, "SOglasi", PlayerInfo[playerid][xSOglasi]);
	INI_WriteInt(File, "SVesti", PlayerInfo[playerid][xSVesti]);
	INI_WriteInt(File, "SFChat", PlayerInfo[playerid][xSFChat]);
	INI_WriteInt(File, "STelefon", PlayerInfo[playerid][xSTelefon]);
	INI_WriteInt(File, "SHud", PlayerInfo[playerid][xSHud]);
	INI_WriteInt(File, "Busilica", PlayerInfo[playerid][xBusilica]);
	INI_Close(File);
	return true;}

//------------------------------------------------------------------------------

forward LoadStareParove(name[], value[]);
public LoadStareParove(name[], value[]) {

new string[30];

for(new i = 0; i < 10; i++) {

	format(string, sizeof(string), "par1ID%d", i);
	INI_Int(string, StariParovi[i][parID][0]);

	format(string, sizeof(string), "par2ID%d", i);
	INI_Int(string, StariParovi[i][parID][1]);

	format(string, sizeof(string), "Rezultat1%d", i);
	INI_Int(string, StariParovi[i][Rezultat][0]);

	format(string, sizeof(string), "Rezultat2%d", i);
	INI_Int(string, StariParovi[i][Rezultat][1]);

	format(string, sizeof(string), "Kvota%d", i);
	INI_Float(string, StariParovi[i][Kvota]);

	format(string, sizeof(string), "HourPobeda%d", i);
	INI_String(string, StariParovi[i][HourPobeda], 24);

}

return 1;}

forward SaveStareParove();
public SaveStareParove() {

new string[30];

new INI:File = INI_Open("Ostalo/StariParovi.ini");

INI_SetTag(File, "Informacije");

for(new i = 0; i < 10; i++) {

	format(string, sizeof(string), "par1ID%d", i);
	INI_WriteInt(File, string, StariParovi[i][parID][0]);

	format(string, sizeof(string), "par2ID%d", i);
	INI_WriteInt(File, string, StariParovi[i][parID][1]);

	format(string, sizeof(string), "Rezultat1%d", i);
	INI_WriteInt(File, string, StariParovi[i][Rezultat][0]);

	format(string, sizeof(string), "Rezultat2%d", i);
	INI_WriteInt(File, string, StariParovi[i][Rezultat][1]);

	format(string, sizeof(string), "Kvota%d", i);
	INI_WriteFloat(File, string, StariParovi[i][Kvota]);

	format(string, sizeof(string), "HourPobeda%d", i);
	INI_WriteString(File, string, StariParovi[i][HourPobeda]);

}

INI_Close(File);
return true;}



forward LoadServerStats(name[], value[]);
public LoadServerStats(name[], value[]) {
INI_Int("RegistrovanihKorisnika", ServerInfo[RegistrovanihKorisnika]);
INI_Int("BanovanihKorisnika", ServerInfo[BanovanihKorisnika]);
INI_Int("KikovanihKorisnika", ServerInfo[KikovanihKorisnika]);
INI_Int("BrojWarnova", ServerInfo[BrojWarnova]);
INI_Int("BrojPosetaServeru", ServerInfo[BrojPosetaServeru]);
INI_Int("HappyJob", ServerInfo[HappyJob]);
INI_Bool("HappyHours", ServerInfo[HappyHours]);
INI_Bool("HappyHoursx3", ServerInfo[HappyHoursx3]);
INI_Int("PocetniLevel", ServerInfo[PocetniLevel]);
INI_Int("PocetniNovaca", ServerInfo[PocetniNovaca]);
INI_Bool("KupovinaVozila", ServerInfo[KupovinaVozila]);
INI_Bool("Report", ServerInfo[Report]);
INI_Bool("Pitanja", ServerInfo[Pitanja]);
INI_Bool("Update", ServerInfo[Update]);
INI_Int("RekordServera", ServerInfo[RekordServera]);
INI_Bool("Oglasi", ServerInfo[Oglasi]);
INI_Bool("Registracija", ServerInfo[Registracija]);
INI_Int("Drva", ServerInfo[Drva]);
INI_Int("NovacBanka", ServerInfo[NovacBanka]);
INI_Int("ReactTime", ServerInfo[ReactTime]);
INI_String("ReactName", ServerInfo[ReactName], MAX_PLAYER_NAME);
INI_Int("Zlato", ServerInfo[Zlato]);
INI_Int("Namestaj", ServerInfo[Namestaj]);
return 1;}

forward SaveServerStats();
public SaveServerStats() {

new INI:File = INI_Open("Ostalo/serverstats.ini");
INI_SetTag(File, "Informacije");
INI_WriteInt(File, "RegistrovanihKorisnika", ServerInfo[RegistrovanihKorisnika]);
INI_WriteInt(File, "BanovanihKorisnika", ServerInfo[BanovanihKorisnika]);
INI_WriteInt(File, "KikovanihKorisnika", ServerInfo[KikovanihKorisnika]);
INI_WriteInt(File, "BrojWarnova", ServerInfo[BrojWarnova]);
INI_WriteInt(File, "BrojPosetaServeru", ServerInfo[BrojPosetaServeru]);
INI_WriteInt(File, "HappyJob", ServerInfo[HappyJob]);
INI_WriteBool(File, "HappyHours", ServerInfo[HappyHours]);
INI_WriteBool(File, "HappyHoursx3", ServerInfo[HappyHoursx3]);
INI_WriteInt(File, "PocetniLevel", ServerInfo[PocetniLevel]);
INI_WriteInt(File, "PocetniNovaca", ServerInfo[PocetniNovaca]);
INI_WriteBool(File, "KupovinaVozila", ServerInfo[KupovinaVozila]);
INI_WriteBool(File, "Report", ServerInfo[Report]);
INI_WriteBool(File, "Pitanja", ServerInfo[Pitanja]);
INI_WriteBool(File, "Update", ServerInfo[Update]);
INI_WriteInt(File, "RekordServera", ServerInfo[RekordServera]);
INI_WriteBool(File, "Oglasi", ServerInfo[Oglasi]);
INI_WriteBool(File, "Registracija", ServerInfo[Registracija]);
INI_WriteInt(File, "Drva", ServerInfo[Drva]);
INI_WriteInt(File, "NovacBanka", ServerInfo[NovacBanka]);
INI_WriteInt(File, "ReactTime", ServerInfo[ReactTime]);
INI_WriteString(File, "ReactName", ServerInfo[ReactName]);
INI_WriteInt(File, "Zlato", ServerInfo[Zlato]);
INI_WriteInt(File, "Namestaj", ServerInfo[Namestaj]);
INI_Close(File);
return true;}

//------------------------------------------------------------------------------
public LoadAntiCheat(name[], value[]) {
INI_Int("WeaponHRezimRada", antiCheatSS[WeaponHRezimRada]);
INI_Int("TeleportHRezimRada", antiCheatSS[TeleportHRezimRada]);
INI_Int("HealthHRezimRada", antiCheatSS[HealthHRezimRada]);
INI_Int("SpeedHRezimRada", antiCheatSS[SpeedHRezimRada]);
INI_Int("JetPackHRezimRada", antiCheatSS[JetPackHRezimRada]);
INI_Int("MoneyHRezimRada", antiCheatSS[MoneyHRezimRada]);
INI_Int("FlyHRezimRada", antiCheatSS[FlyHRezimRada]);
INI_Int("TuningHRezimRada", antiCheatSS[TuningHRezimRada]);
INI_Int("VehRepRezimRada", antiCheatSS[VehRepRezimRada]);
INI_Bool("antiWeaponH", antiCheatSS[antiWeaponH]);
INI_Bool("antiTeleportH", antiCheatSS[antiTeleportH]);
INI_Bool("antiHealthH", antiCheatSS[antiHealthH]);
INI_Bool("antiArmourH", antiCheatSS[antiArmourH]);
INI_Bool("antiSpeedH", antiCheatSS[antiSpeedH]);
INI_Bool("antiJetPackH", antiCheatSS[antiJetPackH]);
INI_Bool("antiMoneyH", antiCheatSS[antiMoneyH]);
INI_Bool("antiflyH", antiCheatSS[antiflyH]);
INI_Bool("antiTuningH", antiCheatSS[antiTuningH]);
INI_Bool("antiVehRepair", antiCheatSS[antiVehRepair]);
return 1;}
public SaveAntiCheat() {
new INI:File = INI_Open("Ostalo/anticheat.ini");
INI_SetTag(File, "Informacije");
INI_WriteInt(File, "WeaponHRezimRada", antiCheatSS[WeaponHRezimRada]);
INI_WriteInt(File, "TeleportHRezimRada", antiCheatSS[TeleportHRezimRada]);
INI_WriteInt(File, "HealthHRezimRada", antiCheatSS[HealthHRezimRada]);
INI_WriteInt(File, "SpeedHRezimRada", antiCheatSS[SpeedHRezimRada]);
INI_WriteInt(File, "JetPackHRezimRada", antiCheatSS[JetPackHRezimRada]);
INI_WriteInt(File, "MoneyHRezimRada", antiCheatSS[MoneyHRezimRada]);
INI_WriteInt(File, "FlyHRezimRada", antiCheatSS[FlyHRezimRada]);
INI_WriteInt(File, "TuningHRezimRada", antiCheatSS[TuningHRezimRada]);
INI_WriteInt(File, "VehRepRezimRada", antiCheatSS[VehRepRezimRada]);
INI_WriteBool(File, "antiWeaponH", antiCheatSS[antiWeaponH]);
INI_WriteBool(File, "antiTeleportH", antiCheatSS[antiTeleportH]);
INI_WriteBool(File, "antiHealthH", antiCheatSS[antiHealthH]);
INI_WriteBool(File, "antiArmourH", antiCheatSS[antiArmourH]);
INI_WriteBool(File, "antiSpeedH", antiCheatSS[antiSpeedH]);
INI_WriteBool(File, "antiJetPackH", antiCheatSS[antiJetPackH]);
INI_WriteBool(File, "antiMoneyH", antiCheatSS[antiMoneyH]);
INI_WriteBool(File, "antiflyH", antiCheatSS[antiflyH]);
INI_WriteBool(File, "antiTuningH", antiCheatSS[antiTuningH]);
INI_WriteBool(File, "antiVehRepair", antiCheatSS[antiVehRepair]);
INI_Close(File);
return true;}
//------------------------------------------------------------------------------
forward ShowOffStats(name[], value[]);
public ShowOffStats(name[], value[]) {
INI_Int("Godine", OfflineCheck[Godine]);
INI_Int("Pol", OfflineCheck[Pol]);
INI_Int("Novac", OfflineCheck[Novac]);
INI_Int("Level", OfflineCheck[Level]);
INI_Int("Respekt", OfflineCheck[Respekt]);
INI_Int("Clan", OfflineCheck[Organizacija]);
INI_Int("Rank", OfflineCheck[Rank]);
INI_Int("VoziloID1", OfflineCheck[Vozilo1]);
INI_Int("VoziloID2", OfflineCheck[Vozilo2]);
INI_Int("VoziloID3", OfflineCheck[Vozilo3]);
INI_Int("VoziloID4", OfflineCheck[Vozilo4]);
INI_Int("Posao", OfflineCheck[Posao]);
INI_Int("Ugovor", OfflineCheck[Posaougovor]);
INI_Int("OnlineSati", OfflineCheck[OnlineSati]);
	INI_Int("BRacun", OfflineCheck[Banka]);
	INI_Int("Property1", OfflineCheck[Imovina1]);
	INI_Int("Property2", OfflineCheck[Imovina2]);
	INI_Int("Property3", OfflineCheck[Imovina3]);
	INI_Int("Warn", OfflineCheck[Upozorenja]);
	INI_Int("FirmaID", OfflineCheck[Firma]);
	INI_Int("StaffMin", OfflineCheck[StaffMin]);
	INI_String("LastLogin", OfflineCheck[LastLogin], 64);
	INI_Int("Admin", OfflineCheck[Admin]);
	INI_Int("HotelID", OfflineCheck[Hotel]);
	INI_String("Email", OfflineCheck[eMail], 34);
return 1;}
public OcitajKorisnika(playerid, name[], value[]) {

INI_String("Lozinka", PlayerInfo[playerid][xLozinka], LOZINKA_STRING);
INI_Int("Pol", PlayerInfo[playerid][xPol]);
INI_Int("Godine", PlayerInfo[playerid][xGodine]);
INI_Int("Novac", PlayerInfo[playerid][xNovac]);
INI_Int("Level", PlayerInfo[playerid][xLevel]);
SetPlayerScore(playerid, PlayerInfo[playerid][xLevel]);

INI_Int("Respekt", PlayerInfo[playerid][xRespekt]);
INI_Int("Poboljsanja", PlayerInfo[playerid][xPoboljsanja]);
INI_Int("PayDay", PlayerInfo[playerid][xPayDay]);
INI_Int("Admin", PlayerInfo[playerid][xAdmin]);
INI_Int("ASlot", PlayerInfo[playerid][xASlot]);
INI_Int("HSlot", PlayerInfo[playerid][xHSlot]);
INI_Int("Skin", PlayerInfo[playerid][xSkin]);
INI_Int("Spawn", PlayerInfo[playerid][xSpawn]);
INI_Int("Lider", PlayerInfo[playerid][xLider]);
INI_Int("Clan", PlayerInfo[playerid][xClan]);
INI_Int("Rank", PlayerInfo[playerid][xRank]);
INI_Int("VoziloID1", PlayerInfo[playerid][xVoziloID][0]);
INI_Int("VoziloID2", PlayerInfo[playerid][xVoziloID][1]);
INI_Int("VoziloID3", PlayerInfo[playerid][xVoziloID][2]);
INI_Int("VoziloID4", PlayerInfo[playerid][xVoziloID][3]);
INI_Int("Materijali", PlayerInfo[playerid][xMaterijali]);
INI_Int("FirmaID", PlayerInfo[playerid][xFirmaID]);
INI_Int("Posao", PlayerInfo[playerid][xPosao]);
INI_Int("Ugovor", PlayerInfo[playerid][xUgovor]);
INI_Int("MehSkill", PlayerInfo[playerid][xMehSkill]);
INI_Int("MDelovi", PlayerInfo[playerid][xMDelovi]);
INI_Int("Head", PlayerInfo[playerid][xHead]);
INI_Float("HeadPos1", PlayerInfo[playerid][xHeadPos][0]);
INI_Float("HeadPos2", PlayerInfo[playerid][xHeadPos][1]);
INI_Float("HeadPos3", PlayerInfo[playerid][xHeadPos][2]);
INI_Float("HeadPos4", PlayerInfo[playerid][xHeadPos][3]);
INI_Float("HeadPos5", PlayerInfo[playerid][xHeadPos][4]);
INI_Float("HeadPos6", PlayerInfo[playerid][xHeadPos][5]);
INI_Float("HeadPos7", PlayerInfo[playerid][xHeadPos][6]);
INI_Float("HeadPos8", PlayerInfo[playerid][xHeadPos][7]);
INI_Float("HeadPos9", PlayerInfo[playerid][xHeadPos][8]);
INI_Int("Face", PlayerInfo[playerid][xFace]);
INI_Float("FacePos1", PlayerInfo[playerid][xFacePos][0]);
INI_Float("FacePos2", PlayerInfo[playerid][xFacePos][1]);
INI_Float("FacePos3", PlayerInfo[playerid][xFacePos][2]);
INI_Float("FacePos4", PlayerInfo[playerid][xFacePos][3]);
INI_Float("FacePos5", PlayerInfo[playerid][xFacePos][4]);
INI_Float("FacePos6", PlayerInfo[playerid][xFacePos][5]);
INI_Float("FacePos7", PlayerInfo[playerid][xFacePos][6]);
INI_Float("FacePos8", PlayerInfo[playerid][xFacePos][7]);
INI_Float("FacePos9", PlayerInfo[playerid][xFacePos][8]);
INI_Int("SungMask", PlayerInfo[playerid][xSungMask]);
INI_Float("SungMaskPos1", PlayerInfo[playerid][xSungMaskPos][0]);
INI_Float("SungMaskPos2", PlayerInfo[playerid][xSungMaskPos][1]);
INI_Float("SungMaskPos3", PlayerInfo[playerid][xSungMaskPos][2]);
INI_Float("SungMaskPos4", PlayerInfo[playerid][xSungMaskPos][3]);
INI_Float("SungMaskPos5", PlayerInfo[playerid][xSungMaskPos][4]);
INI_Float("SungMaskPos6", PlayerInfo[playerid][xSungMaskPos][5]);
INI_Float("SungMaskPos7", PlayerInfo[playerid][xSungMaskPos][6]);
INI_Float("SungMaskPos8", PlayerInfo[playerid][xSungMaskPos][7]);
INI_Float("SungMaskPos9", PlayerInfo[playerid][xSungMaskPos][8]);
INI_Int("Cigare", PlayerInfo[playerid][xCigare]);
INI_Int("Upaljac", PlayerInfo[playerid][xUpaljac]);
INI_Int("BStil", PlayerInfo[playerid][xBStil]);
INI_Int("Registrovan", PlayerInfo[playerid][xRegistrovan]);
INI_Float("SHealth", PlayerInfo[playerid][xSHealth]);
INI_Int("BrojTelefona", PlayerInfo[playerid][xBrojTelefona]);
INI_Int("Vozacka", PlayerInfo[playerid][xVozacka]);
INI_Int("Motorska", PlayerInfo[playerid][xMotorska]);
INI_Int("KamionskaC1", PlayerInfo[playerid][xKamionskaC1]);
INI_Int("KamionskaC2", PlayerInfo[playerid][xKamionskaC2]);
INI_Int("KamionskaC3", PlayerInfo[playerid][xKamionskaC3]);
INI_Int("Brodska", PlayerInfo[playerid][xBrodska]);
INI_Int("Letelica", PlayerInfo[playerid][xLetelica]);
INI_Int("Ribarska", PlayerInfo[playerid][xRibarska]);
INI_Int("Osnovna", PlayerInfo[playerid][xOsnovna]);
INI_Int("Srednja", PlayerInfo[playerid][xSrednja]);
INI_Int("Fakultet", PlayerInfo[playerid][xFakultet]);
INI_Int("SkolaLimit", PlayerInfo[playerid][xSkolaLimit]);
INI_Int("Ubijen", PlayerInfo[playerid][xUbijen]);
INI_Int("Drug1", PlayerInfo[playerid][xDrug][0]);
INI_Int("Drug2", PlayerInfo[playerid][xDrug][1]);
INI_Int("Drug3", PlayerInfo[playerid][xDrug][2]);
INI_Int("Drug4", PlayerInfo[playerid][xDrug][3]);
INI_Int("Drug5", PlayerInfo[playerid][xDrug][4]);
INI_Int("DrugCode1", PlayerInfo[playerid][xDrugCode][0]);
INI_Int("DrugCode2", PlayerInfo[playerid][xDrugCode][1]);
INI_Int("DrugCode3", PlayerInfo[playerid][xDrugCode][2]);
INI_Int("DrugCode4", PlayerInfo[playerid][xDrugCode][3]);
INI_Int("DrugCode5", PlayerInfo[playerid][xDrugCode][4]);
INI_Int("Solna", PlayerInfo[playerid][xSolna]);
INI_Int("Pseudo", PlayerInfo[playerid][xPseudo]);
INI_Int("SodaB", PlayerInfo[playerid][xSodaB]);
INI_Int("Crvenif", PlayerInfo[playerid][xCrvenif]);
INI_Int("LysAcid", PlayerInfo[playerid][xLysAcid]);
INI_Int("DesVoda", PlayerInfo[playerid][xDesVoda]);
INI_Int("Marihuana", PlayerInfo[playerid][xMarihuana]);
INI_Int("Opium", PlayerInfo[playerid][xOpium]);
INI_Int("Kalcijum", PlayerInfo[playerid][xKalcij]);
INI_Int("AmonijumHlorid", PlayerInfo[playerid][xAmonijH]);
INI_Int("Kokain", PlayerInfo[playerid][xKokain]);
INI_Int("Kokain2", PlayerInfo[playerid][xKokain2]);
INI_Int("MetilAmin", PlayerInfo[playerid][xMetilAmin]);
INI_Bool("HeroinAddict", PlayerInfo[playerid][xHeroinAddict]);
INI_Int("HeroinUsed", PlayerInfo[playerid][xHeroinUsed]);
INI_Int("HeroinIndicator", PlayerInfo[playerid][xHeroinIndicator]);
INI_Bool("CokeCrackAddict", PlayerInfo[playerid][xCokeCrackAddict]);
INI_Int("CokeCrackUsed", PlayerInfo[playerid][xCokeCrackUsed]);
INI_Int("CokeCrackIndicator", PlayerInfo[playerid][xCokeCrackIndicator]);
INI_Bool("MethAddict", PlayerInfo[playerid][xMethAddict]);
INI_Int("MethIndicator", PlayerInfo[playerid][xMethIndicator]);
	INI_Int("MethUsed", PlayerInfo[playerid][xMethUsed]);
	INI_Bool("Inekcija", PlayerInfo[playerid][xInekcija]);
	INI_Bool("Toolkit", PlayerInfo[playerid][xToolkit]);
	INI_Int("Property1", PlayerInfo[playerid][xProperty][0]);
	INI_Int("Property2", PlayerInfo[playerid][xProperty][1]);
	INI_Int("Property3", PlayerInfo[playerid][xProperty][2]);
	INI_Bool("GunLicense", PlayerInfo[playerid][xGunLicense]);
	INI_Int("TelefonBon", PlayerInfo[playerid][xTelefonBon]);
	INI_Int("ModelTelefona", PlayerInfo[playerid][xModelTelefona]);
	INI_Int("Snaga", PlayerInfo[playerid][xSnaga]);
	INI_Int("Zatvor", PlayerInfo[playerid][xZatvor]);
	INI_Int("ZatvorVreme", PlayerInfo[playerid][xZatvorVreme]);
	INI_Int("Wanted", PlayerInfo[playerid][xWanted]);
	INI_Int("Uhapsen", PlayerInfo[playerid][xUhapsen]);
	INI_Int("PDUhapsio", PlayerInfo[playerid][xPDUhapsio]);
	INI_Int("PDStatsTicket", PlayerInfo[playerid][xPDStatsTicket]);
INI_Int("PDStatsTicketMoney", PlayerInfo[playerid][xPDStatsTicketMoney]);
INI_Int("TakenWeps", PlayerInfo[playerid][xTakenWeps]);
	INI_Int("TakenDrugs", PlayerInfo[playerid][xTakenDrugs]);
	INI_Int("PocetniTut", PlayerInfo[playerid][xPocetniTut]);
	INI_Int("AKod", PlayerInfo[playerid][xAKod]);
	INI_Int("Sat", PlayerInfo[playerid][xSat]);
	INI_Int("MaskID", PlayerInfo[playerid][xMaskID]);
	INI_Int("BRacun", PlayerInfo[playerid][xBRacun]);
	INI_Int("PreostaloZaOtplatu", PlayerInfo[playerid][xPreostaloZaOtplatu]);
	INI_Int("IznosRate", PlayerInfo[playerid][xIznosRate]);
	INI_Int("IznosKredita", PlayerInfo[playerid][xIznosKredita]);
	INI_Int("OnlineSati", PlayerInfo[playerid][xOnlineSati]);
	INI_Int("Helper", PlayerInfo[playerid][xHelper]);
	INI_Int("HAskq", PlayerInfo[playerid][xHAskq]);
	INI_Int("HDutyTime", PlayerInfo[playerid][xHDutyTime]);
	INI_Int("HDutyTimeMin", PlayerInfo[playerid][xHDutyTimeMin]);
	INI_Int("ADutyTime", PlayerInfo[playerid][xADutyTime]);
	INI_Int("ADutyTimeMin", PlayerInfo[playerid][xADutyTimeMin]);
	INI_Int("Warn", PlayerInfo[playerid][xWarn]);
	INI_Int("Mute", PlayerInfo[playerid][xMute]);
	INI_Int("MuteAd", PlayerInfo[playerid][xMuteAd]);
	INI_Int("Disarm", PlayerInfo[playerid][xDisarm]);
	INI_Int("OffWarn", PlayerInfo[playerid][xOffWarn]);
	INI_Int("OffFine", PlayerInfo[playerid][xOffFine]);
	INI_Float("Marker1", PlayerInfo[playerid][xMarker][0]);
	INI_Float("Marker2", PlayerInfo[playerid][xMarker][1]);
	INI_Float("Marker3", PlayerInfo[playerid][xMarker][2]);
	INI_Int("BrojNews", PlayerInfo[playerid][xBrojNews]);
	INI_Int("OrgUgovor", PlayerInfo[playerid][xOrgUgovor]);
INI_Int("GpsLevel", PlayerInfo[playerid][xGpsLevel]);
INI_Int("Helmet", PlayerInfo[playerid][xHelmet]);
INI_Int("BanDays", PlayerInfo[playerid][xBDays]);
INI_Int("BanMonths", PlayerInfo[playerid][xBMonths]);
INI_Int("BanYear", PlayerInfo[playerid][xBYears]);
INI_Int("GradRank", PlayerInfo[playerid][xGradRank]);
INI_Int("SkriptaRank", PlayerInfo[playerid][xSkriptaRank]);
INI_Int("UlazBL", PlayerInfo[playerid][xUlazBL]);
INI_Bool("Boombox", PlayerInfo[playerid][xBoombox]);
INI_Float("HelmetPos1", PlayerInfo[playerid][xHelmetPos][0]);
INI_Float("HelmetPos2", PlayerInfo[playerid][xHelmetPos][1]);
INI_Float("HelmetPos3", PlayerInfo[playerid][xHelmetPos][2]);
INI_Float("HelmetPos4", PlayerInfo[playerid][xHelmetPos][3]);
INI_Float("HelmetPos5", PlayerInfo[playerid][xHelmetPos][4]);
INI_Float("HelmetPos6", PlayerInfo[playerid][xHelmetPos][5]);
INI_Float("HelmetPos7", PlayerInfo[playerid][xHelmetPos][6]);
INI_Float("HelmetPos8", PlayerInfo[playerid][xHelmetPos][7]);
INI_Float("HelmetPos9", PlayerInfo[playerid][xHelmetPos][8]);
INI_Int("Drzava", PlayerInfo[playerid][xDrzava]);
INI_String("Email", PlayerInfo[playerid][xEmail], 34);
INI_Int("VIPLevel", PlayerInfo[playerid][xVIPLevel]);
INI_Int("YouTuber", PlayerInfo[playerid][xYouTuber]);
INI_Int("HitmenCena", PlayerInfo[playerid][xHitmenCena]);
INI_Int("Objekt1", PlayerInfo[playerid][xObject][0]);
INI_Int("Objekt2", PlayerInfo[playerid][xObject][1]);
INI_Int("Objekt3", PlayerInfo[playerid][xObject][2]);
INI_Int("Objekt4", PlayerInfo[playerid][xObject][3]);
INI_Int("Objekt5", PlayerInfo[playerid][xObject][4]);
INI_Int("Objekt6", PlayerInfo[playerid][xObject][5]);
INI_Int("Objekt7", PlayerInfo[playerid][xObject][6]);
INI_Int("Objekt8", PlayerInfo[playerid][xObject][7]);
	INI_Int("Objekt9", PlayerInfo[playerid][xObject][8]);
INI_Int("Objekt10", PlayerInfo[playerid][xObject][9]);
INI_Int("LesLimit", PlayerInfo[playerid][xLesLimit]);
INI_String("OffPJail", PlayerInfo[playerid][xOffPJail], 64);
INI_String("OffPPrison", PlayerInfo[playerid][xOffPPrison], 64);
INI_String("OffPMute", PlayerInfo[playerid][xOffPMute], 64);
INI_String("OffPWarn", PlayerInfo[playerid][xOffPWarn], 64);
INI_String("OffPFine", PlayerInfo[playerid][xOffPFine], 64);
INI_Int("StaffMin", PlayerInfo[playerid][xStaffMin]);
INI_Int("offProperty1Check", PlayerInfo[playerid][xoffProperty1Check]);
INI_Int("offProperty2Check", PlayerInfo[playerid][xoffProperty2Check]);
INI_Int("offProperty3Check", PlayerInfo[playerid][xoffProperty3Check]);
INI_Int("offVozilo1Check", PlayerInfo[playerid][xoffVozilo1Check]);
INI_Int("offVozilo2Check", PlayerInfo[playerid][xoffVozilo2Check]);
INI_Int("offVozilo3Check", PlayerInfo[playerid][xoffVozilo3Check]);
INI_Int("offFirmaCheck", PlayerInfo[playerid][xoffFirmaCheck]);
INI_Int("offHotelCheck", PlayerInfo[playerid][xoffHotelCheck]);
INI_String("LastLogin", PlayerInfo[playerid][xLastLogin], 64);
INI_Bool("Married", PlayerInfo[playerid][xMarried]);
INI_String("MarriedTo", PlayerInfo[playerid][xMarriedTo], 24);
INI_Bool("TogMob", PlayerInfo[playerid][xTogMob]);
INI_Int("HotelID", PlayerInfo[playerid][xHotelID]);
INI_Int("HotelRoom", PlayerInfo[playerid][xHotelRoom]);
INI_Int("Promoter", PlayerInfo[playerid][xPromoter]);
INI_Int("FieldID", PlayerInfo[playerid][xFieldID]);
INI_Int("Sljive", PlayerInfo[playerid][xSljive]);
INI_Int("Kruske", PlayerInfo[playerid][xKruske]);
INI_Int("Jabuke", PlayerInfo[playerid][xJabuke]);
INI_Int("Kupus", PlayerInfo[playerid][xKupus]);
INI_Int("Ruze", PlayerInfo[playerid][xRuze]);
INI_Int("SemeSljive", PlayerInfo[playerid][xSemeSljive]);
INI_Int("SemeKruske", PlayerInfo[playerid][xSemeKruske]);
INI_Int("SemeJabuke", PlayerInfo[playerid][xSemeJabuke]);
INI_Int("SemeKupusa", PlayerInfo[playerid][xSemeKupusa]);
INI_Int("SemeRuze", PlayerInfo[playerid][xSemeRuze]);
INI_Int("LottoNumber", PlayerInfo[playerid][xLottoNumber]);
INI_Int("LottoMoney", PlayerInfo[playerid][xLottoMoney]);
INI_Int("DeagleSkill", PlayerInfo[playerid][xDeagleSkill]);
INI_Int("PistolSkill", PlayerInfo[playerid][xPistolSkill]);
INI_Int("M4Skill", PlayerInfo[playerid][xM4Skill]);
INI_Int("AKSkill", PlayerInfo[playerid][xAKSkill]);
INI_Int("MPSkill", PlayerInfo[playerid][xMPSkill]);
	INI_Int("DonateVip", PlayerInfo[playerid][xDonateVip]);
	INI_Int("WOF", PlayerInfo[playerid][xWOF]);
	INI_Int("Penzija", PlayerInfo[playerid][xPenzija]);
	INI_Int("Riba", PlayerInfo[playerid][xRiba]);
	INI_Int("RibaKG", PlayerInfo[playerid][xRibaKG]);
	INI_Int("Ranac", PlayerInfo[playerid][xRanac]);
	INI_Int("Kockica", PlayerInfo[playerid][xKockica]);
	INI_Int("Pasos", PlayerInfo[playerid][xPasos]);
INI_Int("SPoruke", PlayerInfo[playerid][xSPoruke]);
INI_Int("SOglasi", PlayerInfo[playerid][xSOglasi]);
INI_Int("SVesti", PlayerInfo[playerid][xSVesti]);
INI_Int("SFChat", PlayerInfo[playerid][xSFChat]);
INI_Int("STelefon", PlayerInfo[playerid][xSTelefon]);
INI_Int("SHud", PlayerInfo[playerid][xSHud]);
	INI_Int("Busilica", PlayerInfo[playerid][xBusilica]);
return true;}
//------------------------------------------------------------------------------
stock LoadScriptfiles() {

// - Aktori
for(new g = 1; g < MAX_AKTORI; g++) {
		new gFile[50];
	format(gFile, sizeof(gFile), AKTOR_FILE, g);
	if(fexist(gFile)) {
		INI_ParseFile(gFile, "LoadAktor", .bExtra = true, .extra = g);
		new str[40];
		format(str, sizeof(str), ""col_server"%s", AktorInfo[g][aktorime]);
		AktorLabel[g] = Create3DTextLabel(str, 0xFFFFFFFF, AktorInfo[g][aktorX], AktorInfo[g][aktorY], AktorInfo[g][aktorZ]+1.0, 10.0, 0);
		AktorInfo[g][aktorid] = CreateActor(AktorInfo[g][aktorskin], AktorInfo[g][aktorX], AktorInfo[g][aktorY], AktorInfo[g][aktorZ], AktorInfo[g][aktorA]);
		ApplyActorAnimation(AktorInfo[g][aktorid], "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0);
	}
}
// - Rent Pickups
for(new i; i < MAX_RENTS; i++) {
	new jFile[50];
	format(jFile, sizeof(jFile), RENT_FILE, i);
	if(fexist(jFile)) {
		INI_ParseFile(jFile, "LoadRent", .bExtra = true, .extra = i);
		RentInfo[i][rentID] = CreatePickup(19132, 1, RentInfo[i][rentX], RentInfo[i][rentY], RentInfo[i][rentZ], 0);
		RentInfo[i][RentLabel] = Create3DTextLabel(""col_server"[ RENT A VEHICLE ]\n{FFFFFF]Da iznajmite vozilo, kucajte\n"col_server"/rent", -1, RentInfo[i][rentX], RentInfo[i][rentY], RentInfo[i][rentZ], 20.0, 0, 0);
	}
}

//------[Organizacije]------
for(new id = 1; id < MAX_ORG; id++) {
	new oFile[40], pFile[40];
	format(oFile, sizeof(oFile), O_FILE, id);
	format(pFile, sizeof(pFile), PORT_FILE, id);
	OI[id][oSavez] = -1;
	if(fexist(oFile)) {
		INI_ParseFile(oFile, "UcitajOrganizaciju", .bExtra = true, .extra = id);
		new string[256];
		format(string, sizeof(string), ""col_white"%s\nLIDER: %s & %s\n{FF6200]Za ulaz u interijer pritisnite\n"col_white"'ENTER'", OI[id][oName], OI[id][oLider1], OI[id][oLider2]);
		Org3D[id] = Create3DTextLabel(string, -1, OI[id][oPozExtX], OI[id][oPozExtY], OI[id][oPozExtZ], 25, 0, 1);
		OrgPickup[id] = acc_CreateDynamicPickup(1314, 1, OI[id][oPozExtX], OI[id][oPozExtY], OI[id][oPozExtZ]);
		if(OI[id][oDutyPoint][0] != 0 && OI[id][oDutyPoint][1] != 0) {
			OrgDuty3D[id] = CreateDynamic3DTextLabel(""col_white"[/undercover]\n"col_server"[/duty]", -1, OI[id][oDutyPoint][0], OI[id][oDutyPoint][1], OI[id][oDutyPoint][2], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[id][oDutyVW], OI[id][oDutyInt], -1, 20.0);
			DutyPointPickup[id] = acc_CreateDynamicPickup(1239, 1, OI[id][oDutyPoint][0], OI[id][oDutyPoint][1], OI[id][oDutyPoint][2], OI[id][oDutyVW], OI[id][oDutyInt], -1, 20.0);
		}
		if(OI[id][oEquipPoint][0] != 0 && OI[id][oEquipPoint][1] != 0) {
			OrgEquip3D[id] = CreateDynamic3DTextLabel(""col_white"Da otvorite meni za opremu kucajte\n"col_server"[/equipment]", -1, OI[id][oEquipPoint][0], OI[id][oEquipPoint][1], OI[id][oEquipPoint][2], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[id][oEquipVW], OI[id][oEquipInt], -1, 20.0);
			EquipPointPickup[id] = acc_CreateDynamicPickup(1239, 1, OI[id][oEquipPoint][0], OI[id][oEquipPoint][1], OI[id][oEquipPoint][2], OI[id][oEquipVW], OI[id][oEquipInt], -1, 20.0);
		}
		if(OI[id][oDrugField][0] != 0 && OI[id][oDrugField][1] != 0) {
			new stringfield[128];
			format(stringfield, sizeof(stringfield), ""col_white"Poljana za sadjenje droge\n"col_server"%s", OI[id][oName]);
			OrgField3d[id] = CreateDynamic3DTextLabel(stringfield, -1, OI[id][oDrugField][0], OI[id][oDrugField][1], OI[id][oDrugField][2], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1, 50.0);
			OrgFieldPickup[id] = acc_CreateDynamicPickup(1239, 1, OI[id][oDrugField][0], OI[id][oDrugField][1], OI[id][oDrugField][2], 0, 0, -1, 50.0);
		}
		if(OI[id][oSafePos][0] != 0 && OI[id][oSafePos][1] != 0) {
			new stringsafe[128];
			format(stringsafe, sizeof(stringsafe), ""col_white"Sef za koriscenje /orgsef\n"col_server"%s", OI[id][oName]);
			OrgSafe3d[id] = CreateDynamic3DTextLabel(stringsafe, -1, OI[id][oSafePos][0], OI[id][oSafePos][1], OI[id][oSafePos][2], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[id][oVw], OI[id][oInt], -1, 20.0);
			OrgSafePickup[id] = acc_CreateDynamicPickup(1239, 1, OI[id][oSafePos][0], OI[id][oSafePos][1], OI[id][oSafePos][2], OI[id][oVw], OI[id][oInt], -1, 20.0);
		}
		Orge3D(id);
		if(fexist(pFile)) {
			INI_ParseFile(pFile, "LoadPorts", .bExtra = true, .extra = id);
			for(new i = 0; i < OI[id][oMaxPort]; i++) {
				if(PortOP[id][i][Pos1][0] != 0) {
					PortOP[id][i][Pickup][0] = acc_CreateDynamicPickup(1239, 1, PortOP[id][i][Pos1][0], PortOP[id][i][Pos1][1], PortOP[id][i][Pos1][2], PortOP[id][i][VW][0], PortOP[id][i][Int][0], -1, 20.0);
				}
				if(PortOP[id][i][Pos2][0] != 0) {
					PortOP[id][i][Pickup][1] = acc_CreateDynamicPickup(1239, 1, PortOP[id][i][Pos2][0], PortOP[id][i][Pos2][1], PortOP[id][i][Pos2][2], PortOP[id][i][VW][1], PortOP[id][i][Int][1], -1, 20.0);
				}
			}
		}
	}
}
/////////////////////////////WALK OF FAME///////////////////////////////////
for(new b = 0; b < MAX_WOF; b++)
{
	new string[256];
	new wofFile[60];
	format(wofFile, sizeof(wofFile), "WalkOfFame/WOF_%d.ini" ,b);
	if(fexist(wofFile))
	{
		INI_ParseFile(wofFile, "UcitajWOF", .bExtra = true, .extra = b);
		if(WOFInfo[b][fPostavljen] == 1)
		{
			if(WOFInfo[b][fImaVlasnika] == 0)
			{
				format(string,sizeof(string),""col_yelow"WALK OF FAME\n"col_white"|====================|\n"col_yelow"Cena: "col_white"$%d\n"col_yelow"Vlasnik: "col_white"%s\n"col_yelow"ID: "col_white"%d\n"col_yelow"Za kupovinu plocice "col_white"/donatewof\n|====================|",WOFInfo[b][fCena],WOFInfo[b][fVlasnik],b);
				WOFLabel[b] = CreateDynamic3DTextLabel(string, -1,WOFInfo[b][fWOFX], WOFInfo[b][fWOFY], WOFInfo[b][fWOFZ],15);
				WOFPickup[b] = acc_CreateDynamicPickup(1277, 1, WOFInfo[b][fWOFX], WOFInfo[b][fWOFY], WOFInfo[b][fWOFZ]);
			}
			if(WOFInfo[b][fImaVlasnika] == 1)
			{
				format(string,sizeof(string),""col_yelow"WALK OF FAME\n"col_white"|====================|\n"col_yelow"Donirao: "col_white"$%d\n"col_yelow"Ime: "col_white"%s\n"col_yelow"ID: "col_white"%d\n|====================|",WOFInfo[b][fCena],WOFInfo[b][fVlasnik],b);
				WOFLabel[b] = CreateDynamic3DTextLabel(string, -1,WOFInfo[b][fWOFX], WOFInfo[b][fWOFY], WOFInfo[b][fWOFZ],15);
				WOFPickup[b] = acc_CreateDynamicPickup(1277, 1, WOFInfo[b][fWOFX], WOFInfo[b][fWOFY], WOFInfo[b][fWOFZ]);
			}
		}
	}
}

//------[Hoteli]----
for(new h = 1; h < MAX_HOTELS; h++) {
	new string[256], File[50];
	format(File, sizeof(File), HOTEL_FILE, h);
	if(fexist(File)) {
		INI_ParseFile(File, "LoadHotel", .bExtra = true, .extra = h);
		if(hotelInfo[h][hOwned] == 0) {
			format(string, sizeof(string), "{36AB00]Hotel na Prodaju"col_white"[ID %d]{36AB00]\n{36AB00]Cena: "col_white"%d$\n{36AB00]Potreban level: "col_white"%d\n{36AB00]Adresa: "col_white"%s\n{36AB00]Za kupovinu "col_white"/kupihotel", h, hotelInfo[h][hPrice], hotelInfo[h][hLevel], hotelInfo[h][hAdress]);
		}
		else if(hotelInfo[h][hOwned] == 1) {
			format(string, sizeof(string), ""col_white"[ID %d]{36AB00]Vlasnik: "col_white"%s\n{36AB00]Adresa: "col_white"%s\n{36AB00]Cena najma: "col_white"%d\n{36AB00]'ENTER' za ulaz u hotel", h, hotelInfo[h][hOwner], hotelInfo[h][hAdress], hotelInfo[h][hRoomPrice]);
		}
		hotelInfo[h][hPickup] = acc_CreateDynamicPickup(1318, 1, hotelInfo[h][hEnter][0], hotelInfo[h][hEnter][1], hotelInfo[h][hEnter][2]);
		hotelInfo[h][h3DText] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, hotelInfo[h][hEnter][0], hotelInfo[h][hEnter][1], hotelInfo[h][hEnter][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
	}
}
//------[AutoSaloni]----
for(new as = 1; as < MAX_AUTOS; as++) {
	new asFile[50];
	format(asFile, sizeof(asFile), AS_FILE, as);
	if(fexist(asFile)) {
		INI_ParseFile(asFile, "LoadSalon", .bExtra = true, .extra = as);
		AutoSalon[as][AlreadyBuying] = false;
		AutoSalon[as][AutoSalon3D] = CreateDynamic3DTextLabel(""col_white"Da kupite vozilo kucajte\n"col_server"[/kupivozilo]", -1, AutoSalon[as][aPickupPos][0], AutoSalon[as][aPickupPos][1], AutoSalon[as][aPickupPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, AutoSalon[as][aVW], AutoSalon[as][aInt], -1, 20.0);
		AutoSalon[as][AutoSalonPickup] = acc_CreateDynamicPickup(1239, 1, AutoSalon[as][aPickupPos][0], AutoSalon[as][aPickupPos][1], AutoSalon[as][aPickupPos][2], AutoSalon[as][aVW], AutoSalon[as][aInt], -1, 20.0);
	}
}
//------[Imovina]------
for(new im = 1; im < MAX_IMOVINA; im++) {
		new string[300], ifile[50];
	format(ifile, sizeof(ifile), IM_FILE, im);
	if(fexist(ifile)) {
		INI_ParseFile(ifile, "OcitajImovinu", .bExtra = true, .extra = im);
		II[im][iVW] = im;
		LoadFurniture(im);
		if(II[im][iUsage] == IMOVINA_KUCA) {
			if(II[im][iOwned] == 0) {
				format(string, sizeof(string),"{F53D00]Kuca na Prodaju"col_white"[ID %d]{F53D00]\nVrsta: "col_white"%s\n{F53D00]Cena: "col_white"%d$\n{F53D00]Potreban level: "col_white"%d\n{F53D00]Adresa: "col_white"%s\n{F53D00]Za kupovinu "col_white"/kupiimovinu", im, getTypePName(II[im][iVrsta]), II[im][iPrice], II[im][iLevel], II[im][iAdress]);
				ImovinaPickup[im] = acc_CreateDynamicPickup(1273, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 0, 0);
			}
			else if(II[im][iOwned] == 1 && II[im][iRentable] == 0) {
				format(string, sizeof(string),""col_white"[ID %d]{F53D00]Vlasnik: "col_white"%s\n{F53D00]Adresa: "col_white"%s\n{F53D00]Vrsta: "col_white"%s\n{F53D00]Neaktivnost: "col_white"%dh/500\n{F53D00]'ENTER' za ulaz u imovinu", im, II[im][iOwner], II[im][iAdress], getTypePName(II[im][iVrsta]), II[im][iNeaktivnost]);
				ImovinaPickup[im] = acc_CreateDynamicPickup(19522, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 0, 0);
			}
			else if(II[im][iOwned] == 1 && II[im][iRentable] == 1) {
				format(string, sizeof(string),""col_white"[ID %d]{F53D00]Vlasnik: "col_white"%s\n{F53D00]Adresa: "col_white"%s\n{F53D00]Vrsta: "col_white"%s\n{F53D00]Neaktivnost: "col_white"%dh/500\n{F53D00]Cena renta: "col_white"%d\n{F53D00]Da rentate sobu kucajte /rentroom", im, II[im][iOwner], II[im][iAdress], getTypePName(II[im][iVrsta]), II[im][iNeaktivnost], II[im][iRentPrice]);
				ImovinaPickup[im] = acc_CreateDynamicPickup(19522, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 0, 0);
			}
		}
		else if(II[im][iUsage] == IMOVINA_STAN) {
			if(II[im][iOwned] == 0) {
				format(string, sizeof(string),""col_crvena"Stan na Prodaju"col_white"[ID %d]"col_crvena"\nCena: "col_white"%d$\n"col_crvena"Potreban level: "col_white"%d\n"col_crvena"Adresa: "col_white"%s\n"col_crvena"Za kupovinu "col_white"/kupiimovinu", im, II[im][iPrice], II[im][iLevel], II[im][iAdress]);
				ImovinaPickup[im] = acc_CreateDynamicPickup(19523, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 0, 0);
			}
			else if(II[im][iOwned] == 1 && II[im][iRentable] == 0) {
				format(string, sizeof(string),""col_white"[ID %d]"col_crvena"Vlasnik: "col_white"%s\n"col_crvena"Adresa: "col_white"%s\n"col_crvena"Neaktivnost: "col_white"%dh/500\n"col_crvena"'ENTER' za ulaz u imovinu", im, II[im][iOwner], II[im][iAdress], II[im][iNeaktivnost]);
				ImovinaPickup[im] = acc_CreateDynamicPickup(19523, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 0, 0);
			}
			else if(II[im][iOwned] == 1 && II[im][iRentable] == 1) {
				format(string, sizeof(string),""col_white"[ID %d]"col_crvena"Vlasnik: "col_white"%s\n"col_crvena"Adresa: "col_white"%s\n"col_crvena"Neaktivnost: "col_white"%dh/500\n"col_crvena"Cena renta: "col_white"%d\n"col_crvena"Da rentate sobu kucajte /rentroom", im, II[im][iOwner], II[im][iAdress], II[im][iNeaktivnost], II[im][iRentPrice]);
				ImovinaPickup[im] = acc_CreateDynamicPickup(19523, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 0, 0);
			}
		}
		else if(II[im][iUsage] == IMOVINA_VIKENDICA) {
			if(II[im][iOwned] == 0) {
				format(string, sizeof(string),"{007d80]Vikendica na Prodaju"col_white"[ID %d]{007d80]\nCena: "col_white"%d$\n{007d80]Potreban level: "col_white"%d\n{007d80]Adresa: "col_white"%s\n{007d80]Za kupovinu "col_white"/kupiimovinu", im, II[im][iPrice], II[im][iLevel], II[im][iAdress]);
				ImovinaPickup[im] = acc_CreateDynamicPickup(19524, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 0, 0);
			}
			else if(II[im][iOwned] == 1 && II[im][iRentable] == 0) {
				format(string, sizeof(string),""col_white"[ID %d]{007d80]Vlasnik: "col_white"%s\n{007d80]Adresa: "col_white"%s\n{007d80]Neaktivnost: "col_white"%dh/500\n'{007d80]ENTER' za ulaz u imovinu", im, II[im][iOwner], II[im][iAdress], II[im][iNeaktivnost]);
				ImovinaPickup[im] = acc_CreateDynamicPickup(19524, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 0, 0);
			}
			else if(II[im][iOwned] == 1 && II[im][iRentable] == 1) {
				format(string, sizeof(string),""col_white"[ID %d]{007d80]Vlasnik: "col_white"%s\n{007d80]Adresa: "col_white"%s\n{007d80]Neaktivnost: "col_white"%dh/500\n{007d80]Cena renta: "col_white"%d\n{007d80]Da rentate sobu kucajte /rentroom", im, II[im][iOwner], II[im][iAdress], II[im][iNeaktivnost], II[im][iRentPrice]);
				ImovinaPickup[im] = acc_CreateDynamicPickup(19524, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 0, 0);
			}
		}
		ServerInfo[BrojImovina]++;
		ImovinaLabel[im] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
	}
}
//------[Firme]------
for(new f = 1;f < MAX_Business; f++) {
		new string[512], fFile[50];
	format(fFile, sizeof(fFile), F_FILE, f);
	if(fexist(fFile)) {
		INI_ParseFile(fFile, "OcitajFirmu", .bExtra = true, .extra = f);

		if(BusinessInfo[f][bOwned] == 0) {
			format(string,sizeof(string), "{00DCF5]Firma na prodaju"col_white"[ID %d]{00DCF5]\n{00DCF5]Ime : "col_white"%s\n{00DCF5]Cena Firme : "col_white"%d$\n{00DCF5]Vrsta Firme : "col_white"%s\n{00DCF5]Potreban level: "col_white"%d\n{00DCF5]Adresa Firme: "col_white"%s\n{00DCF5]Za kupovinu upisite\n/kupifirmu", f, BusinessInfo[f][bName], BusinessInfo[f][bPrice], getBusinessType(f), BusinessInfo[f][bLevel], UliceFirme(f));
			FirmaPickup[f] = acc_CreateDynamicPickup(1274, 1, BusinessInfo[f][bEnterX], BusinessInfo[f][bEnterY], BusinessInfo[f][bEnterZ]);
		}
		else if(BusinessInfo[f][bOwned] == 1) {
			format(string,sizeof(string), ""col_white"[ID %d]{00DCF5]Ime : "col_white"%s\n{00DCF5]Vlasnik Firme : "col_white"%s\n{00DCF5]Vrsta Firme : "col_white"%s\n{00DCF5]Adresa Firme : "col_white"%s\n{00DCF5]Neaktivnost: "col_white"%dh/300h\n{00DCF5]Fakture: "col_white"%d\n{00DCF5]Reket: "col_white"%s",
			f,
			BusinessInfo[f][bName],
			BusinessInfo[f][bOwner],
			getBusinessType(f), UliceFirme(f),
			BusinessInfo[f][bNeaktivnost],
			BusinessInfo[f][bFacture],
			GetReketName(BusinessInfo[f][bReket]));
			FirmaPickup[f] = acc_CreateDynamicPickup(1274, 1, BusinessInfo[f][bEnterX], BusinessInfo[f][bEnterY], BusinessInfo[f][bEnterZ]);
		}
		FirmaLabel[f] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, BusinessInfo[f][bEnterX], BusinessInfo[f][bEnterY], BusinessInfo[f][bEnterZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
	}
}

//------[Kapije]------
for(new g = 1; g < MAX_GATES; g++) {
		new gFile[50];
	format(gFile, sizeof(gFile), GATE_FILE, g);
	if(fexist(gFile)) {
		INI_ParseFile(gFile, "LoadGate", .bExtra = true, .extra = g);
		GateData[g][gateOpened] = false;
		GateData[g][gateObject] = CreateDynamicObject(GateData[g][gateModel], GateData[g][gatePos][0], GateData[g][gatePos][1], GateData[g][gatePos][2], GateData[g][gatePos][3], GateData[g][gatePos][4], GateData[g][gatePos][5], GateData[g][gateWorld], GateData[g][gateInterior]);
	}
}
//------[Eventi]------
for(new i = 1; i < MAX_EVENTS; i++) {
	strmid(Event[i][Name], "Nema eventa", 0, strlen("Nema eventa"), 32);
	new gFile[35];
	format(gFile, 35, EVENT_FILE, i);
	if(fexist(gFile)) {
		INI_ParseFile(gFile, "LoadEvent", .bExtra = true, .extra = i);
	}
}
//------[Kontejneri]------
for(new ko = 1; ko < MAX_KONT; ko++) {
		new koFile[50], string[300];
	format(koFile, sizeof(koFile), KO_FILE, ko);
	if(fexist(koFile)) {
		INI_ParseFile(koFile, "OcitajKont", .bExtra = true, .extra = ko);
		KontInfo[ko][koObjID] = CreateDynamicObject(1331, KontInfo[ko][koObjPos][0], KontInfo[ko][koObjPos][1], KontInfo[ko][koObjPos][2], KontInfo[ko][koObjRot][0], KontInfo[ko][koObjRot][1], KontInfo[ko][koObjRot][2]);
		ServerInfo[BrojKontejnera]++;
		format(string,sizeof(string), "{00DCF5]Kontejner\n{00DCF5]Da trazite po kontejneru upisite\n"col_white"/trazi");
		KontejnerLabel[ko] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, KontInfo[ko][koObjPos][0], KontInfo[ko][koObjPos][1], KontInfo[ko][koObjPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
	}
}
//------[BrzaHrana]------
for(new ko = 1; ko < MAX_BHRANA; ko++) {
		new koFile[50], string[300];
	format(koFile, sizeof(koFile), BRZAHRANA_FILE, ko);
	if(fexist(koFile)) {
		INI_ParseFile(koFile, "OcitajBrzuHranu", .bExtra = true, .extra = ko);
		BrzaHranaInfo[ko][bhObjID] = CreateDynamicObject(1340, BrzaHranaInfo[ko][bhObjPos][0], BrzaHranaInfo[ko][bhObjPos][1], BrzaHranaInfo[ko][bhObjPos][2], BrzaHranaInfo[ko][bhObjRot][0], BrzaHranaInfo[ko][bhObjRot][1], BrzaHranaInfo[ko][bhObjRot][2]);
		//ServerInfo[BrojKontejnera]++;
		format(string,sizeof(string), "{00DCF5]Brza Hrana\n{00DCF5]Da jedete koristite\n"col_white"/jedi");
		BrzaHranaLabel[ko] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, BrzaHranaInfo[ko][bhObjPos][0], BrzaHranaInfo[ko][bhObjPos][1], BrzaHranaInfo[ko][bhObjPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
	}
}
//------[Govornica]------
for(new ko = 1; ko < MAX_GOVORNICA; ko++) {
		new koFile[50], string[300];
	format(koFile, sizeof(koFile), GOVORNICA_FILE, ko);
	if(fexist(koFile)) {
		INI_ParseFile(koFile, "OcitajGovornicu", .bExtra = true, .extra = ko);
		GovornicaInfo[ko][gObjID] = CreateDynamicObject(1216, GovornicaInfo[ko][gObjPos][0], GovornicaInfo[ko][gObjPos][1], GovornicaInfo[ko][gObjPos][2], GovornicaInfo[ko][gObjRot][0], GovornicaInfo[ko][gObjRot][1], GovornicaInfo[ko][gObjRot][2]);
		//ServerInfo[BrojKontejnera]++;
		format(string,sizeof(string), "{00DCF5]Govornica\n{00DCF5]Da pozovete nekog\n"col_white"/govornica");
		GovornicaLabel[ko] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, GovornicaInfo[ko][gObjPos][0], GovornicaInfo[ko][gObjPos][1], GovornicaInfo[ko][gObjPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
	}
}
//------[Nargila]------
for(new ko = 1; ko < MAX_NARGILA; ko++) {
		new koFile[50], string[300];
	format(koFile, sizeof(koFile), NARGILA_FILE, ko);
	if(fexist(koFile)) {
		INI_ParseFile(koFile, "OcitajNargilu", .bExtra = true, .extra = ko);
		GovornicaInfo[ko][gObjID] = CreateDynamicObject(2726, NargilaInfo[ko][gObjPos][0], NargilaInfo[ko][gObjPos][1], NargilaInfo[ko][gObjPos][2], NargilaInfo[ko][gObjRot][0], NargilaInfo[ko][gObjRot][1], NargilaInfo[ko][gObjRot][2]);
		//ServerInfo[BrojKontejnera]++;
		format(string,sizeof(string), "{00DCF5]Nargila\n{00DCF5]Da koristite\n"col_white"/nargila");
		NargilaLabel[ko] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, NargilaInfo[ko][gObjPos][0], NargilaInfo[ko][gObjPos][1], NargilaInfo[ko][gObjPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
	}
}
//------[Bankomati]------
for(new atm = 1; atm < MAX_ATM; atm++) {
		new aFile[50];
	format(aFile, sizeof(aFile), ATM_FILE, atm);
	if(fexist(aFile)) {
		INI_ParseFile(aFile, "LoadATM", .bExtra = true, .extra = atm);
		atmInfo[atm][atmObject] = CreateDynamicObject(2942, atmInfo[atm][atmPos][0], atmInfo[atm][atmPos][1], atmInfo[atm][atmPos][2], atmInfo[atm][atmPos][3], atmInfo[atm][atmPos][4], atmInfo[atm][atmPos][5]);
		atmInfo[atm][atmText3D] = CreateDynamic3DTextLabel(""col_white"Da koristite bankomat kucajte\n"col_server"[ /atm /robatm ]", -1, atmInfo[atm][atmPos][0], atmInfo[atm][atmPos][1], atmInfo[atm][atmPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
	}
}
//------[Radari]------
for(new radarID = 1; radarID < MAX_RADARS; radarID++) {

		new radarFile[50];
	format(radarFile, sizeof(radarFile), F_RADARS, radarID);
	if(fexist(radarFile)) {

		INI_ParseFile(radarFile, "LoadRadar", .bExtra = true, .extra = radarID);
		radarInfo[radarID][radarObject] = CreateDynamicObject(18880, radarInfo[radarID][radarPos][0], radarInfo[radarID][radarPos][1], radarInfo[radarID][radarPos][2], radarInfo[radarID][radarPos][3], radarInfo[radarID][radarPos][4], radarInfo[radarID][radarPos][5]);
	}
}
//------[Imanje]------
for(new id = 1; id < MAX_FIELDS; id++) {

	new filename[32];
	format(filename, sizeof(filename), F_FIELD, id);

	if(fexist(filename)) {

		new string[128];

		INI_ParseFile(filename, "LoadFields", .bExtra = true, .extra = id);

		if(!fieldInfo[id][fieldOwned]) {
			format(string, sizeof(string), ""col_server"Imanje - "col_white"%d "col_server"- na prodaju\nCena: "col_white"%d\n"col_server"Level: "col_white"%d\n"col_server"Za kupovinu kucajte "col_white"/kupiimanje", id, fieldInfo[id][fieldPrice], fieldInfo[id][fieldLevel]);
			fieldInfo[id][fieldObject] = CreateDynamicObject(19470, fieldInfo[id][fieldObjectPos][0], fieldInfo[id][fieldObjectPos][1], fieldInfo[id][fieldObjectPos][2], fieldInfo[id][fieldObjectPos][3], fieldInfo[id][fieldObjectPos][4], fieldInfo[id][fieldObjectPos][5], -1, -1, -1, 200.0);
		}
		else if(fieldInfo[id][fieldOwned]) {
			format(string, sizeof(string), ""col_server"Imanje - "col_white"%d "col_server"-\nVlasnik: "col_white"%s\n"col_server"Level: "col_white"%d", id, fieldInfo[id][fieldOwner], fieldInfo[id][fieldLevel]);
			fieldInfo[id][fieldPickup] = acc_CreateDynamicPickup(1239, 1, fieldInfo[id][fieldObjectPos][0], fieldInfo[id][fieldObjectPos][1], fieldInfo[id][fieldObjectPos][2]+1, 0, 0);
		}
		fieldInfo[id][field3D] = CreateDynamic3DTextLabel(string, BELA, fieldInfo[id][fieldObjectPos][0], fieldInfo[id][fieldObjectPos][1], fieldInfo[id][fieldObjectPos][2]+1, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		fieldInfo[id][fieldRectAngle] = CreateDynamicRectangle(fieldInfo[id][fieldMinX], fieldInfo[id][fieldMinY], fieldInfo[id][fieldMaxX], fieldInfo[id][fieldMaxY], -1, -1, -1);
	}
}
//------[Pumpe]------
for(new fstationID = 1; fstationID < MAX_FSTATION; fstationID++) {

		new filename[64];
	format(filename, sizeof(filename), FSTATION_FILE, fstationID);
	if(fexist(filename)) {

		INI_ParseFile(filename, "FStation_Load", .bExtra = true, .extra = fstationID);
		if(FuelStation[fstationID][fsPlaced]) {

			new string[512];
			format(string, sizeof(string), "{0F87FF]Pumpa [{FFFFFF]%s{0F87FF]]\nCena 1L BENZINA: {FFFFFF]%d$\n{0F87FF]Cena 1L DIZELA: {FFFFFF]%d$\n{0F87FF]Cena 1L PLINA: {FFFFFF]%d$\n{0F87FF]Cena 1L GASNOG ULJA: {FFFFFF]%d$\n{FFFFFF]/fill\n{0F87FF][{FFFFFF]Adresa: {FFFFFF]%d {0F87FF]]",
				FuelStation[fstationID][fsName],
				FuelStation[fstationID][fsGasolinePrice],
				FuelStation[fstationID][fsDieselPrice],
				FuelStation[fstationID][fsGasPrice],
				FuelStation[fstationID][fsGasOilPrice],
				fstationID);

			FuelStation[fstationID][fs3d] = CreateDynamic3DTextLabel(string, 0x33CCFFFF, FuelStation[fstationID][fsPos] [0], FuelStation[fstationID][fsPos] [1], FuelStation[fstationID][fsPos] [2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
			FuelStation[fstationID][fsPickup] = acc_CreateDynamicPickup (1650, 1, FuelStation[fstationID][fsPos] [0], FuelStation[fstationID][fsPos] [1], FuelStation[fstationID][fsPos] [2], 0, 0);

		}
	}
}
//------[Stabljike imanja]------
for(new id = 1; id < MAX_STALKS; id++) {
	new filename[32];
	format(filename, sizeof(filename), F_STALK, id);

	if(fexist(filename)) {

		new string[180], vrsta[10];
		INI_ParseFile(filename, "LoadStalks", .bExtra = true, .extra = id);
		if(stalkInfo[id][sPlanted] == true) {

			if(stalkInfo[id][sType] == BILJKA_SLJIVA) {
				vrsta = "Sljiva";
				stalkInfo[id][sObject] = CreateDynamicObject(stalkInfo[id][sObjectID], stalkInfo[id][sPos][0]+1, stalkInfo[id][sPos][1], stalkInfo[id][sPos][2]-4, 0.0000000, 0.0000000, 0.0000000);
			}
			else if(stalkInfo[id][sType] == BILJKA_KRUSKA) {
				vrsta = "Kruska";
				stalkInfo[id][sObject] = CreateDynamicObject(stalkInfo[id][sObjectID], stalkInfo[id][sPos][0]+1, stalkInfo[id][sPos][1], stalkInfo[id][sPos][2]-4, 0.0000000, 0.0000000, 0.0000000);
			}
			else if(stalkInfo[id][sType] == BILJKA_JABUKA) {
				stalkInfo[id][sObject] = CreateDynamicObject(stalkInfo[id][sObjectID], stalkInfo[id][sPos][0]+1, stalkInfo[id][sPos][1], stalkInfo[id][sPos][2]-4, 0.0000000, 0.0000000, 0.0000000);
				vrsta = "Jabuka";
			}
			else if(stalkInfo[id][sType] == BILJKA_KUPUS) {
				stalkInfo[id][sObject] = CreateDynamicObject(stalkInfo[id][sObjectID], stalkInfo[id][sPos][0]+1, stalkInfo[id][sPos][1], stalkInfo[id][sPos][2], 0.0000000, 0.0000000, 0.0000000);
				vrsta = "Kupus";
			}
			else if(stalkInfo[id][sType] == BILJKA_RUZE) {
				stalkInfo[id][sObject] = CreateDynamicObject(stalkInfo[id][sObjectID], stalkInfo[id][sPos][0]+1, stalkInfo[id][sPos][1], stalkInfo[id][sPos][2]-0.8, 0.0000000, 0.0000000, 0.0000000);
				vrsta = "Ruze";
			}

			if(stalkInfo[id][sMinut] >= 0 && stalkInfo[id][sHour] >= 0) {
				format(string, sizeof(string), "Biljka jos nije izrasla!\nVreme do izrastanja: %d sati, %d minuta\nVrsta biljke: %s", stalkInfo[id][sHour], stalkInfo[id][sMinut], vrsta);
			}
			else if(stalkInfo[id][sGrow] == true && stalkInfo[id][sMinut] == 0 && stalkInfo[id][sHour] == 0) {
				format(string, sizeof(string), "Biljka je izrasla!\nDa oberes voce kucaj /oberidrvo\nVrsta biljke: %s", vrsta);
			}

			stalkInfo[id][s3D] = CreateDynamic3DTextLabel(string, -1, stalkInfo[id][sPos][0]+1, stalkInfo[id][sPos][1], stalkInfo[id][sPos][2], 15);
		}
	}
}
//------[GPS]------
for(new id = 1; id < MAX_GPS; id++) {

	new filename[32];
	format(filename, sizeof(filename), F_GPS, id);

	if(fexist(filename)) {
		INI_ParseFile(filename, "LoadGPS", .bExtra = true, .extra = id);
	}
}
//------[Garaze]------
for(new id = 1; id < MAX_GARAGES; id++) {

	new filename[32];
	format(filename, sizeof(filename), F_GARAGE, id);

	if(fexist(filename)) {

		new string[256], vrsta[20];

		INI_ParseFile(filename, "LoadGarages", .bExtra = true, .extra = id);

		switch(garageInfo[id][garageType]) {
			case 0: {
				vrsta = "Mala garaza";
			}
			case 1: {
				vrsta = "Srednja garaza";
			}
			case 2: {
				vrsta = "Velika garaza";
			}
		}

		if(!garageInfo[id][garageOwned]) {
			format(string, sizeof(string), ""col_orange"Garaza na prodaju"col_white"[ID %d]\n"col_orange"Tip garaze: "col_white"%s\n"col_orange"Cena garaze: "col_white"%d\n"col_orange"Potreban level: "col_white"%d\n"col_orange"Za kupovinu kucajte "col_white"/kupigarazu", id, vrsta, garageInfo[id][garagePrice], garageInfo[id][garageLevel]);
		}
		else if(garageInfo[id][garageOwned]) {
			format(string, sizeof(string), ""col_white"[ID %d]"col_orange"Vlasnik: "col_white"%s\n"col_orange"Tip garaze: "col_white"%s\n"col_orange"Potreban level: "col_white"%d\n"col_orange"Za ulaz koristite "col_white"/genter", id, garageInfo[id][garageOwner], vrsta, garageInfo[id][garageLevel]);
		}
		garageInfo[id][garage3D] = CreateDynamic3DTextLabel(string, BELA, garageInfo[id][garagePos][0], garageInfo[id][garagePos][1], garageInfo[id][garagePos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		garageInfo[id][garagePickup] = acc_CreateDynamicPickup(2992, 1, garageInfo[id][garagePos][0], garageInfo[id][garagePos][1], garageInfo[id][garagePos][2], 0, 0);
	}
}

//------[GZone]------
for(new id = 1; id < MAX_GZONE; id++) {

	new filename[32];
	format(filename, sizeof(filename), F_GZONE, id);

	if(fexist(filename)) {

		new string[256];

		INI_ParseFile(filename, "GZone_Load", .bExtra = true, .extra = id);

		gZoneInfo[id][gZoneTime] = 0;
		if(!gZoneInfo[id][gZoneTaken]) {

			gZoneInfo[id][gZonePickup] = acc_CreateDynamicPickup(365, 1, gZoneInfo[id][gZonePickupPos][0], gZoneInfo[id][gZonePickupPos][1], gZoneInfo[id][gZonePickupPos][2], 0, 0);
			gZoneInfo[id][gZone3D] = CreateDynamic3DTextLabel(""col_white"[TERITORIJA]\nTeritorija je "col_server"slobodna"col_white"\nAko zelite da zauzmete ovu teritoriju kucajte "col_server"/zauzmi", BELA, gZoneInfo[id][gZonePickupPos][0], gZoneInfo[id][gZonePickupPos][1], gZoneInfo[id][gZonePickupPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		}
		else if(gZoneInfo[id][gZoneTaken]) {

			gZoneInfo[id][gZonePickup] = acc_CreateDynamicPickup(365, 1, gZoneInfo[id][gZonePickupPos][0], gZoneInfo[id][gZonePickupPos][1], gZoneInfo[id][gZonePickupPos][2], 0, 0);
			format(string, sizeof(string), ""col_white"[TERITORIJA]\nTeritorija je u vlasnistvu bande "col_server"%s"col_white"\nAko zelite da zauzmete ovu teritoriju kucajte "col_server"/zauzmi",  OI[gZoneInfo[id][gZoneGangID]][oName]);
			gZoneInfo[id][gZone3D] = CreateDynamic3DTextLabel(string, BELA, gZoneInfo[id][gZonePickupPos][0], gZoneInfo[id][gZonePickupPos][1], gZoneInfo[id][gZonePickupPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		}

		gZoneInfo[id][gZoneID] = GangZoneCreate(gZoneInfo[id][gZoneMinX], gZoneInfo[id][gZoneMinY], gZoneInfo[id][gZoneMaxX], gZoneInfo[id][gZoneMaxY]);
		gZoneInfo[id][gZoneRectAngle] = CreateDynamicRectangle(gZoneInfo[id][gZoneMinX], gZoneInfo[id][gZoneMinY], gZoneInfo[id][gZoneMaxX], gZoneInfo[id][gZoneMaxY], -1, -1, -1);
	}
}
//------[SAFE ZONE]------
for(new id = 1; id < MAX_SZONE; id++) {

	new filename[32];
	format(filename, sizeof(filename), F_SZONE, id);

	if(fexist(filename)) {

		//new string[256];

		INI_ParseFile(filename, "GSafeZone_Load", .bExtra = true, .extra = id);

		gSafeZoneInfo[id][gSafeZoneID] = GangZoneCreate(gSafeZoneInfo[id][gSafeZoneMinX], gSafeZoneInfo[id][gSafeZoneMinY], gSafeZoneInfo[id][gSafeZoneMaxX], gSafeZoneInfo[id][gSafeZoneMaxY]);
		gSafeZoneInfo[id][gSafeZoneRectAngle] = CreateDynamicRectangle(gSafeZoneInfo[id][gSafeZoneMinX], gSafeZoneInfo[id][gSafeZoneMinY], gSafeZoneInfo[id][gSafeZoneMaxX], gSafeZoneInfo[id][gSafeZoneMaxY], -1, -1, -1);
	}
}

//------[Parkinzi]------

for(new parkID = 1; parkID < MAX_PARKINGS; parkID++) {

	new filename[32];
	format(filename, sizeof(filename), PARKING_FILE, parkID);

	if(fexist(filename)) {

		INI_ParseFile(filename, "Parking_Load", .bExtra = true, .extra = parkID);

		new string[128];

		format(string, sizeof(string), "{FFFFFF]- Parking Aparat ("col_server"%d"col_white") -\n{FFFFFF]Da kupite parking listic kucajte\n({0F87FF]/kupiparkinglistic {FFFFFF])", parkID);
		ParkingInfo[parkID][park3d_1] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, ParkingInfo[parkID][parkPickup_1_Pos][0], ParkingInfo[parkID][parkPickup_1_Pos][1], ParkingInfo[parkID][parkPickup_1_Pos][2], 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
		ParkingInfo[parkID][parkPickup_1] = acc_CreateDynamicPickup(1239, 1, ParkingInfo[parkID][parkPickup_1_Pos][0], ParkingInfo[parkID][parkPickup_1_Pos][1], ParkingInfo[parkID][parkPickup_1_Pos][2], 0, 0);

		format(string, sizeof(string), "{FFFFFF]- PARKING ZONA ("col_server"%d"col_white") -\n{FFFFFF]Otidjite do aparata\nda bi kupili ({0F87FF]parking listic {FFFFFF])", parkID);
		ParkingInfo[parkID][park3d_2] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, ParkingInfo[parkID][parkPickup_2_Pos][0], ParkingInfo[parkID][parkPickup_2_Pos][1], ParkingInfo[parkID][parkPickup_2_Pos][2], 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
		ParkingInfo[parkID][parkPickup_2] = acc_CreateDynamicPickup(1239, 1, ParkingInfo[parkID][parkPickup_2_Pos][0], ParkingInfo[parkID][parkPickup_2_Pos][1], ParkingInfo[parkID][parkPickup_2_Pos][2], 0, 0);

		ParkingInfo[parkID][parkObject] = CreateDynamicObject(4639, ParkingInfo[parkID][parkObjectPos][0], ParkingInfo[parkID][parkObjectPos][1], ParkingInfo[parkID][parkObjectPos][2], ParkingInfo[parkID][parkObjectPos][3], ParkingInfo[parkID][parkObjectPos][4], ParkingInfo[parkID][parkObjectPos][5], 0, 0, -1, 200.0);

		ParkingInfo[parkID][parkRectAngle] = CreateDynamicRectangle(ParkingInfo[parkID][parkMinX], ParkingInfo[parkID][parkMinY], ParkingInfo[parkID][parkMaxX], ParkingInfo[parkID][parkMaxY], -1, -1, -1);

	}
}

for(new id = 1; id < MAX_CTREES; id++) {

	new filename[32];
	format(filename, sizeof(filename), F_CTREES, id);

	if(fexist(filename)) {

		new string[128];

		INI_ParseFile(filename, "LoadCTrees", .bExtra = true, .extra = id);

		if(CTree[id][ctPlaced]) {

			format(string, sizeof(string), "{3f37e5]Zelimo vam srecne Bozicne\ni novogodisnje praznike!\n*** 2023 ***");
			CTree[id][ct3d] = CreateDynamic3DTextLabel(string, -1, CTree[id][ctPos][0], CTree[id][ctPos][1], CTree[id][ctPos][2]+2, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
			CTree[id][ctObject] = CreateDynamicObject(19076, CTree[id][ctPos][0], CTree[id][ctPos][1], CTree[id][ctPos][2], CTree[id][ctPos][3], CTree[id][ctPos][4], CTree[id][ctPos][5]);
		}
	}
}

for(new id = 1; id < MAX_XORBS; id++) {

	new filename[32];
	format(filename, sizeof(filename), F_XORBS, id);

	if(fexist(filename)) {

		new object = 19059;
		new rand = random(5);
		switch(rand) {
			case 0: object = 19059;
			case 1: object = 19060;
			case 2: object = 19061;
			case 3: object = 19062;
			case 4: object = 19063;
		}

		INI_ParseFile(filename, "LoadXOrbs", .bExtra = true, .extra = id);

		if(XmasOrbs[id][xoPlaced]) {

			XmasOrbs[id][xoObject] = CreateDynamicObject(object, XmasOrbs[id][xoPos][0], XmasOrbs[id][xoPos][1], XmasOrbs[id][xoPos][2], XmasOrbs[id][xoPos][3], XmasOrbs[id][xoPos][4], XmasOrbs[id][xoPos][5]);
		}
	}
}

for(new id = 1; id < MAX_PRESENTS; id++) {

	new filename[32];
	format(filename, sizeof(filename), F_PRESENTS, id);

	if(fexist(filename)) {

		new string[128];

		INI_ParseFile(filename, "LoadPresents", .bExtra = true, .extra = id);

		if(presentsInfo[id][presPlaced]) {

			new object = 19054;
			new rand = random(5);
			switch(rand) {
				case 0: object = 19054;
				case 1: object = 19055;
				case 2: object = 19056;
				case 3: object = 19057;
				case 4: object = 19058;
			}

			if(!presentsInfo[id][presTaken]) {

				format(string,sizeof(string), ""col_white"Poklon nije otvoren!\n\n"col_red"/poklon");
				presentsInfo[id][pres3d] = CreateDynamic3DTextLabel(string, -1, presentsInfo[id][presPos][0], presentsInfo[id][presPos][1], presentsInfo[id][presPos][2], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
				presentsInfo[id][presObject] = CreateDynamicObject(object, presentsInfo[id][presPos][0], presentsInfo[id][presPos][1], presentsInfo[id][presPos][2], presentsInfo[id][presPos][3], presentsInfo[id][presPos][4], presentsInfo[id][presPos][5]);
			}
			else if(presentsInfo[id][presTaken]) {

				format(string, sizeof(string), ""col_white"Poklon je otvoren!");
				presentsInfo[id][pres3d] = CreateDynamic3DTextLabel(string, -1, presentsInfo[id][presPos][0], presentsInfo[id][presPos][1], presentsInfo[id][presPos][2], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
				presentsInfo[id][presObject] = CreateDynamicObject(object, presentsInfo[id][presPos][0], presentsInfo[id][presPos][1], presentsInfo[id][presPos][2], presentsInfo[id][presPos][3], presentsInfo[id][presPos][4], presentsInfo[id][presPos][5]);
			}
		}
	}
}

if(fexist("Ostalo/anticheat.ini")) {
	INI_ParseFile("Ostalo/anticheat.ini", "LoadAntiCheat");}

if(fexist("Ostalo/serverstats.ini")) {
	INI_ParseFile("Ostalo/serverstats.ini", "LoadServerStats");}

if(fexist("Ostalo/StariParovi.ini")) {
	INI_ParseFile("Ostalo/StariParovi.ini", "LoadStareParove");}

LoadAports();
LoadSports();
LoadVports();
LoadPports();


}
//------------------------------------------------------------------------------
DefineGatesAndDoors() {
//kkapija = CreateDynamicObject(19912, 2423.87769, -2077.80762, 14.81379,   0.00000, 0.00000, 90.00000);
//kkapija2 = CreateDynamicObject(19912, 2423.84155, -2100.85962, 14.77332,   0.00000, 0.00000, 270.00000);
//KomunalacKapija = false;

ZlataraUToku = false;
ZlataraOpljackana = false;

LaseriBanka[0] = CreateDynamicObject(18643, -111.92853, 1129.10754, -24.96888,   0.00000, 0.00000, 0.00000);
LaseriBanka[1] = CreateDynamicObject(18643, -111.92853, 1129.10754, -26.10878,   0.00000, 0.00000, 0.00000);
LaseriBanka[2] = CreateDynamicObject(18643, -111.92853, 1129.10754, -26.81783,   0.00000, 0.00000, 0.00000);
LaseriBanka[3] = CreateDynamicObject(18643, -111.92853, 1129.10754, -25.47898,   0.00000, 0.00000, 0.00000);

SruseniLaseri = false;
BankaOpljackana = false;
PljackaUToku = false;

VrataSefaBanke = CreateDynamicObject(1495, -150.81219, 924.75452, -16.58700,   0.00000, 0.00000, 0.00000);
VrataBankeSrusena = false;
VrataSefaBankeZaHack = CreateDynamicObject(19303, -146.54340, 923.50818, -27.93430,   0.00000, 0.00000, 0.00000);
VrataBankeHakovana = false;
SefBanke = CreateDynamicObject(2634, -146.419, 903.071, -27.495, 0.000, 0.000, 0.000, -1, -1, -1, 300.000, 300.000);
SefBankeOtvoren = false;

rampagranice1_1 = CreateDynamicObject(968, 55.31342, -1536.24329, 4.94900,   360.00000, 90.00000, 261.81335);
rampagranice1_2 = CreateDynamicObject(968, 44.93288, -1526.56641, 4.94900,   360.00000, 90.00000, 81.97999);
rampagranice2_2 = CreateDynamicObject(968, 1807.45789, 804.24640, 11.00290,   0.00000, -91.00000, 360.00000);
rampagranice2_4 = CreateDynamicObject(968, 1786.00269, 790.59589, 11.21290,   0.00000, -91.00000, 180.00000);}

//------------------------------------------------------------------------------
public OnPlayerPickUpDynamicPickup(playerid, pickupid) {

//new pickup_pickuped = false;

for(new i = 0; i < MAX_JOBS; i++) {

	if(pickupid == jobsInfos[i][jPickup]) {

		ChosenJob[playerid] = i+1;
		//pickup_pickuped = true;
		break;
	}
}
return 1;}
//------------------------------------------------------------------------------
CreatePickupsAnd3Ds() {
//Banka labels
Create3DTextLabel(""col_white"Da postavite dinamit\n"col_server" /postavidinamit ", 0xFFFF00FF, -150.0112,924.3433,-15.5540, 20, 0, 1);
Create3DTextLabel(""col_white"Da hakujete kontrolni panel\n"col_server" /provalilozinku | /unesilozinku ", 0xFFFF00FF, -146.54340, 923.50818, -27.93430, 20, 0, 1);
Create3DTextLabel(""col_white"Da postavite busilicu\n"col_server" /postavibusilicu ", 0xFFFF00FF, -146.419, 903.071, -27.495, 20, 0, 1);

//Igraonica
Create3DandP(""col_white"Da se ulogujete na jedan od kompjutera kucajte\n"col_server"[ /igrice ]", 1466.3201, 1416.2100, -5.0676, -1, -1, 1239, 10.0);

// clothing system
Create3DandP(""col_white"Da kupite kacket kucajte\n"col_server" /buycaps ", 205.0401, -100.3267, 1005.2578, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da kupite maramu za glavu kucajte\n"col_server" /buyhbandanas ", 171.4970, -92.8723, 1001.8047, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da kupite maramu za lice kucajte\n"col_server" /buyfbandanas ", 151.2055, -92.5647, 1001.8047, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da kupite naocare kucajte\n"col_server" /buyglasses ", 209.8154, -33.7277, 1001.9297, -1, -1, 19138, 2.0);
Create3DandP(""col_white"Da kupite kacket kucajte\n"col_server" /buycaps ", 209.3052, -7.9960, 1005.2109, -1, -1, 18933, 2.0);
Create3DandP(""col_white"Da kupite novu odecu kucajte\n"col_server" /kupiodecu ", 206.3761, -8.1491, 1001.2109, -1, -1, 2399, 2.0);
Create3DandP(""col_white"Da kupite novu odecu kucajte\n"col_server" /kupiodecu ", 161.1792, -83.2523, 1001.8047, -1, -1, 2399, 2.0);
Create3DandP(""col_white"Da kupite novu odecu kucajte\n"col_server" /kupiodecu ", 208.0208, -100.3269, 1005.2578, -1, -1, 2399, 2.0);
Create3DandP(""col_white"Da kupite novu odecu kucajte\n"col_server" /kupiodecu ", 203.7806, -43.2623, 1001.8047, -1, -1, 2399, 2.0);
Create3DandP(""col_white"Da kupite novu odecu kucajte\n"col_server" /kupiodecu ", 1309.6923, -882.9189, 39.5781, -1, -1, 2399, 2.0);

// Nike
Create3DandP(""col_white"Da kupite kacket kucajte\n"col_server" /buycaps ", 2815.2932,1195.7594,-21.8491, -1, -1, 18933, 4.0);
Create3DandP(""col_white"Da kupite maramu za lice & glavu kucajte\n"col_server"/buyfbandanas /buyhbandanas", 2806.5706,1187.3518,-21.8560, -1, -1, 1239, 4.0);
Create3DandP(""col_white"Da kupite naocare kucajte\n"col_server" /buyglasses ", 2821.0010,1194.8903,-21.8560, -1, -1, 19138, 4.0);
Create3DandP(""col_white"Da kupite novu odecu kucajte\n"col_server" /kupiodecu ", 2812.7810,1195.9904,-21.84911, -1, -1, 2399, 4.0);
//
//Create3DTextLabel("/hpboks da napunis healte za Boks event", 0xFFFF00FF, -531.764221, 2577.993652, 53.555000, 23, 0, 1);
//Create3DTextLabel("Pobednici, nakon borbe dolaze i staju ovde!", 0xFFFF00FF, 1655.2023, -1381.6261, 66.1093, 23, 0, 1);
//Create3DTextLabel("Ucesnici koji cekaju da ih prozovu!", 0xFFFF00FF, 1636.8462, -1381.4254, 66.0894, 23, 0, 1);
//Create3DTextLabel("Publika", 0xFFFF00FF, 1646.9358, -1390.5105, 66.1855, 23, 0, 1);

Create3DandP(""col_server"[ EVENT HEALTH ]"col_white"Da napunite HP - "col_server"/ehealth", -531.2928,2573.9509,53.5550, -1, -1, 1240, 5.0);
Create3DandP(""col_white"Da idete na SkyDiving, kucajte\n"col_server"/skydive "col_white"(20000$) ", 1544.7637, -1343.9326, 329.4515, -1, -1, 1310, 5.0);

// kiosci
Create3DandP(""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_server" /trafika ", 1374.6486,-1051.3281,26.7872, -1, -1, 1318, 5.0);
Create3DandP(""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_server" /trafika ", 1522.3365,-1678.8428,13.5469, -1, -1, 1318, 5.0);
Create3DandP(""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_server" /trafika ", 1884.9135,-1758.8334,13.5469, -1, -1, 1318, 5.0);
Create3DandP(""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_server" /trafika ", 1143.2748,-938.2762,43.0301, -1, -1, 1318, 5.0);
Create3DandP(""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_server" /trafika ", 1061.3086,-1829.3444,13.6905, -1, -1, 1318, 5.0);
Create3DandP(""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_server" /trafika ", 1211.8568,-1352.6002,13.5739, -1, -1, 1318, 5.0);
Create3DandP(""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_server" /trafika ", 1869.2694,-1455.4016,13.5466, -1, -1, 1318, 5.0);
Create3DandP(""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_server" /trafika ", 1418.0715,-1717.1235,13.5469, -1, -1, 1318, 5.0);
Create3DandP(""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_server" /trafika ", 2076.4241,-1851.7760,13.5469, -1, -1, 1318, 5.0);
Create3DandP(""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_server" /trafika ", 2284.1409,-1669.6038,15.1131, -1, -1, 1318, 5.0);
Create3DandP(""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_server" /trafika ", 2246.4448,-1378.7106,23.9922, -1, -1, 1318, 5.0);
Create3DandP(""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_server" /trafika ", 2077.4031,-1319.6155,23.9844, -1, -1, 1318, 5.0);
Create3DandP(""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_server" /trafika ", 1352.3274,-2240.0898,13.5469, -1, -1, 1318, 5.0);

// Streljana 
Create3DandP(""col_server"[ STRELJANA ]\n"col_white"Da trenirate skill - "col_server"/streljana", 300.3199,-138.5692,1004.0625, -1, -1, 1239, 2.0);
Create3DandP(""col_server"[ STRELJANA ]\n"col_white"Da trenirate skill - "col_server"/streljana", 300.2224,-127.9862,1004.0625, -1, -1, 1239, 2.0);
Create3DandP(""col_server"[ STRELJANA ]\n"col_white"Da trenirate skill - "col_server"/streljana", 300.3398,-135.5488,1004.0625, -1, -1, 1239, 5.0);
Create3DandP(""col_server"[ STRELJANA ]\n"col_white"Da trenirate skill - "col_server"/streljana", 300.2065,-130.9500,1004.0625, -1, -1, 1239, 5.0);

Create3DandP(""col_white"/rezultati\n"col_server" /sastavitiket\n"col_white"/podignitiket ", 1072.5559,2780.6948,-21.2831, -1, -1, 1239, 5.0);
//Create3DandP(""col_white"Da pogledate rezultate proslog kola kucajte\n"col_server" /rezultati ", 1600.9614, -1183.0543, 24.3658, -1, -1, 1239, 5.0);
//Create3DandP(""col_white"Da podignete dobitak kucajte\n"col_server" /podignitiket ", 1605.0454, -1183.0568, 24.3658, -1, -1, 1239, 5.0);

// kurve
CreateDynamic3DTextLabel(""col_red"Lisa: "col_white"Spremna sam za tebe, duso.\nDa krenete kucajte "col_red"/blowjob\n"col_server"1500$", -1, -2436.4424, 995.2935, -20.5350, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
CreateDynamic3DTextLabel(""col_red"Angelina: "col_white"Zelim da stavim nesto ukusno u usta.\nDa krenete kucajte "col_red"/blowjob\n"col_server"1500$",-1, -2436.6335, 1006.5629, -20.5350, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
CreateDynamic3DTextLabel(""col_red"Mia: "col_white"Spremna sam za tebe.\nDa krenete kucajte "col_red"/blowjob\n"col_server"1500$", -1, -2448.6267, 1006.4838, -20.5350, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
CreateDynamic3DTextLabel(""col_red"Sendy: "col_white"Zelis li malo zabave duso?.\nDa krenete kucajte "col_red"/blowjob\n"col_server"1500$", -1, -2448.4248, 996.1221, -20.5350, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);

CreateDynamic3DTextLabel("BANDERA SRECE\n\nStanite ovde i gledajte banderu\nkada neko donira gradu\nobogaticete se.", -1, 1133.5189, -936.0316, 47.7939, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
CreateDynamic3DTextLabel("TAJNI ULAZ\n\nUlaz za PD/SAJ\nZa ulaz pritisnite tipku\n ENTER ", -1, 1462.6173, -1005.6067, 57.5132, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);

// firme
Create3DandP(""col_white"Da kupite hranu kucajte\n"col_server" /menu ", 378.1259, -67.7236, 1001.5151, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da kupite hranu kucajte\n"col_server" /menu ", 1184.5096, 472.1461, -36.8220, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da kupite hranu kucajte\n"col_server" /menu ", 369.4863, -6.0172, 1001.8589, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da kupite hranu kucajte\n"col_server" /menu ", 450.3892, -83.6542, 999.5547, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da kupite hranu kucajte\n"col_server" /menu ", -786.3990, 500.0740, 1371.7422, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da kupite hranu kucajte\n"col_server" /menu ", 375.6081, -118.8045, 1001.4995, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da kupite pice kucajte\n"col_server" /drink ", -2656.1489, 1405.1801, 906.2734, -1, -1, 1512, 2.0);
Create3DandP(""col_white"Da kupite pice kucajte\n"col_server" /drink ", -2662.1855, 1405.1818, 906.2734, -1, -1, 1512, 2.0);
Create3DandP(""col_white"Da kupite pice kucajte\n"col_server" /drink ", -2662.1685, 1415.4471, 906.2734, -1, -1, 1512, 2.0);
Create3DandP(""col_white"Da kupite pice kucajte\n"col_server" /drink ", -2656.0698, 1415.4480, 906.2734, -1, -1, 1512, 2.0);
Create3DandP(""col_white"Da kupite pice kucajte\n"col_server" /drink ", 499.9696, -20.6968, 1000.6797, -1, -1, 1512, 2.0);
Create3DandP(""col_white"Da kupite pice kucajte\n"col_server" /drink ", -2394.6497, 1000.6146, -20.5350, -1, -1, 1512, 2.0);
Create3DandP(""col_white"Da kupite pice kucajte\n"col_server" /drink ", -2400.5559, 1006.5995, -20.5350, -1, -1, 1512, 2.0);
Create3DandP(""col_white"Da kupite pice kucajte\n"col_server" /drink ", -2406.7527,1000.5036,-20.5350, -1, -1, 1512, 2.0);
Create3DandP(""col_white"Da kupite pice kucajte\n"col_server" /drink ", -2400.6563, 994.4063, -20.5350, -1, -1, 1512, 2.0);

Create3DandP(""col_white"Da kupite pice kucajte\n"col_server" /drink ", 1325.7372, -875.4626, 39.5781, -1, -1, 1512, 2.0);
Create3DandP(""col_white"Da kupite pice kucajte\n"col_server" /drink ", 496.8239,-75.9065,998.7578, -1, -1, 1512, 2.0);
Create3DandP(""col_white"Da kupite pice kucajte\n"col_server" /drink ", 1757.189575, -1774.16549, 14.514637, -1, -1, 1512, 2.0);

Create3DandP(""col_white"Da platite putarinu kucajte\n"col_server" /putarina ", 47.1666,-1523.2726,5.1084, -1, -1, 1581, 20.0);
Create3DandP(""col_white"Da platite putarinu kucajte\n"col_server" /putarina ", 52.9225,-1539.5585,5.1292, -1, -1, 1581, 20.0);
Create3DandP(""col_white"Da platite putarinu kucajte\n"col_server" /putarina ", 1803.9178,802.5847,11.0822, -1, -1, 1581, 20.0);
Create3DandP(""col_white"Da platite putarinu kucajte\n"col_server" /putarina ", 1789.7760,791.9109,11.3088, -1, -1, 1581, 20.0);

Create3DandP(""col_white"Da naucite borbeni stil kucajte\n"col_server" /treniraj ", 771.0096,13.4834,1000.6988, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da kupite ilegalne stvari kucajte\n"col_server" /crnotrziste ", -66.4305,-1136.8323,2.2530, -1, -1, 19893, 3.0);
// Prevoznik
Create3DandP(""col_white"Da utovarite drvece kucajte\n"col_server" /prevozdrveca ", -569.0004, -93.3358, 63.9587, -1, -1, 1318, 10.0);
Create3DandP(""col_white"Da utovarite sljunak kucajte\n"col_server" /prevozsljunka ", 620.8951, 832.1742, -42.9609, -1, -1, 1318, 10.0);
// imanje
//Create3DandP(""col_white"Da kupite praznu gajbicu kucajte\n"col_server" /kupigajbicu ", 947.6482, -1653.0104, 13.5432, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da kupite semena za imanje kucajte\n"col_server" /kupiseme ", 300.1322, 1141.1545, 9.1374, -1, -1, 1239, 2.0);
//Create3DandP(""col_white"Da prodate kupus kucajte\n"col_server" /prodajkupus ", 947.7814, -1658.5892, 13.5466, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da prodate ruze kucajte\n"col_server" /prodajruze ", 426.6609, -1791.3032, 5.6260, -1, -1, 325, 2.0);

// 24/7 system
Create3DandP(""col_white"Da kupite stvari u RODA marketu kucajte\n"col_server" /roda ", -1376.177368, 2047.896728, 29.861936, -1, -1, 19592, 2.0);
Create3DandP(""col_white"Da kupite stvari iz korpe kucajte\n"col_server" /buy ", -28.0849,-89.9528,1003.5469, -1, -1, 19592, 2.0);
Create3DandP(""col_white"Pizza - "col_server" 100$", -14.8936,-85.8825,1003.5469, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Uze - "col_server" 200$", -19.8782,-81.7753,1003.5469, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Maska - "col_server" 800$", -19.8783,-77.0707,1003.5542, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Sok - "col_server" 40$", -25.0427,-74.3232,1003.5469, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Pivo - "col_server" 55$", -17.9551,-74.3143,1003.5542, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Hamburger - "col_server" 65$", -31.8768,-77.5130,1003.5469, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Piletina - "col_server" 250$", -17.2291,-81.3823,1003.5469, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Cigare - "col_server" 6000$", -37.3030,-76.5274,1003.5469, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Upaljac - "col_server" 4000$", -34.9580,-74.3164,1003.5469, -1, -1, 1239, 2.0);
Create3DandP(""col_white"SodaB - "col_server" 80$", -37.3028,-84.8486,1003.5469, -1, -1, 1239, 2.0);
Create3DandP(""col_white"DesVoda - "col_server" 40$", -37.2162,-80.3907,1003.5469, -1, -1, 1239, 2.0);
// Poslovi

new string_1[256];
for(new i = 0; i < MAX_JOBS; i++) {

	if(jobsInfos[i][jPos][0] != 0) {

		jobsInfos[i][jPickup] = acc_CreateDynamicPickup(19893, 1, jobsInfos[i][jPos][0], jobsInfos[i][jPos][1], jobsInfos[i][jPos][2], -1, -1);

		format(string_1, sizeof(string_1), ""col_white"[ "col_server"%s "col_white"]\n"col_server"Ugovor: "col_white"3 sata.\n"col_server"Zarada: "col_white"Ovisno o radu.\n"col_server"Zaposljavate se komandom "col_white"/takejob.", stringtoUpperCase(jobsInfos[i][jName]));

		CreateDynamic3DTextLabel(string_1, 0x008080FF, jobsInfos[i][jPos][0], jobsInfos[i][jPos][1], jobsInfos[i][jPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
	}

	if(jobsInfos[i][jUniformPos][0] != 0)
		Create3DandP(""col_white"Da uzmete/ostavite uniformu kucajte\n"col_server"[ /uniforma ]",  jobsInfos[i][jUniformPos][0], jobsInfos[i][jUniformPos][1], jobsInfos[i][jUniformPos][2], -1, -1, 19904, 10.0);}
//
Create3DandP(""col_white"Da operete prozor kucajte\n"col_server" /operiprozor ", 1836.7418, -1306.8981, 85.1337, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da operete prozor kucajte\n"col_server" /operiprozor ", 1836.5990, -1285.3838, 85.1337, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da operete prozor kucajte\n"col_server" /operiprozor ", 1836.3344, -1285.2307, 92.6290, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da operete prozor kucajte\n"col_server" /operiprozor ", 1836.4379, -1301.4036, 92.6290, -1, -1, 1239, 2.0);

Create3DandP(""col_white"Da narucite picu kucajte\n"col_server" /pizza naruci ",  379.1279, -118.8027, 1001.4922, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da uzmete/ostavite uniformu kucajte\n"col_server" /taxi duty ",  2766.1035, -1583.2134, -48.5485, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da pogledate listu i lokaciju poslova\n"col_server" /poslovi /otkaz ",  1470.9434,-1789.0674,-20.2831, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Cena 5 fakturi je "col_server"500$\n"col_white"Da kupite fakture za firmu kucajte\n"col_server" /kupifakture ",  1470.9441,-1794.0558,-20.2831, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da iznajmite/odjavite sobu kucajte\n"col_server" /iznajmisobu /odjavisobu ",  2217.3083, -1146.4053, 1025.7969, -1, -1, 1239, 5.0);
Create3DandP(""col_white"Da ozenite neku devojku kucajte\n"col_server" /zaprosi ", 725.3050, -1597.1079, 3.4530, -1, -1, 1239, 5.0);
Create3DandP(""col_white"Da kupite ilegalne supstance kucajte\n"col_server" /droga buyilegal ", 2834.8999,-2360.7681,26.8931, -1, -1, 1239, 5.0);
Create3DandP(""col_white"Da kupite kanticu (6500$) kucajte\n"col_server" /kupikanticu ", -23.5164, -55.6298, 1003.5469, -1, -1, 1239, 10.0);

Create3DandP(""col_server" AFK Zona \n"col_white"'ENTER' za izlaz", 1700.5277, -1667.7759, 20.2188, -1, -1, 19197, 10.0);
Create3DandP(""col_server" AFK Zona \n"col_white"'ENTER' za ulaz", 1471.4055, -1178.0507, 23.9228, -1, -1, 19197, 10.0);

Create3DandP(""col_white"Da udjete u DM zonu kucajte\n"col_server" /udjinadm ", 981.7814,-1162.0131,25.0859, -1, -1, 1239, 10.0);

Create3DandP(""col_white"Skladiste drva\n"col_server" /uzmidrvo ", 2159.8730, -2296.4348, 13.4891, -1, -1, 1239, 10.0);
Create3DandP(""col_white"Da postavite drvo na masinu\n"col_server" TIPKA Y ", 2149.6013, -2273.1235, 13.3047, -1, -1, 1239, 10.0);
Create3DandP(""col_white"Da uzmete drvo sa masine\n"col_server" TIPKA N ", 2144.5337, -2267.7898, 13.2944, -1, -1, 1239, 10.0);
Create3DandP(""col_white"Da postavite drvo na zanatski sto\n"col_server" /ostavidrvo ", 2129.8132, -2282.4976, 14.7825, -1, -1, 1239, 10.0);
Create3DandP(""col_white"Da postavite drvo na zanatski sto\n"col_server" /ostavidrvo ", 2125.7715, -2278.3010, 14.7825, -1, -1, 1239, 10.0);
Create3DandP(""col_white"Da postavite drvo na zanatski sto\n"col_server" /ostavidrvo ", 2121.8728, -2274.6519, 14.7825, -1, -1, 1239, 10.0);

Create3DandP(""col_white"Da natocite gorivo u cisternu\n"col_server" /natocicisternu ", 269.1654, 1465.2311, 10.5859, -1, -1, 1239, 10.0);

Create3DandP(""col_white" TUNING SHOP \n"col_server" /tune ", 695.6638, -1189.9620, 16.0697, -1, -1, 1239, 20.0);
Create3DandP(""col_white" TUNING SHOP \n"col_server" /neon ", 699.1390, -1183.1641, 16.0707, -1, -1, 1239, 20.0);

Create3DandP(""col_server" KUTIJE SA PEPSIJEM \n"col_white"Da uzmete kutiju sa pepsijem kucajte\n"col_server" /uzmikutiju ", 935.5441, -1605.5848, 14.0430, -1, -1, 1318, 20.0);

new hangarstring[256];
	format(hangarstring, sizeof(hangarstring), ""col_server"[ HANGAR ]\n"col_white"Da uzmete paket kucajte - "col_server"/uzmipaket\n"col_white"Trenutno ima "col_server"%d "col_white"paketa u hangaru", ServerInfo[HangarPaket]);
ServerInfo[HangarLabel] = CreateDynamic3DTextLabel(hangarstring, -1, -366.1427,-1044.2151,59.6480, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
acc_CreateDynamicPickup(1239, 1, -366.1427,-1044.2151,59.6480, -1);

new zlatonovacstring[256];
	format(zlatonovacstring, sizeof(zlatonovacstring), ""col_white"Trenutno u sefu ima "col_server"%d$\n"col_white"Da opljackate banku kucajte\n"col_server" [ /pljackajbanku]", ServerInfo[NovacBanka]);
ServerInfo[NovacLabel] = CreateDynamic3DTextLabel(zlatonovacstring, -1, -146.2926, 893.4095, -28.8590, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);

Create3DandP(""col_server"[ RUDNIK ]\n"col_white"'ENTER' za ulaz", 602.1806, 867.9139, -42.9609, -1, -1, 1239, 10.0);
Create3DandP(""col_server"[ RUDNIK ]\n"col_white"'ENTER' za izlaz", 611.9000,884.3919,-92.6696, -1, -1, 1239, 10.0);

format(zlatonovacstring, sizeof(zlatonovacstring), ""col_server" STANJE NOVCA \n"col_white"Trenutno u sefu ima "col_server"%d$\n"col_white"Maksimalno moze imati "col_server"1000000$\n"col_server"Addiko Bank", ServerInfo[NovacBanka]);
ServerInfo[NovacLabel2] = CreateDynamic3DTextLabel(zlatonovacstring, -1, 1505.7782,-1021.0037,23.8281, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);

format(zlatonovacstring, sizeof(zlatonovacstring), ""col_white"Trenutno u sefu ima "col_server"%dg "col_white"zlata\n"col_white"Da opljackate zlataru kucajte\n"col_server" /pljackajzlataru ", ServerInfo[Zlato]);
ServerInfo[ZlatoLabel] = CreateDynamic3DTextLabel(zlatonovacstring, -1, 1014.2900, 2319.7896, -19.7821, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
acc_CreateDynamicPickup(19941, 1, 1014.2900, 2319.7896, -19.7821);


// PAYSPRAY
Create3DandP(""col_white"Da popravite avion kucajte\n"col_server" /popraviavion \n"col_white"Cena: 5000$", 1865.6421, -2390.7712, 14.4759, -1, -1, 1239, 20.0);
Create3DandP(""col_white"Da popravite avion kucajte\n"col_server" /popraviavion \n"col_white"Cena: 5000$", -1525.4755, -81.9020, 15.0702, -1, -1, 1239, 20.0);
Create3DandP(""col_white"Da popravite avion kucajte\n"col_server" /popraviavion \n"col_white"Cena: 5000$", 1433.4257, 1379.8014, 11.7424, -1, -1, 1239, 20.0);

Create3DandP(""col_white"Da popravite auto kucajte\n"col_server" /enter \n"col_white"Cena: 6000$", 1099.1404, -824.9033, 181.2554, -1, -1, 19627, 10.0);
Create3DandP(""col_white"Da popravite auto kucajte\n"col_server" /enter \n"col_white"Cena: 6000$", 1024.9756, -1030.7930, 32.0257, -1, -1, 19627, 10.0);
Create3DandP(""col_white"Da popravite auto kucajte\n"col_server" /enter \n"col_white"Cena: 6000$", 488.3819, -1733.0563, 11.1752, -1, -1, 19627, 10.0);
Create3DandP(""col_white"Da popravite auto kucajte\n"col_server" /enter \n"col_white"Cena: 6000$", 719.8940, -464.8272, 16.3359, -1, -1, 19627, 10.0);
Create3DandP(""col_white"Da popravite auto kucajte\n"col_server" /enter \n"col_white"Cena: 6000$", 2074.6018, -1831.7043, 13.6468, -1, -1, 19627, 10.0);

Create3DandP(""col_white"Da prodate zlato kucajte\n"col_server" /prodajzlato \n"col_white"Cena 1 grama: 386$", 1026.3081, 2312.2776, -19.7883, -1, -1, 19941, 10.0);

// Ostalo

Create3DandP(""col_white"Da ides uzivo u program\n"col_server" /live ", 925.0778, -957.3702, -48.7380, -1, -1, 1239, 4.0);
Create3DandP(""col_white"Da das oglas kucajte\n"col_server" /ad ", 922.2605, -1009.6555, -48.7380, -1, -1, 1239, 4.0);

Create3DandP(""col_white"[ ARREST ]\n"col_server"Da privedete igraca - "col_white"/arrest", 1579.6222,-1631.8275,13.3828, -1, -1, 19418, 10.0);
Create3DandP(""col_white"[ ARREST ]\n"col_server"Da privedete igraca - "col_white"/arrest", 1568.8879,-1693.3973,5.8906, -1, -1, 19418, 10.0);

Create3DandP(""col_white"LifT\n"col_server" /lift ", 691.1639, 2005.1420, -22.3034, -1, -1, 1239, 2.0);
Create3DandP(""col_white"LifT\n"col_server" /lift ", 1571.845703, -1675.535034, 28.395463, -1, -1, 1239, 2.0);
Create3DandP(""col_white"LifT\n"col_server" /lift ", 1524.483032, -1677.824707, 6.218750, -1, -1, 1239, 2.0);

Create3DandP(""col_white"Da izvadite pasos kucajte\n"col_server" /izvadipasos \n"col_white"Cena: "col_server"5000$", 1470.9423,-1799.1124,-20.2832, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da respawnujete svoje vozilo kucajte\n"col_server" /respawnmycar \n"col_white"Cena: "col_server"15000$", 1495.2062,-1801.6985,-20.2832, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da prodate vozilo kucajte\n"col_server" /vozilo - Prodaja otpad ", 2203.2778,-6.5869,26.6885, -1, -1, 1239, 4.0);
Create3DandP(""col_white"Da overite papire za registraciju kucajte\n"col_server" /vehicle registruj ", 1470.9427,-1784.1099,-20.2831, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da uplatite lotto listic kucajte\n"col_server" /uplatilotto ", 1283.1210,-1544.3549,13.5323, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da podigne lotto dobitak kucajte\n"col_server" /podignidobitak ", 1283.1432,-1542.1858,13.5174, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da polazete kucajte\n"col_server" /kupidozvolu ", 2067.0439,-1887.2560,14.1737, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da kupite dozvolu za avion/brod kucajte\n"col_server" /kupidozvoluzaavion /kupidozvoluzabrod ", 2063.5569,-1887.2379,14.1737, -1, -1, 1239, 2.0);
Create3DandP(""col_server" Promoter baza \n"col_white"'ENTER' za ulaz", 1673.9718, 1967.7209, 10.8203, -1, -1, 19132, 2.0);
Create3DandP(""col_white"Da polazete srednju skolu kucajte\n"col_server" /lesson ", 1667.8092,-1379.7235,-48.9541, 1, 1, 1239, 2.0);
Create3DandP(""col_white"Da polazete osnovnu skolu kucajte\n"col_server" /lesson ", 1664.8800,-1367.4441,-48.9541, 2, 2, 1239, 2.0);
Create3DandP(""col_white"Da zavrsite fakultet kucajte\n"col_server" /lesson ", 1665.9690,-1392.0660,-48.95411, 3, 3, 1239, 2.0);
Create3DandP(""col_white"Da kupite seme droge kucajte\n"col_server" /droga buyseeds ", 870.3927, -24.9189, 63.9863, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Za kupovinu u apoteci koristite\n"col_server" /apoteka ", 1681.9349,-1177.7379,23.9859, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da kupite mobilni telefon kucajte\n"col_server" /kupikarticu /kupimobilni ", 1261.2616, -1650.1864, 13.6878, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da pogledati listu za prodaju kucajte\n"col_server" /kupielectronic ", 1261.2604, -1653.6630, 13.6878, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da kupite namestaj kucajte\n"col_server" /namestaj kupi ", 2375.2371,-1917.0723,13.9742, -1, -1, 1239, 2.0);

Create3DandP(""col_white"Ukoliko zelite popraviti vozilo\n"col_server" /govrepair ", 1529.141479, -1677.842773, 5.890625, 0, 0, 1239, 5.0);
Create3DandP(""col_white"Ukoliko zelite popraviti vozilo\n"col_server" /govrepair ", 1558.5233,-1627.2285,13.3828, 0, 0, 1239, 5.0);

Create3DandP(""col_white"Da uzmete tablice kucajte\n"col_server" /vehicle uzmitablice ", 699.9731, 1977.0692, -22.3034, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da upalite racunar kucajte\n"col_server" /computer ", 693.5520, 1990.0642, -22.3034, -1, -1, 1239, 2.0);

Create3DandP(""col_white" /mduty \n"col_server" /muniform ", -2287.8516, 88.6287, -5.3042, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da se izlecite kucajte\n"col_server" /lek ", -2322.9973, 110.1389, -5.3942, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da izlecite zavisnost (25000$) kucajte\n"col_server" /izlecizavisnost ", -2323.0134, 113.0339, -5.3942, -1, -1, 1239, 2.0);

Create3DandP(""col_white" /droga osusi marihuana \n"col_server" /droga osusi kokain ", -1477.9165, 2617.5532, 58.7813, -1, -1, 1239, 2.0);
Create3DandP(""col_white" /droga osusi marihuana \n"col_server" /droga osusi kokain ", -1478.0580, 2623.5916, 58.7813, -1, -1, 1239, 2.0);
Create3DandP(""col_white" /droga osusi marihuana \n"col_server" /droga osusi kokain ", -1478.0391, 2628.3794, 58.7813, -1, -1, 1239, 2.0);
Create3DandP(""col_white" /droga osusi marihuana \n"col_server" /droga osusi kokain ", -1478.0297, 2634.2178, 58.7879, -1, -1, 1239, 2.0);

Create3DandP(""col_white" /stanje /podigni /ostavi \n"col_server" /transfer /podignikredit /kredit ", -169.4186, 913.5535, -15.5464, -1, -1, 1239, 2.0);
Create3DandP(""col_white" /stanje /podigni /ostavi \n"col_server" /transfer /podignikredit /kredit ", -164.3699, 913.7142, -15.5464, -1, -1, 1239, 2.0);

Create3DandP(""col_white"Tehnicki pregled - 15000$\n"col_server" /tehnickipregled ", 1990.5493,-1598.7896,14.8649, -1, -1, 1581, 10.0);

Create3DandP(""col_white"Da otvorite bankovni racun kucajte\n"col_server" /otvoriracun ", -167.1698, 913.5754, -15.5464, -1, -1, 1581, 2.0);
Create3DandP(""col_white"Da uzmete rezultate narco testa kucajte\n"col_server" /narcoresults ", -2292.2214, 104.6003, -5.3468, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da kupite objekte kucajte\n"col_server" /objects kupi ", 2196.9570,-2.2537,26.5393, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Ukoliko zelite da obucete uniformu tjelohranitelja\n"col_server" /uniformbodyguard ", 1271.9607, -814.5180, 1089.9375, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Ukoliko zelite da obucete uniformu vozaca\n"col_server" /uniformdriver ", 1271.9609, -812.2278, 1089.9375, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Da kupite kacigu kucajte\n"col_server" /kupikacigu ", 1978.6816,-2062.4297,14.0780, -1, -1, 1239, 2.0);

//GUNSHOP
Create3DandP(""col_white"9mm Pistol\nCena: 5000$\nDMG:"col_red" 8.25\n"col_white"Prisnite "col_server"'Y'"col_white" da bi kupili oruzje.", 1207.75,-735.7791,1139.25, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Desert Eagle\nCena: 9000$\nDMG:"col_red" 46.20\n"col_white"Prisnite "col_server"'Y'"col_white" da bi kupili oruzje.", 1207.75,-737.7961,1139.25, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Shotgun\nCena: 8000$\nDMG:"col_red" 25.6hp\n"col_white"Prisnite "col_server"'Y'"col_white" da bi kupili oruzje.", 1207.75,-738.7451,1139.25, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Sawn-Off Shotgun\nCena: 15000$\nDMG:"col_red" 25.6hp\n"col_white"Prisnite "col_server"'Y'"col_white" da bi kupili oruzje.", 1194.8733,-722.25,1139.25, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Combat Shotgun\nCena: 15000$\nDMG:"col_red" 25.6hp\n"col_white"Prisnite "col_server"'Y'"col_white" da bi kupili oruzje.", 1207.75,-736.8102,1139.25, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Micro Uzi\nCena: 8000$\nDMG:"col_red" 6.60\n"col_white"Prisnite "col_server"'Y'"col_white" da bi kupili oruzje.", 1193.8623,-722.25,1139.25, -1, -1, 1239, 2.0);
Create3DandP(""col_white"MP 5\nCena: 10000$\nDMG:"col_red" 8.25\n"col_white"Prisnite "col_server"'Y'"col_white" da bi kupili oruzje.", 1192.8619,-722.25,1139.25, -1, -1, 1239, 2.0);
Create3DandP(""col_white"AK 47\nCena: 12000$\nDMG:"col_red" 9.90\n"col_white"Prisnite "col_server"'Y'"col_white" da bi kupili oruzje.", 1207.5770,-734.475,1139.25, -1, -1, 1239, 2.0);
Create3DandP(""col_white"M 4\nCena: 12000$\nDMG:"col_red" 9.90\n"col_white"Prisnite "col_server"'Y'"col_white" da bi kupili oruzje.", 1205.2898,-734.475,1139.25, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Tec 9\nCena: 8000$\nDMG:"col_red" 6.60\n"col_white"Prisnite "col_server"'Y'"col_white" da bi kupili oruzje.", 1191.6,-725.8359,1139.25, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Country Rifle\nCena: 12000$\nDMG:"col_red" 24.75\n"col_white"Prisnite "col_server"'Y'"col_white" da bi kupili oruzje.", 1191.6,-723.8087,1139.25, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Sniper Rifle\nCena: 12000$\nDMG:"col_red" 41.25\n"col_white"Prisnite "col_server"'Y'"col_white" da bi kupili oruzje.", 1191.6,-724.8208,1139.25, -1, -1, 1239, 2.0);
Create3DandP(""col_white"Pancir\nCena: 7000$\n"col_white"Prisnite "col_server"'Y'"col_white" da bi kupili pancir.", 1204.9657,-738.9355,1139.25, -1, -1, 1239, 2.0);
//Create3DandP(""col_white"Municija\n"col_white"Prisnite "col_server"'Y'"col_white" da bi kupili pakete se municijom.", 1202.3402,-732.4146,1139.25, -1, -1, 1239, 2.0);

//RIBAR
Create3DandP(""col_server"[ PECANJE ]\n"col_white"Da pecate kucajte -"col_server" /pecaj", 1238.8718,-2350.1252,10.4865, -1, -1, 1239, 6.0);
Create3DandP(""col_server"[ PECANJE ]\n"col_white"Da pecate kucajte -"col_server" /pecaj", 1227.4233,-2350.8772,10.4211, -1, -1, 1239, 6.0);
Create3DandP(""col_server"[ PECANJE ]\n"col_white"Da pecate kucajte -"col_server" /pecaj", 1214.5383,-2357.3013,10.4330, -1, -1, 1239, 6.0);
Create3DandP(""col_server"[ PECANJE ]\n"col_white"Da pecate kucajte -"col_server" /pecaj", 1206.5417,-2366.9084,10.0958, -1, -1, 1239, 6.0);
Create3DandP(""col_server"[ PECANJE ]\n"col_white"Da pecate kucajte -"col_server" /pecaj", 1203.9843,-2376.2563,10.0980, -1, -1, 1239, 6.0);
Create3DandP(""col_server"[ PECANJE ]\n"col_white"Da pecate kucajte -"col_server" /pecaj", 1207.9946,-2391.5447,9.9624, -1, -1, 1239, 6.0);
Create3DandP(""col_server"[ PECANJE ]\n"col_white"Da pecate kucajte -"col_server" /pecaj", 1217.6484,-2402.7642,10.0419, -1, -1, 1239, 6.0);
Create3DandP(""col_server"[ PECANJE ]\n"col_white"Da pecate kucajte -"col_server" /pecaj", 1233.4968,-2412.7041,10.0317, -1, -1, 1239, 6.0);
Create3DandP(""col_server"[ PECANJE ]\n"col_white"Da pecate kucajte -"col_server" /pecaj", 1233.4968,-2412.7041,10.0317, -1, -1, 1239, 6.0);
Create3DandP(""col_server"[ PECANJE ]\n"col_white"Da pecate kucajte -"col_server" /pecaj", 1265.9780,-2402.8337,10.3362, -1, -1, 1239, 6.0);
Create3DandP(""col_server"[ PECANJE ]\n"col_white"Da pecate kucajte -"col_server" /pecaj", 1265.9780,-2402.8337,10.3362, -1, -1, 1239, 6.0);
Create3DandP(""col_server"[ PECANJE ]\n"col_white"Da pecate kucajte -"col_server" /pecaj", 1278.2319,-2376.1472,10.2087, -1, -1, 1239, 6.0);
Create3DandP(""col_server"[ PECANJE ]\n"col_white"Da pecate kucajte -"col_server" /pecaj", 1268.4220,-2358.2979,10.1833, -1, -1, 1239, 6.0);
Create3DandP(""col_server"[ STAP ZA PECANJE ]\n"col_white"Da uzmete stap kucajte - "col_server"/uzmistap", 1156.2810,-2344.9553,13.5774, -1, -1, 1239, 6.0);
Create3DandP(""col_server"[ PRODAJA RIBE ]\n"col_white"Da prodate ribu kucajte - "col_server"/prodajribu", 1149.903808, -2347.496093, 13.149600, -1, -1, 1239, 6.0);
Create3DandP(""col_server"[ OPREMA ZA PECANJE ]\n"col_white"Da uzmete opremu - "col_server"/ribaroprema", 1142.2483,-2348.5747,13.1496, -1, -1, 19904, 5.0);}
//------------------------------------------------------------------------------

public OnGameModeInit() {
print("[BAZA] Ucitavanje moda u toku...");

SetVehiclePassengerDamage(true);
SetDisableSyncBugs(true);
SetCbugAllowed(false);
SetGameModeText(VERZIJA_MODA);
SendRconCommand("language "MAP_NAME"");
SendRconCommand("mapname Fusion City");

onlinepl=NumberOfConnectedPlayers();
ReakcijaAktivna = 0;
oSkolaLimit = 0; 
sSkolaLimit = 0;  
FakultetLimit = 0; 

vagonSpawn = acc_AddStaticVehicle(590,1260.2913,-1334.7225,15.1090,270.3624,1,1); // Old train spawn - Vagon

EnableStuntBonusForAll(0);
ac_DisableInteriorEnterExits();
ManualVehicleEngineAndLights();
ac_UsePlayerPedAnims();
AllowInteriorWeapons(1);
ShowPlayerMarkers(2);
CreateServerObjects();

// Russian Mafia FIXED
CreateDynamicObject(19447, 668.01288, -1215.94348, 23.24290,   0.00000, 0.00000, 323.33191);
CreateDynamicObject(19447, 668.01288, -1215.94348, 16.24260,   0.00000, 0.00000, 323.33191);
CreateDynamicObject(19447, 668.01288, -1215.94348, 19.74160,   0.00000, 0.00000, 323.33191);
CreateDynamicObject(19865, 654.61658, -1236.12988, 16.90306,   0.00000, 0.00000, 243.55545);
CreateDynamicObject(19865, 654.61658, -1236.12988, 14.90700,   0.00000, 0.00000, 243.55550);

SetTimer("HangarPonovo", 600000, true);

LoadScriptfiles();
	LoadVehicles();
CreateMapIcons();
CreateTextDraws();
DefineGatesAndDoors();
CreatePickupsAnd3Ds();
ResetAllFarmPlants();
PostaviParoveKladionica();

Streamer_VisibleItems(STREAMER_TYPE_OBJECT,1000);
Streamer_MaxItems(STREAMER_TYPE_OBJECT, 1000);

gettimeEx(ghour, gminute, gsecond);
FixHour(ghour);
ghour = shifthour;
if(!realtime) {
	SetWorldTime(wtime);
	ServerInfo[VremeInGame] = wtime;}

AntiDeAMX();

// za fly hack, minx, miny, maxx, maxy
farmerField = CreateDynamicRectangle(-1198.3669, -1065.8173, -1002.0459, -909.7990);
bankSafe = CreateDynamicRectangle(-149.2814, 901.9318, -143.2014, 887.5654);
ZlataraSef = CreateDynamicRectangle(1018.5888, 2321.5461, 1010.3766, 2317.0278);
SpawnZona = CreateDynamicRectangle(2077.6069, -1376.4921, 2278.8359, -1301.9821);
FarmerPosao = CreateDynamicRectangle(-1224.0177, -1220.6852, -1027.5038, -1064.8070);
GradjPosao = CreateDynamicRectangle(2377.9812, -1373.5167, 2444.1853, -1264.4025);
SSB = CreateDynamicRectangle(1951.0851, -1744.1436, 1966.6748, -1723.7572);
KosacMost = CreateDynamicRectangle(1956.7731, -1262.3374, 1985.3881, -1138.9209);
roykuca = CreateDynamicRectangle(34.8520, -1714.1517, 89.9251, -1591.5914);
ZgradaNeka = CreateDynamicRectangle(1521.3862, -1378.1085, 1564.0503, -1333.2006);
GSFMost = CreateDynamicRectangle(2412.8169, -1722.5156, 2447.5449, -1575.6823);
VipBaza = CreateDynamicRectangle(-450.3736, 486.3196, -320.9975, 538.7061);

	plift1 = CreateDynamicObject(1465, 1836.95374, -1314.46753, 16.7479,   180.00000, 0.00000, -90.00000);
plift2 = CreateDynamicObject(1465, 1836.93396, -1294.26758, 16.7479,   180.00000, 0.00000, -90.00000);
plift3 = CreateDynamicObject(1465, 1836.93396, -1274.06409, 16.7479,   180.00000, 0.00000, -90.00000);

//-------[Interijeri]--------
//ime, ulaz xyz, izlaz xyz, int unutra, int spolja, vw unutra, vw spolja
KreirajInterijer("Streljana", 1791.8759,-1163.2013,23.8281, 303.9135,-141.7095,1004.0625, 7, 0, 1, 0);
KreirajInterijer("Opstina", 1478.7227,-1815.8688,13.6671, 1481.2053,-1769.1366,-19.1614, 1, 0, 1, 0);
	KreirajInterijer("Srednja skola", 1207.3995, -1439.3033, 13.3828, 1651.6290, -1357.8191, -47.0116, 1, 0, 1, 0);
KreirajInterijer("Osnovna skola", 154.9511, -1612.9763, 15.9293, 1651.6290, -1357.8191, -47.0116, 2, 0, 2, 0);
KreirajInterijer("Fakultet", 1396.974365, -1569.725341 ,14.266695, 1651.6290, -1357.8191, -47.0116, 3, 0, 3, 0);
KreirajInterijer("ZatvorUlaz", -2320.4893, 1878.6583, 8.1210, 252.7024, 1651.1866, -99.2422, 1, 0, 1, 0);
//KreirajInterijer("Kramarv2", 542.4155, -1293.8409, 17.2422, 541.1884, -1293.7137, -47.0571, 0, 0, 0, 0);
KreirajInterijer("Zlatara", 1421.4336,-1178.0510,25.9922, 1026.2103, 2303.5303, -19.7883, 1, 0, 1, 0);
KreirajInterijer("Addiko Bank", 1460.8054,-1022.2814,23.8276, -164.8949, 903.4982, -15.5464, 0, 0, 0, 0);
KreirajInterijer("Air Shop", 2059.0564, -2206.8806, 13.8327, 2061.1877, -2206.8840, 13.8327, 0, 0, 0, 0);
KreirajInterijer("Igraonica", 1190.1510,-901.2849,45.1790, 1465.4497, 1418.6481, -5.0676, 1, 0, 1, 0);
KreirajInterijer("Fusion Tower", 1570.4320,-1337.4327,16.4844, 1548.6763,-1363.7419,326.2183, 0, 0, 0, 0);
KreirajInterijer("Apoteka", 1700.0530,-1170.0298,23.8281, 1698.9908,-1172.9342,23.9859, 0, 0, 0, 0);
KreirajInterijer("Bolnica", 1173.3430,-1323.4167,15.3931, -2330.1714,111.5213,-5.3942, 5, 0, 5, 0);
//1059.9526, 2785.6584, -21.2529 - kladionica unutra
// casino int
CreateDynamicObject(14777,211.85473633,404.94235229,1021.71655273,0.00000000,0.00000000,0.00000000); //object(int_5weecasino) (1)
//

for(new askid = 1; askid < MAX_ASKQS; askid++) {
	askqList[askid][askqSend] = false;
	askqList[askid][askqID] = -1;

	strmid(askqList[askid][askqOwner], "None", 0, strlen("None"), 32);
	strmid(askqList[askid][askqQuestion], "None", 0, strlen("None"), 128);}

if(realtime) {
	new tmphour,
		tmpminute,
		tmpsecond,
		year,
		month,
		day,
		stringicc[20];

	getdate(year, month, day);
	gettimeEx(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	
	tmphour = shifthour;
	SetWorldTime(tmphour);
	ServerInfo[VremeInGame] = tmphour;

	format(stringicc, sizeof(stringicc), "%s%d:%s%d~n~%d/%d/%d", (tmphour < 10) ? ("0") : (""), tmphour, (tmpminute < 10) ? ("0") : (""), tmpminute, day, month, year);
	TextDrawSetString(FG_InGame[15], stringicc);}

if(ServerInfo[Update] == true)
{
	SendRconCommand("hostname Fusion Gaming - Maintenance Break");
	SendRconCommand("password fgrpg_fusioN121");		
}
return true;}

public OnGameModeExit() {
for(new f = 0; f < MAX_Business; f++) {
	new gFile[40];
	format(gFile, 40, F_FILE, f);
	if(fexist(gFile)) {
		SaveBusiness(f);
	}
}
for(new c = 0; c < MAX_CARS; c++) {
	new gFile[40];
	format(gFile, 40, V_FILE, c);
	if(fexist(gFile)) {
		SaveVehicle(c);
	}
}
for(new im = 0; im < MAX_IMOVINA; im++) {
	new gFile[40];
	format(gFile, 40, IM_FILE, im);
	if(fexist(gFile)) {
		SaveProperty(im);
	}
}
for(new x; x<MAX_PLAYERS; x++)
{
	if(noclipdata[x][cameramode] == CAMERA_MODE_FLY) CloseCamEditor(x);}
foreach(new i : Player) {
	Fusion_KillTimer(gZone_Timer[i]);
	Fusion_KillTimer(zauzimanje_firme_Timer[i]);
	Fusion_KillTimer(TimerLearn[i]);
	Fusion_KillTimer(LoginTimer[i]);
	Fusion_KillTimer(atmrobTimer[i]);
	//Fusion_KillTimer(EffectTimer[i]);
	Fusion_KillTimer(SkolaTimer[i]);
	Fusion_KillTimer(TimerPitanje[i]);
	Fusion_KillTimer(RentTimer[i]);
	Fusion_KillTimer(DragTimer[i]);
	Fusion_KillTimer(TimerTutorial[i]);
	Fusion_KillTimer(FarbanjeTimer[i]);
	Fusion_KillTimer(PProzoraTimer[i]);
	Fusion_KillTimer(BolnicaTimer[i]);
	Fusion_KillTimer(TaxiTimer[i]);
	Fusion_KillTimer(TazerTimer[i]);
	Fusion_KillTimer(TrashTimer[i]);
	Fusion_KillTimer(PilotTimer[i]);
	Fusion_KillTimer(FarbanjeTimer[i]);
	Fusion_KillTimer(TravaTimer[i]);
	Fusion_KillTimer(PljackanjeBankeTimer[i]);
	Fusion_KillTimer(PljackanjeZlatareTimer[i]);
	Fusion_KillTimer(rudarPosao[i][rudarTimer]);
	Fusion_KillTimer(vocarPosao[i][vocarTimer]);
	Fusion_KillTimer(drvosecaPosao[i][drvoTimer]);}
return true;}

stock CheckWeapons(i) {
if(antiCheatSS[antiWeaponH] == true) {
	if(antiCheatCS[i][WeaponDetect] <= 0) {
		if(NaDmEventu[i] == false && antiCheatCS[i][WeaponCheck] == 1 && WARPInfo[i][WARIgrac] == -1 && GetPlayerSpecialAction(i) != SPECIAL_ACTION_ENTER_VEHICLE && GetPlayerSpecialAction(i) != SPECIAL_ACTION_EXIT_VEHICLE) {

			new bullets[MAX_W_SLOTS], weapon[MAX_W_SLOTS];
			for(new wslot = 0; wslot < MAX_W_SLOTS; wslot++) {

				bullets[wslot] = 0; weapon[wslot] = 0;

				GetPlayerWeaponData(i, wslot, weapon[wslot], bullets[wslot]);

				if(IsValidWeapon(weapon[wslot]) && !Fusion_IsGiveVehicleWeapon(weapon[wslot])) {

					if(antiCheatCS[i][Weapon][wslot] != weapon[wslot] && weapon[wslot] != 0 && bullets[wslot] != 0) {

						antiCheatCS[i][TakenWeapon] = weapon[wslot];
						OnPlayerCheat(i, DETECT_WEAPON_HACK, 0, 0);
					}
					else if(((antiCheatCS[i][Ammo][wslot] - bullets[wslot]) < 0) && Fusion_IsNotWeaponNoAmmo(weapon[wslot]) && weapon[wslot] != 0) {

						antiCheatCS[i][TakenWeapon] = weapon[wslot];
						OnPlayerCheat(i, DETECT_AMMO_HACK, bullets[wslot], antiCheatCS[i][Ammo][wslot]);
					}
					else if(antiCheatCS[i][Weapon][wslot] != 0 && weapon[wslot] == 0 && bullets[wslot] == 0) {

						antiCheatCS[i][Weapon][wslot] = 0;
						antiCheatCS[i][Ammo][wslot] = 0;
					}
					else if(bullets[wslot] != 0) antiCheatCS[i][Ammo][wslot] = bullets[wslot];

				}
			}
		}
	}
	else {
		antiCheatCS[i][WeaponDetect]--;
	}

}
}

stock GetXYZInFrontOfPlayer(playerid, &Float: xbr, &Float: ybr, &Float: zbr, Float: distance) {
new Float: a;

GetPlayerPos (playerid, xbr, ybr, zbr);
GetPlayerFacingAngle (playerid, a);

xbr += (distance * floatsin (-a, degrees));
ybr += (distance * floatcos (-a, degrees));}

stock CheckTeleports(i) {

if(antiCheatSS[antiflyH] == true) {
	if(antiCheatCS[i][TeleportCheck] <= 0 && WatchingTV{ i } == 0 && GetPlayerState(i) == PLAYER_STATE_ONFOOT) {
		if(!AdminDuty[i] && GetPlayerSpecialAction(i) != SPECIAL_ACTION_USEJETPACK && GetPlayerWeapon(i) != 46) {
			if(GetPlayerAnimationIndex(i) != 1195 && GetPlayerAnimationIndex(i) != 1130) {
				if(GetPlayerSurfingVehicleID(i) == INVALID_VEHICLE_ID && GetPlayerSurfingObjectID(i) == INVALID_OBJECT_ID && GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == 0) {

					if(!IsPlayerInDynamicArea(i, GradjPosao) &&
						!IsPlayerInDynamicArea(i, FarmerPosao) &&
						!IsPlayerInDynamicArea(i, SpawnZona) &&
						!IsPlayerInDynamicArea(i, SSB) &&
						!IsPlayerInDynamicArea(i, KosacMost) &&
						!IsPlayerInDynamicArea(i, roykuca) &&
						!IsPlayerInDynamicArea(i, ZgradaNeka) &&
						!IsPlayerInDynamicArea(i, VipBaza) &&
						!IsPlayerInDynamicArea(i, GSFMost))
					{

						new Float:Pos[5];
						GetPlayerPos(i, Pos[0], Pos[1], Pos[2]);
					
						Pos[4] = floatsub(Pos[2], Pos[3]);
						if(Pos[4] > 10 && FlyMode[i] == false) {
							OnPlayerCheat(i, DETECT_FLY_HACK, 0, 0);
						}
					}
				}
			}
		}
	}
}

if(antiCheatSS[antiTeleportH] == true) {

	new Float:Pos[3];
	GetPlayerPos(i, Pos[0], Pos[1], Pos[2]);

	if(antiCheatCS[i][TeleportCheck] <= 0) {
		if((Pos[2] < 900.0) == (antiCheatCS[i][TeleportPos][2] < 900.0)) {

			if(GetPlayerState(i) != PLAYER_STATE_PASSENGER && WatchingTV{ i } == 0 && GetPlayerSurfingVehicleID(i) == INVALID_VEHICLE_ID && PlayerInfo[i][xPocetniTut] == 1 && !IsVehicleLetelica(GetPlayerVehicleID(i)) && FlyMode[i] == false) {

				if(!IsPlayerInRangeOfPoint(i, 100.0, antiCheatCS[i][TeleportPos][0], antiCheatCS[i][TeleportPos][1], antiCheatCS[i][TeleportPos][2])) {

					antiCheatCS[i][TeleportHack]++;
					if(antiCheatCS[i][TeleportHack] >= 3 || IsCheatPosition(i)) {
						OnPlayerCheat(i, DETECT_TELEPORT_HACK, 0, 0);
					}
				}
			}
		}
	}
	else {
		antiCheatCS[i][TeleportCheck]--;
	}
	antiCheatCS[i][TeleportPos][0] = Pos[0];
	antiCheatCS[i][TeleportPos][1] = Pos[1];
	antiCheatCS[i][TeleportPos][2] = Pos[2];}
}

public OnPlayerRequestClass(playerid, classid) {
if(PlayerLogged[playerid] == true && PlayerInfo[playerid][xRegistrovan] != 0) {
	Fusion_SetSpawnInfo(playerid);
	ac_SpawnPlayer(playerid);}
else return false;
return true;}

forward Login(playerid);
public Login(playerid) {
ac_TogglePlayerSpectating(playerid, 1);
InterpolateCameraPos(playerid, 1368.794189, -919.828735, 99.369522, 1470.579956, -890.853942, 79.879432, 7000, CAMERA_MOVE);
InterpolateCameraLookAt(playerid, 1371.038574, -915.491821, 98.295425, 1468.962768, -886.160644, 79.281410, 7000, CAMERA_MOVE);
ClearChat(playerid, 25);
Fusion_KillTimer(LoginTimer[playerid]);
LoginTimer[playerid] =  SetTimerEx("LoginKick", 60000, 0, "d", playerid);
//LoginTDControl(playerid, true);
format(sDStrg, sizeof(sDStrg),DialogTekstovi[0], MAX_POKUSAJ_LOGINA);
EnableAntiCheatForPlayer(playerid, 2, 0);
EnableAntiCheatForPlayer(playerid, 7, 0);
EnableAntiCheatForPlayer(playerid, 9, 0);
EnableAntiCheatForPlayer(playerid, 0, 0);
FirstSpawn[playerid] = 1;
SPD(playerid, dialog_LOGIN, DSP, D_NASLOV, sDStrg, D_ODABERI, D_ODUSTANI);
return 1;}

public Register(playerid) {
//ac_TogglePlayerSpectating(playerid, true);
new rand = random(sizeof(RegisterSpawn1));
new ranims = random(sizeof (RandomRegAnims));

antiCheatCS[playerid][TeleportPos][0] = RegisterSpawn1[rand][0];
antiCheatCS[playerid][TeleportPos][1] = RegisterSpawn1[rand][1];
antiCheatCS[playerid][TeleportPos][2] = RegisterSpawn1[rand][2];

EnableAntiCheatForPlayer(playerid, 2, 0);
EnableAntiCheatForPlayer(playerid, 7, 0);
EnableAntiCheatForPlayer(playerid, 9, 0);
EnableAntiCheatForPlayer(playerid, 0, 0);

TeleportNexAc[playerid] = true;

SetSpawnInfo(playerid, 0, PlayerInfo[playerid][xSkin], RegisterSpawn1[rand][0], RegisterSpawn1[rand][1], RegisterSpawn1[rand][2], 90.00, 0, 0, 0, 0, 0, 0);
antiCheatCS[playerid][TeleportCheck] = 4;
ac_SpawnPlayer(playerid);

ac_Streamer_UpdateEx(playerid, 94.1184, 1667.2339, -20.0000, playerid+1, playerid+1);
SetPlayerFacingAngle(playerid, 0);
ApplyAnimation(playerid, RandomRegAnims[ranims][0], RandomRegAnims[ranims][1], 4.0, 1, 1, 1, 0, -1);
fg_info_tds(playerid, false);

SetTimerEx("RegisterCam", 10000, false, "d", playerid);
InterpolateCameraPos(playerid, 106.1271, 1671.8383, -28.6776, 93.0561, 1671.9596, -29.3714, 10000);
InterpolateCameraLookAt(playerid, 107.1268, 1671.8584, -28.6776, 93.0291, 1670.9606, -29.4064, 9000);

ClearChat(playerid, 25);
RegisterTDControl(playerid, true);
EnableHealthBarForPlayer(playerid, false);
SelectTextDraw(playerid, FUSIONGAMING);
IgracSeRegistruje[playerid] = true;

ac_SetPlayerInterior(playerid, playerid+1);
SetPlayerVirtualWorld(playerid, playerid+1);
return true;}
forward RegisterCam(playerid);
public RegisterCam(playerid) {
SetPlayerCameraPos(playerid, 93.0561, 1671.9596, -29.3714);
SetPlayerCameraLookAt(playerid, 93.0291, 1670.9606, -29.4064);}

forward LoginKick(playerid);
public LoginKick(playerid) {
Fusion_KillTimer(LoginTimer[playerid]);
SetTimerEx("KickIgraca", 1000, 0, "d", playerid);}

forward Fusion_Kick(playerid);
public Fusion_Kick(playerid) {
SetTimerEx("KickIgraca", 1000, 0, "d", playerid);}

timer DuelTimer[1000](playerid, id)
{
if(DuelCount[playerid] != 0)
{
	va_GameTextForPlayer(playerid, "%d", 1000, 3, DuelCount[playerid]);
	va_GameTextForPlayer(id, "%d", 1000, 3, DuelCount[playerid]);
	DuelCount[playerid]--;
	defer DuelTimer(playerid,id);}
else
{
	GameTextForPlayer(playerid, "~g~KRENI~", 1000, 3);
	GameTextForPlayer(id, "~g~KRENI~", 1000, 3);
	TogglePlayerControllable(playerid, 1);
	TogglePlayerControllable(id, 1);}
return 1;}

NumberOfConnectedPlayers() {
new Connected = 0;
foreach(new i : Player) if(IsPlayerConnected(i) && !IsPlayerNPC(i)) Connected++;
return Connected;}

public OnPlayerConnect(playerid) {

SendInfoMessage(playerid, "Ucitavanje servera, sacekajte malo...");

ServerInfo[BrojPosetaServeru]++;

RekordTimer(playerid);
RemoveServerObjects(playerid);
ResetPlayer(playerid);

ac_TogglePlayerSpectating(playerid, 1);
SetPlayerVirtualWorld(playerid, (playerid + 2000));
SetPlayerColor(playerid, 0xAFAFAF00);
PlayAudioStreamForPlayer(playerid, "https://fg-rpg.com/music/fg_connect.mp3");
ClearChat(playerid, 128);

new Float: AltChat_posY = 229.573348,
	Float: AltChat_YSpacing = 240.026733 - 229.573348;

for(new i = 0; i < MAX_LINES; i ++)
	{
	AltChatTD_Player[i] = CreatePlayerTextDraw(playerid, 35.599971, AltChat_posY, " ");
	PlayerTextDrawLetterSize(playerid, AltChatTD_Player[i], 0.21, 0.9);
	PlayerTextDrawAlignment(playerid, AltChatTD_Player[i], 1);
	PlayerTextDrawColor(playerid, AltChatTD_Player[i], -1);
	PlayerTextDrawSetShadow(playerid, AltChatTD_Player[i], 0);
	PlayerTextDrawSetOutline(playerid, AltChatTD_Player[i], 1);
	PlayerTextDrawBackgroundColor(playerid, AltChatTD_Player[i], 255);
	PlayerTextDrawFont(playerid, AltChatTD_Player[i], 1);
	PlayerTextDrawSetProportional(playerid, AltChatTD_Player[i], 1);
	PlayerTextDrawSetShadow(playerid, AltChatTD_Player[i], 0);

	strmid(AltChatTD_Text[playerid][i], " ", 0, 1);
	AltChat_posY += AltChat_YSpacing;}

CreatePlayerTextDraws(playerid);
PreloadAnimations(playerid);

new playersip[128];
GetPlayerIp(playerid, playersip, sizeof(playersip));
new string[128];

format(string, sizeof(string), "Igrac: %s | IP: %s ", ImeIgraca(playerid), playersip);
LogSave("Ostalo/LogConnect.log", string);

	if(fexist(Korisnici(playerid)))
{
	INI_ParseFile(Korisnici(playerid), "OcitajKorisnika", .bExtra = true, .extra = playerid);

	if(PlayerInfo[playerid][xBDays] > 0)
	{
		new year,day,month;
		getdate(year, month, day);

		if(PlayerInfo[playerid][xBDays] > day && PlayerInfo[playerid][xBMonths] >= month && PlayerInfo[playerid][xBYears] >= year)
		{
			SCM(playerid, CRVENA, "__________________BAN________________");
			SendClientMessageEx(playerid, BELA, ""col_white"Banovan si sa ovog servera do "col_server"%d/%d/%d"col_white".", PlayerInfo[playerid][xBDays], PlayerInfo[playerid][xBMonths], PlayerInfo[playerid][xBYears]);
			SCM(playerid, BELA, ""col_white"Ukoliko mislis da je ovo greska.");
			SCM(playerid, BELA, ""col_white"Zahtev za unban mozes traziti na "col_server"forumu."col_white"");
			SCM(playerid, BELA, ""col_white"Forum: "col_server"www.fg-rpg.com");
			SCM(playerid, CRVENA, "_____________________________________");
			Kickovanje(playerid, " ");
			return 1;
		}
	}

	if(PlayerInfo[playerid][xBDays] > 0)
	{
		new year,day,month;
		getdate(year, month, day);
		if(PlayerInfo[playerid][xBDays] < day)
		{
			PlayerInfo[playerid][xBDays] = 0;
		}
	}

		if(PlayerInfo[playerid][xRegistrovan] == 1)
	{
		SetTimerEx("Login", 1000, false, "d", playerid);
	}
	else
	{
		if(!IsValidRoleplayName(ImeIgraca(playerid)))
		{
			SendErrorMessage(playerid, "Dobili ste kick zbog krivo formatiranog imena.");
			SendErrorMessage(playerid, "Vase ime mora biti u formatu Ime_Prezime.");
			SetTimerEx("KickIgraca", 150, false, "d", playerid);
			return 1;
		}
		else if(ServerInfo[Registracija] == false)
		{
			SendErrorMessage(playerid, "Registracija na serveru trenutno nije moguca.");
			SendErrorMessage(playerid, "Pratite forum za dalja desavanja - www.fg-rpg.com");
			SetTimerEx("KickIgraca", 150, false, "d", playerid);
			return 1;
		}
		else
		{
			ac_TogglePlayerSpectating(playerid, true);
			SetTimerEx("Register", 100, false, "d", playerid);
			SelectTextDraw(playerid, FUSIONGAMING);
		}
	}
}
else {
	if(!IsValidRoleplayName(ImeIgraca(playerid)))
	{
		SendErrorMessage(playerid, "Dobili ste kick zbog krivo formatiranog imena.");
		SendErrorMessage(playerid, "Vase ime mora biti u formatu Ime_Prezime.");
		SetTimerEx("KickIgraca", 150, false, "d", playerid);
		return 1;
	}
	else if(ServerInfo[Registracija] == false)
	{

		SendErrorMessage(playerid, "Registracija na serveru trenutno nije moguca.");
		SendErrorMessage(playerid, "Pratite forum za dalja desavanja - www.fg-rpg.com");
		SetTimerEx("KickIgraca", 150, false, "d", playerid);
		return 1;
	}
	else
	{
		ac_TogglePlayerSpectating(playerid, true);
		SetTimerEx("Register", 100, false, "d", playerid);
		SelectTextDraw(playerid, FUSIONGAMING);
	}
}
return true;}
public OnPlayerDisconnect(playerid, reason) {

//DestroyPlayerVehicles(playerid);
onlinepl--;

if(IznajmioVozilo[playerid] != 0) {
	KillTimer(RentTimer[playerid]);
	DestroyVehicle(RentVeh[playerid]);
	Delete3DTextLabel(RentVehLabel[RentVeh[playerid]]);
	IznajmioVozilo[playerid] = 0;
	RentOdabir[playerid] = 0;
	RentVreme[playerid] = 0;
	RentVeh[playerid] = 0;}
if(TPZahtev[playerid] != -1) {
	SendErrorMessage(TPZahtev[playerid], "Igrac kome ste poslali zahtev za teleport je izasao sa servera.");
	TPZahtev[TPZahtev[playerid]] = -1;
	TPZahtev[playerid] = -1;}
new lastid = playerid;
if(IsValidDynamicMapIcon(PlayerGpsRadar[playerid][_pgrIconId])) {
	DestroyDynamicMapIcon(PlayerGpsRadar[playerid][_pgrIconId]);}

if(IsValidDynamicObject(PlayerGpsRadar[playerid][_pgrObject])) {
	DestroyDynamicObject(PlayerGpsRadar[playerid][_pgrObject]);}

if(IsValidDynamicCP(PlayerGpsRadar[playerid][_pgrCheckPointId])) {
	DestroyDynamicCP(PlayerGpsRadar[playerid][_pgrCheckPointId]);}

if(BoomboxInfo[playerid][boomboxPlaced]) {
	Boombox_Destroy(playerid);}

antiCheatCS[playerid][CPSCount] = 0;
antiCheatCS[playerid][CPSTick] = 0;
antiCheatCS[playerid][CWTime] = 0;
antiCheatCS[playerid][CWVehID] = -1;

if(IsValidPlayerObject(playerid, farmerInfo[playerid][fiBucketObject]))
	DestroyPlayerObject(playerid, farmerInfo[playerid][fiBucketObject]);

if(farmerInfo[playerid][fiVehicleBucket] != -1) {
	new farmvehicle = farmerInfo[playerid][fiVehicleBucket];

	farmerVehicles[farmvehicle][fvMilk] = false;
	farmerVehicles[farmvehicle][fvMilkpID] = -1;}

if(SearchNadji[playerid] != -1) {
	SearchNadji[playerid] = -1;
	Fusion_DisablePlayerCheckpoint(playerid);}

if(ListaPrikazana[playerid]) {
	KladionicaTDControl(playerid, false);}
if(MojListicPrikazan[playerid]) {
	KladionicaListicTDControl(playerid, false);}
if(RezultatiPrikazana[playerid]) {
	RezultatiTDControl(playerid, false);}

switch(reason) {
	case 0: {
		new varstring[70];
		format(varstring, sizeof(varstring), "** (( %s je napustio server (crash) ))", ImeIgraca(playerid));
		PorukaRadius(60.0 , playerid, varstring, 0xBFC0C2FF);
	}
	case 1: {
		new varstring[70];
		format(varstring, sizeof(varstring), "** (( %s je napustio server (disconnect) ))", ImeIgraca(playerid));
		PorukaRadius(60.0 , playerid, varstring, 0xBFC0C2FF);
	}
}

if(GetPVarInt(playerid, "Computer") == 1) {
	Police_TVTDControl(playerid, false);
	SetPVarInt(playerid, "Computer", 0);}

DestroyPlayerTextDraws(playerid);

if(IgracSeRegistruje[playerid] == true) RegisterTDControl(playerid, false);

if(AdminVozilo[playerid] != -1) Fusion_DestroyVehicle(AdminVozilo[playerid]), AdminVozilo[playerid] = -1;

if(TrkaVozilo[playerid] != -1) Fusion_DestroyVehicle(TrkaVozilo[playerid]), TrkaVozilo[playerid] = -1;

if(HitmanInfo[playerid][GotHit] > 0) {
	if(HitmanInfo[playerid][GetChased] < 999) {
		if(IsPlayerConnected(HitmanInfo[playerid][GetChased])){
			SCM(HitmanInfo[playerid][GetChased], ZUTA, "Vasa meta je izasla sa servera.");
			HitmanInfo[HitmanInfo[playerid][GetChased]][GoChase] = 999;
		}
	}
}
if(PlayerCement[playerid] != -1) VehCement[PlayerCement[playerid]] = false;

if(DeliverCar[playerid] != -1) KamionUsed[DeliverCar[playerid]] = -1, StateBox[DeliverCar[playerid]] = 0;

if(IDVozilaKojimSverca[playerid] != -1) KutijaMatsa[IDVozilaKojimSverca[playerid]] = false;

if(PlayerPrevozNovca[playerid] != -1) VehNovac[PlayerPrevozNovca[playerid]] = false;

if(PljackaVreme[playerid] > 0) Fusion_KillTimer(PljackanjeBankeTimer[playerid]), PljackaUToku = false;

PljackaNovac[playerid] = 0;
VremeZaNovac[playerid] = 0;
PljackaVreme[playerid] = 0;

if(ZlatoVreme[playerid] > 0) Fusion_KillTimer(PljackanjeZlatareTimer[playerid]), ZlataraUToku = false;

PljackaZlato[playerid] = 0;
VremeZaZlato[playerid] = 0;
ZlatoVreme[playerid] = 0;

if(DragedPlayerID[playerid] != -1) {

	new varstring[70];
	format(varstring, sizeof(varstring), "%s je napustio server, pusteni ste.", ImeIgraca(playerid));
	SCM(DragedPlayerID[playerid], -1, varstring);
	TogglePlayerControllable(DragedPlayerID[playerid], 1);
	Draged[DragedPlayerID[playerid]] = -1;}

if(farmerInfo[playerid][fifarmerPlantsPlanted] != -1) {

	for(new plantid = 0; plantid < MAX_FARMS; plantid++) {

		if(plantInfo[plantid][farmPlantCreated] && plantInfo[plantid][farmPlayerID] == lastid) {

			if(IsValidDynamic3DTextLabel(plantInfo[plantid][farm3D]))
				DestroyDynamic3DTextLabel(plantInfo[plantid][farm3D]);

			if(IsValidDynamicObject(plantInfo[plantid][farmObject]))
				DestroyDynamicObject(plantInfo[plantid][farmObject]);

			ResetFarmPlant(plantid);
		}
	}
}

PlayerTextDrawDestroy(playerid, PlayerGpsRadarText[playerid]);

Fusion_KillTimer(atmrobTimer[playerid]);

if(PocetniTutorialStartovan[playerid] == true) Fusion_KillTimer(TimerTutorial[playerid]);

Fusion_KillTimer(FarbanjeTimer[playerid]);

if(PlayerInfo[playerid][xUbijen] == 1) Fusion_KillTimer(BolnicaTimer[playerid]);

if(IgracPosadio[playerid] != 0) {
	for(new plantid = 1; plantid < MAX_PLANTS; plantid++) {
		if(strcmp(ImeIgraca(playerid), DrogaStab[plantid][wOwner], true) == 0) {
			if(DrogaStab[plantid][wPlanted] == 1) {
				DrogaStab[plantid][Plantx] = 0;
				DrogaStab[plantid][Planty] = 0;
				DrogaStab[plantid][Plantz] = 0;
				DrogaStab[plantid][wType] = 0;
				DrogaStab[plantid][wPlanted] = 0;
				DrogaStab[plantid][wHoursPassed] = 0;
				strmid(DrogaStab[plantid][wOwner], "Niko", 0, strlen("Niko"), 255);
				DrogaStab[plantid][wViwo] = GetPlayerVirtualWorld(playerid);
				DestroyDynamicObject(DrogaStab[plantid][wObjectID]);
			}
		}
	}
}
if(PlayerBuyingAS[playerid] != -1) {
		AutoSalon[PlayerBuyingAS[playerid]][AlreadyBuying] = false;
		PlayerBuyingAS[playerid] = -1;}

antiCheatCS[playerid][ArmedWeapon] = 0;

new varstring[80];
if(WARPInfo[playerid][WARTim][0] == true) {
	format(varstring, sizeof(varstring), ""col_orange"WAR | {F81414]%s: "col_white"je napustio WAR.", ImeIgraca(playerid));
	WARPoruka(WARPInfo[playerid][WARIgrac], 0xFF9900AA, varstring);
	WARInfo[WARPInfo[playerid][WARIgrac]][WARTimClanovi][0]--;}

if(WARPInfo[playerid][WARTim][1] == true) {
	format(varstring, sizeof(varstring), ""col_orange"WAR | {0049FF]%s: "col_white"je napustio WAR.", ImeIgraca(playerid));
	WARPoruka(WARPInfo[playerid][WARIgrac], 0xFF9900AA, varstring);
	WARInfo[WARPInfo[playerid][WARIgrac]][WARTimClanovi][1]--;}

if(PlayerCuffed[playerid] >= 1) {
	if(PlayerInfo[playerid][xZatvor] == 0) {
		PlayerInfo[playerid][xZatvor] = OBICAN_ZATVOR;
		PlayerInfo[playerid][xZatvorVreme] = 60;
		strmid(PlayerInfo[playerid][xOffPJail], "LTA", 0, strlen("LTA"), 64);
	}
}

if(PlayerInfo[playerid][xWanted] > 0) {
	if(PlayerInfo[playerid][xZatvor] == 0) {
		foreach(new i : Player) {
			if(IsPlayerConnected(i)) {
				if(GetFactionType(i) == ORG_TIP_PD && CrimInRange(40.0, playerid, i)) {

					PlayerInfo[playerid][xLeaveJail] = true;
					PlayerInfo[playerid][xZatvor] = OBICAN_ZATVOR;
					PlayerInfo[playerid][xZatvorVreme] = 6*PlayerInfo[playerid][xWanted];
					new price = PlayerInfo[playerid][xWanted]*500;
					PlayerInfo[playerid][xNovac] -= price;
					PlayerInfo[playerid][xWanted] = 0;
				}
			}
		}
	}
}



if(GetFactionType(playerid) == ORG_TIP_MD) {
	if(MedicDuty[playerid] == true) { Medics -= 1; }
}

if (GetPVarInt(playerid, "novactdCalled") == 1)
{
	Fusion_KillTimer(novactd[playerid]);}

if(GetPVarInt(playerid, "BreakingLock") == 1)
{
	Fusion_KillTimer(GetPVarInt(playerid, "BreakLockTimer"));}

if(GetPVarInt(playerid, "ImmobTimerCalled") == 1)
{
	Fusion_KillTimer(GetPVarInt(playerid, "immobcounttimer"));}

if(GetPVarInt(playerid, "BreakLockTimerCalled") == 1)
{
	Fusion_KillTimer(GetPVarInt(playerid, "breakcounttimer"));}


if(BoomboxInfo[playerid][boomboxPlaced]) {
	Boombox_Destroy(playerid);}

if(antiCheatCS[playerid][TakeVehicle] != INVALID_VEHICLE_ID) {
	BusyVehicle[antiCheatCS[playerid][TakeVehicle]] = -1;}

if(PlayerInfo[playerid][xAdmin] >= 1) SacuvajAdmina(playerid);

if(PlayerLogged[playerid] == true) {
	SavePlayer(playerid);}

if(Uciskolu[playerid] == true) { Fusion_KillTimer(SkolaTimer[playerid]); }

if(TrashSearch[playerid] == 1)  { Fusion_KillTimer(TrashTimer[playerid]); }

if(JediSearch[playerid] == 1)  { Fusion_KillTimer(JediTimer[playerid]); }

if(PusiNargilu[playerid] == 1)  { Fusion_KillTimer(NargilaTimer[playerid]); }

if(GetPVarInt(playerid, "RequestingBackup") == 1) {
	Fusion_KillTimer(backuptimer[playerid]);
	BackupClear(playerid, 0);}

if(KupujeNamestaj[playerid] == 1) {
		nekokupujenamestaj = 0;
		KupujeNamestaj[playerid] = 0;
	}

if(offeredByCabbie[playerid] != INVALID_PLAYER_ID)
{
	TaximetarUkljucen[offeredByCabbie[playerid]] = false;

	PlayerTextDrawSetString(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][6], "N/A");
	PlayerTextDrawShow(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][6]);
	PlayerTextDrawSetString(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][9], "N/A");
	PlayerTextDrawShow(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][9]);

	CenaVoznje[offeredByCabbie[playerid]] = 0;
	VoziIgracaID[offeredByCabbie[playerid]] = INVALID_PLAYER_ID;
	Fusion_KillTimer(TaxiTimer[offeredByCabbie[playerid]]);
	offeredByCabbie[playerid] = INVALID_PLAYER_ID;}

if(GetPVarInt(playerid, "CuffTimerCalled") == 1)
{
	Fusion_KillTimer(TazerTimer[playerid]);}

if(AdminDuty[playerid]) {
	AdminDuty[playerid] = false;}

if(KrenuoKosenje[playerid])
	for(new i = 0; i < 38; i++)
		if(IsValidPlayerObject(playerid, Grass[i][playerid])) DestroyPlayerObject(playerid, Grass[i][playerid]);

if(NaDustu[playerid] == true) {
		NaDustu[playerid] = false;
	ResetAllWeapons(playerid);
	dustply--;}

if(NaInferno[playerid] == true) {
	NaInferno[playerid] = false;
	ResetAllWeapons(playerid);
	infernoply--;}
if(NaAssault[playerid] == true) {
	NaAssault[playerid] = false;
	ResetAllWeapons(playerid);
	assaultply--;}

if(NaSnow[playerid] == true) {
	NaSnow[playerid] = false;
	ResetAllWeapons(playerid);
	snowply--;}
return true;}

SetPlayerTDStats(playerid) {

if(PlayerInfo[playerid][xRegistrovan] != 0){

fg_info_tds(playerid, false);
update_fg_info_tds(playerid);

//PlayerTextDrawShow(playerid, FG_GPS[playerid]);

Fusion_SetPlayerWantedLevel(playerid, PlayerInfo[playerid][xWanted]);}
}

stock DonatorBoja(playerid) {

if(PlayerInfo[playerid][xDBO]) {

	if(PlayerInfo[playerid][xDBoja] == 0) {
		SetPlayerColor(playerid, 0xFFFFFF00);
	}
	else if(PlayerInfo[playerid][xDBoja] == 1) {

		SetPlayerColor(playerid, 0xFF808000);
	}
	else if(PlayerInfo[playerid][xDBoja] == 2) {

		SetPlayerColor(playerid, 0xFF000000);
	}
	else if(PlayerInfo[playerid][xDBoja] == 3) {

		SetPlayerColor(playerid, 0x80FFFF00);
	}
	else if(PlayerInfo[playerid][xDBoja] == 4) {

		SetPlayerColor(playerid, 0xFF804000);
	}
	else if(PlayerInfo[playerid][xDBoja] == 5) {

		SetPlayerColor(playerid, 0xFF62B000);
	}
	else if(PlayerInfo[playerid][xDBoja] == 6) {

		SetPlayerColor(playerid, 0xC0C0C000);
	}
	else if(PlayerInfo[playerid][xDBoja] == 7) {

		SetPlayerColor(playerid, 0x00FF0000);
	}
	else if(PlayerInfo[playerid][xDBoja] == 8) {

		SetPlayerColor(playerid, 0xFFFF0000);
	}
	else if(PlayerInfo[playerid][xDBoja] == 9) {

		SetPlayerColor(playerid, 0x00800000);
	}
	else if(PlayerInfo[playerid][xDBoja] == 10) {

		SetPlayerColor(playerid, 0x0000FF00);
	}
}
}

public OnPlayerSpawn(playerid) {

if(!gPlayerAnimLibsPreloaded[playerid]) {
		PreloadAnimLib(playerid,"BOMBER");
		PreloadAnimLib(playerid,"RAPPING");
	PreloadAnimLib(playerid,"SHOP");
		PreloadAnimLib(playerid,"BEACH");
		PreloadAnimLib(playerid,"SMOKING");
	PreloadAnimLib(playerid,"FOOD");
	PreloadAnimLib(playerid,"ON_LOOKERS");
	PreloadAnimLib(playerid,"DEALER");
	PreloadAnimLib(playerid,"CRACK");
	PreloadAnimLib(playerid,"CARRY");
	PreloadAnimLib(playerid,"COP_AMBIENT");
	PreloadAnimLib(playerid,"PARK");
	PreloadAnimLib(playerid,"INT_HOUSE");
	PreloadAnimLib(playerid,"FOOD");
	PreloadAnimLib(playerid,"PED");
	gPlayerAnimLibsPreloaded[playerid] = 1;}

StopAudioStreamForPlayer(playerid);

SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, PlayerInfo[playerid][xPistolSkill]);
SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][xDeagleSkill]);
SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][xShotgunSkill]);
SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[playerid][xSawnSkill]);
SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][xCombatSkill]);
SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][xMPSkill]);
SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][xAKSkill]);
SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][xM4Skill]);
SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRifLE, PlayerInfo[playerid][xSniperSkill]);

if(PlayerInfo[playerid][xRegistrovan] == 1)
	{
		AntiSK(playerid);}
StopAudioStreamForPlayer(playerid);
ac_TogglePlayerSpectating(playerid, 0);
SetPlayerColor(playerid, 0xFFFFFF00);
for(new i = 0; i < 13; i++) {
	antiCheatCS[playerid][Weapon][i] = 0;
	antiCheatCS[playerid][Ammo][i] = 0;}
spawnose[playerid] = 0;
SetTimerEx("Resetspawnvar", 8000, false, "i", playerid);
PocetniNovac(playerid, PlayerInfo[playerid][xNovac]);
SetPlayerTDStats(playerid);
SetPlayerScore(playerid, PlayerInfo[playerid][xLevel]);
c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
if(PlayerInfo[playerid][xYouTuber] == 1)
{
	Fusion_SetPlayerHealth(playerid, 100.00);
	Fusion_SetPlayerArmour(playerid, 100);}
update_fg_info_tds(playerid,true);
ac_SetPlayerInterior(playerid, 0);
SetPlayerVirtualWorld(playerid, 0);

antiCheatCS[playerid][TeleportCheck] = 4;
antiCheatCS[playerid][WeaponDetect] = 4;
antiCheatCS[playerid][EnteredVehicle] = INVALID_VEHICLE_ID;

if(AdminVozilo[playerid] != -1) Fusion_DestroyVehicle(AdminVozilo[playerid]), AdminVozilo[playerid] = -1;

if(TrkaVozilo[playerid] != -1) Fusion_DestroyVehicle(TrkaVozilo[playerid]), TrkaVozilo[playerid] = -1;

DonatorBoja(playerid);

if(GetFactionType(playerid) == ORG_TIP_PD ||
	GetFactionType(playerid) == ORG_TIP_BANDA ||
	GetFactionType(playerid) == ORG_TIP_MAFIJA ||
	GetFactionType(playerid) == ORG_TIP_MC ||
	GetFactionType(playerid) == ORG_TIP_SR ||
	GetFactionType(playerid) == ORG_TIP_CNN ||
	GetFactionType(playerid) == ORG_TIP_HITM) {

	for(new id = 1; id < MAX_GZONE; id++) {

		new filename[32], stringic[24];
		format(filename, sizeof(filename), F_GZONE, id);

		if(fexist(filename)) {

			format(stringic, sizeof(stringic), "0x%s88", gZoneInfo[id][gZoneColor]);
			GangZoneShowForPlayer(playerid, gZoneInfo[id][gZoneID], HexToInt(stringic));

		}
	}
	}
	
	if(PlayerInfo[playerid][xLevel] > 0) {

	for(new id = 1; id < MAX_GZONE; id++) {

		new filename[32], stringic[24];
		format(filename, sizeof(filename), F_GZONE, id);

		if(fexist(filename)) {

			format(stringic, sizeof(stringic), "0x%s88", gZoneInfo[id][gZoneColor]);
			GangZoneShowForPlayer(playerid, gZoneInfo[id][gZoneID], HexToInt(stringic));

		}
	}
	}

for(new id = 1; id < MAX_SZONE; id++) {

	new filename[32], stringic[24];
	format(filename, sizeof(filename), F_SZONE, id);

	if(fexist(filename)) {

		format(stringic, sizeof(stringic), "0x00FF8088", gSafeZoneInfo[id][gSafeZoneColor]);
		GangZoneShowForPlayer(playerid, gSafeZoneInfo[id][gSafeZoneID], HexToInt(stringic));

	}
}

if(WARPInfo[playerid][WARIgrac] != -1) {
	new w = WARPInfo[playerid][WARIgrac];

	SetPlayerVirtualWorld(playerid, w);
	Fusion_SetPlayerHealth(playerid, 100);
	Fusion_SetPlayerArmour(playerid, 100);
	antiCheatCS[playerid][TeleportCheck] = 4;
	antiCheatCS[playerid][WeaponDetect] = 4;
	if(WARInfo[w][WARMapa] == 1) {
		new rand1 = random(sizeof(RandomWARMapa11));
		new rand2 = random(sizeof(RandomWARMapa12));
		if(WARPInfo[playerid][WARTim][0] == true) { ac_SetPlayerPos(playerid, RandomWARMapa11[rand1][0], RandomWARMapa11[rand1][1],RandomWARMapa11[rand1][2]); }
		else if(WARPInfo[playerid][WARTim][1] == true) { ac_SetPlayerPos(playerid, RandomWARMapa12[rand2][0], RandomWARMapa12[rand2][1],RandomWARMapa12[rand2][2]); }
		ac_SetPlayerInterior(playerid, 0);
	}
	else if(WARInfo[w][WARMapa] == 2) {
		new rand1 = random(sizeof(RandomWARMapa21));
		new rand2 = random(sizeof(RandomWARMapa22));
		if(WARPInfo[playerid][WARTim][0] == true) { ac_SetPlayerPos(playerid, RandomWARMapa21[rand1][0], RandomWARMapa21[rand1][1],RandomWARMapa21[rand1][2]); }
		else if(WARPInfo[playerid][WARTim][1] == true) { ac_SetPlayerPos(playerid, RandomWARMapa22[rand2][0], RandomWARMapa22[rand2][1],RandomWARMapa22[rand2][2]); }
		ac_SetPlayerInterior(playerid, 10);
	}
	else if(WARInfo[w][WARMapa] == 3) {
		new rand1 = random(sizeof(RandomWARMapa31));
		new rand2 = random(sizeof(RandomWARMapa32));
		if(WARPInfo[playerid][WARTim][0] == true) { ac_SetPlayerPos(playerid, RandomWARMapa31[rand1][0], RandomWARMapa31[rand1][1],RandomWARMapa31[rand1][2]); }
		else if(WARPInfo[playerid][WARTim][1] == true) { ac_SetPlayerPos(playerid, RandomWARMapa32[rand2][0], RandomWARMapa32[rand2][1],RandomWARMapa32[rand2][2]); }
		ac_SetPlayerInterior(playerid, 0);
	}
	else if(WARInfo[w][WARMapa] == 4) {
		new rand1 = random(sizeof(RandomWARMapa41));
		new rand2 = random(sizeof(RandomWARMapa42));
		if(WARPInfo[playerid][WARTim][0] == true) { ac_SetPlayerPos(playerid, RandomWARMapa41[rand1][0], RandomWARMapa41[rand1][1], RandomWARMapa41[rand1][2]); }
		else if(WARPInfo[playerid][WARTim][1] == true) { ac_SetPlayerPos(playerid, RandomWARMapa42[rand2][0], RandomWARMapa42[rand2][1], RandomWARMapa42[rand2][2]); }
		ac_SetPlayerInterior(playerid, 0);
	}
	else if(WARInfo[w][WARMapa] == 5) {
		new rand1 = random(sizeof(RandomWARMapa51));
		new rand2 = random(sizeof(RandomWARMapa52));
		if(WARPInfo[playerid][WARTim][0] == true) { ac_SetPlayerPos(playerid, RandomWARMapa51[rand1][0], RandomWARMapa51[rand1][1],RandomWARMapa51[rand1][2]); }
		else if(WARPInfo[playerid][WARTim][1] == true) { ac_SetPlayerPos(playerid, RandomWARMapa52[rand2][0], RandomWARMapa52[rand2][1],RandomWARMapa52[rand2][2]); }
		ac_SetPlayerInterior(playerid, 0);
	}
	GiveWeaponToPlayer(playerid, WARInfo[w][WAROruzje][0], 300);
	GiveWeaponToPlayer(playerid, WARInfo[w][WAROruzje][1], 300);
	GiveWeaponToPlayer(playerid, WARInfo[w][WAROruzje][2], 300);
	GiveWeaponToPlayer(playerid, WARInfo[w][WAROruzje][3], 300);

	PlayerInfo[playerid][xSpawned] = 1;

	return true;}
else if(NaDmEventu[playerid] == true) {

	new rand = random(sizeof(RandomDMPos));
	ac_SetPlayerPos(playerid, RandomDMPos[rand][0], RandomDMPos[rand][1],RandomDMPos[rand][2]);
	SetPlayerFacingAngle(playerid, 360.000);
	SetCameraBehindPlayer(playerid);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 10);

	PlayerInfo[playerid][xSpawned] = 1;

	if(PlayerInfo[playerid][xDMEventUbistva] >= 4500) {
		GiveWeaponToPlayer(playerid, 24, 150);
		GiveWeaponToPlayer(playerid, 26, 150);
		GiveWeaponToPlayer(playerid, 28, 400);
		GiveWeaponToPlayer(playerid, 31, 400);
	}
	else if(PlayerInfo[playerid][xDMEventUbistva] >= 4000) {
		GiveWeaponToPlayer(playerid, 24, 150);
		GiveWeaponToPlayer(playerid, 27, 150);
		GiveWeaponToPlayer(playerid, 32, 800);
		GiveWeaponToPlayer(playerid, 31, 400);
	}
	else if(PlayerInfo[playerid][xDMEventUbistva] >= 3500) {
		GiveWeaponToPlayer(playerid, 24, 150);
		GiveWeaponToPlayer(playerid, 27, 150);
		GiveWeaponToPlayer(playerid, 28, 800);
		GiveWeaponToPlayer(playerid, 31, 400);
	}
	else if(PlayerInfo[playerid][xDMEventUbistva] >= 3000) {
		GiveWeaponToPlayer(playerid, 24, 150);
		GiveWeaponToPlayer(playerid, 27, 150);
		GiveWeaponToPlayer(playerid, 29, 400);
		GiveWeaponToPlayer(playerid, 31, 400);
	}
	else if(PlayerInfo[playerid][xDMEventUbistva] >= 2500) {
		GiveWeaponToPlayer(playerid, 24, 150);
		GiveWeaponToPlayer(playerid, 26, 150);
		GiveWeaponToPlayer(playerid, 29, 400);
		GiveWeaponToPlayer(playerid, 31, 400);
	}
	else if(PlayerInfo[playerid][xDMEventUbistva] >= 2000) {
		GiveWeaponToPlayer(playerid, 24, 150);
		GiveWeaponToPlayer(playerid, 26, 150);
		GiveWeaponToPlayer(playerid, 29, 400);
		GiveWeaponToPlayer(playerid, 30, 400);
	}
	else if(PlayerInfo[playerid][xDMEventUbistva] >= 1500) {
		GiveWeaponToPlayer(playerid, 24, 150);
		GiveWeaponToPlayer(playerid, 25, 100);
		GiveWeaponToPlayer(playerid, 29, 400);
		GiveWeaponToPlayer(playerid, 31, 400);
	}
	else if(PlayerInfo[playerid][xDMEventUbistva] >= 1000) {
		GiveWeaponToPlayer(playerid, 24, 150);
		GiveWeaponToPlayer(playerid, 25, 100);
		GiveWeaponToPlayer(playerid, 29, 400);
		GiveWeaponToPlayer(playerid, 30, 400);
	}
	else if(PlayerInfo[playerid][xDMEventUbistva] >= 500) {
		GiveWeaponToPlayer(playerid, 24, 200);
		GiveWeaponToPlayer(playerid, 25, 100);
		GiveWeaponToPlayer(playerid, 29, 400);
	}
	else if(PlayerInfo[playerid][xDMEventUbistva] >= 0) {
		GiveWeaponToPlayer(playerid, 24, 200);
		GiveWeaponToPlayer(playerid, 25, 100);
	}

	Fusion_SetPlayerHealth(playerid, 100);
	Fusion_SetPlayerArmour(playerid, 100);
	return true;}
else if(PlayerInfo[playerid][xRegistrovan] == 0){
	ac_SetPlayerPos(playerid, 94.1184, 1667.2339, -29.7157);}
else {

	PlayerInfo[playerid][xSpawned] = 1;
	PostaviSpawn(playerid);}

PlayerInfo[playerid][xSpawned] = 1;

if(PlayerInfo[playerid][xWanted] != 0) {
	strmid(ZlocinInfo[playerid][zPrijavio], "Nepoznato", 0, strlen("Nepoznato"), 255);
	strmid(ZlocinInfo[playerid][zPocinio], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 255);
	strmid(ZlocinInfo[playerid][zZlocin], "Nepoznato", 0, strlen("Nepoznato"), 255);
	Fusion_SetPlayerWantedLevel(playerid, PlayerInfo[playerid][xWanted]);}
if(FirstSpawn[playerid] == 1) {

	if(PlayerLogged[playerid] == true) {

		EnableAntiCheatForPlayer(playerid, 2, 1);
		EnableAntiCheatForPlayer(playerid, 7, 1);
		EnableAntiCheatForPlayer(playerid, 9, 1);
		EnableAntiCheatForPlayer(playerid, 0, 1);

		PlayerInfo[playerid][xSPoruke] = 1;
		PlayerInfo[playerid][xSOglasi] = 1;
		PlayerInfo[playerid][xSVesti] = 1;
		PlayerInfo[playerid][xSFChat] = 1;
		PlayerInfo[playerid][xSHud] = 1;

		if(PlayerInfo[playerid][xBrojTelefona] == 0) {
			PlayerInfo[playerid][xSTelefon] = 0;
		}
		else if(PlayerInfo[playerid][xBrojTelefona] != 0) {
			PlayerInfo[playerid][xSTelefon] = 1;
		}

		new varstring[128];

		Fusion_KillTimer(LoginTimer[playerid]);

		new h,mi,sec;
		gettimeEx(h,mi,sec);
		FixHour(h);
		h = shifthour;
		StopAudioStreamForPlayer(playerid);
		ac_TogglePlayerSpectating(playerid, 0);
		EnableHealthBarForPlayer(playerid, true);

		SCM(playerid, FUSIONGAMING, "- - - - - - - - - - - - - - - - - - Fusion Gaming RolePlay - - - - - - - - - - - - - - - - - -");

		SendClientMessageEx(playerid, BELA, ""col_white"Dobrodosao nazad, "col_server"%s"col_white".", ImeIgraca(playerid));
		SCM(playerid, BELA, ""col_white"Forum "col_server"|"col_white" www."col_server"fg-rpg"col_white".com"col_server"");
		SendClientMessageEx(playerid, -1, ""col_white"Level: "col_server"%d "col_white"| Novac u dzepu: "col_server"$%d "col_white"| Novac u banci: "col_server"$%d"col_white".", PlayerInfo[playerid][xLevel], GetPlayerMoney(playerid), PlayerInfo[playerid][xBRacun]);

		if(ServerInfo[HappyHours] == true) {
			SCM(playerid, BELA, ""col_white"Trenutno su na serveru ukljuceni "col_server"srecni sati.");
		}
		if(ServerInfo[HappyHoursx3] == true) {
			SCM(playerid, BELA, ""col_white"Trenutno su na serveru ukljuceni "col_server"srecni sati (+3EXP).");
		}
		
		if(PlayerInfo[playerid][xClan] >= 1) {
			new orgestring[64];
			format(orgestring, sizeof(orgestring), "Clan vase organizacije %s je usao na server!", ImeIgraca(playerid));
			OrgPoruka(PlayerInfo[playerid][xClan], 0x95b4a2FF, orgestring);
		}

		new tdstring[24];
		format(tdstring, 24, "ONLINE:_~y~%d", NumberOfConnectedPlayers());
		TextDrawSetString(FG_InGame[81], tdstring);
		format(tdstring, 24, "REKORD:_~y~%d", ServerInfo[RekordServera]);
		TextDrawSetString(FG_InGame[82], tdstring);

		if(PlayerInfo[playerid][xAdmin] >= 1) {
			for (new i = 0; i < MAX_LINES; i ++)
			{
				PlayerTextDrawShow(playerid, AltChatTD_Player[i]);
			}
			offAdminNeaktivnost(playerid);
			//PlayerTextDrawHide(playerid, FG_GPS[playerid]);
			if(PlayerInfo[playerid][xAdmin] < 7) {

				new adminstring[128];
				if(PlayerInfo[playerid][xAdmin] == 6) {

					SCM(playerid, BELA, ""col_server"|:.Fusion Gaming:.| "col_white"Logiran si kao "col_server"Direktor!");
					format(adminstring, sizeof(adminstring), "|Direktor| %s je usao na server!", ImeIgraca(playerid));
				}
				else if(PlayerInfo[playerid][xAdmin] == 5) {

					SCM(playerid, BELA, ""col_server"|:.Fusion Gaming:.| "col_white"Logiran si kao "col_server"Head Admin!");
					format(adminstring, sizeof(adminstring), "|Head Admin| %s je usao na server!", ImeIgraca(playerid));
				}
				else if(PlayerInfo[playerid][xAdmin] >= 1 && PlayerInfo[playerid][xAdmin] <= 4) {

					SCM(playerid, BELA, ""col_server"|:.Fusion Gaming:.| "col_white"Logiran si kao "col_server"Admin!");
					format(adminstring, sizeof(adminstring), "|Admin| %s je usao na server!", ImeIgraca(playerid));
				}

				AdminPoruka(0x6495EDAA, adminstring);

			}
			else if(PlayerInfo[playerid][xAdmin] >= 7) {

				if(!strcmp(ImeIgraca(playerid), FG_OWNER, false))
				{

					SCM(playerid, BELA, ""col_server"|:.Fusion Gaming:.| "col_white"Ulogovan si kao "col_server"Vlasnik!");

					foreach(new i : Player) {
						if(PlayerInfo[i][xAdmin] >= 1) {
							format(varstring, sizeof(varstring), "(( BOG )) %s je dosao da oprosti grehe vase!", ImeIgraca(playerid));
							SCM(i, 0x00847eAA, varstring);
						}
					}
				}
				else
				{
				SCM(playerid, BELA, ""col_server"|:.Fusion Gaming:.| "col_white"Logiran si kao "col_server"Vlasnik!");

				foreach(new i : Player) {
					if(PlayerInfo[i][xAdmin] >= 7) {
						format(varstring, sizeof(varstring), "|Vlasnik| %s je usao na server!", ImeIgraca(playerid));
						SCM(i, 0xFF6347AA, varstring);
					}
				 ]
			  ]
		   ]
		}
		else if(PlayerInfo[playerid][xHelper] >= 1) {
			offHelperNeaktivnost(playerid);
			SendClientMessageEx(playerid, BELA, ""col_server"|:.Fusion Gaming:.| "col_white"Logiran si kao "col_server"%d "col_white"level Helpera!", PlayerInfo[playerid][xHelper]);
			format(varstring, sizeof(varstring), "|Helper||%d| %s usao na server!", PlayerInfo[playerid][xHelper], ImeIgraca(playerid));
			RPTChat(0x32CD32AA, varstring);
		}

		SCM(playerid, FUSIONGAMING, "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
		
		if(!strcmp(ImeIgraca(playerid), "Vasic")) {
			SetPlayerAdmin(playerid, true);
		}

		if(PlayerInfo[playerid][xVoziloID][0] != -1) {

			if(strcmp(VehicleInfo[PlayerInfo[playerid][xVoziloID][0]][vOwner], ImeIgraca(playerid), true)) {

				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Vozilo 1 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska.");
				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Jedan od razloga moze biti i vasa neaktivnost od 500h.");
				PlayerInfo[playerid][xVoziloID][0]=-1;
				SavePlayer(playerid);
			}
		}


		if(PlayerInfo[playerid][xVoziloID][0] != -1) {

			if(strcmp(VehicleInfo[PlayerInfo[playerid][xVoziloID][0]][vOwner], ImeIgraca(playerid), true)) {

				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Vozilo 1 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska.");
				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Jedan od razloga moze biti i vasa neaktivnost od 500h.");
				PlayerInfo[playerid][xVoziloID][0]=-1;
				SavePlayer(playerid);
			}
		}
		if(PlayerInfo[playerid][xVoziloID][1] != -1) {

			if(strcmp(VehicleInfo[PlayerInfo[playerid][xVoziloID][1]][vOwner], ImeIgraca(playerid), true)) {

				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Vozilo 2 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska.");
				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Jedan od razloga moze biti i vasa neaktivnost od 500h.");
				PlayerInfo[playerid][xVoziloID][1] = -1;
				SavePlayer(playerid);
			}
		}
		if(PlayerInfo[playerid][xVoziloID][2] != -1) {

			if(strcmp(VehicleInfo[PlayerInfo[playerid][xVoziloID][2]][vOwner], ImeIgraca(playerid), true)) {

				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Vozilo 3 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska.");
				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Jedan od razloga moze biti i vasa neaktivnost od 500h.");
				PlayerInfo[playerid][xVoziloID][2] = -1;
				SavePlayer(playerid);
			}
		}
		if(PlayerInfo[playerid][xVoziloID][3] != -1) {

			if(strcmp(VehicleInfo[PlayerInfo[playerid][xVoziloID][3]][vOwner], ImeIgraca(playerid), true)) {

				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Vozilo 4 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska.");
				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Jedan od razloga moze biti i vasa neaktivnost od 500h.");
				PlayerInfo[playerid][xVoziloID][3] = -1;
				SavePlayer(playerid);
			}
		}

		if(PlayerInfo[playerid][xProperty][0] != -1) {

			if(strcmp(II[PlayerInfo[playerid][xProperty][0]][iOwner], ImeIgraca(playerid), true)) {

				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Imovina 1 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska.");
				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Jedan od razloga moze biti i vasa neaktivnost od 500h.");
				PlayerInfo[playerid][xProperty][0] = -1;
				SavePlayer(playerid);
			}
		}
		if(PlayerInfo[playerid][xProperty][1] != -1) {

			if(strcmp(II[PlayerInfo[playerid][xProperty][1]][iOwner], ImeIgraca(playerid), true)) {

				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Imovina 2 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska.");
				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Jedan od razloga moze biti i vasa neaktivnost od 500h.");
				PlayerInfo[playerid][xProperty][1] = -1;
				SavePlayer(playerid);
			}
		}
		if(PlayerInfo[playerid][xProperty][2] != -1) {

			if(strcmp(II[PlayerInfo[playerid][xProperty][2]][iOwner], ImeIgraca(playerid), true)) {

				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Imovina 3 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska.");
				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Jedan od razloga moze biti i vasa neaktivnost od 500h.");
				PlayerInfo[playerid][xProperty][2] = -1;
				SavePlayer(playerid);
			}
		}
		if(PlayerInfo[playerid][xGarageID] != -1) {

			if(strcmp(garageInfo[PlayerInfo[playerid][xGarageID]][garageOwner], ImeIgraca(playerid), true)) {

				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Garaza vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska.");
				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Jedan od razloga moze biti i vasa neaktivnost od 500h.");
				PlayerInfo[playerid][xGarageID] = -1;
				SavePlayer(playerid);
			}
		}
		if(PlayerInfo[playerid][xFirmaID] != -1) {

			if(strcmp(BusinessInfo[PlayerInfo[playerid][xFirmaID]][bOwner], ImeIgraca(playerid), true)) {

				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Firma vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska.");
				SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Jedan od razloga moze biti i vasa neaktivnost od 500h ili nedostatak faktura.");
				PlayerInfo[playerid][xFirmaID] = -1;
				SavePlayer(playerid);
			}
		}

		new drzava[64];
		GetPlayerCountry(playerid, drzava, sizeof(drzava));
		if(strcmp(drzava, "Serbia", true) == 0) imaVPN[playerid] = 0;
		else if(strcmp(drzava, "Croatia", true) == 0) imaVPN[playerid] = 0;
		else if(strcmp(drzava, "Bosnia and Herzegovina", true) == 0) imaVPN[playerid] = 0;
		else if(strcmp(drzava, "Montenegro", true) == 0) imaVPN[playerid] = 0;
		else if(strcmp(drzava, "Macedonia", true) == 0) imaVPN[playerid] = 0;
		else if(strcmp(drzava, "Albania", true) == 0) imaVPN[playerid] = 0;
		else if(strcmp(drzava, "Romania", true) == 0) imaVPN[playerid] = 0;
		else if(strcmp(drzava, "Bulgaria", true) == 0) imaVPN[playerid] = 0;
		else if(strcmp(drzava, "Unknown", true) == 0) imaVPN[playerid] = 0;
		else imaVPN[playerid] = 1;
		if(imaVPN[playerid] == 1) {
			new koronka[144];
			format(koronka, sizeof(koronka), ""col_crvena">>> [ANTI-VPN]: %s("col_white"%d"col_crvena") nije sa naseg podrucja - Drzava: "col_white"%s", ImeIgraca(playerid), playerid, drzava);
			AdminPoruka(-1, koronka);
			format(koronka, 90, "Igrac: %s | Drzava: %s", ImeIgraca(playerid), drzava);
			LogSave("Ostalo/LogVPN.log", koronka);
		}

	}
	FirstSpawn[playerid] = 0;}
if(PlayerInfo[playerid][xBStil] == 0) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL); }
else if(PlayerInfo[playerid][xBStil] == 1) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING); }
else if(PlayerInfo[playerid][xBStil] == 2) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU); }
else if(PlayerInfo[playerid][xBStil] == 3) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD); }
else if(PlayerInfo[playerid][xBStil] == 4) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK); }

RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
RemovePlayerAttachedObject(playerid, OBJECT_SLOT_FREE);
RemovePlayerAttachedObject(playerid, OBJECT_SLOT_LHAND);
RemovePlayerAttachedObject(playerid, OBJECT_SLOT_HELMET);
RemovePlayerAttachedObject(playerid, OBJECT_SLOT_MASK);
RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BADGE);
RemovePlayerAttachedObject(playerid, OBJECT_SLOT_WINTERCAP);

if(HeadOn[playerid]) SetPlayerAttachedObject(playerid, OBJECT_SLOT_HEAD, PlayerInfo[playerid][xHead],2,PlayerInfo[playerid][xHeadPos][0],PlayerInfo[playerid][xHeadPos][1],PlayerInfo[playerid][xHeadPos][2],PlayerInfo[playerid][xHeadPos][3],PlayerInfo[playerid][xHeadPos][4],PlayerInfo[playerid][xHeadPos][5],PlayerInfo[playerid][xHeadPos][6],PlayerInfo[playerid][xHeadPos][7],PlayerInfo[playerid][xHeadPos][8], 0, 0);
if(SungOn[playerid]) {
	SetPlayerAttachedObject(playerid, OBJECT_SLOT_MASKSUNGL, PlayerInfo[playerid][xSungMask],2,PlayerInfo[playerid][xSungMaskPos][0],PlayerInfo[playerid][xSungMaskPos][1],PlayerInfo[playerid][xSungMaskPos][2],PlayerInfo[playerid][xSungMaskPos][3],PlayerInfo[playerid][xSungMaskPos][4],PlayerInfo[playerid][xSungMaskPos][5],PlayerInfo[playerid][xSungMaskPos][6],PlayerInfo[playerid][xSungMaskPos][7],PlayerInfo[playerid][xSungMaskPos][8], 0, 0);}
if(FaceOn[playerid]) SetPlayerAttachedObject(playerid, OBJECT_SLOT_BANDANA, PlayerInfo[playerid][xFace],2,PlayerInfo[playerid][xFacePos][0],PlayerInfo[playerid][xFacePos][1],PlayerInfo[playerid][xFacePos][2],PlayerInfo[playerid][xFacePos][3],PlayerInfo[playerid][xFacePos][4],PlayerInfo[playerid][xFacePos][5],PlayerInfo[playerid][xFacePos][6],PlayerInfo[playerid][xFacePos][7],PlayerInfo[playerid][xFacePos][8], 0, 0);

PlayerCuffed[playerid] = 0; PoliceDuty[playerid] = false;
NosiObjekt[playerid][0] = false; NosiObjekt[playerid][1] = false; NosiObjekt[playerid][2] = false;
	//SungOn[playerid] = false; HeadOn[playerid] = false; FaceOn[playerid] = false;
	UzeoPicu[playerid] = false;
NosiPaketOruzja[playerid] = false; 
farmerInfo[playerid][fiHaveBucket] = false; RiotShield[playerid] = false;
Dinamit[playerid] = false; LaptopRuke[playerid] = false;
PuniGorivo[playerid] = false; IgracZavezan[playerid] = false;

//SetPlayerName(playerid, RealName[playerid]);
Maskuse[playerid] = false;

if(PlayerBuyingAS[playerid] != -1) {
		AutoSalon[PlayerBuyingAS[playerid]][AlreadyBuying] = false;
		PlayerBuyingAS[playerid] = -1;}

farmerInfo[playerid][fiCowNumber] = 0;
if(farmerInfo[playerid][fiVehicleBucket] != -1) {
	new farmvehicle = farmerInfo[playerid][fiVehicleBucket];

	farmerVehicles[farmvehicle][fvMilk] = false;
	farmerVehicles[farmvehicle][fvMilkpID] = -1;}

SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

Fusion_KillTimer(atmrobTimer[playerid]);

if(PlayerInfo[playerid][xZatvor] == OBICAN_ZATVOR) {
	if(PlayerInfo[playerid][xLeaveJail] == true) {
		SendClientMessageEx(playerid, SVETLOCRVENA, "JAIL:"col_white" %s stavljen si u jail na %d minuta i izgubio si %d$!", ImeIgraca(playerid), PlayerInfo[playerid][xZatvorVreme], ((PlayerInfo[playerid][xZatvorVreme]/10)*1000));
		SCM(playerid, FUSIONGAMING, "JAIL:"col_white" RAZLOG: 'Izlazak sa servera sa Wanted Levelom'");
		PlayerInfo[playerid][xLeaveJail] = false;
	}
}

if(PlayerInfo[playerid][xZatvor] == OBICAN_ZATVOR) {
	if(strlen(PlayerInfo[playerid][xOffPJail]) > 2) {
		SendClientMessageEx(playerid, SVETLOCRVENA, "OFFLINE JAIL:"col_white" %s je stavljen u jail na %d minuta od strane AFG tima!", ImeIgraca(playerid), PlayerInfo[playerid][xZatvorVreme]);
		SendClientMessageEx(playerid, SVETLOCRVENA, "OFFLINE JAIL:"col_white" RAZLOG: '%s'", PlayerInfo[playerid][xOffPJail]);
		strmid(PlayerInfo[playerid][xOffPJail], "N", 0, strlen("N"), 2);
	}
}
if(PlayerInfo[playerid][xoffVozilo1Check] == 1) {
	PlayerInfo[playerid][xoffVozilo1Check] = 0;
	SendClientMessage(playerid, SVETLOCRVENA, "OFFLINE REMOVE:"col_white" Skinuto Vam je vozilo sa slota 1 od strane vlasnika.");}
if(PlayerInfo[playerid][xoffVozilo2Check] == 1) {
	PlayerInfo[playerid][xoffVozilo2Check] = 0;
	SendClientMessage(playerid, SVETLOCRVENA, "OFFLINE REMOVE:"col_white" Skinuto Vam je vozilo sa slota 2 od strane vlasnika.");}
if(PlayerInfo[playerid][xoffVozilo3Check] == 1) {
	PlayerInfo[playerid][xoffVozilo3Check] = 0;
	SendClientMessage(playerid, SVETLOCRVENA, "OFFLINE REMOVE:"col_white" Skinuto Vam je vozilo sa slota 3 od strane vlasnika.");}
if(PlayerInfo[playerid][xMute] > 0) {
	if(strlen(PlayerInfo[playerid][xOffPMute]) > 2) {
		SendClientMessageEx(playerid, SVETLOCRVENA, "OFFLINE MUTE:"col_white" %s je mutiran na %d minuta od strane AFG tima!", ImeIgraca(playerid), PlayerInfo[playerid][xMute]/60);
		SendClientMessageEx(playerid, SVETLOCRVENA, "OFFLINE MUTE:"col_white" RAZLOG: '%s'", PlayerInfo[playerid][xOffPMute]);
		strmid(PlayerInfo[playerid][xOffPMute], "N", 0, strlen("N"), 2);
	}
}
if(PlayerInfo[playerid][xOffWarn] > 0) {
	if(strlen(PlayerInfo[playerid][xOffPWarn]) > 2) {
		SendClientMessageEx(playerid, SVETLOCRVENA, "OFFLINE WARN:"col_white" %s je dobio offwarn od strane AFG tima!", ImeIgraca(playerid));
		SendClientMessageEx(playerid, SVETLOCRVENA, "OFFLINE WARN:"col_white" RAZLOG: '%s'", PlayerInfo[playerid][xOffPWarn]);
		PlayerInfo[playerid][xWarn] += 1;
		PlayerInfo[playerid][xOffWarn] = 0;
		strmid(PlayerInfo[playerid][xOffPWarn], "N", 0, strlen("N"), 2);
	}
}
if(PlayerInfo[playerid][xOffFine] > 0) {
	if(strlen(PlayerInfo[playerid][xOffPFine]) > 2) {
		SendClientMessageEx(playerid, SVETLOCRVENA, "OFFLINE FINE:"col_white" %s je dobio offFine od strane AFG tima!", ImeIgraca(playerid));
		SendClientMessageEx(playerid, SVETLOCRVENA, "OFFLINE FINE:"col_white" RAZLOG: '%s' | NOVAC '-%d$'", PlayerInfo[playerid][xOffPFine], PlayerInfo[playerid][xOffFine]);
		new brzicash = PlayerInfo[playerid][xOffFine];
		DajIgracuNovac(playerid, -brzicash);
		PlayerInfo[playerid][xOffFine] = 0;
		strmid(PlayerInfo[playerid][xOffPFine], "N", 0, strlen("N"), 2);
	}
}
if(PlayerInfo[playerid][xZatvor] == ALKATRAZ) {
	if(strlen(PlayerInfo[playerid][xOffPPrison]) > 2) {
		SendClientMessageEx(playerid, SVETLOCRVENA, "OFFLINE PRISON:"col_white" %s je stavljen u prison na %dh od strane AFG tima!", ImeIgraca(playerid), PlayerInfo[playerid][xZatvorVreme]/60);
		SendClientMessageEx(playerid, SVETLOCRVENA, "OFFLINE PRISON:"col_white" RAZLOG: '%s'", PlayerInfo[playerid][xOffPPrison]);
		strmid(PlayerInfo[playerid][xOffPPrison], "N", 0, strlen("N"), 2);
	}
}

if(SpecPos[playerid][0] != 0.0 && SpecPos[playerid][1] != 0.0) {
	ac_SetPlayerPos(playerid, SpecPos[playerid][0], SpecPos[playerid][1],  SpecPos[playerid][2]);
	SetPlayerVirtualWorld(playerid, SpecVW[playerid]);
	ac_SetPlayerInterior(playerid, SpecInt[playerid]);

	if(PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 7 && PlayerInfo[playerid][xPol] == 1) {
		c_SetPlayerSkin(playerid, 294);
	}
	else if(PlayerInfo[playerid][xHelper] > 0 && PlayerInfo[playerid][xPol] == 1) {
		c_SetPlayerSkin(playerid, 59);
	}

	SpecPos[playerid][0] = 0.0;
	SpecPos[playerid][1] = 0.0;
	SpecPos[playerid][2] = 0.0;}
// HappyHours - TDs
if(ServerInfo[HappyHoursx3] == true) {
	TextDrawSetString(FG_InGame[65], "HH:_~y~3x");
	TextDrawShowForPlayer(playerid, FG_InGame[65]);}
else {
	TextDrawSetString(FG_InGame[65], "HH:_~r~OFF");
	TextDrawShowForPlayer(playerid, FG_InGame[65]);}
if(ServerInfo[HappyHours] == true) {
	TextDrawSetString(FG_InGame[65], "HH:_~y~2x");
	TextDrawShowForPlayer(playerid, FG_InGame[65]);}
else {
	TextDrawSetString(FG_InGame[65], "HH:_~r~OFF");
	TextDrawShowForPlayer(playerid, FG_InGame[65]);}
// HappyJob - TDs
if(ServerInfo[HappyJob] == 0) {
	TextDrawSetString(FG_InGame[66], "HJ:_~r~OFF");
	TextDrawShowForPlayer(playerid, FG_InGame[66]); 
}
	else if(ServerInfo[HappyJob] == 1) {
	TextDrawSetString(FG_InGame[66], "HJ:_~y~K.TRAVE");
	TextDrawShowForPlayer(playerid, FG_InGame[66]); 
}
	else if(ServerInfo[HappyJob] == 2) {
	TextDrawSetString(FG_InGame[66], "HJ:_~y~FARMER");
	TextDrawShowForPlayer(playerid, FG_InGame[66]); 
}
	else if(ServerInfo[HappyJob] == 3) {
	TextDrawSetString(FG_InGame[66], "HJ:_~y~BUS V.");
	TextDrawShowForPlayer(playerid, FG_InGame[66]); 
}
	else if(ServerInfo[HappyJob] == 4) {
	TextDrawSetString(FG_InGame[66], "HJ:_~y~RUDAR");
	TextDrawShowForPlayer(playerid, FG_InGame[66]); 
}
	else if(ServerInfo[HappyJob] == 5) {
	TextDrawSetString(FG_InGame[66], "HJ:_~y~KOMUNA.");
	TextDrawShowForPlayer(playerid, FG_InGame[66]); 
}
	else if(ServerInfo[HappyJob] == 6) {
	TextDrawSetString(FG_InGame[66], "HJ:_~y~PREVOZ.");
	TextDrawShowForPlayer(playerid, FG_InGame[66]); 
}
	else if(ServerInfo[HappyJob] == 7) {
	TextDrawSetString(FG_InGame[66], "HJ:_~y~DRVOSE.");
	TextDrawShowForPlayer(playerid, FG_InGame[66]); 
}
	else if(ServerInfo[HappyJob] == 8) {
	TextDrawSetString(FG_InGame[66], "HJ:_~y~P.NAMES.");
	TextDrawShowForPlayer(playerid, FG_InGame[66]); 
}
	else if(ServerInfo[HappyJob] == 9) {
	TextDrawSetString(FG_InGame[66], "HJ:_~y~PEPSI D.");
	TextDrawShowForPlayer(playerid, FG_InGame[66]); 
}
	else if(ServerInfo[HappyJob] == 10) {
	TextDrawSetString(FG_InGame[66], "HJ:_~y~VOCAR");
	TextDrawShowForPlayer(playerid, FG_InGame[66]); 
}
	else if(ServerInfo[HappyJob] == 11) {
	TextDrawSetString(FG_InGame[66], "HJ:_~y~P.PROZ.");
	TextDrawShowForPlayer(playerid, FG_InGame[66]); 
}
	else if(ServerInfo[HappyJob] == 12) {
	TextDrawSetString(FG_InGame[66], "HJ:_~y~P.NOV.");
	TextDrawShowForPlayer(playerid, FG_InGame[66]); 
}
	else if(ServerInfo[HappyJob] == 13) {
	TextDrawSetString(FG_InGame[66], "HJ:_~y~PILOT");
	TextDrawShowForPlayer(playerid, FG_InGame[66]); 
}
return true;}

public OnPlayerDeath(playerid, killerid, reason) {

foreach(new i : Player)
{
		if(PlayerInfo[i][xAdmin] >= 1)
		{	
		SendDeathMessageToPlayer(i, killerid, playerid, reason);
	}
}
if(PozvanDuel[playerid] == 1)
{
	va_SendClientMessage(playerid, SVETLOPLAVA, "Ubijen si u duelu protiv %s", ImeIgraca(killerid));
	va_SendClientMessage(killerid, SVETLOPLAVA, "Ubio si igraca %s u duelu.", ImeIgraca(playerid));
	PozvanDuel[playerid] = 0;
	PozvanDuel[killerid] = 0;
	ResetPlayerWeapons(killerid);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerVirtualWorld(killerid, 0);}
StapZaPecanje[playerid] = 0;
spawnose[playerid] = 0;
if(gPlayerUsingLoopingAnim[playerid]) {
	gPlayerUsingLoopingAnim[playerid] = 0;}
if(Trenira[playerid] > 0) {
	KillTimer(treniranjetimer[playerid]);
	treniranjetimer[playerid] = -1;}
for(new w = 1; w < MAX_WARS; w ++) {
	if(killerid != INVALID_PLAYER_ID) {
		if(WARInfo[w][WARAktivan] == true && WARPInfo[playerid][WARIgrac] == w && WARPInfo[killerid][WARIgrac] == w) {
			WARPInfo[killerid][WARUbistva]++;
			WARPInfo[playerid][WARSmrti]++;
			new scm_string[128];
			if(WARPInfo[playerid][WARTim][0] == true && WARPInfo[killerid][WARTim][0] == true) {
				WARInfo[w][WARTimSkor][0] -= 3;
				format(scm_string, sizeof(scm_string), "(WAR) %s je ubio svog saigraca %s, te je njegov tim dobio -3 poena.", ImeIgraca(killerid), ImeIgraca(playerid));
				//SendDeathMessageToPlayer(w, killerid, playerid, reason);
				WARPoruka(w, WARLJUB, scm_string);
				SetWarStatsTD(w);
			}
			if(WARPInfo[playerid][WARTim][1] == true && WARPInfo[killerid][WARTim][1] == true) {
				WARInfo[w][WARTimSkor][1] -= 3;
				format(scm_string, sizeof(scm_string), "(WAR) %s je ubio svog saigraca %s, te je njegov tim dobio -3 poena.", ImeIgraca(killerid), ImeIgraca(playerid));
				//SendDeathMessageToPlayer(w, killerid, playerid, reason);
				WARPoruka(w, WARLJUB, scm_string);
				SetWarStatsTD(w);
			}
			if(WARPInfo[killerid][WARTim][0] == true && WARPInfo[playerid][WARTim][1] == true) {
				WARInfo[w][WARTimSkor][0]++;
				format(scm_string, sizeof(scm_string),"(WAR) %s je ubio protivnika %s!", ImeIgraca(killerid), ImeIgraca(playerid));
				//SendDeathMessageToPlayer(w, killerid, playerid, reason);
				WARPoruka(w, WARLJUB, scm_string);
				SetWarStatsTD(w);
			}
			if(WARPInfo[killerid][WARTim][1] == true && WARPInfo[playerid][WARTim][0] == true) {
				WARInfo[w][WARTimSkor][1]++;
				format(scm_string, sizeof(scm_string),"(WAR) %s je ubio protivnika %s!", ImeIgraca(killerid), ImeIgraca(playerid));
				//SendDeathMessageToPlayer(w, killerid, playerid, reason);
				WARPoruka(w, WARLJUB, scm_string);
				SetWarStatsTD(w);
			}
			return 1;
		}
	}
}

PlayerInfo[playerid][xSpawned] = 0;


if(NaDmEventu[playerid] == true) {
	new scm_string[128];
	if(killerid != INVALID_PLAYER_ID && NaDmEventu[killerid] == true) {
		PlayerInfo[killerid][xDMEventUbistva]++;
		format(scm_string, sizeof(scm_string),"(DM Zona) %s je ubio %s!", ImeIgraca(killerid), ImeIgraca(playerid));
		DMZPoruka(WARLJUB, scm_string);
	}
	return 1;}

antiCheatCS[playerid][TeleportCheck] = 2;
antiCheatCS[playerid][WeaponDetect] = 2;

if(SearchNadji[playerid] != -1) {

	SearchNadji[playerid] = -1;
	Fusion_DisablePlayerCheckpoint(playerid);}

if(ListaPrikazana[playerid]) {
	KladionicaTDControl(playerid, false);}
if(MojListicPrikazan[playerid]) {
	KladionicaListicTDControl(playerid, false);}
if(RezultatiPrikazana[playerid]) {
	RezultatiTDControl(playerid, false);}

if((gettime() - FakeKillTime[playerid]) < 5) {

	FakeKillPlus[playerid]++;
	if(FakeKillPlus[playerid] >= 3) {

		new varstring[166];
		format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s je kickovan sa servera. Razlog: "col_white"Fake kill", ImeIgraca(playerid));
		AdminPoruka(SVETLOCRVENA, varstring);
		Kickovanje(playerid, "{af001d][ FG:RPG ] : {FFFFFF]Kikovani ste sa servera zbog koriscenja cheata. (Fake Kill Hack)");
	}
	FakeKillTime[playerid] = gettime();
	return 0;}

FakeKillTime[playerid] = gettime();

//AC PROVJERA NOVA FAKEKILL
if(killerid != INVALID_PLAYER_ID)
{
	if(!FakeKill[playerid][killerid])
	{
		new varstring[166];
		format(varstring, sizeof(varstring), "| AC | %s je kickovan sa servera. Razlog: "col_white"Fake kill", ImeIgraca(playerid));
		AdminPoruka(SVETLOCRVENA, varstring);
		Kickovanje(playerid, "{af001d][ FG:RPG ] : {FFFFFF]Kikovani ste sa servera zbog koriscenja cheata. (Fake Kill Hack)");
		//ACKick(playerid, "Fake kill 2");
	}
	foreach(new u : Player) FakeKill[playerid][u] = false;}

if(gZone_ID[playerid] != -1) {

	new gZone__ID = gZone_ID[playerid];

	GangZoneStopFlashForAll(gZoneInfo[gZone__ID][gZoneID]);
	gZone_Time[playerid] = 0;
	gZone_InvMax1[playerid] = 0;
	Fusion_KillTimer(gZone_Timer[playerid]);
	new varstring[128];

	if(gZoneInfo[gZone__ID][gZoneGangID] != -1) {

		format(varstring, sizeof(varstring), "[TERITORIJA] Clan suparnicke bande %s koji je zauzimao teritoriju je ubijen.", OI[PlayerInfo[playerid][xClan]][oName]);
		OrgPoruka(gZoneInfo[gZone__ID][gZoneGangID], 0x95b4a2FF, varstring);
	}

	format(varstring, sizeof(varstring), "[TERITORIJA] Clan %s je ubijen te je prestao sa zauzimanjem.", ImeIgraca(playerid));
	OrgPoruka(PlayerInfo[playerid][xClan], 0x95b4a2FF, varstring);

	gZone_ID[playerid] = -1;

}

if(zauzimanje_firme_ID[playerid] != -1) {

	new businessID = zauzimanje_firme_ID[playerid];
	new varstring[128];

	zauzimanje_firme_Vreme[playerid] = 0;
	Fusion_KillTimer(zauzimanje_firme_Timer[playerid]);

	format(varstring, sizeof(varstring), "[ZAUZIMANJE] Clan %s je ubijen te je prestao sa zauzimanjem firme.", ImeIgraca(playerid));
	OrgPoruka(PlayerInfo[playerid][xClan], 0x95b4a2FF, varstring);

	BusinessInfo[businessID][bReket] = -1;

	BusinessInfo[businessID][bReketTime] = 0;

	SaveBusiness(businessID);
	Business_Refresh(businessID);

	zauzimanje_firme_ID[playerid] = -1;

}


if(PlayerCement[playerid] != -1) VehCement[PlayerCement[playerid]] = false;

if(DeliverCar[playerid] != -1) KamionUsed[DeliverCar[playerid]] = -1, StateBox[DeliverCar[playerid]] = 0;

if(IDVozilaKojimSverca[playerid] != -1) KutijaMatsa[IDVozilaKojimSverca[playerid]] = false;

if(PlayerPrevozNovca[playerid] != -1) VehNovac[PlayerPrevozNovca[playerid]] = false;

if(PlayerInfo[playerid][xHitmenCena] > 0) {
	if(IsPlayerConnected(killerid)) {
		if(OI[PlayerInfo[killerid][xClan]][oTip] == ORG_TIP_HITM) {
			if(HitmanInfo[killerid][GoChase] == playerid) {
				DajIgracuNovac(killerid, PlayerInfo[playerid][xHitmenCena]);
				PlayAudioStreamForPlayer(killerid, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");
				new varstring[128];
				for(new id = 1; id < MAX_ORG; id++) {
					if(OI[id][oTip] == ORG_TIP_HITM) {
						format(varstring, sizeof(varstring), "Agent %s je izvrsio svoju narudzbu na %s i zaradio $%d", ImeIgraca(killerid), ImeIgraca(playerid), PlayerInfo[playerid][xHitmenCena]);
						OrgPoruka(id, ZUTA, varstring);
					}
				}
				format(varstring, sizeof(varstring), "|Hitman| %s je ubio: %s", ImeIgraca(killerid), ImeIgraca(playerid));
				AdminPoruka(0x83BFBFAA, varstring);
				PlayerInfo[playerid][xHitmenCena] = 0;
				HitmanInfo[killerid][GoChase] = 999;
				HitmanInfo[playerid][GetChased] = 999;
				HitmanInfo[playerid][GotHit] = 0;
			}
		}
	}
}

if(PlayerInfo[playerid][xLevel] >= 5 && NaDmEventu[playerid] == false && WARPInfo[playerid][WARIgrac] == -1 && GetFactionType(playerid) != ORG_TIP_PD) {
	new Float:pPosX, Float:pPosY, Float:pPosZ;
	GetPlayerPos(playerid, pPosX, pPosY, pPosZ);
	new weaponsa[13][2];
	for(new i_slot = 0; i_slot < 13; i_slot++) {
		GetPlayerWeaponData(playerid, i_slot, weaponsa[i_slot][0], weaponsa[i_slot][1]);
		if(weaponsa[i_slot][0] != 0 && weaponsa[i_slot][1] != 0) CreateDroppedGun(weaponsa[i_slot][0], weaponsa[i_slot][1], pPosX+random(2)-random(2), pPosY+random(2)-random(2), pPosZ);
	}
}

SetPVarInt(playerid, "OfficerUndercover", 0);
ElectricOprema[playerid] = false;

	if(PljackaNovac[playerid] > 0) {
	PljackaNovac[playerid] = 0;
	VremeZaNovac[playerid] = 0;
	PljackaVreme[playerid] = 0;
	SCM(playerid, NARACRVENA, "Niste preziveli 2 minuta, izgubili ste opljackani novac.");}

if(PljackaVreme[playerid] > 0) Fusion_KillTimer(PljackanjeBankeTimer[playerid]), PljackaUToku = false;

if(PljackaZlato[playerid] > 0) {
	PljackaZlato[playerid] = 0;
	VremeZaZlato[playerid] = 0;
	ZlatoVreme[playerid] = 0;
	SCM(playerid, NARACRVENA, "Niste preziveli 2 minuta, izgubili ste opljackano zlato.");}

if(ZlatoVreme[playerid] > 0) Fusion_KillTimer(PljackanjeZlatareTimer[playerid]), ZlataraUToku = false;

if(farmerInfo[playerid][fiVehicleBucket] != -1) {
	new farmvehicle = farmerInfo[playerid][fiVehicleBucket];

	farmerVehicles[farmvehicle][fvMilk] = false;
	farmerVehicles[farmvehicle][fvMilkpID] = -1;}

if(killerid == IPI) {

	if(PlayerInfo[playerid][xWanted] > 0 && PlayerInfo[playerid][xZatvor] == 0) {

		new price = PlayerInfo[playerid][xWanted] * 1000;
		SendClientMessageEx(playerid, SVETLOCRVENA, "Gubite %d$ jer ste izvrsili samoubistvo dok ste bili trazeni.", price);

		DajIgracuNovac(playerid, -price);

		PlayerInfo[playerid][xWanted] = 0;
		Fusion_SetPlayerWantedLevel(playerid, PlayerInfo[playerid][xWanted]);
		strmid(ZlocinInfo[playerid][zPrijavio], "Nema", 0, strlen("Nema"), 255);
		strmid(ZlocinInfo[playerid][zPocinio], "Nema", 0, strlen("Nema"), 255);
		strmid(ZlocinInfo[playerid][zZlocin], "Nema", 0, strlen("Nema"), 255);
		SavePlayer(playerid);

		new varstring[94];
		for(new id = 1; id < MAX_ORG; id++) {
			if(OI[id][oTip] == ORG_TIP_PD) {
				format(varstring,sizeof(varstring),"HQ: Osumniceni %s je izvrsio samoubistvo i izgubio %d$, over.", ImeIgraca(playerid), price);
				OrgPoruka(id, 0x2641FEAA, varstring);
			}
		}

		format(varstring, sizeof(varstring), "~r~(AC) - ~w~%s(%d) je izvrsio samoubistvo sa WL.", ImeIgraca(playerid), playerid);
		SendAltChatMessage(varstring);

	}
}

if(killerid != INVALID_PLAYER_ID && GetPlayerState(killerid) == PLAYER_STATE_DRIVER) {

	new varstring[96];
	format(varstring, sizeof(varstring), "~r~(AC) - ~w~%s(%d) je uradio Drive By nad %s(%d).", ImeIgraca(killerid), killerid, ImeIgraca(playerid), playerid);
	SendAltChatMessage(varstring);}

if((reason >= 0 && reason <= 34) || reason == 49) {

	if(killerid != INVALID_PLAYER_ID && GetFactionType(killerid) != ORG_TIP_PD) {

		if(PlayerInfo[killerid][xZatvor] != 0) {

			SCM(killerid, SVETLOCRVENA, "ZATVOR | Ubili ste igraca u zatvoru i dobili 10 minuta dodatne kazne!");
			PlayerInfo[killerid][xZatvorVreme] += 10;
		}
		else {
			PostaviWanted(killerid, "Ubistvo prvog stepena", "Nepoznati", 5);
		}

		new altchat[156];

		if(PlayerInfo[playerid][xLevel] == 2) {
			format(altchat, sizeof(altchat), "~r~(AC) - ~w~%s(%d) je ubio novajliju %s(%d) sa %s.", ImeIgraca(killerid), killerid, ImeIgraca(playerid), playerid, wWeapNames[GetWeapon(killerid)]);
			SendAltChatMessage(altchat);
		}
		else if(PlayerInfo[playerid][xClan] == 0) {
			format(altchat, sizeof(altchat), "~r~(AC) - ~w~%s(%d) je ubio civila %s(%d) sa %s.", ImeIgraca(killerid), killerid, ImeIgraca(playerid), playerid, wWeapNames[GetWeapon(killerid)]);
			SendAltChatMessage(altchat);
		}
		else {
			format(altchat, sizeof(altchat), "~r~(AC) - ~w~%s(%d) je ubio igraca %s(%d) sa %s.", ImeIgraca(killerid), killerid, ImeIgraca(playerid), playerid, wWeapNames[GetWeapon(killerid)]);
			SendAltChatMessage(altchat);
		}
	}
	else if(killerid != INVALID_PLAYER_ID && GetFactionType(killerid) == ORG_TIP_PD) {

		if(PlayerInfo[playerid][xWanted] >= 1) {

			new price = PlayerInfo[playerid][xWanted] * 3000;
			new price1 = PlayerInfo[playerid][xWanted] * 1000;

			GameTextForPlayer(killerid, "~w~Osumnjiceni ~r~Ubijen", 5000, 1);
			PlayerPlaySound(killerid, 1058, 0.0, 0.0, 0.0);

			DajIgracuNovac(playerid, -price);
			DajIgracuNovac(killerid, price1);
			SendClientMessageEx(killerid, SVETLOCRVENA, "Dobili ste %d$ jer ste ubili osumnicenog koji je imao %d Wanted levela.", price1, PlayerInfo[playerid][xWanted]);
			PlayAudioStreamForPlayer(killerid, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");
			SendClientMessageEx(playerid, SVETLOCRVENA, "Gubite %d$ jer ste bezali od policije a policajac vas je ubio.", price);

			new varstring[136];
			for(new id = 1; id < MAX_ORG; id++) {
				if(OI[id][oTip] == ORG_TIP_PD) {
					format(varstring,sizeof(varstring),"HQ: Officer %s je ubio osumnicenog %s(-%d$), over.", ImeIgraca(killerid), ImeIgraca(playerid), price);
					OrgPoruka(id, 0x2641FEAA, varstring);
				}
			}

			PlayerInfo[playerid][xWanted] = 0;
			Fusion_SetPlayerWantedLevel(playerid, PlayerInfo[playerid][xWanted]);
			strmid(ZlocinInfo[playerid][zPrijavio], "Nema", 0, strlen("Nema"), 255);
			strmid(ZlocinInfo[playerid][zPocinio], "Nema", 0, strlen("Nema"), 255);
			strmid(ZlocinInfo[playerid][zZlocin], "Nema", 0, strlen("Nema"), 255);
			SavePlayer(playerid);

			format(varstring, sizeof(varstring), "PD/SAJ | [%d] %s je ubio igraca %s [%d] sa WL!", killerid, ImeIgraca(killerid), ImeIgraca(playerid), playerid);
			AdminPoruka(0xFFE65AAA, varstring);
		}
		else if(PlayerInfo[playerid][xWanted] <= 0) {

			new varstring[136];
			format(varstring, sizeof(varstring), "PD/SAJ | [%d] %s je ubio igraca %s [%d] bez WL!", killerid, ImeIgraca(killerid), ImeIgraca(playerid), playerid);
			AdminPoruka(0xFFE65AAA, varstring);

			if(PlayerInfo[playerid][xLevel] == 1) {
				AdminPoruka(0xFFE65AAA, "PD/SAJ | UBIJENI IGRAC JE NOVAJLIJA");
			}
			else if(PlayerInfo[playerid][xClan] == 0) {
				AdminPoruka(0xFFE65AAA, "PD/SAJ | UBIJENI IGRAC JE CIVIL");
			}
		}
	}
}

if(PlayerInfo[playerid][xZatvor] == 0 && PlayerInfo[playerid][xAdmin] == 0)
{
	PlayerInfo[playerid][xUbijen] = 1;}

if(PlayerInfo[playerid][xWanted] >= 1) {
	new price = PlayerInfo[playerid][xWanted] * 100;
	if(price > PlayerInfo[playerid][xNovac])
	{
			DajIgracuNovac(playerid, -PlayerInfo[playerid][xNovac]);
	}
	else
	{
			DajIgracuNovac(playerid, -price);
	}
	SendClientMessageEx(playerid, ZUTA, "Umrli ste sa wanted levelom i oduzeto vam je %d$.", price);
	PlayerInfo[playerid][xWanted] = 0;}

if(Maskuse[playerid] == true) {
	//Inventory_Remove(playerid, "Maska");
	Maskuse[playerid] = false;
	SetPlayerName(playerid, RealName[playerid]);}

if(Draged[playerid] != -1) {
	Fusion_KillTimer(DragTimer[Draged[playerid]]);
	DragedPlayerID[Draged[playerid]] = -1;
	Draged[playerid] = -1;}
if(DragedPlayerID[playerid] != -1) {
	Fusion_KillTimer(DragTimer[playerid]);
	DragedPlayerID[playerid] = -1;
	Draged[DragedPlayerID[playerid]] = -1;}

if(IsValidDynamicMapIcon(PlayerGpsRadar[playerid][_pgrIconId])) {
	DestroyDynamicMapIcon(PlayerGpsRadar[playerid][_pgrIconId]);}

if(IsValidDynamicObject(PlayerGpsRadar[playerid][_pgrObject])) {
	DestroyDynamicObject(PlayerGpsRadar[playerid][_pgrObject]);}

if(IsValidDynamicCP(PlayerGpsRadar[playerid][_pgrCheckPointId])) {
	DestroyDynamicCP(PlayerGpsRadar[playerid][_pgrCheckPointId]);}

Fusion_KillTimer(atmrobTimer[playerid]);

PlayerGpsRadar[playerid][_pgrIconId] = -1;
PlayerGpsRadar[playerid][_pgrObject] = -1;
PlayerTextDrawHide(playerid, PlayerGpsRadarText[playerid]);

if(PlayerBuyingAS[playerid] != -1) {
		AutoSalon[PlayerBuyingAS[playerid]][AlreadyBuying] = false;
		PlayerBuyingAS[playerid] = -1;}

if(antiCheatCS[playerid][TakeVehicle] != INVALID_VEHICLE_ID) {
	BusyVehicle[antiCheatCS[playerid][TakeVehicle]] = -1;}

if(KupujeNamestaj[playerid] == 1)
	{
		nekokupujenamestaj = 0;
		KupujeNamestaj[playerid] = 0;
	}

	if(Uciskolu[playerid] == true) { Fusion_KillTimer(SkolaTimer[playerid]); }

InAmbu[playerid] = -1;

if(TrashSearch[playerid] == 1)  { Fusion_KillTimer(TrashTimer[playerid]); TrashSearch[playerid] = 0;}

if(JediSearch[playerid] == 1)  { Fusion_KillTimer(JediTimer[playerid]); JediSearch[playerid] = 0;}

if(PusiNargilu[playerid] == 1)  { Fusion_KillTimer(NargilaTimer[playerid]); PusiNargilu[playerid] = 0;}

if(GetPVarInt(playerid, "CuffTimerCalled") == 1)
{
	Fusion_KillTimer(TazerTimer[playerid]);}

if(offeredByCabbie[playerid] != INVALID_PLAYER_ID)
{
	TaximetarUkljucen[offeredByCabbie[playerid]] = false;

	PlayerTextDrawSetString(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][6], "N/A");
	PlayerTextDrawShow(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][6]);
	PlayerTextDrawSetString(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][9], "N/A");
	PlayerTextDrawShow(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][9]);

	CenaVoznje[offeredByCabbie[playerid]] = 0;
	VoziIgracaID[offeredByCabbie[playerid]] = INVALID_PLAYER_ID;
	Fusion_KillTimer(TaxiTimer[offeredByCabbie[playerid]]);
	offeredByCabbie[playerid] = INVALID_PLAYER_ID;}

if(taxiDuty[playerid] == true) {
	TaximetarUkljucen[playerid] = false;

	PlayerTextDrawHide(playerid, TaxistaTD[playerid][0]);
	PlayerTextDrawHide(playerid, TaxistaTD[playerid][1]);
	PlayerTextDrawHide(playerid, TaxistaTD[playerid][2]);
	PlayerTextDrawHide(playerid, TaxistaTD[playerid][3]);
	PlayerTextDrawHide(playerid, TaxistaTD[playerid][4]);
	PlayerTextDrawHide(playerid, TaxistaTD[playerid][5]);
	PlayerTextDrawHide(playerid, TaxistaTD[playerid][6]);
	PlayerTextDrawHide(playerid, TaxistaTD[playerid][7]);
	PlayerTextDrawHide(playerid, TaxistaTD[playerid][8]);
	PlayerTextDrawHide(playerid, TaxistaTD[playerid][9]);
	PlayerTextDrawHide(playerid, TaxistaTD[playerid][10]);
	PlayerTextDrawHide(playerid, TaxistaTD[playerid][11]);

	CenaVoznje[playerid] = 0;
	VoziIgracaID[playerid] = INVALID_PLAYER_ID;
	offeredByCabbie[playerid] = INVALID_PLAYER_ID;}


new caller = GetPVarInt(playerid, "Mobile");

if(caller != -1)
{
	if(caller < 500)
	{
		SCM(caller,  0xBFC0C2FF, "   Linija prekinuta....");
		SetPVarInt(caller, "CellTime", 0);
		SetPVarInt(playerid, "CellTime", 0);
		SetPVarInt(caller, "Mobile", -1);
	}
	SetPVarInt(playerid, "Mobile", -1);
	SetPVarInt(playerid, "CellTime", 0);}

UzeoOpremu[playerid] = false;
RibarOprema[playerid] = false;

if(AdminDuty[playerid]) {
	AdminDuty[playerid] = false;}
return true;}

public OnVehicleSpawn(vehicleid) {

antiCheatVS[vehicleid][VehTrueHealth] = 1000;
antiCheatVS[vehicleid][VehCheck] = 1;
new engine, lights, alarm, doors, bonnet, boot, objective;

if(ScriptIDVozila[vehicleid] != -1) SetVehicleLabels(ScriptIDVozila[vehicleid]);

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
ac_SetVehicleParamsEx(vehicleid, engine, 0, alarm, 0, 0, 0, objective);

if(TipVozila[vehicleid] == PRIVATNO_VOZILO) {
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	ac_SetVehicleParamsEx(vehicleid, engine, 0, alarm, VehicleInfo[ScriptIDVozila[vehicleid]][vLocked], 0, 0, objective);

	ac_LinkVehicleToInterior(vehicleid, VehicleInfo[ScriptIDVozila[vehicleid]][vInterior]);
	SetVehicleVirtualWorld(vehicleid, VehicleInfo[ScriptIDVozila[vehicleid]][vVirtualWorld]);}

TuneVehicle(ScriptIDVozila[vehicleid]);

vCanDrive[vehicleid] = 1;
VehicleObjectCheck(vehicleid);
ResetVehicleStatistics(vehicleid);
if(IsVehicleBajs(vehicleid)) {
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	ac_SetVehicleParamsEx(vehicleid, 1, 0, alarm, doors, 0, 0, objective);}
return true;}

public OnVehicleDeath(vehicleid, killerid) {
VehicleObjectCheck(vehicleid);
ResetVehicleStatistics(vehicleid);
return true;}

VehicleObjectCheck(vehicleid) {
if(vehicleid != -1) {
	if(Neon[vehicleid] == 1) {
		Neon[vehicleid] = 0;
		DestroyDynamicObject(NeonObject1[vehicleid]);
		DestroyDynamicObject(NeonObject2[vehicleid]);
	}
	if(WOOD[vehicleid] == true) {
		WOOD[vehicleid] = false;
		DestroyDynamicObject(WOODObject[vehicleid]);
	}
	if(Siren[vehicleid] == 1) {
		Siren[vehicleid] = 0;
		DestroyDynamicObject(SirenObject[vehicleid]);
	}
	if(CarSign[vehicleid] == 1) {
		CarSign[vehicleid] = 0;
		Delete3DTextLabel(vehicle3Dtext[vehicleid]);
	}
}
}

strtok(const string[], &index)
{
new length = strlen(string);

while ((index < length) && (string[index] <= ' '))
{
	index++;}

new offset = index,
	result[20];

while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
{
	result[index - offset] = string[index];
	index++;}

result[index - offset] = EOS;
return result;}

CellphoneCheck(playerid) {

new varstring[64];
if(GetPVarInt(playerid, "CellTime") > 0) {

	if(GetPVarInt(playerid, "CellTime") == cchargetime) {

		SetPVarInt(playerid, "CellTime", 1);

		if(GetPVarInt(GetPVarInt(playerid, "Mobile"), "Mobile") == playerid) {
			PovecajPVarInt(playerid, "CallCost", callcost);
		}
	}

	PovecajPVarInt(playerid, "CellTime", 1);

	if(GetPVarInt(GetPVarInt(playerid, "Mobile"), "Mobile") == -1 && GetPVarInt(playerid, "CellTime") == 5) {
		format(varstring, sizeof(varstring), "* %s zvoni mobilni telefon.", ImeIgraca(GetPVarInt(playerid, "Mobile")));
		PorukaRadius(30.0, GetPVarInt(playerid, "Mobile"), varstring, LJUBICASTA);
	}
}
if(GetPVarInt(playerid, "CellTime") == 0 && GetPVarInt(playerid, "CallCost") > 0) {

	format(varstring, sizeof(varstring), "~w~Cena poziva~n~~r~$%d", GetPVarInt(playerid, "CallCost")+4);
	PlayerInfo[playerid][xTelefonBon] -= GetPVarInt(playerid, "CallCost")+4;
	BusinessTelekomMoney(GetPVarInt(playerid, "CallCost")+4, playerid);
	GameTextForPlayer(playerid, varstring, 5000, 1);
	SetPVarInt(playerid, "CallCost", 0);}
}

SearchingHit(playerid) {
new string[128];
new searchhit = 0;
foreach(new i : Player) {
	if(searchhit == 0) {
			if(PlayerInfo[i][xHitmenCena] > 0 && HitmanInfo[i][GotHit] == 0 && OI[PlayerInfo[i][xClan]][oTip] != ORG_TIP_HITM) {
			searchhit = 1;
			hitfound = 1;
			ahitid = i;
			foreach(new k : Player){
				if(OI[PlayerInfo[k][xClan]][oTip] == ORG_TIP_HITM) {
					SCM(k, BELA, "|______________________ Novosti Agencije __________________________|");
					SCM(k, SVETLOPLAVA, "*** Nova Poruka: Nova meta je dostupna. ***");
					format(string, sizeof(string), "Osoba: %s   ID: %d   Vrednost: $%d", ImeIgraca(i), i, PlayerInfo[i][xHitmenCena]);
					SCM(k, SVETLOPLAVA, string);
					SCM(k, ZUTA, "Koristite Givehit id, da biste dodjelili metu jednome od vasih agenata.");
					SCM(k, BELA, "|______________________________________________________________________|");
				}
			}
			return 0;
		}
	}
}
if(searchhit == 0) {
	SendErrorMessage(playerid, "Nema dostupnih meta !");}
return 0;}

public OnPlayerText(playerid, text[]) {
new tmp[128];
if(PlayerInfo[playerid][xMute] != 0) {
	//SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
	SendClientMessageEx(playerid, NARACRVENA, "Ne mozete pricati, mutirani ste jos "col_white"%d sekundi.", PlayerInfo[playerid][xMute]);
	return 0;}
if(PlayerCuffed[playerid] >= 1) {
	SendErrorMessage(playerid, "Ne mozes pricati kad si cuffovan ili tazovan.");
	return 0;}
if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xHelper] < 1 && PlayerInfo[playerid][xVIPLevel] < 4) {
	if(antiCheatCS[playerid][SpamChat] > 0) {
		SCM(playerid, -1, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Chat mozete koristiti svake 2 sekunde.");
		return 0;
	}
	antiCheatCS[playerid][SpamChat] += 2;}
if(AdminAfk[playerid] == true)
{
	SendErrorMessage(playerid, "Ukljucen vam je AFK rezim - /afk.");
	return 0;}

if(rconCheck[playerid] == true)
{
	SendErrorMessage(playerid, "Ne mozete koristiti chat jer niste uneli RCON kod.");
	return false;}

if(strval(text) == Odgovor && ReakcijaAktivna == 1)
{
	switch(random(3))
	{
		case 0:
		{
			new money = randomEx(1500, 4300),
				respect = randomEx(2,4);
			PlayerInfo[playerid][xRespekt] += respect;
			DajIgracuNovac(playerid, money);

			new string[225];
			format(string,sizeof string,"{F55B65][MATEMATICKI ZADATAK] {FFFFFF]%s je prvi odgovorio tacno i dobio %d$ i %d respekta! Rezultat je {F55B65]%d!", ImeIgraca(playerid), money, respect, Odgovor);
			SCMA(-1,string);
		}
		case 1:
		{
			new respect = randomEx(2,4);
			PlayerInfo[playerid][xRespekt] += respect;
			SavePlayer(playerid);

			new string[225];
			format(string,sizeof string,"{F55B65][MATEMATICKI ZADATAK] {FFFFFF]%s je prvi odgovorio tacno i dobio %d respekta! Rezultat je {F55B65]%d!", ImeIgraca(playerid), respect, Odgovor);
			SCMA(-1,string);
		}
		case 2:
		{
			new money = randomEx(1500, 4300);
			DajIgracuNovac(playerid, money);

			new string[225];
			format(string,sizeof string,"{F55B65][MATEMATICKI ZADATAK] {FFFFFF]%s je prvi odgovorio tacno i dobio %d$! Rezultat je {F55B65]%d!", ImeIgraca(playerid), money, Odgovor);
			SCMA(-1,string);
		}
	}
	ReakcijaAktivna = 0;
	return 0;}
if(reactionTest){
	if(strlen(reactionMessage[0])) {
		if(!strcmp(text, reactionMessage[0], false) && strcmp(text, "{777777]", false)){

			EndReaction(playerid);
			return 0;
		}
	}
}
else {

	if(!strcmp(text, reactionMessage[0], false) && reactionWon) {

		if(!strcmp(reactionWinner, ImeIgraca(playerid), false)) reactionMessage[1] = "{F55B65][REAKCIJA] {FFFFFF]Vi ste vec odgovorili!";
		else format(reactionMessage[1], 256, "{F55B65][REAKCIJA] {FFFFFF]Kasno! %s je odgovorio prvi!", reactionWinner);

		SendClientMessage(playerid, -1, reactionMessage[1]);
		return 0;
	}
}

for(new b = 0; b < sizeof(ZabranjeneReci); b++) {
	if(strfind(text, ZabranjeneReci[b], true) != -1) {
		new varstring[144];
		format(varstring, sizeof(varstring), "[IC]%s[%d]: %s", ImeIgraca(playerid), playerid, text);
		AdminPoruka(0x808000AA, varstring);
		return 0;
	}
}

if(GetPVarInt(playerid, "TalkingLive") != 255) {
	new varstring[156];
	if(GetFactionType(playerid) == ORG_TIP_CNN)
	{
		format(varstring, sizeof(varstring), "Reporter (Uzivo) %s: "col_white"%s", ImeIgraca(playerid), text);
		OOCNews(0xE79E03AA, varstring);
	}
	else
	{
		format(varstring, sizeof(varstring), "Gost (Uzivo) %s: "col_white"%s", ImeIgraca(playerid), text);
		OOCNews(0xE79E03AA, varstring);
	}
	return 0;}
if(MarriageCeremoney{ playerid } > 0) {
	new idx;
	new varstring[144];
	tmp = strtok(text, idx);
	if((strcmp("da", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("da"))) {
		if(GotProposedBy[playerid] < 999) {
			if(IsPlayerConnected(GotProposedBy[playerid])) {
				format(varstring, sizeof(varstring), "Maticar: %s da li vi uzimate %s za vasu voljenu zenu? (Ukoliko zelite to ukucajte 'da').", ImeIgraca(GotProposedBy[playerid]), ImeIgraca(playerid));
				SCM(GotProposedBy[playerid], BELA, varstring);
				MarriageCeremoney{ GotProposedBy[playerid] } = 1;
				MarriageCeremoney{ playerid } = 0;
				GotProposedBy[playerid] = 999;
				return 0;
			}
			else {
				MarriageCeremoney{ playerid } = 0;
				GotProposedBy[playerid] = 999;
				return 0;
			}
		}
		else if(ProposedTo[playerid] < 999) {
			if(IsPlayerConnected(ProposedTo[playerid])) {
				format(varstring, sizeof(varstring), "Maticar: %s i %s proglasavam vas za...Muza i Zenu, Mozete poljubiti mladu.", ImeIgraca(playerid), ImeIgraca(ProposedTo[playerid]));
				SCM(playerid, BELA, varstring);
				format(varstring, sizeof(varstring), "Maticar: %s i %s proglasavam vas za...Muza i Zenu, Mozete poljubiti mladozenju.", ImeIgraca(ProposedTo[playerid]), ImeIgraca(playerid));
				SCM(ProposedTo[playerid], BELA, varstring);
				format(varstring, sizeof(varstring), "Najnovije vesti: Imamo novi srecni par, %s i %s su se upravo vencali.", ImeIgraca(playerid), ImeIgraca(ProposedTo[playerid]));
				OOCNews(BELA, varstring);

				//MarriageCeremoney[ProposedTo[playerid]] = 1;
				MarriageCeremoney{ ProposedTo[playerid] } = 0;
				MarriageCeremoney{ playerid } = 0;
				new namestring[24];
				format(namestring, sizeof(namestring), "%s", ImeIgraca(playerid));
				strmid(PlayerInfo[ProposedTo[playerid]][xMarriedTo], namestring, 0, strlen(namestring), 24);
				format(namestring, sizeof(namestring), "%s", ImeIgraca(ProposedTo[playerid]));
				strmid(PlayerInfo[playerid][xMarriedTo], namestring, 0, strlen(namestring), 24);
				DajIgracuNovac(playerid, -10000);
				PlayerInfo[playerid][xMarried] = true;
				PlayerInfo[ProposedTo[playerid]][xMarried] = true;
				ProposedTo[playerid] = 999;
				MarriageCeremoney{ playerid } = 0;
				return 0;
			}
			else {
				MarriageCeremoney{ playerid } = 0;
				ProposedTo[playerid] = 999;
				return 0;
			}
		}
	}
	else {
		if(GotProposedBy[playerid] < 999) {
			if(IsPlayerConnected(GotProposedBy[playerid])) {
				format(varstring, sizeof(varstring), "* Niste zeleli da se udate za %s, niste izgovorili 'da'.", ImeIgraca(GotProposedBy[playerid]));
				SCM(playerid, ZUTA, varstring);
				format(varstring, sizeof(varstring), "* %s nije izgovorio 'da'.", ImeIgraca(playerid));
				SCM(GotProposedBy[playerid], ZUTA, varstring);
				return 0;
			}
			else {
				MarriageCeremoney{ playerid } = 0;
				GotProposedBy[playerid] = 999;
				return 0;
			}
		}
		else if(ProposedTo[playerid] < 999) {
			if(IsPlayerConnected(ProposedTo[playerid])) {
				format(varstring, sizeof(varstring), "* Niste zeleli da se udate za %s, niste izgovorili 'da'.", ImeIgraca(ProposedTo[playerid]));
				SCM(playerid, ZUTA, varstring);
				format(varstring, sizeof(varstring), "* %s nije izgovorila 'da'.", ImeIgraca(playerid));
				SCM(ProposedTo[playerid], ZUTA, varstring);
				return 0;
			}
			else {
				MarriageCeremoney{ playerid } = 0;
				ProposedTo[playerid] = 999;
				return 0;
			}
		}
	}
	return 0;}
if(GetPVarInt(playerid, "Mobile") != -1) {
	new idx;
	tmp = strtok(text, idx);
	new varstring[144];
	format(varstring, sizeof(varstring), "[Mobilni] %s kaze:"col_white" %s", ImeIgraca(playerid), text);
	PorukaRadius(20.0, playerid, varstring, 0xE6E6E6E6);
	if(GetPVarInt(playerid, "Mobile") == 915) {

		if(!strlen(tmp)) {

			SCM(playerid, 0xFF8282AA, "HITNA LINIJA: Oprostite ali nerazumem?");
			return 0;
		}

			new wanted[128];
		SCM(playerid, 0xFF8282AA, "HITNA LINIJA: Obavijestili smo sve jedinice u tom podrucju.");

		for(new id = 1; id < MAX_ORG; id++) {

			if(OI[id][oTip] == ORG_TIP_MD) {

				format(wanted, sizeof(wanted), "HITNA LINIJA: Svim jedinicama, Pozivatelj: Nepoznat (( %s ))", ImeIgraca(playerid));
				OrgPorukaMD(id, 0xFF8282AA, wanted);
				format(wanted, sizeof(wanted), "HITNA LINIJA: Incident: %s", text);
				OrgPorukaMD(id, 0xFF8282AA, wanted);
				format(wanted, sizeof(wanted), "HITNA LINIJA: Lokacija: %s", PlayerInjured[playerid][pVictimLocation]);
				OrgPorukaMD(id, 0xFF8282AA, wanted);
			}
		}
		SCM(playerid, 0xBFC0C2FF, "Prekinuli su...");
		SetPVarInt(playerid, "Mobile", -1);
		RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);

		wanted[0] = (EOS);

		return 0;
	}
	if(GetPVarInt(playerid, "Mobile") == 913) {

		if(!strlen(tmp)) {

			SCM(playerid, 0xFF8282AA, "HITNA LINIJA: Oprostite ali nerazumem?");
			return 0;
		}
		new wanted[128];
		strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
		PlayerCrime[playerid][pDone] = 1;
		SCM(playerid, 0x2641FEAA, "Policija: Obavijestili smo sve jedinice u tom podrucju.");
		SCM(playerid, 0x2641FEAA, "Zahvaljujemo na prijavi zlocina");

		for(new id = 1; id < MAX_ORG; id++) {

			if(OI[id][oTip] == ORG_TIP_PD) {

				OrgPoruka(id, 0x83BFBFFF, "|__________________911 Poziv__________________|");
				format(wanted, sizeof(wanted), "Pozivaoc: %s | Broj: %d", ImeIgraca(playerid), PlayerInfo[playerid][xBrojTelefona]);
				OrgPoruka(id, 0x83BFBFFF, wanted);
				format(wanted, sizeof(wanted), "Lokacija: %s",PlayerCrime[playerid][pLocation]);
				OrgPoruka(id, 0x83BFBFFF, wanted);
				format(wanted, sizeof(wanted), "Zlocin: %s",PlayerCrime[playerid][pAccusing]);
				OrgPoruka(id, 0x83BFBFFF, wanted);
				format(wanted, sizeof(wanted), "Trag Mobitela: %s", GetPlayerLocation(playerid));
				OrgPoruka(id, 0x83BFBFFF, wanted);
			}
		}
		SCM(playerid, 0xBFC0C2FF, "Prekinuli su...");
		SetPVarInt(playerid, "Mobile", -1);
		RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);

		wanted[0] = (EOS);

		return 0;
	}
	if(GetPVarInt(playerid, "Mobile") == 912) {
		if(!strlen(tmp)) {
			SCM(playerid, 0xFF8282AA, "HITNA LINIJA: Oprostite ali nerazumem?");
			return 0;
		}
		strmid(PlayerCrime[playerid][pLocation], text, 0, strlen(text), 255);
		SCM(playerid, 0xFF8282AA, "HITNA LINIJA:Molimo vas ukratko opisite zlocin.");
		SetPVarInt(playerid, "Mobile", 913);
		return 0;
	}
	if(GetPVarInt(playerid, "Mobile") == 555) {
		if(!strlen(tmp)) {
			SCM(playerid, 0xFF8282AA, "Tajnica: Oprostite ali nerazumem?");
			return 0;
		}
		strmid(PlayerNeedMechanic[playerid][pMechanicLocation], text, 0, strlen(text), 255);
		SCM(playerid, 0xFF8282AA, "Tajnica:Molimo vas ukratko opisite sto trebate(Popravak/Gorivo).");
		SetPVarInt(playerid, "Mobile", 556);
		return 0;
	}
	if(GetPVarInt(playerid, "Mobile") == 556) {
		if(!strlen(tmp)) {
			SCM(playerid, 0xFF8282AA, "Tajnica: Oprostite nerazumem, da li trebate popravak ili gorivo?");
			return 0;
		}
		else if((strcmp("popravak", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("popravak"))) {
			SetPVarInt(playerid, "Mobile", -1); 
			SCM(playerid, 0xFF8282AA, "Tajnica: Obavijestili smo sve mehanicare na duznosti.");
			SCM(playerid, 0xFF8282AA, "Tajnica: Zahvaljujemo na ukazanom povjerenju i koristenju nasih usluga.");
			format(varstring, sizeof(varstring), "TAJNICA: Svim mehanicarima na duznosti, Pozivatelj: %s", ImeIgraca(playerid));
			//SendMechanicMessage(0xFF8282AA, varstring);
			//SendMechanicMessage(0xFF8282AA, "TAJNICA: Potrebno: Popravak!");
			format(varstring, sizeof(varstring), "TAJNICA: Lokacija: %s", PlayerNeedMechanic[playerid][pMechanicLocation]);
			//SendMechanicMessage(0xFF8282AA, varstring);
			SCM(playerid, 0xBFC0C2FF, "   Prekinuli su...");
			RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			return 0;
		}
		else if((strcmp("gorivo", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("gorivo"))) {
			SetPVarInt(playerid, "Mobile", -1); 
			SCM(playerid, 0xFF8282AA, "Tajnica: Obavijestili smo sve mehanicare na duznosti.");
			SCM(playerid, 0xFF8282AA, "Tajnica: Zahvaljujemo na ukazanom povjerenju i koristenju nasih usluga.");
			format(varstring, sizeof(varstring), "TAJNICA: Svim mehanicarima na duznosti, Pozivatelj: %s", ImeIgraca(playerid));
			//SendMechanicMessage(0xFF8282AA, varstring);
			//SendMechanicMessage(0xFF8282AA, "TAJNICA: Potrebno: Gorivo!");
			format(varstring, sizeof(varstring), "TAJNICA: Lokacija: %s", PlayerNeedMechanic[playerid][pMechanicLocation]);
			//SendMechanicMessage(0xFF8282AA, varstring);
			SCM(playerid, 0xBFC0C2FF, "   Prekinuli su...");
			RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			return 0;
		}
		else {
			SCM(playerid, 0xFF8282AA, "Tajnica: Oprostite ne razumem, da li trebate popravak ili gorivo?");
			return 0;
		}
	}
	if(GetPVarInt(playerid, "Mobile") == 916) {
		if(!strlen(tmp)) {
			SCM(playerid, 0xFF8282AA, "HITNA LINIJA: Oprostite ali nerazumem?");
			return 0;
		}
		strmid(PlayerInjured[playerid][pVictimLocation], text, 0, strlen(text), 255);
		SCM(playerid, 0xFF8282AA, "HITNA LINIJA:Molimo vas ukratko opisite incident.");
		SetPVarInt(playerid, "Mobile", 915);
		return 0;
	}
	if(GetPVarInt(playerid, "Mobile") == 911) {
		if(!strlen(tmp)) {
			SCM(playerid, 0xFF8282AA, "HITNA LINIJA: Oprostite nerazumem, da li trebate policiju ili hitnu pomoc?");
			return 0;
		}
		else if((strcmp("police", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("police"))) {
			SCM(playerid, 0xFF8282AA, "HITNA LINIJA: Spajam vas sa policijom, ostanite na liniji.");
			SetPVarInt(playerid, "Mobile", 912);
			SCM(playerid, 0x2641FEAA, "HITNA LINIJA: Molimo Vas recite nam svoju lokaciju.");
			return 0;
		}
		else if((strcmp("paramedic", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("paramedic"))) {
			SCM(playerid, 0xFF8282AA, "HITNA LINIJA: Spajam vas sa bolnicom, ostanite na liniji.");
			SetPVarInt(playerid, "Mobile", 916);
			SCM(playerid, 0xFF8282AA, "HITNA LINIJA: Molimo Vas recite nam svoju lokaciju.");
			return 0;
		}
		else {
			SCM(playerid, 0xFF8282AA, "HITNA LINIJA: Oprostite ne razumem, da li trebate police ili paramedic?");
			return 0;
		}
	}
	if(IsPlayerConnected(GetPVarInt(playerid,"Mobile"))) {
		if(GetPVarInt(GetPVarInt(playerid,"Mobile"),"Mobile") == playerid) {
			SendClientMessageEx(GetPVarInt(playerid,"Mobile"),0xE6E6E6E6 ,varstring);
		}
	}
	else {
		SendClientMessage(playerid,-1,"Nema nikoga tamo.");
	}
	return 0;}
if(realchat) {
	if(PlayerLogged[playerid] != true) {
		return 0;
	}
	if(!IsPlayerInAnyVehicle(playerid) && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_USEJETPACK) {
		if(GetPVarInt(playerid, "ToggedAnim") == 0 && PosaoRudar[playerid] == 0) {
			if(strlen(text) > 0 && strlen(text) < 10)
				ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,500,1);
			else if(strlen(text) >= 10 && strlen(text) < 20)
				ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,1000,1);
			else if(strlen(text) >= 20 && strlen(text) < 30)
				ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,1500,1);
			else if(strlen(text) >= 30 && strlen(text) < 40)
				ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,2000,1);
			else if(strlen(text) >= 40 && strlen(text) < 50)
				ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,2500,1);
			else if(strlen(text) >= 50 && strlen(text) < 61)
				ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,3000,1);
		}
	}
	new string[128];
	if(IsPlayerInAnyVehicle(playerid) && !IsACabrio(GetVehicleModel(GetPlayerVehicleID(playerid)))) {
		if(Maskuse[playerid] == true)
			format(string, sizeof(string), "Maska_%d kaze (vozilo) : %s", PlayerInfo[playerid][xMaskID], text);
		else
			format(string, sizeof(string), "%s kaze (vozilo): %s", ImeIgraca(playerid), text);
		PorukaRadius(20.0 , playerid, string, -1);
		SetPlayerChatBubble(playerid, text, 0xFF0000FF, 20.0, 7000);

		new string1[128];
		format(string1, sizeof(string1), "Igrac %s: %s", ImeIgraca(playerid), text);
		LogSave("Ostalo/LogICChat.log", string1);
	}
	else {
		if(Maskuse[playerid] == true)
			format(string, sizeof(string), "Maska_%d kaze: %s", PlayerInfo[playerid][xMaskID], text);
		else
			format(string, sizeof(string), "%s kaze: %s", ImeIgraca(playerid), text);
		PorukaRadius(20.0 , playerid, string, -1);
		SetPlayerChatBubble(playerid, text, 0xFFFFFFFF, 20.0, 7000); //0xFF0000FF

		new string1[128];
		format(string1, sizeof(string1), "Igrac %s: %s", ImeIgraca(playerid), text);
		LogSave("Ostalo/LogICChat.log", string1);
	}
	return 0;}
return 0;}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
if(!IsPlayerConnected(playerid)) return false;

if(rconCheck[playerid] == true)
{
	SendErrorMessage(playerid, "Ne mozete koristiti komande jer niste uneli RCON kod.");
	return false;}
if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xHelper] < 1 && PlayerInfo[playerid][xVIPLevel] < 4) {
	if(antiCheatCS[playerid][SpamCommand] > 0) {
		SCM(playerid, -1, "| "col_server"x"col_white"Game"col_server"Warden "col_white"| Komande mozete koristiti svake 2 sekunde.");
		return false;
	}
	antiCheatCS[playerid][SpamCommand] += 2;
	}

if(PlayerLogged[playerid] != true)
{
	SendErrorMessage(playerid, "Morate biti prijavljeni da biste koristili komande.");
	return false;}
return true;}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags) {

if(result == -1) { SendErrorMessage(playerid, "Komanda '/%s' ne postoji u bazi, za popis svih komandi kucajte /help.", cmd); return 0;}

new string[128]; format(string, sizeof(string), "Igrac %s | Komanda: %s", ImeIgraca(playerid), cmd); LogSave("Ostalo/LogKomandi.log", string);

return true;}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger) {

if(PlayerInfo[playerid][xPosao] == POSAO_PEPSI && CarriesBox[playerid] != 0)
{
	SendErrorMessage(playerid, "Ne mozete sa kutijom u vozilo!");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	ac_SetPlayerPos(playerid, x, y, z+5);
	if(antiCheatCS[playerid][TakeVehicle] != INVALID_VEHICLE_ID) {
		BusyVehicle[antiCheatCS[playerid][TakeVehicle]] = -1;
   }
}

if(ServerInfo[RRVehicle] == true) {
	if(!occupied[vehicleid])
		occupied[vehicleid] = true;}
antiCheatCS[playerid][EnteredVehicle] = vehicleid;
	if(ispassenger == 0) {
	if(BusyVehicle[vehicleid] > -1) {
		if(BusyVehicle[vehicleid] == playerid) {}
		else {
			new Float:Poz[3];
			GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
			ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
			TogglePlayerControllable(playerid, false);
			SetTimerEx("SlobodnoSada", 3000, false, "i", playerid);
			SCM(playerid, SVETLOCRVENA, "| AC | Zabranjeno je otimati vozila drugim igracima!");
		}
	}
}
return true;}
forward TimerRent(playerid);
public TimerRent(playerid) {

RentVreme[playerid]--;
if(RentVreme[playerid] == 0) {
	KillTimer(RentTimer[playerid]);
	DestroyVehicle(RentVeh[playerid]);
	Delete3DTextLabel(RentVehLabel[RentVeh[playerid]]);
	IznajmioVozilo[playerid] = 0;
	RentOdabir[playerid] = 0;
	RentVreme[playerid] = 0;
	RentVeh[playerid] = 0;
	SendInfoMessage(playerid, "Isteklo Vam je vreme rentanog vozila te je ono vraceno.");}
return 1;}
public OnPlayerExitVehicle(playerid, vehicleid) {

if(Pojas[playerid] == true) {
	new varstring[62];
	format(varstring, sizeof(varstring), "* %s se hvata za pojas, te ga skida.", ImeIgraca(playerid));
	PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
	Pojas[playerid] = false;}
if(Tempomat[playerid] == true)
{
	new varstring[62];
	format(varstring, sizeof(varstring), "* %s gasi tempomat i izlazi iz vozila.", ImeIgraca(playerid));
	PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
	Tempomat[playerid] = false;   
	g_fSpeedCap[ playerid ] = 0.0;}
if(IsValidDynamicObject(PlayerGpsRadar[playerid][_pgrObject])) {
	DestroyDynamicObject(PlayerGpsRadar[playerid][_pgrObject]);
	PlayerGpsRadar[playerid][_pgrObject] = -1;}
return true;}

public OnPlayerStateChange(playerid, newstate, oldstate) {
if(antiCheatSS[antiVehRepair] == true) {
	new vehicleid = GetPlayerVehicleID(playerid);
	GetVehicleHealth(vehicleid, antiCheatVS[vehicleid][VehTrueHealth]);
	antiCheatVS[vehicleid][VehCheck] = 1;}

if(antiCheatCS[playerid][TakeVehicle] != INVALID_VEHICLE_ID) {
	BusyVehicle[antiCheatCS[playerid][TakeVehicle]] = -1;
	antiCheatCS[playerid][TakeVehicle] = INVALID_VEHICLE_ID;}

if(newstate == PLAYER_STATE_DRIVER) {

	new engine, lights, alarm, doors, bonnet, boot, objective;
	gLastDriver[GetPlayerVehicleID(playerid)] = playerid;
	LastCar[playerid] = GetPlayerVehicleID(playerid);
	antiCheatCS[playerid][EnterVehTime] = GetTickCount();
	new vehicle = GetPlayerVehicleID(playerid);
	new boja_1,boja_2;

	GetVehicleColor(GetPlayerVehicleID(playerid), boja_1, boja_2);
	
	new string[30];
	format(string, sizeof(string), "%s", GetVehicleNameEx(GetVehicleModel(GetPlayerVehicleID(playerid))));
	PlayerTextDrawSetString(playerid, Brzinomer[playerid][8], string);

	new stringic1[30];
	format(stringic1, sizeof(stringic1), "%s", GetVehicleFuelType(vehicle));
	PlayerTextDrawSetString(playerid, Brzinomer[playerid][10], stringic1);

	PlayerTextDrawSetPreviewModel(playerid, Brzinomer[playerid][2], GetVehicleModel(GetPlayerVehicleID(playerid)));
	PlayerTextDrawSetPreviewVehCol(playerid, Brzinomer[playerid][2], boja_1, boja_2);
	PlayerTextDrawShow(playerid, Brzinomer[playerid][2]);

	if(TipVozila[GetPlayerVehicleID(playerid)] == RENTANO_VOZILO && RentVeh[playerid] != GetPlayerVehicleID(playerid)) {
		ac_RemovePlayerFromVehicle(playerid);
		SendErrorMessage(playerid, "Ovo vozilo je rentao drugi igrac.");
	}

	if(PlayerInfo[playerid][xPosao] == POSAO_PEPSI && CarriesBox[playerid] != 0)
	{
		SendErrorMessage(playerid, "Ne mozete sa kutijom u vozilo!");
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		ac_SetPlayerPos(playerid, x, y, z+5);
		if(antiCheatCS[playerid][TakeVehicle] != INVALID_VEHICLE_ID) {
			BusyVehicle[antiCheatCS[playerid][TakeVehicle]] = -1;
		}
	}
	if(ServerInfo[RRVehicle] == true) {
		if(!occupied[GetPlayerVehicleID(playerid)])
			occupied[GetPlayerVehicleID(playerid)] = true;
	}

	if(HavePlayerWeapon(playerid)) {
		SetPlayerArmedWeapon(playerid, 0);
	}

	if(GetPlayerVehicleID(playerid) != antiCheatCS[playerid][CWVehID]) {
		if(antiCheatCS[playerid][CWTime] > gettime()) {
			new varstring[166];
			format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s je kickovan sa servera. Razlog: "col_white"Car Warp", ImeIgraca(playerid));
			AdminPoruka(SVETLOCRVENA, varstring);
			Kickovanje(playerid, "{af001d][ FG:RPG ] : {FFFFFF]Kikovani ste sa servera zbog koriscenja cheata. (Car Warp Hack)");
			return 1;
		}
		antiCheatCS[playerid][CWTime] = gettime() + 1;
		antiCheatCS[playerid][CWVehID] = GetPlayerVehicleID(playerid);
	}

	if(BusyVehicle[GetPlayerVehicleID(playerid)] > -1) {
		if(BusyVehicle[GetPlayerVehicleID(playerid)] == playerid) {}
		else {
			new Float:Pos[3];
			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			ac_SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			SendClientMessage(playerid, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Zbog moguce kradje vozila izbacen si iz njega!");
			}
	}
	else {
		BusyVehicle[GetPlayerVehicleID(playerid)] = playerid;
		antiCheatCS[playerid][TakeVehicle] = GetPlayerVehicleID(playerid);
	}

	//if(Parked[GetPlayerVehicleID(playerid)] != -1) {

	//    SPD(playerid, dialog_PARKING_3, DSMSG, D_NASLOV, ""col_white"Za ovo vozilo je placeno parkiranje.\nZelis da prekines parking i uzmes svoje vozilo.", "Da", "Ne");

	//]

	if(farmerVehicles[GetPlayerVehicleID(playerid)][fvMilk] == true) {
		if(farmerVehicles[GetPlayerVehicleID(playerid)][fvMilkpID] == playerid) {}
		else {
			new Float:Pos[3];
			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			ac_SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			SendClientMessage(playerid, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Ovo vozilo vec neko koristi za posao ne mozete uci!");
			}
	}

	if(PlayerInfo[playerid][xPosao] == POSAO_PEPSI && TipVozila[GetPlayerVehicleID(playerid)] == POSLOVNO_VOZILO && VehicleInfo[ScriptIDVozila[GetPlayerVehicleID(playerid)]][vJob] == PlayerInfo[playerid][xPosao]) {

		if(UzeoOpremu[playerid] == true) {

			if(KamionUsed[GetPlayerVehicleID(playerid)] != -1) {

				if(KamionUsed[GetPlayerVehicleID(playerid)] != playerid) {
					GameTextForPlayer(playerid, "~r~Taj kamion je zauzet", 5000, 6);
					ac_RemovePlayerFromVehicle(playerid);
					return true;
				}
			}
			if(DeliverCar[playerid] != -1) {

				if(DeliverCar[playerid] != GetPlayerVehicleID(playerid)) {

					SendJobMessage(playerid, "To nije Vas kamion sa kojim ste zapoceli razvoz pepsija!");
					GameTextForPlayer(playerid, "~r~To nije vas kamion", 5000, 6);
					ac_RemovePlayerFromVehicle(playerid);
					return 1;
				}
			}

			if(DeliverLevel[playerid] == 0) SPD(playerid, dialog_DELIVERPEPSI, DSMSG, ""col_white"Dostava pepsija",""col_white"Da li ste sigurni da zelite da\npokrenete dostavu pepsija u trafike?","Da","Ne");

		}
		else return ac_RemovePlayerFromVehicle(playerid), SendErrorMessage(playerid, "Morate imati opremu da bi mogli voziti.");
	}
	if(vCanDrive[GetPlayerVehicleID(playerid)] == 0) {
		SetCameraBehindPlayer(playerid);
		SCM(playerid, CRVENA, "Ovo vozilo je unisteno. Koristite /exit za napustanje vozila.");
		GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine, lights, alarm, doors, bonnet, boot, objective);
		ac_SetVehicleParamsEx(GetPlayerVehicleID(playerid),0,lights,alarm,doors,bonnet,boot,objective);
	}

	if(!IsVehicleBajs(GetPlayerVehicleID(playerid))) {
		for(new i = 0; i < 11; i++) {
			PlayerTextDrawShow(playerid, Brzinomer[playerid][i]);
		}
	}

	if(Fuel[GetPlayerVehicleID(playerid)] < 1) {
		if(!IsVehicleBajs(GetPlayerVehicleID(playerid)) && !IsVehicleLetelica(GetPlayerVehicleID(playerid)) && !IsVehicleBrod(GetPlayerVehicleID(playerid)) && !IsVehicleTrain(GetPlayerVehicleID(playerid)))
		{
			SetCameraBehindPlayer(playerid);
			SetPVarInt(playerid, "NoFuel", 1);
			SCM(playerid, CRVENA, "Ovo vozilo nema goriva. Koristite /exit da biste izasli.");
			GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
			ac_SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0,lights,alarm,doors,bonnet,boot,objective);
		}
	}
	GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
	if(engine == 0) {
		SCM(playerid, FUSIONGAMING, "Da upalite vozilo koristite "col_white"/upali "col_server"ili tipku "col_white"2.");
	}

	antiCheatCS[playerid][EnteredVehicle] = GetPlayerVehicleID(playerid);

	if(oldstate == PLAYER_STATE_ONFOOT)
	{
		if(GetFactionType(playerid) == ORG_TIP_TAXI) {
			if(taxiDuty[playerid] == true && VoziIgracaID[playerid] == INVALID_PLAYER_ID && OrgaVozila[GetPlayerVehicleID(playerid)] == PlayerInfo[playerid][xClan]) {
				TaximetarUkljucen[playerid] = false;

				PlayerTextDrawShow(playerid, TaxistaTD[playerid][0]);
				PlayerTextDrawShow(playerid, TaxistaTD[playerid][1]);
				PlayerTextDrawShow(playerid, TaxistaTD[playerid][2]);
				PlayerTextDrawShow(playerid, TaxistaTD[playerid][3]);
				PlayerTextDrawShow(playerid, TaxistaTD[playerid][4]);
				PlayerTextDrawShow(playerid, TaxistaTD[playerid][5]);
				PlayerTextDrawShow(playerid, TaxistaTD[playerid][6]);
				PlayerTextDrawShow(playerid, TaxistaTD[playerid][7]);
				PlayerTextDrawShow(playerid, TaxistaTD[playerid][8]);
				PlayerTextDrawShow(playerid, TaxistaTD[playerid][9]);
				PlayerTextDrawShow(playerid, TaxistaTD[playerid][10]);
				PlayerTextDrawShow(playerid, TaxistaTD[playerid][11]);

				PlayerTextDrawSetString(playerid, TaxistaTD[playerid][6], "N/A");
				PlayerTextDrawShow(playerid, TaxistaTD[playerid][6]);
				PlayerTextDrawSetString(playerid, TaxistaTD[playerid][9], "N/A");
				PlayerTextDrawShow(playerid, TaxistaTD[playerid][9]);

				CenaVoznje[playerid] = 0;
				VoziIgracaID[playerid] = INVALID_PLAYER_ID;
				offeredByCabbie[playerid] = INVALID_PLAYER_ID;
			}
		}
	}

	if(PlayerInfo[playerid][xAdmin] >= 6) {
		SendClientMessageEx(playerid, -1, "Ulazite u vozilo ciji je ID kljuca - %d", ScriptIDVozila[GetPlayerVehicleID(playerid)]);
	}

	if(TipVozila[GetPlayerVehicleID(playerid)] == PRIVATNO_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 1) {
			SendClientMessageEx(playerid, -1, "Ulazite u privatno vozilo ciji je vlasnik - %s", VehicleInfo[ScriptIDVozila[GetPlayerVehicleID(playerid)]][vOwner]);
		}
	}
	else if(TipVozila[GetPlayerVehicleID(playerid)] == ORGANIZACIJSKO_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 4 && AdminDuty[playerid]) {}
		else {
			if(OrgaVozila[GetPlayerVehicleID(playerid)] != PlayerInfo[playerid][xClan]) {
				new Float:Poz[3];
				GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
				ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
				ac_RemovePlayerFromVehicle(playerid);
				SendErrorMessage(playerid, "Nemas kljuc ovog vozila.");
			}
		}
	}
	else if(TipVozila[GetPlayerVehicleID(playerid)] == POSLOVNO_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 4 && AdminDuty[playerid]) {}
		else {
			if(PosaoVozila[GetPlayerVehicleID(playerid)] != PlayerInfo[playerid][xPosao]) {
				new Float:Poz[3];
				GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
				ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
				ac_RemovePlayerFromVehicle(playerid);
				SendErrorMessage(playerid, "Niste %s.", getJobName(PosaoVozila[GetPlayerVehicleID(playerid)]));
			}
		}
	}
	else if(TipVozila[GetPlayerVehicleID(playerid)] == GRADONACELNIKOVO_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 4 && AdminDuty[playerid]) {}
		else {
			if(PlayerInfo[playerid][xGradRank] != GRAD_DRIVER || PlayerInfo[playerid][xGradRank] != GRAD_LDRIVER) {
				if(!VozacUniforma[playerid]) {
					new Float:Poz[3];
					GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
					ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
					ac_RemovePlayerFromVehicle(playerid);
					SendErrorMessage(playerid, "Nemate kljuceve od ovog vozila ili uniformu vozaca gradonacelnika!");
					return 1;
				}
			}
		}
	}
	else if(TipVozila[GetPlayerVehicleID(playerid)] == IZLOZBENO_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] != 7) {
			new Float:Poz[3];
			GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
			ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
			ac_RemovePlayerFromVehicle(playerid);
			SendErrorMessage(playerid, "Nemate kljuceve od ovog vozila!");
		}
	}
	else if(TipVozila[GetPlayerVehicleID(playerid)] == ADMIN_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 1) {}
		else {
			new Float:Poz[3];
			GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
			ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
			ac_RemovePlayerFromVehicle(playerid);
			SendErrorMessage(playerid, "Nemate kljuceve od ovog vozila!");
		}
	}
	else if(TipVozila[GetPlayerVehicleID(playerid)] == HELPER_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 1) {}
		else {
			new Float:Poz[3];
			GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
			ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
			ac_RemovePlayerFromVehicle(playerid);
			SendErrorMessage(playerid, "Nemate kljuceve od ovog vozila!");
		}
	}
	else if(TipVozila[GetPlayerVehicleID(playerid)] == PROMOTER_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 4 || PlayerInfo[playerid][xPromoter] >= 1) {}
		else {
			new Float:Poz[3];
			GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
			ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
			ac_RemovePlayerFromVehicle(playerid);
			SendErrorMessage(playerid, "Nemate kljuceve od ovog vozila!");
		}
	}
	else if(TipVozila[GetPlayerVehicleID(playerid)] == VIP_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 4 || PlayerInfo[playerid][xVIPLevel] >= 1 || PlayerInfo[playerid][xYouTuber] == 1) {}
		else {
			new Float:Poz[3];
			GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
			ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
			ac_RemovePlayerFromVehicle(playerid);
			SendErrorMessage(playerid, "Nemate kljuceve od ovog vozila!");
		}
	}
	else if(TipVozila[GetPlayerVehicleID(playerid)] == POLAGANJE_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 4 || Polaganje[playerid] >= 1) {}
		else {
			new Float:Poz[3];
			GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
			ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
			ac_RemovePlayerFromVehicle(playerid);
			SendErrorMessage(playerid, "Nemate kljuceve od ovog vozila!");
		}
	}
	else if(TipVozila[GetPlayerVehicleID(playerid)] == PUMPA_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 4) {}
		else {
			if(PumpaVozilo[GetPlayerVehicleID(playerid)] != PlayerInfo[playerid][xFirmaID]) {
				new Float:Poz[3];
				GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
				ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
				ac_RemovePlayerFromVehicle(playerid);
				SendErrorMessage(playerid, "Nemate kljuceve ovog vozila.");
			}
		}
	}
	//
	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsVehicleMotor(vehicleid)) {
		if(PlayerInfo[playerid][xMotorska] == 0) {
			SCM(playerid, FUSIONGAMING, "Nemate dozvolu za voznju motora pazi se policije!");
		}
	}

	if(IsVehicleAuto(vehicleid)) {
		if(PlayerInfo[playerid][xVozacka] == 0) {
			SCM(playerid, FUSIONGAMING, "Nemate dozvolu za voznju auta pazi se policije!");
		}
	}


	if(IsVehicleC1(vehicleid)) {
		if(PlayerInfo[playerid][xKamionskaC1] == 0) {
			SCM(playerid, FUSIONGAMING, "Nemate dozvolu za voznju kombija pazi se policije!");
		}
	}

	if(IsVehicleC2(vehicleid)) {
		if(PlayerInfo[playerid][xKamionskaC2] == 0) {
			SCM(playerid, FUSIONGAMING, "Nemate dozvolu za voznju kamiona pazi se policije!");
		}
	}

	if(IsVehicleC3(vehicleid)) {
		if(PlayerInfo[playerid][xKamionskaC3] == 0) {
			SCM(playerid, FUSIONGAMING, "Nemate dozvolu za voznju kamiona sa prikolicom pazi se policije!");
		}
	}

	if(IsVehicleBrod(vehicleid)) {
		if(PlayerInfo[playerid][xBrodska] == 0) {
			SCM(playerid, FUSIONGAMING, "Nemate dozvolu za voznju broda pazi se policije!");
		}
	}

	if(IsVehicleLetelica(vehicleid)) {
		if(PlayerInfo[playerid][xLetelica] == 0) {
			SCM(playerid, FUSIONGAMING, "Nemate dozvolu za voznju aviona pazi se policije!");
		}
	}

	if(PlayerInfo[playerid][xPosao] == POSAO_FARMER) {
		if(isATractor(vehicleid)) {

			SendJobMessage(playerid, "U ovom traktoru je trenutno {36AB00]%d "col_white"semenki za sejanje.", farmerVehicles[vehicleid][fvSeeds]);
			SendJobMessage(playerid, "Ako zelis posejati semenku, pritisni tipku {36AB00]~k~~CONVERSATION_YES~"col_white".");
		}
		else if(isAHarvester(vehicleid)) {

			if(farmerInfo[playerid][fifarmerPlantsPlanted] == MAX_FARMERS_PLANTS_PLANTED) SendJobMessage(playerid, "Prodi kroz useve da ih pozanjes.");
			else return SendJobMessage(playerid, "Ovo vozilo sluzi za zetvu useva, prvo moras posijati sve useve da bih ih mogao pozeti.");
		}
	}

	if(farmerInfo[playerid][fiHaveBucket] == true) {
		new Float:Poz[3];
		GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
		ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
		SendErrorMessage(playerid, "Ne mozes uci sa kantom u vozilo!");
	}

	if(farmerInfo[playerid][fifarmerPickupedBale] == true) {
		new Float:Poz[3];
		GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
		ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
		SendErrorMessage(playerid, "Ne mozes uci sa usevom u vozilo!");
	}

	if(NosiPaketOruzja[playerid] == true) {
		new Float:Poz[3];
		GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
		ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
		SendErrorMessage(playerid, "Ne mozes uci sa paketom u vozilo!");
	}

	if(UzeoPicu[playerid] == true) {
		new Float:Poz[3];
		GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
		ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
		SendErrorMessage(playerid, "Ne mozes uci sa picom u vozilo!");
	}

}
else if(newstate == PLAYER_STATE_ONFOOT) {
	for(new i = 0; i < 11; i++) {
		PlayerTextDrawHide(playerid, Brzinomer[playerid][i]);
	}
	if(oldstate == PLAYER_STATE_PASSENGER) {
		if(offeredByCabbie[playerid] != INVALID_PLAYER_ID) {
			TaximetarUkljucen[offeredByCabbie[playerid]] = false;

			PlayerTextDrawHide(playerid, TaxistaTD[playerid][0]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][1]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][2]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][3]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][4]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][5]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][6]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][7]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][8]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][9]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][10]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][11]);

			DajIgracuNovac(playerid, -CenaVoznje[offeredByCabbie[playerid]]);
			DajIgracuNovac(offeredByCabbie[playerid], CenaVoznje[offeredByCabbie[playerid]]);

			SendClientMessageEx(playerid, ZUTA, "Stigli ste do lokacije i platili %d$ za voznju", CenaVoznje[offeredByCabbie[playerid]]);
			SendClientMessageEx(offeredByCabbie[playerid], ZUTA, "Stigli ste do lokacije na koju je igrac htio i naplatili %d$ za voznju", CenaVoznje[offeredByCabbie[playerid]]);

			PlayerTextDrawSetString(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][6], "N/A");
			PlayerTextDrawShow(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][6]);
			PlayerTextDrawSetString(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][9], "N/A");
			PlayerTextDrawShow(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][9]);

			CenaVoznje[offeredByCabbie[playerid]] = 0;
			Fusion_KillTimer(TaxiTimer[offeredByCabbie[playerid]]);
			VoziIgracaID[offeredByCabbie[playerid]] = INVALID_PLAYER_ID;
			offeredByCabbie[playerid] = INVALID_PLAYER_ID;
		}
	}

	antiCheatCS[playerid][EnteredVehicle] = INVALID_VEHICLE_ID;

	if(oldstate == PLAYER_STATE_DRIVER) {

		antiCheatCS[playerid][EnteredVehicle] = INVALID_VEHICLE_ID;

		if(taxiDuty[playerid] == true && VoziIgracaID[playerid] == INVALID_PLAYER_ID)
		{
			TaximetarUkljucen[playerid] = false;

			PlayerTextDrawHide(playerid, TaxistaTD[playerid][0]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][1]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][2]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][3]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][4]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][5]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][6]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][7]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][8]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][9]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][10]);
			PlayerTextDrawHide(playerid, TaxistaTD[playerid][11]);

			CenaVoznje[playerid] = 0;
			VoziIgracaID[playerid] = INVALID_PLAYER_ID;
			offeredByCabbie[playerid] = INVALID_PLAYER_ID;
		}
	}

	if(GetPVarInt(playerid, "gGas") == 1) {
		for(new i = 0; i < 11; i++) {
			PlayerTextDrawHide(playerid, Brzinomer[playerid][i]);
		}
	}
}
else if(newstate == PLAYER_STATE_SPAWNED) {
	Fusion_SetPlayerHealth(playerid, 50.0+PlayerInfo[playerid][xSHealth]);
	if(PlayerInfo[playerid][xVIPLevel] >= 5) {
		Fusion_SetPlayerHealth(playerid, 100.00);
		Fusion_SetPlayerArmour(playerid, 100);
	}
}
//else if(newstate == PLAYER_STATE_WASTED) {
//
else if(newstate == PLAYER_STATE_PASSENGER) {
	if(HavePlayerWeapon(playerid)) {
		SetPlayerArmedWeapon(playerid, 0);
	}

	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 416 && GetPlayerVehicleSeat(playerid) != 1) {
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
		ac_SetPlayerPos(playerid, 2003.3, 2284.2, 1011.1);
		SetPlayerFacingAngle(playerid, 0);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, false);
		ac_SetPlayerInterior(playerid, 1);
		InAmbu[playerid] = GetPlayerVehicleID(playerid);
	}

	if(farmerInfo[playerid][fiHaveBucket] == true) {
		new Float:Poz[3];
		GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
		ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
		SendErrorMessage(playerid, "Ne mozes uci sa kantom u vozilo!");
	}

	if(farmerInfo[playerid][fifarmerPickupedBale] == true) {
		new Float:Poz[3];
		GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
		ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
		SendErrorMessage(playerid, "Ne mozes uci sa usevom u vozilo!");
	}

	if(UzeoPicu[playerid] == true) {
		new Float:Poz[3];
		GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
		ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
		SendErrorMessage(playerid, "Ne mozes uci sa picom u vozilo!");
	}

	if(TipVozila[GetPlayerVehicleID(playerid)] == ORGANIZACIJSKO_VOZILO) { //za taxi ako igraci nisu lvl 2+ da ne mogu uci u vozilo
		if(OrgaVozila[GetPlayerVehicleID(playerid)] == 4) {
			if(PlayerInfo[playerid][xLevel] >= 2) {}
			else {
				new Float:Poz[3];
				GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
				ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
				SendErrorMessage(playerid, "Vi jos uvek niste level 2+ i zato ne mozete uci u taxi!");
			}
		}
	}
}
return true;}

forward sekundiRudar(playerid);
public sekundiRudar(playerid) {

Fusion_KillTimer(rudarPosao[playerid][rudarTimer]);
Fusion_SetPlayerCheckpoint(playerid, 608.0497,862.8018,801.7401-900, 2.0);
CheckpointStatus[playerid] = 34;
SendJobMessage(playerid, "Vase iskopine su preradjenje, idite da ih pokupite.");
return true;}
FUNCTION: Firework(i)
{
new Float:x, Float:y, Float:z;
	x = rx6[i];
y = ry6[i];
	z = rz6[i];
	z += RocketHeight;
	if(RocketExplosions[i] == 0)
{
	DestroyDynamicObject(Rocket[i]);
	DestroyDynamicObject(RocketLight[i]);
	DestroyDynamicObject(RocketSmoke[i]);
	CreateExplosion(x ,y, z, 4, 10);
	CreateExplosion(x ,y, z, 5, 10);
	CreateExplosion(x ,y, z, 6, 10);}
	else if(RocketExplosions[i] >= MAX_FIREWORKS)
	{
		for(new j = 0; j <= RocketSpread; j++)
	{
		CreateExplosion(x + float(j - (RocketSpread / 2)), y, z, 7, 10);
		CreateExplosion(x, y + float(j - (RocketSpread / 2)), z, 7, 10);
		CreateExplosion(x, y, z + float(j - (RocketSpread / 2)), 7, 10);
	}
	RocketExplosions[i] = -1;
	FireworkTotal = 0;
	Fired = 0;
	return true;}
	else
	{
		x += float(random(RocketSpread) - (RocketSpread / 2));
	y += float(random(RocketSpread) - (RocketSpread / 2));
	z += float(random(RocketSpread) - (RocketSpread / 2));
	CreateExplosion(x, y, z, 7, 10);
	}
RocketExplosions[i]++;
SetTimerEx("Firework", 250, 0, "i", i);
return true;}

FUNCTION: Iskopavanje(playerid) {

if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][xPosao] == POSAO_RUDAR && PosaoRudar[playerid] != 0 && UzeoOpremu[playerid] == true) {

	Fusion_KillTimer(rudarPosao[playerid][rudarTimer]);
	ClearAnimations(playerid);
	rudarPosao[playerid][rudarIskopano]++;
	TogglePlayerControllable(playerid, true);
	if(rudarPosao[playerid][rudarIskopano] < 6) {
		new broj = rudarPosao[playerid][rudarIskopano];
		Fusion_SetPlayerCheckpoint(playerid, RandomRudnik[broj][0], RandomRudnik[broj][1], RandomRudnik[broj][2]-900, 2.5);
		CheckpointStatus[playerid] = 32;
		ClearAnimations(playerid);

		SendJobMessage(playerid, "Oznaceno vam je novo mesto, pratite marker!");
	}
	else if(rudarPosao[playerid][rudarIskopano] >= 6) {

		TogglePlayerControllable(playerid, true);

		RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
		SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 2060, 1, 0.15, 0.4, 0.0, 0.0, 90.0, 0.0, 1.0, 1.0, 1.0);

		RemovePlayerAttachedObject(playerid, OBJECT_SLOT_LHAND);
		SetPlayerAttachedObject(playerid, OBJECT_SLOT_LHAND, 18634, 1, -0.600000, 0.100000, 0.189999, 270.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.000000);

		ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1);

		Fusion_SetPlayerCheckpoint(playerid, 598.4931, 863.9066, 801.7401-900, 2.0);
		CheckpointStatus[playerid] = 33;
		SendJobMessage(playerid, "Zavrsili ste sa kopanjem, sada odnesite da preradite iskopine!");
	}
}
return true;}

FUNCTION: BranjeVoca(playerid) {

if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][xPosao] == POSAO_VOCAR && PosaoVocar[playerid] != 0 && UzeoOpremu[playerid] == true) {

	Fusion_KillTimer(vocarPosao[playerid][vocarTimer]);
	ClearAnimations(playerid);
	vocarPosao[playerid][vocarObrao]++;
	TogglePlayerControllable(playerid, true);
	if(vocarPosao[playerid][vocarObrao] < 9) {
		new broj = vocarPosao[playerid][vocarObrao];
		Fusion_SetPlayerCheckpoint(playerid, RandomVocar[broj][0], RandomVocar[broj][1], RandomVocar[broj][2], 2.5);
		CheckpointStatus[playerid] = 41;
		ClearAnimations(playerid);

		SendJobMessage(playerid, "Oznaceno vam je novo mesto, pratite marker!");
	}
	else if(vocarPosao[playerid][vocarObrao] >= 9) {

		TogglePlayerControllable(playerid, true);

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		SetPlayerAttachedObject(playerid,9,19637,6,0.000000,-0.017999,-0.162999,-111.799987,-7.699999,-10.399997,0.549999,0.593999,0.618000);

		Fusion_SetPlayerCheckpoint(playerid, 1797.4470, 126.0536, 33.5835, 2.0);
		CheckpointStatus[playerid] = 42;
		SendJobMessage(playerid, "Napunili ste gajbicu vocem, odnesite je u skladiste!");
	}
}
return true;}

FUNCTION: SecaDrva(playerid) {

if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][xPosao] == POSAO_DRVOSECA && PosaoDrvoseca[playerid] != 0 && UzeoOpremu[playerid] == true) {

	Fusion_KillTimer(drvosecaPosao[playerid][drvoTimer]);
	ClearAnimations(playerid);
	drvosecaPosao[playerid][drvoIseko]++;
	TogglePlayerControllable(playerid, true);
		RemovePlayerWeapon(playerid, 9);
	if(drvosecaPosao[playerid][drvoIseko] < 8) {
		new broj = drvosecaPosao[playerid][drvoIseko];
		Fusion_SetPlayerCheckpoint(playerid, RandomDrvo[broj][0], RandomDrvo[broj][1], RandomDrvo[broj][2], 2.5);
		CheckpointStatus[playerid] = 43;
		ClearAnimations(playerid);

		SendJobMessage(playerid, "Oznaceno vam je novo mesto, pratite marker!");
	}
	else if(drvosecaPosao[playerid][drvoIseko] >= 8) {

		TogglePlayerControllable(playerid, true);

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		SetPlayerAttachedObject(playerid, 9 , 1463, 1,0.20,0.36,0.0,0.0,90.0, 0.0, 0.4, 0.3, 0.6);

		Fusion_SetPlayerCheckpoint(playerid, 2347.6448,-653.5598,128.5005, 2.0);
		CheckpointStatus[playerid] = 44;
		SendJobMessage(playerid, "Sada odnesite drva u skladiste!");
	}
}
return true;}

FUNCTION: OproProzore(playerid) {

if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][xPosao] == POSAO_PPROZORA && UzeoOpremu[playerid] == true) {

	Fusion_KillTimer(PProzoraTimer[playerid]);
	TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid);
	PereProzorcinu[playerid] = false;
	DajIgracuPlatu(playerid);
	if(ServerInfo[HappyJob] == 11)
	{
		SendJobMessage(playerid, "Dobili ste dodatnih 2000$ jer je ukljucena dupla plata na ovom poslu.");
		DajIgracuNovac(playerid, 2000);
		BusinessJobMoney(POSAO_PPROZORA, 1200);
	}
	BusinessJobMoney(POSAO_PPROZORA, 918);
	}
return true;}

public OnPlayerLeaveCheckpoint(playerid) {
return true;}

public OnPlayerEnterRaceCheckpoint(playerid) {
new cpid = PlayerCP[playerid];
new nextcpid = PlayerCP[playerid]+1;
new eventid = EventInfo[eID];
if(cpid >= 2) {
	if(GetPlayerVehicleID(playerid) == EventInfo[Vehicle][PlayerEventVehID[playerid]]) {
		SendClientMessageEx(playerid, 0x83BFBFAA, "-> || %s || Checkpoint %d/%d || %s || < -", Event[eventid][Name], (cpid-1), (Event[eventid][MaxCP]-1), ImeIgraca(playerid));
		PlayerCP[playerid]++;
		if(CheckPoint[eventid][nextcpid][CPX] == 0.0 && CheckPoint[eventid][nextcpid][CPY] == 0) {
			if(EventInfo[Position] <= 3) {
				new Price = 0;
				EventInfo[Position]++;

				if(EventInfo[Position] == 1) {
					PlayerInfo[playerid][xEvent1Mesto]++;
					Price = 30000;
				}
				if(EventInfo[Position] == 2) {
					PlayerInfo[playerid][xEvent2Mesto]++;
					Price = 15000;
				}
				if(EventInfo[Position] == 3) {
					PlayerInfo[playerid][xEvent3Mesto]++;
					Price = 10000;
				}

				DajIgracuNovac(playerid, Price);
				new varstring[128];
				format(varstring, 128, ""col_orange"%s Event | "col_white"Pozicija %d {A6A6A6]%s | "col_white"Nagrada {A6A6A6]%d$.", Event[eventid][Name], EventInfo[Position], ImeIgraca(playerid), Price);
				SCMA(-1, varstring);
				PlayerCP[playerid] = 0;
				ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				SetPlayerVirtualWorld(playerid, 0);
				TogglePlayerControllable(playerid, true);
				DisablePlayerRaceCheckpoint(playerid);

				ac_SetPlayerPos(playerid, PlayerPos[playerid][0], PlayerPos[playerid][1],  PlayerPos[playerid][2]);
				SetPlayerVirtualWorld(playerid, PlayerPosVW[playerid]);
				ac_SetPlayerInterior(playerid, PlayerPosInt[playerid]);

				SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
				GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
				TogglePlayerControllable(playerid, false);

				if(EventInfo[Position] == 3) {

					format(varstring, 128, ""col_orange"%s Event | "col_white"Event je zavrsen, cestitamo pobednicima.", Event[eventid][Name]);
					SCMA(-1, varstring);

					EventInfo[Position] = 0;
					EventInfo[Drivers] = 0;

					Event[EventInfo[eID]][PrivremeniX1] = Event[EventInfo[eID]][TCPX];
					Event[EventInfo[eID]][PrivremeniY1] = Event[EventInfo[eID]][TCPY];
					Event[EventInfo[eID]][PrivremeniX2] = Event[EventInfo[eID]][TCPX2];
					Event[EventInfo[eID]][PrivremeniY2] = Event[EventInfo[eID]][TCPY2];

					EventInfo[eID] = 0;

					for(new i = 0; i < 30; i++) {
						if(EventInfo[Vehicle][i] != INVALID_VEHICLE_ID) ac_SetVehicleToRespawn(EventInfo[Vehicle][i]);
					}

					foreach(new i : Player){
						if(PlayerCP[i] > 0) {

							PlayerCP[i] = 0;
							SetPlayerVirtualWorld(i, 0);
							TogglePlayerControllable(i, true);
							DisablePlayerRaceCheckpoint(i);
							PlayerEventVehID[i] = -1;

							ac_SetPlayerPos(i, PlayerPos[i][0], PlayerPos[i][1],  PlayerPos[i][2]);
							SetPlayerVirtualWorld(i, PlayerPosVW[i]);
							ac_SetPlayerInterior(i, PlayerPosInt[i]);

							SetTimerEx("SlobodnoSada", 4000, false, "i", i);
							GameTextForPlayer(i, "Ucitavanje ...", 1000, 4);
							TogglePlayerControllable(i, false);
						}
					}
				}
			}
			return 1;
		}
		if(nextcpid != Event[eventid][MaxCP]) SetPlayerRaceCheckpoint(playerid, 0, CheckPoint[eventid][nextcpid][CPX], CheckPoint[eventid][nextcpid][CPY], CheckPoint[eventid][nextcpid][CPZ], CheckPoint[eventid][nextcpid+1][CPX], CheckPoint[eventid][nextcpid+1][CPY], CheckPoint[eventid][nextcpid+1][CPZ], 7.0);
		else SetPlayerRaceCheckpoint(playerid, 1, CheckPoint[eventid][nextcpid][CPX], CheckPoint[eventid][nextcpid][CPY], CheckPoint[eventid][nextcpid][CPZ], CheckPoint[eventid][nextcpid][CPX], CheckPoint[eventid][nextcpid][CPY], CheckPoint[eventid][nextcpid][CPZ], 7.0);
	}
}

if(TrkaCheckpoint[playerid] != 0) {
	switch(TrkaCheckpoint[playerid]) {
		case 1: {
			if(IsPlayerInVehicle(playerid, TrkaVozilo[playerid]) && NaUtrci[playerid] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
				TrkaCheckpoint[playerid] = 2;
				SetPlayerRaceCheckpoint(playerid, 0, -1456.4524, -282.5754, 1050.6942, -1396.2809, -190.8598, 1051.4340, 7.0);
			}
		}
		case 2: {
			if(IsPlayerInVehicle(playerid, TrkaVozilo[playerid]) && NaUtrci[playerid] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
				TrkaCheckpoint[playerid] = 3;
				SetPlayerRaceCheckpoint(playerid, 0, -1396.2809, -190.8598, 1051.4340, -1302.6482, -147.4566, 1050.1260, 7.0);
			}
		}
		case 3: {
			if(IsPlayerInVehicle(playerid, TrkaVozilo[playerid]) && NaUtrci[playerid] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
				TrkaCheckpoint[playerid] = 4;
				SetPlayerRaceCheckpoint(playerid, 0, -1302.6482, -147.4566, 1050.1260, -1297.8522, -263.9526, 1048.8831, 7.0);
			}
		}
		case 4: {
			if(IsPlayerInVehicle(playerid, TrkaVozilo[playerid]) && NaUtrci[playerid] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
				TrkaCheckpoint[playerid] = 5;
				SetPlayerRaceCheckpoint(playerid, 0, -1297.8522, -263.9526, 1048.8831, -1389.8533, -254.1669, 1043.3276, 7.0);
			}
		}
		case 5: {
			if(IsPlayerInVehicle(playerid, TrkaVozilo[playerid]) && NaUtrci[playerid] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
				TrkaCheckpoint[playerid] = 6;
				SetPlayerRaceCheckpoint(playerid, 1, -1389.8533, -254.1669, 1043.3276, -1431.3984, -129.8569, 1045.4110, 7.0);
			}
		}
		case 6: {
			if(IsPlayerInVehicle(playerid, TrkaVozilo[playerid]) && NaUtrci[playerid] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {

				SetPlayerRaceCheckpoint(playerid, 0, -1431.3984, -129.8569, 1045.4110, -1456.4524, -282.5754, 1050.6942, 7.0);
				TrkaCheckpoint[playerid] = 1;

				Krugovi[playerid]++;
				SendClientMessageEx(playerid, 0x83BFBFAA, "-> || Trka || Krug %d/5 || %s || < -", Krugovi[playerid], ImeIgraca(playerid));
				if(Krugovi[playerid] == 5) {
					new izazivac = PonudioIgrac[playerid];

					DisablePlayerRaceCheckpoint(playerid);
					NaUtrci[playerid] = false; Krugovi[playerid] = 0; TrkaIzazov[playerid] = 0; StaroVreme[playerid] = 0;
					Fusion_DestroyVehicle(TrkaVozilo[playerid]); TrkaVozilo[playerid] = -1;
					ac_SetPlayerPos(playerid, PlayerPos[playerid][0], PlayerPos[playerid][1],  PlayerPos[playerid][2]);
					SetPlayerVirtualWorld(playerid, PlayerPosVW[playerid]);
					ac_SetPlayerInterior(playerid, PlayerPosInt[playerid]); TrkaCheckpoint[playerid] = 0;
					DajIgracuNovac(playerid, (UlogTrke[playerid]*2));
					SendInfoMessage(playerid, "Pobedili ste na trci i osvojili %d$.", (UlogTrke[playerid]*2));

					if(izazivac != IPI) {

						DisablePlayerRaceCheckpoint(izazivac);
						SendInfoMessage(izazivac, "Izgubili ste na trci i izgubili %d$.", UlogTrke[playerid]);
						NaUtrci[izazivac] = false; Krugovi[izazivac] = 0; TrkaIzazov[izazivac] = 0; StaroVreme[izazivac] = 0;
						Fusion_DestroyVehicle(TrkaVozilo[izazivac]); TrkaVozilo[izazivac] = -1;
						ac_SetPlayerPos(izazivac, PlayerPos[izazivac][0], PlayerPos[izazivac][1],  PlayerPos[izazivac][2]);
						SetPlayerVirtualWorld(izazivac, PlayerPosVW[izazivac]);
						ac_SetPlayerInterior(izazivac, PlayerPosInt[izazivac]); TrkaCheckpoint[izazivac] = 0;
					}
				}
			}
		}
	}
}
//onplayerentercheckpoint
if(GetFactionType(playerid) != ORG_TIP_PD) {

	if(GetSpeed(playerid) <= 0 && PlayerInfo[playerid][xAdmin] < 6 && PosaoRudar[playerid] == 0 && PosaoVocar[playerid] == 0) {
		antiCheatCS[playerid][CPPort]++;
		if(antiCheatCS[playerid][CPPort] >= 2) {
			new varstring[128];
			format(varstring, sizeof(varstring), "~r~(AC) - ~w~%s(%d) se mozda porta na checkpointe - ~r~/spec.", ImeIgraca(playerid), playerid);
			SendAltChatMessage(varstring);	
			return 1;
		}
	}
}
if(CheckpointStatus[playerid] != 0) {
	new varstring[170];
	switch(CheckpointStatus[playerid]) {
		case 1:
		{
			PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			Fusion_DisablePlayerCheckpoint(playerid);
			SetPVarInt(playerid, "LocatingCar", 0);
			CheckpointStatus[playerid] = 0;
			GameTextForPlayer(playerid, "~r~gps ugasen", 5000, 1);
		}
		case 2:
		{
			PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			Fusion_DisablePlayerCheckpoint(playerid);
			SetPVarInt(playerid, "LocatingPark", 0);
			CheckpointStatus[playerid] = 0;
			GameTextForPlayer(playerid, "~r~gps ugasen", 5000, 1);
		}
		case 3: {
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 578 && WOOD[GetPlayerVehicleID(playerid)] == true) {
				new time = gettime();
				new ostatak = (NovoVreme[playerid] - (time - StaroVreme[playerid]));
				if((time - StaroVreme[playerid]) < NovoVreme[playerid]) {
					SendErrorMessage(playerid, "Dosli ste ranije na marker nego sto je predvidjeno. ");
					SendErrorMessage(playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak);
					format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s[ID: %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca(playerid), playerid, (NovoVreme[playerid]-ostatak), NovoVreme[playerid]);
					AdminPoruka(ANTICHEAT, varstring);
					return 1;
				}

				Fusion_DisablePlayerCheckpoint(playerid);
				GameTextForPlayer(playerid, "~w~Pricekajte drvece se istovaruje..", 5000, 1);
				TogglePlayerControllable(playerid, false);
				CheckpointStatus[playerid] = 0;
				//DestroyDynamicObject(WOODObject[GetPlayerVehicleID(playerid)]);
				//WOODObject[GetPlayerVehicleID(playerid)] = CreateDynamicObject(18609, -1966.6454, -2436.1814, 32.0000, 0, 0, 50.0000);
				//MoveDynamicObject(WOODObject[GetPlayerVehicleID(playerid)], -1972.1990, -2430.8147, 32.0000, 2.00);
				SetTimerEx("Istovar", 5000, false, "dii", playerid, GetPlayerVehicleID(playerid), 1);
			}
		}
		case 4: {
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 455 && sljunak[GetPlayerVehicleID(playerid)] == true) {
				new time = gettime();
				new ostatak = (NovoVreme[playerid] - (time - StaroVreme[playerid]));
				if((time - StaroVreme[playerid]) < NovoVreme[playerid]) {
					SendErrorMessage(playerid, "Dosli ste ranije na marker nego sto je predvidjeno. ");
					SendErrorMessage(playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak);
					format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s[ID: %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca(playerid), playerid, (NovoVreme[playerid]-ostatak), NovoVreme[playerid]);
					AdminPoruka(ANTICHEAT, varstring);
					return 1;
				}

				Fusion_DisablePlayerCheckpoint(playerid);
				GameTextForPlayer(playerid, "~w~Pricekajte sljunak se istovaruje..", 5000, 1);
				TogglePlayerControllable(playerid, false);
				CheckpointStatus[playerid] = 0;
				SetTimerEx("Istovar", 5000, false, "dii", playerid, GetPlayerVehicleID(playerid), 2);
			}
		}
		case 5: {

			if(DeliverLevel[playerid] == 2) {
				if(CarriesBox[playerid] == 1) {
					Fusion_DisablePlayerCheckpoint(playerid);
					CarriesBox[playerid] = 0;
					RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BADGE);
					SetPlayerSpecialAction(playerid, 0);
					SendJobMessage(playerid, "Uspesno ste dostavili kutiju sa pepsijem!");

					TrafikaTrenutna[playerid]++;
					if((TrafikaTrenutna[playerid] - TrafikaPrva[playerid]) == 5) {

						DeliverLevel[playerid] = 3;
						SendJobMessage(playerid, "Uspesno ste dostavili 5. kutiju sa pepsijem, vratite se nazad po platu!");

						Fusion_SetPlayerCheckpoint(playerid, 930.6859, -1582.6653, 13.5593, 4.0);
						CheckpointStatus[playerid] = 6;
						return 1;
					}
					SendJobMessage(playerid, "Postavljen vam je novi marker do trafike, nastavite!");
					Fusion_SetPlayerCheckpoint(playerid, TrafikaPos[TrafikaTrenutna[playerid]][0], TrafikaPos[TrafikaTrenutna[playerid]][1], TrafikaPos[TrafikaTrenutna[playerid]][2], 4.0);
					CheckpointStatus[playerid] = 5;
				}
			}
		}
		case 6: {

			if(DeliverLevel[playerid] == 3) {

				new time = gettime();
				new ostatak = (NovoVreme[playerid] - (time - StaroVreme[playerid]));
				if((time - StaroVreme[playerid]) < NovoVreme[playerid]) {

					SendErrorMessage(playerid, "Zavrsili ste posao ranije nego sto je predvidjeno. ");
					SendErrorMessage(playerid, "Sacekajte jos %d sekundi i prodjite ponovo kroz objekt.", ostatak);
					format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s[ID: %d] je zavrsio kosaca pre vremena(za %d od %d sekundi).", ImeIgraca(playerid), playerid, (NovoVreme[playerid]-ostatak), NovoVreme[playerid]);
					AdminPoruka(ANTICHEAT, varstring);
					return 1;
				}

				Fusion_DisablePlayerCheckpoint(playerid);
				DeliverLevel[playerid] = 0;
				TrafikaTrenutna[playerid] = 0;
				TrafikaPrva[playerid] = 0;
				CarriesBox[playerid] = 0;
				ac_SetVehicleToRespawn(DeliverCar[playerid]);
				StateBox[DeliverCar[playerid]] = 0;
				KamionUsed[DeliverCar[playerid]] = -1;
				DeliverCar[playerid] = -1;
				KamionUsed[playerid] = -1;
				SendJobMessage(playerid, "Uspesno ste zavrsili posao!");

				new bonus = random(400);
				DajIgracuPlatu(playerid);
				if(ServerInfo[HappyJob] == 9)
				{
					SendJobMessage(playerid, "Dobili ste dodatnih 20000$ jer je ukljucena dupla plata na ovom poslu.");
					DajIgracuNovac(playerid, 20000);
					BusinessJobMoney(POSAO_PEPSI, 2500);
				}
				StaroVreme[playerid] = 0;
				NovoVreme[playerid] = 0;

				BusinessJobMoney(POSAO_PEPSI, ((PLATA_PEPSI+bonus)/10));
			}
		}
		case 7: {
			// edit
		}
		case 8: {
			// edit
		}
		case 9: {		 
		}
		case 10: {
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 524) {

				new time = gettime();
				new ostatak = (NovoVreme[playerid] - (time - StaroVreme[playerid]));
				if((time - StaroVreme[playerid]) < NovoVreme[playerid]) {
					SendErrorMessage(playerid, "Dosli ste ranije na marker nego sto je predvidjeno. ");
					SendErrorMessage(playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak);
					format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s[ID: %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca(playerid), playerid, (NovoVreme[playerid]-ostatak), NovoVreme[playerid]);
					AdminPoruka(ANTICHEAT, varstring);
					return 1;
				}

				GameTextForPlayer(playerid, "~w~Pricekajte cement se utovaruje..", 5000, 1);
				TogglePlayerControllable(playerid, false);
				SetTimerEx("Utovar", 5000, false, "dii", playerid, GetPlayerVehicleID(playerid), 4);
				CheckpointStatus[playerid] = 0;
				Fusion_DisablePlayerCheckpoint(playerid);
			}
		}
		case 11: {

			if(IsPlayerInAnyVehicle(playerid)) {

				if(VrstaIlegala[playerid] == 1) {
					if(PlayerInfo[playerid][xNovac] < KolicinaIlegala[playerid]*2) return SendErrorMessage(playerid, "Nemate dovoljno novca!Jedan gram kosta 2$");
					DajIgracuNovac(playerid, -KolicinaIlegala[playerid]*2) ;
					Fusion_DisablePlayerCheckpoint(playerid);
					CheckpointStatus[playerid] = 0;
					PlayerInfo[playerid][xOpium] += KolicinaIlegala[playerid];
					SendClientMessageEx(playerid, FUSIONGAMING, "Pokupio si %d grama opiuma.", KolicinaIlegala[playerid]);
					KolicinaIlegala[playerid] = 0; VrstaIlegala[playerid] = 0;
				}
				else if(VrstaIlegala[playerid] == 2) {

					if(PlayerInfo[playerid][xNovac] < KolicinaIlegala[playerid]*3) return SendErrorMessage(playerid, "Nemate dovoljno novca!Jedan gram kosta 3$");
					DajIgracuNovac(playerid, -KolicinaIlegala[playerid]*3) ;
					Fusion_DisablePlayerCheckpoint(playerid);
					CheckpointStatus[playerid] = 0;
					PlayerInfo[playerid][xMetilAmin] += KolicinaIlegala[playerid];
					SendClientMessageEx(playerid, FUSIONGAMING, "Pokupio si %d grama Methylamina.", KolicinaIlegala[playerid]);
					KolicinaIlegala[playerid] = 0; VrstaIlegala[playerid] = 0;
				}
				else {
					SendErrorMessage(playerid, "Nisi narucio robu. ");
					return 1;
				}
			}
			else {
				SCM(playerid, CRVENA, "Moras biti u autu. ");
				return 1;
			}
		}
		case 12: {

			Fusion_DisablePlayerCheckpoint(playerid);
			SCM(playerid, ZUTA, "Kada klijent sedne u vozilo ukucajte '/taxi ponudivoznju' da mu ponudite voznju.");
			CheckpointStatus[playerid] = 0;
		}
		case 13: {
			if(Polaganje[playerid] >= 1 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 410 && GetPlayerState(playerid) == 2) {
				Fusion_DisablePlayerCheckpoint(playerid);
				switch(Polaganje[playerid]) {
					case 1: {
						Polaganje[playerid] = 2;
						Fusion_SetPlayerCheckpoint(playerid, 2084.2708,-1814.9445,13.0891, 5.0);
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker).");
					}
					case 2: {
						Polaganje[playerid] = 3;
						Fusion_SetPlayerCheckpoint(playerid, 2010.7570,-1809.5197,13.0883, 5.0);
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker).");
					}
					case 3: {
						Polaganje[playerid] = 4;
						Fusion_SetPlayerCheckpoint(playerid, 1964.4133,-1799.8862,13.0883, 5.0);
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker).");
					}
					case 4: {
						Polaganje[playerid] = 5;
						Fusion_SetPlayerCheckpoint(playerid, 1974.9583,-1755.3951,13.0876, 5.0);
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker).");
					}
					case 5: {
						Polaganje[playerid] = 6;
						Fusion_SetPlayerCheckpoint(playerid, 2004.2394,-1723.9734,13.0883, 5.0);
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker).");
					}
					case 6: {
						Polaganje[playerid] = 17;
						Fusion_SetPlayerCheckpoint(playerid, 2010.5894,-1614.0739,13.0883, 5.0);
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker).");
					}
					case 17: {
						Polaganje[playerid] = 18;
						Fusion_SetPlayerCheckpoint(playerid, 2058.2231,-1599.5347,13.1981, 5.0); //1
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Stigli smo na poligon , nastavi pravo(prati marker).");
					}
					case 18: {
						Polaganje[playerid] = 19;
						Fusion_SetPlayerCheckpoint(playerid, 2064.6038,-1598.7183,13.2231, 5.0); //2
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje((prati marker).");
					}
					case 19: {
						Polaganje[playerid] = 20;
						Fusion_SetPlayerCheckpoint(playerid, 2071.6814,-1581.3936,13.2129, 5.0); //3
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(prati marker).");
					}
					case 20: {
						Polaganje[playerid] = 21;
						Fusion_SetPlayerCheckpoint(playerid, 2071.1948,-1594.7600,13.2144, 5.0); //4
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje((marker).");
					}
					case 21: {
						Polaganje[playerid] = 22;
						Fusion_SetPlayerCheckpoint(playerid, 2058.1992,-1601.1195,13.2179, 5.0); //5
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Bravo, prosao si poligon , sada ide gradska voznja. Prati marker.");
					}
					case 22: {
						Polaganje[playerid] = 23;
						Fusion_SetPlayerCheckpoint(playerid, 2117.1797,-1619.1138,13.0913, 5.0);
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker).");
					}
					case 23: {
						Polaganje[playerid] = 24;
						Fusion_SetPlayerCheckpoint(playerid, 2205.2939,-1621.9938,16.0065, 5.0);
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker).");
					}
					case 24: {
						Polaganje[playerid] = 25;
						Fusion_SetPlayerCheckpoint(playerid, 2215.0828,-1471.9958,23.5335, 5.0);
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker).");
					}
					case 25: {
						Polaganje[playerid] = 26;
						Fusion_SetPlayerCheckpoint(playerid, 2197.3948,-1382.7386,23.5331, 5.0);
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker).");
					}
					case 26: {
						Polaganje[playerid] = 27;
						Fusion_SetPlayerCheckpoint(playerid, 2110.6345,-1407.6528,23.5328, 5.0);
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker).");
					}
					case 27: {
						Polaganje[playerid] = 28;
						Fusion_SetPlayerCheckpoint(playerid, 2110.0178,-1561.1527,25.0628, 5.0);
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker).");
					}
					case 28: {
						Polaganje[playerid] = 29;
						Fusion_SetPlayerCheckpoint(playerid, 2110.7087,-1662.7135,14.1730, 5.0);
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker).");
					}
					case 29: {
						Polaganje[playerid] = 30;
						Fusion_SetPlayerCheckpoint(playerid, 2087.8767,-1761.1248,13.1101, 5.0);
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker).");
					}
					case 30: {
						Polaganje[playerid] = 31;
						Fusion_SetPlayerCheckpoint(playerid, 2072.0461,-1880.4370,13.2542, 5.0);
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker).");
					}
					case 31: {
						Polaganje[playerid] = 0;
						ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
						new Float:HP; GetVehicleHealth(GetPlayerVehicleID(playerid), HP);
						if(HP < 950.0) {
							SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Pali ste test voznje jer ste ostetili vozilo.");
							return 1;
						}
						PlayerInfo[playerid][xVozacka] = 1;
						SavePlayer(playerid);
						SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Prosli ste test voznje i dobili B kategoriju.");
					}
				}
			}
		}
		case 14: {
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 437 && GetPlayerState(playerid) == 2) {

				if(BusLinija[playerid] < 11) {
					Fusion_DisablePlayerCheckpoint(playerid);
					BusLinija[playerid]++;
					CheckpointStatus[playerid] = 14;
				}
				if(BusLinija[playerid] == 2) Fusion_SetPlayerCheckpoint(playerid, 963.2554, -1330.4203, 13.4962, 5.0);
				else if(BusLinija[playerid] == 3) Fusion_SetPlayerCheckpoint(playerid, 1222.1409, -1284.2852, 13.5143, 5.0);
				else if(BusLinija[playerid] == 4) Fusion_SetPlayerCheckpoint(playerid, 1426.8865, -1244.3213, 13.5173, 5.0);
				else if(BusLinija[playerid] == 5) Fusion_SetPlayerCheckpoint(playerid, 1346.6564, -926.8917, 35.0315, 5.0);
				else if(BusLinija[playerid] == 6) Fusion_SetPlayerCheckpoint(playerid, 1082.9972, -945.1513, 42.7620, 5.0);
				else if(BusLinija[playerid] == 7) Fusion_SetPlayerCheckpoint(playerid, 394.6435, -1344.8381, 14.7427, 5.0);
				else if(BusLinija[playerid] == 8) Fusion_SetPlayerCheckpoint(playerid, 346.2153, -1648.3312, 33.1769, 5.0);
				else if(BusLinija[playerid] == 9) Fusion_SetPlayerCheckpoint(playerid, 1119.5483, -1708.8313, 13.5159, 5.0);
				else if(BusLinija[playerid] == 10) Fusion_SetPlayerCheckpoint(playerid, 921.5195, -1713.4103, 13.5967, 5.0);
				else if(BusLinija[playerid] == 11) {

					new time = gettime();
					new ostatak = (NovoVreme[playerid] - (time - StaroVreme[playerid]));
					if((time - StaroVreme[playerid]) < NovoVreme[playerid]) {
						SendErrorMessage(playerid, "Dosli ste ranije na marker nego sto je predvidjeno. ");
						SendErrorMessage(playerid, "Zbog baga morate prekinuti posao - /prekiniposao.");
						format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s[ID: %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca(playerid), playerid, (NovoVreme[playerid]-ostatak), NovoVreme[playerid]);
						AdminPoruka(ANTICHEAT, varstring);
						return 1;
					}
					ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
					Fusion_DisablePlayerCheckpoint(playerid);
					TogglePlayerControllable(playerid, true);
					BusLinija[playerid] = 0;
					CheckpointStatus[playerid] = 0;
					Fusion_KillTimer(BusVozac[playerid]);

					new bonus = random(400);
					DajIgracuPlatu(playerid);
					if(ServerInfo[HappyJob] == 3)
					{
						SendJobMessage(playerid, "Dobili ste dodatih 20000$ jer je ukljucena dupla plata na ovom poslu.");
						DajIgracuNovac(playerid, 20000);
						BusinessJobMoney(POSAO_BUSVOZAC, 5000);
					}
					StaroVreme[playerid] = 0;
					NovoVreme[playerid] = 0;

					BusinessJobMoney(POSAO_BUSVOZAC, ((PLATA_BUSVOZAC+bonus)/10));
					return 1;
				}
				TogglePlayerControllable(playerid, false);
				BusVozac[playerid] = SetTimerEx("UtovarBus", 5000, false, "d", playerid);
				GameTextForPlayer(playerid, "~y~Stanica", 5000, 3);
			}
		}
		case 15: {

			Fusion_DisablePlayerCheckpoint(playerid);
			SCM(playerid, ZUTA, "Stigli ste na lokaciju.");
			CheckpointStatus[playerid] = 0;
		}
		case 16: {
			if(farmerInfo[playerid][fiHaveBucket]) {
				if(farmerInfo[playerid][fiCowNumber] < 14) {
					new id = farmerInfo[playerid][fiCowNumber];
					RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
					Fusion_DisablePlayerCheckpoint(playerid);
					CheckpointStatus[playerid] = 0;
					TogglePlayerControllable(playerid, false);
					farmerInfo[playerid][fiBucketObject] = CreatePlayerObject(playerid, 2613, milkInfo[id][obPos][0], milkInfo[id][obPos][1], milkInfo[id][obPos][2], 0.0, 0.0, 0.0);
					SetTimerEx("FarmerCows", 5000, false, "di", playerid, (id+1));
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.0, 1, 0, 0, 0, 0);
				}
				else if(farmerInfo[playerid][fiCowNumber] == 14) {
					SendJobMessage(playerid, "Zavrsili ste sa krava, odnesite mleko u kamionet.");
					SendJobMessage(playerid, "Mleko u kamionet ubacujete 'LEVIM KLIKOM MISA'.");
				}
			}
		}
		case 17: {
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 478) {
				if(farmerVehicles[GetPlayerVehicleID(playerid)][fvMilk] == true) {

					new time = gettime();
					new ostatak = (NovoVreme[playerid] - (time - StaroVreme[playerid]));
					if((time - StaroVreme[playerid]) < NovoVreme[playerid]) {
						SendErrorMessage(playerid, "Dosli ste ranije na marker nego sto je predvidjeno. ");
						SendErrorMessage(playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak);
						format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s[ID: %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca(playerid), playerid, (NovoVreme[playerid]-ostatak), NovoVreme[playerid]);
						AdminPoruka(ANTICHEAT, varstring);
						return 1;
					}

					SendJobMessage(playerid, "Stigao si na lokaciju, izadji i izvadi iz kamioneta mleko.");
					SendJobMessage(playerid, "Mleko iz kamioneta vadite 'LEVIM KLIKOM MISA'.");
				}
			}
		}
		case 18: {
			if(GetFactionType(playerid) == ORG_TIP_ELEK && GetVehicleModel(GetPlayerVehicleID(playerid)) == 552 && ElectricOprema[playerid] && IsPlayerInAnyVehicle(playerid)) {
				Fusion_DisablePlayerCheckpoint(playerid);
				electricNACP[playerid] = true;
				SendJobMessage(playerid, "Stigao si na lokaciju, izadji, popni se na banderu i popravi kvar.");
				SendJobMessage(playerid, "Koristi komandu - "col_white"/electric popravi.");
			}
		}
		case 19: {
			if(!IsPlayerInAnyVehicle(playerid) && ElectricPosao[playerid] == 2 && GetFactionType(playerid) == ORG_TIP_ELEK && ElectricOprema[playerid]) {
				Fusion_DisablePlayerCheckpoint(playerid);
				BrojilaKuca[playerid]++;
				SendJobMessage(playerid, "Poceli se sa ocitavanjem brojila, pricekajte "col_white"5s.");
				ApplyAnimation(playerid, "SPRAYCAN", "spraycan_full", 4.0, 0, 0, 0, 5000, 0);
				SetTimerEx("BrojiloGotovo", 5000, false, "d", playerid);
			}
		}
		case 20: {
			if(PlayerInfo[playerid][xPosao] == POSAO_PILOT && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 519 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 553)) {
				if(LetSF[playerid] == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
					if(IsPlayerInRangeOfPoint(playerid, 5.0, 1847.4221, -2414.0798, 13.5547)) {
						TogglePlayerControllable(playerid, false);
						GameTextForPlayer(playerid, "~w~sacekajte, putnici se ukrcavaju...", 5000, 5);
						PilotTimer[playerid] = SetTimerEx("PilotUtovar", 5000, false, "d", playerid);
						Fusion_SetPlayerCheckpoint(playerid, -1506.8629, -14.1312, 14.1409, 5.0);
						LetSF[playerid] = 2;
						StaroVreme[playerid] = gettime();
						NovoVreme[playerid] = 70;
					}
				}
				else if(LetSF[playerid] == 2 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
					if(IsPlayerInRangeOfPoint(playerid, 5.0, -1506.8629, -14.1312, 14.1409)) {

						new time = gettime();
						new ostatak = (NovoVreme[playerid] - (time - StaroVreme[playerid]));
						if((time - StaroVreme[playerid]) < NovoVreme[playerid]) {
							SendErrorMessage(playerid, "Dosli ste ranije na marker nego sto je predvidjeno. ");
							SendErrorMessage(playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak);
							format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s[ID: %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca(playerid), playerid, (NovoVreme[playerid]-ostatak), NovoVreme[playerid]);
							AdminPoruka(ANTICHEAT, varstring);
							return 1;
						}

						TogglePlayerControllable(playerid, false);
						GameTextForPlayer(playerid, "~w~sacekajte, putnici se iskrcavaju...", 5000, 5);
						PilotTimer[playerid] = SetTimerEx("PilotUtovar", 5000, false, "d", playerid);
						Fusion_SetPlayerCheckpoint(playerid, 1879.6438, -2493.6636, 13.5547, 5.0);
						LetSF[playerid] = 3;
						StaroVreme[playerid] = gettime();
						NovoVreme[playerid] = 75;
					}
				}
				else if(LetSF[playerid] == 3 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
					if(IsPlayerInRangeOfPoint(playerid, 5.0, 1879.6438, -2493.6636, 13.5547)) {

						new time = gettime();
						new ostatak = (NovoVreme[playerid] - (time - StaroVreme[playerid]));
						if((time - StaroVreme[playerid]) < NovoVreme[playerid]) {
							SendErrorMessage(playerid, "Dosli ste ranije na marker nego sto je predvidjeno. ");
							SendErrorMessage(playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak);
							format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s[ID: %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca(playerid), playerid, (NovoVreme[playerid]-ostatak), NovoVreme[playerid]);
							AdminPoruka(ANTICHEAT, varstring);
							return 1;
						}

						CheckpointStatus[playerid] = 0;
						TogglePlayerControllable(playerid, false);
						SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
						DajIgracuPlatu(playerid);
						if(ServerInfo[HappyJob] == 13)
						{
							SendJobMessage(playerid, "Dobili ste dodatnih 35000$ jer je ukljucena dupla plata na ovom poslu.");
							DajIgracuNovac(playerid, 35000);
							BusinessJobMoney(POSAO_PILOT, 5600);
						}
						BusinessJobMoney(POSAO_PILOT, 3900);
						LetSF[playerid] = 0;
						DisablePlayerCheckpoint(playerid);

					}
				}
			}
		}
		case 21: {
			if(PlayerInfo[playerid][xPosao] == POSAO_PILOT && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 519 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 553)) {
				if(LetLV[playerid] == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
					if(IsPlayerInRangeOfPoint(playerid, 5.0, 1847.4221, -2414.0798, 13.5547)) {
						TogglePlayerControllable(playerid, false);
						GameTextForPlayer(playerid, "~w~sacekajte, putnici se ukrcavaju...", 5000, 5);
						PilotTimer[playerid] = SetTimerEx("PilotUtovar", 5000, false, "d", playerid);
						Fusion_SetPlayerCheckpoint(playerid, 1477.5233, 1395.1841, 10.8203, 5.0);
						LetLV[playerid] = 2;
						StaroVreme[playerid] = gettime();
						NovoVreme[playerid] = 70;
					}
				}
				else if(LetLV[playerid] == 2 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
					if(IsPlayerInRangeOfPoint(playerid, 5.0, 1477.5233, 1395.1841, 10.8203)) {

						new time = gettime();
						new ostatak = (NovoVreme[playerid] - (time - StaroVreme[playerid]));
						if((time - StaroVreme[playerid]) < NovoVreme[playerid]) {
							SendErrorMessage(playerid, "Dosli ste ranije na marker nego sto je predvidjeno. ");
							SendErrorMessage(playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak);
							format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s[ID: %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca(playerid), playerid, (NovoVreme[playerid]-ostatak), NovoVreme[playerid]);
							AdminPoruka(ANTICHEAT, varstring);
							return 1;
						}

						TogglePlayerControllable(playerid, false);
						GameTextForPlayer(playerid, "~w~sacekajte, putnici se iskrcavaju...", 5000, 5);
						PilotTimer[playerid] = SetTimerEx("PilotUtovar", 5000, false, "d", playerid);
						Fusion_SetPlayerCheckpoint(playerid, 1879.6438, -2493.6636, 13.5547, 5.0);
						LetLV[playerid] = 3;
						StaroVreme[playerid] = gettime();
						NovoVreme[playerid] = 75;
					}
				}
				else if(LetLV[playerid] == 3 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
					if(IsPlayerInRangeOfPoint(playerid, 5.0, 1879.6438, -2493.6636, 13.5547)) {

						new time = gettime();
						new ostatak = (NovoVreme[playerid] - (time - StaroVreme[playerid]));
						if((time - StaroVreme[playerid]) < NovoVreme[playerid]) {
							SendErrorMessage(playerid, "Dosli ste ranije na marker nego sto je predvidjeno. ");
							SendErrorMessage(playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak);
							format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s[ID: %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca(playerid), playerid, (NovoVreme[playerid]-ostatak), NovoVreme[playerid]);
							AdminPoruka(ANTICHEAT, varstring);
							return 1;
						}

						CheckpointStatus[playerid] = 0;
						TogglePlayerControllable(playerid, false);
						SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
						DajIgracuPlatu(playerid);
						if(ServerInfo[HappyJob] == 13)
						{
							SendJobMessage(playerid, "Dobili ste dodatnih 28000$ jer je ukljucena dupla plata na ovom poslu.");
							DajIgracuNovac(playerid, 28000);
							BusinessJobMoney(POSAO_PILOT, 4600);
						}
						BusinessJobMoney(POSAO_PILOT, 3900);
						LetLV[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
					}
				}
			}
		}
		case 22: {
			Fusion_DisablePlayerCheckpoint(playerid);
			SendJobMessage(playerid, "Stanite do kontejnera i uzmite smece "col_white"'LEVIM KLIKOM MISA'.");
			CheckpointStatus[playerid] = 0;
		}
		case 23: {
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 524 && VehCement[GetPlayerVehicleID(playerid)] == true) {
				new time = gettime();
				new ostatak = (NovoVreme[playerid] - (time - StaroVreme[playerid]));
				if((time - StaroVreme[playerid]) < NovoVreme[playerid]) {
					SendErrorMessage(playerid, "Dosli ste ranije na marker nego sto je predvidjeno. ");
					SendErrorMessage(playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak);
					format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s[ID: %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca(playerid), playerid, (NovoVreme[playerid]-ostatak), NovoVreme[playerid]);
					AdminPoruka(ANTICHEAT, varstring);
					return 1;
				}

				Fusion_DisablePlayerCheckpoint(playerid);
				GameTextForPlayer(playerid, "~w~Pricekajte cement se istovaruje..", 5000, 1);
				TogglePlayerControllable(playerid, false);
				CheckpointStatus[playerid] = 0;
				SetTimerEx("Istovar", 5000, false, "dii", playerid, GetPlayerVehicleID(playerid), 7);
			}
		}
		case 26: {
			if(PlayerInfo[playerid][xPosao] == POSAO_FARMER && farmerInfo[playerid][fiCowNumber] == 17 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 478) {

				new time = gettime();
				new ostatak = (NovoVreme[playerid] - (time - StaroVreme[playerid]));
				if((time - StaroVreme[playerid]) < NovoVreme[playerid]) {
					SendErrorMessage(playerid, "Dosli ste ranije na marker nego sto je predvidjeno. ");
					SendErrorMessage(playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak);
					format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s[ID: %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca(playerid), playerid, (NovoVreme[playerid]-ostatak), NovoVreme[playerid]);
					AdminPoruka(ANTICHEAT, varstring);
					return 1;
				}

				Fusion_DisablePlayerCheckpoint(playerid);
				CheckpointStatus[playerid] = 0;
				ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				new bonus = random(100);
				//DajIgracuPlatu(playerid);
				DajIgracuNovac(playerid, 36390);
				SendJobMessage(playerid, "Dostavili ste mleko i vratili ste se na farmu, Vasa zarada iznosi 36390$.");
				SavePlayer(playerid);
				if(ServerInfo[HappyJob] == 2)
				{
					SendJobMessage(playerid, "Dobili ste dodatih 36000$ jer je ukljucena dupla plata na ovom poslu.");
					DajIgracuNovac(playerid, 36000);
					BusinessJobMoney(POSAO_FARMER, 6000);
				}
				BusinessJobMoney(POSAO_FARMER, ((PLATA_FARMER+bonus)/10));
				farmerInfo[playerid][fiCowNumber] = 0;
				StaroVreme[playerid] = 0;
				NovoVreme[playerid] = 0;
			}
		}
		case 27: {
		}
		case 28: {
		}
		case 29: {
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 578) {
				new time = gettime();
				new ostatak = (NovoVreme[playerid] - (time - StaroVreme[playerid]));
				if((time - StaroVreme[playerid]) < NovoVreme[playerid]) {
					SendErrorMessage(playerid, "Dosli ste ranije na marker nego sto je predvidjeno. ");
					SendErrorMessage(playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak);
					format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s[ID: %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca(playerid), playerid, (NovoVreme[playerid]-ostatak), NovoVreme[playerid]);
					AdminPoruka(ANTICHEAT, varstring);
					return 1;
				}

				Fusion_DisablePlayerCheckpoint(playerid);
				ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				CheckpointStatus[playerid] = 0;
				new bonus = random(200);
				DajIgracuPlatu(playerid);
				if(ServerInfo[HappyJob] == 6)
				{
					SendJobMessage(playerid, "Dobili ste dodatnih 45000$ jer je ukljucena dupla plata na ovom poslu.");
					DajIgracuNovac(playerid, 45000);
					BusinessJobMoney(POSAO_PREVOZNIK, 7000);
				}
				BusinessJobMoney(POSAO_PREVOZNIK, ((PLATA_PREVOZNIKD+bonus)/10));
				StaroVreme[playerid] = 0;
				NovoVreme[playerid] = 0;
				ServerInfo[Drva] += 10;
					SaveServerStats();

			}
		}
		case 30: {
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 455 && sljunak[GetPlayerVehicleID(playerid)] == true) {
				new time = gettime();
				new ostatak = (NovoVreme[playerid] - (time - StaroVreme[playerid]));
				if((time - StaroVreme[playerid]) < NovoVreme[playerid]) {
					SendErrorMessage(playerid, "Dosli ste ranije na marker nego sto je predvidjeno. ");
					SendErrorMessage(playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak);
					format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s[ID: %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca(playerid), playerid, (NovoVreme[playerid]-ostatak), NovoVreme[playerid]);
					AdminPoruka(ANTICHEAT, varstring);
					return 1;
				}

				sljunak[GetPlayerVehicleID(playerid)] = false;
				Fusion_DisablePlayerCheckpoint(playerid);
				ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				CheckpointStatus[playerid] = 0;
				new bonus = random(200);
				DajIgracuPlatu(playerid);
				if(ServerInfo[HappyJob] == 6)
				{
					SendJobMessage(playerid, "Dobili ste dodatnih 45000$ jer je ukljucena dupla plata na ovom poslu.");
					DajIgracuNovac(playerid, 45000);
					BusinessJobMoney(POSAO_PREVOZNIK, 7000);
				}
				BusinessJobMoney(POSAO_PREVOZNIK, ((PLATA_PREVOZNIKS+bonus)/10));
				StaroVreme[playerid] = 0;
				NovoVreme[playerid] = 0;

			}
		}
		case 31: {
			// edit
		}
		case 32: {
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][xPosao] == POSAO_RUDAR && PosaoRudar[playerid] != 0 && UzeoOpremu[playerid] == true) {

				Fusion_DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, false);
				ApplyAnimation(playerid, "CHAINSAW", "CSAW_1", 4.1, 1, 1, 1, 1, 0, 1);
				PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
				SendJobMessage(playerid, "Poceli ste sa kopanjem sacekajte 20 sekundi.");
				GameTextForPlayer(playerid, "~w~Kopate~n~sacekajte par sekundi", 20000, 4);
				rudarPosao[playerid][rudarTimer] = SetTimerEx("Iskopavanje", 20000, false, "i", playerid);
			}
		}
		case 33: {
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][xPosao] == POSAO_RUDAR && PosaoRudar[playerid] != 0 && UzeoOpremu[playerid] == true) {
				if(rudarPosao[playerid][rudarIskopano] >= 6) {

					ClearAnimations(playerid);
					RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
					Fusion_DisablePlayerCheckpoint(playerid);
					SendJobMessage(playerid, "Sacekajte 40 sekundi da se prerade iskopine.");

					rudarPosao[playerid][rudarObjects][0] = CreatePlayerObject(playerid, 19941, 598.14069, 862.98218, 802.40588-900,   0.00000, 0.00000, 40.20000);
					rudarPosao[playerid][rudarObjects][1] = CreatePlayerObject(playerid, 19941, 598.29779, 862.89893, 802.40588-900,   0.00000, 0.00000, -21.42001);
					rudarPosao[playerid][rudarObjects][2] = CreatePlayerObject(playerid, 19941, 598.22375, 863.12122, 802.40588-900,   0.00000, 0.00000, -21.42001);

					MovePlayerObject(playerid, rudarPosao[playerid][rudarObjects][0], 606.83771, 862.88831, 800.86572-900, 0.5);
					MovePlayerObject(playerid, rudarPosao[playerid][rudarObjects][1], 606.90857, 862.71967, 800.84637-900, 0.5);
					MovePlayerObject(playerid, rudarPosao[playerid][rudarObjects][2], 606.91968, 863.00647, 800.86542-900, 0.5);

					rudarPosao[playerid][rudarTimer] = SetTimerEx("sekundiRudar", 40000, false, "i", playerid);
				}
			}
		}
		case 34: {
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][xPosao] == POSAO_RUDAR && PosaoRudar[playerid] != 0 && UzeoOpremu[playerid] == true) {

				DestroyPlayerObject(playerid, rudarPosao[playerid][rudarObjects][0]);
				DestroyPlayerObject(playerid, rudarPosao[playerid][rudarObjects][1]);
				DestroyPlayerObject(playerid, rudarPosao[playerid][rudarObjects][2]);
				Fusion_DisablePlayerCheckpoint(playerid);

				CheckpointStatus[playerid] = 0;
				new zlato = PLATA_RUDAR + random(5);
				
				//DajIgracuPlatu(playerid);
				PlayerInfo[playerid][xZlato] += zlato;				

				SendJobMessage(playerid, "Pokupili ste preradjene iskopine u kojima je bilo %dg zlata.", zlato);
				if(ServerInfo[HappyJob] == 4)
				{
					SendJobMessage(playerid, "Dobili ste dodatnih 35g zlata jer je ukljucena dupla plata na ovom poslu.");
					PlayerInfo[playerid][xZlato] += 35;
					BusinessJobMoney(POSAO_RUDAR, 3500);
				}
				SavePlayer(playerid);

				update_fg_info_tds(playerid);

				BusinessJobMoney(POSAO_RUDAR, (zlato*1000)/10);

				RemovePlayerAttachedObject(playerid, OBJECT_SLOT_LHAND);
				RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);

				SetPlayerAttachedObject(playerid, OBJECT_SLOT_LHAND, 18634, 6, 0.048513, 0.018571, 0.028653, 314.764404, 226.953979, 222.510803, 1.000000, 1.000000, 1.000000);
				SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 2060, 1, -0.191781, -0.162666, -0.003734, 88.812377, 0.000000, 0.408470, 1.000000, 1.000000, 1.000000);

				rudarPosao[playerid][rudarIskopano] = 0;

				PosaoRudar[playerid] = 0;
			}
		}
		case 35: {

			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 428 && PlayerInfo[playerid][xPosao] == POSAO_PREVOZNOVCA) {

				new time = gettime();
				new ostatak = (NovoVreme[playerid] - (time - StaroVreme[playerid]));
				if((time - StaroVreme[playerid]) < NovoVreme[playerid]) {
					SendErrorMessage(playerid, "Dosli ste ranije na marker nego sto je predvidjeno. ");
					SendErrorMessage(playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak);
					format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s[ID: %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca(playerid), playerid, (NovoVreme[playerid]-ostatak), NovoVreme[playerid]);
					AdminPoruka(ANTICHEAT, varstring);
					return 1;
				}

				GameTextForPlayer(playerid, "~w~Pricekajte, novac se utovaruje..", 5000, 1);
				TogglePlayerControllable(playerid, false);
				SetTimerEx("Utovar", 5000, false, "dii", playerid, GetPlayerVehicleID(playerid), 5);
				CheckpointStatus[playerid] = 0;
				Fusion_DisablePlayerCheckpoint(playerid);
			}
		}
		case 36: {
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 428 && VehNovac[GetPlayerVehicleID(playerid)] == true) {
				new time = gettime();
				new ostatak = (NovoVreme[playerid] - (time - StaroVreme[playerid]));
				if((time - StaroVreme[playerid]) < NovoVreme[playerid]) {
					SendErrorMessage(playerid, "Dosli ste ranije na marker nego sto je predvidjeno. ");
					SendErrorMessage(playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak);
					format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s[ID: %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca(playerid), playerid, (NovoVreme[playerid]-ostatak), NovoVreme[playerid]);
					AdminPoruka(ANTICHEAT, varstring);
					return 1;
				}

				Fusion_DisablePlayerCheckpoint(playerid);
				GameTextForPlayer(playerid, "~w~Pricekajte novac se istovaruje..", 5000, 1);
				TogglePlayerControllable(playerid, false);
				CheckpointStatus[playerid] = 0;
				SetTimerEx("Istovar", 5000, false, "dii", playerid, GetPlayerVehicleID(playerid), 8);
			}
		}
		case 37: {

			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 538 && GetPlayerState(playerid) == 2) {

				if(VozPosao[playerid] < 6) {
					Fusion_DisablePlayerCheckpoint(playerid);
					VozPosao[playerid]++;
					CheckpointStatus[playerid] = 37;
				}

				if(VozPosao[playerid] == 2) Fusion_SetPlayerCheckpoint(playerid, -1943.9296, 141.2939, 27.0006, 5.0);
				else if(VozPosao[playerid] == 3) Fusion_SetPlayerCheckpoint(playerid, 1440.2815,2632.3748,10.8203, 5.0);
				else if(VozPosao[playerid] == 4) Fusion_SetPlayerCheckpoint(playerid, 2864.9333,1287.2427,10.8203, 5.0);
				else if(VozPosao[playerid] == 5) Fusion_SetPlayerCheckpoint(playerid, 1740.3632,-1954.2498,13.5469, 5.0);
				else if(VozPosao[playerid] == 6) {

					new time = gettime();
					new ostatak = (NovoVreme[playerid] - (time - StaroVreme[playerid]));
					if((time - StaroVreme[playerid]) < NovoVreme[playerid]) {
						SendErrorMessage(playerid, "Dosli ste ranije na marker nego sto je predvidjeno. ");
						SendErrorMessage(playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak);
						format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s[ID: %d] je stigao na marker pre vremena(za %d od %d sekundi).", ImeIgraca(playerid), playerid, (NovoVreme[playerid]-ostatak), NovoVreme[playerid]);
						AdminPoruka(ANTICHEAT, varstring);
						return 1;
					}

					ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
					Fusion_DisablePlayerCheckpoint(playerid);
					TogglePlayerControllable(playerid, true);
					VozPosao[playerid] = 0;
					CheckpointStatus[playerid] = 0;
					Fusion_KillTimer(PosaoMasinovodja[playerid]);

					new bonus = random(400);

					format(varstring, sizeof(varstring), ""col_job"Uspesno ste zavrsili voz liniju!\n\n"col_white"Dodato na platni racun (/stats): "col_job"6000$\n"col_white"Bonus: "col_job"%d$", bonus);
					SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, varstring, "Ok", "");

					PlayerInfo[playerid][xPlatniRacun] += (6000+bonus);
					SavePlayer(playerid); update_fg_info_tds(playerid);

					StaroVreme[playerid] = 0;
					NovoVreme[playerid] = 0;

					//BusinessJobMoney(POSAO_MASINOVODJA, ((6000+bonus)/10));
					return 1;
				}
				TogglePlayerControllable(playerid, false);
				PosaoMasinovodja[playerid] = SetTimerEx("UtovarVoz", 5000, false, "d", playerid);
				GameTextForPlayer(playerid, "~y~Stanica", 5000, 3);
			}
		}
		case 38: {
			Fusion_DisablePlayerCheckpoint(playerid);
		}
		case 39: {


			if(ProcesSvercanja[playerid] == 1) {

				Fusion_DisablePlayerCheckpoint(playerid);

				Fusion_SetPlayerCheckpoint(playerid, -737.9325, -132.5371, 58.8809, 2.0);
				CheckpointStatus[playerid] = 39;
				ProcesSvercanja[playerid] = 2;

				SCM(playerid, 0x95b4a2FF, "[SVERC] "col_white"Idite desno do magacina i uzmite vasu kutiju.");
			}
			else if(ProcesSvercanja[playerid] == 2) {

				Fusion_DisablePlayerCheckpoint(playerid);

				ProcesSvercanja[playerid] = 3;
				CheckpointStatus[playerid] = 0;

				SetPlayerAttachedObject(playerid, OBJECT_SLOT_BADGE, 3052, 1, 0.15, 0.4, 0.0, 0.0, 90.0, 0.0, 1.0, 1.0, 1.0);
				SCM(playerid, 0x95b4a2FF, "[SVERC] "col_white"Uzeli ste kutiju sa materijalima, ubacite je u kombi(/ubaciukombi)!");
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1);

			}
			else if(ProcesSvercanja[playerid] == 5) {

				if(!IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_BADGE)) return SendErrorMessage(playerid, "Nemate kutiju u rukama!");

				Fusion_DisablePlayerCheckpoint(playerid);

				ProcesSvercanja[playerid] = 0;

				RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BADGE);

				CheckpointStatus[playerid] = 0;

				new mats = random(50)+400;

				SendClientMessageEx(playerid, 0x95b4a2FF, "[SVERC] "col_white"Otvorili ste kutiju i dobili %d materijala!", mats);
				ApplyAnimation(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0);

				PlayerInfo[playerid][xSvercer] = 5;
				PlayerInfo[playerid][xMaterijali] += mats;
				SavePlayer(playerid);

			}
		}
		case 40: {

			if(NamestajLevel[playerid] == 1 || NamestajLevel[playerid] == 2 || NamestajLevel[playerid] == 4 || IsPlayerInRangeOfPoint(playerid, 4.0, 2149.6013, -2273.1235, 13.3047)) {

				Fusion_DisablePlayerCheckpoint(playerid);
				CheckpointStatus[playerid] = 0;
			}
			else if(NamestajLevel[playerid] == 6) {

				Fusion_DisablePlayerCheckpoint(playerid);
				NamestajLevel[playerid] = 0;
				Rezanje[playerid] = 0;
				RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BADGE);
				SetPlayerSpecialAction(playerid, false);
				CheckpointStatus[playerid] = 0;

				new bonus = random(40);
				DajIgracuPlatu(playerid);
				if(ServerInfo[HappyJob] == 8)
				{
					SendJobMessage(playerid, "Dobili ste dodatnih 14000$ jer je ukljucena dupla plata na ovom poslu.");
					DajIgracuNovac(playerid, 14000);
					BusinessJobMoney(POSAO_PNAMESTAJA, 5500);
				}
				ServerInfo[Namestaj] += 1;
				SaveServerStats();

				BusinessJobMoney(POSAO_PNAMESTAJA, ((PLATA_PNAMESTAJA+bonus)/10));

			}
		}
		case 41: {
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][xPosao] == POSAO_VOCAR && PosaoVocar[playerid] != 0 && UzeoOpremu[playerid] == true) {

				Fusion_DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, false);
				ApplyAnimation(playerid, "BSKTBALL", "BBALL_def_jump_shot" , 4.0, 1, 1, 1, 1, 0, 1);
				PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
				SendJobMessage(playerid, "Poceli ste sa branjem voca, sacekajte 20 sekundi.");
				GameTextForPlayer(playerid, "~w~Berete~n~sacekajte par sekundi", 20000, 4);
				vocarPosao[playerid][vocarTimer] = SetTimerEx("BranjeVoca", 20000, false, "i", playerid);
			}
		}

		case 42: {
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][xPosao] == POSAO_VOCAR && PosaoVocar[playerid] != 0 && UzeoOpremu[playerid] == true) {
				if(vocarPosao[playerid][vocarObrao] >= 9) {

					ClearAnimations(playerid);
					Fusion_DisablePlayerCheckpoint(playerid);

					CheckpointStatus[playerid] = 0;
					
					for(new i=0; i<MAX_PLAYER_ATTACHED_OBJECTS; i++)
					{
						if(IsPlayerAttachedObjectSlotUsed(playerid, i)) RemovePlayerAttachedObject(playerid, i);
					}
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

					BusinessJobMoney(POSAO_VOCAR, 2303);
					if(ServerInfo[HappyJob] == 10)
					{
						SendJobMessage(playerid, "Dobili ste dodatnih 14000$ jer je ukljucena dupla plata na ovom poslu.");
						DajIgracuNovac(playerid, 14000);
						BusinessJobMoney(POSAO_VOCAR, 5500);
					}
					DajIgracuPlatu(playerid);

					vocarPosao[playerid][vocarObrao] = 0;

					PosaoVocar[playerid] = 0;
				}
			}
		}
		case 43: {//drvoseca
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][xPosao] == POSAO_DRVOSECA && PosaoDrvoseca[playerid] != 0 && UzeoOpremu[playerid] == true) {

				Fusion_DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, false);
				GiveWeaponToPlayer(playerid, 9, 1);
				ApplyAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.1, 1, 1, 1, 1, 0, 1);
				PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
				SendJobMessage(playerid, "Poceli ste sa secom drva, sacekajte 15 sekundi.");
				//GameTextForPlayer(playerid, "~w~Berete~n~sacekajte par sekundi", 20000, 4);
				drvosecaPosao[playerid][drvoTimer] = SetTimerEx("SecaDrva", 15000, false, "i", playerid);
			}
		}

		case 44: {
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][xPosao] == POSAO_DRVOSECA && PosaoDrvoseca[playerid] != 0 && UzeoOpremu[playerid] == true) {
				if(drvosecaPosao[playerid][drvoIseko] >= 8) {

					ClearAnimations(playerid);
					Fusion_DisablePlayerCheckpoint(playerid);

					CheckpointStatus[playerid] = 0;
					for(new i=0; i<MAX_PLAYER_ATTACHED_OBJECTS; i++)
					{
						if(IsPlayerAttachedObjectSlotUsed(playerid, i)) RemovePlayerAttachedObject(playerid, i);
					}
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

					BusinessJobMoney(POSAO_DRVOSECA, PLATA_DRVOSECA/10);
					DajIgracuPlatu(playerid);
					if(ServerInfo[HappyJob] == 7)
					{
						SendJobMessage(playerid, "Dobili ste dodatnih 28000$ jer je ukljucena dupla plata na ovom poslu.");
						DajIgracuNovac(playerid, 28000);
						BusinessJobMoney(POSAO_DRVOSECA, 5500);
					}
					drvosecaPosao[playerid][drvoIseko] = 0;

					PosaoDrvoseca[playerid] = 0;
				}

			}
		}
	}
}
return true;}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
return true;}

public OnRconCommand(cmd[])
{
return true;}

public OnPlayerRequestSpawn(playerid)
{
if(PlayerLogged[playerid] == true && PlayerInfo[playerid][xRegistrovan] != 0)
{
	//PostaviSpawn(playerid);
	Fusion_SetSpawnInfo(playerid);
	ac_SpawnPlayer(playerid);}
else return false;
return true;}

public OnObjectMoved(objectid)
{
return true;}

public OnPlayerObjectMoved(playerid, objectid)
{
return true;}

public OnPlayerPickUpPickup(playerid, pickupid)
{
return true;}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
if(enterexit == 1) {
	antiCheatCS[playerid][InTuningGarage] = true;}
else if(enterexit == 0) {
	antiCheatCS[playerid][InTuningGarage] = false;}
return 1;}

public OnVehicleMod(playerid, vehicleid, componentid) {
new engine, lights, alarm, doors, bonnet, boot, objective;
new i = ScriptIDVozila[vehicleid];
if(antiCheatCS[playerid][InTuningGarage]) {
	if(TipVozila[vehicleid] == PRIVATNO_VOZILO) {
		if(strcmp(ImeIgraca(playerid), VehicleInfo[i][vOwner], true) == 0) {
			SavePlayerVehicleTuning(i, componentid);
			VehicleInfo[i][vTuned] = 1;
			if(!IsComponentidCompatible(GetVehicleModel(vehicleid), componentid)) RemoveVehicleComponent(vehicleid, componentid);
		}
	}
}
else {
	if(!PlayerTuningCar[playerid]) {
		Fusion_DestroyVehicle(vehicleid);
		if(i != -1) {

			VehicleInfo[i][vID] = Fusion_CreateVehicle(i, VehicleInfo[i][vUsage], VehicleInfo[i][vOrganization], VehicleInfo[i][vJob], VehicleInfo[i][vFuelStation], VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ]+1.0, VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], 300000);
			ac_LinkVehicleToInterior(VehicleInfo[i][vID], VehicleInfo[i][vInterior]);
			SetVehicleVirtualWorld(VehicleInfo[i][vID], VehicleInfo[i][vVirtualWorld]);
			vCanDrive[VehicleInfo[i][vID]] = 1;

			if(VehicleInfo[i][vUsage] == POSLOVNO_VOZILO) {
				VehicleInfo[i][vFuel] = 100;
				Fuel[VehicleInfo[i][vID]] = 100;
			}

			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			ac_SetVehicleParamsEx(vehicleid, 0, lights, alarm,doors, 0, 0, objective);
		}
		new varstring[166];
		SCM(playerid, -1, "Ukoliko mislis da si kickovan greskom slikaj ovo i postavi na forum!");
		format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s je kickovan sa servera. Razlog: "col_white"Tuning hack", ImeIgraca(playerid));
		SCMA(SVETLOCRVENA, varstring);
		Kickovanje(playerid, "{af001d][ FG:RPG ] : {FFFFFF]Kikovani ste sa servera zbog koriscenja cheata. (Tuning Hack)");
		return 1;
	}
}
return true;}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
new engine, lights, alarm, doors, bonnet, boot, objective;
new i = ScriptIDVozila[vehicleid];
if(antiCheatCS[playerid][InTuningGarage]) {
	if(TipVozila[vehicleid] == PRIVATNO_VOZILO) {
		if(strcmp(ImeIgraca(playerid), VehicleInfo[i][vOwner], true) == 0) {
			VehicleInfo[i][vPaintJob] = paintjobid;
			VehicleInfo[i][vTuned] = 1; SaveVehicle(i);
		}
	}
}
else {
	if(!PlayerTuningCar[playerid]) {
		Fusion_DestroyVehicle(vehicleid);
		if(i != -1) {
			VehicleInfo[i][vID] = Fusion_CreateVehicle(i, VehicleInfo[i][vUsage], VehicleInfo[i][vOrganization], VehicleInfo[i][vJob], VehicleInfo[i][vFuelStation], VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ]+1.0, VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], 300000);
			ac_LinkVehicleToInterior(VehicleInfo[i][vID], VehicleInfo[i][vInterior]);
			SetVehicleVirtualWorld(VehicleInfo[i][vID], VehicleInfo[i][vVirtualWorld]);
			vCanDrive[VehicleInfo[i][vID]] = 1;


			if(VehicleInfo[i][vUsage] == POSLOVNO_VOZILO) {
				VehicleInfo[i][vFuel] = 100;
				Fuel[VehicleInfo[i][vID]] = 100;
			}


			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			ac_SetVehicleParamsEx(vehicleid, 0, lights, alarm,doors, 0, 0, objective);
		}
		new varstring[166];
		SCM(playerid, -1, "Ukoliko mislis da si kickovan greskom slikaj ovo i postavi na forum!");
		format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| %s je kickovan sa servera. Razlog: "col_white"Tuning hack", ImeIgraca(playerid));
		SCMA(SVETLOCRVENA, varstring);
		Kickovanje(playerid, "{af001d][ FG:RPG ] : {FFFFFF]Kikovani ste sa servera zbog koriscenja cheata. (Tuning Hack)");
		return 1;
	}
}
return true;}

public OnVehicleRespray(playerid, vehicleid, color1, color2) {
new i = ScriptIDVozila[vehicleid];
if(TipVozila[vehicleid] == PRIVATNO_VOZILO) {
	if(strcmp(ImeIgraca(playerid), VehicleInfo[i][vOwner], true) == 0) {
		VehicleInfo[i][vColor1] = color1;
		VehicleInfo[i][vColor2] = color2;
		SaveVehicle(i);
	}
}
return true;}

public OnPlayerSelectedMenuRow(playerid, row)
{
return true;}

public OnPlayerExitedMenu(playerid)
{
return true;}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
return true;}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys) {
new varstring[175];
if(IsKeyJustDown(KEY_HANDBRAKE,newkeys,oldkeys)) {
	if(PlayerInfo[playerid][xUbijen] == 1) return 1;
	if(animation[playerid] != 0)
	{
		StopLoopingAnim(playerid);
		animation[playerid] = 0;
	}
}

if ((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE)) // Cam Editor
{
	new Float:fPX, Float:fPY, Float:fPZ,
		Float:fVX, Float:fVY, Float:fVZ,
		Float:object_x, Float:object_y, Float:object_z;

	if(IsCreating[playerid] == true)
	{
		if(SettingFirstLoc[playerid] == true)
		{
			const Float:fScale = 5.0;
			GetPlayerCameraPos(playerid, fPX, fPY, fPZ);
			GetPlayerCameraFrontVector(playerid, fVX, fVY, fVZ);
			object_x = fPX + floatmul(fVX, fScale);
			object_y = fPY + floatmul(fVY, fScale);
			object_z = fPZ + floatmul(fVZ, fScale);
			coordInfo[playerid][StartX] 		= fPX;
			coordInfo[playerid][StartY] 		= fPY;
			coordInfo[playerid][StartZ] 		= fPZ;
			coordInfo[playerid][StartLookX] 	= object_x;
			coordInfo[playerid][StartLookY] 	= object_y;
			coordInfo[playerid][StartLookZ] 	= object_z;
			if(IsReSettingStart[playerid] == true)
			{
				SendClientMessage(playerid, -1, "{8EFF8E]>{FFFFFF] Start position {8EFF8E]re-set.");
				SPD(playerid, dialog_MENU, DSL,"Next step?","Preview\nChange Start\nChange End\nChange Speed\nSave","Ok","Cancel");
				IsReSettingStart[playerid] 		= false;
				IsReSettingEnd[playerid] 		= false;
				SettingFirstLoc[playerid] 		= false;
				SettingLastLoc[playerid] 		= false;
			}
			else
			{
				SendClientMessage(playerid, -1, "{8EFF8E]>{FFFFFF] Start position {8EFF8E]set.");
				SendClientMessage(playerid, -1, "Now use {F58282]~k~~PED_FIREWEAPON~ {FFFFFF]to save the camera's position as the {F58282]end {FFFFFF]position.");
				SettingLastLoc[playerid] = true;
				SettingFirstLoc[playerid] = false;
			}
		}
		else if(SettingLastLoc[playerid] == true)
		{
			const Float:fScale = 5.0;
			new string[512];
			format(string, sizeof(string), "Please enter the desired {F58282]movement{a9c4e4] time in milliseconds\n\nCurrent movement speed: \t{F58282]%i milliseconds\n{a9c4e4]Current rotation speed: \t{F58282]%i milliseconds\n\n\nNote: {a9c4e4]1 second = 1000 milliseconds", coordInfo[playerid][MoveSpeed], coordInfo[playerid][RotSpeed]);
			SPD(playerid, dialog_MOVE_SPEED, DSI, "Movement Speed", string,"Ok","Cancel");
			GetPlayerCameraPos(playerid, fPX, fPY, fPZ);
			GetPlayerCameraFrontVector(playerid, fVX, fVY, fVZ);
			object_x = fPX + floatmul(fVX, fScale);
			object_y = fPY + floatmul(fVY, fScale);
			object_z = fPZ + floatmul(fVZ, fScale);
			coordInfo[playerid][EndX] 			= fPX;
			coordInfo[playerid][EndY] 			= fPY;
			coordInfo[playerid][EndZ] 			= fPZ;
			coordInfo[playerid][EndLookX] 		= object_x;
			coordInfo[playerid][EndLookY] 		= object_y;
			coordInfo[playerid][EndLookZ] 		= object_z;
			if(IsReSettingEnd[playerid] == true)
			{
				SendClientMessage(playerid, -1, "{8EFF8E]>{FFFFFF] End position {8EFF8E]re-set.");
				SPD(playerid, dialog_MENU, DSL,"Next step?","Preview\nChange Start\nChange End\nChange Speed\nSave","Ok","Cancel");
				IsReSettingStart[playerid] 		= false;
				IsReSettingEnd[playerid] 		= false;
				SettingFirstLoc[playerid] 		= false;
				SettingLastLoc[playerid] 		= false;
			}
			else
			{
				SendClientMessage(playerid, -1, "{8EFF8E]>{FFFFFF] End position {8EFF8E]set.");
				SettingLastLoc[playerid] = false;
			}
		}
	}
}
if(newkeys == KEY_YES) /////////KEY_SECONDARY_ATTACK
{
if(IsPlayerInRangeOfPoint(playerid, 0.35, 1207.75,-737.7961,1139.25))//
{
		new businessId = GetPlayerBusinessId(playerid, VRSTA_GUNSHOP);

	if(businessId == -1)
	{
		SendErrorMessage(playerid, "Morate biti u gunshopu.");
	}
	else if(businessId == -2)
	{
		SendErrorMessage(playerid, "Nemamo vise proizvoda!");
	}
	else
	{
	if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti najmanje level 3 da bi mogli kupovati oruzje!");
	if(PlayerInfo[playerid][xGunLicense] == false) return SendErrorMessage(playerid,  "Ne mozete kupiti oruzje bez dozvole.");
	if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete kupiti oruzje, imate zabranu - /disarmtime.");
	if(9000 > PlayerInfo[playerid][xNovac])return SendErrorMessage(playerid, "Nemate dovoljno novca!");
	new string[256];
	format(string,sizeof(string),""col_server"__________________________________________"col_white"\n\nDa li ste sigurni da zelite da kupite oruzje?\nProizvod:"col_server" Desert Eagle\n"col_white"Ammo:"col_server" 100 \n"col_white"Cena: "col_server"9000$\n"col_server"__________________________________________");
	SPD(playerid,dialog_KGUN2,DSMSG,""col_server"GUN SHOP |"col_white" Desert Eagle",string,"Kupi","Odustani");
	}
}
else if(IsPlayerInRangeOfPoint(playerid, 0.35, 1207.75,-735.7791,1139.25))//
{
	new businessId = GetPlayerBusinessId(playerid, VRSTA_GUNSHOP);

	if(businessId == -1)
	{
		SendErrorMessage(playerid, "Morate biti u gunshopu.");
	}
	else if(businessId == -2)
	{
		SendErrorMessage(playerid, "Nemamo vise proizvoda!");
	}
	else
	{
	if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti najmanje level 3 da bi mogli kupovati oruzje!");
	if(PlayerInfo[playerid][xGunLicense] == false) return SendErrorMessage(playerid,  "Ne mozete kupiti oruzje bez dozvole.");
	if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete kupiti oruzje, imate zabranu - /disarmtime.");
	if(5000 > PlayerInfo[playerid][xNovac])return SendErrorMessage(playerid, "Nemate dovoljno novca!");
	new string[256];
	format(string,sizeof(string),""col_server"__________________________________________"col_white"\n\nDa li ste sigurni da zelite da kupite oruzje?\nProizvod:"col_server" 9mm Pistol\n"col_white"Ammo:"col_server" 100 \n"col_white"Cena: "col_server"5000$\n"col_server"__________________________________________");
	SPD(playerid,dialog_KGUN1,DSMSG,""col_server"GUN SHOP |"col_white" 9mm Pistol",string,"Kupi","Odustani");
	}
}
else if(IsPlayerInRangeOfPoint(playerid, 0.35, 1207.75,-738.7451,1139.25))//
{
	new businessId = GetPlayerBusinessId(playerid, VRSTA_GUNSHOP);

	if(businessId == -1)
	{
		SendErrorMessage(playerid, "Morate biti u gunshopu.");
	}
	else if(businessId == -2)
	{
		SendErrorMessage(playerid, "Nemamo vise proizvoda!");
	}
	else
	{
	if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti najmanje level 3 da bi mogli kupovati oruzje!");
	if(PlayerInfo[playerid][xGunLicense] == false) return SendErrorMessage(playerid,  "Ne mozete kupiti oruzje bez dozvole.");
	if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete kupiti oruzje, imate zabranu - /disarmtime.");
	if(8000 > PlayerInfo[playerid][xNovac])return SendErrorMessage(playerid, "Nemate dovoljno novca!");
	new string[256];
	format(string,sizeof(string),""col_server"__________________________________________"col_white"\n\nDa li ste sigurni da zelite da kupite oruzje?\nProizvod:"col_server" Shotgun\n"col_white"Ammo:"col_server" 100 \n"col_white"Cena: "col_server"8000$\n"col_server"__________________________________________");
	SPD(playerid,dialog_KGUN3,DSMSG,""col_server"GUN SHOP |"col_white" Shotgun",string,"Kupi","Odustani");
	}
}
else if(IsPlayerInRangeOfPoint(playerid, 0.35, 1194.8733,-722.25,1139.25))//
{
	new businessId = GetPlayerBusinessId(playerid, VRSTA_GUNSHOP);

	if(businessId == -1)
	{
		SendErrorMessage(playerid, "Morate biti u gunshopu.");
	}
	else if(businessId == -2)
	{
		SendErrorMessage(playerid, "Nemamo vise proizvoda!");
	}
	else
	{
	if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti najmanje level 3 da bi mogli kupovati oruzje!");
	if(PlayerInfo[playerid][xGunLicense] == false) return SendErrorMessage(playerid,  "Ne mozete kupiti oruzje bez dozvole.");
	if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete kupiti oruzje, imate zabranu - /disarmtime.");
	if(15000 > PlayerInfo[playerid][xNovac])return SendErrorMessage(playerid, "Nemate dovoljno novca!");
	SendErrorMessage(playerid, "Trenutno nemamo ovo oruzje na stanju!");
	//new string[256];
	//format(string,sizeof(string),""col_server"__________________________________________"col_white"\n\nDa li ste sigurni da zelite da kupite oruzje?\nProizvod:"col_server" Sawn-Off Shotgun\n"col_white"Ammo:"col_server" 100 \n"col_white"Cena: "col_server"15000$\n"col_server"__________________________________________");
	//SPD(playerid,dialog_KGUN4,DSMSG,""col_server"GUN SHOP |"col_white" Sawn-Off Shotgun",string,"Kupi","Odustani");
	}
}
else if(IsPlayerInRangeOfPoint(playerid, 0.35, 1207.75,-736.8102,1139.25))//
{
	new businessId = GetPlayerBusinessId(playerid, VRSTA_GUNSHOP);

	if(businessId == -1)
	{
		SendErrorMessage(playerid, "Morate biti u gunshopu.");
	}
	else if(businessId == -2)
	{
		SendErrorMessage(playerid, "Nemamo vise proizvoda!");
	}
	else
	{
	if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti najmanje level 3 da bi mogli kupovati oruzje!");
	if(PlayerInfo[playerid][xGunLicense] == false) return SendErrorMessage(playerid,  "Ne mozete kupiti oruzje bez dozvole.");
	if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete kupiti oruzje, imate zabranu - /disarmtime.");
	if(15000 > PlayerInfo[playerid][xNovac])return SendErrorMessage(playerid, "Nemate dovoljno novca!");
	new string[256];
	format(string,sizeof(string),""col_server"__________________________________________"col_white"\n\nDa li ste sigurni da zelite da kupite oruzje?\nProizvod:"col_server" Combat Shotgun\n"col_white"Ammo:"col_server" 100 \n"col_white"Cena: "col_server"15000$\n"col_server"__________________________________________");
	SPD(playerid,dialog_KGUN5,DSMSG,""col_server"GUN SHOP |"col_white" Combat Shotgun",string,"Kupi","Odustani");
	}
}
else if(IsPlayerInRangeOfPoint(playerid, 0.35, 1193.8623,-722.25,1139.25))//
{
	new businessId = GetPlayerBusinessId(playerid, VRSTA_GUNSHOP);

	if(businessId == -1)
	{
		SendErrorMessage(playerid, "Morate biti u gunshopu.");
	}
	else if(businessId == -2)
	{
		SendErrorMessage(playerid, "Nemamo vise proizvoda!");
	}
	else
	{
	if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti najmanje level 3 da bi mogli kupovati oruzje!");
	if(PlayerInfo[playerid][xGunLicense] == false) return SendErrorMessage(playerid,  "Ne mozete kupiti oruzje bez dozvole.");
	if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete kupiti oruzje, imate zabranu - /disarmtime.");
	if(8000 > PlayerInfo[playerid][xNovac])return SendErrorMessage(playerid, "Nemate dovoljno novca!");
	new string[256];
	format(string,sizeof(string),""col_server"__________________________________________"col_white"\n\nDa li ste sigurni da zelite da kupite oruzje?\nProizvod:"col_server" Micro Uzi\n"col_white"Ammo:"col_server" 100 \n"col_white"Cena: "col_server"8000$\n"col_server"__________________________________________");
	SPD(playerid,dialog_KGUN6,DSMSG,""col_server"GUN SHOP |"col_white" Micro Uzi",string,"Kupi","Odustani");
	}
}
else if(IsPlayerInRangeOfPoint(playerid, 0.35, 1192.8619,-722.25,1139.25))//
{
	new businessId = GetPlayerBusinessId(playerid, VRSTA_GUNSHOP);

	if(businessId == -1)
	{
		SendErrorMessage(playerid, "Morate biti u gunshopu.");
	}
	else if(businessId == -2)
	{
		SendErrorMessage(playerid, "Nemamo vise proizvoda!");
	}
	else
	{
	if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti najmanje level 3 da bi mogli kupovati oruzje!");
	if(PlayerInfo[playerid][xGunLicense] == false) return SendErrorMessage(playerid,  "Ne mozete kupiti oruzje bez dozvole.");
	if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete kupiti oruzje, imate zabranu - /disarmtime.");
	if(10000 > PlayerInfo[playerid][xNovac])return SendErrorMessage(playerid, "Nemate dovoljno novca!");
	new string[256];
	format(string,sizeof(string),""col_server"__________________________________________"col_white"\n\nDa li ste sigurni da zelite da kupite oruzje?\nProizvod:"col_server" MP 5\n"col_white"Ammo:"col_server" 100 \n"col_white"Cena: "col_server"10000$\n"col_server"__________________________________________");
	SPD(playerid,dialog_KGUN7,DSMSG,""col_server"GUN SHOP |"col_white" MP 5",string,"Kupi","Odustani");
	}
}
else if(IsPlayerInRangeOfPoint(playerid, 0.35, 1207.5770,-734.475,1139.25))//
{
	new businessId = GetPlayerBusinessId(playerid, VRSTA_GUNSHOP);

	if(businessId == -1)
	{
		SendErrorMessage(playerid, "Morate biti u gunshopu.");
	}
	else if(businessId == -2)
	{
		SendErrorMessage(playerid, "Nemamo vise proizvoda!");
	}
	else
	{
	if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti najmanje level 3 da bi mogli kupovati oruzje!");
	if(PlayerInfo[playerid][xGunLicense] == false) return SendErrorMessage(playerid,  "Ne mozete kupiti oruzje bez dozvole.");
	if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete kupiti oruzje, imate zabranu - /disarmtime.");
	if(12000 > PlayerInfo[playerid][xNovac])return SendErrorMessage(playerid, "Nemate dovoljno novca!");
	new string[256];
	format(string,sizeof(string),""col_server"__________________________________________"col_white"\n\nDa li ste sigurni da zelite da kupite oruzje?\nProizvod:"col_server" AK 47\n"col_white"Ammo:"col_server" 100 \n"col_white"Cena: "col_server"12000$\n"col_server"__________________________________________");
	SPD(playerid,dialog_KGUN8,DSMSG,""col_server"GUN SHOP |"col_white" AK 47",string,"Kupi","Odustani");
	}
}
else if(IsPlayerInRangeOfPoint(playerid, 0.35, 1205.2898,-734.475,1139.25))//
{
	new businessId = GetPlayerBusinessId(playerid, VRSTA_GUNSHOP);

	if(businessId == -1)
	{
		SendErrorMessage(playerid, "Morate biti u gunshopu.");
	}
	else if(businessId == -2)
	{
		SendErrorMessage(playerid, "Nemamo vise proizvoda!");
	}
	else
	{
	if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti najmanje level 3 da bi mogli kupovati oruzje!");
	if(PlayerInfo[playerid][xGunLicense] == false) return SendErrorMessage(playerid,  "Ne mozete kupiti oruzje bez dozvole.");
	if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete kupiti oruzje, imate zabranu - /disarmtime.");
	if(12000 > PlayerInfo[playerid][xNovac])return SendErrorMessage(playerid, "Nemate dovoljno novca!");
	new string[256];
	format(string,sizeof(string),""col_server"__________________________________________"col_white"\n\nDa li ste sigurni da zelite da kupite oruzje?\nProizvod:"col_server" M 4\n"col_white"Ammo:"col_server" 100 \n"col_white"Cena: "col_server"12000$\n"col_server"__________________________________________");
	SPD(playerid,dialog_KGUN9,DSMSG,""col_server"GUN SHOP |"col_white" M 4",string,"Kupi","Odustani");
	}
}
else if(IsPlayerInRangeOfPoint(playerid, 0.35, 1191.6,-725.8359,1139.25))//
{
	new businessId = GetPlayerBusinessId(playerid, VRSTA_GUNSHOP);

	if(businessId == -1)
	{
		SendErrorMessage(playerid, "Morate biti u gunshopu.");
	}
	else if(businessId == -2)
	{
		SendErrorMessage(playerid, "Nemamo vise proizvoda!");
	}
	else
	{
	if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti najmanje level 3 da bi mogli kupovati oruzje!");
	if(PlayerInfo[playerid][xGunLicense] == false) return SendErrorMessage(playerid,  "Ne mozete kupiti oruzje bez dozvole.");
	if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete kupiti oruzje, imate zabranu - /disarmtime.");
	if(8000 > PlayerInfo[playerid][xNovac])return SendErrorMessage(playerid, "Nemate dovoljno novca!");
	new string[256];
	format(string,sizeof(string),""col_server"__________________________________________"col_white"\n\nDa li ste sigurni da zelite da kupite oruzje?\nProizvod:"col_server" Tec 9\n"col_white"Ammo:"col_server" 100 \n"col_white"Cena: "col_server"8000$\n"col_server"__________________________________________");
	SPD(playerid,dialog_KGUN10,DSMSG,""col_server"GUN SHOP |"col_white" Tec 9",string,"Kupi","Odustani");
	}
}
else if(IsPlayerInRangeOfPoint(playerid, 0.35, 1191.6,-723.8087,1139.25))//
{
	new businessId = GetPlayerBusinessId(playerid, VRSTA_GUNSHOP);

	if(businessId == -1)
	{
		SendErrorMessage(playerid, "Morate biti u gunshopu.");
	}
	else if(businessId == -2)
	{
		SendErrorMessage(playerid, "Nemamo vise proizvoda!");
	}
	else
	{
	if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti najmanje level 3 da bi mogli kupovati oruzje!");
	if(PlayerInfo[playerid][xGunLicense] == false) return SendErrorMessage(playerid,  "Ne mozete kupiti oruzje bez dozvole.");
	if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete kupiti oruzje, imate zabranu - /disarmtime.");
	if(12000 > PlayerInfo[playerid][xNovac])return SendErrorMessage(playerid, "Nemate dovoljno novca!");
	new string[256];
	format(string,sizeof(string),""col_server"__________________________________________"col_white"\n\nDa li ste sigurni da zelite da kupite oruzje?\nProizvod:"col_server" Country Rifle\n"col_white"Ammo:"col_server" 100 \n"col_white"Cena: "col_server"12000$\n"col_server"__________________________________________");
	SPD(playerid,dialog_KGUN11,DSMSG,""col_server"GUN SHOP |"col_white" Country Rifle",string,"Kupi","Odustani");
	}
}
else if(IsPlayerInRangeOfPoint(playerid, 0.35, 1191.6,-724.8208,1139.25))//
{
	new businessId = GetPlayerBusinessId(playerid, VRSTA_GUNSHOP);

	if(businessId == -1)
	{
		SendErrorMessage(playerid, "Morate biti u gunshopu.");
	}
	else if(businessId == -2)
	{
		SendErrorMessage(playerid, "Nemamo vise proizvoda!");
	}
	else
	{
	if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti najmanje level 3 da bi mogli kupovati oruzje!");
	if(PlayerInfo[playerid][xGunLicense] == false) return SendErrorMessage(playerid,  "Ne mozete kupiti oruzje bez dozvole.");
	if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete kupiti oruzje, imate zabranu - /disarmtime.");
	if(12000 > PlayerInfo[playerid][xNovac])return SendErrorMessage(playerid, "Nemate dovoljno novca!");
	new string[256];
	format(string,sizeof(string),""col_server"__________________________________________"col_white"\n\nDa li ste sigurni da zelite da kupite oruzje?\nProizvod:"col_server" Sniper Rifle\n"col_white"Ammo:"col_server" 100 \n"col_white"Cena: "col_server"12000$\n"col_server"__________________________________________");
	SPD(playerid,dialog_KGUN12,DSMSG,""col_server"GUN SHOP |"col_white" Sniper Rifle",string,"Kupi","Odustani");
	}
}
else if(IsPlayerInRangeOfPoint(playerid, 0.35, 1204.9657,-738.9355,1139.25))//
{
	new businessId = GetPlayerBusinessId(playerid, VRSTA_GUNSHOP);

	if(businessId == -1)
	{
		SendErrorMessage(playerid, "Morate biti u gunshopu.");
	}
	else if(businessId == -2)
	{
		SendErrorMessage(playerid, "Nemamo vise proizvoda!");
	}
	else
	{
	if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti najmanje level 3 da bi mogli kupovati oruzje!");
	if(PlayerInfo[playerid][xGunLicense] == false) return SendErrorMessage(playerid,  "Ne mozete kupiti oruzje bez dozvole.");
	if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete kupiti oruzje, imate zabranu - /disarmtime.");
	if(7000 > PlayerInfo[playerid][xNovac])return SendErrorMessage(playerid, "Nemate dovoljno novca!");
	new string[256];
	format(string,sizeof(string),""col_server"__________________________________________"col_white"\n\nDa li ste sigurni da zelite da kupite oruzje?\nProizvod:"col_server" Pancir\n"col_white"Cena: "col_server"7000$\n"col_server"__________________________________________");
	SPD(playerid,dialog_KGUN13,DSMSG,""col_server"GUN SHOP |"col_white" Pancir",string,"Kupi","Odustani");
	}
}
}
if(PRESSED(KEY_YES))
{
	new engine,lights,alarm,doors,bonnet,boot,objective,
			vehicle = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !(IsVehicleBajs(vehicle) || IsVehicleBrod(vehicle)))
	{
		GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
		if(lights == 0) {
			ac_SetVehicleParamsEx(vehicle,engine,1,alarm,doors,bonnet,boot,objective);
		} else {
			ac_SetVehicleParamsEx(vehicle,engine,0,alarm,doors,bonnet,boot,objective);
		}
	}
}
if(PRESSED(KEY_SUBMISSION)) {
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		new vehicle = GetPlayerVehicleID(playerid),
			engine,lights,alarm,doors,bonnet,boot,objective;

		if(vCanDrive[vehicle] == 0) return SendErrorMessage(playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");
		if(IsVehicleBajs(vehicle)) return SendErrorMessage(playerid, "Ne mozete upaliti bicikl.");
		if(Fuel[vehicle] == 0) return SendErrorMessage(playerid, "Vozilo nema goriva, ne mozete ga upaliti.");
		if(GetPVarInt(playerid, "StartingVehicle") == 1) return SendErrorMessage(playerid, "Motor vozila se vec pokrece...");

		if(TipVozila[vehicle] == PRIVATNO_VOZILO) {

			if(PlayerInfo[playerid][xAdmin] >= 5) {}
			else {
				if(PlayerInfo[playerid][xVoziloID][0] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][0]][vID] == vehicle) {}
				else if(PlayerInfo[playerid][xVoziloID][1] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][1]][vID] == vehicle) {}
				else if(PlayerInfo[playerid][xVoziloID][2] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][2]][vID] == vehicle) {}
				else if(PlayerInfo[playerid][xVoziloID][3] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][3]][vID] == vehicle) {}
				else if(PlayerInfo[playerid][xRezervniKljucevi] == ScriptIDVozila[vehicle]) {}
				else return SendErrorMessage(playerid, "Ovo nije vase vozilo.");
			}
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
		}
		else if(TipVozila[vehicle] == ORGANIZACIJSKO_VOZILO) {
			if(OrgaVozila[vehicle] == PlayerInfo[playerid][xClan] || PlayerInfo[playerid][xAdmin] > 0) {
				GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
				if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
				if(Maskuse[playerid] == true)
					format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
				else
					format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
				PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
				SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
				SetPVarInt(playerid, "StartingVehicle", 1);
				//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");

			}
			else {
				SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");

			}
		}
		else if(TipVozila[vehicle] == POSLOVNO_VOZILO) {

			if(PosaoVozila[vehicle] == PlayerInfo[playerid][xPosao] || PlayerInfo[playerid][xAdmin] > 0) {
				GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
				if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
				if(Maskuse[playerid] == true)
					format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
				else
					format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
				PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
				SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
				SetPVarInt(playerid, "StartingVehicle", 1);
				//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");

			}
			else {
				SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
			}
		}
		else if(TipVozila[vehicle] == GRADONACELNIKOVO_VOZILO) {
			if(PlayerInfo[playerid][xGradRank] == GRAD_DRIVER || PlayerInfo[playerid][xGradRank] == GRAD_LDRIVER || PlayerInfo[playerid][xAdmin] >= 5) {
				GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
				if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
				if(Maskuse[playerid] == true)
					format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
				else
					format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
				PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
				SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
				SetPVarInt(playerid, "StartingVehicle", 1);
				//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");

			}
			else {
				SendErrorMessage(playerid, "Nemate kljuceve od ovog vozila ili uniformu vozaca gradonacelnika!");

			}
		}
		else if(TipVozila[vehicle] == IZLOZBENO_VOZILO) {
			if(PlayerInfo[playerid][xAdmin] == 7) {
				GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
				if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
				if(Maskuse[playerid] == true)
					format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
				else
					format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
				PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
				SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
				SetPVarInt(playerid, "StartingVehicle", 1);
				//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
			}
			else {
				SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
			}
		}
		else if(TipVozila[vehicle] == ADMIN_VOZILO) {
			if(PlayerInfo[playerid][xAdmin] >= 1) {
				GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
				if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
				if(Maskuse[playerid] == true)
					format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
				else
					format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
				PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
				SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
				SetPVarInt(playerid, "StartingVehicle", 1);
				//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
				return 1;
			}
			else {
				SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
			}
		}
		else if(TipVozila[vehicle] == HELPER_VOZILO) {
			if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 1) {
				GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
				if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
				if(Maskuse[playerid] == true)
					format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
				else
					format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
				PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
				SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
				SetPVarInt(playerid, "StartingVehicle", 1);
				//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
				return 1;
			}
			else {
				SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
			}
		}
		else if(TipVozila[vehicle] == PROMOTER_VOZILO) {
			if(PlayerInfo[playerid][xAdmin] >= 5 || PlayerInfo[playerid][xPromoter] >= 1) {
				GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
				if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
				if(Maskuse[playerid] == true)
					format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
				else
					format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
				PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
				SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
				SetPVarInt(playerid, "StartingVehicle", 1);
				//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
				return 1;
			}
			else {
				SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
			}
		}
		else if(TipVozila[vehicle] == VIP_VOZILO) {
			if(PlayerInfo[playerid][xAdmin] >= 5 || PlayerInfo[playerid][xVIPLevel] >= 1 || PlayerInfo[playerid][xYouTuber] == 1) {
				GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
				if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
				if(Maskuse[playerid] == true)
					format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
				else
					format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
				PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
				SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
				SetPVarInt(playerid, "StartingVehicle", 1);
				//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
				return 1;
			}
			else {
				SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
			}
		}
		else if(TipVozila[vehicle] == POLAGANJE_VOZILO) {
			if(PlayerInfo[playerid][xAdmin] >= 5 || Polaganje[playerid] >= 1) {
				GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
				if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
				if(Maskuse[playerid] == true)
					format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
				else
					format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
				PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
				SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
				SetPVarInt(playerid, "StartingVehicle", 1);
				//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
				return 1;
			}
			else {
				SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
			}
		}
		else if(TipVozila[vehicle] == PUMPA_VOZILO) {

			if(PumpaVozilo[vehicle] == PlayerInfo[playerid][xFirmaID] || PlayerInfo[playerid][xAdmin] >= 5) {
				GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
				if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
				if(Maskuse[playerid] == true)
					format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
				else
					format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
				PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
				SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
				SetPVarInt(playerid, "StartingVehicle", 1);
				//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");

			}
			else {
				SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
			}
		}
		else {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");

		}
	}
}

if(takingselfie[playerid]) {

	if(PRESSED(KEY_ANALOG_RIGHT)) {

		GetPlayerPos(playerid,lX[playerid],lY[playerid],lZ[playerid]);
		static Float: n1X, Float: n1Y;
		if(Degree[playerid] >= 360) Degree[playerid] = 0;
		Degree[playerid] += SelfieSpeed;
		n1X = lX[playerid] + SelfieRadius * floatcos(Degree[playerid], degrees);
		n1Y = lY[playerid] + SelfieRadius * floatsin(Degree[playerid], degrees);
		SetPlayerCameraPos(playerid, n1X, n1Y, lZ[playerid] + SelfieHeight);
		SetPlayerCameraLookAt(playerid, lX[playerid], lY[playerid], lZ[playerid]+1);
		SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
	}
	if(PRESSED(KEY_ANALOG_LEFT)) {

		GetPlayerPos(playerid,lX[playerid],lY[playerid],lZ[playerid]);
		static Float: n1X, Float: n1Y;
		if(Degree[playerid] >= 360) Degree[playerid] = 0;
		Degree[playerid] -= SelfieSpeed;
		n1X = lX[playerid] + SelfieRadius * floatcos(Degree[playerid], degrees);
		n1Y = lY[playerid] + SelfieRadius * floatsin(Degree[playerid], degrees);
		SetPlayerCameraPos(playerid, n1X, n1Y, lZ[playerid] + SelfieHeight);
		SetPlayerCameraLookAt(playerid, lX[playerid], lY[playerid], lZ[playerid]+1);
		SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
	}
}

if(HOLDING(KEY_FIRE)) {
	new autoid = GetPVarInt(playerid, "ResprayvID");
	new igrac = GetPVarInt(playerid, "ResprayDozvola");
	if(igrac != -1 && GetPVarInt(playerid, "RespraySpray") == 1 && ResprayColor1[playerid] != -1 && ResprayColor2[playerid] != -1 && GetWeapon(playerid) == 41 && IsPlayerNearPlayer(10.0, playerid, igrac) && IsPlayerInAnyVehicle(igrac))
	{
		if(IsPlayerInRangeOfPoint(playerid, 15.0, 1978.9244, -1585.0405, 13.3126) && IsPlayerInRangeOfPoint(igrac, 15.0, 1978.9244, -1585.0405, 13.3126) && PlayerInfo[playerid][xMDelovi] >= 5  && strcmp(ImeIgraca(igrac), VehicleInfo[autoid][vOwner], true) == 0 && IsPlayerFacingVehicle(playerid, GetPlayerVehicleID(igrac)))
		{
			FarbanjeTimer[playerid] = SetTimerEx("ResprayTimer", 3000, 0, "ii", igrac, autoid);
		}
	}
}

if(newkeys == KEY_SECONDARY_ATTACK) {
	if(GetPlayerState(playerid) == 1) UlazIzlaz(playerid);

	if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_NONE && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_CUFFED) {
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
}
if((newkeys==KEY_SECONDARY_ATTACK) && GetPVarInt(playerid, "gSmoking") > 0)
{
	if(GetPVarInt(playerid, "gSmoking") == 1)
	{
		SetPlayerSpecialAction(playerid,0);
		SetPVarInt(playerid, "gSmoking", 0);
		format(varstring, sizeof(varstring), "** %s baca cigaretu na pod.", ImeIgraca(playerid));
		PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
	}
	else if(GetPVarInt(playerid, "gSmoking") == 2)
	{
		SetPlayerSpecialAction(playerid,0);
		SetPVarInt(playerid, "gSmoking", 0);
		format(varstring, sizeof(varstring), "** %s baca joint na pod.", ImeIgraca(playerid));
		PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
	}

}
else if((newkeys == KEY_SECONDARY_ATTACK) && InAmbu[playerid] != -1 && IsPlayerInRangeOfPoint(playerid, 1.5, 2003.2792, 2283.7454, 1011.1256))
{
	new Float:vehPos[3];
	getPosBehindVehicle(InAmbu[playerid], vehPos[0], vehPos[1], vehPos[2], 0.0);
	ac_SetPlayerPos(playerid, vehPos[0], vehPos[1], vehPos[2]);
	ac_SetPlayerInterior(playerid, 0);
	InAmbu[playerid] = -1;}
else if(PRESSED(KEY_FIRE)) {
	if(PlayerCreateEvent[playerid]) {

		if(EventCP[playerid] == 1) {
			new dFile[32], Float:Pos[4];
			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			GetPlayerFacingAngle(playerid, Pos[3]);
			format(dFile, 35, EVENT_FILE, EventID[playerid]);
			if(EventCarsCreate[playerid] == 1) {
				new
					INI:File = INI_Open(dFile);

				INI_WriteString(File, "Name", EventName[playerid]);
				INI_WriteFloat(File, "TCPX", Pos[0]);
				INI_WriteFloat(File, "TCPY", Pos[1]);
				INI_WriteFloat(File, "TCPZ", Pos[2]);
				INI_WriteFloat(File, "TCPA", Pos[3]);
				INI_WriteInt(File, "Veh", EventVehID[playerid]);
				INI_Close(File);
				format(Event[EventID[playerid]][Name], 64, "%s", EventName[playerid]);
				Event[EventID[playerid]][TCPX] = Pos[0];
				Event[EventID[playerid]][TCPY] = Pos[1];
				Event[EventID[playerid]][TCPZ] = Pos[2];
				Event[EventID[playerid]][TCPA] = Pos[3];
				Event[EventID[playerid]][VehID] = EventVehID[playerid];
				SCM(playerid, ZUTA, "Postavio si red za vozila 1.");
				EventCarsCreate[playerid]++;
			}
			else if(EventCarsCreate[playerid] == 2) {
				new
					INI:File = INI_Open(dFile);

				INI_WriteFloat(File, "TCPX2", Pos[0]);
				INI_WriteFloat(File, "TCPY2", Pos[1]);
				INI_WriteFloat(File, "TCPZ2", Pos[2]);
				INI_WriteFloat(File, "TCPA2", Pos[3]);
				INI_Close(File);
				EventCP[playerid]++;
				EventCarsCreate[playerid] = 0;
				Event[EventID[playerid]][TCPX2] = Pos[0];
				Event[EventID[playerid]][TCPY2] = Pos[1];
				Event[EventID[playerid]][TCPZ2] = Pos[2];
				Event[EventID[playerid]][TCPA2] = Pos[3];
				SCM(playerid, ZUTA, "Postavio si red za vozila 2.");
				SCM(playerid, ZUTA, "Koristi LMB(levi klik misa) za postavljanje checkpointa. Kada zavrsis ukucaj /ezavrsi.");
			}
		}
		else if(EventCP[playerid] > 1) {
			new dFile[32], Float:Pos[3], string[6];
			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			format(dFile, 35, EVENT_FILE, EventID[playerid]);

			new
				INI:File = INI_Open(dFile);

			format(string, 6, "CPX%d", EventCP[playerid]);
			INI_WriteFloat(File, string, Pos[0]);
			CheckPoint[EventID[playerid]][EventCP[playerid]][CPX] = Pos[0];

			format(string, 6, "CPY%d", EventCP[playerid]);
			INI_WriteFloat(File, string, Pos[1]);
			CheckPoint[EventID[playerid]][EventCP[playerid]][CPY] = Pos[1];

			format(string, 6, "CPZ%d",EventCP[playerid]);
			INI_WriteFloat(File, string, Pos[2]);
			CheckPoint[EventID[playerid]][EventCP[playerid]][CPZ] = Pos[2];

			INI_Close(File);
			SendClientMessageEx(playerid, ZUTA, "Postavio si Checkpoint %d.", EventCP[playerid]-1);
			EventCP[playerid]++;
		}
	}

	if(CreatingThing[playerid] == 1) {
		new Float:Pos[3];
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		if(IsCordsInOtherField(Pos[0], Pos[1]) != -1) return SendErrorMessage(playerid, "Ne mozes da postavis u drugom imanju.");

		CreatingPos[playerid][0] = Pos[0];
		CreatingPos[playerid][1] = Pos[1];
		SendInfoMessage(playerid, "Koristi "col_white"LMB"col_server" da postavis pozicije.");
		SendInfoMessage(playerid, "Sada sacuvaj poziciju desnog gornjeg ugla polja.");
		CreatingThing[playerid]++;
	}
	else if(CreatingThing[playerid] == 2) {
		new Float:Pos[4];
		new id = NextFieldID(MAX_FIELDS);

		if(id == -1) return SendErrorMessage(playerid, "Vec ima maksimalni broj imanja.");

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		GetPlayerFacingAngle(playerid, Pos[3]);

		if(IsCordsInOtherField(Pos[0], Pos[1]) != -1) return SendErrorMessage(playerid, "Ne mozes da postavis u drugom imanju.");

		CreatingPos[playerid][2] = Pos[0];
		CreatingPos[playerid][3] = Pos[1];
		CreatingThing[playerid] = -1;
		CreatingField[playerid] = id;

		ResetField(id);

		if(CreatingPos[playerid][0] > CreatingPos[playerid][2]) {
			fieldInfo[id][fieldMaxX] = CreatingPos[playerid][0];
			fieldInfo[id][fieldMinX] = CreatingPos[playerid][2];
		}
		else if(CreatingPos[playerid][2] > CreatingPos[playerid][0]) {
			fieldInfo[id][fieldMaxX] = CreatingPos[playerid][2];
			fieldInfo[id][fieldMinX] = CreatingPos[playerid][0];
		}

		if(CreatingPos[playerid][1] > CreatingPos[playerid][3]) {
			fieldInfo[id][fieldMaxY] = CreatingPos[playerid][1];
			fieldInfo[id][fieldMinY] = CreatingPos[playerid][3];
		}
		else if(CreatingPos[playerid][3] > CreatingPos[playerid][1]) {
			fieldInfo[id][fieldMaxY] = CreatingPos[playerid][3];
			fieldInfo[id][fieldMinY] = CreatingPos[playerid][1];
		}

		fieldInfo[id][fieldObject] = CreateDynamicObject(19470, Pos[0]+2, Pos[1], Pos[2]+ 0.6, 0.0, 0.0, Pos[3] , 0, 0, -1, 200.0);
		Streamer_Update(playerid);
		EditDynamicObject(playerid, fieldInfo[id][fieldObject]);

		fieldInfo[id][fieldRectAngle] = CreateDynamicRectangle(fieldInfo[id][fieldMinX], fieldInfo[id][fieldMinY], fieldInfo[id][fieldMaxX], fieldInfo[id][fieldMaxY], -1, -1, -1);
		Field_Save(id);

		SendInfoMessage(playerid, "Uspesno si sacuvao pozicije, sada sacuvaj poziciju objekta koji oznacava da je imanje na prodaju.");
	}


	if(CreatingGZone[playerid] == 1) {

		new Float:Pos[3];
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		if(IsCordsInOtherGZone(Pos[0], Pos[1]) != -1) return SendErrorMessage(playerid, "Ne mozes da postavis u drugoj gang zoni.");

		CreatingPos[playerid][0] = Pos[0];
		CreatingPos[playerid][1] = Pos[1];
		SendInfoMessage(playerid, "Koristi "col_white"LMB"col_server" da postavis pozicije.");
		SendInfoMessage(playerid, "Sada sacuvaj poziciju desnog gornjeg ugla polja.");
		CreatingGZone[playerid]++;
	}
	else if(CreatingGZone[playerid] == 2) {

		new Float:Pos[4];
		new id = CreatingGZoneID[playerid];

		if(id == -1) return SendErrorMessage(playerid, "Vec ima maksimalni broj gang zona.");

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		GetPlayerFacingAngle(playerid, Pos[3]);

		if(IsCordsInOtherGZone(Pos[0], Pos[1]) != -1) return SendErrorMessage(playerid, "Ne mozes da postavis u drugoj gang zoni.");

		CreatingPos[playerid][2] = Pos[0];
		CreatingPos[playerid][3] = Pos[1];
		CreatingGZone[playerid]++;

		GZone_Reset(id);

		if(CreatingPos[playerid][0] > CreatingPos[playerid][2]) {
			gZoneInfo[id][gZoneMaxX] = CreatingPos[playerid][0];
			gZoneInfo[id][gZoneMinX] = CreatingPos[playerid][2];
		}
		else if(CreatingPos[playerid][2] > CreatingPos[playerid][0]) {
			gZoneInfo[id][gZoneMaxX] = CreatingPos[playerid][2];
			gZoneInfo[id][gZoneMinX] = CreatingPos[playerid][0];
		}

		if(CreatingPos[playerid][1] > CreatingPos[playerid][3]) {
			gZoneInfo[id][gZoneMaxY] = CreatingPos[playerid][1];
			gZoneInfo[id][gZoneMinY] = CreatingPos[playerid][3];
		}
		else if(CreatingPos[playerid][3] > CreatingPos[playerid][1]) {
			gZoneInfo[id][gZoneMaxY] = CreatingPos[playerid][3];
			gZoneInfo[id][gZoneMinY] = CreatingPos[playerid][1];
		}

		gZoneInfo[id][gZoneID] = GangZoneCreate(gZoneInfo[id][gZoneMinX], gZoneInfo[id][gZoneMinY], gZoneInfo[id][gZoneMaxX], gZoneInfo[id][gZoneMaxY]);
		GZone_Save(id);
		gZoneInfo[id][gZoneRectAngle] = CreateDynamicRectangle(gZoneInfo[id][gZoneMinX], gZoneInfo[id][gZoneMinY], gZoneInfo[id][gZoneMaxX], gZoneInfo[id][gZoneMaxY], -1, -1, -1);

		SendInfoMessage(playerid, "Koristi "col_white"LMB"col_server" da postavis pozicije.");
		SendInfoMessage(playerid, "Sada sacuvaj poziciju spray objekta.");
	}
	else if(CreatingGZone[playerid] == 3) {
	
		new id = CreatingGZoneID[playerid];
		new Float:Pos[4];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		GetPlayerFacingAngle(playerid, Pos[3]);
		
		gZoneInfo[id][gZoneObjPos][0] = Pos[0];
		gZoneInfo[id][gZoneObjPos][1] = Pos[1];
		gZoneInfo[id][gZoneObjPos][2] = Pos[2];
		gZoneInfo[id][gZoneObjPos][3] = 0;
		gZoneInfo[id][gZoneObjPos][4] = 0;
		gZoneInfo[id][gZoneObjPos][5] = 0;
		gZoneInfo[id][gZoneObjID] = CreateDynamicObject(18663, Pos[0]+2, Pos[1], Pos[2]+0.6, 0.0, 0.0, 0.0);
		Streamer_Update(playerid);
		EditDynamicObject(playerid, gZoneInfo[id][gZoneObjID]); EditSprayGang[playerid] = id;
	}
	//SAFE ZONE
	if(CreatingSZone[playerid] == 1) {

		new Float:Pos[3];
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		if(IsCordsInOtherSZone(Pos[0], Pos[1]) != -1) return SendErrorMessage(playerid, "Ne mozes da postavis u drugoj safe zoni.");

		CreatingPos[playerid][0] = Pos[0];
		CreatingPos[playerid][1] = Pos[1];
		SendInfoMessage(playerid, "Koristi "col_white"LMB"col_server" da postavis pozicije.");
		SendInfoMessage(playerid, "Sada sacuvaj poziciju desnog gornjeg ugla polja.");
		CreatingSZone[playerid]++;
	}
	else if(CreatingSZone[playerid] == 2) {

		new Float:Pos[4], stringic[24];
		new id = CreatingSZoneID[playerid];

		if(id == -1) return SendErrorMessage(playerid, "Vec ima maksimalni broj safe zona.");

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		GetPlayerFacingAngle(playerid, Pos[3]);

		if(IsCordsInOtherSZone(Pos[0], Pos[1]) != -1) return SendErrorMessage(playerid, "Ne mozes da postavis u drugoj safe zoni.");

		CreatingPos[playerid][2] = Pos[0];
		CreatingPos[playerid][3] = Pos[1];
		CreatingSZone[playerid]++;

		SZone_Reset(id);

		if(CreatingPos[playerid][0] > CreatingPos[playerid][2]) {
			gSafeZoneInfo[id][gSafeZoneMaxX] = CreatingPos[playerid][0];
			gSafeZoneInfo[id][gSafeZoneMinX] = CreatingPos[playerid][2];
		}
		else if(CreatingPos[playerid][2] > CreatingPos[playerid][0]) {
			gSafeZoneInfo[id][gSafeZoneMaxX] = CreatingPos[playerid][2];
			gSafeZoneInfo[id][gSafeZoneMinX] = CreatingPos[playerid][0];
		}

		if(CreatingPos[playerid][1] > CreatingPos[playerid][3]) {
			gSafeZoneInfo[id][gSafeZoneMaxY] = CreatingPos[playerid][1];
			gSafeZoneInfo[id][gSafeZoneMinY] = CreatingPos[playerid][3];
		}
		else if(CreatingPos[playerid][3] > CreatingPos[playerid][1]) {
			gSafeZoneInfo[id][gSafeZoneMaxY] = CreatingPos[playerid][3];
			gSafeZoneInfo[id][gSafeZoneMinY] = CreatingPos[playerid][1];
		}

		gSafeZoneInfo[id][gSafeZoneID] = GangZoneCreate(gSafeZoneInfo[id][gSafeZoneMinX], gSafeZoneInfo[id][gSafeZoneMinY], gSafeZoneInfo[id][gSafeZoneMaxX], gSafeZoneInfo[id][gSafeZoneMaxY]);

		gSafeZoneInfo[id][gSafeZoneRectAngle] = CreateDynamicRectangle(gSafeZoneInfo[id][gSafeZoneMinX], gSafeZoneInfo[id][gSafeZoneMinY], gSafeZoneInfo[id][gSafeZoneMaxX], gSafeZoneInfo[id][gSafeZoneMaxY], -1, -1, -1);
		format(stringic, sizeof(stringic), "0x00FF8088", gSafeZoneInfo[id][gSafeZoneColor]);
		GangZoneShowForAll(gSafeZoneInfo[id][gSafeZoneID], HexToInt(stringic));

		SendInfoMessage(playerid, "Koristi "col_white"LMB"col_server" da postavis pozicije.");
		GSafeZone_Save(id);
		CreatingSZone[playerid] = -1;
		CreatingSZoneID[playerid] = -1;

	}

	if(ListaBurg[playerid] > 0) {
		if(PlayerInfo[playerid][xNovac] < 7700) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
		if(ListaBurg[playerid] == 1)
		{
			SetPlayerCameraPos(playerid, 377.4937, -67.9324, 1002.1277);
			SetPlayerCameraLookAt(playerid, 377.5477, -66.9359, 1001.6640); //2
			ListaBurg[playerid] = 2;
			PlayerTextDrawSetString(playerid, CKilometri[playerid][1], "~w~Big Mac");
			PlayerTextDrawSetString(playerid, CKilometri[playerid][2], "~w~Cena: ~b~7700$");
		}
		else if(ListaBurg[playerid] == 2)
		{
			SetPlayerCameraPos(playerid, 378.1165, -67.9661, 1002.1277);
			SetPlayerCameraLookAt(playerid, 378.1705, -66.9697, 1001.6640); // 3
			ListaBurg[playerid] = 3;
			PlayerTextDrawSetString(playerid, CKilometri[playerid][1], "~w~Cheeseburger");
			PlayerTextDrawSetString(playerid, CKilometri[playerid][2], "~w~Cena: ~b~6600$");
		}
		else if(ListaBurg[playerid] == 3)
		{
			SetPlayerCameraPos(playerid, 378.7393, -67.9999, 1002.1277);
			SetPlayerCameraLookAt(playerid, 378.7933, -67.0034, 1001.6640); // 4
			ListaBurg[playerid] = 4;
			PlayerTextDrawSetString(playerid, CKilometri[playerid][1], "~w~Chicken Burger");
			PlayerTextDrawSetString(playerid, CKilometri[playerid][2], "~w~Cena: ~b~6600$");
		}
		else if(ListaBurg[playerid] == 4)
		{
			SetPlayerCameraPos(playerid, 379.3621, -68.0336, 1002.1277);
			SetPlayerCameraLookAt(playerid, 379.4161, -67.0371, 1001.6640); // 5
			ListaBurg[playerid] = 5;
			PlayerTextDrawSetString(playerid, CKilometri[playerid][1], "~w~Country Burger");
			PlayerTextDrawSetString(playerid, CKilometri[playerid][2], "~w~Cena: ~b~8250$");
		}
		else if(ListaBurg[playerid] == 5)
		{
			SetPlayerCameraPos(playerid, 376.8709, -67.8987, 1002.1277);
			SetPlayerCameraLookAt(playerid, 376.9249, -66.9022, 1001.6640); // 1
			ListaBurg[playerid] = 1;
			PlayerTextDrawSetString(playerid, CKilometri[playerid][1], "~w~Hamburger");
			PlayerTextDrawSetString(playerid, CKilometri[playerid][2], "~w~Cena: ~b~7150$");
		}
	}

	else if(PlayerInfo[playerid][xPosao] == POSAO_FARMER) {

		if(farmerInfo[playerid][fiCowNumber] == 0) {
			new plantid = getPlayerNearFarmerPlant(playerid);
			new vehicleid = getPlayerNearestTractor(playerid);
			if(vehicleid != INVALID_VEHICLE_ID && isATractor(vehicleid) && farmerInfo[playerid][fifarmerSeeds] > 0 && !IsPlayerInAnyVehicle(playerid)) {
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);

				if(farmerVehicles[vehicleid][fvSeeds] == 10) return SendErrorMessage(playerid, "Vec ima 10 semenki u traktoru!");
				farmerVehicles[vehicleid][fvSeeds] = 10;
				farmerInfo[playerid][fifarmerSeeds] = 0;

				SendJobMessage(playerid, "Ubacio si semenke u traktor, sad ih moras posejati.");
				SendJobMessage(playerid, "Poljana za sejanje vam je oznacena na mapi.");

				Fusion_SetPlayerCheckpoint(playerid, -1209.3190, -1064.4297, 127.9703, 5.0);
				CheckpointStatus[playerid] = 15;
			}
			else if(plantid > -1 && !farmerInfo[playerid][fifarmerPickupedBale] && !IsPlayerInAnyVehicle(playerid)) {

					if(plantInfo[plantid][farmPlayerID] == playerid && plantInfo[plantid][farmWheatCreated]) {

						ApplyAnimation(playerid, "BOMBER", "BOM_PLANT", 4.0, 0, 0, 0, 0, 0);
						if(IsValidDynamic3DTextLabel(plantInfo[plantid][farm3D]))
							DestroyDynamic3DTextLabel(plantInfo[plantid][farm3D]);

						if(IsValidDynamicObject(plantInfo[plantid][farmObject]))
							DestroyDynamicObject(plantInfo[plantid][farmObject]);

						ResetFarmPlant(plantid);

						SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 2901, 1, 0.080628, -0.363714, -0.035524, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
						farmerInfo[playerid][fifarmerPickupedBale] = true;
					}
					else return SendJobMessage(playerid, "Prvo moras sa kombajnom pozeti useve, a onda ih tek mozes sakupiti.");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.0, -1100.0110, -1142.8070, 129.2188)) {

				if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND) && farmerInfo[playerid][fifarmerPickupedBale] && !IsPlayerInAnyVehicle(playerid)) {

					if(farmerInfo[playerid][fifarmerWheatCreated] == MAX_FARMERS_PLANTS_PLANTED) {

						RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);

						farmerInfo[playerid][fifarmerPickupedBales]++;
						farmerInfo[playerid][fifarmerPickupedBale] = false;

						new bonus = random(100);
						DajIgracuNovac(playerid, 2950);
						SendJobMessage(playerid, "Doneli ste obrani usev i zaradili 2950$.");
						SavePlayer(playerid);
						if(ServerInfo[HappyJob] == 2)
						{
							SendJobMessage(playerid, "Dobili ste dodatih 3000$ jer je ukljucena dupla plata na ovom poslu.");
							DajIgracuNovac(playerid, 3000);
							BusinessJobMoney(POSAO_FARMER, 1000);
						}
						BusinessJobMoney(POSAO_FARMER, ((PLATA_FARMER2+bonus)/10));

						if(farmerInfo[playerid][fifarmerPickupedBales] == farmerInfo[playerid][fifarmerPlantsPlanted]) {
							farmerInfo[playerid][fifarmerPickupedBales] = 0;
							farmerInfo[playerid][fifarmerPlantsPlanted] = -1;
							farmerInfo[playerid][fifarmerWheatCreated] = -1;
							Fusion_DisablePlayerCheckpoint(playerid);
							CheckpointStatus[playerid] = 0;
							SendJobMessage(playerid, "Sakupio si sve useve, ako zelis sakupiti jos useva, prvo ih moras posejati.");
						}
					}
					else return SendErrorMessage(playerid, "Moras prvo da poznjes sve useve pa tek onda da sakupis.");
				}
				else return SendErrorMessage(playerid, "Nemas usev u ruci ili si u vozilu!");
			}
		}
		else {
			new vehicleid = getPlayerNearestTractor(playerid);
			if(farmerInfo[playerid][fiHaveBucket]) {
				if(vehicleid != INVALID_VEHICLE_ID) {
					if(farmerInfo[playerid][fiCowNumber] == 14) {
						if(GetVehicleModel(vehicleid) == 478) {
							if(!IsPlayerInAnyVehicle(playerid)) {

								new Float:vehPos[3];
								getPosBehindVehicle(vehicleid, vehPos[0], vehPos[1], vehPos[2], 0.0);
								if(farmerVehicles[vehicleid][fvMilk] == true) return SendErrorMessage(playerid, "U ovom kamionetu vec ima kante mleka.");
								if(IsPlayerInRangeOfPoint(playerid, 1.5, vehPos[0], vehPos[1], vehPos[2])) {

									RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
									farmerInfo[playerid][fiHaveBucket] = false;
									farmerInfo[playerid][fiCowNumber] = 15;

									SendJobMessage(playerid, "Sada udjite u kamionet i odvezite mleko na prikazani marker.");
									Fusion_SetPlayerCheckpoint(playerid, 172.7875, -23.4740, 1.5765, 5.0);
									CheckpointStatus[playerid] = 17;
									farmerVehicles[vehicleid][fvMilk] = true;
									farmerVehicles[vehicleid][fvMilkpID] = playerid;
									farmerInfo[playerid][fiVehicleBucket] = vehicleid;
									ApplyAnimation(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0);
									StaroVreme[playerid] = gettime();
									NovoVreme[playerid] = 110;
								} else return SendErrorMessage(playerid, "Morate biti iza kamioneta.");
							}
						}
					}
				}
				else if(IsPlayerInRangeOfPoint(playerid, 2.0, 156.6077, -22.2604, 1.5781) && farmerInfo[playerid][fiCowNumber] == 16 && farmerInfo[playerid][fiHaveBucket] && !IsPlayerInAnyVehicle(playerid)) {

					RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
					farmerInfo[playerid][fiHaveBucket] = false;
					farmerInfo[playerid][fiCowNumber] = 17;
					SendJobMessage(playerid, "Ostavili ste kantu sada se vratite na farmu autom kojim ste dosli na farmu.");
					Fusion_SetPlayerCheckpoint(playerid, -1047.9996, -1230.6726, 128.6476, 5.0);
					CheckpointStatus[playerid] = 26;
					StaroVreme[playerid] = gettime();
					NovoVreme[playerid] = 120;
				}
			}
			else if(!farmerInfo[playerid][fiHaveBucket]) {

				if(vehicleid != INVALID_VEHICLE_ID) {
					if(farmerInfo[playerid][fiCowNumber] == 15) {
						if(farmerVehicles[vehicleid][fvMilk] == true) {
							if(GetVehicleModel(vehicleid) == 478) {
								if(!IsPlayerInAnyVehicle(playerid)) {

									new Float:vehPos[3];
									getPosBehindVehicle(vehicleid, vehPos[0], vehPos[1], vehPos[2], 0.0);
									if(farmerVehicles[vehicleid][fvMilkpID] != playerid) return SendErrorMessage(playerid, "Ovde nije tvoja kanta.");
									if(IsPlayerInRangeOfPoint(playerid, 1.5, vehPos[0], vehPos[1], vehPos[2])) {

										SendJobMessage(playerid, "Izvadili ste kantu sa mlekom iz kamioneta, dostavi je sada u mlekaru.");
										farmerVehicles[vehicleid][fvMilk] = false;
										farmerVehicles[vehicleid][fvMilkpID] = -1;
										farmerInfo[playerid][fiVehicleBucket] = -1;
										farmerInfo[playerid][fiCowNumber] = 16;
										farmerInfo[playerid][fiHaveBucket] = true;
										Fusion_DisablePlayerCheckpoint(playerid);
										CheckpointStatus[playerid] = 0;
										SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 2613, 1, -0.200000, 1.000000, -0.699999, -9.000000, 90.000000, -21.000000);
										ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1);
									} else return SendErrorMessage(playerid, "Morate biti iza kamioneta.");
								}
							}
						}
					}
				}
			}
		}
	}
	else if(PlayerInfo[playerid][xPosao] == POSAO_PNAMESTAJA) {

		if(NamestajLevel[playerid] == 5) {

			if(Rezanje[playerid] < 100) {

				if(KoristioRezanje[playerid] == 1) return SendErrorMessage(playerid, "Vec ste u fazi rezanja, sacekajte par sekundi!");
				Rezanje[playerid] += 10;
				TogglePlayerControllable(playerid, false);
				KoristioRezanje[playerid] = 1;
				ApplyAnimation(playerid, "KISSING", "Playa_Kiss_01", 4.1, 1, 0, 0, 1, 0);
				NamestajTajmer[playerid] = SetTimerEx("TimerRezanja",3000, false, "i", playerid);
				SendJobMessage(playerid, "Rezete dasku za namestaj, izrezano: "col_job"%d%%!", Rezanje[playerid]);

			}
			if(Rezanje[playerid] == 100) {

				SendJobMessage(playerid, "Uspesno ste izrezali dasku i napravili deo namestaja!");
				SendJobMessage(playerid, "Deo odnesite napolje u skladiste!");
				DestroyPlayerObject(playerid, Objekat[playerid]);
				TogglePlayerControllable(playerid, true);
				NamestajLevel[playerid] = 6;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				Fusion_SetPlayerCheckpoint(playerid, 2197.8872,-2267.6538,13.5547, 4.0);
				CheckpointStatus[playerid] = 40;
				new objekat = random(3);
				switch(objekat) {

					case 0: {
						SetPlayerAttachedObject(playerid, OBJECT_SLOT_BADGE, 2321, 1, 0.00, 0.67, 0.68, 0.0, 89.0, 4.0, 1.00, 1.00, 1.00);
					}
					case 1: {
						SetPlayerAttachedObject(playerid, OBJECT_SLOT_BADGE, 2235, 1, 0.00, 0.03, 0.48, 0.0, 88.0, 0.0, 1.00, 1.00, 1.00);
					}
					case 2: {
						SetPlayerAttachedObject(playerid, OBJECT_SLOT_BADGE, 2234, 1, 0.00, 0.20, 0.47 ,0.0 ,87.0, 0.0, 1.00, 1.00, 1.00);
					}
				}
			}
		}

	}
}
else if(PRESSED(KEY_NO)) {

	if(PlayerInfo[playerid][xPosao] == POSAO_PNAMESTAJA) {

		if(NamestajLevel[playerid] == 3) {

			if(IsPlayerInRangeOfPoint(playerid, 3, 2144.5337, -2267.7898, 13.2944)) {

				if(EndWood[playerid] == 1) return SendErrorMessage(playerid, "Drvo se jos nije preradilo!");

				SendJobMessage(playerid, "Skinuli ste preradjeno drvo sa trake, sada ga stavite na zantatski stol!");
				DestroyPlayerObject(playerid, Objekat[playerid]);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				SetPlayerAttachedObject(playerid, OBJECT_SLOT_BADGE, 2410, 1, 0.00, 0.46, -0.00, 0.0, 91.0, -1.0, 1.07, 0.88, 1.00);
				NamestajLevel[playerid] = 4;
				Fusion_SetPlayerCheckpoint(playerid, 2125.7715,-2278.3010,14.7825, 4.0);
				CheckpointStatus[playerid] = 40;
			}
			else return SendErrorMessage(playerid, "Ne nalazite se blizu masine!");
		}
	}
	else if(PlayerInfo[playerid][xPosao] == POSAO_PEPSI) {

		if(DeliverLevel[playerid] == 2) {

			new Float:vehPos[3];
			getPosBehindVehicle(DeliverCar[playerid], vehPos[0], vehPos[1], vehPos[2], 0.0);
			if(IsPlayerInRangeOfPoint(playerid, 2.0, vehPos[0], vehPos[1], vehPos[2])) {

				if(StateBox[DeliverCar[playerid]] > 0) {
					if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1 , "Morate da izadjete iz vozila!");
					if(StateBox[DeliverCar[playerid]] == 0) return SCM(playerid, -1 ,"U kamionu nema vise kutija!");
					if(CarriesBox[playerid] == 1) return SCM(playerid, -1 , "Vi vec drzite kutiju u rukama, ostavite je u trafiku!");
					StateBox[DeliverCar[playerid]] --;
					CarriesBox[playerid] = 1;
					SendJobMessage(playerid, "Izvadili ste kutiju iz kamiona, kutija u kamionu: %d/5.", StateBox[DeliverCar[playerid]]);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
					SetPlayerAttachedObject(playerid, OBJECT_SLOT_BADGE, 1221, 1, 0.494823, 0.720993, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				}
			}
		}
	}

	if(CreateParkingID[playerid] != -1)	{

		if(CreatingParkingLevel[playerid] == 6) {

			new parkID = CreateParkingID[playerid];

			SendInfoMessage(playerid, "Zavrsili ste kreiranje parkinga.");

			Parking_Save(parkID);

			CreatingParkingLevel[playerid] = 0;
			CreateParkingID[playerid] = -1;

		}
	}

}
else if(PRESSED(KEY_YES)) {
	if(PlayerInfo[playerid][xPosao] == POSAO_FARMER) {

		new vehicleid = GetPlayerVehicleID(playerid);

		if(vehicleid != INVALID_VEHICLE_ID && isATractor(vehicleid) && IsPlayerInDynamicArea(playerid, farmerField)) {

			if(farmerVehicles[vehicleid][fvSeeds] > 0) {

				new
					Float:playerPos[3],
					plantMessage[138];

				GetPlayerPos(playerid, playerPos[0], playerPos[1], playerPos[2]);
				if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate opremu!");
				if(!isPlayerNearFarmerPlant(playerid)) {

					new plantid = GetFreeFarmID();

					if(farmerInfo[playerid][fifarmerPlantsPlanted] == MAX_FARMERS_PLANTS_PLANTED) return SendErrorMessage(playerid, "Vec si posejao 10 semenki!");
					plantInfo[plantid][farmObject] = CreateDynamicObject(872, playerPos[0], playerPos[1], (playerPos[2] - 1), 0.0, 0.0, 0.0);
					plantInfo[plantid][farmPlantCreated] = true;
					plantInfo[plantid][farmWheatCreated] = false;
					plantInfo[plantid][farmPlayerID] = playerid;
					farmerVehicles[vehicleid][fvSeeds]--;

					format(plantMessage, sizeof(plantMessage), "[FARMERSKI USEV]\n"col_white"Posejao ga je {36AB00]%s\n"col_white"Da ga sakupis pritisni tipku {36AB00]LMB", ImeIgraca(playerid));
					plantInfo[plantid][farm3D] = CreateDynamic3DTextLabel(plantMessage, 0x0066BAFF, playerPos[0], playerPos[1], playerPos[2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1, 20.0);
					farmerInfo[playerid][fifarmerPlantsPlanted]++;
					if(farmerInfo[playerid][fifarmerPlantsPlanted] == MAX_FARMERS_PLANTS_PLANTED) {
						farmerInfo[playerid][fifarmerWheatCreated] = 0;
						ac_SetVehicleToRespawn(vehicleid);
						SendJobMessage(playerid, "Posejao si sve semenke iz traktora, sada sedi u kombajn i poznji sve.");
					}
				}
			}
			else return SendErrorMessage(playerid, "Nemas vise semenki u traktoru.");
		}
	}
	else if(PlayerInfo[playerid][xPosao] == POSAO_PNAMESTAJA) {

		if(NamestajLevel[playerid] == 2) {

			if(IsPlayerInRangeOfPoint(playerid, 3.0, 2149.6013, -2273.1235, 13.3047)) {

				RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BADGE); SetPlayerSpecialAction(playerid, 0);
				Objekat[playerid] = CreatePlayerObject(playerid, 19793, 2150.81616, -2271.90015, 13.31280,   0.00000, 0.00000, -45.00000);
				MovePlayerObject(playerid, Objekat[playerid], 2148.72168, -2270.14478, 13.23200, 1.0);
				NamestajLevel[playerid] = 3; EndWood[playerid] = 1;
				SendJobMessage(playerid, "Ubacili ste drva za preradu u masinu, sacekajte da se drvo preradi!");
				SendJobMessage(playerid, "Preradjeno drvo ce izaci na drugu stranu masine.");
				SendJobMessage(playerid, "Sa trake ga uzimate pritiskom na tipku "col_job"N.");
				NamestajTajmer[playerid] = SetTimerEx("Prerada",5000, false, "i", playerid);
				NamestajTajmer2[playerid] = SetTimerEx("Prerada2",10900, false, "i", playerid);
			}
			else return SendErrorMessage(playerid, "Ne nalazite se blizu masine!");
		}

	}
	else if(PlayerInfo[playerid][xPosao] == POSAO_PEPSI) {

		if(DeliverLevel[playerid] == 1) {

			new Float:vehPos[3];
			getPosBehindVehicle(DeliverCar[playerid], vehPos[0], vehPos[1], vehPos[2], 0.0);
			if(IsPlayerInRangeOfPoint(playerid, 2.0, vehPos[0], vehPos[1], vehPos[2])) {

				if(StateBox[DeliverCar[playerid]] < 5) {

					if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate da izadjete iz vozila!");
					if(StateBox[DeliverCar[playerid]] == 5) return SendErrorMessage(playerid, "U kamionu ima maksimalan broj kutija!");
					if(CarriesBox[playerid] == 0) return SendErrorMessage(playerid, "Vi nemate kutiju u rukama, prvo je uzmite iz skladista!");
					StateBox[DeliverCar[playerid]] ++;
					CarriesBox[playerid] = 0;
					RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BADGE);
					SendJobMessage(playerid, "Ubacili ste kutiju sa pepsijem u kamion, kutija u kamionu: %d/5.", StateBox[DeliverCar[playerid]]);
				}

				if(StateBox[DeliverCar[playerid]] == 5) {

					DeliverLevel[playerid] = 2;
					SendJobMessage(playerid, "Uspesno ste utovarili kutije sa pepsijem, sada idite do trafike koja je oznacena crveno na mapi!");
					SendInfoMessage(playerid, "Kada stignete do CPa, izadjite iz vozila i izvadite kutiju tipkom ' N '!");
					new broj = random(4);
					Fusion_SetPlayerCheckpoint(playerid, TrafikaPos[broj][0], TrafikaPos[broj][1], TrafikaPos[broj][2], 4.0);
					TrafikaTrenutna[playerid] = broj;
					TrafikaPrva[playerid] = broj;
					CheckpointStatus[playerid] = 5;

					StaroVreme[playerid] = gettime();
					NovoVreme[playerid] = 240;
				}
			}
			else return SendErrorMessage(playerid, "Ne nalazite se iza kamiona!");
			return 1;
		}
		else if(DeliverLevel[playerid] == 2) {

			if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate da izadjete iz vozila!");
			if(StateBox[DeliverCar[playerid]] == 5) return SendErrorMessage(playerid, "U kamionu ima maksimalan broj kutija!");
			if(CarriesBox[playerid] == 0) return SendErrorMessage(playerid, "Vi nemate kutiju u rukama!");
			StateBox[DeliverCar[playerid]] ++;
			CarriesBox[playerid] = 0;
			RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BADGE);
			SendJobMessage(playerid, "Ubacili ste kutiju sa pepsijem u kamion, kutija u kamionu: %d/5.", StateBox[DeliverCar[playerid]]);

		}
	}

	if(CreateParkingID[playerid] != -1)	{

		if(CreatingParkingLevel[playerid] == 2) {

			new parkID = CreateParkingID[playerid], Float:Pos[3];
			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

			ParkingInfo[parkID][parkPickup_1_Pos][0] = Pos[0];
			ParkingInfo[parkID][parkPickup_1_Pos][1] = Pos[1];
			ParkingInfo[parkID][parkPickup_1_Pos][2] = Pos[2];

			CreatingParkingLevel[playerid] = 3;

			new string[128];
			format(string, sizeof(string), "{FFFFFF]- Parking Aparat ("col_server"%d"col_white") -\n{FFFFFF]Da kupite parking listic kucajte\n({0F87FF]/kupiparkinglistic {FFFFFF])", parkID);
			ParkingInfo[parkID][park3d_1] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, ParkingInfo[parkID][parkPickup_1_Pos][0], ParkingInfo[parkID][parkPickup_1_Pos][1], ParkingInfo[parkID][parkPickup_1_Pos][2], 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
			ParkingInfo[parkID][parkPickup_1] = acc_CreateDynamicPickup(1239, 1, ParkingInfo[parkID][parkPickup_1_Pos][0], ParkingInfo[parkID][parkPickup_1_Pos][1], ParkingInfo[parkID][parkPickup_1_Pos][2], 0, 0);

			Parking_Save(parkID);

			SendInfoMessage(playerid, "Dodali ste uspesno poziciju pickupa za kupovinu listica.");
			SendInfoMessage(playerid, "Sada napravite zonu parkinga, krenite prvo sa kordinata leve donje coske.");
			SendInfoMessage(playerid, "Pozicije cuvate koristeci tipk 'Y'.");
		}
		else if(CreatingParkingLevel[playerid] == 3) {

			new Float:Pos[3];
			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

			if(IsCordsInOtherParkingZone(Pos[0], Pos[1]) != -1) return SendErrorMessage(playerid, "Ne mozes da postavis u drugoj parking zoni.");

			CreatingPos[playerid][0] = Pos[0];
			CreatingPos[playerid][1] = Pos[1];

			CreatingParkingLevel[playerid] = 4;

			SendInfoMessage(playerid, "Sada sacuvajte kordinate desne gornje coske.");
			SendInfoMessage(playerid, "Pozicije cuvate koristeci tipk 'Y'.");
		}
		else if(CreatingParkingLevel[playerid] == 4) {

			new parkID = CreateParkingID[playerid], Float:Pos[3];

			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

			if(IsCordsInOtherParkingZone(Pos[0], Pos[1]) != -1) return SendErrorMessage(playerid, "Ne mozes da postavis u drugoj parking zoni.");

			CreatingPos[playerid][2] = Pos[0];
			CreatingPos[playerid][3] = Pos[1];

			if(CreatingPos[playerid][0] > CreatingPos[playerid][2]) {
				ParkingInfo[parkID][parkMaxX] = CreatingPos[playerid][0];
				ParkingInfo[parkID][parkMinX] = CreatingPos[playerid][2];
			}
			else if(CreatingPos[playerid][2] > CreatingPos[playerid][0]) {
				ParkingInfo[parkID][parkMaxX] = CreatingPos[playerid][2];
				ParkingInfo[parkID][parkMinX] = CreatingPos[playerid][0];
			}

			if(CreatingPos[playerid][1] > CreatingPos[playerid][3]) {
				ParkingInfo[parkID][parkMaxY] = CreatingPos[playerid][1];
				ParkingInfo[parkID][parkMinY] = CreatingPos[playerid][3];
			}
			else if(CreatingPos[playerid][3] > CreatingPos[playerid][1]) {
				ParkingInfo[parkID][parkMaxY] = CreatingPos[playerid][3];
				ParkingInfo[parkID][parkMinY] = CreatingPos[playerid][1];
			}

			ParkingInfo[parkID][parkRectAngle] = CreateDynamicRectangle(ParkingInfo[parkID][parkMinX], ParkingInfo[parkID][parkMinY], ParkingInfo[parkID][parkMaxX], ParkingInfo[parkID][parkMaxY], -1, -1, -1);
			Parking_Save(parkID);

			CreatingParkingLevel[playerid] = 5;

			SendInfoMessage(playerid, "Uspesno si sacuvao pozicije, sada sacuvaj poziciju za pickup za oznacavanje parking zone.");

		}
		else if(CreatingParkingLevel[playerid] == 5) {

			new parkID = CreateParkingID[playerid], Float:Pos[3];

			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

			new id = IsCordsInParkingZone(parkID, Pos[0], Pos[1]);

			if(id != parkID) return SendErrorMessage(playerid, "Ne moze da ide izvan parkinga.");

			ParkingInfo[parkID][parkPickup_2_Pos][0] = Pos[0];
			ParkingInfo[parkID][parkPickup_2_Pos][1] = Pos[1];
			ParkingInfo[parkID][parkPickup_2_Pos][2] = Pos[2];

			CreatingParkingLevel[playerid] = 6;

			new string[128];

			format(string, sizeof(string), "{FFFFFF]- PARKING ZONA ("col_server"%d"col_white") -\n{FFFFFF]Otidjite do aparata\nda bi kupili ({0F87FF]parking listic {FFFFFF])", parkID);
			ParkingInfo[parkID][park3d_2] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, ParkingInfo[parkID][parkPickup_2_Pos][0], ParkingInfo[parkID][parkPickup_2_Pos][1], ParkingInfo[parkID][parkPickup_2_Pos][2], 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
			ParkingInfo[parkID][parkPickup_2] = acc_CreateDynamicPickup(1239, 1, ParkingInfo[parkID][parkPickup_2_Pos][0], ParkingInfo[parkID][parkPickup_2_Pos][1], ParkingInfo[parkID][parkPickup_2_Pos][2], 0, 0);

			Parking_Save(parkID);

			SendInfoMessage(playerid, "Uspesno si sacuvao pozicije.");
			SendInfoMessage(playerid, "Sada kreni sa oznacavanjem pozicija za parking mesta koristi tipku 'Y'.");
			SendInfoMessage(playerid, "Da bi oznacio sva mesta moras biti u vozilu, koristi cmd "col_server"'/veh 560 1 1'.");
			SendInfoMessage(playerid, "Kada mislis da je dosta, stisni tipku 'N' za kraj.");

		}
		else if(CreatingParkingLevel[playerid] == 6) {

			new parkID = CreateParkingID[playerid], Float:Pos[4], filename[64], string[24];

			new trenutni = ParkingInfo[parkID][parkMaxParkPlaces];

			if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu.");

			if(trenutni == MAX_PARK_PL-1) return SendErrorMessage(playerid, "Vec ste kreirali 50 komada.");

			GetVehiclePos(GetPlayerVehicleID(playerid), Pos[0], Pos[1], Pos[2]);
			GetVehicleZAngle(GetPlayerVehicleID(playerid), Pos[3]);

			new id = IsCordsInParkingZone(parkID, Pos[0], Pos[1]);

			if(id != parkID) return SendErrorMessage(playerid, "Ne moze da ide izvan parkinga.");

			format(filename, sizeof(filename), PARKING_FILE, parkID);

			new INI:File = INI_Open(filename);

			format(string, sizeof(string), "parkPlace_X%d", trenutni);
			INI_WriteFloat(File, string, Pos[0]);
			ParkingPlaces[parkID][trenutni][parkPlace_X] = Pos[0];

			format(string, sizeof(string), "parkPlace_Y%d", trenutni);
			INI_WriteFloat(File, string, Pos[1]);
			ParkingPlaces[parkID][trenutni][parkPlace_Y] = Pos[1];

			format(string, sizeof(string), "parkPlace_Z%d", trenutni);
			INI_WriteFloat(File, string, Pos[2]);
			ParkingPlaces[parkID][trenutni][parkPlace_Z] = Pos[2];

			format(string, sizeof(string), "parkPlace_A%d", trenutni);
			INI_WriteFloat(File, string, Pos[3]);
			ParkingPlaces[parkID][trenutni][parkPlace_A] = Pos[3];

			ParkingPlaces[parkID][trenutni][parkTaken] = false;

			INI_Close(File);
			SendInfoMessage(playerid, "Postavio si mesto za parking broj - %d.", trenutni+1);
			ParkingInfo[parkID][parkMaxParkPlaces]++;

		}
	}


	if(CreatingFStation[playerid] != -1) {

		if(ProcesFStation[playerid] == 1) {

			new fstationID = CreatingFStation[playerid];
			new Float:Pos[4];
			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			GetPlayerFacingAngle(playerid, Pos[3]);

			for(new i = 1; i < MAX_CARS; i++) {

				new fileauta[40];
				format(fileauta, sizeof(fileauta), V_FILE, i);
				if(!fexist(fileauta)) {

					VehicleInfo[i][vOwned] = 0;
					VehicleInfo[i][vNeaktivnost] = 0;
					VehicleInfo[i][vKilometri] = 0;
					VehicleInfo[i][vMetri] = 0;
					VehicleInfo[i][vPrice] = 0;
					strmid(VehicleInfo[i][vOwner], "Drzava", 0, strlen("Drzava"), 32);
					VehicleInfo[i][vLocked] = 1;
					VehicleInfo[i][vLokacijaX] = Pos[0];
					VehicleInfo[i][vLokacijaY] = Pos[1];
					VehicleInfo[i][vLokacijaZ] = Pos[2];
					VehicleInfo[i][vLokacijaA] = Pos[3];
					VehicleInfo[i][vVirtualWorld] = 0;
					VehicleInfo[i][vInterior] = 0;
					VehicleInfo[i][vUsage] = PUMPA_VOZILO;
					VehicleInfo[i][vJob] = -1;
					VehicleInfo[i][vOrganization] = -1;
					VehicleInfo[i][vFuelStation] = fstationID;
					VehicleInfo[i][vColor1] = 4;
					VehicleInfo[i][vColor2] = 4;
					VehicleInfo[i][vModel] = 403;
					VehicleInfo[i][vReg] = 1;
					VehicleInfo[i][vRegVreme] = 0;
					VehicleInfo[i][vTeh] = 1;
					VehicleInfo[i][vGPS] = 0;
					VehicleInfo[i][vOsiguranje] = 5;
					VehicleInfo[i][vLock] = 5;
					VehicleInfo[i][vAlarm] = 4;
					VehicleInfo[i][vTuned] = 0;
					VehicleInfo[i][vNeon] = 0;
					VehicleInfo[i][vImobilizator] = 5;
					VehicleInfo[i][vSpoiler] = 0;
					VehicleInfo[i][vHood] = 0;
					VehicleInfo[i][vRoof] = 0;
					VehicleInfo[i][vSkirt] = 0;
					VehicleInfo[i][vLamps] = 0;
					VehicleInfo[i][vNitro] = 0;
					VehicleInfo[i][vExhaust] = 0;
					VehicleInfo[i][vWheels] = 0;
					VehicleInfo[i][vStereo] = 0;
					VehicleInfo[i][vHydraulics] = 0;
					VehicleInfo[i][vFrontBumper] = 0;
					VehicleInfo[i][vRearBumper] = 0;
					VehicleInfo[i][vVents] = 0;
					VehicleInfo[i][vPaintJob] = 255;
					VehicleInfo[i][vProvera] = i;
					VehicleInfo[i][vMaterijali] = 0;
					VehicleInfo[i][vDrug][0] = 0; VehicleInfo[i][vDrug][1] = 0; VehicleInfo[i][vDrug][2] = 0; VehicleInfo[i][vDrug][3] = 0; VehicleInfo[i][vDrug][4] = 0; VehicleInfo[i][vDrug][5] = 0;
					VehicleInfo[i][vDrugCode][0] = 0; VehicleInfo[i][vDrugCode][1] = 0; VehicleInfo[i][vDrugCode][2] = 0; VehicleInfo[i][vDrugCode][3] = 0; VehicleInfo[i][vDrugCode][4] = 0; VehicleInfo[i][vDrugCode][5] = 0;
					VehicleInfo[i][vMelee] = 0; VehicleInfo[i][vWeap1] = 0; VehicleInfo[i][vAmmo1] = 0; VehicleInfo[i][vWeap2] = 0; VehicleInfo[i][vAmmo2] = 0;

					VehicleInfo[i][vID] = Fusion_CreateVehicle(i, PUMPA_VOZILO, -1, -1, VehicleInfo[i][vFuelStation], VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ]+1.0, VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], 300000);
					SetVehicleVirtualWorld(VehicleInfo[i][vID], GetPlayerVirtualWorld(playerid));
					ac_LinkVehicleToInterior(VehicleInfo[i][vID], GetPlayerInterior(playerid));

					if(Diesel(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 1;
					else if(Gasoline(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 2;
					else if(GasOil(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 3;

					VehicleInfo[i][vFuel] = getAmountFuel(VehicleInfo[i][vID]); vCanDrive[VehicleInfo[i][vID]] = 1; Fuel[VehicleInfo[i][vID]] = getAmountFuel(VehicleInfo[i][vID]);
					UnLockCar(VehicleInfo[i][vID]); ResetVehicleStatistics(VehicleInfo[i][vID]); SetTablice(VehicleInfo[i][vID]);
					SaveVehicle(i);
					carspawntimer = 1;
					SetTimer("AntiSpawnCrash", 3000, 0);

					FuelStation[fstationID][fsTruckID] = i;
					FStation_Save(fstationID);
					ac_PutPlayerInVehicle(playerid, VehicleInfo[i][vID], 0);

					SendInfoMessage(playerid, "Sada parkirajte kamion, koristeci tipku Y!");
					ProcesFStation[playerid] = 2;

					break;
				}
			}
		}
		else if(ProcesFStation[playerid] == 2) {

			new fstationID = CreatingFStation[playerid];

			if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu!");
			if(ScriptIDVozila[GetPlayerVehicleID(playerid)] == -1) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti u server side vozilu.");

			new autoid = ScriptIDVozila[GetPlayerVehicleID(playerid)], Float:Pos[4];

			if(VehicleInfo[autoid][vFuelStation] != fstationID) return SendErrorMessage(playerid, "Ovaj kamion ne pripada pumpi koju kreirate.");

			GetVehiclePos(VehicleInfo[autoid][vID], Pos[0], Pos[1], Pos[2]);
			GetVehicleZAngle(VehicleInfo[autoid][vID], Pos[3]);

			VehicleInfo[autoid][vVirtualWorld] = GetPlayerVirtualWorld(playerid);
			VehicleInfo[autoid][vInterior] = GetPlayerInterior(playerid);

			VehicleInfo[autoid][vLokacijaX] = Pos[0];
			VehicleInfo[autoid][vLokacijaY] = Pos[1];
			VehicleInfo[autoid][vLokacijaZ] = Pos[2];
			VehicleInfo[autoid][vLokacijaA] = Pos[3];

			DestroyVehicle(VehicleInfo[autoid][vID]);
			VehicleInfo[autoid][vID] = Fusion_CreateVehicle(autoid, VehicleInfo[autoid][vUsage], VehicleInfo[autoid][vOrganization], VehicleInfo[autoid][vJob], VehicleInfo[autoid][vFuelStation], VehicleInfo[autoid][vModel], VehicleInfo[autoid][vLokacijaX], VehicleInfo[autoid][vLokacijaY], VehicleInfo[autoid][vLokacijaZ]+1.0, VehicleInfo[autoid][vLokacijaA], VehicleInfo[autoid][vColor1], VehicleInfo[autoid][vColor2], 300000);
			ac_LinkVehicleToInterior(VehicleInfo[autoid][vID], VehicleInfo[autoid][vInterior]);
			SetVehicleVirtualWorld(VehicleInfo[autoid][vID], VehicleInfo[autoid][vVirtualWorld]);

			ac_SetVehicleParamsEx(VehicleInfo[autoid][vID], 0, 0, 0, VehicleInfo[autoid][vLocked], 0, 0, 0);

			SaveVehicle(autoid);

			SendInfoMessage(playerid, "Preparkirali ste vozilo. ID = %d.", autoid);

			SendInfoMessage(playerid, "Sada dodajte cisternu, koristeci tipku Y!");
			ProcesFStation[playerid] = 3;

		}
		else if(ProcesFStation[playerid] == 3) {

			new fstationID = CreatingFStation[playerid];
			new Float:Pos[4];
			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			GetPlayerFacingAngle(playerid, Pos[3]);

			for(new i = 1; i < MAX_CARS; i++) {

				new fileauta[40];
				format(fileauta, sizeof(fileauta), V_FILE, i);
				if(!fexist(fileauta)) {

					VehicleInfo[i][vOwned] = 0;
					VehicleInfo[i][vNeaktivnost] = 0;
					VehicleInfo[i][vKilometri] = 0;
					VehicleInfo[i][vMetri] = 0;
					VehicleInfo[i][vPrice] = 0;
					strmid(VehicleInfo[i][vOwner], "Drzava", 0, strlen("Drzava"), 32);
					VehicleInfo[i][vLocked] = 1;
					VehicleInfo[i][vLokacijaX] = Pos[0];
					VehicleInfo[i][vLokacijaY] = Pos[1];
					VehicleInfo[i][vLokacijaZ] = Pos[2];
					VehicleInfo[i][vLokacijaA] = Pos[3];
					VehicleInfo[i][vVirtualWorld] = 0;
					VehicleInfo[i][vInterior] = 0;
					VehicleInfo[i][vUsage] = PUMPA_VOZILO;
					VehicleInfo[i][vJob] = -1;
					VehicleInfo[i][vOrganization] = -1;
					VehicleInfo[i][vFuelStation] = fstationID;
					VehicleInfo[i][vColor1] = 7;
					VehicleInfo[i][vColor2] = 12;
					VehicleInfo[i][vModel] = 584;
					VehicleInfo[i][vReg] = 1;
					VehicleInfo[i][vRegVreme] = 0;
					VehicleInfo[i][vTeh] = 1;
					VehicleInfo[i][vGPS] = 0;
					VehicleInfo[i][vOsiguranje] = 5;
					VehicleInfo[i][vLock] = 5;
					VehicleInfo[i][vAlarm] = 4;
					VehicleInfo[i][vTuned] = 0;
					VehicleInfo[i][vNeon] = 0;
					VehicleInfo[i][vImobilizator] = 5;
					VehicleInfo[i][vSpoiler] = 0;
					VehicleInfo[i][vHood] = 0;
					VehicleInfo[i][vRoof] = 0;
					VehicleInfo[i][vSkirt] = 0;
					VehicleInfo[i][vLamps] = 0;
					VehicleInfo[i][vNitro] = 0;
					VehicleInfo[i][vExhaust] = 0;
					VehicleInfo[i][vWheels] = 0;
					VehicleInfo[i][vStereo] = 0;
					VehicleInfo[i][vHydraulics] = 0;
					VehicleInfo[i][vFrontBumper] = 0;
					VehicleInfo[i][vRearBumper] = 0;
					VehicleInfo[i][vVents] = 0;
					VehicleInfo[i][vPaintJob] = 255;
					VehicleInfo[i][vProvera] = i;
					VehicleInfo[i][vMaterijali] = 0;
					VehicleInfo[i][vDrug][0] = 0; VehicleInfo[i][vDrug][1] = 0; VehicleInfo[i][vDrug][2] = 0; VehicleInfo[i][vDrug][3] = 0; VehicleInfo[i][vDrug][4] = 0; VehicleInfo[i][vDrug][5] = 0;
					VehicleInfo[i][vDrugCode][0] = 0; VehicleInfo[i][vDrugCode][1] = 0; VehicleInfo[i][vDrugCode][2] = 0; VehicleInfo[i][vDrugCode][3] = 0; VehicleInfo[i][vDrugCode][4] = 0; VehicleInfo[i][vDrugCode][5] = 0;
					VehicleInfo[i][vMelee] = 0; VehicleInfo[i][vWeap1] = 0; VehicleInfo[i][vAmmo1] = 0; VehicleInfo[i][vWeap2] = 0; VehicleInfo[i][vAmmo2] = 0;

					VehicleInfo[i][vID] = Fusion_CreateVehicle(i, PUMPA_VOZILO, -1, -1, VehicleInfo[i][vFuelStation], VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ]+1.0, VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], 300000);
					SetVehicleVirtualWorld(VehicleInfo[i][vID], GetPlayerVirtualWorld(playerid));
					ac_LinkVehicleToInterior(VehicleInfo[i][vID], GetPlayerInterior(playerid));

					if(Diesel(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 1;
					else if(Gasoline(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 2;
					else if(GasOil(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 3;

					VehicleInfo[i][vFuel] = getAmountFuel(VehicleInfo[i][vID]); vCanDrive[VehicleInfo[i][vID]] = 1; Fuel[VehicleInfo[i][vID]] = getAmountFuel(VehicleInfo[i][vID]);
					UnLockCar(VehicleInfo[i][vID]); ResetVehicleStatistics(VehicleInfo[i][vID]); SetTablice(VehicleInfo[i][vID]);
					SaveVehicle(i);
					carspawntimer = 1;
					SetTimer("AntiSpawnCrash", 3000, 0);

					SetVehicleLabels(i);

					FuelStation[fstationID][fsCisternID] = i;
					FStation_Save(fstationID);

					SendInfoMessage(playerid, "Zavrsili ste sa kreiranjem pumpe!");
					ProcesFStation[playerid] = 0;
					CreatingFStation[playerid] = -1;

					break;
				}
			}
		}
	}
}
else if((newkeys == KEY_SECONDARY_ATTACK) && ListaBurg[playerid] > 0) {

	if(ListaBurg[playerid] == 1) {

		if(PlayerInfo[playerid][xNovac] < 7150) return SendErrorMessage(playerid, "Nemate dovoljno novca(7150 $).");
		TogglePlayerControllable(playerid, 1);
		DajIgracuNovac(playerid, -7150); //DajIgracuGlad(playerid, 12); DodajIgracuHP(playerid, 30);
		BusinessMoney(uFirmi[playerid], 55, playerid);
		SetCameraBehindPlayer(playerid);
		ListaBurg[playerid] = 0; OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		format(varstring, sizeof(varstring), "%s desnom rukom uzima hranu sa stola i jede.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		CKilometriTDControl(playerid, false);
	}
	else if(ListaBurg[playerid] == 2) {

		if(PlayerInfo[playerid][xNovac] < 7700) return SendErrorMessage(playerid, "Nemate dovoljno novca(7700 $).");
		TogglePlayerControllable(playerid, 1);
		DajIgracuNovac(playerid, -7700); //DajIgracuGlad(playerid, 15); DodajIgracuHP(playerid, 30);
		BusinessMoney(uFirmi[playerid], 60, playerid);
		SetCameraBehindPlayer(playerid);
		ListaBurg[playerid] = 0; OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		format(varstring, sizeof(varstring), "%s desnom rukom uzima hranu sa stola i jede.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		CKilometriTDControl(playerid, false);
	}
	else if(ListaBurg[playerid] == 3)
	{
		if(PlayerInfo[playerid][xNovac] < 6600) return SendErrorMessage(playerid, "Nemate dovoljno novca(6600 $).");
		TogglePlayerControllable(playerid, 1);
		DajIgracuNovac(playerid, -6600); //DajIgracuGlad(playerid, 10); DodajIgracuHP(playerid, 30);
		BusinessMoney(uFirmi[playerid], 52, playerid);
		SetCameraBehindPlayer(playerid);
		ListaBurg[playerid] = 0; OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		format(varstring, sizeof(varstring), "%s desnom rukom uzima hranu sa stola i jede.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		CKilometriTDControl(playerid, false);
	}
	else if(ListaBurg[playerid] == 4)
	{
		if(PlayerInfo[playerid][xNovac] < 6600) return SendErrorMessage(playerid, "Nemate dovoljno novca(6600 $).");
		TogglePlayerControllable(playerid, 1);
		DajIgracuNovac(playerid, -6600); //DajIgracuGlad(playerid, 10); DodajIgracuHP(playerid, 30);
		BusinessMoney(uFirmi[playerid], 52, playerid);
		SetCameraBehindPlayer(playerid);
		ListaBurg[playerid] = 0; OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		format(varstring, sizeof(varstring), "%s desnom rukom uzima hranu sa stola i jede.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		CKilometriTDControl(playerid, false);
	}
	else if(ListaBurg[playerid] == 5)
	{
		if(PlayerInfo[playerid][xNovac] < 8250) return SendErrorMessage(playerid, "Nemate dovoljno novca(8250 $).");
		TogglePlayerControllable(playerid, 1);
		DajIgracuNovac(playerid, -8250); //DajIgracuGlad(playerid, 20); DodajIgracuHP(playerid, 30);
		BusinessMoney(uFirmi[playerid], 65, playerid);
		SetCameraBehindPlayer(playerid);
		ListaBurg[playerid] = 0; OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		format(varstring, sizeof(varstring), "%s desnom rukom uzima hranu sa stola i jede.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		CKilometriTDControl(playerid, false);
	}
}
else if((newkeys == KEY_JUMP) && ListaBurg[playerid] > 0)
{
	SCM(playerid, CRVENA, "Odustali ste od kupovine!");
	ListaBurg[playerid] = 0;
	TogglePlayerControllable(playerid, true);
	SetCameraBehindPlayer(playerid);
	CKilometriTDControl(playerid, false);}
else if((newkeys == KEY_CROUCH) && NearestGate(playerid) != -1) {

	if(GateData[NearestGate(playerid)][gateFor] == 1) {
		if(GateData[NearestGate(playerid)][gateOrgID] != -1) {
			if(PlayerInfo[playerid][xAdmin] >= 5 || GateData[NearestGate(playerid)][gateOrgID] == PlayerInfo[playerid][xClan]) {
				Gate_Operate(playerid, NearestGate(playerid));
			}
		}
	}
	else if(GateData[NearestGate(playerid)][gateFor] == 2) {
		if(PlayerInfo[playerid][xAdmin] >= 6 || strcmp(ImeIgraca(playerid), GateData[NearestGate(playerid)][gateOwner], true) == 0 || strcmp(PlayerInfo[playerid][xKljucKapije], GateData[NearestGate(playerid)][gateOwner], true) == 0) {
			Gate_Operate(playerid, NearestGate(playerid));
		}
	}
	else if(GateData[NearestGate(playerid)][gateFor] == 3) {

		if(PlayerInfo[playerid][xAdmin] >= 1) {
			Gate_Operate(playerid, NearestGate(playerid));
		}
	}
	else if(GateData[NearestGate(playerid)][gateFor] == 4) {

		if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 1) {
			Gate_Operate(playerid, NearestGate(playerid));
		}
	}
	else if(GateData[NearestGate(playerid)][gateFor] == 5) {

		if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xVIPLevel] >= 1 || PlayerInfo[playerid][xYouTuber] == 1) {
			Gate_Operate(playerid, NearestGate(playerid));
		}
	}
	else if(GateData[NearestGate(playerid)][gateFor] == 6) {

		if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xPromoter] >= 1) {
			Gate_Operate(playerid, NearestGate(playerid));
		}
	}
}
return true;}

public ResprayTimer(playerid, autoid) {
Fusion_KillTimer(FarbanjeTimer[playerid]);
if(!IsPlayerInVehicle(playerid, VehicleInfo[autoid][vID])) return SendErrorMessage(playerid, "Morate biti u svom vozilu!");
new repairman = GetPVarInt(playerid, "ResprayOffer");
new newkeys,ud,lr;
GetPlayerKeys(repairman, newkeys, ud, lr);
if(HOLDING(KEY_FIRE)) {
	if(GetPVarInt(playerid, "ResprayOffer")  < 999) {
		if(PlayerInfo[playerid][xNovac] >= GetPVarInt(playerid, "ResprayPrice")) {
			if(IsPlayerInAnyVehicle(playerid)) {
				if(IsPlayerConnected(repairman)) {
					if(PlayerInfo[repairman][xMDelovi] < 5) {
						SCM(repairman, CRVENA, "Nemate delova.");
						SCM(playerid, CRVENA, "Mehanicar nema delova!");
						return 1;
					} else {
						if(IsPlayerInRangeOfPoint(playerid, 15.0, 1978.9244, -1585.0405, 13.3126)) {
							if(IsPlayerNearPlayer(10.0, playerid, repairman)) {
								if(VehicleInfo[autoid][vUsage] != PRIVATNO_VOZILO) return SendErrorMessage(playerid, "Mozete farbati samo privatna vozila.");
								if(strcmp(ImeIgraca(playerid), VehicleInfo[autoid][vOwner], true) == 0)
								{
									VehicleInfo[autoid][vColor1] = ResprayColor1[repairman];
									VehicleInfo[autoid][vColor2] = ResprayColor2[repairman];
									ChangeVehicleColor(GetPlayerVehicleID(playerid), ResprayColor1[repairman], ResprayColor2[repairman]);
									SaveVehicle(autoid);

									SendClientMessageEx(playerid, SVETLOPLAVA, "* Vase vozilo je prefarbano za $%d od strane AutoMehanicara %s.", GetPVarInt(playerid, "ResprayPrice"), ImeIgraca(repairman));
									SendClientMessageEx(repairman, SVETLOPLAVA, "* Prefarbali ste  %s vozilo. Zaradili ste $%d.", ImeIgraca(playerid), GetPVarInt(playerid, "ResprayPrice"));
									PlayAudioStreamForPlayer(repairman, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");

									PlayerInfo[repairman][xMehSkill] += 1;
									if(PlayerInfo[repairman][xMehSkill] == 50)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 2, sada imate vise opcija u svom poslu."); }
									else if(PlayerInfo[repairman][xMehSkill] == 100)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 3, sada imate vise opcija u svom poslu."); }
									else if(PlayerInfo[repairman][xMehSkill] == 200)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 4, sada imate vise opcija u svom poslu."); }
									else if(PlayerInfo[repairman][xMehSkill] == 400)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 5, sada imate vise opcija u svom poslu."); }

									PlayerInfo[repairman][xMDelovi] -= 5;
									DajIgracuNovac(repairman, GetPVarInt(playerid, "ResprayPrice"));
									DajIgracuNovac(playerid, -GetPVarInt(playerid, "ResprayPrice"));
									//BusinessJobMoney(POSAO_MEHANICAR, (GetPVarInt(playerid, "ResprayPrice")/10));
									SetPVarInt(playerid, "ResprayOffer", 999);
									SetPVarInt(playerid, "ResprayPrice", 0);
									SetPVarInt(playerid, "ResprayvID", -1);
									SetPVarInt(repairman, "ResprayvID", -1);
									SetPVarInt(repairman, "ResprayDozvola", 999);
									SetPVarInt(repairman, "RespraySpray", 0);
									ResprayColor1[repairman] = -1;
									ResprayColor2[repairman] = -1;
									RemovePlayerWeapon(repairman, 41);
								}
								else return SendErrorMessage(playerid, "Nisi vlasnik ovog vozila!");
							} else return SendErrorMessage(playerid, "Nisi blizu igraca koji ti je ponudio popravku guma vozila!");
						} else return SCM(playerid, CRVENA, "Auto mozete farbati samo u mehanicarskoj garazi!");
					}
				}
				return 1;
			}
			return 1;
		} else return SendErrorMessage(playerid, "Nemate dovoljno novca.");
	}
}
return 1;}

public OnPlayerUpdate(playerid) {
  
	if(AdminDuty[playerid]) {
	new Float:H; GetPlayerHealth(playerid, H);
	new Float:Armour; GetPlayerArmour(playerid, Armour);
	if(H < 99.0)	Fusion_SetPlayerHealth(playerid, 100);
	if(Armour < 99.0)	Fusion_SetPlayerArmour(playerid, 100);}
		
if(flymodecamera[playerid][cameramode] == true) { // Kamera za salone
	new keys,ud,lr;
	GetPlayerKeys(playerid,keys,ud,lr);

	if(flymodecamera[playerid][mode] && (GetTickCount() - flymodecamera[playerid][lastmove] > 100))
	{
		MoveCamera(playerid);
	}
	if(flymodecamera[playerid][udold] != ud || flymodecamera[playerid][lrold] != lr)
	{
		if((flymodecamera[playerid][udold] != 0 || flymodecamera[playerid][lrold] != 0) && ud == 0 && lr == 0){
			StopPlayerObject(playerid, flymodecamera[playerid][flyobject]);
			flymodecamera[playerid][mode]      = 0;
			flymodecamera[playerid][accelmul]  = 0.0;
		}
		else
		{
			flymodecamera[playerid][mode] = GetMoveDirectionFromKeys(ud, lr);
			MoveCamera(playerid);
		}
	}
	flymodecamera[playerid][udold] = ud; flymodecamera[playerid][lrold] = lr;
	return 0;}
static s_iVehicle;  
if ( g_fSpeedCap[ playerid ] != 0.0 && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
{
	s_iVehicle = GetPlayerVehicleID( playerid );
		   
	if ( s_iVehicle )
	{
				static
					Float:s_fX,
					Float:s_fY,
					Float:s_fZ,
					Float:s_fVX,
					Float:s_fVY,
					Float:s_fVZ;
				   
				GetVehiclePos( s_iVehicle, s_fX, s_fY, s_fZ );
				GetVehicleVelocity( s_iVehicle, s_fVX, s_fVY, s_fVZ );
				   
				if ( !IsPlayerInRangeOfPoint( playerid, g_fSpeedCap[ playerid ] + 0.05, s_fX + s_fVX, s_fY + s_fVY, s_fZ + s_fVZ ) )
				{
							static
									Float:s_fLength
							;
						   
							s_fLength = floatsqroot( ( s_fVX * s_fVX ) + ( s_fVY * s_fVY ) + ( s_fVZ * s_fVZ ) );
						   
							s_fVX = ( s_fVX / s_fLength ) * g_fSpeedCap[ playerid ];
							s_fVY = ( s_fVY / s_fLength ) * g_fSpeedCap[ playerid ];
							s_fVZ = ( s_fVZ / s_fLength ) * g_fSpeedCap[ playerid ];
						   
							if ( s_iVehicle )
									SetVehicleVelocity( s_iVehicle, s_fVX, s_fVY, s_fVZ );
							else
									SetPlayerVelocity( playerid, s_fVX, s_fVY, s_fVZ );
				}
	}
}
return true;}

//--------------------------------------------------

forward ShowPlayerMenu(playerid);
public ShowPlayerMenu(playerid)
{
KillTimer(MenuTimer);
IsCamMoving[playerid] = false;
SPD(playerid, dialog_MENU, DSL,"Next step?","Preview\nChange Start\nChange End\nChange Speed\nSave","Ok","Cancel");
return 1;}

//--------------------------------------------------

forward PreviewMovement(playerid);
public PreviewMovement(playerid)
{
IsCamMoving[playerid] = true;
DestroyObject(noclipdata[playerid][flyobject]);
SetCameraBehindPlayer(playerid);
if(coordInfo[playerid][MoveSpeed] > coordInfo[playerid][RotSpeed])
	MenuTimer = SetTimer("ShowPlayerMenu", coordInfo[playerid][MoveSpeed], 0);
else
	MenuTimer = SetTimer("ShowPlayerMenu", coordInfo[playerid][RotSpeed], 0);
InterpolateCameraPos(playerid, coordInfo[playerid][StartX], coordInfo[playerid][StartY], coordInfo[playerid][StartZ], coordInfo[playerid][EndX], coordInfo[playerid][EndY], coordInfo[playerid][EndZ],coordInfo[playerid][MoveSpeed]);
InterpolateCameraLookAt(playerid, coordInfo[playerid][StartLookX],coordInfo[playerid][StartLookY],coordInfo[playerid][StartLookZ],coordInfo[playerid][EndLookX],coordInfo[playerid][EndLookY],coordInfo[playerid][EndLookZ],coordInfo[playerid][RotSpeed]);
return 1;}

//--------------------------------------------------

forward ExportMovement(playerid, inputtext[]);
public ExportMovement(playerid, inputtext[])
{
new tagstring[64];
new movestring[512];
new rotstring[512];
new filename[50];
format(filename, 128, "CamEdit_%s.txt", inputtext);
format(tagstring, sizeof(tagstring), "|----------%s----------|\r\n", inputtext);
format(movestring, sizeof(movestring),"InterpolateCameraPos(playerid, %f, %f, %f, %f, %f, %f, %i);\r\n",coordInfo[playerid][StartX], coordInfo[playerid][StartY], coordInfo[playerid][StartZ], coordInfo[playerid][EndX], coordInfo[playerid][EndY], coordInfo[playerid][EndZ],coordInfo[playerid][MoveSpeed]);
format(rotstring,sizeof(rotstring),"InterpolateCameraLookAt(playerid, %f, %f, %f, %f, %f, %f, %i);",coordInfo[playerid][StartLookX],coordInfo[playerid][StartLookY],coordInfo[playerid][StartLookZ],coordInfo[playerid][EndLookX],coordInfo[playerid][EndLookY],coordInfo[playerid][EndLookZ],coordInfo[playerid][RotSpeed]);
new File:File = fopen(filename, io_write);
fwrite(File, tagstring);
fwrite(File, movestring);
fwrite(File, rotstring);
fclose(File);
new myOutpString[256];
format(myOutpString, sizeof(myOutpString), "Camera movements saved under {F58282]%s {a9c4e4]to the scriptfiles folder!\n\nWhat do you want to do next?", filename);
SPD(playerid, dialog_CLOSE_NEW, DSMSG,"What next?",myOutpString,"Create new","Exit");}

//--------------------------------------------------

stock ce_GetMoveDirectionFromKeys(ud, lr)
{
new direction = 0;

if(lr < 0)
{
	if(ud < 0) 		direction = MOVE_FORWARD_LEFT;
	else if(ud > 0) direction = MOVE_BACK_LEFT;
	else            direction = MOVE_LEFT;}
else if(lr > 0)
{
	if(ud < 0)      direction = MOVE_FORWARD_RIGHT;
	else if(ud > 0) direction = MOVE_BACK_RIGHT;
	else			direction = MOVE_RIGHT;}
else if(ud < 0) 	direction = MOVE_FORWARD;
else if(ud > 0) 	direction = MOVE_BACK;

return direction;}

//--------------------------------------------------

stock ce_MoveCamera(playerid)
{
new Float:FV[3], Float:CP[3];
GetPlayerCameraPos(playerid, CP[0], CP[1], CP[2]);
GetPlayerCameraFrontVector(playerid, FV[0], FV[1], FV[2]);
if(noclipdata[playerid][accelmul] <= 1) noclipdata[playerid][accelmul] += ACCEL_RATE;
new Float:speed = MOVE_SPEED * noclipdata[playerid][accelmul];
new Float:X, Float:Y, Float:Z;
ce_GetNextCameraPosition(noclipdata[playerid][mode], CP, FV, X, Y, Z);
MovePlayerObject(playerid, noclipdata[playerid][flyobject], X, Y, Z, speed);
noclipdata[playerid][lastmove] = GetTickCount();
return 1;}

//--------------------------------------------------

stock ce_GetNextCameraPosition(move_mode, Float:CP[3], Float:FV[3], &Float:X, &Float:Y, &Float:Z)
{
#define ce_OFFSET_X (FV[0]*6000.0)
#define ce_OFFSET_Y (FV[1]*6000.0)
#define ce_OFFSET_Z (FV[2]*6000.0)
switch(move_mode)
{
	case MOVE_FORWARD:
	{
		X = CP[0]+ce_OFFSET_X;
		Y = CP[1]+ce_OFFSET_Y;
		Z = CP[2]+ce_OFFSET_Z;
	}
	case MOVE_BACK:
	{
		X = CP[0]-ce_OFFSET_X;
		Y = CP[1]-ce_OFFSET_Y;
		Z = CP[2]-ce_OFFSET_Z;
	}
	case MOVE_LEFT:
	{
		X = CP[0]-ce_OFFSET_Y;
		Y = CP[1]+ce_OFFSET_X;
		Z = CP[2];
	}
	case MOVE_RIGHT:
	{
		X = CP[0]+ce_OFFSET_Y;
		Y = CP[1]-ce_OFFSET_X;
		Z = CP[2];
	}
	case MOVE_BACK_LEFT:
	{
		X = CP[0]+(-ce_OFFSET_X - ce_OFFSET_Y);
			Y = CP[1]+(-ce_OFFSET_Y + ce_OFFSET_X);
		Z = CP[2]-ce_OFFSET_Z;
	}
	case MOVE_BACK_RIGHT:
	{
		X = CP[0]+(-ce_OFFSET_X + ce_OFFSET_Y);
			Y = CP[1]+(-ce_OFFSET_Y - ce_OFFSET_X);
		Z = CP[2]-ce_OFFSET_Z;
	}
	case MOVE_FORWARD_LEFT:
	{
		X = CP[0]+(ce_OFFSET_X  - ce_OFFSET_Y);
		Y = CP[1]+(ce_OFFSET_Y  + ce_OFFSET_X);
		Z = CP[2]+ce_OFFSET_Z;
	}
	case MOVE_FORWARD_RIGHT:
	{
		X = CP[0]+(ce_OFFSET_X  + ce_OFFSET_Y);
		Y = CP[1]+(ce_OFFSET_Y  - ce_OFFSET_X);
		Z = CP[2]+ce_OFFSET_Z;
	}
}
}
//--------------------------------------------------

stock CloseCamEditor(playerid)
{
DeletePVar(playerid, "EnterCamEditor");
CancelEdit(playerid);
ac_TogglePlayerSpectating(playerid, false);
DestroyPlayerObject(playerid, noclipdata[playerid][flyobject]);
noclipdata[playerid][cameramode] = CAMERA_MODE_NONE;
IsReSettingStart[playerid] 	= false;
IsReSettingEnd[playerid] 	= false;
SettingFirstLoc[playerid] 	= false;
SettingLastLoc[playerid] 	= false;
return 1;}

//--------------------------------------------------

stock EnterCamEditor(playerid)
{
new Float:X, Float:Y, Float:Z;
IsCreating[playerid] = true;
SettingFirstLoc[playerid] = true;
GetPlayerPos(playerid, X, Y, Z);
noclipdata[playerid][flyobject] = CreatePlayerObject(playerid, 19300, X, Y, Z, 0.0, 0.0, 0.0);
ac_TogglePlayerSpectating(playerid, true);
AttachCameraToPlayerObject(playerid, noclipdata[playerid][flyobject]);
SetPVarInt(playerid, "EnterCamEditor", 1);
noclipdata[playerid][cameramode] = CAMERA_MODE_FLY;
SendInfoMessage(playerid, "Usli ste u Camera Editor - za izlaz /closecameditor.");
return 1;}

//--------------------------------------------------

public OnPlayerStreamIn(playerid, forplayerid) {

return true;}

public OnPlayerStreamOut(playerid, forplayerid)
{
return true;}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
return true;}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
return true;}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
new dStyle = DSL, varstring[192], DialogStrgEx[1900];
if(strfind(inputtext, "%", true) != -1 || strfind(inputtext, "#", true) != -1)
{
	SCM(playerid, CRVENA, "Uneli ste format koji server ne podrzava!");
	return 1;}
switch(dialogid)
{
	case dialog_RENT: {
		if(!response) return 1;
		switch(listitem) {
			case 0: {
				RentOdabir[playerid] = 1;
				SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 220$","Rentaj","Izlaz");
			}
			case 1: {
				RentOdabir[playerid] = 2;
				SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 360$","Rentaj","Izlaz");
			}
			case 2: {
				RentOdabir[playerid] = 3;
				SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 420$","Rentaj","Izlaz");
			}
			case 3: {
				RentOdabir[playerid] = 4;
				SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 60$","Rentaj","Izlaz");
			}
			case 4: {
				RentOdabir[playerid] = 5;
				SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 260$","Rentaj","Izlaz");
			}
			case 5: {
				RentOdabir[playerid] = 6;
				SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 40$","Rentaj","Izlaz");
			}
			case 6: {
				RentOdabir[playerid] = 7;
				SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 20$","Rentaj","Izlaz");
			}
		}
	}
	case dialog_RENTVREME: {
		if(!response) return 1;
		new i = GetNearestRent(playerid);
		if(RentOdabir[playerid] == 1) {
			new vreme;
			if(PlayerInfo[playerid][xNovac] < RentVreme[playerid]*220) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
			if(sscanf(inputtext, "d", vreme)) return SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 220$","Rentaj","Izlaz");
			if(vreme < 1 || vreme > 30) return SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 220$","Rentaj","Izlaz");
			RentVreme[playerid] = vreme;
			RentVeh[playerid] = Fusion_CreateVehicle(-1, RENTANO_VOZILO, -1, -1, -1, 410, RentInfo[i][rentX]+2, RentInfo[i][rentY]+2, RentInfo[i][rentZ], 0.0, 1, 1, -1);
			ac_LinkVehicleToInterior(RentVeh[playerid], GetPlayerInterior(playerid));
			SetVehicleVirtualWorld(RentVeh[playerid], GetPlayerVirtualWorld(playerid));
			vCanDrive[RentVeh[playerid]] = 1;
			Fuel[RentVeh[playerid]] = getAmountFuel(RentVeh[playerid]);
			ac_PutPlayerInVehicle(playerid, RentVeh[playerid], 0);
			ResetVehicleStatistics(RentVeh[playerid]);
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(RentVeh[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			ac_SetVehicleParamsEx(RentVeh[playerid], 1, 0, alarm, 0, 0, 0, objective);
			IznajmioVozilo[playerid] = GetPlayerVehicleID(playerid);
			DajIgracuNovac(playerid, -RentVreme[playerid]*220);
			RentTimer[playerid] = SetTimerEx("TimerRent", 60000, true, "i", playerid);
			SendInfoMessage(playerid, "Uspesno ste rentali vozilo na %d minuta.", RentVreme[playerid]);
			RentVehLabel[RentVeh[playerid]] = Create3DTextLabel(""col_red"[ RENTANO VOZILO ]", -1, RentInfo[i][rentX]+2, RentInfo[i][rentY]+2, RentInfo[i][rentZ], 10.0, 0, 0);
			Attach3DTextLabelToVehicle(RentVehLabel[RentVeh[playerid}}, RentVeh[playerid], 0.0, 0.0, 0.0);
			BusinessRentMoney(playerid, 650);
		}
		if(RentOdabir[playerid] == 2) {
			new vreme;
			if(PlayerInfo[playerid][xNovac] < RentVreme[playerid]*360) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
			if(sscanf(inputtext, "d", vreme)) return SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 360$","Rentaj","Izlaz");
			if(vreme < 1 || vreme > 30) return SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 360$","Rentaj","Izlaz");
			RentVreme[playerid] = vreme;
			RentVeh[playerid] = Fusion_CreateVehicle(-1, RENTANO_VOZILO, -1, -1, -1, 426, RentInfo[i][rentX]+2, RentInfo[i][rentY]+2, RentInfo[i][rentZ], 0.0, 1, 1, -1);
			ac_LinkVehicleToInterior(RentVeh[playerid], GetPlayerInterior(playerid));
			SetVehicleVirtualWorld(RentVeh[playerid], GetPlayerVirtualWorld(playerid));
			vCanDrive[RentVeh[playerid]] = 1;
			Fuel[RentVeh[playerid]] = getAmountFuel(RentVeh[playerid]);
			ac_PutPlayerInVehicle(playerid, RentVeh[playerid], 0);
			ResetVehicleStatistics(RentVeh[playerid]);
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(RentVeh[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			ac_SetVehicleParamsEx(RentVeh[playerid], 1, 0, alarm, 0, 0, 0, objective);
			IznajmioVozilo[playerid] = GetPlayerVehicleID(playerid);
			DajIgracuNovac(playerid, -RentVreme[playerid]*360);
			RentTimer[playerid] = SetTimerEx("TimerRent", 60000, true, "i", playerid);
			SendInfoMessage(playerid, "Uspesno ste rentali vozilo na %d minuta.", RentVreme[playerid]);
			RentVehLabel[RentVeh[playerid]] = Create3DTextLabel(""col_red"[ RENTANO VOZILO ]", -1, RentInfo[i][rentX]+2, RentInfo[i][rentY]+2, RentInfo[i][rentZ], 10.0, 0, 0);
			Attach3DTextLabelToVehicle(RentVehLabel[RentVeh[playerid}}, RentVeh[playerid], 0.0, 0.0, 0.0);
			BusinessRentMoney(playerid, 650);
		}
		if(RentOdabir[playerid] == 3) {
			new vreme;
			if(PlayerInfo[playerid][xNovac] < RentVreme[playerid]*420) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
			if(sscanf(inputtext, "d", vreme)) return SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 420$","Rentaj","Izlaz");
			if(vreme < 1 || vreme > 30) return SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 420$","Rentaj","Izlaz");
			RentVreme[playerid] = vreme;
			RentVeh[playerid] = Fusion_CreateVehicle(-1, RENTANO_VOZILO, -1, -1, -1, 492, RentInfo[i][rentX]+2, RentInfo[i][rentY]+2, RentInfo[i][rentZ], 0.0, 1, 1, -1);
			ac_LinkVehicleToInterior(RentVeh[playerid], GetPlayerInterior(playerid));
			SetVehicleVirtualWorld(RentVeh[playerid], GetPlayerVirtualWorld(playerid));
			vCanDrive[RentVeh[playerid]] = 1;
			Fuel[RentVeh[playerid]] = getAmountFuel(RentVeh[playerid]);
			ac_PutPlayerInVehicle(playerid, RentVeh[playerid], 0);
			ResetVehicleStatistics(RentVeh[playerid]);
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(RentVeh[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			ac_SetVehicleParamsEx(RentVeh[playerid], 1, 0, alarm, 0, 0, 0, objective);
			IznajmioVozilo[playerid] = GetPlayerVehicleID(playerid);
			DajIgracuNovac(playerid, -RentVreme[playerid]*420);
			RentTimer[playerid] = SetTimerEx("TimerRent", 60000, true, "i", playerid);
			SendInfoMessage(playerid, "Uspesno ste rentali vozilo na %d minuta.", RentVreme[playerid]);
			RentVehLabel[RentVeh[playerid]] = Create3DTextLabel(""col_red"[ RENTANO VOZILO ]", -1, RentInfo[i][rentX]+2, RentInfo[i][rentY]+2, RentInfo[i][rentZ], 10.0, 0, 0);
			Attach3DTextLabelToVehicle(RentVehLabel[RentVeh[playerid}}, RentVeh[playerid], 0.0, 0.0, 0.0);
			BusinessRentMoney(playerid, 650);
		}
		if(RentOdabir[playerid] == 4) {
			new vreme;
			if(PlayerInfo[playerid][xNovac] < RentVreme[playerid]*60) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
			if(sscanf(inputtext, "d", vreme)) return SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 60$","Rentaj","Izlaz");
			if(vreme < 1 || vreme > 30) return SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 60$","Rentaj","Izlaz");
			RentVreme[playerid] = vreme;
			RentVeh[playerid] = Fusion_CreateVehicle(-1, RENTANO_VOZILO, -1, -1, -1, 462, RentInfo[i][rentX]+2, RentInfo[i][rentY]+2, RentInfo[i][rentZ], 0.0, 1, 1, -1);
			ac_LinkVehicleToInterior(RentVeh[playerid], GetPlayerInterior(playerid));
			SetVehicleVirtualWorld(RentVeh[playerid], GetPlayerVirtualWorld(playerid));
			vCanDrive[RentVeh[playerid]] = 1;
			Fuel[RentVeh[playerid]] = getAmountFuel(RentVeh[playerid]);
			ac_PutPlayerInVehicle(playerid, RentVeh[playerid], 0);
			ResetVehicleStatistics(RentVeh[playerid]);
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(RentVeh[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			ac_SetVehicleParamsEx(RentVeh[playerid], 1, 0, alarm, 0, 0, 0, objective);
			IznajmioVozilo[playerid] = GetPlayerVehicleID(playerid);
			DajIgracuNovac(playerid, -RentVreme[playerid]*60);
			RentTimer[playerid] = SetTimerEx("TimerRent", 60000, true, "i", playerid);
			SendInfoMessage(playerid, "Uspesno ste rentali vozilo na %d minuta.", RentVreme[playerid]);
			RentVehLabel[RentVeh[playerid]] = Create3DTextLabel(""col_red"[ RENTANO VOZILO ]", -1, RentInfo[i][rentX]+2, RentInfo[i][rentY]+2, RentInfo[i][rentZ], 10.0, 0, 0);
			Attach3DTextLabelToVehicle(RentVehLabel[RentVeh[playerid}}, RentVeh[playerid], 0.0, 0.0, 0.0);
			BusinessRentMoney(playerid, 650);
		}
		if(RentOdabir[playerid] == 5) {
			new vreme;
			if(PlayerInfo[playerid][xNovac] < RentVreme[playerid]*260) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
			if(sscanf(inputtext, "d", vreme)) return SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 260$","Rentaj","Izlaz");
			if(vreme < 1 || vreme > 30) return SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 260$","Rentaj","Izlaz");
			RentVreme[playerid] = vreme;
			RentVeh[playerid] = Fusion_CreateVehicle(-1, RENTANO_VOZILO, -1, -1, -1, 521, RentInfo[i][rentX]+2, RentInfo[i][rentY]+2, RentInfo[i][rentZ], 0.0, 1, 1, -1);
			ac_LinkVehicleToInterior(RentVeh[playerid], GetPlayerInterior(playerid));
			SetVehicleVirtualWorld(RentVeh[playerid], GetPlayerVirtualWorld(playerid));
			vCanDrive[RentVeh[playerid]] = 1;
			Fuel[RentVeh[playerid]] = getAmountFuel(RentVeh[playerid]);
			ac_PutPlayerInVehicle(playerid, RentVeh[playerid], 0);
			ResetVehicleStatistics(RentVeh[playerid]);
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(RentVeh[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			ac_SetVehicleParamsEx(RentVeh[playerid], 1, 0, alarm, 0, 0, 0, objective);
			IznajmioVozilo[playerid] = GetPlayerVehicleID(playerid);
			DajIgracuNovac(playerid, -RentVreme[playerid]*260);
			RentTimer[playerid] = SetTimerEx("TimerRent", 60000, true, "i", playerid);
			SendInfoMessage(playerid, "Uspesno ste rentali vozilo na %d minuta.", RentVreme[playerid]);
			RentVehLabel[RentVeh[playerid]] = Create3DTextLabel(""col_red"[ RENTANO VOZILO ]", -1, RentInfo[i][rentX]+2, RentInfo[i][rentY]+2, RentInfo[i][rentZ], 10.0, 0, 0);
			Attach3DTextLabelToVehicle(RentVehLabel[RentVeh[playerid}}, RentVeh[playerid], 0.0, 0.0, 0.0);
			BusinessRentMoney(playerid, 650);
		}
		if(RentOdabir[playerid] == 6) {
			new vreme;
			if(PlayerInfo[playerid][xNovac] < RentVreme[playerid]*40) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
			if(sscanf(inputtext, "d", vreme)) return SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 40$","Rentaj","Izlaz");
			if(vreme < 1 || vreme > 30) return SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 40$","Rentaj","Izlaz");
			RentVreme[playerid] = vreme;
			RentVeh[playerid] = Fusion_CreateVehicle(-1, RENTANO_VOZILO, -1, -1, -1, 510, RentInfo[i][rentX]+2, RentInfo[i][rentY]+2, RentInfo[i][rentZ], 0.0, 1, 1, -1);
			ac_LinkVehicleToInterior(RentVeh[playerid], GetPlayerInterior(playerid));
			SetVehicleVirtualWorld(RentVeh[playerid], GetPlayerVirtualWorld(playerid));
			vCanDrive[RentVeh[playerid]] = 1;
			Fuel[RentVeh[playerid]] = getAmountFuel(RentVeh[playerid]);
			ac_PutPlayerInVehicle(playerid, RentVeh[playerid], 0);
			ResetVehicleStatistics(RentVeh[playerid]);
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(RentVeh[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			ac_SetVehicleParamsEx(RentVeh[playerid], 1, 0, alarm, 0, 0, 0, objective);
			IznajmioVozilo[playerid] = GetPlayerVehicleID(playerid);
			DajIgracuNovac(playerid, -RentVreme[playerid]*40);
			RentTimer[playerid] = SetTimerEx("TimerRent", 60000, true, "i", playerid);
			SendInfoMessage(playerid, "Uspesno ste rentali vozilo na %d minuta.", RentVreme[playerid]);
			RentVehLabel[RentVeh[playerid]] = Create3DTextLabel(""col_red"[ RENTANO VOZILO ]", -1, RentInfo[i][rentX]+2, RentInfo[i][rentY]+2, RentInfo[i][rentZ], 10.0, 0, 0);
			Attach3DTextLabelToVehicle(RentVehLabel[RentVeh[playerid}}, RentVeh[playerid], 0.0, 0.0, 0.0);
			BusinessRentMoney(playerid, 650);
		}
		if(RentOdabir[playerid] == 7) {
			new vreme;
			if(PlayerInfo[playerid][xNovac] < RentVreme[playerid]*20) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
			if(sscanf(inputtext, "d", vreme)) return SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 20$","Rentaj","Izlaz");
			if(vreme < 1 || vreme > 30) return SPD(playerid, dialog_RENTVREME, DSI, ""col_server"Iznamljivanje {FFFFFF]vozila","{FFFFFF]Unesite vreme na koliko cete iznajmiti vozilo.\nMinimalno vreme - 1 minut.\nMaksimalno vreme - 30 minuta.\nCena - 1 minut = 20$","Rentaj","Izlaz");
			RentVreme[playerid] = vreme;
			RentVeh[playerid] = Fusion_CreateVehicle(-1, RENTANO_VOZILO, -1, -1, -1, 481, RentInfo[i][rentX]+2, RentInfo[i][rentY]+2, RentInfo[i][rentZ], 0.0, 1, 1, -1);
			ac_LinkVehicleToInterior(RentVeh[playerid], GetPlayerInterior(playerid));
			SetVehicleVirtualWorld(RentVeh[playerid], GetPlayerVirtualWorld(playerid));
			vCanDrive[RentVeh[playerid]] = 1;
			Fuel[RentVeh[playerid]] = getAmountFuel(RentVeh[playerid]);
			ac_PutPlayerInVehicle(playerid, RentVeh[playerid], 0);
			ResetVehicleStatistics(RentVeh[playerid]);
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(RentVeh[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			ac_SetVehicleParamsEx(RentVeh[playerid], 1, 0, alarm, 0, 0, 0, objective);
			IznajmioVozilo[playerid] = GetPlayerVehicleID(playerid);
			DajIgracuNovac(playerid, -RentVreme[playerid]*20);
			RentTimer[playerid] = SetTimerEx("TimerRent", 60000, true, "i", playerid);
			SendInfoMessage(playerid, "Uspesno ste rentali vozilo na %d minuta.", RentVreme[playerid]);
			RentVehLabel[RentVeh[playerid]] = Create3DTextLabel(""col_red"[ RENTANO VOZILO ]", -1, RentInfo[i][rentX]+2, RentInfo[i][rentY]+2, RentInfo[i][rentZ], 10.0, 0, 0);
			Attach3DTextLabelToVehicle(RentVehLabel[RentVeh[playerid}}, RentVeh[playerid], 0.0, 0.0, 0.0);
			BusinessRentMoney(playerid, 650);
		}
	}
	case dialog_MENU:
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: //Preview
				{
					PreviewMovement(playerid);
				}
				case 1: //Change start
				{
					DestroyPlayerObject(playerid, noclipdata[playerid][flyobject]);
					IsReSettingEnd[playerid] 	= false;
					SettingLastLoc[playerid] 	= false;
					IsReSettingStart[playerid] = true;
					SettingFirstLoc[playerid]  = true;
					noclipdata[playerid][flyobject] = CreatePlayerObject(playerid, 19300, coordInfo[playerid][StartX], coordInfo[playerid][StartY], coordInfo[playerid][StartZ], 0.0, 0.0, 0.0);
					ac_TogglePlayerSpectating(playerid, true);
					AttachCameraToPlayerObject(playerid, noclipdata[playerid][flyobject]);
					SetPVarInt(playerid, "EnterCamEditor", 1);
					noclipdata[playerid][cameramode] = CAMERA_MODE_FLY;
					SendClientMessage(playerid, -1, "Use {F58282]~k~~PED_FIREWEAPON~ {FFFFFF]to set a new {F58282]start {FFFFFF]position.");
				}
				case 2: //Change end
				{
					DestroyPlayerObject(playerid, noclipdata[playerid][flyobject]);
					IsReSettingStart[playerid] 	= false;
					SettingFirstLoc[playerid] 	= false;
					IsReSettingEnd[playerid] = true;
					SettingLastLoc[playerid] = true;
					IsCreating[playerid] 	 = true;
					SetCameraBehindPlayer(playerid);
					noclipdata[playerid][flyobject] = CreatePlayerObject(playerid, 19300, coordInfo[playerid][EndX], coordInfo[playerid][EndY], coordInfo[playerid][EndZ], 0.0, 0.0, 0.0);
					ac_TogglePlayerSpectating(playerid, true);
					AttachCameraToPlayerObject(playerid, noclipdata[playerid][flyobject]);
					SetPVarInt(playerid, "EnterCamEditor", 1);
					noclipdata[playerid][cameramode] = CAMERA_MODE_FLY;
					SendClientMessage(playerid, -1, "Use {F58282]~k~~PED_FIREWEAPON~ {FFFFFF]to set a new {F58282]end {FFFFFF]position.");
				}
				case 3: //Change speed
				{
					new string[512];
					format(string, sizeof(string), "Please enter the desired {F58282]movement{a9c4e4] time in milliseconds\n\nCurrent movement speed: \t{F58282]%i milliseconds\n{a9c4e4]Current rotation speed: \t{F58282]%i milliseconds\n\n\nNote: {a9c4e4]1 second = 1000 milliseconds", coordInfo[playerid][MoveSpeed], coordInfo[playerid][RotSpeed]);
					SPD(playerid, dialog_MOVE_SPEED, DSI, "Movement Speed", string,"Ok","Cancel");
				}
				case 4: //Export
				{
					SPD(playerid, dialog_EXPORTNAME, DSI, "Save movement","Enter a name for the movement","Ok","Cancel");
				}
			}
		}
		else
		{
			CloseCamEditor(playerid);
			IsCreating[playerid] = false;
			noclipdata[playerid][cameramode] 	= CAMERA_MODE_NONE;
			noclipdata[playerid][lrold]	   	 	= 0;
			noclipdata[playerid][udold]   		= 0;
			noclipdata[playerid][mode]   		= 0;
			noclipdata[playerid][lastmove]   	= 0;
			noclipdata[playerid][accelmul]   	= 0.0;
			IsCreating[playerid] 				= false;
			IsReSettingStart[playerid] 			= false;
			IsReSettingEnd[playerid] 			= false;
			SettingFirstLoc[playerid] 			= false;
			SettingLastLoc[playerid] 			= false;
			IsCamMoving[playerid] 				= false;
			coordInfo[playerid][MoveSpeed] 		= 1000;
			coordInfo[playerid][RotSpeed] 		= 1000;
			SendInfoMessage(playerid, "Izasli ste iz editora.");
		}
	}
	case dialog_MOVE_SPEED:
	{
		if(response)
		{
			if(strlen(inputtext))
			{
				if(IsNumeric(inputtext))
				{
					coordInfo[playerid][MoveSpeed] = strval(inputtext);
					new string[512];
					format(string, sizeof(string), "Please enter the desired {F58282]rotation{a9c4e4] time in milliseconds\n\nCurrent movement speed: \t{F58282]%i milliseconds\n{a9c4e4]Current rotation speed: \t{F58282]%i milliseconds\n\n\n{F58282]Note: {a9c4e4]1 second = 1000 milliseconds", coordInfo[playerid][MoveSpeed], coordInfo[playerid][RotSpeed]);
					SPD(playerid, dialog_ROT_SPEED, DSI, "Rotation Speed", string,"Ok","Cancel");
					IsReSettingStart[playerid] = false;
					IsReSettingEnd[playerid]   = false;
				}
				else
				{
					new string[512];
					format(string, sizeof(string), "Please enter the desired {F58282]movement{a9c4e4] time in milliseconds\n\nCurrent movement speed: \t{F58282]%i milliseconds\n{a9c4e4]Current rotation speed: \t{F58282]%i milliseconds\n{FF0000]NUMBERS ONLY\n\n{F58282]Note: {a9c4e4]1 second = 1000 milliseconds", coordInfo[playerid][MoveSpeed], coordInfo[playerid][RotSpeed]);
					SPD(playerid, dialog_MOVE_SPEED, DSI, "Movement Speed", string,"Ok","Cancel");
				}
			}
			else
			{
				new string[512];
				format(string, sizeof(string), "Please enter the desired {F58282]movement{a9c4e4] time in milliseconds\n\nCurrent movement speed: \t{F58282]%i milliseconds\n{a9c4e4]Current rotation speed: \t{F58282]%i milliseconds\n{FF0000]You need to enter a value\n\n{F58282]Note: {a9c4e4]1 second = 1000 milliseconds", coordInfo[playerid][MoveSpeed], coordInfo[playerid][RotSpeed]);
				SPD(playerid, dialog_MOVE_SPEED, DSI, "Movement Speed", string,"Ok","Cancel");
			}
		}
		else
		{
			SPD(playerid, dialog_MENU, DSL,"Next step?","Preview\nChange Start\nChange End\nChange Speed\nSave","Ok","Cancel");
		}
	}
	case dialog_ROT_SPEED:
	{
		if(response)
		{
			if(strlen(inputtext))
			{
				if(IsNumeric(inputtext))
				{
					coordInfo[playerid][RotSpeed] = strval(inputtext);
					SPD(playerid, dialog_MENU, DSL,"Next step?","Preview\nChange Start\nChange End\nChange Speed\nSave","Ok","Cancel");
					IsReSettingStart[playerid] = false;
					IsReSettingEnd[playerid]   = false;
				}
				else
				{
					new string[512];
					format(string, sizeof(string), "Please enter the desired {F58282]rotation{a9c4e4] time in milliseconds\n\nCurrent movement speed: \t{F58282]%i milliseconds\n{a9c4e4]Current rotation speed: \t{F58282]%i milliseconds\n{FF0000]NUMBERS ONLY!\n\n{F58282]Note: {a9c4e4]1 second = 1000 milliseconds", coordInfo[playerid][MoveSpeed], coordInfo[playerid][RotSpeed]);
					SPD(playerid, dialog_ROT_SPEED, DSI, "Rotation Speed", string,"Ok","Cancel");
				}
			}
			else
			{
				new string[512];
				format(string, sizeof(string), "Please enter the desired {F58282]rotation{a9c4e4] time in milliseconds\n\nCurrent movement speed: \t{F58282]%i milliseconds\n{a9c4e4]Current rotation speed: \t{F58282]%i milliseconds\n{FF0000]You need to enter a value\n\n{F58282]Note: {a9c4e4]1 second = 1000 milliseconds", coordInfo[playerid][MoveSpeed], coordInfo[playerid][RotSpeed]);
				SPD(playerid, dialog_ROT_SPEED, DSI, "Rotation Speed", string,"Ok","Cancel");
			}
		}
		else
		{
			new string[512];
			format(string, sizeof(string), "Please enter the desired {F58282]movement{a9c4e4] time in milliseconds\n\nCurrent movement speed: \t{F58282]%i milliseconds\n{a9c4e4]Current rotation speed: \t{F58282]%i milliseconds\n\n\n{F58282]Note: {a9c4e4]1 second = 1000 milliseconds", coordInfo[playerid][MoveSpeed], coordInfo[playerid][RotSpeed]);
			SPD(playerid, dialog_MOVE_SPEED, DSI, "Movement Speed",string,"Ok","Cancel");
		}
	}
	case dialog_EXPORTNAME:
	{
		if(response)
		{
			if(strlen(inputtext))
			{
				ExportMovement(playerid, inputtext);
			}
			else
			{
				SPD(playerid, dialog_EXPORTNAME, DSI, "Save movement","Enter a name for the movement\n{FF0000]You need to enter a text","Ok","Cancel");
			}
		}
		else
		{
			SPD(playerid, dialog_MENU, DSL,"Next step?","Preview\nChange Start\nChange End\nChange Speed\nSave","Ok","Cancel");
		}
	}
	case dialog_CLOSE_NEW:
	{
		if(response)
		{
			IsCreating[playerid]      = true;
			SettingFirstLoc[playerid] = true;
			EnterCamEditor(playerid);
		}
		else
		{
			CloseCamEditor(playerid);
			IsCreating[playerid] = false;
			noclipdata[playerid][cameramode] 	= CAMERA_MODE_NONE;
			noclipdata[playerid][lrold]	   	 	= 0;
			noclipdata[playerid][udold]   		= 0;
			noclipdata[playerid][mode]   		= 0;
			noclipdata[playerid][lastmove]   	= 0;
			noclipdata[playerid][accelmul]   	= 0.0;
			IsCreating[playerid] 				= false;
			IsReSettingStart[playerid] 			= false;
			IsReSettingEnd[playerid] 			= false;
			SettingFirstLoc[playerid] 			= false;
			SettingLastLoc[playerid] 			= false;
			IsCamMoving[playerid] 				= false;
			coordInfo[playerid][MoveSpeed] 		= 1000;
			coordInfo[playerid][RotSpeed] 		= 1000;
			SendInfoMessage(playerid, "Izasli ste iz editora.");
		}
	}
}
if(dialogid == dialog_STATS) {
	if(!response) return 1;
	if(response) {
		new str[320];
		  
		strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

		format(varstring, sizeof(varstring), ""col_server"%s - "col_white"event statistika\n\n", ImeIgraca(playerid));
		strcat(DialogStrgEx, varstring);

		format(varstring, sizeof(varstring), ""col_white"Osvojena 1 mesta: "col_server"[%d]\n", PlayerInfo[playerid][xEvent1Mesto]);
		strcat(DialogStrgEx, varstring);
		format(varstring, sizeof(varstring), ""col_white"Osvojena 2 mesta: "col_server"[%d]\n", PlayerInfo[playerid][xEvent2Mesto]);
		strcat(DialogStrgEx, varstring);
		format(varstring, sizeof(varstring), ""col_white"Osvojena 3 mesta: "col_server"[%d]\n", PlayerInfo[playerid][xEvent3Mesto]);
		strcat(DialogStrgEx, varstring);
		format(varstring, sizeof(varstring), ""col_white"Ubistva u DM zoni: "col_server"[%d]\n", PlayerInfo[playerid][xDMEventUbistva]);
		strcat(DialogStrgEx, varstring);

		format(varstring, sizeof(varstring), ""col_server"%s - "col_white"imovina u vlasnistvu igraca\n\n\n", ImeIgraca(playerid));
		strcat(DialogStrgEx, varstring);

		format(varstring, sizeof(varstring), ""col_server"Vozila\n\n");
		strcat(DialogStrgEx, varstring);

		format(varstring, sizeof(varstring), ""col_white"Slot 1: "col_server"[%s]\n", getVehicleName(PlayerInfo[playerid][xVoziloID][0]));
		strcat(DialogStrgEx, varstring);
		format(varstring, sizeof(varstring), ""col_white"Slot 2: "col_server"[%s]\n", getVehicleName(PlayerInfo[playerid][xVoziloID][1]));
		strcat(DialogStrgEx, varstring);
		format(varstring, sizeof(varstring), ""col_white"Slot 3: "col_server"[%s]\n", getVehicleName(PlayerInfo[playerid][xVoziloID][2]));
		strcat(DialogStrgEx, varstring);
		format(varstring, sizeof(varstring), ""col_white"Slot 4: "col_server"[%s]\n", getVehicleName(PlayerInfo[playerid][xVoziloID][3]));
		strcat(DialogStrgEx, varstring);
		strcat(DialogStrgEx, "\n\n");
		strcat(DialogStrgEx, ""col_server"Nepokretna imovina\n\n");
			
		for(new j = 0; j < 3; j ++) {
			if(PlayerInfo[playerid][xProperty][j] != -1) {

					format(str, sizeof(str), ""col_white"* Slot: "col_server"[%d]\n    "col_white"- "col_server"Vrsta: "col_white"[%s]\n    - "col_server"ID: "col_white"[%d]\n",
						j+1,
						GetPropertyAName(PlayerInfo[playerid][xProperty][j]),
						PlayerInfo[playerid][xProperty][j]);

					strcat(DialogStrgEx, str);

			}
			else {
					format(varstring, sizeof(varstring), ""col_white"* Slot: "col_server"[%d] - "col_white"PRAZNO\n", j+1);
					strcat(DialogStrgEx, varstring);
			}
		}
		strcat(DialogStrgEx, "\n\n");

		format(varstring, sizeof(varstring), ""col_server"Firma ID: "col_white"[%d]\n\n\n", PlayerInfo[playerid][xFirmaID]);
		strcat(DialogStrgEx, varstring);

		format(varstring, sizeof(varstring), ""col_server"Hotel ID: "col_white"[%d]\n\n\n", PlayerInfo[playerid][xHotelID]);
		strcat(DialogStrgEx, varstring);

		new year, month,day, tmphour, tmpminute, tmpsecond;
		getdate(year, month, day);
		gettimeEx(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		format(str, sizeof(str), "%02d/%02d/%d - %s%d:%s%d:%s%d", day, month, year, (tmphour < 10) ? ("0") : (""), tmphour, (tmpminute < 10) ? ("0") : (""), tmpminute, (tmpsecond < 10) ? ("0") : (""), tmpsecond);
		strcat(DialogStrgEx, str);
			
		SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "Zatvori", "");
		strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
	}
}
////////////////////////////////////////////////////////////////////////////
if(dialogid == dialog_LOGIN) {
	if(!response) return Kick(playerid);
	if(response) {
		if(!strcmp(inputtext, PlayerInfo[playerid][xLozinka], false) && !isnull(inputtext)) {
			INI_ParseFile(Korisnici(playerid), "OcitajKorisnika", .bExtra = true, .extra = playerid);

			if(fexist(Admini(playerid))) INI_ParseFile(Admini(playerid), "OcitajAdmina", .bExtra = true, .extra = playerid);

			if(fexist(Inventory(playerid))) INI_ParseFile(Inventory(playerid), "LoadInventory", .bExtra = true, .extra = playerid);

			INI_ParseFile(KladIme(playerid), "LoadKladionica", .bExtra = true, .extra = playerid);

			new datum[64]; new year, month,day;
			getdate(year, month, day);
			new tmphour, tmpminute, tmpsecond;
			gettimeEx(tmphour, tmpminute, tmpsecond);
			FixHour(tmphour);
			
			tmphour = shifthour;
				format(datum, sizeof(datum), "%02d.%02d.%d. u %d:%d:%d", day, month, year, tmphour, tmpminute, tmpsecond);
			strmid(PlayerInfo[playerid][xLastLogin], datum, 0, strlen(datum), 64);

			if(PlayerInfo[playerid][xFirmaID] != -1) {

				BusinessInfo[PlayerInfo[playerid][xFirmaID]][bNeaktivnost] = 0;
				SaveBusiness(PlayerInfo[playerid][xFirmaID]);
			}

			if(PlayerInfo[playerid][xProperty][0] != -1) {

				II[PlayerInfo[playerid][xProperty][0]][iNeaktivnost] = 0;
				SaveProperty(PlayerInfo[playerid][xProperty][0]);
			}
			if(PlayerInfo[playerid][xProperty][1] != -1) {

				II[PlayerInfo[playerid][xProperty][1]][iNeaktivnost] = 0;
				SaveProperty(PlayerInfo[playerid][xProperty][1]);
			}
			if(PlayerInfo[playerid][xProperty][2] != -1) {

				II[PlayerInfo[playerid][xProperty][2]][iNeaktivnost] = 0;
				SaveProperty(PlayerInfo[playerid][xProperty][2]);
			}

			if(PlayerInfo[playerid][xVoziloID][0] != -1) {

				VehicleInfo[PlayerInfo[playerid][xVoziloID][0]][vNeaktivnost] = 0;
				SaveVehicle(PlayerInfo[playerid][xVoziloID][0]);
			}
			if(PlayerInfo[playerid][xVoziloID][1] != -1) {

				VehicleInfo[PlayerInfo[playerid][xVoziloID][1]][vNeaktivnost] = 0;
				SaveVehicle(PlayerInfo[playerid][xVoziloID][1]);
			}
			if(PlayerInfo[playerid][xVoziloID][2] != -1) {

				VehicleInfo[PlayerInfo[playerid][xVoziloID][2]][vNeaktivnost] = 0;
				SaveVehicle(PlayerInfo[playerid][xVoziloID][2]);
			}
			if(PlayerInfo[playerid][xVoziloID][3] != -1) {

				VehicleInfo[PlayerInfo[playerid][xVoziloID][3]][vNeaktivnost] = 0;
				SaveVehicle(PlayerInfo[playerid][xVoziloID][3]);
			}

			new banfile[100]; format(banfile, sizeof(banfile), FILE_BAN, ImeIgraca(playerid));
			if(fexist(banfile)) {
				new File: UserFile = fopen(banfile, io_read);
				new razlogbana[128] = "Nepoznat";
				new key[256];
				new Data[256];
				while (fread(UserFile , Data, sizeof(Data))) {
					key = ini_GetKey(Data);
					if(strcmp(key , "Razlog" , true) == 0) {
						format(razlogbana, strlen(ini_GetValue (Data)), "%s", ini_GetValue(Data));
					}
				}
				fclose(UserFile);
				getdate(year, month, day);

				SendClientMessage(playerid, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Vas nalog je banovan sa servera, kikovani ste.");
				format(varstring, sizeof(varstring), "Razlog bana: %s", razlogbana);
				SendClientMessage(playerid, BELA, varstring);
				format(varstring, sizeof(varstring), "Vas server nick: %s, Danasnji datum: %d.%d.%d.", ImeIgraca(playerid), day, month, year);
				SendClientMessage(playerid, ZUTA, varstring);
				Fusion_Kick(playerid);
				return 1;
			}

			if(PlayerInfo[playerid][xPocetniTut] == 0) {
				EnableHealthBarForPlayer(playerid, false);
				ac_TogglePlayerSpectating(playerid, 1);
				InterpolateCameraPos(playerid, 1677.1746, -1303.1085, 481.0584, 1452.0430, -1314.4868, 176.0983, 50000, CAMERA_MOVE);
				InterpolateCameraLookAt(playerid, 1676.1766, -1312.1057, 479.6893, 1451.0450, -1314.4979, 174.7492, 50000, CAMERA_MOVE);
				ac_SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 1);
				ac_SetPlayerPos(playerid, 1463.7633,-1041.4501,26.8281);
				SendClientMessage(playerid, SIVA," ");
				SendClientMessage(playerid, SIVA," ");
				SendClientMessage(playerid, SIVA," ");
				SendClientMessage(playerid, SIVA," ");
				SendClientMessage(playerid, SIVA," ");
				SendClientMessage(playerid, SIVA," ");
				SendClientMessage(playerid, ZELENA, "~ DOBRO DOSLI NA FUSION GAMING ~");
				SendClientMessage(playerid, SIVA," ");
				SendClientMessage(playerid, BELA, "Pre svega zelimo Vam pozeleti dobrodoslicu na nas server.");
				SendClientMessage(playerid, BELA, "Ovo je tutorijal u kojem cemo vam pokazati najvaznije lokacije na serveru.");
				SendClientMessage(playerid, BELA, "Objasnicemo Vam kako uspesno zapoceti igru i uciniti je zanimljivom.");
				SendClientMessage(playerid, BELA, "Na pocetku imate 50000$ kod sebe, koji ce Vam pomoci.");
				TimerTutorial[playerid] = SetTimerEx("PocetniTut", 17000, false, "ii", playerid, 1);
				PocetniTutorialStartovan[playerid] = true;
			}
			else {

				if(fexist(Inventory(playerid))) ProveriInvOruzje[playerid] = SetTimerEx("ProveraInvOruzja", 10, false, "dd", playerid, 0);
				if(PlayerInfo[playerid][xRegistrovan] != 0){

					defer Set_To_Spawn(playerid);
				}
			}
		}
		else {
			if(LoginAttempt[playerid] == MAX_POKUSAJ_LOGINA - 1) {
				format(varstring, sizeof(varstring), "Uneli ste krivu lozinku %d puta i dobili kick!", MAX_POKUSAJ_LOGINA);
				SCM(playerid, CRVENA, varstring);
				Kick(playerid);
				return true;
			}
			LoginAttempt[playerid]++;
			SendErrorMessage(playerid, "Uneli ste pogresnu lozinku!");
			format(sDStrg, sizeof(sDStrg), DialogTekstovi[0], MAX_POKUSAJ_LOGINA);
			SPD(playerid, dialog_LOGIN, DSP, D_NASLOV, sDStrg, D_ODABERI, D_ODUSTANI);
		}
	}
	return true;}
else if(dialogid == dialog_REGISTER) {
	if(!response) return 1;
	if(response) {
		if(strlen(inputtext) < 6 || strlen(inputtext) > 20) {
			SPD(playerid, dialog_REGISTER, DSI, "Registracija", "Password moze sadrzavati minimalno 6 a maximalno 24 znaka", "Registruj", "Izlaz");
			return 1;
		}
		else {
			strmid(PlayerInfo[playerid][xLozinka], inputtext, 0, strlen(inputtext), 50);
			PlayerTextDrawSetString(playerid, RegisterTD[playerid][10], inputtext);
			PlayerTextDrawColor(playerid, RegisterTD[playerid][9], FUSIONGAMING);
			PlayerTextDrawShow(playerid, RegisterTD[playerid][9]);
			InputPassword[playerid] = true;
			SelectTextDraw(playerid, FUSIONGAMING);
		}
	}
}
else if(dialogid == dialog_POL) {
	if(response) { // if they clicked 'Yes' or pressed enter

		PlayerInfo[playerid][xPol] = 1;
		RegSex[playerid] = 1;
		BiraPol[playerid] = 0;
		PlayerTextDrawSetString(playerid, RegisterTD[playerid][18], "Musko");
		PlayerTextDrawColor(playerid, RegisterTD[playerid][17], FUSIONGAMING);
		PlayerTextDrawShow(playerid, RegisterTD[playerid][17]);
		PlayerInfo[playerid][xSkin] = MaleSkinIDs[0][0];
	}
	else {// Pressed ESC or clicked cancel

		PlayerInfo[playerid][xPol] = 2;
		RegSex[playerid] = 2;
		BiraPol[playerid] = 0;
		PlayerTextDrawColor(playerid, RegisterTD[playerid][17], FUSIONGAMING);
		PlayerTextDrawShow(playerid, RegisterTD[playerid][17]);
		PlayerTextDrawSetString(playerid, RegisterTD[playerid][18], "Zensko");
		PlayerInfo[playerid][xSkin] = FemaleSkinIDs[0][0];
	}
	return 1; // We handled a dialog, so return 1. Just like OnPlayerCommandText.
}
else if(dialogid == dialog_COUNTRY) {
	if(!response) return 1;
	if(response) {
		switch(listitem) {
			case 0: {
				PlayerInfo[playerid][xDrzava] = 3;
				PlayerTextDrawSetString(playerid, RegisterTD[playerid][16], "Srbija");
				PlayerTextDrawColor(playerid, RegisterTD[playerid][15], FUSIONGAMING);
				PlayerTextDrawShow(playerid, RegisterTD[playerid][15]);
				ChoseCountry[playerid] = true;
				SelectTextDraw(playerid, FUSIONGAMING);
			}
			case 1: {
				PlayerInfo[playerid][xDrzava] = 2;
				PlayerTextDrawSetString(playerid, RegisterTD[playerid][16], "Hrvatska");
				PlayerTextDrawColor(playerid, RegisterTD[playerid][15], FUSIONGAMING);
				PlayerTextDrawShow(playerid, RegisterTD[playerid][15]);
				ChoseCountry[playerid] = true;
				SelectTextDraw(playerid, FUSIONGAMING);
			}
			case 2: {
				PlayerInfo[playerid][xDrzava] = 1;
				PlayerTextDrawSetString(playerid, RegisterTD[playerid][16], "Makedonija");
				PlayerTextDrawColor(playerid, RegisterTD[playerid][15], FUSIONGAMING);
				PlayerTextDrawShow(playerid, RegisterTD[playerid][15]);
				ChoseCountry[playerid] = true;
				SelectTextDraw(playerid, FUSIONGAMING);
			}
			case 3: {
				PlayerInfo[playerid][xDrzava] = 4;
				PlayerTextDrawSetString(playerid, RegisterTD[playerid][16], "Crna_Gora");
				PlayerTextDrawColor(playerid, RegisterTD[playerid][15], FUSIONGAMING);
				PlayerTextDrawShow(playerid, RegisterTD[playerid][15]);
				ChoseCountry[playerid] = true;
				SelectTextDraw(playerid, FUSIONGAMING);
			}
			case 4: {
				PlayerInfo[playerid][xDrzava] = 5;
				PlayerTextDrawSetString(playerid, RegisterTD[playerid][16], "BiH");
				PlayerTextDrawColor(playerid, RegisterTD[playerid][15], FUSIONGAMING);
				PlayerTextDrawShow(playerid, RegisterTD[playerid][15]);
				ChoseCountry[playerid] = true;
				SelectTextDraw(playerid, FUSIONGAMING);
			}
			case 5: {
				PlayerInfo[playerid][xDrzava] = 6;
				PlayerTextDrawSetString(playerid, RegisterTD[playerid][16], "Ostalo");
				PlayerTextDrawColor(playerid, RegisterTD[playerid][15], FUSIONGAMING);
				PlayerTextDrawShow(playerid, RegisterTD[playerid][15]);
				ChoseCountry[playerid] = true;
				SelectTextDraw(playerid, FUSIONGAMING);
			}
		}
	}
}
else if(dialogid == dialog_AGE) {
	if(!response) return 1;
	if(response) {
		new age = strval(inputtext);
		if(age < 12 || age > 70) {
			SPD(playerid, dialog_AGE, DSI, "Godine", "U prazni prostor ispod unesite vaše godine\nMinimalno 12 maximalno 70", "Unos", "Izadji");
		}
		PlayerTextDrawSetString(playerid, RegisterTD[playerid][14], inputtext);
		PlayerTextDrawColor(playerid, RegisterTD[playerid][13], FUSIONGAMING);
			PlayerTextDrawShow(playerid, RegisterTD[playerid][13]);
		PlayerInfo[playerid][xGodine] = age;
		InputAge[playerid] = true;
		SelectTextDraw(playerid, FUSIONGAMING);
	}
}
else if(dialogid == dialog_MAIL) {
	if(!response) return 1;
	if(response) {
		new mailstring = strfind(inputtext, "@", true), tackastring = strfind(inputtext, ".", true);
		if(mailstring == -1 || tackastring == -1) {
			SPD(playerid, dialog_MAIL, DSI, "Mail", "U prazni prostor ispod unesite vasu e-mail adresu.\nE-mail adresa ce nam posluziti u vracanju vasih passworda.(Bez maila nema vracanja passworda)", "Unos", "Izlaz");
		}
		else {
			strmid(PlayerInfo[playerid][xEmail], inputtext, 0, strlen(inputtext), 34);
			PlayerTextDrawSetString(playerid, RegisterTD[playerid][12], inputtext);
			PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][12], 0.200000, 1.000000);
			PlayerTextDrawColor(playerid, RegisterTD[playerid][11], FUSIONGAMING);
			PlayerTextDrawShow(playerid, RegisterTD[playerid][11]);
			PlayerTextDrawShow(playerid, RegisterTD[playerid][12]);
			InputMail[playerid] = true;
			SelectTextDraw(playerid, FUSIONGAMING);
		}
	}
}
else if(dialogid == dialog_MARKETBUY) {
	if(!response) return true;
	if(response) {
		static
			id = -1;

		if(PlayerInfo[playerid][xNovac] < UkupnaCena[playerid]) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
		UkupnaCena[playerid] = 0;
		format(varstring, sizeof(varstring), "%s placa kasirki, te uzima stvari iz korpe.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		if(UzeoIzMarketa[playerid][0] >= 1) {
		
				if(UzeoIzMarketa[playerid][0] >= 10) return SendErrorMessage(playerid, "Ne mozete imati vise od 10 pizza.");
				id = Inventory_Add(playerid, "Pizza", 2702, UzeoIzMarketa[playerid][0]);

				if(id != -1) {
					new pizza = UzeoIzMarketa[playerid][0];
					DajIgracuNovac(playerid, -pizza*100);
					UzeoIzMarketa[playerid][0] = 0;
					BusinessMoney(uFirmi[playerid], pizza*80, playerid);
				}
				else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");
		}
		if(UzeoIzMarketa[playerid][1] == 1) {
			DajIgracuNovac(playerid, -2000);
			Uze[playerid] = true;
			UzeoIzMarketa[playerid][1] = 0;
			BusinessMoney(uFirmi[playerid], 1600, playerid);
		}
		if(UzeoIzMarketa[playerid][2] == 1) {
			if(Inventory_HasItem(playerid, "Maska")) {
				SendErrorMessage(playerid, "Vec imate masku.");
			}
			else if(!Inventory_HasItem(playerid, "Maska")) {

					id = Inventory_Add(playerid, "Maska", 19036);

					if(id != -1) {
						DajIgracuNovac(playerid, -80000);
						new rand = 100000 + random(899999);
						PlayerInfo[playerid][xMaskID] = rand;
						UzeoIzMarketa[playerid][2] = 0;
						BusinessMoney(uFirmi[playerid], 18400, playerid);
					}
					else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");
			}
		}
		if(UzeoIzMarketa[playerid][3] >= 1) {

				id = Inventory_Add(playerid, "Sok", 2647, UzeoIzMarketa[playerid][3]);

				if(id != -1) {
					new Sok = UzeoIzMarketa[playerid][3];
					DajIgracuNovac(playerid, -Sok*400);
					UzeoIzMarketa[playerid][3] = 0;
					BusinessMoney(uFirmi[playerid], Sok*300, playerid);
				}
				else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");

		}
		if(UzeoIzMarketa[playerid][4] >= 1) {

				id = Inventory_Add(playerid, "Pivo", 1543, UzeoIzMarketa[playerid][4]);

				if(id != -1) {
					new Pivo = UzeoIzMarketa[playerid][4];
					DajIgracuNovac(playerid, -Pivo*550);
					UzeoIzMarketa[playerid][4] = 0;
					BusinessMoney(uFirmi[playerid], Pivo*400, playerid);
				}
				else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");

		}
		if(UzeoIzMarketa[playerid][5] >= 1) {

				if(UzeoIzMarketa[playerid][5] >= 10) return SendErrorMessage(playerid, "Ne mozete imati vise od 10 hamburgera.");
				id = Inventory_Add(playerid, "Hamburger", 2703, UzeoIzMarketa[playerid][5]);

				if(id != -1) {
					new hamburger = UzeoIzMarketa[playerid][5];
					DajIgracuNovac(playerid, -hamburger*650);
					UzeoIzMarketa[playerid][5] = 0;
					BusinessMoney(uFirmi[playerid], hamburger*400, playerid);
				}
				else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");

		}
		if(UzeoIzMarketa[playerid][6] >= 1) {

				if(UzeoIzMarketa[playerid][6] >= 10) return SendErrorMessage(playerid, "Ne mozete imati vise od 10 piletina.");
				id = Inventory_Add(playerid, "Piletina", 2663, UzeoIzMarketa[playerid][6]);

				if(id != -1) {
					new pilence = UzeoIzMarketa[playerid][6];
					DajIgracuNovac(playerid, -pilence*2500);
					UzeoIzMarketa[playerid][6] = 0;
					BusinessMoney(uFirmi[playerid], pilence*2000, playerid);
				}
				else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");

		}
		if(UzeoIzMarketa[playerid][7] == 1) {
			DajIgracuNovac(playerid, -6000);
			PlayerInfo[playerid][xCigare] += 20;
			UzeoIzMarketa[playerid][7] = 0;
			BusinessMoney(uFirmi[playerid], 6000, playerid);
		}
		if(UzeoIzMarketa[playerid][8] == 1) {
			DajIgracuNovac(playerid, -4000);
			PlayerInfo[playerid][xUpaljac] = 1;
			UzeoIzMarketa[playerid][8] = 0;
			BusinessMoney(uFirmi[playerid], 4000, playerid);
		}
		if(UzeoIzMarketa[playerid][9] >= 1) {
			new sodab = UzeoIzMarketa[playerid][9];
			DajIgracuNovac(playerid, -sodab*800);
			PlayerInfo[playerid][xSodaB] += sodab;
			UzeoIzMarketa[playerid][9] = 0;
			BusinessMoney(uFirmi[playerid], sodab*600, playerid);
		}
		if(UzeoIzMarketa[playerid][10] >= 1) {
			new desvoda = UzeoIzMarketa[playerid][10];
			DajIgracuNovac(playerid, -desvoda*400);
			PlayerInfo[playerid][xDesVoda] += desvoda;
			UzeoIzMarketa[playerid][10] = 0;
			BusinessMoney(uFirmi[playerid], desvoda*300, playerid);
		}
		SavePlayer(playerid);
	}
}
else if(dialogid == dialog_DUELINVITE) {
	if (!response) {
		new id = PozvaoGa[playerid];
		SendClientMessage(playerid, SVETLOPLAVA, "Odbio si poziv za duel!");
		SendClientMessage(id, SVETLOPLAVA, "Igrac je odbio poziv za duel");
		PozvanDuel[playerid] = 0;
		PozvaoGa[playerid] = 0;
		PozvanDuel[id] = 0;
		DuelOruzje[id] = 0;
		DuelHP[id] = 0;
		DuelArmor[id] = 0; 
	}
	if (response) {
		new id = PozvaoGa[playerid];
		if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, SVETLOPLAVA, "Igrac koji vas je pozvao je izasao sa servera.");
		va_SendClientMessage(playerid, SVETLOPLAVA, "Prihvatili ste poziv za duel sa %s! Uskoro ce poceti...", ImeIgraca(id));
		va_SendClientMessage(id, SVETLOPLAVA, "Igrac %s je prihvatio duel! Uskoro ce poceti...", ImeIgraca(playerid));
		TogglePlayerControllable(playerid, 0);
		TogglePlayerControllable(id, 0);
		SetPlayerPos(playerid, -1584.9420, -2731.6934, 48.5391);
		SetPlayerPos(id, -1631.6122, -2696.2061, 48.5391);
		defer DuelTimer(playerid, id);
		DuelCount[playerid] = 10;
		GameTextForPlayer(playerid, "~g~DUEL POCINJE!", 3000, 3);
		GameTextForPlayer(id, "~g~DUEL POCINJE!", 3000, 3);
		new oruzije = DuelOruzje[id];
		new health = DuelHP[id];
		new armor = DuelArmor[id];
		GivePlayerWeapon(playerid, oruzije, 500);
		GivePlayerWeapon(id, oruzije, 500);
		SetPlayerHealth(playerid, health);
		SetPlayerHealth(id, health);
		SetPlayerArmour(id, armor);
		SetPlayerArmour(playerid, armor);
		SetPlayerVirtualWorld(playerid, id);
		SetPlayerVirtualWorld(id, id);
	}
}
else if(dialogid == dialog_DUELGUN) {
	if(!response)
	{
		DuelOruzje[playerid] = 0;
		DuelHP[playerid] = 0;
		DuelArmor[playerid] = 0;
		SendClientMessage(playerid, SVETLOPLAVA, "Odustao si od duela!");
		return 1;
	}
	if(response)
	{
		switch(listitem)
		{
			case 0: 
			{
				DuelOruzje[playerid] = 24;
				SendClientMessage(playerid, SVETLOPLAVA, "Oruzje za Duel: Deagle");
				SPD(playerid, dialog_DUELHP, DSI, "Odabir Helta", "Odaberi sa koliko helta zelis da pocnes duel(MAX 100 | MIN 1)", "Odaberi", "Nazad");
			}
			case 1:
			{
				DuelOruzje[playerid] = 30;
				SendClientMessage(playerid, SVETLOPLAVA, "Oruzje za Duel: AK-47");
				SPD(playerid, dialog_DUELHP, DSI, "Odabir Helta", "Odaberi sa koliko helta zelis da pocnes duel(MAX 100 | MIN 1)", "Odaberi", "Nazad");
			}
			case 2:
			{
				DuelOruzje[playerid] = 16;
				SendClientMessage(playerid, SVETLOPLAVA, "Oruzje za Duel: Bomba");
				SPD(playerid, dialog_DUELHP, DSI, "Odabir Helta", "Odaberi sa koliko helta zelis da pocnes duel(MAX 100 | MIN 1)", "Odaberi", "Nazad");
			}
			case 3:
			{
				DuelOruzje[playerid] = 18;
				SendClientMessage(playerid, SVETLOPLAVA, "Oruzje za Duel: Molotov");
				SPD(playerid, dialog_DUELHP, DSI, "Odabir Helta", "Odaberi sa koliko helta zelis da pocnes duel(MAX 100 | MIN 1)", "Odaberi", "Nazad");
			}
			case 4:
			{
				DuelOruzje[playerid] = 25;
				SendClientMessage(playerid, SVETLOPLAVA, "Oruzje za Duel: ShotGun");
				SPD(playerid, dialog_DUELHP, DSI, "Odabir Helta", "Odaberi sa koliko helta zelis da pocnes duel(MAX 100 | MIN 1)", "Odaberi", "Nazad");
			}
			case 5:
			{
				DuelOruzje[playerid] = 31;
				SendClientMessage(playerid, SVETLOPLAVA, "Oruzje za Duel: M4");
				SPD(playerid, dialog_DUELHP, DSI, "Odabir Helta", "Odaberi sa koliko helta zelis da pocnes duel(MAX 100 | MIN 1)", "Odaberi", "Nazad");
			}
			case 6:
			{
				DuelOruzje[playerid] = 26;
				SendClientMessage(playerid, SVETLOPLAVA, "Oruzje za Duel: SawnOff ShotGun");
				SPD(playerid, dialog_DUELHP, DSI, "Odabir Helta", "Odaberi sa koliko helta zelis da pocnes duel(MAX 100 | MIN 1)", "Odaberi", "Nazad");
			}
		}
	}
}
else if(dialogid == dialog_DUELHP) {
	if(!response) return SPD(playerid, dialog_DUELGUN, DIALOG_STYLE_LIST, "Odabir Oruzja", "Deagle\nAK-47\nBomba\nMolotov\nShotGun\nM4\nSawnOff ShotGun", "Odaberi", "Odustani");
	if(response)
	{
		new zivot = strval( inputtext );
		if(zivot > 100 || zivot < 1) return SPD(playerid, dialog_DUELHP, DSI, "Odabir Helta", "Odaberi sa koliko helta zelis da pocnes duel(MAX 100 | MIN 1)", "Odaberi", "Nazad");
		DuelHP[playerid] = zivot;
		va_SendClientMessage(playerid, SVETLOPLAVA, "Odabrao si %d helta za duel!", DuelHP[playerid]);
		SPD(playerid, dialog_DUELARMOR, DSI, "Odabir Pancira", "Odaberi sa koliko pancira zelis da pocnes duel(MAX 100 | MIN 1)", "Odaberi", "Nazad");
	}
}
else if(dialogid == dialog_DUELARMOR) {
	if(!response) return SPD(playerid, dialog_DUELHP, DSI, "Odabir Helta", "Odaberi sa koliko helta zelis da pocnes duel(MAX 100 | MIN 1)", "Odaberi", "Nazad");
	if(response)
	{
		new pancir = strval( inputtext );
		if(pancir > 100 || pancir < 1) return SPD(playerid, dialog_DUELARMOR, DSI, "Odabir Pancira", "Odaberi sa koliko pancira zelis da pocnes duel(MAX 100 | MIN 1)", "Odaberi", "Nazad");
		DuelArmor[playerid] = pancir;
		va_SendClientMessage(playerid, SVETLOPLAVA, "Odabrao si %d armora za duel!", DuelArmor[playerid]);
		SPD(playerid, dialog_DUELPROTIVNIK, DSI, "Odabir Protivnika", "Unesi ID protivnika", "Odaberi", "Nazad");
	}
}
else if(dialogid == dialog_DUELPROTIVNIK) {
	if(!response) return SPD(playerid, dialog_DUELARMOR, DSI, "Odabir Pancira", "Odaberi sa koliko pancira zelis da pocnes duel(MAX 100 | MIN 1)", "Odaberi", "Nazad");
	if(response)
	{
		new id = strval(inputtext), Float:Pos[3];
		if(!IsPlayerConnected(id)) return SPD(playerid, dialog_DUELPROTIVNIK, DSI, "Odabir Protivnika", "{FF0000]Protivnik nije online!\n{FFFFFF] Unesi ID protivnika...", "Odaberi", "Nazad");
		if(PozvanDuel[id] == 1) return SPD(playerid, dialog_DUELPROTIVNIK, DSI, "Odabir Protivnika", "{FF0000]Protivnik je vec pozvan od nekoga!\n{FFFFFF] Unesi ID protivnika...", "Odaberi", "Nazad");
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		if(!IsPlayerInRangeOfPoint(id, 6.0, Pos[0], Pos[1], Pos[2])) return SPD(playerid, dialog_DUELPROTIVNIK, DSI, "Odabir Protivnika", "{FF0000]Taj igrac je previse udaljen od Vas!\n{FFFFFF]Unesi ID protivnika...", "Odaberi", "Nazad");
		new string[128];
		format(string, 128, "{FFFFFF]Igrac %s vas je pozvao na duel.\nOruzje: %s | Health: %dhp | Armor: %d", ImeIgraca(playerid), WeapNames[DuelOruzje[playerid}}, DuelHP[playerid], DuelArmor[playerid]);
		SPD(id, dialog_DUELINVITE, DSMSG, "Duel Poziv", string, "Prihvati", "Odbij");
		va_SendClientMessage(playerid, SVETLOPLAVA, "Pozvao si igraca %s na duel!", ImeIgraca(id));
		PozvanDuel[id] = 1;
		PozvanDuel[playerid] = 1;
		PozvaoGa[id] = playerid;
	}
}
else if(dialogid == dialog_AHELP) {
	if(!response) return true;
	if(response) {
		switch(listitem)
		{
			case 0: // A1
			{
				if(PlayerInfo[playerid][xAdmin] >= 1)
				{
					new string[580];
					strcat(string, ""col_server"AFG 1 | "col_white"/a /aduty /aoff /ao /pc /g /hc /lp /pm /admini /helperi /promoteri /youtubers /jail /freeze /unfreeze /vips\n");
					strcat(string, ""col_server"AFG 1 | "col_white"/ban /rtcveh /rtc /getcar /nick /mute /spec /specoff /pustimuziku /rac /kick /prison /aport /banip /altchat\n");
					strcat(string, ""col_server"AFG 1 | "col_white"/spavnuj /cc /jetpack /ubij /check /eventhelp /pweapons /zatvoreni /mutead /trazeni /utisani /maskirani /lc\n");
					strcat(string, ""col_server"AFG 1 | "col_white"/fv /slap /apark /aupali /goto /gethere /vpnlist /nitro /afk /lastseen /rb /rrb /rrball");
					SPD(playerid, dialog_HELP, DSMSG, ""col_server"Admin Komande", string, "Ok", "");
				}
				else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu sekciju.");
			}
			case 1: // A2
			{
				if(PlayerInfo[playerid][xAdmin] >= 2)
				{
					new string[175];
					strcat(string, ""col_server"AFG 2 | "col_white"/offprison /offjail /warn /offmute /unmute /setskin /unmutead /disarm /undisarm /offwarn /alkatraz /unjail");
					SPD(playerid, dialog_HELP, DSMSG, ""col_server"Admin Komande", string, "Ok", "");
				}
				else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu sekciju.");
			}
			case 2: // A3
			{
				if(PlayerInfo[playerid][xAdmin] >= 3)
				{
					new string[128];
					strcat(string, ""col_server"AFG 3 | "col_white"/unbanip /entercar /count /unban /unprison /setarmor");
					SPD(playerid, dialog_HELP, DSMSG, ""col_server"Admin Komande", string, "Ok", "");
				}
				else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu sekciju.");
			}
			case 3: // A4
			{
				if(PlayerInfo[playerid][xAdmin] >= 4)
				{
					new string[256];
					strcat(string, ""col_server"AFG 4 | "col_white"/aclear /setint /setvw /gotocar /napunivozila /sethp /ukloniradio /resetrob /skiniposao\n");
					strcat(string, ""col_server"AFG 4 | "col_white"/proveriinv /resetujinv /vreme /tod /proveriidvozila /glasanje /prekiniglasanje");
					SPD(playerid, dialog_HELP, DSMSG, ""col_server"Admin Komande", string, "Ok", "");
				}
				else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu sekciju.");
			}
			case 4: // Head Admin
			{
				if(PlayerInfo[playerid][xAdmin] >= 5)
				{
					new string[420];
					strcat(string, ""col_server"HEAD AFG | "col_white"/makeleader /skiniorgkaznu /ogetcar /mark /gotomark /healall /armorall /helperstats /napunipumpe\n");
					strcat(string, ""col_server"HEAD AFG | "col_white"/izbaciclana /ubaciclana /smenilidera /spisakclanova /offizbaciclana /vremenskiban /offban\n");
					strcat(string, ""col_server"HEAD AFG | "col_white"/izracunajorgslotove /ocistislot /makehelper /dajdozvolu /randomid /dopunihangar /resetujhangar");
					SPD(playerid, dialog_HELP, DSMSG, ""col_server"Admin Komande", string, "Ok", "");
				}
				else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu sekciju.");
			}
			case 5: // Direktor
			{
				if(PlayerInfo[playerid][xAdmin] >= 6)
				{
					new string[873];
					strcat(string, ""col_server"DIREKTOR | "col_white"/server /anticheat /neaktivnost /edit /givemoney /promenipol /sveskole /skinisveskole /rpplus /rpminus /deleteacc /givegun\n");
					strcat(string, ""col_server"DIREKTOR | "col_white"/proverifirmu /proveriimovinu /promeniadminkod /togg /nosms /togw /razvedi /resetplayerpassword /listavozila /vremenskiunban\n");
					strcat(string, ""col_server"DIREKTOR | "col_white"/vozilazaaukciju /richlist /fine /oport /pport /vport /tunecar /viphelp /unwarn /adminstats /acduty /vattach /setstats /offsetstats\n");
					strcat(string, ""col_server"DIREKTOR | "col_white"/offcheck /muteall /unmuteall /gethereall /smeniadmina /smenipromotera /smenihelpera /dboja /fullskill /skinifullskill /promeniimefirme\n");
					strcat(string, ""col_server"DIREKTOR | "col_white"/getsvepromotere /dajpromoterima /getsvehelpere /dajhelperima /postavivatromet /lansirajvatromet /dajsvima /givefgrank /maintenancebreak\n");
					strcat(string, ""col_server"VODJA ADMINA | "col_white"/makeadmin /smeniadmina /adminstats");
					SPD(playerid, dialog_HELP, DSMSG, ""col_server"Admin Komande", string, "Ok", "");
				}
				else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu sekciju.");
			}
			case 6: // Vlasnik
			{
				if(PlayerInfo[playerid][xAdmin] >= 7)
				{
					new string[440];
					strcat(string, ""col_server"VLASNIK | "col_white"/adresa /kickall /unprisonall /dopustipromenuimena /makevip /dopuniresurse /kreirajrent /izbrisirent /aktorpanel\n");
					strcat(string, ""col_server"VLASNIK | "col_white"/specijalnoime /donatorslot /hidenames /shownames /donatorskeboje /xgoto /pomerilokaciju /makeyoutuber /owneri\n");
					strcat(string, ""col_server"VLASNIK | "col_white"/trenutnekordinate /1 /prodajwof /obrisiwof /napraviwof");
					SPD(playerid, dialog_HELP, DSMSG, ""col_server"Admin Komande", string, "Ok", "");
				}
				else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu sekciju.");
			}
		}
		}
	}
else if(dialogid == dialog_SETTINGS) {
	if(!response) return true;
	if(response) {
		if(listitem == 0) {
			if(PlayerInfo[playerid][xLevel] >= 10) return SendErrorMessage(playerid, "Ova opcija Vam je onemogucena jer ste 10+ level.");
			if(PlayerInfo[playerid][xSPoruke] == 0)
			{
				PlayerInfo[playerid][xSPoruke] = 1;
				SendInfoMessage(playerid, "Ukljucili ste random poruke.");
			}
			else
			{
				PlayerInfo[playerid][xSPoruke] = 0;
				SendInfoMessage(playerid, "Iskljucili ste random poruke.");        			
			}
		}
		if(listitem == 1) {
			if(PlayerInfo[playerid][xAdmin] >= 1) return SendErrorMessage(playerid, "Ne mozete da iskljucite ovu opciju jer ste admin.");
			if(PlayerInfo[playerid][xSOglasi] == 0)
			{
				PlayerInfo[playerid][xSOglasi] = 1;
				SendInfoMessage(playerid, "Ukljucili ste oglase.");
			}
			else
			{
				PlayerInfo[playerid][xSOglasi] = 0;
				SendInfoMessage(playerid, "Iskljucili ste oglase.");        			
			}
		}
		if(listitem == 2) {
			if(PlayerInfo[playerid][xAdmin] >= 1) return SendErrorMessage(playerid, "Ne mozete da iskljucite ovu opciju jer ste admin.");
			if(PlayerInfo[playerid][xSVesti] == 0)
			{
				PlayerInfo[playerid][xSVesti] = 1;
				SendInfoMessage(playerid, "Ukljucili ste vesti.");
			}
			else
			{
				PlayerInfo[playerid][xSVesti] = 0;
				SendInfoMessage(playerid, "Iskljucili ste vesti.");        			
			}
		}
		if(listitem == 3) {
			if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Morate biti u organizaciji.");
			if(PlayerInfo[playerid][xSFChat] == 0)
			{
				PlayerInfo[playerid][xSFChat] = 1;
				SendInfoMessage(playerid, "Ukljucili ste Family Chat (/f).");
			}
			else
			{
				PlayerInfo[playerid][xSFChat] = 0;
				SendInfoMessage(playerid, "Iskljucili ste Family Chat (/f).");        			
			}
		}
		if(listitem == 4) {
			if(PlayerInfo[playerid][xBrojTelefona] != 0) {
				if(PlayerInfo[playerid][xSTelefon] == 0)
				{
					PlayerInfo[playerid][xSTelefon] = 1;
					SendInfoMessage(playerid, "Ukljucili ste telefon.");
				}
				else
				{
					PlayerInfo[playerid][xSTelefon] = 0;
					SendInfoMessage(playerid, "Iskljucili ste telefon.");        			
				}
			}
			else
			{
				SendErrorMessage(playerid, "Nemate mobilni telefon / karticu.");
			}
		}
		if(listitem == 5) {
			TogPlayerHud(playerid);
		}
	}
}
else if(dialogid == dialog_SERVERMI) {
	if(!response) return true;
	if(response) {
		if(listitem == 0) {
			if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu sekciju.");
			SPD(playerid, dialog_SERVERSTATS, DSL, D_NASLOV, "Informacije servera\nMogucnost kupovine vozila\nHostname servera\nMogucnost slanja pitanja\nMogucnost slanja reporta\nPromeni pocetni level\nPromeni pocetni novac\nMogucnost postavljanja oglasa\nMogucnost registracije\nHappyJob\nHappyHours", D_ODABERI, D_ODUSTANI);
		}
		if(listitem == 1) {
			foreach(new i : Player) {
				if(PlayerLogged[i] == true) {
					SavePlayer(i);
				}
			}
			SCMA(FUSIONGAMING, "Svi korisnicki nalozi su sacuvani.");
		}
		if(listitem == 2) {
			if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu sekciju.");
			SPD(playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nSafe Zona\nBrza Hrana\nGovornica\nNargila\nVip port\nPromoter port", D_ODABERI, D_NAZAD); }
		if(listitem == 3) {
			if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu sekciju.");
			SPD(playerid, dialog_IZBRISISVE, DSL, D_NASLOV, "Organizacije\nFirme\nImovina\nKontejner\nVozilo\nBankomat\nAuto salon\nPort orge\nHotel\nKapija\nImanje\nGaraza\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nBrza Hrana\nGovornica\nNargila", D_ODABERI, D_ODUSTANI); }
		if(listitem == 4) {
			if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu sekciju.");
			SPD(playerid, dialog_IZMENISVE, DSL, D_NASLOV, "Organizacije\nFirme\nVozilo\nImovina\nHotel\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nHelper port\nAuto Salon\nGang Zona\nVip port\nPromoter port", D_ODABERI, D_ODUSTANI); }
		if(listitem == 5) {
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			for(new i = 1; i < MAX_ORG; i++)
			{
				new oFile[40];
				format(oFile, sizeof(oFile), O_FILE, i);
				if(fexist(oFile))
				{
					format(varstring, sizeof(varstring), "ID : %d | Ime organizacije: %s\n", OI[i][oID], OI[i][oName]);
					strcat(DialogStrgEx, varstring);
				}
			}
			SPD(playerid, dialog_ORGLIST, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
		}
	}
}
else if(dialogid == dialog_DAILYDEAL) {
	if(!response) return true;
	if(response) {
		switch(listitem) {
			case 0:
			{
				ServerInfo[HappyJob] = 1;
				SCMA(-1, "{005b87] [ FG:RPG ] : {FFFFFF]Vlasnik je ukljucio duplu platu - Kosac Trave.");
				SendRconCommand("hostname Fusion Gaming - 2x Kosac Trave");
				SaveServerStats();   
				TextDrawSetString(FG_InGame[66], "HJ:_~y~K.TRAVE");
				TextDrawShowForAll(FG_InGame[66]); 		
			}
			case 1:
			{
				ServerInfo[HappyJob] = 2; 
				SCMA(-1, "{005b87] [ FG:RPG ] : {FFFFFF]Vlasnik je ukljucio duplu platu - Farmer.");
				SendRconCommand("hostname Fusion Gaming - 2x Farmer");
				SaveServerStats();   
				TextDrawSetString(FG_InGame[66], "HJ:_~y~FARMER");
				TextDrawShowForAll(FG_InGame[66]); 	         	            		
			}
			case 2:
			{
				ServerInfo[HappyJob] = 3;
				SCMA(-1, "{005b87] [ FG:RPG ] : {FFFFFF]Vlasnik je ukljucio duplu platu - Bus Vozac.");
				SendRconCommand("hostname Fusion Gaming - 2x Bus Vozac");
				SaveServerStats();
				TextDrawSetString(FG_InGame[66], "HJ:_~y~BUS V.");
				TextDrawShowForAll(FG_InGame[66]); 	
			}
			case 3:
			{
				ServerInfo[HappyJob] = 4;
				SCMA(-1, "{005b87] [ FG:RPG ] : {FFFFFF]Vlasnik je ukljucio duplu platu - Rudar.");
				SendRconCommand("hostname Fusion Gaming - 2x Rudar");
				SaveServerStats();
				TextDrawSetString(FG_InGame[66], "HJ:_~y~RUDAR");
				TextDrawShowForAll(FG_InGame[66]); 	
			}
			case 4:
			{
				SendErrorMessage(playerid, "Posao Komunalac je trenutno onemogucen.");
			}
			case 5:
			{
				ServerInfo[HappyJob] = 6;
				SCMA(-1, "{005b87] [ FG:RPG ] : {FFFFFF]Vlasnik je ukljucio duplu platu - Prevoznik.");
				SendRconCommand("hostname Fusion Gaming - 2x Prevoznik");
				SaveServerStats();
				TextDrawSetString(FG_InGame[66], "HJ:_~y~PREVOZ.");
				TextDrawShowForAll(FG_InGame[66]); 	
			}
			case 6:
			{
				ServerInfo[HappyJob] = 7;
				SCMA(-1, "{005b87] [ FG:RPG ] : {FFFFFF]Vlasnik je ukljucio duplu platu - Drvoseca.");
				SendRconCommand("hostname Fusion Gaming - 2x Drvoseca");
				SaveServerStats();			
				TextDrawSetString(FG_InGame[66], "HJ:_~y~DRVOSE.");
				TextDrawShowForAll(FG_InGame[66]); 	
			}
			case 7:
			{
				ServerInfo[HappyJob] = 8;
				SCMA(-1, "{005b87] [ FG:RPG ] : {FFFFFF]Vlasnik je ukljucio duplu platu - Proizvodjac Namestaja.");
				SendRconCommand("hostname Fusion Gaming - 2x P. Namestaja");
				SaveServerStats();
				TextDrawSetString(FG_InGame[66], "HJ:_~y~P.NAMES.");
				TextDrawShowForAll(FG_InGame[66]); 	
			}
			case 8:
			{
				ServerInfo[HappyJob] = 9;
				SCMA(-1, "{005b87] [ FG:RPG ] : {FFFFFF]Vlasnik je ukljucio duplu platu - Pepsi Dostavljac.");
				SendRconCommand("hostname Fusion Gaming - 2x Pepsi Dostavljac");
				SaveServerStats();
				TextDrawSetString(FG_InGame[66], "HJ:_~y~PEPSI D.");
				TextDrawShowForAll(FG_InGame[66]); 	
			}
			case 9:
			{
				ServerInfo[HappyJob] = 10;
				SCMA(-1, "{005b87] [ FG:RPG ] : {FFFFFF]Vlasnik je ukljucio duplu platu - Vocar.");
				SendRconCommand("hostname Fusion Gaming - 2x Vocar");
				SaveServerStats();
				TextDrawSetString(FG_InGame[66], "HJ:_~y~VOCAR");
				TextDrawShowForAll(FG_InGame[66]); 	
			}
			case 10:
			{
				ServerInfo[HappyJob] = 11;
				SCMA(-1, "{005b87] [ FG:RPG ] : {FFFFFF]Vlasnik je ukljucio duplu platu - Perac Prozora.");
				SendRconCommand("hostname Fusion Gaming - 2x Perac Prozora");
				SaveServerStats();
				TextDrawSetString(FG_InGame[66], "HJ:_~y~P.PROZ.");
				TextDrawShowForAll(FG_InGame[66]); 	
			}
			case 11:
			{
				ServerInfo[HappyJob] = 12;
				SCMA(-1, "{005b87] [ FG:RPG ] : {FFFFFF]Vlasnik je ukljucio duplu platu - Prevoznik Novca.");
				SendRconCommand("hostname Fusion Gaming - 2x Prevoznik Novca");
				SaveServerStats();
				TextDrawSetString(FG_InGame[66], "HJ:_~y~P.NOV.");
				TextDrawShowForAll(FG_InGame[66]); 	
			}
			case 12:
			{
				ServerInfo[HappyJob] = 13;
				SCMA(-1, "{005b87] [ FG:RPG ] : {FFFFFF]Vlasnik je ukljucio duplu platu - Pilot.");
				SendRconCommand("hostname Fusion Gaming - 2x Pilot");
				SaveServerStats();
				TextDrawSetString(FG_InGame[66], "HJ:_~y~PILOT");
				TextDrawShowForAll(FG_InGame[66]); 	
			}
			case 13:
			{
				ServerInfo[HappyJob] = 0;
				SCMA(-1, "{005b87] [ FG:RPG ] : {FFFFFF]Vlasnik je iskljucio duple plate.");
				SendRconCommand("hostname Fusion Gaming - Welcome");
				SaveServerStats();
				TextDrawSetString(FG_InGame[66], "HJ:_~r~OFF");
				TextDrawShowForAll(FG_InGame[66]); 	            		
			}
		}
	}
}
else if(dialogid == dialog_SERVERSTATS) {
	if(!response) return true;
	if(response) {
		switch(listitem) {
			case 0: {

				new coordsstring[160], srecnisati[11], mogucnostreporta[11], mogucnostpitanja[11], mogucnostkupovinev[11], oglasici[11], regic[11];

				if(ServerInfo[HappyHours] == true) { srecnisati = "Ukljuceni";}
				if(ServerInfo[HappyHours] == false) { srecnisati = "Iskljuceni";}

				if(ServerInfo[KupovinaVozila] == true) mogucnostkupovinev = "ukljucena";
				else mogucnostkupovinev = "iskljucena";

				if(ServerInfo[Report] == true) mogucnostreporta = "ukljucena";
				else mogucnostreporta = "iskljucena";

				if(ServerInfo[Pitanja] == true) mogucnostpitanja = "ukljucena";
				else mogucnostpitanja = "iskljucena";

				if(ServerInfo[Oglasi] == true) oglasici = "ukljucena";
				else oglasici = "iskljucena";

				if(ServerInfo[Registracija] == true) regic = "ukljucena";
				else regic = "iskljucena";

				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
				strcat(DialogStrgEx, "__________________________________________________________________\n");
				format(coordsstring, sizeof(coordsstring), ""col_white"Ukupno poseta servera: "col_server"%d "col_crvena"| "col_white"Ukupno registrovanih clanova: "col_server"%d\n", ServerInfo[BrojPosetaServeru], ServerInfo[RegistrovanihKorisnika]);
				strcat(DialogStrgEx, coordsstring);
				format(coordsstring, sizeof(coordsstring), ""col_white"Ukupno banovanih korisnika: "col_server"%d "col_crvena"| "col_white"Ukupno kikovanih korisnika: "col_server"%d\n", ServerInfo[BanovanihKorisnika], ServerInfo[KikovanihKorisnika]);
				strcat(DialogStrgEx, coordsstring);
				format(coordsstring, sizeof(coordsstring), ""col_white"Broj dodeljenih warnova: "col_server"%d "col_crvena"| "col_white"Srecni sati: "col_server"%s\n", ServerInfo[BrojWarnova], srecnisati);
				strcat(DialogStrgEx, coordsstring);
				format(coordsstring, sizeof(coordsstring), ""col_white"Pocetni level: "col_server"%d "col_crvena"| "col_white"Pocetni novac: "col_server"%d$\n", ServerInfo[PocetniLevel], ServerInfo[PocetniNovaca]);
				strcat(DialogStrgEx, coordsstring);
				format(coordsstring, sizeof(coordsstring), ""col_white"Mogucnost kupovine vozila je "col_server"%s"col_white".\n", mogucnostkupovinev);
				strcat(DialogStrgEx, coordsstring);
				format(coordsstring, sizeof(coordsstring), ""col_white"Mogucnost slanja pitanja Admin timu je "col_server"%s"col_white".\n", mogucnostpitanja);
				strcat(DialogStrgEx, coordsstring);
				format(coordsstring, sizeof(coordsstring), ""col_white"Mogucnost registracije je "col_server"%s"col_white".\n", regic);
				strcat(DialogStrgEx, coordsstring);
				format(coordsstring, sizeof(coordsstring), ""col_white"Mogucnost slanja reporta Admin timu je "col_server"%s"col_white".\n", mogucnostreporta);
				strcat(DialogStrgEx, coordsstring);
				//format(coordsstring, sizeof(coordsstring), ""col_white"Trenutni broj kreiranih vozila je "col_server"%d"col_white".\n", ServerInfo[BrojKreiranihVozila]);
				//strcat(DialogStrgEx, coordsstring);
				format(coordsstring, sizeof(coordsstring), ""col_white"Mogucnost postavljanja oglasa je "col_server"%s"col_white".\n", oglasici);
				strcat(DialogStrgEx, coordsstring);
				format(coordsstring, sizeof(coordsstring), ""col_white"Rekord servera je "col_server"%d"col_white".\n", ServerInfo[RekordServera]);
				strcat(DialogStrgEx, coordsstring);
				strcat(DialogStrgEx, "__________________________________________________________________");
				SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

				SaveServerStats();
			}
			case 1: {
				ServerStatsChose[playerid] = 1;
				SPD(playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost kupovine vozila:", "Ukljuci", "Iskljuci");
			}
			case 2: {
				ServerStatsChose[playerid] = 2;
				SPD(playerid, dialog_SERVERSTATS_2, DSI, D_NASLOV, ""col_white"Unesite novi hostname servera u prazan prostor.\nPozeljno je koristiti format: "col_server"Fusion Gaming - TEKST"col_white".", "Promeni", "Odustani");
			}
			case 3: {
				ServerStatsChose[playerid] = 3;
				SPD(playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost slanja pitanja:", "Ukljuci", "Iskljuci");
			}
			case 4: {
				ServerStatsChose[playerid] = 4;
				SPD(playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost slanja reporta:", "Ukljuci", "Iskljuci");
			}
			case 5: {
				SPD(playerid, dialog_SERVERSTATS_3, DSI, D_NASLOV, "Unesti broj koji predstavlja pocetni level igraca pri registraciji.", D_ODABERI, D_ODUSTANI);
			}
			case 6: {
				SPD(playerid, dialog_SERVERSTATS_4, DSI, D_NASLOV, "Unesti broj koji predstavlja pocetni novac igraca pri registraciji.", D_ODABERI, D_ODUSTANI);
			}
			case 7: {
				ServerStatsChose[playerid] = 5;
				SPD(playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost postavljanja oglasa:", "Ukljuci", "Iskljuci");
			}
			case 8: {
				ServerStatsChose[playerid] = 6;
				SPD(playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost registracije:", "Ukljuci", "Iskljuci");
			}
			case 9: {
				SPD(playerid, dialog_DAILYDEAL, DSL, D_NASLOV, "Kosac Trave\nFarmer\nBus Vozac\nRudar\nKomunalac\nPrevoznik\nDrvoseca\nProizvodjac Namestaja\nPepsi Dostavljac\nVocar\nPerac Prozora\nPrevoznik Novca\nPilot\n{FF0000]Iskljuci", "Odaberi", "Otkazi");
			}
			case 10: {
				SPD(playerid, dialog_HAPPYHOURS, DSL, D_NASLOV, "HH 2x\nHH 3x\nIskljuci", "Odaberi", "Izlaz");
			}
		}
	}
}
else if(dialogid == dialog_HAPPYHOURS) {
	if(!response) return true;
	if(response) {
		switch(listitem) {
			case 0:
			{
				SendInfoMessage(playerid, "Ukljucili ste 2x HappyHours (Duple Respekte).");
				ServerInfo[HappyHoursx3] = false;
				ServerInfo[HappyHours] = true;
				SCMA(-1, "{005b87] [ FG:RPG ] : {FFFFFF]Vlasnik je ukljucio 2x HappyHours - duple respekte.");
				SendRconCommand("hostname Fusion Gaming - 2x HappyHours");
				SaveServerStats();
				TextDrawSetString(FG_InGame[65], "HH:_~y~2x");
				TextDrawShowForAll(FG_InGame[65]);
			}
			case 1:
			{
				SendInfoMessage(playerid, "Ukljucili ste 3x HappyHours (Troduple Respekte).");
				ServerInfo[HappyHours] = false;
				ServerInfo[HappyHoursx3] = true;
				SCMA(-1, "{005b87] [ FG:RPG ] : {FFFFFF]Vlasnik je ukljucio 3x HappyHours - troduple respekte.");
				SendRconCommand("hostname Fusion Gaming - 3x HappyHours");
				SaveServerStats();
				TextDrawSetString(FG_InGame[65], "HH:_~y~3x");
				TextDrawShowForAll(FG_InGame[65]);
			}
			case 2:
			{
				SendInfoMessage(playerid, "Iskljucili ste HappyHours na serveru.");
				ServerInfo[HappyHoursx3] = false;
				ServerInfo[HappyHours] = false;
				SCMA(-1, "{005b87] [ FG:RPG ] : {FFFFFF]Vlasnik je iskljucio HappyHours mod.");
				SendRconCommand("hostname Fusion Gaming - Welcome");
				SaveServerStats();
				TextDrawSetString(FG_InGame[65], "HH:_~r~OFF");
				TextDrawShowForAll(FG_InGame[65]);
			}
		}
		}
}
else if(dialogid == dialog_SERVERSTATS_4) {
	if(!response) return true;
	if(response) {
		new broj;
		if(sscanf(inputtext, "i", broj)) return SPD(playerid, dialog_SERVERSTATS_4, DSI, D_NASLOV, "Unesti broj koji predstavlja pocetni novac igraca pri registraciji.", D_ODABERI, D_ODUSTANI);
		if(broj < 1) return SendErrorMessage(playerid, "Uneseni broj ne moze biti manji od 1.");

		ServerInfo[PocetniNovaca] = broj;
		SaveServerStats();
		SendInfoMessage(playerid, "Postavili ste pocetni novac na "col_white"%d$.", broj);
	}
}
else if(dialogid == dialog_SERVERSTATS_3) {
	if(!response) return true;
	if(response) {
		new broj;
		if(sscanf(inputtext, "i", broj)) return SPD(playerid, dialog_SERVERSTATS_3, DSI, D_NASLOV, "Unesti broj koji predstavlja pocetni level igraca pri registraciji.", D_ODABERI, D_ODUSTANI);
		if(broj < 1 || broj > 5) return SendErrorMessage(playerid, "Uneseni broj ne moze biti manji od 1 a veci od 5.");

		ServerInfo[PocetniLevel] = broj;
		SaveServerStats();
		SendInfoMessage(playerid, "Postavili ste pocetni level na "col_white"%d.", broj);
	}
}
else if(dialogid == dialog_SERVERSTATS_2) {
	if(response) {
		switch(ServerStatsChose[playerid]) {
			case 1: {
				ServerInfo[KupovinaVozila] = true;
				SendInfoMessage(playerid, "Ukljucio si mogucnost kupovine vozila po salonima.");
			}
			case 2: {
				format(varstring,sizeof(varstring),"hostname %s",inputtext);
				SendRconCommand(varstring);
				SendInfoMessage(playerid, "Novi hostname: "col_server"%s"col_white".", inputtext);
			}
			case 3: {
				ServerInfo[Pitanja] = true;
				SendInfoMessage(playerid, "Ukljucio si mogucnost slanja pitanja Admin timu.");
			}
			case 4: {
				ServerInfo[Report] = true;
				SendInfoMessage(playerid, "Ukljucio si mogucnost slanja reporta Admin timu.");
			}
			case 5: {
				ServerInfo[Oglasi] = true;
				SendInfoMessage(playerid, "Ukljucio si mogucnost postavljanja oglasa.");
			}
			case 6: {
				ServerInfo[Registracija] = true;
				SendInfoMessage(playerid, "Ukljucio si mogucnost registracije.");
			}
		}
		SaveServerStats();
	}
	else if(!response) {
		switch(ServerStatsChose[playerid]) {
			case 1: {
				ServerInfo[KupovinaVozila] = false;
				SendInfoMessage(playerid, "Iskljucio si mogucnost kupovine vozila po salonima.");
			}
			case 2: {
				ServerInfo[HappyHours] = false;
				SendInfoMessage(playerid, "Iskljucio si srecne sate.");
				//TextDrawHideForAll(HappyHoursTD);
			}
			case 3: {
				ServerInfo[Pitanja] = false;
				SendInfoMessage(playerid, "Iskljucio si mogucnost slanja pitanja Admin timu.");
			}
			case 4: {
				ServerInfo[Report] = false;
				SendInfoMessage(playerid, "Iskljucio si mogucnost slanja reporta Admin timu.");
			}
			case 5: {
				ServerInfo[Oglasi] = false;
				SendInfoMessage(playerid, "Iskljucio si mogucnost postavljanja oglasa.");
			}
			case 6: {
				ServerInfo[Registracija] = false;
				SendInfoMessage(playerid, "Iskljucio si mogucnost registracije.");
			}
		}
		SaveServerStats();
	}
}
else if(dialogid == dialog_ANTICHEAT) {
	if(response) {
		switch(listitem) {
			case 0: {
				anticheatinfo[playerid] = 0;
				SPD(playerid, dialog_ANTICHEAT_2, DSL, "antiWeaponHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI);
			}
			case 1: {
				anticheatinfo[playerid] = 1;
				SPD(playerid, dialog_ANTICHEAT_2, DSL, "antiTeleportHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI);
			}
			case 2: {
				anticheatinfo[playerid] = 2;
				SPD(playerid, dialog_ANTICHEAT_2, DSL, "antiflyHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI);
			}
			case 3: {
				anticheatinfo[playerid] = 3;
				SPD(playerid, dialog_ANTICHEAT_2, DSL, "antiVehRepHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI);
			}
			case 4: {
				anticheatinfo[playerid] = 4;
				SPD(playerid, dialog_ANTICHEAT_2, DSL, "antiJetpackHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI);
			}
			case 5: {
				anticheatinfo[playerid] = 5;
				SPD(playerid, dialog_ANTICHEAT_2, DSL, "antiSpeedHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI);
			}
		}
	}
	else { SPD(playerid, dialog_SERVERMI, DSL, D_NASLOV, "Upravljanje serverom\nSacuvaj naloge\nNapravi\nIzbrisi\nIzmeni\nSpisak organizacija\nAntiCheat", D_ODABERI, D_ODUSTANI); }
}
else if(dialogid == dialog_ANTICHEAT_2) {
	if(response) {
		switch(listitem) {
			case 0: {
				switch(anticheatinfo[playerid]) {
					case 0: {
						if(antiCheatSS[antiWeaponH]) {
							antiCheatSS[antiWeaponH] = false;
							SCM(playerid, ZUTA, "Iskljucio si antiWeaponHack.");
						}
						else if(!antiCheatSS[antiWeaponH]) {
							antiCheatSS[antiWeaponH] = true;
							SCM(playerid, ZUTA, "Ukljucio si antiWeaponHack.");
						}
						SaveAntiCheat();
					}
					case 1: {
						if(antiCheatSS[antiTeleportH]) {
							antiCheatSS[antiTeleportH] = false;
							SCM(playerid, ZUTA, "Iskljucio si antiTeleportHack.");
						}
						else if(!antiCheatSS[antiTeleportH]) {
							antiCheatSS[antiTeleportH] = true;
							SCM(playerid, ZUTA, "Ukljucio si antiTeleportHack.");
						}
						SaveAntiCheat();
					}
					case 2: {
						if(antiCheatSS[antiflyH]) {
							antiCheatSS[antiflyH] = false;
							SCM(playerid, ZUTA, "Iskljucio si antiflyHack.");
						}
						else if(!antiCheatSS[antiflyH]) {
							antiCheatSS[antiflyH] = true;
							SCM(playerid, ZUTA, "Ukljucio si antiflyHack.");
						}
						SaveAntiCheat();
					}
					case 3: {
						if(antiCheatSS[antiVehRepair]) {
							antiCheatSS[antiVehRepair] = false;
							SCM(playerid, ZUTA, "Iskljucio si antiVehRepairHack.");
						}
						else if(!antiCheatSS[antiVehRepair]) {
							antiCheatSS[antiVehRepair] = true;
							SCM(playerid, ZUTA, "Ukljucio si antiVehRepairHack.");
						}
						SaveAntiCheat();
					}
					case 4: {
						if(antiCheatSS[antiJetPackH]) {
							antiCheatSS[antiJetPackH] = false;
							SCM(playerid, ZUTA, "Iskljucio si antiJetPackHack.");
						}
						else if(!antiCheatSS[antiJetPackH]) {
							antiCheatSS[antiJetPackH] = true;
							SCM(playerid, ZUTA, "Ukljucio si antiJetPackHack.");
						}
						SaveAntiCheat();
					}
					case 5: {
						if(antiCheatSS[antiSpeedH]) {
							antiCheatSS[antiSpeedH] = false;
							SCM(playerid, ZUTA, "Iskljucio si antiSpeedHack.");
						}
						else if(!antiCheatSS[antiSpeedH]) {
							antiCheatSS[antiSpeedH] = true;
							SCM(playerid, ZUTA, "Ukljucio si antiSpeedHack.");
						}
						SaveAntiCheat();
					}
				}
			}
			case 1: {
				new antiCheatName[20] = "antiVehRepairHack";
				switch(anticheatinfo[playerid]) {
					case 0: antiCheatName = "antiWeaponHack";
					case 1: antiCheatName = "antiTeleportHack";
					case 2: antiCheatName = "antiflyHack";
					case 3: antiCheatName = "antiVehRepairHack";
					case 4: antiCheatName = "antiJetPackHack";
					case 5: antiCheatName = "antiSpeedHack";
				}
				SPD(playerid, dialog_ANTICHEAT_3, DSL, antiCheatName, "Warning\nKick\nBan", D_ODABERI, D_ODUSTANI);
			}
		}
	}
}
else if(dialogid == dialog_ANTICHEAT_3) {
	if(response) {
		switch(listitem) {
			case 0: {
				switch(anticheatinfo[playerid]) {
					case 0: {
						antiCheatSS[WeaponHRezimRada] = AC_ADMINPORUKA;
						SCM(playerid, ZUTA, "Postavio si rezim rada na warning za antiWeaponHack.");
					}
					case 1: {
						antiCheatSS[TeleportHRezimRada] = AC_ADMINPORUKA;
						SCM(playerid, ZUTA, "Postavio si rezim rada na warning za antiTeleportHack.");
					}
					case 2: {
						antiCheatSS[FlyHRezimRada] = AC_ADMINPORUKA;
						SCM(playerid, ZUTA, "Postavio si rezim rada na warning za antiflyHack.");
					}
					case 3: {
						antiCheatSS[VehRepRezimRada] = AC_ADMINPORUKA;
						SCM(playerid, ZUTA, "Postavio si rezim rada na warning za antiVehRepairHack.");
					}
					case 4: {
						antiCheatSS[JetPackHRezimRada] = AC_ADMINPORUKA;
						SCM(playerid, ZUTA, "Postavio si rezim rada na warning za antiJetPackHack.");
					}
					case 5: {
						antiCheatSS[SpeedHRezimRada] = AC_ADMINPORUKA;
						SCM(playerid, ZUTA, "Postavio si rezim rada na warning za antiSpeedHack.");
					}
				}
				SaveAntiCheat();
			}
			case 1: {
				switch(anticheatinfo[playerid]) {
					case 0: {
						antiCheatSS[WeaponHRezimRada] = AC_KICK;
						SCM(playerid, ZUTA, "Postavio si rezim rada na kick za antiWeaponHack.");
					}
					case 1: {
						antiCheatSS[TeleportHRezimRada] = AC_KICK;
						SCM(playerid, ZUTA, "Postavio si rezim rada na kick za antiTeleportHack.");
					}
					case 2: {
						antiCheatSS[FlyHRezimRada] = AC_KICK;
						SCM(playerid, ZUTA, "Postavio si rezim rada na kick za antiflyHack.");
					}
					case 3: {
						antiCheatSS[VehRepRezimRada] = AC_KICK;
						SCM(playerid, ZUTA, "Postavio si rezim rada na kick za antiVehRepairHack.");
					}
					case 4: {
						antiCheatSS[JetPackHRezimRada] = AC_KICK;
						SCM(playerid, ZUTA, "Postavio si rezim rada na kick za antiJetPackHack.");
					}
					case 5: {
						antiCheatSS[SpeedHRezimRada] = AC_KICK;
						SCM(playerid, ZUTA, "Postavio si rezim rada na kick za antiSpeedHack.");
					}
				}
				SaveAntiCheat();
			}
			case 2: {
				switch(anticheatinfo[playerid]) {
					case 0: {
						antiCheatSS[WeaponHRezimRada] = AC_BAN;
						SCM(playerid, ZUTA, "Postavio si rezim rada na ban za antiWeaponHack.");
					}
					case 1: {
						antiCheatSS[TeleportHRezimRada] = AC_BAN;
						SCM(playerid, ZUTA, "Postavio si rezim rada na ban za antiTeleportHack.");
					}
					case 2: {
						antiCheatSS[FlyHRezimRada] = AC_BAN;
						SCM(playerid, ZUTA, "Postavio si rezim rada na ban za antiflyHack.");
					}
					case 3: {
						antiCheatSS[VehRepRezimRada] = AC_BAN;
						SCM(playerid, ZUTA, "Postavio si rezim rada na ban za antiVehRepairHack.");
					}
					case 4: {
						antiCheatSS[JetPackHRezimRada] = AC_BAN;
						SCM(playerid, ZUTA, "Postavio si rezim rada na ban za antiJetPackHack.");
					}
					case 5: {
						antiCheatSS[SpeedHRezimRada] = AC_BAN;
						SCM(playerid, ZUTA, "Postavio si rezim rada na ban za antiSpeedHack.");
					}
				}
				SaveAntiCheat();
			}
		}
	}
}
else if(dialogid == dialog_CREATEVEH) {
	if(response) {
		switch(listitem) {
			case 0: { SPD(playerid, dialog_VCREATE, DSI, D_NASLOV, "Unesite id zeljenog vozila, id boje1, id boje2!", D_ODABERI, D_NAZAD); }
			case 1: { SPD(playerid, dialog_PCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id posla, id boje1, id boje2.\nID posla: 1. Kosac Trave, 2. Farmer, 3. Bus Vozac, 4. Rudar, 5. Komunalac, 6. Prevoznik, 7. Drvoseca\n8. P. Namestaja, 9. Pepsi Dostavljac, 10. Vocar, 11. Perac Prozora, 12. Prevoznik Novca, 13. Pilot", D_ODABERI, D_NAZAD); }
			case 2: { SPD(playerid, dialog_OVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id organizacije, id boje1, id boje2.", D_ODABERI, D_NAZAD); }
			//case 3: { SPD(playerid, dialog_RVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za rent vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD); }
			case 3: { SendErrorMessage(playerid, "Koristite /kreirajrent za kreiranje rent pickupa."); }
			case 4: { SPD(playerid, dialog_IVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za izlozbeno vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD); }
			case 5: { SPD(playerid, dialog_AVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za Admin vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD); }
			case 6: { SPD(playerid, dialog_GRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za gradonacelnikovo vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD); }
			case 7: { SPD(playerid, dialog_PRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za promotersko vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD); }
			case 8: { SPD(playerid, dialog_VVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vip vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD); }
			case 9: { SPD(playerid, dialog_POLVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vozilo za polaganje, id boje1, id boje2.", D_ODABERI, D_NAZAD); }
			case 10: { SPD(playerid, dialog_HVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za Helper vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD); }

		}
	}
}
else if(dialogid == dialog_NAPRAVISVE) {
	if(response) {
		switch(listitem) {
			case 0: {
				SPD(playerid, dialog_ORGCREATE, DSI, D_NASLOV, "Unesite zeljeno ime vase organizacije!", D_ODABERI, D_NAZAD); }
			case 1: {
				SPD(playerid, dialog_CREATEVEH, DSL, D_NASLOV, "Privatno vozilo\nPoslovno vozilo\nOrganizacijsko vozilo\nRent vozilo\nIzlozbeno vozilo\nAdmin Vozilo\nGradonacelnikovo vozilo\nPromotersko vozilo\nVIP vozilo\nPolaganje vozilo\nHelper vozilo", D_ODABERI, D_NAZAD); }
			case 2: {

				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

				strcat(DialogStrgEx, ""col_white"Unesite vrstu firme koju zelite.\n");
				strcat(DialogStrgEx, "Vrste: 0. 24/7 1. Burg 2. Cluckin Bell 3. Binco 4. Firma bez ulaza 5. Zip 6. Victim 7. Suburban\n");
				strcat(DialogStrgEx, "8. Bar 9. Gym 10. Gun Shop 11. MRestoran 12. VRestoran 13. Pizza 14. Nocni klub\n");
				strcat(DialogStrgEx, "15. Disco 16. Electronic Shop 17. Trafika 18. Firma za posao 19. Rent firma 20. Pumpa\n");
				strcat(DialogStrgEx, "21. Javna Kuca 22. Kladionica 23. Oglas 24. Telekom 25. Pay 'n' Spray 26. Komunalije\n");
				strcat(DialogStrgEx, "27. Vodovod 28. Elektrana 29. Lutrija 30. Casino 31. Neon Shop 32. Roda 33. Nike 34. Ribar");

				SPD(playerid, dialog_FCREATE, DSI, D_NASLOV, DialogStrgEx, "U redu", "");

				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			}
			case 3: {
				for(new i = 1; i < MAX_KONT; i++) {
					new fileauta[40];
					format(fileauta, sizeof(fileauta), KO_FILE, i);
					if(!fexist(fileauta)) {
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z); GetPlayerFacingAngle(playerid, angle);
						KontInfo[i][koObjPos][0] = x;
						KontInfo[i][koObjPos][1] = y;
						KontInfo[i][koObjPos][2] = z;
						KontInfo[i][koObjRot][0] = 0;
						KontInfo[i][koObjRot][1] = 0;
						KontInfo[i][koObjRot][2] = 0;
						KontInfo[i][koObjID] = CreateDynamicObject(1331, x+2, y, z+0.6, 0.0, 0.0, angle);
						Streamer_Update(playerid);
						EditDynamicObject(playerid, KontInfo[i][koObjID]); EditKontejnera[playerid] = i;
						SacuvajKont(i);
						break;
					}
				}
			}
			case 4: {
				SPD(playerid, dialog_IMCREATE, DSI, D_NASLOV, "Unesite vrstu kuce koju zelite.\nVrste: 1. Mala kuca 2. Srednja Kuca 3. Velika kuca 4. Vila!", D_ODABERI, D_NAZAD); }
			case 5: {
				new im = SledeciIDImovine(MAX_IMOVINA), Float:PozX, Float:PozY, Float:PozZ, string[256], iimovine[40];
				GetPlayerPos(playerid, PozX, PozY, PozZ);
				format(iimovine, sizeof(iimovine), IM_FILE, im);
				if(fexist(iimovine)) return SendErrorMessage(playerid, "ID te imovine vec postoji!");
				II[im][iUsage] = IMOVINA_STAN;
				II[im][iExit][0] = STAN_X;
				II[im][iExit][1] = STAN_Y;
				II[im][iExit][2] = STAN_Z;
				II[im][iPrice] = STAN_PRICE;
				II[im][iInterior] = STAN_INT;
				II[im][iVrsta] = 0;
				II[im][iOwned] = 0;
				II[im][iNeaktivnost] = 0;
				strmid(II[im][iOwner], "Drzava", 0, strlen("Drzava"), 32);
				II[im][iEnter][0] = PozX;
				II[im][iEnter][1] = PozY;
				II[im][iEnter][2] = PozZ;
				II[im][iLocked] = 0;
				II[im][iVW] = im;
				II[im][iLevel] = 3;
				strmid(II[im][iAdress], UlicaImovine(im), 0, strlen(UlicaImovine(im)), 32);
				II[im][iOrmar] = 0;
				II[im][iSkin][0] = 0;
				II[im][iSkin][1] = 0;
				II[im][iSkin][2] = 0;
				II[im][iMats] = 0;
				II[im][iSafeStatus] = 0; II[im][iSafePass] = 0;
				II[im][iOruzje][0] = 0; II[im][iOruzje][1] = 0; II[im][iOruzje][2] = 0; II[im][iOruzje][3] = 0;
				II[im][iMunicija][0] = 0; II[im][iMunicija][1] = 0; II[im][iMunicija][2] = 0; II[im][iMunicija][3] = 0;
				II[im][iDrug][0] = 0; II[im][iDrug][1] = 0; II[im][iDrug][2] = 0; II[im][iDrug][3] = 0; II[im][iDrug][4] = 0;
				II[im][iDrug][5] = 0; II[im][iDrug][6] = 0; II[im][iDrug][7] = 0; II[im][iDrug][8] = 0; II[im][iDrug][9] = 0;
				II[im][iDrugCode][0] = 0; II[im][iDrugCode][1] = 0; II[im][iDrugCode][2] = 0; II[im][iDrugCode][3] = 0; II[im][iDrugCode][4] = 0;
				II[im][iDrugCode][5] = 0; II[im][iDrugCode][6] = 0; II[im][iDrugCode][7] = 0; II[im][iDrugCode][8] = 0; II[im][iDrugCode][9] = 0;
				II[im][iDoorLevel] = 0; II[im][iAlarm] = 0; II[im][iLockLevel] = 0; II[im][iTime] = 0; II[im][iPizzaTime] = 0;
				SaveProperty(im);
				format(string, sizeof(string),""col_crvena"Stan na Prodaju"col_white"[ID %d]"col_crvena"\nCena: "col_white"%d$\n"col_crvena"Potreban level: "col_white"%d\n"col_crvena"Adresa: "col_white"%s\n"col_crvena"Za kupovinu "col_white"/kupiimovinu", im, II[im][iPrice], II[im][iLevel], II[im][iAdress]);
				ImovinaLabel[im] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
				ImovinaPickup[im] = acc_CreateDynamicPickup(19134, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2]);
				SendInfoMessage(playerid, "Uspesno si kreirao stan.");
			}
			case 6: {
				new im = SledeciIDImovine(MAX_IMOVINA), Float:PozX, Float:PozY, Float:PozZ, string[256], iimovine[40];
				GetPlayerPos(playerid, PozX, PozY, PozZ);
				format(iimovine, sizeof(iimovine), IM_FILE, im);
				if(fexist(iimovine)) return SendErrorMessage(playerid, "ID te imovine vec postoji!");
				II[im][iUsage] = IMOVINA_VIKENDICA;
				II[im][iExit][0] = VIKENDICA_X;
				II[im][iExit][1] = VIKENDICA_Y;
				II[im][iExit][2] = VIKENDICA_Z;
				II[im][iPrice] = VIKENDICA_PRICE;
				II[im][iInterior] = VIKENDICA_INT;
				II[im][iVrsta] = 0;
				II[im][iOwned] = 0;
				II[im][iNeaktivnost] = 0;
				strmid(II[im][iOwner], "Drzava", 0, strlen("Drzava"), 32);
				II[im][iEnter][0] = PozX;
				II[im][iEnter][1] = PozY;
				II[im][iEnter][2] = PozZ;
				II[im][iLocked] = 0;
				II[im][iVW] = im;
				II[im][iLevel] = 5;
				strmid(II[im][iAdress], UlicaImovine(im), 0, strlen(UlicaImovine(im)), 32);
				II[im][iOrmar] = 0;
				II[im][iSkin][0] = 0;
				II[im][iSkin][1] = 0;
				II[im][iSkin][2] = 0;
				II[im][iMats] = 0;
				II[im][iSafeStatus] = 0; II[im][iSafePass] = 0;
				II[im][iOruzje][0] = 0; II[im][iOruzje][1] = 0; II[im][iOruzje][2] = 0; II[im][iOruzje][3] = 0;
				II[im][iMunicija][0] = 0; II[im][iMunicija][1] = 0; II[im][iMunicija][2] = 0; II[im][iMunicija][3] = 0;
				II[im][iDrug][0] = 0; II[im][iDrug][1] = 0; II[im][iDrug][2] = 0; II[im][iDrug][3] = 0; II[im][iDrug][4] = 0;
				II[im][iDrug][5] = 0; II[im][iDrug][6] = 0; II[im][iDrug][7] = 0; II[im][iDrug][8] = 0; II[im][iDrug][9] = 0;
				II[im][iDrugCode][0] = 0; II[im][iDrugCode][1] = 0; II[im][iDrugCode][2] = 0; II[im][iDrugCode][3] = 0; II[im][iDrugCode][4] = 0;
				II[im][iDrugCode][5] = 0; II[im][iDrugCode][6] = 0; II[im][iDrugCode][7] = 0; II[im][iDrugCode][8] = 0; II[im][iDrugCode][9] = 0;
				II[im][iDoorLevel] = 0; II[im][iAlarm] = 0; II[im][iLockLevel] = 0; II[im][iTime] = 0; II[im][iPizzaTime] = 0;
				SaveProperty(im);
				format(string, sizeof(string),"{007d80]Vikendica na Prodaju"col_white"[ID %d]{007d80]\n{007d80]Cena: "col_white"%d$\n{007d80]Potreban level: "col_white"%d\n{007d80]Adresa: "col_white"%s\n{007d80]Za kupovinu "col_white"/kupiimovinu", im, II[im][iPrice], II[im][iLevel], II[im][iAdress]);
				ImovinaLabel[im] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
				ImovinaPickup[im] = acc_CreateDynamicPickup(19523, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2]);
				SendInfoMessage(playerid, "Uspesno si kreirao vikendicu.");
			}
			case 7: {
				new dFile[32];
				if(PlayerCreateEvent[playerid]) return SendErrorMessage(playerid, "Vec pravis event!");
				SPD(playerid, dialog_CREATEEVENT, DSI, D_NASLOV, "Unesite ime eventa", D_ODABERI, D_ODUSTANI);
				PlayerCreateEvent[playerid] = true;
				EventID[playerid] = 1;
				for(new id = 1; id <= MAX_EVENTS; id++)
				{
					format(dFile, 35, EVENT_FILE, id);
					if(fexist(dFile)) EventID[playerid]++;
					if(EventID[playerid] > MAX_EVENTS) return SendErrorMessage(playerid, "Vec je napravljen maksimalan broj eventa.");
				}
			}
			case 8: {
				for(new i = 1; i < MAX_ATM; i++) {
					new fileauta[40];
					format(fileauta, sizeof(fileauta), ATM_FILE, i);
					if(!fexist(fileauta)) {
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z); GetPlayerFacingAngle(playerid, angle);
						atmInfo[i][atmPos][0] = x;
						atmInfo[i][atmPos][1] = y;
						atmInfo[i][atmPos][2] = z;
						atmInfo[i][atmPos][3] = 0;
						atmInfo[i][atmPos][4] = 0;
						atmInfo[i][atmPos][5] = 0;
						atmInfo[i][atmExists] = true;
						atmInfo[i][atmObject] = CreateDynamicObject(2942, x+2, y, z+0.6, 0.0, 0.0, angle);
						Streamer_Update(playerid);
						EditDynamicObject(playerid, atmInfo[i][atmObject]); EditATM[playerid] = i;
						SacuvajATM(i);
						break;
					}
				}
			}
			case 9: {
				new as = SledeciIDSalona(MAX_AUTOS), Float:PozX, Float:PozY, Float:PozZ, fautos[40];
				GetPlayerPos(playerid, PozX, PozY, PozZ);
				format(fautos, sizeof(fautos), AS_FILE, as);
				if(fexist(fautos)) return SendErrorMessage(playerid, "ID tog autosalona vec postoji!");
				AutoSalon[as][aPickupPos][0] = PozX;
				AutoSalon[as][aPickupPos][1] = PozY;
				AutoSalon[as][aPickupPos][2] = PozZ;
				AutoSalon[as][aVW] = GetPlayerVirtualWorld(playerid);
				AutoSalon[as][aInt] = GetPlayerInterior(playerid);
				AutoSalon[as][aIzlogVeh] = 0;
				AutoSalon[as][aVehBuyedPos][0] = 0.0; AutoSalon[as][aVehBuyedPos][1] = 0.0; AutoSalon[as][aVehBuyedPos][2] = 0.0; AutoSalon[as][aVehBuyedPos][3] = 0.0;
				AutoSalon[as][aCameraPos][0] = 0.0; AutoSalon[as][aCameraPos][1] = 0.0; AutoSalon[as][aCameraPos][2] = 0.0;
				AutoSalon[as][aCameraLookAt][0] = 0.0; AutoSalon[as][aCameraLookAt][1] = 0.0; AutoSalon[as][aCameraLookAt][2] = 0.0;
				AutoSalon[as][aVehModel][0] = 0; AutoSalon[as][aMaxVehModel] = 0;
				AutoSalon[as][aVehModel][1] = 0; AutoSalon[as][aVehModel][2] = 0; AutoSalon[as][aVehModel][3] = 0;
				AutoSalon[as][aVehModel][4] = 0; AutoSalon[as][aVehModel][5] = 0; AutoSalon[as][aVehModel][6] = 0;
				AutoSalon[as][aVehModel][7] = 0; AutoSalon[as][aVehModel][8] = 0; AutoSalon[as][aVehModel][9] = 0;
				AutoSalon[as][aVehModel][10] = 0; AutoSalon[as][aVehModel][11] = 0; AutoSalon[as][aVehModel][12] = 0;
				AutoSalon[as][aVehModel][13] = 0; AutoSalon[as][aVehModel][14] = 0; AutoSalon[as][aVehModel][15] = 0;
				AutoSalon[as][aVehAmmount][0] = 0; AutoSalon[as][aVehAmmount][1] = 0; AutoSalon[as][aVehAmmount][2] = 0;
				AutoSalon[as][aVehAmmount][3] = 0; AutoSalon[as][aVehAmmount][4] = 0; AutoSalon[as][aVehAmmount][5] = 0;
				AutoSalon[as][aVehAmmount][6] = 0; AutoSalon[as][aVehAmmount][7] = 0; AutoSalon[as][aVehAmmount][8] = 0;
				AutoSalon[as][aVehAmmount][9] = 0; AutoSalon[as][aVehAmmount][10] = 0; AutoSalon[as][aVehAmmount][11] = 0; AutoSalon[as][aVehAmmount][12] = 0;
				AutoSalon[as][aVehAmmount][13] = 0; AutoSalon[as][aVehAmmount][14] = 0; AutoSalon[as][aVehAmmount][15] = 0;
				SaveSalon(as);
				KreiranAutoSalon[playerid] = as;
				AutoSalon[as][AutoSalon3D] = CreateDynamic3DTextLabel(""col_white"Da kupite vozilo kucajte\n"col_server"[/kupivozilo]", -1, AutoSalon[as][aPickupPos][0], AutoSalon[as][aPickupPos][1], AutoSalon[as][aPickupPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, AutoSalon[as][aVW], AutoSalon[as][aInt], -1, 20.0);
				AutoSalon[as][AutoSalonPickup] = acc_CreateDynamicPickup(1239, 1, AutoSalon[as][aPickupPos][0], AutoSalon[as][aPickupPos][1], AutoSalon[as][aPickupPos][2], AutoSalon[as][aVW], AutoSalon[as][aInt], -1, 20.0);
				SPD(playerid, dialog_ASMAXMODEL, DSI, D_NASLOV, "Unesite broj razlicith vrsti vozila koja ce se nalaziti u salonu(3-16)", D_ODABERI, D_NAZAD);
			}
			case 10: {
				new h = NextHotelID(MAX_HOTELS), Float:PozX, Float:PozY, Float:PozZ, string[256], hfile[40];
				GetPlayerPos(playerid, PozX, PozY, PozZ);
				format(hfile, sizeof(hfile), HOTEL_FILE, h);
				if(fexist(hfile)) return SendErrorMessage(playerid, "ID te imovine vec postoji!");
				hotelInfo[h][hExit][0] = 2214.3848;
				hotelInfo[h][hExit][1] = -1150.5399;
				hotelInfo[h][hExit][2] = 1025.7969;
				hotelInfo[h][hPrice] = 1000000;
				hotelInfo[h][hInterior] = 15;
				hotelInfo[h][hOwned] = 0;
				strmid(hotelInfo[h][hOwner], "Drzava", 0, strlen("Drzava"), 32);
				hotelInfo[h][hEnter][0] = PozX;
				hotelInfo[h][hEnter][1] = PozY;
				hotelInfo[h][hEnter][2] = PozZ;
				hotelInfo[h][hRoomPrice] = 50;
				hotelInfo[h][hMoney] = 0;
				hotelInfo[h][hVW] = h;
				hotelInfo[h][hLocked] = 0;
				hotelInfo[h][hLevel] = 5;
				strmid(hotelInfo[h][hAdress], UlicaHotela(h), 0, strlen(UlicaHotela(h)), 32);

				strmid(hotelInfo[h][hGuest_1], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);
				strmid(hotelInfo[h][hGuest_2], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);
				strmid(hotelInfo[h][hGuest_3], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);
				strmid(hotelInfo[h][hGuest_4], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);
				strmid(hotelInfo[h][hGuest_5], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);
				strmid(hotelInfo[h][hGuest_6], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);
				strmid(hotelInfo[h][hGuest_7], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);
				strmid(hotelInfo[h][hGuest_8], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);
				strmid(hotelInfo[h][hGuest_9], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);
				strmid(hotelInfo[h][hGuest_10], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);

				SaveHotel(h);
				format(string, sizeof(string), "{36AB00]Hotel na Prodaju"col_white"[ID %d]{36AB00]\n{36AB00]Cena: "col_white"%d$\n{36AB00]Potreban level: "col_white"%d\n{36AB00]Adresa: "col_white"%s\n{36AB00]Za kupovinu "col_white"/kupihotel", h, hotelInfo[h][hPrice], hotelInfo[h][hLevel], hotelInfo[h][hAdress]);
				hotelInfo[h][h3DText] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, hotelInfo[h][hEnter][0], hotelInfo[h][hEnter][1], hotelInfo[h][hEnter][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
				hotelInfo[h][hPickup] = acc_CreateDynamicPickup(1318, 1, hotelInfo[h][hEnter][0], hotelInfo[h][hEnter][1], hotelInfo[h][hEnter][2]);
				SendInfoMessage(playerid, "Uspesno si kreirao hotel.");
			}
			case 11: {
				SPD(playerid, dialog_CREATEGATE, DSI, D_NASLOV, "Unesite id objekta kapije.", D_ODABERI, D_NAZAD);
			}
			case 12: {
				CreatingThing[playerid] = 1;
				SendInfoMessage(playerid, "Poceo si kreiranje zemljista za prodaju.");
				SendInfoMessage(playerid, "Koristi "col_white"LMB"col_server" da postavis pozicije.");
				SendInfoMessage(playerid, "Prvo sacuvaj poziciju levog donjeg ugla polja.");
			}
			case 13: {
				SPD(playerid, dialog_CREATEGARAGE, DSL, D_NASLOV, "Mala garaza\nSrednja garaza\nVelika garaza", D_ODABERI, D_NAZAD);
			}
			case 14: {
				SPD(playerid, dialog_CREATEGPS, DSI, D_NASLOV, "Unesite ime ovog mesta za gps.", D_ODABERI, D_NAZAD);
			}
			case 15: {
				SPD(playerid, dialog_CREATEAPORT, DSI, D_NASLOV, "Unesite ime ovog mesta za Admin port.", D_ODABERI, D_NAZAD);
			}
			case 16: {
				SPD(playerid, dialog_CREATESPORT, DSI, D_NASLOV, "Unesite ime ovog mesta za Helper port.", D_ODABERI, D_NAZAD);
			}
			case 17: {
				SPD(playerid, dialog_CREATERADAR, DSI, D_NASLOV, "Unesite dozvoljenu brzinu i kaznu.\nPrimer: 70 132", D_ODABERI, D_NAZAD);
			}
			case 18: {
				SPD(playerid, dialog_GANGZCOLOR, DSI, D_NASLOV, "Unesite boju za gang zonu.\nPrimer: FF2244", D_ODABERI, D_NAZAD);
			}
			case 19: {
				for(new i = 1; i < MAX_PRESENTS; i++) {
					new fileauta[40];
					format(fileauta, sizeof(fileauta), F_PRESENTS, i);
					if(!fexist(fileauta)) {
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z); GetPlayerFacingAngle(playerid, angle);
						presentsInfo[i][presPos][0] = x;
						presentsInfo[i][presPos][1] = y;
						presentsInfo[i][presPos][2] = z;
						presentsInfo[i][presPos][3] = 0;
						presentsInfo[i][presPos][4] = 0;
						presentsInfo[i][presPos][5] = 0;
						presentsInfo[i][presTaken] = false;
						presentsInfo[i][presObject] = CreateDynamicObject(19054, x+2, y, z+0.6, 0.0, 0.0, angle);
						Streamer_Update(playerid);
						EditDynamicObject(playerid, presentsInfo[i][presObject]); EditPresents[playerid] = i;
						SavePresent(i);
						break;
					}
				}
			}
			case 20: {
				for(new i = 1; i < MAX_CTREES; i++) {
					new fileauta[40];
					format(fileauta, sizeof(fileauta), F_CTREES, i);
					if(!fexist(fileauta)) {
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z); GetPlayerFacingAngle(playerid, angle);
						CTree[i][ctPos][0] = x;
						CTree[i][ctPos][1] = y;
						CTree[i][ctPos][2] = z;
						CTree[i][ctPos][3] = 0;
						CTree[i][ctPos][4] = 0;
						CTree[i][ctPos][5] = 0;
						CTree[i][ctPlaced] = true;
						CTree[i][ctObject] = CreateDynamicObject(19076, x+2, y, z+0.6, 0.0, 0.0, angle);
						Streamer_Update(playerid);
						EditDynamicObject(playerid, CTree[i][ctObject]); EditCTrees[playerid] = i;
						SaveCTree(i);
						break;
					}
				}
			}
			case 21: {
				for(new i = 1; i < MAX_XORBS; i++) {
					new fileauta[40];
					format(fileauta, sizeof(fileauta), F_XORBS, i);
					if(!fexist(fileauta)) {
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z); GetPlayerFacingAngle(playerid, angle);
						XmasOrbs[i][xoPos][0] = x;
						XmasOrbs[i][xoPos][1] = y;
						XmasOrbs[i][xoPos][2] = z;
						XmasOrbs[i][xoPos][3] = 0;
						XmasOrbs[i][xoPos][4] = 0;
						XmasOrbs[i][xoPos][5] = 0;
						XmasOrbs[i][xoPlaced] = true;
						XmasOrbs[i][xoObject] = CreateDynamicObject(19059, x+2, y, z+0.6, 0.0, 0.0, angle);
						Streamer_Update(playerid);
						EditDynamicObject(playerid, XmasOrbs[i][xoObject]); EditXOrbs[playerid] = i;
						SaveXOrb(i);
						break;
					}
				}
			}
			case 22: {
				SPD(playerid, dialog_CREATEFSTATION, DSI, D_NASLOV, ""col_white"Unesite ID firme sa kojom povezujete, cenu benzina, cenu dizela, cenu gasa i cenu gasnog ulja.\nPrimer: 23, 12, 23, 32, 2", D_ODABERI, D_NAZAD);
			}
			case 23: {

				new parkID = NextParkingID(MAX_PARKINGS), Float:PozX, Float:PozY, Float:PozZ, Float:PozA, parkFile[64];
				GetPlayerPos(playerid, PozX, PozY, PozZ);
				GetPlayerFacingAngle(playerid, PozA);
				format(parkFile, sizeof(parkFile), PARKING_FILE, parkID);
				if(fexist(parkFile)) return SendErrorMessage(playerid, "ID tog parkinga vec postoji!");

				ParkingInfo[parkID][ParkPlaced] = true;
				ParkingInfo[parkID][parkInt] = GetPlayerInterior(playerid);
				ParkingInfo[parkID][parkVW] = GetPlayerVirtualWorld(playerid);
				ParkingInfo[parkID][parkMaxParkPlaces] = 0;

				ParkingInfo[parkID][parkObjectPos][0] = PozX;
				ParkingInfo[parkID][parkObjectPos][1] = PozY;
				ParkingInfo[parkID][parkObjectPos][2] = PozZ;
				ParkingInfo[parkID][parkObjectPos][3] = 0;
				ParkingInfo[parkID][parkObjectPos][4] = 0;
				ParkingInfo[parkID][parkObjectPos][5] = PozA;

				CreateParkingID[playerid] = parkID;
				CreatingParkingLevel[playerid] = 1;

				ParkingInfo[parkID][parkObject] = CreateDynamicObject(4639, PozX+2, PozY, PozZ+ 0.6, 0.0, 0.0, PozA , 0, 0, -1, 200.0);
				Streamer_Update(playerid);
				EditDynamicObject(playerid, ParkingInfo[parkID][parkObject]);

				Parking_Save(parkID);

				SendInfoMessage(playerid, "Zapoceo si kreiranje parkinga, sacuvajte pozicije parking kucice.");

			}
			case 24: {

				new id = NextSZoneID(MAX_SZONE);

				if(id == -1) return SendErrorMessage(playerid, "Vec ima maksimalni broj safe zona.");

				CreatingSZoneID[playerid] = id;

				CreatingSZone[playerid] = 1;
				SendInfoMessage(playerid, "Koristi "col_white"LMB"col_server" da postavis pozicije.");
				SendInfoMessage(playerid, "Prvo sacuvaj poziciju levog donjeg ugla polja.");

			}
			case 25: {
				for(new i = 1; i < MAX_BHRANA; i++) {
					new fileauta[40];
					format(fileauta, sizeof(fileauta), BRZAHRANA_FILE, i);
					if(!fexist(fileauta)) {
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z); GetPlayerFacingAngle(playerid, angle);
						BrzaHranaInfo[i][bhObjPos][0] = x;
						BrzaHranaInfo[i][bhObjPos][1] = y;
						BrzaHranaInfo[i][bhObjPos][2] = z;
						BrzaHranaInfo[i][bhObjRot][0] = 0;
						BrzaHranaInfo[i][bhObjRot][1] = 0;
						BrzaHranaInfo[i][bhObjRot][2] = 0;
						BrzaHranaInfo[i][bhObjID] = CreateDynamicObject(1340, x+2, y, z+0.6, 0.0, 0.0, angle);
						Streamer_Update(playerid);
						EditDynamicObject(playerid, BrzaHranaInfo[i][bhObjID]); EditBrzeHrane[playerid] = i;
						SacuvajBrzuHranu(i);
						break;
					}
				}
			}
			case 26: {
				for(new i = 1; i < MAX_GOVORNICA; i++) {
					new fileauta[40];
					format(fileauta, sizeof(fileauta), GOVORNICA_FILE, i);
					if(!fexist(fileauta)) {
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z); GetPlayerFacingAngle(playerid, angle);
						GovornicaInfo[i][gObjPos][0] = x;
						GovornicaInfo[i][gObjPos][1] = y;
						GovornicaInfo[i][gObjPos][2] = z;
						GovornicaInfo[i][gObjRot][0] = 0;
						GovornicaInfo[i][gObjRot][1] = 0;
						GovornicaInfo[i][gObjRot][2] = 0;
						GovornicaInfo[i][gObjID] = CreateDynamicObject(1216, x+2, y, z+0.6, 0.0, 0.0, angle);
						Streamer_Update(playerid);
						EditDynamicObject(playerid, GovornicaInfo[i][gObjID]); EditGovornice[playerid] = i;
						SacuvajGovornicu(i);
						break;
					}
				}
			}
			case 27: {
				for(new i = 1; i < MAX_NARGILA; i++) {
					new fileauta[40];
					format(fileauta, sizeof(fileauta), NARGILA_FILE, i);
					if(!fexist(fileauta)) {
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z); GetPlayerFacingAngle(playerid, angle);
						NargilaInfo[i][gObjPos][0] = x;
						NargilaInfo[i][gObjPos][1] = y;
						NargilaInfo[i][gObjPos][2] = z;
						NargilaInfo[i][gObjRot][0] = 0;
						NargilaInfo[i][gObjRot][1] = 0;
						NargilaInfo[i][gObjRot][2] = 0;
						NargilaInfo[i][gObjID] = CreateDynamicObject(2726, x+2, y, z+0.6, 0.0, 0.0, angle);
						Streamer_Update(playerid);
						EditDynamicObject(playerid, NargilaInfo[i][gObjID]); EditNargile[playerid] = i;
						SacuvajNargilu(i);
						break;
					}
				}
			}
			case 28: {
				SPD(playerid, dialog_CREATEVPORT, DSI, D_NASLOV, "Unesite ime ovog mesta za Vip port.", D_ODABERI, D_NAZAD);
			}
			case 29: {
				SPD(playerid, dialog_CREATEPPORT, DSI, D_NASLOV, "Unesite ime ovog mesta za Promoter port.", D_ODABERI, D_NAZAD);
			}

		}
	}
	else { SPD(playerid, dialog_SERVERMI, DSL, D_NASLOV, "Upravljanje serverom\nSacuvaj naloge\nNapravi\nIzbrisi\nIzmeni\nSpisak organizacija\nAntiCheat", D_ODABERI, D_ODUSTANI); }
}
else if(dialogid == dialog_CREATEFSTATION) {

	if(!response) return true;
	if(response) {

		new businessID, price[4], File[64];
		if(sscanf(inputtext, "iiiii", businessID, price[0], price[1], price[2], price[3])) return SPD(playerid, dialog_CREATEFSTATION, DSI, D_NASLOV, ""col_white"Unesite ID firme sa kojom povezujete, cenu benzina, cenu dizela, cenu gasa i cenu gasnog ulja.\nPrimer: 23, 12, 23, 32, 2", D_ODABERI, D_NAZAD);

		format(File, sizeof(File), F_FILE, businessID);
		if(!fexist(File)) return SendErrorMessage(playerid, "Ta firma(ID) ne postoji u bazi podataka!");

		new fstationID = NextFStationID(MAX_FSTATION), Float:PozX, Float:PozY, Float:PozZ, filename[40];
		GetPlayerPos(playerid, PozX, PozY, PozZ);
		format(filename, sizeof(filename), FSTATION_FILE, fstationID);
		if(fexist(filename)) return SendErrorMessage(playerid, "ID te pumpe vec postoji!");

		FuelStation[fstationID][fsPos][0] = PozX;
		FuelStation[fstationID][fsPos][1] = PozY;
		FuelStation[fstationID][fsPos][2] = PozZ;
		FuelStation[fstationID][fsPlaced] = true;
		FuelStation[fstationID][fsBusinessID] = businessID;

		FuelStation[fstationID][fsGasolinePrice] = price[0];
		FuelStation[fstationID][fsGasolineL] = 150;
		FuelStation[fstationID][fsDieselPrice] = price[1];
		FuelStation[fstationID][fsDieselL] = 150;
		FuelStation[fstationID][fsGasPrice] = price[2];
		FuelStation[fstationID][fsGasL] = 150;
		FuelStation[fstationID][fsGasOilPrice] = price[3];
		FuelStation[fstationID][fsGasOilL] = 150;
		FuelStation[fstationID][fsTruckID] = -1;
		FuelStation[fstationID][fsCisternID] = -1;
		strmid(FuelStation[fstationID][fsName], "Pumpa", 0, strlen("Pumpa"), 64);

		FStation_Save(fstationID);

		new string[512];
		format(string, sizeof(string), "{0F87FF]Pumpa [{FFFFFF]%s{0F87FF]]\nCena 1L BENZINA: {FFFFFF]%d$\n{0F87FF]Cena 1L DIZELA: {FFFFFF]%d$\n{0F87FF]Cena 1L PLINA: {FFFFFF]%d$\n{0F87FF]Cena 1L GASNOG ULJA: {FFFFFF]%d$\n{FFFFFF]/fill\n{0F87FF][{FFFFFF]Adresa: {FFFFFF]%d {0F87FF]]",
			FuelStation[fstationID][fsName],
			FuelStation[fstationID][fsGasolinePrice],
			FuelStation[fstationID][fsDieselPrice],
			FuelStation[fstationID][fsGasPrice],
			FuelStation[fstationID][fsGasOilPrice],
			fstationID);

			FuelStation[fstationID][fs3d] = CreateDynamic3DTextLabel(string, 0x33CCFFFF, FuelStation[fstationID][fsPos] [0], FuelStation[fstationID][fsPos] [1], FuelStation[fstationID][fsPos] [2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
			FuelStation[fstationID][fsPickup] = acc_CreateDynamicPickup (1650, 1, FuelStation[fstationID][fsPos] [0], FuelStation[fstationID][fsPos] [1], FuelStation[fstationID][fsPos] [2], 0, 0);

		CreatingFStation[playerid] = fstationID;
		ProcesFStation[playerid] = 1;
		SendInfoMessage(playerid, "Uspesno si kreirao pumpu, sada dodaj kamion koristeci tipku 'Y'.");

	}
}
else if(dialogid == dialog_GANGZCOLOR) {

	if(!response) return true;
	if(response) {

		new color[24], stringic[24];
		if(sscanf(inputtext, "s[24]", color)) return SPD(playerid, dialog_GANGZCOLOR, DSI, D_NASLOV, "Unesite boju za gang zonu.\nPrimer: FF2244", D_ODABERI, D_NAZAD);

		new id = NextGZoneID(MAX_GZONE);

		if(id == -1) return SendErrorMessage(playerid, "Vec ima maksimalni broj gang zona.");

		CreatingGZoneID[playerid] = id;

		format(stringic, sizeof(stringic), "%s", color);
		strmid(gZoneInfo[id][gZoneColor], stringic, 0, strlen(stringic), 255);

		CreatingGZone[playerid] = 1;
		SendInfoMessage(playerid, "Uneo si boju.");
		SendInfoMessage(playerid, "Koristi "col_white"LMB"col_server" da postavis pozicije.");
		SendInfoMessage(playerid, "Prvo sacuvaj poziciju levog donjeg ugla polja.");

	}
}
else if(dialogid == dialog_ORGCOLOR) {

	if(!response) return true;
	if(response) {

		new id = GetNearestOrganization(playerid);
		new color[24], stringic[24];
		if(sscanf(inputtext, "s[24]", color)) SPD(playerid, dialog_ORGCOLOR, DSI, D_NASLOV, "Unesite boju za organizaciju(Vezano za zone). Primer: FF00FF", D_ODABERI, D_ODUSTANI);

		format(stringic, sizeof(stringic), "%s", color);
		strmid(OI[id][oColor], stringic, 0, strlen(stringic), 255);
		SaveOrganization(id);

		SendInfoMessage(playerid, "Promenili ste boju organizacije.");

	}

}
else if(dialogid == dialog_CREATERADAR) {

	if(!response) return true;
	if(response) {

		new speed, ticket, radarID = NextRadarID(MAX_RADARS);

		if(sscanf(inputtext, "ii", speed, ticket)) return SPD(playerid, dialog_CREATERADAR, DSI, D_NASLOV, "Unesite dozvoljenu brzinu i kaznu.\nPrimer: 70 132", D_ODABERI, D_NAZAD);

		new Float:Pos[4];
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		GetPlayerFacingAngle(playerid, Pos[3]);

		radarInfo[radarID][radarMaxSpeed] = speed;
		radarInfo[radarID][radarPrice] = ticket;
		radarInfo[radarID][radarPos][0] = (Pos[0]+2);
		radarInfo[radarID][radarPos][1] = (Pos[1]+2);
		radarInfo[radarID][radarPos][2] = Pos[2];
		radarInfo[radarID][radarPos][3] = 0.000;
		radarInfo[radarID][radarPos][4] = 0.000;
		radarInfo[radarID][radarPos][5] = 0.000;

		radarInfo[radarID][radarObject] = CreateDynamicObject(18880, Pos[0], Pos[1], Pos[2], 0.0, 0.0, Pos[3]);
		Streamer_Update(playerid);
		EditDynamicObject(playerid, radarInfo[radarID][radarObject]); EditRadar[playerid] = radarID;
		SaveRadar(radarID);

		SendInfoMessage(playerid, "Napravili ste radar. Maximalna brzina: %d kazna: $%d", speed, ticket);

	}
}
else if(dialogid == dialog_CREATESPORT) {
	if(!response) return true;
	if(response) {

		new id = -1, Float:PozX, Float:PozY, Float:PozZ, nameaport[50];

		for(new a = 0; a < MAX_SPORTS; a++) {
			if(supportInfo[a][supportCreated] != 1) {
				id = a;
				break;
			} else continue;
		}
		if(id == -1) return SendErrorMessage(playerid, "Nema vise mesta za kreiranje Helper portova.");

		if(sscanf(inputtext, "s[50]", nameaport)) return SPD(playerid, dialog_CREATESPORT, DSI, D_NASLOV, "Unesite ime ovog mesta za Helper port.", D_ODABERI, D_NAZAD);

		GetPlayerPos(playerid, PozX, PozY, PozZ);

		supportInfo[id][supportID] = id;
		supportInfo[id][supportCreated] = 1;
		supportInfo[id][supportPos][0] = PozX;
		supportInfo[id][supportPos][1] = PozY;
		supportInfo[id][supportPos][2] = PozZ;
		strmid(supportInfo[id][supportName], nameaport, 0, strlen(nameaport), 50);

		SaveSports();

		SendInfoMessage(playerid, "Uspesno si kreirao novu lokaciju za Helper port.");
	}
}
else if(dialogid == dialog_CREATEAPORT) {
	if(!response) return true;
	if(response) {

		new id = -1, Float:PozX, Float:PozY, Float:PozZ, nameaport[50];

		for(new a = 0; a < MAX_APORTS; a++) {
			if(aportInfo[a][aportCreated] != 1) {
				id = a;
				break;
			} else continue;
		}
		if(id == -1) return SendErrorMessage(playerid, "Nema vise mesta za kreiranje Admin TEAM portova.");

		if(sscanf(inputtext, "s[50]", nameaport)) return SPD(playerid, dialog_CREATEAPORT, DSI, D_NASLOV, "Unesite ime ovog mesta za Admin TEAM port.", D_ODABERI, D_NAZAD);

		GetPlayerPos(playerid, PozX, PozY, PozZ);

		aportInfo[id][aportID] = id;
		aportInfo[id][aportCreated] = 1;
		aportInfo[id][aportPos][0] = PozX;
		aportInfo[id][aportPos][1] = PozY;
		aportInfo[id][aportPos][2] = PozZ;
		strmid(aportInfo[id][aportName], nameaport, 0, strlen(nameaport), 50);

		SaveAports();

		SendInfoMessage(playerid, "Uspesno si kreirao novu lokaciju za Admin TEAM port.");
	}
}
else if(dialogid == dialog_CREATEVPORT) {
	if(!response) return true;
	if(response) {

		new id = -1, Float:PozX, Float:PozY, Float:PozZ, namevport[50];

		for(new a = 0; a < MAX_VPORTS; a++) {
			if(vportInfo[a][vportCreated] != 1) {
				id = a;
				break;
			} else continue;
		}
		if(id == -1) return SendErrorMessage(playerid, "Nema vise mesta za kreiranje VIP portova.");

		if(sscanf(inputtext, "s[50]", namevport)) return SPD(playerid, dialog_CREATEVPORT, DSI, D_NASLOV, "Unesite ime ovog mesta za VIP port.", D_ODABERI, D_NAZAD);

		GetPlayerPos(playerid, PozX, PozY, PozZ);

		vportInfo[id][vportID] = id;
		vportInfo[id][vportCreated] = 1;
		vportInfo[id][vportPos][0] = PozX;
		vportInfo[id][vportPos][1] = PozY;
		vportInfo[id][vportPos][2] = PozZ;
		strmid(vportInfo[id][vportName], namevport, 0, strlen(namevport), 50);

		SaveVports();

		SendInfoMessage(playerid, "Uspesno si kreirao novu lokaciju za VIP port.");
	}
}
else if(dialogid == dialog_CREATEPPORT) {
	if(!response) return true;
	if(response) {

		new id = -1, Float:PozX, Float:PozY, Float:PozZ, namepport[50];

		for(new a = 0; a < MAX_PPORTS; a++) {
			if(pportInfo[a][pportCreated] != 1) {
				id = a;
				break;
			} else continue;
		}
		if(id == -1) return SendErrorMessage(playerid, "Nema vise mesta za kreiranje PROMOTER portova.");

		if(sscanf(inputtext, "s[50]", namepport)) return SPD(playerid, dialog_CREATEPPORT, DSI, D_NASLOV, "Unesite ime ovog mesta za PROMOTER port.", D_ODABERI, D_NAZAD);

		GetPlayerPos(playerid, PozX, PozY, PozZ);

		pportInfo[id][pportID] = id;
		pportInfo[id][pportCreated] = 1;
		pportInfo[id][pportPos][0] = PozX;
		pportInfo[id][pportPos][1] = PozY;
		pportInfo[id][pportPos][2] = PozZ;
		strmid(pportInfo[id][pportName], namepport, 0, strlen(namepport), 50);

		SavePports();

		SendInfoMessage(playerid, "Uspesno si kreirao novu lokaciju za PROMOTER port.");
	}
}
else if(dialogid == dialog_CREATEGPS) {
	if(!response) return true;
	if(response) {

		new id = NextGPSID(MAX_GPS), Float:PozX, Float:PozY, Float:PozZ, filename[60], namegps[50];

		format(filename, sizeof(filename), F_GPS, id);
		if(fexist(filename)) return SendErrorMessage(playerid, "ID te gps lokacije vec postoji!");

		if(sscanf(inputtext, "s[50]", namegps)) return SPD(playerid, dialog_CREATEGPS, DSI, D_NASLOV, "Unesite ime ovog mesta za gps.", D_ODABERI, D_NAZAD);

		GetPlayerPos(playerid, PozX, PozY, PozZ);

		gpsInfo[id][gpsPos][0] = PozX;
		gpsInfo[id][gpsPos][1] = PozY;
		gpsInfo[id][gpsPos][2] = PozZ;
		strmid(gpsInfo[id][gpsName], namegps, 0, strlen(namegps), 50);

		GPS_Save(id);

		SendInfoMessage(playerid, "Uspesno si kreirao novu gps lokaciju.");
	}
}
else if(dialogid == dialog_CREATEGARAGE) {
	if(!response) return true;
	if(response) {
		new id = NextGarageID(MAX_GARAGES), Float:PozX, Float:PozY, Float:PozZ, filename[40], vrsta[20];
		GetPlayerPos(playerid, PozX, PozY, PozZ);
		format(filename, sizeof(filename), F_GARAGE, id);
		if(fexist(filename)) return SendErrorMessage(playerid, "ID te garaze vec postoji!");

		garageInfo[id][garagePos][0] = PozX;
		garageInfo[id][garagePos][1] = PozY;
		garageInfo[id][garagePos][2] = PozZ;
		garageInfo[id][garageOwned] = false;
		strmid(garageInfo[id][garageOwner], "Drzava", 0, strlen("Drzava"), MAX_PLAYER_NAME);
		garageInfo[id][garageLocked] = false;
		garageInfo[id][garageVW] = id;
		switch(listitem) {
			case 0: {
				garageInfo[id][garagePrice] = 300000;
				garageInfo[id][garageLevel] = 15;
				vrsta = "Mala garaza";
			}
			case 1: {
				garageInfo[id][garagePrice] = 500000;
				garageInfo[id][garageLevel] = 15;
				vrsta = "Srednja garaza";
			}
			case 2: {
				garageInfo[id][garagePrice] = 800000;
				garageInfo[id][garageLevel] = 15;
				vrsta = "Velika garaza";
			}
		}
		garageInfo[id][garageType] = listitem;


		Garage_Save(id);
		new string[256];
		format(string, sizeof(string), ""col_orange"Garaza na prodaju"col_white"[ID %d]\n"col_orange"Tip garaze: "col_white"%s\n"col_orange"Cena garaze: "col_white"%d\n"col_orange"Potreban level: "col_white"%d\n"col_orange"Za kupovinu kucajte "col_white"/kupigarazu", id, vrsta, garageInfo[id][garagePrice], garageInfo[id][garageLevel]);
		garageInfo[id][garage3D] = CreateDynamic3DTextLabel(string, BELA, garageInfo[id][garagePos][0], garageInfo[id][garagePos][1], garageInfo[id][garagePos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		garageInfo[id][garagePickup] = acc_CreateDynamicPickup(2992, 1, garageInfo[id][garagePos][0], garageInfo[id][garagePos][1], garageInfo[id][garagePos][2], 0, 0);

		KreiraGarazu[playerid] = id;
		SendInfoMessage(playerid, "Uspesno si kreirao garazu, sada koristi '/veh 560 1 1'.");
		SendInfoMessage(playerid, "Zauzmi poziciju i sacuvaj lokaciju vozila kada izadje iz garaze.");
		SendInfoMessage(playerid, "Za cuvanje pozicije koristi '/garagesave'.");
	}
}
else if(dialogid == dialog_CREATEGATE) {
	if(!response) return true;
	if(response) {

		new g = NextGateID(MAX_GATES),
			Float:x,
			Float:y,
			Float:z,
			Float:angle,
			model;

		GetPlayerPos(playerid, x, y, z); GetPlayerFacingAngle(playerid, angle);

		if(sscanf(inputtext, "i", model)) return SPD(playerid, dialog_CREATEGATE, DSI, D_NASLOV, "Unesite id objekta kapije.", D_ODABERI, D_NAZAD);

		GateData[g][gateFor] = 0;
		GateData[g][gateOrgID] = -1;
		GateData[g][gateModel] = model;
		GateData[g][gateSpeed] = 3.0;
		GateData[g][gateRadius] = 13.0;
		GateData[g][gateOpened] = false;
		GateData[g][gateTime] = 0;

		GateData[g][gatePos][0] = x + (3.0 * floatsin(-angle, degrees));
		GateData[g][gatePos][1] = y + (3.0 * floatcos(-angle, degrees));
		GateData[g][gatePos][2] = z;
		GateData[g][gatePos][3] = 0.0;
		GateData[g][gatePos][4] = 0.0;
		GateData[g][gatePos][5] = angle;

		GateData[g][gateMove][0] = 0.0;
		GateData[g][gateMove][1] = 0.0;
		GateData[g][gateMove][2] = 0.0;
		GateData[g][gateMove][3] = 0.0;
		GateData[g][gateMove][4] = 0.0;
		GateData[g][gateMove][5] = 0.0;

		GateData[g][gateInterior] = GetPlayerInterior(playerid);
		GateData[g][gateWorld] = GetPlayerVirtualWorld(playerid);

		SaveGate(g);
		SCM(playerid, FUSIONGAMING, "Sada sacuvajte poziciju zatvorene kapije.");
		GateData[g][gateObject] = CreateDynamicObject(GateData[g][gateModel], GateData[g][gatePos][0], GateData[g][gatePos][1], GateData[g][gatePos][2], GateData[g][gatePos][3], GateData[g][gatePos][4], GateData[g][gatePos][5], GateData[g][gateWorld], GateData[g][gateInterior]);
		Streamer_Update(playerid);
		EditDynamicObject(playerid, GateData[g][gateObject]);
		EditDGate[playerid] = g;
	}
}
else if(dialogid == dialog_CREATEGATE_2) {
	if(!response) return true;
	if(response) {
		new g = EditDGate[playerid], Float:speed;
		if(sscanf(inputtext, "f", speed)) return SPD(playerid, dialog_CREATEGATE_2, DSI, D_NASLOV, "Unesite brzinu zatvaranja i otvaranja kapije(0-20.0).", D_ODABERI, D_NAZAD);
		if(speed < 0.0 || speed > 20.0) return SendErrorMessage(playerid, "Brzina otvaranja i zatvaranja vrata moze imat raspon od 0 do 20.");

		GateData[g][gateSpeed] = speed;
		SaveGate(g);
		SPD(playerid, dialog_CREATEGATE_3, DSI, D_NASLOV, "Unesite vreme posle koliko sekundi ce se zatvoriti kapija.", D_ODABERI, D_NAZAD);
	}
}
else if(dialogid == dialog_CREATEGATE_3) {
	if(!response) return true;
	if(response) {
		new g = EditDGate[playerid], brzina;
		if(sscanf(inputtext, "i", brzina)) return SPD(playerid, dialog_CREATEGATE_3, DSI, D_NASLOV, "Unesite vreme posle koliko sekundi ce se zatvoriti kapija.", D_ODABERI, D_NAZAD);
		if(brzina < 0 || brzina > 60) return SendErrorMessage(playerid, "Uneseno vreme ne moze biti manje od 0s ili vece od 60s.");

		GateData[g][gateTime] = brzina*1000;
		SaveGate(g);
		SPD(playerid, dialog_CREATEGATE_5, DSL, "Za sta pravite ovu kapiju?", "Organizacija\nIgrac\nAdmine\nHelpere\nVipove\nPromotere", "Izaberi", "Odustani");
	}
}
else if(dialogid == dialog_CREATEGATE_5) {

	if(!response) return true;
	if(response) {

		new g = EditDGate[playerid];

		switch(listitem) {

			case 0: {

				GateData[g][gateFor] = 1;
				SaveGate(g);
				SPD(playerid, dialog_CREATEGATE_6, DSI, D_NASLOV, "Unesite id organizacije za koju pravite kapiju.", D_ODABERI, D_NAZAD);
			}
			case 1:  {

				GateData[g][gateFor] = 2;
				SaveGate(g);
				SPD(playerid, dialog_CREATEGATE_4, DSI, D_NASLOV, "Unesite ime igraca koji moze kontrolisati ovu kapiju(FORMAT:Ime_Prezime).", D_ODABERI, D_NAZAD);
			}
			case 2:  {

				GateData[g][gateFor] = 3;
				SaveGate(g);
				SCM(playerid, FUSIONGAMING, "Uspesno ste zavrsili kreiranje kapije za admine.");
			}
			case 3:  {

				GateData[g][gateFor] = 4;
				SaveGate(g);
				SCM(playerid, FUSIONGAMING, "Uspesno ste zavrsili kreiranje kapije za Helpere.");
			}
			case 4:  {

				GateData[g][gateFor] = 5;
				SaveGate(g);
				SCM(playerid, FUSIONGAMING, "Uspesno ste zavrsili kreiranje kapije za vipove.");
			}
			case 5:  {

				GateData[g][gateFor] = 6;
				SaveGate(g);
				SCM(playerid, FUSIONGAMING, "Uspesno ste zavrsili kreiranje kapije za promotere.");
			}
		}
	}
}
else if(dialogid == dialog_CREATEGATE_6) {
	if(!response) return true;
	if(response) {
		new g = EditDGate[playerid], orga;
		if(sscanf(inputtext, "d", orga)) return SPD(playerid, dialog_CREATEGATE_6, DSI, D_NASLOV, "Unesite id organizacije za koju pravite kapiju.", D_ODABERI, D_NAZAD);

		GateData[g][gateOrgID] = orga;
		SaveGate(g);
		SendClientMessageEx(playerid, FUSIONGAMING, "Uspesno ste zavrsili kreiranje kapije za organizaciju %s.", getOrgName(orga));
	}
}
else if(dialogid == dialog_CREATEGATE_4) {
	if(!response) return true;
	if(response) {
		new g = EditDGate[playerid], ime[MAX_PLAYER_NAME];
		if(sscanf(inputtext, "s[24]", ime)) return SPD(playerid, dialog_CREATEGATE_4, DSI, D_NASLOV, "Unesite ime igraca koji moze kontrolisati ovu kapiju(FORMAT:Ime_Prezime).", D_ODABERI, D_NAZAD);

		strmid(GateData[g][gateOwner], ime, 0, strlen(ime), MAX_PLAYER_NAME);
		SaveGate(g);
		SendClientMessageEx(playerid, FUSIONGAMING, "Uspesno ste zavrsili kreiranje kapije za igraca %s.", ime);
	}
}
else if(dialogid == dialog_ASMAXMODEL) {
	if(!response) return true;
	if(response) {
		new broj, as = GetNearestSalon(playerid);
		if(as == -1) return SendErrorMessage(playerid, "Moras biti pored pickupa za kupnju u salonu.");
		if(sscanf(inputtext, "i", broj)) return SPD(playerid, dialog_ASMAXMODEL, DSI, D_NASLOV, "Unesite broj razlicith vrsti vozila koja ce se nalaziti u salonu(3-16)", D_ODABERI, D_NAZAD);
		if(broj < 3 || broj > 16) return SPD(playerid, dialog_ASMAXMODEL, DSI, D_NASLOV, "Unesite broj razlicith vrsti vozila koja ce se nalaziti u salonu(3-16)", D_ODABERI, D_NAZAD);
		AutoSalon[as][aMaxVehModel] = broj;
		SendClientMessageEx(playerid, FUSIONGAMING, "Odabrao si %d vrste vozila.", broj);
		SaveSalon(as);
		if(broj == 3) { SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422", D_ODABERI, D_NAZAD); }
		else if(broj == 4) { SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401", D_ODABERI, D_NAZAD); }
		else if(broj == 5) { SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411", D_ODABERI, D_NAZAD); }
		else if(broj == 6) { SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523", D_ODABERI, D_NAZAD); }
		else if(broj == 7) { SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527", D_ODABERI, D_NAZAD); }
		else if(broj == 8) { SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564", D_ODABERI, D_NAZAD); }
		else if(broj == 9) { SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562", D_ODABERI, D_NAZAD); }
		else if(broj == 10) { SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562 523", D_ODABERI, D_NAZAD); }
		else if(broj > 10) { SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD); }
	}
}
else if(dialogid == dialog_ASAMMOUNT) {
	if(!response) return true;
	if(response) {
		new as = KreiranAutoSalon[playerid], model[16];
		if(as == -1) return SendErrorMessage(playerid, "Ne kreiras nijedan salon.");
		switch(AutoSalon[as][aMaxVehModel]) {
			case 3: {
				if(sscanf(inputtext, "iii", model[0], model[1], model[2])) {
					new coordsstring[64];
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					strcat(DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n");
					strcat(DialogStrgEx, "__________________________________________________________________\n");
					for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
						format(coordsstring, sizeof(coordsstring), "Model %d - %s\n", (i+1), ImeVozila[(AutoSalon[as][aVehModel][i]- 400)]);
						strcat(DialogStrgEx, coordsstring);
					}
					SPD(playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					return true;
				}
			}
			case 4: {
				if(sscanf(inputtext, "iiii", model[0], model[1], model[2], model[3])) {
					new coordsstring[64];
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					strcat(DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n");
					strcat(DialogStrgEx, "__________________________________________________________________\n");
					for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
						format(coordsstring, sizeof(coordsstring), "Model %d - %s\n", (i+1), ImeVozila[(AutoSalon[as][aVehModel][i]- 400)]);
						strcat(DialogStrgEx, coordsstring);
					}
					SPD(playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					return true;
				}
			}
			case 5: {
				if(sscanf(inputtext, "iiiii", model[0], model[1], model[2], model[3], model[4])) {
					new coordsstring[64];
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					strcat(DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n");
					strcat(DialogStrgEx, "__________________________________________________________________\n");
					for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
						format(coordsstring, sizeof(coordsstring), "Model %d - %s\n", (i+1), ImeVozila[(AutoSalon[as][aVehModel][i]- 400)]);
						strcat(DialogStrgEx, coordsstring);
					}
					SPD(playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					return true;
				}
			}
			case 6: {
				if(sscanf(inputtext, "iiiiii", model[0], model[1], model[2], model[3], model[4], model[5])) {
					new coordsstring[64];
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					strcat(DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n");
					strcat(DialogStrgEx, "__________________________________________________________________\n");
					for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
						format(coordsstring, sizeof(coordsstring), "Model %d - %s\n", (i+1), ImeVozila[(AutoSalon[as][aVehModel][i]- 400)]);
						strcat(DialogStrgEx, coordsstring);
					}
					SPD(playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					return true;
				}
			}
			case 7: {
				if(sscanf(inputtext, "iiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6])) {
					new coordsstring[64];
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					strcat(DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n");
					strcat(DialogStrgEx, "__________________________________________________________________\n");
					for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
						format(coordsstring, sizeof(coordsstring), "Model %d - %s\n", (i+1), ImeVozila[(AutoSalon[as][aVehModel][i]- 400)]);
						strcat(DialogStrgEx, coordsstring);
					}
					SPD(playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					return true;
				}
			}
			case 8: {
				if(sscanf(inputtext, "iiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7])) {
					new coordsstring[64];
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					strcat(DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n");
					strcat(DialogStrgEx, "__________________________________________________________________\n");
					for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
						format(coordsstring, sizeof(coordsstring), "Model %d - %s\n", (i+1), ImeVozila[(AutoSalon[as][aVehModel][i]- 400)]);
						strcat(DialogStrgEx, coordsstring);
					}
					SPD(playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					return true;
				}
			}
			case 9: {
				if(sscanf(inputtext, "iiiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7], model[8])) {
					new coordsstring[64];
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					strcat(DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n");
					strcat(DialogStrgEx, "__________________________________________________________________\n");
					for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
						format(coordsstring, sizeof(coordsstring), "Model %d - %s\n", (i+1), ImeVozila[(AutoSalon[as][aVehModel][i]- 400)]);
						strcat(DialogStrgEx, coordsstring);
					}
					SPD(playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					return true;
				}
			}
			case 10: {
				if(sscanf(inputtext, "iiiiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7], model[8], model[9])) {
					new coordsstring[64];
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					strcat(DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n");
					strcat(DialogStrgEx, "__________________________________________________________________\n");
					for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
						format(coordsstring, sizeof(coordsstring), "Model %d - %s\n", (i+1), ImeVozila[(AutoSalon[as][aVehModel][i]- 400)]);
						strcat(DialogStrgEx, coordsstring);
					}
					SPD(playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					return true;
				}
			}
			case 11: {
				if(sscanf(inputtext, "iiiiiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7], model[8], model[9], model[10])) {
					new coordsstring[64];
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					strcat(DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n");
					strcat(DialogStrgEx, "__________________________________________________________________\n");
					for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
						format(coordsstring, sizeof(coordsstring), "Model %d - %s\n", (i+1), ImeVozila[(AutoSalon[as][aVehModel][i]- 400)]);
						strcat(DialogStrgEx, coordsstring);
					}
					SPD(playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					return true;
				}
			}
			case 12: {
				if(sscanf(inputtext, "iiiiiiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11])) {
					new coordsstring[64];
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					strcat(DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n");
					strcat(DialogStrgEx, "__________________________________________________________________\n");
					for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
						format(coordsstring, sizeof(coordsstring), "Model %d - %s\n", (i+1), ImeVozila[(AutoSalon[as][aVehModel][i]- 400)]);
						strcat(DialogStrgEx, coordsstring);
					}
					SPD(playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					return true;
				}
			}
			case 13: {
				if(sscanf(inputtext, "iiiiiiiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12])) {
					new coordsstring[64];
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					strcat(DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n");
					strcat(DialogStrgEx, "__________________________________________________________________\n");
					for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
						format(coordsstring, sizeof(coordsstring), "Model %d - %s\n", (i+1), ImeVozila[(AutoSalon[as][aVehModel][i]- 400)]);
						strcat(DialogStrgEx, coordsstring);
					}
					SPD(playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					return true;
				}
			}
			case 14: {
				if(sscanf(inputtext, "iiiiiiiiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13])) {
					new coordsstring[64];
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					strcat(DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n");
					strcat(DialogStrgEx, "__________________________________________________________________\n");
					for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
						format(coordsstring, sizeof(coordsstring), "Model %d - %s\n", (i+1), ImeVozila[(AutoSalon[as][aVehModel][i]- 400)]);
						strcat(DialogStrgEx, coordsstring);
					}
					SPD(playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					return true;
				}
			}
			case 15: {
				if(sscanf(inputtext, "iiiiiiiiiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13], model[14])) {
					new coordsstring[64];
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					strcat(DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n");
					strcat(DialogStrgEx, "__________________________________________________________________\n");
					for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
						format(coordsstring, sizeof(coordsstring), "Model %d - %s\n", (i+1), ImeVozila[(AutoSalon[as][aVehModel][i]- 400)]);
						strcat(DialogStrgEx, coordsstring);
					}
					SPD(playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					return true;
				}
			}
			case 16: {
				if(sscanf(inputtext, "iiiiiiiiiiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13], model[14], model[15])) {
					new coordsstring[64];
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					strcat(DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n");
					strcat(DialogStrgEx, "__________________________________________________________________\n");
					for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
						format(coordsstring, sizeof(coordsstring), "Model %d - %s\n", (i+1), ImeVozila[(AutoSalon[as][aVehModel][i]- 400)]);
						strcat(DialogStrgEx, coordsstring);
					}
					SPD(playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
					return true;
				}
			}
		}
		for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
			if(model[i] < 1) {
				new coordsstring[64];
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
				strcat(DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n");
				strcat(DialogStrgEx, "Kolicina ne moze ici ispod 1\n\n");
				strcat(DialogStrgEx, "__________________________________________________________________\n");
				for(new a = 0; a < AutoSalon[as][aMaxVehModel]; a++) {
					format(coordsstring, sizeof(coordsstring), "Model %d - %s\n", (a+1), ImeVozila[(AutoSalon[as][aVehModel][a]- 400)]);
					strcat(DialogStrgEx, coordsstring);
				}
				SPD(playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
				return true;
			}
			AutoSalon[as][aVehAmmount][i] = model[i];
		}
		SaveSalon(as);
		SendInfoMessage(playerid, "Uspesno si kolicinu svakog modela vozila.");
		SendInfoMessage(playerid, "Zavrsio si sa kreiranjem auto salona.");
		KreiranAutoSalon[playerid] = -1;
	}
}
else if(dialogid == dialog_ASMODEL) {
	if(!response) return true;
	if(response) {
		new as = GetNearestSalon(playerid);
		if(as == -1) return SendErrorMessage(playerid, "Moras biti pored pickupa za kupovinu u salonu.");
		if(AutoSalon[as][aMaxVehModel] == 3) {
			new model[3];
			if(sscanf(inputtext, "iii", model[0], model[1], model[2])) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422", D_ODABERI, D_NAZAD);
			for(new i = 0; i < 3; i++) {
				if(model[i] < 400 || model[i] > 611) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422", D_ODABERI, D_NAZAD);
			}
			AutoSalon[as][aVehModel][0] = model[0];
			AutoSalon[as][aVehModel][1] = model[1];
			AutoSalon[as][aVehModel][2] = model[2];
			SaveSalon(as);
		}
		else if(AutoSalon[as][aMaxVehModel] == 4) {
			new model[4];
			if(sscanf(inputtext, "iiii", model[0], model[1], model[2], model[3])) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401", D_ODABERI, D_NAZAD);
			for(new i = 0; i < 4; i++) {
				if(model[i] < 400 || model[i] > 611) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401", D_ODABERI, D_NAZAD);
			}
			AutoSalon[as][aVehModel][0] = model[0];
			AutoSalon[as][aVehModel][1] = model[1];
			AutoSalon[as][aVehModel][2] = model[2];
			AutoSalon[as][aVehModel][3] = model[3];
			SaveSalon(as);
		}
		else if(AutoSalon[as][aMaxVehModel] == 5) {
			new model[5];
			if(sscanf(inputtext, "iiiii", model[0], model[1], model[2], model[3], model[4])) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411", D_ODABERI, D_NAZAD);
			for(new i = 0; i < 5; i++) {
				if(model[i] < 400 || model[i] > 611) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411", D_ODABERI, D_NAZAD);
			}
			AutoSalon[as][aVehModel][0] = model[0];
			AutoSalon[as][aVehModel][1] = model[1];
			AutoSalon[as][aVehModel][2] = model[2];
			AutoSalon[as][aVehModel][3] = model[3];
			AutoSalon[as][aVehModel][4] = model[4];
			SaveSalon(as);
		}
		else if(AutoSalon[as][aMaxVehModel] == 6) {
			new model[6];
			if(sscanf(inputtext, "iiiiii", model[0], model[1], model[2], model[3], model[4], model[5])) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523", D_ODABERI, D_NAZAD);
			for(new i = 0; i < 6; i++) {
				if(model[i] < 400 || model[i] > 611) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523", D_ODABERI, D_NAZAD);
			}
			AutoSalon[as][aVehModel][0] = model[0];
			AutoSalon[as][aVehModel][1] = model[1];
			AutoSalon[as][aVehModel][2] = model[2];
			AutoSalon[as][aVehModel][3] = model[3];
			AutoSalon[as][aVehModel][4] = model[4];
			AutoSalon[as][aVehModel][5] = model[5];
			SaveSalon(as);
		}
		else if(AutoSalon[as][aMaxVehModel] == 7) {
			new model[7];
			if(sscanf(inputtext, "iiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6])) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527", D_ODABERI, D_NAZAD);
			for(new i = 0; i < 7; i++) {
				if(model[i] < 400 || model[i] > 611) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527", D_ODABERI, D_NAZAD);
			}
			AutoSalon[as][aVehModel][0] = model[0];
			AutoSalon[as][aVehModel][1] = model[1];
			AutoSalon[as][aVehModel][2] = model[2];
			AutoSalon[as][aVehModel][3] = model[3];
			AutoSalon[as][aVehModel][4] = model[4];
			AutoSalon[as][aVehModel][5] = model[5];
			AutoSalon[as][aVehModel][6] = model[6];
			SaveSalon(as);
		}
		else if(AutoSalon[as][aMaxVehModel] == 8) {
			new model[8];
			if(sscanf(inputtext, "iiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7])) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564", D_ODABERI, D_NAZAD);
			for(new i = 0; i < 8; i++) {
				if(model[i] < 400 || model[i] > 611) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564", D_ODABERI, D_NAZAD);
			}
			AutoSalon[as][aVehModel][0] = model[0];
			AutoSalon[as][aVehModel][1] = model[1];
			AutoSalon[as][aVehModel][2] = model[2];
			AutoSalon[as][aVehModel][3] = model[3];
			AutoSalon[as][aVehModel][4] = model[4];
			AutoSalon[as][aVehModel][5] = model[5];
			AutoSalon[as][aVehModel][6] = model[6];
			AutoSalon[as][aVehModel][7] = model[7];
			SaveSalon(as);
		}
		else if(AutoSalon[as][aMaxVehModel] == 9) {
			new model[9];
			if(sscanf(inputtext, "iiiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7], model[8])) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562", D_ODABERI, D_NAZAD);
			for(new i = 0; i < 9; i++) {
				if(model[i] < 400 || model[i] > 611) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562", D_ODABERI, D_NAZAD);
			}
			AutoSalon[as][aVehModel][0] = model[0];
			AutoSalon[as][aVehModel][1] = model[1];
			AutoSalon[as][aVehModel][2] = model[2];
			AutoSalon[as][aVehModel][3] = model[3];
			AutoSalon[as][aVehModel][4] = model[4];
			AutoSalon[as][aVehModel][5] = model[5];
			AutoSalon[as][aVehModel][6] = model[6];
			AutoSalon[as][aVehModel][7] = model[7];
			AutoSalon[as][aVehModel][8] = model[8];
			SaveSalon(as);
		}
		else if(AutoSalon[as][aMaxVehModel] == 10) {
			new model[10];
			if(sscanf(inputtext, "iiiiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7], model[8], model[9])) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562 523", D_ODABERI, D_NAZAD);
			for(new i = 0; i < 10; i++) {
				if(model[i] < 400 || model[i] > 611) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562 523", D_ODABERI, D_NAZAD);
			}
			AutoSalon[as][aVehModel][0] = model[0];
			AutoSalon[as][aVehModel][1] = model[1]; AutoSalon[as][aVehModel][2] = model[2]; AutoSalon[as][aVehModel][3] = model[3];
			AutoSalon[as][aVehModel][4] = model[4]; AutoSalon[as][aVehModel][5] = model[5]; AutoSalon[as][aVehModel][6] = model[6];
			AutoSalon[as][aVehModel][7] = model[7]; AutoSalon[as][aVehModel][8] = model[8]; AutoSalon[as][aVehModel][9] = model[9];
			SaveSalon(as);
		}
		else if(AutoSalon[as][aMaxVehModel] == 11) {
			new model[11];
			if(sscanf(inputtext, "iiiiiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7], model[8], model[9], model[10])) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD);
			for(new i = 0; i < 11; i++) {
				if(model[i] < 400 || model[i] > 611) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD);
			}
			AutoSalon[as][aVehModel][0] = model[0];
			AutoSalon[as][aVehModel][1] = model[1]; AutoSalon[as][aVehModel][2] = model[2]; AutoSalon[as][aVehModel][3] = model[3];
			AutoSalon[as][aVehModel][4] = model[4]; AutoSalon[as][aVehModel][5] = model[5]; AutoSalon[as][aVehModel][6] = model[6];
			AutoSalon[as][aVehModel][7] = model[7]; AutoSalon[as][aVehModel][8] = model[8]; AutoSalon[as][aVehModel][9] = model[9];
			AutoSalon[as][aVehModel][10] = model[10];
			SaveSalon(as);
		}
		else if(AutoSalon[as][aMaxVehModel] == 12) {
			new model[12];
			if(sscanf(inputtext, "iiiiiiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11])) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD);
			for(new i = 0; i < 12; i++) {
				if(model[i] < 400 || model[i] > 611) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD);
			}
			AutoSalon[as][aVehModel][0] = model[0];
			AutoSalon[as][aVehModel][1] = model[1]; AutoSalon[as][aVehModel][2] = model[2]; AutoSalon[as][aVehModel][3] = model[3];
			AutoSalon[as][aVehModel][4] = model[4]; AutoSalon[as][aVehModel][5] = model[5]; AutoSalon[as][aVehModel][6] = model[6];
			AutoSalon[as][aVehModel][7] = model[7]; AutoSalon[as][aVehModel][8] = model[8]; AutoSalon[as][aVehModel][9] = model[9];
			AutoSalon[as][aVehModel][10] = model[10]; AutoSalon[as][aVehModel][11] = model[11];
			SaveSalon(as);
		}
		else if(AutoSalon[as][aMaxVehModel] == 13) {
			new model[13];
			if(sscanf(inputtext, "iiiiiiiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12])) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD);
			for(new i = 0; i < 13; i++) {
				if(model[i] < 400 || model[i] > 611) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD);
			}
			AutoSalon[as][aVehModel][0] = model[0];
			AutoSalon[as][aVehModel][1] = model[1]; AutoSalon[as][aVehModel][2] = model[2]; AutoSalon[as][aVehModel][3] = model[3];
			AutoSalon[as][aVehModel][4] = model[4]; AutoSalon[as][aVehModel][5] = model[5]; AutoSalon[as][aVehModel][6] = model[6];
			AutoSalon[as][aVehModel][7] = model[7]; AutoSalon[as][aVehModel][8] = model[8]; AutoSalon[as][aVehModel][9] = model[9];
			AutoSalon[as][aVehModel][10] = model[10]; AutoSalon[as][aVehModel][11] = model[11]; AutoSalon[as][aVehModel][12] = model[12];
			SaveSalon(as);
		}
		else if(AutoSalon[as][aMaxVehModel] == 14) {
			new model[14];
			if(sscanf(inputtext, "iiiiiiiiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13])) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD);
			for(new i = 0; i < 14; i++) {
				if(model[i] < 400 || model[i] > 611) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD);
			}
			AutoSalon[as][aVehModel][0] = model[0];
			AutoSalon[as][aVehModel][1] = model[1]; AutoSalon[as][aVehModel][2] = model[2]; AutoSalon[as][aVehModel][3] = model[3];
			AutoSalon[as][aVehModel][4] = model[4]; AutoSalon[as][aVehModel][5] = model[5]; AutoSalon[as][aVehModel][6] = model[6];
			AutoSalon[as][aVehModel][7] = model[7]; AutoSalon[as][aVehModel][8] = model[8]; AutoSalon[as][aVehModel][9] = model[9];
			AutoSalon[as][aVehModel][10] = model[10]; AutoSalon[as][aVehModel][11] = model[11]; AutoSalon[as][aVehModel][12] = model[12];
			AutoSalon[as][aVehModel][13] = model[13];
			SaveSalon(as);
		}
		else if(AutoSalon[as][aMaxVehModel] == 15) {
			new model[15];
			if(sscanf(inputtext, "iiiiiiiiiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13], model[14])) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD);
			for(new i = 0; i < 15; i++) {
				if(model[i] < 400 || model[i] > 611) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD);
			}
			AutoSalon[as][aVehModel][0] = model[0];
			AutoSalon[as][aVehModel][1] = model[1]; AutoSalon[as][aVehModel][2] = model[2]; AutoSalon[as][aVehModel][3] = model[3];
			AutoSalon[as][aVehModel][4] = model[4]; AutoSalon[as][aVehModel][5] = model[5]; AutoSalon[as][aVehModel][6] = model[6];
			AutoSalon[as][aVehModel][7] = model[7]; AutoSalon[as][aVehModel][8] = model[8]; AutoSalon[as][aVehModel][9] = model[9];
			AutoSalon[as][aVehModel][10] = model[10]; AutoSalon[as][aVehModel][11] = model[11]; AutoSalon[as][aVehModel][12] = model[12];
			AutoSalon[as][aVehModel][13] = model[13]; AutoSalon[as][aVehModel][14] = model[14];
			SaveSalon(as);
		}
		else if(AutoSalon[as][aMaxVehModel] == 16) {
			new model[16];
			if(sscanf(inputtext, "iiiiiiiiiiiiiiii", model[0], model[1], model[2], model[3], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13], model[14], model[15])) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD);
			for(new i = 0; i < 16; i++) {
				if(model[i] < 400 || model[i] > 611) return SPD(playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD);
			}
			AutoSalon[as][aVehModel][0] = model[0];
			AutoSalon[as][aVehModel][1] = model[1]; AutoSalon[as][aVehModel][2] = model[2]; AutoSalon[as][aVehModel][3] = model[3];
			AutoSalon[as][aVehModel][4] = model[4]; AutoSalon[as][aVehModel][5] = model[5]; AutoSalon[as][aVehModel][6] = model[6];
			AutoSalon[as][aVehModel][7] = model[7]; AutoSalon[as][aVehModel][8] = model[8]; AutoSalon[as][aVehModel][9] = model[9];
			AutoSalon[as][aVehModel][10] = model[10]; AutoSalon[as][aVehModel][11] = model[11]; AutoSalon[as][aVehModel][12] = model[12];
			AutoSalon[as][aVehModel][13] = model[13]; AutoSalon[as][aVehModel][14] = model[14]; AutoSalon[as][aVehModel][15] = model[15];
			SaveSalon(as);
		}
		SendInfoMessage(playerid, "Uspesno si sacuvao modele koji ce se prodavati u salonu.");
		SCM(playerid, FUSIONGAMING, "Kada izadjes na cisti prostor kucaj '/veh 560 1 1' da spawnas vozilo koje ce biti u izlogu za prodaju.");
		SCM(playerid, FUSIONGAMING, "Kada spawnas vozilo i nadjes lokaciju kucaj /asvozilo.");
	}
}
else if(dialogid == dialog_IZBRISISVE) {
	if(!response) return true;
	if(response) {
		if(listitem == 0) {
			SPD(playerid, dialog_ORGDELETE, DSI, D_NASLOV, "Unesite id organizacije koju zelite obrisati!", D_ODABERI, D_ODUSTANI); }
		if(listitem == 1) {
			SPD(playerid, dialog_FDELETE, DSI, D_NASLOV, "Unesite id firme koju zelite obrisati!", D_ODABERI, D_ODUSTANI); }
		if(listitem == 2) {
			SPD(playerid, dialog_IMDELETE, DSI, D_NASLOV, "Unesite id imovine koju zelite obrisati!", D_ODABERI, D_ODUSTANI); }
		if(listitem == 3) {
			if(GetNearestContainer(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu kontejnera.");
			new i = GetNearestContainer(playerid);

			if(IsValidDynamicObject(KontInfo[i][koObjID]))
				DestroyDynamicObject(KontInfo[i][koObjID]);

			KontInfo[i][koObjPos][0] = 0;
			KontInfo[i][koObjPos][1] = 0;
			KontInfo[i][koObjPos][2] = 0;
			KontInfo[i][koObjRot][0] = 0;
			KontInfo[i][koObjRot][1] = 0;
			KontInfo[i][koObjRot][2] = 0;

			new fstring[64];
			format(fstring, sizeof(fstring), KO_FILE, i);
			if(fexist(fstring)) { fremove(fstring); }

			SendInfoMessage(playerid, "Obrisao si kontejner. ID = %d.", i);
		}
		if(listitem == 4) {
			if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu!");
			if(ScriptIDVozila[GetPlayerVehicleID(playerid)] == -1) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti u server side vozilu.");

			new autoid = ScriptIDVozila[GetPlayerVehicleID(playerid)];

			Fusion_DestroyVehicle(VehicleInfo[autoid][vID]);
			ResetVehicle(autoid);
			ObrisiVozilo(autoid);

			SendInfoMessage(playerid, "Obrisao si vozilo. ID = %d.", autoid);
		}
		if(listitem == 5) {
			if(GetNearestAtm(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu bankomata.");
			new i = GetNearestAtm(playerid);

			if(IsValidDynamicObject(atmInfo[i][atmObject]))
				DestroyDynamicObject(atmInfo[i][atmObject]);

			if(IsValidDynamic3DTextLabel(atmInfo[i][atmText3D])) DestroyDynamic3DTextLabel(atmInfo[i][atmText3D]);

			atmInfo[i][atmPos][0] = 0;
			atmInfo[i][atmPos][1] = 0;
			atmInfo[i][atmPos][2] = 0;
			atmInfo[i][atmPos][3] = 0;
			atmInfo[i][atmPos][4] = 0;
			atmInfo[i][atmPos][5] = 0;
			atmInfo[i][atmPreseceneZice] = false;
			atmInfo[i][atmProbijenBios] = false;
			atmInfo[i][atmVremeDoRoba] = 0;
			atmInfo[i][atmExists] = false;

			new fstring[64];
			format(fstring, sizeof(fstring), ATM_FILE, i);
			if(fexist(fstring)) { fremove(fstring); }

			SendInfoMessage(playerid, "Obrisao si bankomat. ID = %d.", i);
		}
		if(listitem == 6) {
			new as = GetNearestSalon(playerid), slotid = AutoSalon[as][aIzlogVeh];
			if(as == -1) return SendErrorMessage(playerid, "Moras biti pored pickupa za kupnju u salonu.");

			Fusion_DestroyVehicle(VehicleInfo[slotid][vID]);
			ResetVehicle(slotid);
			ObrisiVozilo(slotid);

			if(IsValidDynamic3DTextLabel(AutoSalon[as][AutoSalon3D]))
				DestroyDynamic3DTextLabel(AutoSalon[as][AutoSalon3D]);

			if(IsValidDynamicPickup(AutoSalon[as][AutoSalonPickup]))
				ac_DestroyDynamicPickup(AutoSalon[as][AutoSalonPickup]);

			AutoSalon[as][aPickupPos][0] = 0.0;
			AutoSalon[as][aPickupPos][1] = 0.0;
			AutoSalon[as][aPickupPos][2] = 0.0;
			AutoSalon[as][aVW] = 0;
			AutoSalon[as][aInt] = 0;
			AutoSalon[as][aVehBuyedPos][0] = 0.0; AutoSalon[as][aVehBuyedPos][1] = 0.0; AutoSalon[as][aVehBuyedPos][2] = 0.0; AutoSalon[as][aVehBuyedPos][3] = 0.0;
			AutoSalon[as][aCameraPos][0] = 0.0; AutoSalon[as][aCameraPos][1] = 0.0; AutoSalon[as][aCameraPos][2] = 0.0;
			AutoSalon[as][aCameraLookAt][0] = 0.0; AutoSalon[as][aCameraLookAt][1] = 0.0; AutoSalon[as][aCameraLookAt][2] = 0.0;
			AutoSalon[as][aVehModel][0] = 0; AutoSalon[as][aMaxVehModel] = 0;
			AutoSalon[as][aVehModel][1] = 0; AutoSalon[as][aVehModel][2] = 0; AutoSalon[as][aVehModel][3] = 0;
			AutoSalon[as][aVehModel][4] = 0; AutoSalon[as][aVehModel][5] = 0; AutoSalon[as][aVehModel][6] = 0;
			AutoSalon[as][aVehModel][7] = 0; AutoSalon[as][aVehModel][8] = 0; AutoSalon[as][aVehModel][9] = 0;
			AutoSalon[as][aVehModel][10] = 0; AutoSalon[as][aVehModel][11] = 0; AutoSalon[as][aVehModel][12] = 0;
			AutoSalon[as][aVehModel][13] = 0; AutoSalon[as][aVehModel][14] = 0; AutoSalon[as][aVehModel][15] = 0;

			new asFile[50];
			format(asFile, sizeof(asFile), AS_FILE, as);
			if(fexist(asFile)) { fremove(asFile); }

			SendInfoMessage(playerid, "Obrisao si autosalon. ID = %d.", as);
		}
		if(listitem == 7) {
			new string[15],
					portid = GetNearestOrgPortID(playerid),
						orgid = GetNearestOrgIDPort(playerid);

			if(portid == -1 || orgid == -1) return SendErrorMessage(playerid, "U blizini nema organizacijskih portova");

			if(IsValidDynamicPickup(PortOP[orgid][portid][Pickup][0]))
				ac_DestroyDynamicPickup(PortOP[orgid][portid][Pickup][0]);

			if(IsValidDynamicPickup(PortOP[orgid][portid][Pickup][1]))
				ac_DestroyDynamicPickup(PortOP[orgid][portid][Pickup][1]);

			PortOP[orgid][portid][Pos1][0] = 0.0;
			PortOP[orgid][portid][Pos1][1] = 0.0;
			PortOP[orgid][portid][Pos1][2] = 0.0;
			PortOP[orgid][portid][Int][0] = 0;
			PortOP[orgid][portid][VW][0] = 0;
			PortOP[orgid][portid][Pos2][0] = 0.0;
			PortOP[orgid][portid][Pos2][1] = 0.0;
			PortOP[orgid][portid][Pos2][2] = 0.0;
			PortOP[orgid][portid][Int][1] = 0;
			PortOP[orgid][portid][VW][1] = 0;

			new pFile[40];
			format(pFile, sizeof(pFile), PORT_FILE, orgid);
			new INI:File = INI_Open(pFile);

			format(string, sizeof(string), "Pos1X%d", portid);
			INI_WriteFloat(File, string, 0.0);

			format(string, sizeof(string), "Pos1Y%d", portid);
			INI_WriteFloat(File, string, 0.0);

			format(string, sizeof(string), "Pos1Z%d", portid);
			INI_WriteFloat(File, string, 0.0);

			format(string, sizeof(string), "Int1%d", portid);
			INI_WriteInt(File, string, 0);

			format(string, sizeof(string), "VW1%d", portid);
			INI_WriteInt(File, string, 0);

			format(string, sizeof(string), "Pos2X%d", portid);
			INI_WriteFloat(File, string, 0.0);

			format(string, sizeof(string), "Pos2Y%d", portid);
			INI_WriteFloat(File, string, 0.0);

			format(string, sizeof(string), "Pos2Z%d", portid);
			INI_WriteFloat(File, string, 0.0);

			format(string, sizeof(string), "Int2%d", portid);
			INI_WriteInt(File, string, 0);

			format(string, sizeof(string), "VW2%d", portid);
			INI_WriteInt(File, string, 0);

			INI_Close(File);

			SendInfoMessage(playerid, "Obrisao si port za orgu. ID = %d.", orgid);
		}
		if(listitem == 8) {
			if(GetNearestHotel(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu hotela.");
			new h = GetNearestHotel(playerid);

			if(IsValidDynamicPickup(hotelInfo[h][hPickup]))
				ac_DestroyDynamicPickup(hotelInfo[h][hPickup]);

			if(IsValidDynamic3DTextLabel(hotelInfo[h][h3DText]))
				DestroyDynamic3DTextLabel(hotelInfo[h][h3DText]);

			new fstring[64];
			format(fstring, sizeof(fstring), HOTEL_FILE, h);
			if(fexist(fstring)) { fremove(fstring); }

			SendInfoMessage(playerid, "Obrisao si hotel. ID = %d.", h);
		}
		if(listitem == 9) {

			if(NearestGate(playerid) == -1) return SendErrorMessage(playerid, "Moras biti pored kapije.");
			new g = NearestGate(playerid);

			if(IsValidDynamicObject(GateData[g][gateObject]))
				DestroyDynamicObject(GateData[g][gateObject]);

			new fstring[64];
			format(fstring, sizeof(fstring), GATE_FILE, g);
			if(fexist(fstring)) { fremove(fstring); }

			SendInfoMessage(playerid, "Obrisao si kapiju. ID = %d.", g);
		}
		if(listitem == 10) {
			if(GetNearestField(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu imanja.");
			new id = GetNearestField(playerid);

			if(IsValidDynamicPickup(fieldInfo[id][fieldPickup]))
				ac_DestroyDynamicPickup(fieldInfo[id][fieldPickup]);

			if(IsValidDynamic3DTextLabel(fieldInfo[id][field3D]))
				DestroyDynamic3DTextLabel(fieldInfo[id][field3D]);

			if(IsValidDynamicObject(fieldInfo[id][fieldObject]))
				DestroyDynamicObject(fieldInfo[id][fieldObject]);

			ResetField(id);

			new fstring[64];
			format(fstring, sizeof(fstring), F_FIELD, id);
			if(fexist(fstring)) { fremove(fstring); }

			SendInfoMessage(playerid, "Obrisao si imanje. ID = %d.", id);
		}
		if(listitem == 11) {
			if(GetNearestGarage(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu garaze.");
			new id = GetNearestGarage(playerid);

			if(IsValidDynamicPickup(garageInfo[id][garagePickup]))
				ac_DestroyDynamicPickup(garageInfo[id][garagePickup]);

			if(IsValidDynamic3DTextLabel(garageInfo[id][garage3D]))
				DestroyDynamic3DTextLabel(garageInfo[id][garage3D]);

			ResetGarage(id);

			new fstring[64];
			format(fstring, sizeof(fstring), F_GARAGE, id);
			if(fexist(fstring)) { fremove(fstring); }

			SendInfoMessage(playerid, "Obrisao si garazu. ID = %d.", id);
		}
		if(listitem == 12) {

			if(GetNearestRadar(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu radara.");
			new id = GetNearestRadar(playerid);

			if(IsValidDynamicObject(radarInfo[id][radarObject]))
				DestroyDynamicObject(radarInfo[id][radarObject]);

			radarInfo[id][radarMaxSpeed] = 0;
			radarInfo[id][radarPrice] = 0;
			radarInfo[id][radarPos][0] = 0;
			radarInfo[id][radarPos][1] = 0;
			radarInfo[id][radarPos][2] = 0;
			radarInfo[id][radarPos][3] = 0;
			radarInfo[id][radarPos][4] = 0;
			radarInfo[id][radarPos][5] = 0;

			new fstring[64];
			format(fstring, sizeof(fstring), F_RADARS, id);
			if(fexist(fstring)) { fremove(fstring); }

			SendInfoMessage(playerid, "Obrisao si radar. ID = %d.", id);
		}
		if(listitem == 13) {

			if(GetNearestGZone(playerid) == -1) return SendErrorMessage(playerid, "Moras biti u teritoriji.");
			new id = GetNearestGZone(playerid);

			if(IsValidDynamicPickup(gZoneInfo[id][gZonePickup]))
				IsValidDynamicPickup(gZoneInfo[id][gZonePickup]);

			if(IsValidDynamic3DTextLabel(gZoneInfo[id][gZone3D]))
				DestroyDynamic3DTextLabel(gZoneInfo[id][gZone3D]);

			if(IsValidDynamicArea(gZoneInfo[id][gZoneRectAngle]))
				IsValidDynamicArea(gZoneInfo[id][gZoneRectAngle]);
				
			if(IsValidDynamicObject(gZoneInfo[id][gZoneObjID]))
				DestroyDynamicObject(gZoneInfo[id][gZoneObjID]);

			GZone_Reset(id);

			GangZoneHideForAll(gZoneInfo[id][gZoneID]);
			GangZoneDestroy(gZoneInfo[id][gZoneID]);

			new fstring[64];
			format(fstring, sizeof(fstring), F_GZONE, id);
			if(fexist(fstring)) { fremove(fstring); }

			SendInfoMessage(playerid, "Obrisao si gangzonu. ID = %d.", id);

		}
		if(listitem == 14) {

			if(GetNearestPresent(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu poklona.");
			new i = GetNearestPresent(playerid);

			if(IsValidDynamicObject(presentsInfo[i][presObject]))
				DestroyDynamicObject(presentsInfo[i][presObject]);

			if(IsValidDynamic3DTextLabel(presentsInfo[i][pres3d]))
				DestroyDynamic3DTextLabel(presentsInfo[i][pres3d]);

			presentsInfo[i][presPos][0] = 0;
			presentsInfo[i][presPos][1] = 0;
			presentsInfo[i][presPos][2] = 0;
			presentsInfo[i][presPos][3] = 0;
			presentsInfo[i][presPos][4] = 0;
			presentsInfo[i][presPos][5] = 0;
			presentsInfo[i][presTaken] = true;
			presentsInfo[i][presPlaced] = false;

			new fstring[64];
			format(fstring, sizeof(fstring), F_PRESENTS, i);
			if(fexist(fstring)) { fremove(fstring); }

			SendInfoMessage(playerid, "Obrisao si poklon. ID = %d.", i);
		}
		if(listitem == 15) {

			if(GetNearestCTree(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu jelke.");
			new i = GetNearestCTree(playerid);

			if(IsValidDynamicObject(CTree[i][ctObject]))
				DestroyDynamicObject(CTree[i][ctObject]);

			if(IsValidDynamic3DTextLabel(CTree[i][ct3d]))
				DestroyDynamic3DTextLabel(CTree[i][ct3d]);

			CTree[i][ctPos][0] = 0;
			CTree[i][ctPos][1] = 0;
			CTree[i][ctPos][2] = 0;
			CTree[i][ctPos][3] = 0;
			CTree[i][ctPos][4] = 0;
			CTree[i][ctPos][5] = 0;
			CTree[i][ctPlaced] = false;

			new fstring[64];
			format(fstring, sizeof(fstring), F_CTREES, i);
			if(fexist(fstring)) { fremove(fstring); }

			SendInfoMessage(playerid, "Obrisao si jelku. ID = %d.", i);
		}
		if(listitem == 16) {

			if(GetNearestXOrb(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu lampe.");
			new i = GetNearestXOrb(playerid);

			if(IsValidDynamicObject(XmasOrbs[i][xoObject]))
				DestroyDynamicObject(XmasOrbs[i][xoObject]);

			XmasOrbs[i][xoPos][0] = 0;
			XmasOrbs[i][xoPos][1] = 0;
			XmasOrbs[i][xoPos][2] = 0;
			XmasOrbs[i][xoPos][3] = 0;
			XmasOrbs[i][xoPos][4] = 0;
			XmasOrbs[i][xoPos][5] = 0;
			XmasOrbs[i][xoPlaced] = false;

			new fstring[64];
			format(fstring, sizeof(fstring), F_XORBS, i);
			if(fexist(fstring)) { fremove(fstring); }

			SendInfoMessage(playerid, "Obrisao si lampu. ID = %d.", i);
		}
		if(listitem == 17) {
			if(GetNearestBrzaHrana(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu brze hrane.");
			new i = GetNearestBrzaHrana(playerid);

			if(IsValidDynamicObject(BrzaHranaInfo[i][bhObjID]))
				DestroyDynamicObject(BrzaHranaInfo[i][bhObjID]);

			BrzaHranaInfo[i][bhObjPos][0] = 0;
			BrzaHranaInfo[i][bhObjPos][1] = 0;
			BrzaHranaInfo[i][bhObjPos][2] = 0;
			BrzaHranaInfo[i][bhObjRot][0] = 0;
			BrzaHranaInfo[i][bhObjRot][1] = 0;
			BrzaHranaInfo[i][bhObjRot][2] = 0;

			new fstring[64];
			format(fstring, sizeof(fstring), BRZAHRANA_FILE, i);
			if(fexist(fstring)) { fremove(fstring); }

			SendInfoMessage(playerid, "Obrisao si brzu hranu. ID = %d.", i);
		}
		if(listitem == 18) {
			if(GetNearestGovornica(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu govornice.");
			new i = GetNearestGovornica(playerid);

			if(IsValidDynamicObject(GovornicaInfo[i][gObjID]))
				DestroyDynamicObject(GovornicaInfo[i][gObjID]);

			GovornicaInfo[i][gObjPos][0] = 0;
			GovornicaInfo[i][gObjPos][1] = 0;
			GovornicaInfo[i][gObjPos][2] = 0;
			GovornicaInfo[i][gObjRot][0] = 0;
			GovornicaInfo[i][gObjRot][1] = 0;
			GovornicaInfo[i][gObjRot][2] = 0;

			new fstring[64];
			format(fstring, sizeof(fstring), GOVORNICA_FILE, i);
			if(fexist(fstring)) { fremove(fstring); }

			SendInfoMessage(playerid, "Obrisao si govornicu. ID = %d.", i);
		}
		if(listitem == 19) {
			if(GetNearestNargila(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu nargile.");
			new i = GetNearestNargila(playerid);

			if(IsValidDynamicObject(NargilaInfo[i][gObjID]))
				DestroyDynamicObject(NargilaInfo[i][gObjID]);

			NargilaInfo[i][gObjPos][0] = 0;
			NargilaInfo[i][gObjPos][1] = 0;
			NargilaInfo[i][gObjPos][2] = 0;
			NargilaInfo[i][gObjRot][0] = 0;
			NargilaInfo[i][gObjRot][1] = 0;
			NargilaInfo[i][gObjRot][2] = 0;

			new fstring[64];
			format(fstring, sizeof(fstring), NARGILA_FILE, i);
			if(fexist(fstring)) { fremove(fstring); }

			SendInfoMessage(playerid, "Obrisao si nargilu. ID = %d.", i);
		}
	}
}
else if(dialogid == dialog_IZMENISVE) {
	if(!response) return true;
	if(response) {
		if(listitem == 0) {
			SPD(playerid, dialog_ORGEDIT, DSL, D_NASLOV, "Promeni Ime\nPromeni Interior\nPromeni Rankove\nPromeni Tip\nPromeni muske skinove\nPromeni Skracenicu\nNapravi DutyPoint\nNapravi Equipment Point\nNapravi Port point\nPromeni zenske skinove\nPromeni max broj clanova\nOdaberi vrstu droge\nKreiraj sef\nPromeni boju orge\nZakljucaj organizaciju\nSprayID", D_ODABERI, D_ODUSTANI); }
		if(listitem == 1) {
			SPD(playerid, dialog_FEDIT, DSL, D_NASLOV, "Promeni Ime\nOtkljucaj firmu\nZakljucaj firmu\nProdaj firmu\nPromeni kordinate izlaza\nPromeni vrstu firme", D_ODABERI, D_ODUSTANI); }
		if(listitem == 2) {
			SPD(playerid, dialog_VEDIT, DSL, D_NASLOV, "Promeni cenu\nParkiraj vozilo\nProdaj vozilo\nPromeni boju", D_ODABERI, D_ODUSTANI); }
		if(listitem == 3) {
			SPD(playerid, dialog_IEDIT, DSL, D_NASLOV, "Promeni cenu\nOtkljucaj imovinu\nZakljucaj imovinu\nProdaj imovinu", D_ODABERI, D_ODUSTANI); }
		if(listitem == 4) {
			SPD(playerid, dialog_HEDIT, DSL, D_NASLOV, "Promeni cenu\nPromeni level\nProdaj hotel", D_ODABERI, D_ODUSTANI); }
		if(listitem == 5) {
			SPD(playerid, dialog_IMEDIT, DSL, D_NASLOV, "Promeni cenu\nPromeni level\nProdaj imanje", D_ODABERI, D_ODUSTANI); }
		if(listitem == 6) {
			SPD(playerid, dialog_GEDIT, DSL, D_NASLOV, "Promeni cenu\nPromeni level\nProdaj garazu", D_ODABERI, D_ODUSTANI); }
		if(listitem == 7) {
			SPD(playerid, dialog_GPSEDIT, DSL, D_NASLOV, "Promeni ime\nPromeni poziciju", D_ODABERI, D_ODUSTANI); }
		if(listitem == 8) {
			SPD(playerid, dialog_APORTEDIT, DSL, D_NASLOV, "Promeni ime\nPromeni poziciju", D_ODABERI, D_ODUSTANI); }
		if(listitem == 9) {
			SPD(playerid, dialog_SPORTEDIT, DSL, D_NASLOV, "Promeni ime\nPromeni poziciju", D_ODABERI, D_ODUSTANI); }
		if(listitem == 10) {
			SPD(playerid, dialog_AUTOSEDIT, DSL, D_NASLOV, "Dodaj kolicinu modela", D_ODABERI, D_ODUSTANI); }
		if(listitem == 11) {
			SPD(playerid, dialog_GANGZEDIT, DSL, D_NASLOV, "Daj vlasnistvo teritorije bandi\nDa li teritorija moze da se zauzima?\nOslobodi teritoriju\nPromeni boju teritorije\nPostavi pickup ovde", D_ODABERI, D_ODUSTANI); }
		if(listitem == 12) {
			SPD(playerid, dialog_VPORTEDIT, DSL, D_NASLOV, "Promeni ime\nPromeni poziciju", D_ODABERI, D_ODUSTANI); }
		if(listitem == 13) {
			SPD(playerid, dialog_PPORTEDIT, DSL, D_NASLOV, "Promeni ime\nPromeni poziciju", D_ODABERI, D_ODUSTANI); }
	}
}
else if(dialogid == dialog_GANGZID) {

	if(!response) return true;
	if(response) {

		new organizacija, ImaFajl[50];

		if(sscanf(inputtext, "i", organizacija)) return SPD(playerid, dialog_GANGZID, DSI, D_NASLOV, "Unesi ID orge kojoj dajete vlasnistvo.", D_ODABERI, D_ODUSTANI);

		format(ImaFajl, sizeof(ImaFajl), O_FILE, organizacija);
		if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta organizacija ne postoji u bazi podataka.");

		new gZone__ID = GetNearestGZone(playerid);
		if(gZone__ID == -1) return SendErrorMessage(playerid, "Moras biti pored teritorije.");

			gZoneInfo[gZone__ID][gZoneGangID] = organizacija;
		gZoneInfo[gZone__ID][gZoneTaken] = true;

		GZone_Refresh(gZone__ID);

		GZone_Save(gZone__ID);

		SendInfoMessage(playerid, "Ova zona je sad u vlasnistvu organizacije ID %d.", organizacija);
	}
}
else if(dialogid == dialog_GANGZCOLOREDIT) {

	if(!response) return true;
	if(response) {

		new color[24], stringic[24];
		if(sscanf(inputtext, "s[24]", color)) return SPD(playerid, dialog_GANGZCOLOREDIT, DSI, D_NASLOV, "Unesite boju za gang zonu.\nPrimer: FF2244", D_ODABERI, D_NAZAD);

		new gZone__ID = GetNearestGZone(playerid);
		if(gZone__ID == -1) return SendErrorMessage(playerid, "Moras biti pored teritorije.");

		format(stringic, sizeof(stringic), "%s", color);
		strmid(gZoneInfo[gZone__ID][gZoneColor], stringic, 0, strlen(stringic), 255);

		GangZoneHideForAll(gZoneInfo[gZone__ID][gZoneID]);

			format(stringic, sizeof(stringic), "0x%s88", gZoneInfo[gZone__ID][gZoneColor]);
		GangZoneShowForAll(gZoneInfo[gZone__ID][gZoneID], HexToInt(stringic));

		GZone_Save(gZone__ID);

		SendInfoMessage(playerid, "Uneo si boju.");

	}
}
else if(dialogid == dialog_GANGZEDIT) {

	if(!response) return true;
	if(response) {

		if(listitem == 0) {

			new gZone__ID = GetNearestGZone(playerid);
			if(gZone__ID == -1) return SendErrorMessage(playerid, "Moras biti u teritoriji.");
			SPD(playerid, dialog_GANGZID, DSI, D_NASLOV, "Unesi ID orge kojoj dajete vlasnistvo. (/organizacije)", D_ODABERI, D_ODUSTANI);
		}
		if(listitem == 1) {

			new gZone__ID = GetNearestGZone(playerid);
			if(gZone__ID == -1) return SendErrorMessage(playerid, "Moras biti u teritoriji.");
			if(!gZoneInfo[gZone__ID][gZoneTakeable]) {

				gZoneInfo[gZone__ID][gZoneTakeable] = true;
				SendInfoMessage(playerid, "Postavio si zonu ID %d da moze da se zauzima.", gZone__ID);
				GZone_Save(gZone__ID);
			}
			else if(gZoneInfo[gZone__ID][gZoneTakeable]) {

				gZoneInfo[gZone__ID][gZoneTakeable] = false;
				SendInfoMessage(playerid, "Postavio si zonu ID %d da ne moze da se zauzima.", gZone__ID);
				GZone_Save(gZone__ID);
			}
		}
		if(listitem == 2) {

			new gZone__ID = GetNearestGZone(playerid);
			if(gZone__ID == -1) return SendErrorMessage(playerid, "Moras biti u teritoriji.");

			gZoneInfo[gZone__ID][gZoneGangID] = -1;
			gZoneInfo[gZone__ID][gZoneTaken] = false;

			GZone_Refresh(gZone__ID);

			GZone_Save(gZone__ID);

			SendInfoMessage(playerid, "Ova zona je sad slobodna.");

		}
		if(listitem == 3) {

			if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu opciju.");
			SPD(playerid, dialog_GANGZCOLOREDIT, DSI, D_NASLOV, "Unesite boju za gang zonu.\nPrimer: FF2244", D_ODABERI, D_NAZAD);
		}
		if(listitem == 4) {

			if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu opciju.");
			new Float:Pos[3];

			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

			if(GetNearestGZone(playerid) == -1) return SendErrorMessage(playerid, "Moras biti u teritoriji.");
			new id = GetNearestGZone(playerid);

			if(IsValidDynamic3DTextLabel(gZoneInfo[id][gZone3D]))
				DestroyDynamic3DTextLabel(gZoneInfo[id][gZone3D]);

			if(IsValidDynamicPickup(gZoneInfo[id][gZonePickup]))
				ac_DestroyDynamicPickup(gZoneInfo[id][gZonePickup]);

			gZoneInfo[id][gZonePickupPos][0] = Pos[0];
			gZoneInfo[id][gZonePickupPos][1] = Pos[1];
			gZoneInfo[id][gZonePickupPos][2] = Pos[2];

			gZoneInfo[id][gZonePickup] = acc_CreateDynamicPickup(365, 1, gZoneInfo[id][gZonePickupPos][0], gZoneInfo[id][gZonePickupPos][1], gZoneInfo[id][gZonePickupPos][2], 0, 0);
			gZoneInfo[id][gZone3D] = CreateDynamic3DTextLabel(""col_white"[TERITORIJA]\nTeritorija je "col_server"slobodna"col_white"\nAko zelite da zauzmete ovu teritoriju kucajte "col_server"/zauzmi", BELA, gZoneInfo[id][gZonePickupPos][0], gZoneInfo[id][gZonePickupPos][1], gZoneInfo[id][gZonePickupPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

			GZone_Save(id);

		}
	}
}
else if(dialogid == dialog_AUTOSEDIT) {
	if(!response) return true;
	if(response) {
		if(listitem ==  0) {
			new as = GetNearestSalon(playerid);
			if(as == -1) return SendErrorMessage(playerid, "Moras biti pored pickupa za kupovinu u salonu.");

			new coordsstring[64];
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			strcat(DialogStrgEx, "Unesite za broj modela vozila i kolicinu.\nPrimer: 1 4\n");
			strcat(DialogStrgEx, "Kolicina ne moze ici ispod 1.Kolicina koju unesete dodaje se sa postojecom\n\n");
			for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
				if(AutoSalon[as][aVehModel][i] != 0) {
					format(coordsstring, sizeof(coordsstring), "Model %d - %s - %d komada\n", (i+1), ImeVozila[(AutoSalon[as][aVehModel][i]- 400)], AutoSalon[as][aVehAmmount][i]);
					strcat(DialogStrgEx, coordsstring);
				}
			}
			SPD(playerid, dialog_ASEDITAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
		}
	}
}
else if(dialogid == dialog_ASEDITAMMOUNT) {
	if(!response) return true;
	if(response) {
		new as = GetNearestSalon(playerid), model, kolicina, model2;
		if(as == -1) return SendErrorMessage(playerid, "Moras biti pored pickupa za kupovinu u salonu.");

		if(sscanf(inputtext, "dd", model, kolicina)) {

			new coordsstring[64];
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			strcat(DialogStrgEx, "Unesite za broj modela vozila i kolicinu.\nPrimer: 1 4\n");
			strcat(DialogStrgEx, "Kolicina ne moze ici ispod 1.Kolicina koju unesete dodaje se sa postojecom\n\n");
			for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
				if(AutoSalon[as][aVehModel][i] != 0) {
					format(coordsstring, sizeof(coordsstring), "Model %d - %s - %d komada\n", (i+1), ImeVozila[(AutoSalon[as][aVehModel][i]- 400)], AutoSalon[as][aVehAmmount][i]);
					strcat(DialogStrgEx, coordsstring);
				}
			}
			SPD(playerid, dialog_ASEDITAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			return 1;
		}
		if(kolicina < 1) return SendErrorMessage(playerid, "Kolicina ne moze ici ispod 1.");
		if(model < 1) return SendErrorMessage(playerid, "Model ne moze ici ispod 1.");
		if(model > AutoSalon[as][aMaxVehModel]) return SendErrorMessage(playerid, "Uneli ste broj nepostojeceg modela.");
		model2 = model-1;

		AutoSalon[as][aVehAmmount][model2] += kolicina;
		SaveSalon(as);
		SendInfoMessage(playerid, "Dodao si jos %d %s koja mogu da se kupe.", kolicina, ImeVozila[(AutoSalon[as][aVehModel][model2]- 400)]);
	}
}
else if(dialogid == dialog_SPORTEDIT) {
	if(!response) return true;
	if(response) {
		if(listitem ==  0) {
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			for(new i = 0; i < MAX_SPORTS; i++) {
				if(supportInfo[i][supportCreated] == 1) {
					format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, supportInfo[i][supportName]);
				}
			}
			SPD(playerid, dialog_IZMENAIMENASPORT, DSL, "Izaberi hport", DialogStrgEx, D_ODABERI, D_ODUSTANI);
		}
		if(listitem ==  1) {
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			for(new i = 0; i < MAX_SPORTS; i++) {
				if(supportInfo[i][supportCreated] == 1) {
					format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, supportInfo[i][supportName]);
				}
			}
			SPD(playerid, dialog_IZMENAPOZSPORT, DSL, "Izaberi hport", DialogStrgEx, D_ODABERI, D_ODUSTANI);
		}
	}
}
else if(dialogid == dialog_IZMENAIMENASPORT) {
	if(!response) return true;
	if(response) {
		gpsid[playerid] = listitem;
		SPD(playerid, dialog_IZMENAIMENASPORT2, DSI, D_NASLOV, "Unesite novo ime izabranog Helper porta.", D_ODABERI, D_ODUSTANI);
	}
}
else if(dialogid == dialog_IZMENAIMENASPORT2) {
	if(!response) return true;
	if(response) {
		new aportname[50];
		if(sscanf(inputtext, "s[50]", aportname)) return SPD(playerid, dialog_IZMENAIMENASPORT2, DSI, D_NASLOV, "Unesite novo ime izabranog support porta.", D_ODABERI, D_ODUSTANI);
		if(gpsid[playerid] == -1) return SendErrorMessage(playerid, "Nemas izabranu Helper port lokaciju.");
		new id = gpsid[playerid];

		strmid(supportInfo[id][supportName], aportname, 0, strlen(aportname), 50);
		SaveSports();

		SendInfoMessage(playerid, "Uspesno si promenio ime Helper porta u '%s'.", aportname);
		gpsid[playerid] = -1;
	}
}
else if(dialogid == dialog_IZMENAPOZSPORT) {
	if(!response) return true;
	if(response) {
		new IDaport = listitem, Float:Pos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		supportInfo[IDaport][supportPos][0] = Pos[0];
		supportInfo[IDaport][supportPos][1] = Pos[1];
		supportInfo[IDaport][supportPos][2] = Pos[2];

		SaveAports();

		SendInfoMessage(playerid, "Uspesno si promenio poziciju Helper porta '%s' na tvoju poziciju.", supportInfo[IDaport][supportName]);
	}
}
else if(dialogid == dialog_APORTEDIT) {
	if(!response) return true;
	if(response) {
		if(listitem ==  0) {
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			for(new i = 0; i < MAX_APORTS; i++) {
				if(aportInfo[i][aportCreated] == 1) {
					format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, aportInfo[i][aportName]);
				}
			}
			SPD(playerid, dialog_IZMENAIMENAAPORT, DSL, "Izaberi aport", DialogStrgEx, D_ODABERI, D_ODUSTANI);
		}
		if(listitem ==  1) {
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			for(new i = 0; i < MAX_APORTS; i++) {
				if(aportInfo[i][aportCreated] == 1) {
					format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, aportInfo[i][aportName]);
				}
			}
			SPD(playerid, dialog_IZMENAPOZAPORT, DSL, "Izaberi aport", DialogStrgEx, D_ODABERI, D_ODUSTANI);
		}
	}
}
else if(dialogid == dialog_IZMENAIMENAAPORT) {
	if(!response) return true;
	if(response) {
		gpsid[playerid] = listitem;
		SPD(playerid, dialog_IZMENAIMENAAPORT2, DSI, D_NASLOV, "Unesite novo ime izabranog AFG TEAM porta.", D_ODABERI, D_ODUSTANI);
	}
}
else if(dialogid == dialog_IZMENAIMENAAPORT2) {
	if(!response) return true;
	if(response) {
		new aportname[50];
		if(sscanf(inputtext, "s[50]", aportname)) return SPD(playerid, dialog_IZMENAIMENAAPORT2, DSI, D_NASLOV, "Unesite novo ime izabranog AFG TEAM porta.", D_ODABERI, D_ODUSTANI);
		if(gpsid[playerid] == -1) return SendErrorMessage(playerid, "Nemas izabran AFG TEAM port lokaciju.");
		new id = gpsid[playerid];

		strmid(aportInfo[id][aportName], aportname, 0, strlen(aportname), 50);
		SaveAports();

		SendInfoMessage(playerid, "Uspesno si promenio ime AFG TEAM porta u '%s'.", aportname);
		gpsid[playerid] = -1;
	}
}
else if(dialogid == dialog_IZMENAPOZAPORT) {
	if(!response) return true;
	if(response) {
		new IDaport = listitem, Float:Pos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		aportInfo[IDaport][aportPos][0] = Pos[0];
		aportInfo[IDaport][aportPos][1] = Pos[1];
		aportInfo[IDaport][aportPos][2] = Pos[2];

		SaveAports();

		SendInfoMessage(playerid, "Uspesno si promenio poziciju AFG TEAM porta '%s' na tvoju poziciju.", aportInfo[IDaport][aportName]);
	}
}
//////////////
//////
//
//
//
else if(dialogid == dialog_VPORTEDIT) {
	if(!response) return true;
	if(response) {
		if(listitem ==  0) {
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			for(new i = 0; i < MAX_VPORTS; i++) {
				if(vportInfo[i][vportCreated] == 1) {
					format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, vportInfo[i][vportName]);
				}
			}
			SPD(playerid, dialog_IZMENAIMENAVPORT, DSL, "Izaberi vport", DialogStrgEx, D_ODABERI, D_ODUSTANI);
		}
		if(listitem ==  1) {
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			for(new i = 0; i < MAX_VPORTS; i++) {
				if(vportInfo[i][vportCreated] == 1) {
					format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, vportInfo[i][vportName]);
				}
			}
			SPD(playerid, dialog_IZMENAPOZVPORT, DSL, "Izaberi vport", DialogStrgEx, D_ODABERI, D_ODUSTANI);
		}
	}
}
else if(dialogid == dialog_IZMENAIMENAVPORT) {
	if(!response) return true;
	if(response) {
		gpsid[playerid] = listitem;
		SPD(playerid, dialog_IZMENAIMENAVPORT2, DSI, D_NASLOV, "Unesite novo ime izabranog VIP porta.", D_ODABERI, D_ODUSTANI);
	}
}
else if(dialogid == dialog_IZMENAIMENAVPORT2) {
	if(!response) return true;
	if(response) {
		new vportname[50];
		if(sscanf(inputtext, "s[50]", vportname)) return SPD(playerid, dialog_IZMENAIMENAVPORT2, DSI, D_NASLOV, "Unesite novo ime izabranog VIP porta.", D_ODABERI, D_ODUSTANI);
		if(gpsid[playerid] == -1) return SendErrorMessage(playerid, "Nemas izabran VIP port lokaciju.");
		new id = gpsid[playerid];

		strmid(vportInfo[id][vportName], vportname, 0, strlen(vportname), 50);
		SaveVports();

		SendInfoMessage(playerid, "Uspesno si promenio ime VIP porta u '%s'.", vportname);
		gpsid[playerid] = -1;
	}
}
else if(dialogid == dialog_IZMENAPOZVPORT) {
	if(!response) return true;
	if(response) {
		new IDvport = listitem, Float:Pos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		vportInfo[IDvport][vportPos][0] = Pos[0];
		vportInfo[IDvport][vportPos][1] = Pos[1];
		vportInfo[IDvport][vportPos][2] = Pos[2];

		SaveVports();

		SendInfoMessage(playerid, "Uspesno si promenio poziciju VIP porta '%s' na tvoju poziciju.", vportInfo[IDvport][vportName]);
	}
}
//////////////
//////
//
//
//
else if(dialogid == dialog_PPORTEDIT) {
	if(!response) return true;
	if(response) {
		if(listitem ==  0) {
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			for(new i = 0; i < MAX_PPORTS; i++) {
				if(pportInfo[i][pportCreated] == 1) {
					format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, pportInfo[i][pportName]);
				}
			}
			SPD(playerid, dialog_IZMENAIMENAPPORT, DSL, "Izaberi pport", DialogStrgEx, D_ODABERI, D_ODUSTANI);
		}
		if(listitem ==  1) {
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			for(new i = 0; i < MAX_PPORTS; i++) {
				if(pportInfo[i][pportCreated] == 1) {
					format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, pportInfo[i][pportName]);
				}
			}
			SPD(playerid, dialog_IZMENAPOZPPORT, DSL, "Izaberi pport", DialogStrgEx, D_ODABERI, D_ODUSTANI);
		}
	}
}
else if(dialogid == dialog_IZMENAIMENAPPORT) {
	if(!response) return true;
	if(response) {
		gpsid[playerid] = listitem;
		SPD(playerid, dialog_IZMENAIMENAPPORT2, DSI, D_NASLOV, "Unesite novo ime izabranog PROMOTER porta.", D_ODABERI, D_ODUSTANI);
	}
}
else if(dialogid == dialog_IZMENAIMENAPPORT2) {
	if(!response) return true;
	if(response) {
		new pportname[50];
		if(sscanf(inputtext, "s[50]", pportname)) return SPD(playerid, dialog_IZMENAIMENAPPORT2, DSI, D_NASLOV, "Unesite novo ime izabranog PROMOTER porta.", D_ODABERI, D_ODUSTANI);
		if(gpsid[playerid] == -1) return SendErrorMessage(playerid, "Nemas izabran PROMOTER port lokaciju.");
		new id = gpsid[playerid];

		strmid(pportInfo[id][pportName], pportname, 0, strlen(pportname), 50);
		SavePports();

		SendInfoMessage(playerid, "Uspesno si promenio ime PROMOTER porta u '%s'.", pportname);
		gpsid[playerid] = -1;
	}
}
else if(dialogid == dialog_IZMENAPOZPPORT) {
	if(!response) return true;
	if(response) {
		new IDpport = listitem, Float:Pos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		pportInfo[IDpport][pportPos][0] = Pos[0];
		pportInfo[IDpport][pportPos][1] = Pos[1];
		pportInfo[IDpport][pportPos][2] = Pos[2];

		SavePports();

		SendInfoMessage(playerid, "Uspesno si promenio poziciju PROMOTER porta '%s' na tvoju poziciju.", pportInfo[IDpport][pportName]);
	}
}
else if(dialogid == dialog_GPSEDIT) {
	if(!response) return true;
	if(response) {
		if(listitem ==  0) {
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			for(new i = 1; i < MAX_GPS; i++) {
				new filename[60];
				format(filename, sizeof(filename), F_GPS, i);
				if(fexist(filename)) {
					format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, gpsInfo[i][gpsName]);
				}
			}
			SPD(playerid, dialog_IZMENAIMENAGPS, DSL, "Izaberi GPS", DialogStrgEx, D_ODABERI, D_ODUSTANI);
		}
		if(listitem ==  1) {
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			for(new i = 1; i < MAX_GPS; i++) {
				new filename[60];
				format(filename, sizeof(filename), F_GPS, i);
				if(fexist(filename)) {
					format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, gpsInfo[i][gpsName]);
				}
			}
			SPD(playerid, dialog_IZMENAPOZGPS, DSL, "Izaberi GPS", DialogStrgEx, D_ODABERI, D_ODUSTANI);
		}
	}
}
else if(dialogid == dialog_IZMENAIMENAGPS) {
	if(!response) return true;
	if(response) {
		gpsid[playerid] = listitem+1;
		SPD(playerid, dialog_IZMENAIMENAGPS2, DSI, D_NASLOV, "Unesite novo ime gps lokacije", D_ODABERI, D_ODUSTANI);
	}
}
else if(dialogid == dialog_IZMENAIMENAGPS2) {
	if(!response) return true;
	if(response) {
		new gpsname[50];
		if(sscanf(inputtext, "s[50]", gpsname)) return SPD(playerid, dialog_IZMENAIMENAGPS2, DSI, D_NASLOV, "Unesite novo ime gps lokacije", D_ODABERI, D_ODUSTANI);
		if(gpsid[playerid] == -1) return SendErrorMessage(playerid, "Nemas izabranu gps lokaciju.");
		new filename[60];
		format(filename, sizeof(filename), F_GPS, gpsid[playerid]);
		if(!fexist(filename)) return SendErrorMessage(playerid, "Izabrana GPS lokacija ne postoji u bazi podataka.");

		strmid(gpsInfo[gpsid[playerid]][gpsName], gpsname, 0, strlen(gpsname), 50);
		GPS_Save(gpsid[playerid]);

		SendInfoMessage(playerid, "Uspesno si promenio ime GPS lokacije u '%s'.", gpsname);
		gpsid[playerid] = -1;
	}
}
else if(dialogid == dialog_IZMENAPOZGPS) {
	if(!response) return true;
	if(response) {
		new IDgps = listitem+1, Float:Pos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		gpsInfo[IDgps][gpsPos][0] = Pos[0];
		gpsInfo[IDgps][gpsPos][1] = Pos[1];
		gpsInfo[IDgps][gpsPos][2] = Pos[2];

		GPS_Save(IDgps);

		SendInfoMessage(playerid, "Uspesno si promenio poziciju GPS lokacije '%s' na tvoju poziciju.", gpsInfo[IDgps][gpsName]);
	}
}
else if(dialogid == dialog_GEDIT) {
	if(!response) return true;
	if(response) {
		if(listitem ==  0) {
			SPD(playerid, dialog_GEPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu garaze!", D_ODABERI, D_ODUSTANI);
		}
		if(listitem ==  1) {
			SPD(playerid, dialog_GELEVEL, DSI, D_NASLOV, "Unesite zeljeni level garaze!", D_ODABERI, D_ODUSTANI);
		}
		if(listitem ==  2) {
			new id = GetNearestGarage(playerid);
			if(GetNearestGarage(playerid) == -1) return SendErrorMessage(playerid, "Nema garaze u blizini!");

			new string1[128];
			format(string1, sizeof(string1), "AFG TEAM %s je prodao garazu ID %d na buy", ImeIgraca(playerid), id);
			LogSave("Ostalo/LogEdit.log", string1);

			garageInfo[id][garageOwned] = false;
			strmid(garageInfo[id][garageOwner], "Drzava", 0, strlen("Drzava"), 24);
			Garage_Save(id);
			SendInfoMessage(playerid, "Garaza uspesno prodana!");
			Garage_Refresh(id);
		}
	}
}
else if(dialogid == dialog_GEPRICE && response) {
	new cena, garaza = GetNearestGarage(playerid);
	if(GetNearestGarage(playerid) == -1) return SendErrorMessage(playerid, "Nema garaze u vasoj blizini!");
	if(garageInfo[garaza][garageOwned] == true) return SendErrorMessage(playerid, "Ne mozes da izmenis cenu kupljene garaze.");
	if(sscanf(inputtext, "d", cena)) return SPD(playerid, dialog_GEPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu garaze!", D_ODABERI, D_ODUSTANI);
	garageInfo[garaza][garagePrice] = cena; Garage_Save(garaza); Garage_Refresh(garaza);
	SendInfoMessage(playerid, "Promenili ste cenu garaze. ID = %d | Cena = %d.", garaza, cena);
	new string[128];
	format(string, sizeof(string), "Admin %s je promenio cenu garaze(ID:%d) u %d", ImeIgraca(playerid), garaza, cena);
	LogSave("Ostalo/LogEdit.log", string);}
else if(dialogid == dialog_GELEVEL && response) {
	new level, garaza = GetNearestGarage(playerid);
	if(GetNearestGarage(playerid) == -1) return SendErrorMessage(playerid, "Nema garaze u vasoj blizini!");
	if(garageInfo[garaza][garageOwned] == true) return SendErrorMessage(playerid, "Ne mozes da izmenis level kupljene garaze.");
	if(sscanf(inputtext, "d", level)) return SPD(playerid, dialog_GELEVEL, DSI, D_NASLOV, "Unesite zeljeni level garaze!", D_ODABERI, D_ODUSTANI);
	garageInfo[garaza][garageLevel] = level; Garage_Save(garaza); Garage_Refresh(garaza);
	SendInfoMessage(playerid, "Promenili ste level garaze ID = %d | Level = %d.", garaza, level);
	new string[128];
	format(string, sizeof(string), "Admin %s je promenio level garaze(ID:%d) u %d", ImeIgraca(playerid), garaza, level);
	LogSave("Ostalo/LogEdit.log", string);}
else if(dialogid == dialog_IMEDIT) {
	if(!response) return true;
	if(response) {
		if(listitem ==  0) {
			SPD(playerid, dialog_IMEPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu imanja!", D_ODABERI, D_ODUSTANI);
		}
		if(listitem ==  1) {
			SPD(playerid, dialog_IMELEVEL, DSI, D_NASLOV, "Unesite zeljeni level imanja!", D_ODABERI, D_ODUSTANI);
		}
		if(listitem ==  2) {
			new id = GetNearestField(playerid);
			if(GetNearestField(playerid) == -1) return SendErrorMessage(playerid, "Nema imanja u blizini!");

			new string1[128];
			format(string1, sizeof(string1), "Admin %s je prodao imanje ID %d na buy", ImeIgraca(playerid), id);
			LogSave("Ostalo/LogEdit.log", string1);

			fieldInfo[id][fieldOwned] = false;
			strmid(fieldInfo[id][fieldOwner], "Drzava", 0, strlen("Drzava"), 24);
			Field_Save(id);
			SendInfoMessage(playerid, "Imanje uspesno prodano!");
			Field_Refresh(id);
		}
	}
}
else if(dialogid == dialog_IMEPRICE && response) {
	new cena, imanje = GetNearestField(playerid);
	if(GetNearestField(playerid) == -1) return SendErrorMessage(playerid, "Nema imanja u vasoj blizini!");
	if(fieldInfo[imanje][fieldOwned] == true) return SendErrorMessage(playerid, "Ne mozes da izmenis cenu kupljenog imanja.");
	if(sscanf(inputtext, "d", cena)) return SPD(playerid, dialog_IMEPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu imanja!", D_ODABERI, D_ODUSTANI);
	fieldInfo[imanje][fieldPrice] = cena; Field_Save(imanje); Field_Refresh(imanje);
	SendClientMessageEx(playerid, ZUTA, "Promenili ste cenu imanja. ID = %d | Cena = %d.", imanje, cena);

	new string[128];
	format(string, sizeof(string), "Admin %s je promenio cenu imanja(ID:%d) u %d", ImeIgraca(playerid), imanje, cena);
	LogSave("Ostalo/LogEdit.log", string);}
else if(dialogid == dialog_IMELEVEL && response) {
	new level, imanje = GetNearestField(playerid);
	if(GetNearestField(playerid) == -1) return SendErrorMessage(playerid, "Nema imanja u vasoj blizini!");
	if(fieldInfo[imanje][fieldOwned] == true) return SendErrorMessage(playerid, "Ne mozes da izmenis level kupljenog imanja.");
	if(sscanf(inputtext, "d", level)) return SPD(playerid, dialog_IMELEVEL, DSI, D_NASLOV, "Unesite zeljeni level imanja!", D_ODABERI, D_ODUSTANI);
	fieldInfo[imanje][fieldLevel] = level; Field_Save(imanje); Field_Refresh(imanje);
	SendClientMessageEx(playerid, ZUTA, "Promenili ste level imanja ID = %d | Level = %d.", imanje, level);
	new string[128];
	format(string, sizeof(string), "Admin %s je promenio level imanja(ID:%d) u %d", ImeIgraca(playerid), imanje, level);
	LogSave("Ostalo/LogEdit.log", string);}
else if(dialogid == dialog_HEDIT) {
	if(!response) return true;
	if(response) {
		if(listitem ==  0) {
			SPD(playerid, dialog_HEPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu hotela!", D_ODABERI, D_ODUSTANI);
		}
		if(listitem ==  1) {
			SPD(playerid, dialog_HELEVEL, DSI, D_NASLOV, "Unesite zeljeni level hotela!", D_ODABERI, D_ODUSTANI);
		}
		if(listitem ==  2) {
			new id = GetNearestHotel(playerid);
			if(GetNearestHotel(playerid) == -1) return SendErrorMessage(playerid, "Nema hotela u blizini!");

			new string1[128];
			format(string1, sizeof(string1), "Admin %s je prodao hotel ID %d na buy", ImeIgraca(playerid), id);
			LogSave("Ostalo/LogEdit.log", string1);

			hotelInfo[id][hOwned] = 0;
			strmid(hotelInfo[id][hOwner], "Drzava", 0, strlen("Drzava"), 24);
			hotelInfo[id][hLocked] = 0;
			SaveHotel(id);
			SendInfoMessage(playerid, "Hotel uspesno prodat!");
			HotelRefresh(id);
		}
	}
}
else if(dialogid == dialog_HEPRICE && response) {
	new cena, hotel = GetNearestHotel(playerid);
	if(GetNearestHotel(playerid) == -1) return SendErrorMessage(playerid, "Nema hotela u vasoj blizini!");
	if(hotelInfo[hotel][hOwned] == 1) return SendErrorMessage(playerid, "Ne mozes da izmenis cenu kupljenog hotela.");
	if(sscanf(inputtext, "d", cena)) return SPD(playerid, dialog_HEPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu hotela!", D_ODABERI, D_ODUSTANI);
	hotelInfo[hotel][hPrice] = cena; SaveHotel(hotel); HotelRefresh(hotel);
	SendClientMessageEx(playerid, ZUTA, "Promenili ste cenu hotel. ID = %d | Cena = %d.", hotel, cena);
	new string[128];
	format(string, sizeof(string), "Admin %s je promenio cenu hotela(ID:%d) u %d", ImeIgraca(playerid), hotel, cena);
	LogSave("Ostalo/LogEdit.log", string);}
else if(dialogid == dialog_HELEVEL && response) {
	new level, hotel = GetNearestHotel(playerid);
	if(GetNearestHotel(playerid) == -1) return SendErrorMessage(playerid, "Nema hotela u vasoj blizini!");
	if(hotelInfo[hotel][hOwned] == 1) return SendErrorMessage(playerid, "Ne mozes da izmenis level kupljenog hotela.");
	if(sscanf(inputtext, "d", level)) return SPD(playerid, dialog_HELEVEL, DSI, D_NASLOV, "Unesite zeljeni level hotela!", D_ODABERI, D_ODUSTANI);
	hotelInfo[hotel][hLevel] = level; SaveHotel(hotel); HotelRefresh(hotel);
	SendClientMessageEx(playerid, ZUTA, "Promenili ste level hotela ID = %d | Level = %d.", hotel, level);
	new string[128];
	format(string, sizeof(string), "Admin %s je promenio level hotela(ID:%d) u %d", ImeIgraca(playerid), hotel, level);
	LogSave("Ostalo/LogEdit.log", string);}
else if(dialogid == dialog_IEDIT) {
	if(!response) return true;
	if(response) {
		if(listitem ==  0) {
			SPD(playerid, dialog_ICPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu imovine!", D_ODABERI, D_ODUSTANI);
		}
		if(listitem ==  1) {
			SPD(playerid, dialog_IOPEN, DSI, D_NASLOV, "Unesite id imovine koju zelite otkljucati.", D_ODABERI, D_ODUSTANI); }
		if(listitem ==  2) {
			SPD(playerid, dialog_ICLOSE, DSI, D_NASLOV, "Unesite id imovine koju zelite zakljucati.", D_ODABERI, D_ODUSTANI); }
		if(listitem ==  3) {
			//if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu sekciju.");
			SPD(playerid, dialog_ISELL, DSI, D_NASLOV, "Unesti id imovine koju zelite prodati", D_ODABERI, D_ODUSTANI);
		}
	}
}
else if(dialogid == dialog_ICPRICE && response) {
	new cena, imovina = GetNearestProperty(playerid);
	if(GetNearestProperty(playerid) == -1) return SendErrorMessage(playerid, "Nema imovine u vasoj blizini!");
	if(II[imovina][iOwned] == 1) return SendErrorMessage(playerid, "Ne mozes da izmenis cenu kupljene kuce.");
	if(sscanf(inputtext, "d", cena)) return SPD(playerid, dialog_ICPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu imovine!", D_ODABERI, D_ODUSTANI);
	II[imovina][iPrice] = cena; SaveProperty(imovina);
	SendClientMessageEx(playerid, ZUTA, "Promenili ste cenu imovine. ID = %d | Cena = %d.", imovina, cena);
	new string[128];
	format(string, sizeof(string), "Admin %s je promenio cenu imovine(ID:%d) u %d", ImeIgraca(playerid), imovina, cena);
	LogSave("Ostalo/LogEdit.log", string);}
else if(dialogid == dialog_IOPEN && response) {
	new id, ImaFajl[40];
	if(sscanf(inputtext, "i", id)) return SPD(playerid, dialog_IOPEN, DSI, D_NASLOV, "Unesite id imovine koju zelite otkljucati.", D_ODABERI, D_ODUSTANI);
	format(ImaFajl, sizeof(ImaFajl), IM_FILE, id);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta imovina ne postoji.");
	II[id][iLocked] = 0; GameTextForPlayer(playerid, "Imovina ~g~otkljucana!", 3000, 3);
	SaveProperty(id) ;
	SendInfoMessage(playerid, "Otkljucali ste imovinu(ID: %d)!", id);}
else if(dialogid == dialog_ICLOSE && response) {
	new id, ImaFajl[40];
	if(sscanf(inputtext, "i", id)) return SPD(playerid, dialog_ICLOSE, DSI, D_NASLOV, "Unesite id imovine koju zelite zakljucati.", D_ODABERI, D_ODUSTANI);
	format(ImaFajl, sizeof(ImaFajl), IM_FILE, id);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta imovina ne postoji.");
	II[id][iLocked] = 1; GameTextForPlayer(playerid, "Imovina ~r~zakljucana!", 3000, 3);
	SaveProperty(id) ;
	SendInfoMessage(playerid, "Zakljucali ste imovinu(ID: %d)!", id);}
else if(dialogid == dialog_ISELL && response) {
	new id, ImaFajl[40];
	if(sscanf(inputtext, "i", id)) return SPD(playerid, dialog_ISELL, DSI, D_NASLOV, "Unesti id imovine koju zelite prodati", D_ODABERI, D_ODUSTANI);
	format(ImaFajl, sizeof(ImaFajl), IM_FILE, id);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta imovina ne postoji.");
	II[id][iOwned] = 0;
	II[id][iNeaktivnost] = 0;
	strmid(II[id][iOwner], "Drzava", 0, strlen("Drzava"), 32);
	SaveProperty(id); PropertyRefresh(id);
	SendInfoMessage(playerid, "Prodali ste imovinu(ID: %d)!", id);
	new string[128];
	format(string, sizeof(string), "Admin %s je prodao imovinu(ID:%d)", ImeIgraca(playerid), id);
	LogSave("Ostalo/LogEdit.log", string);}
else if(dialogid == dialog_VEDIT) {
	if(!response) return true;
	if(response) {
		if(listitem ==  0) {
			SPD(playerid, dialog_VPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu vozila!", D_ODABERI, D_ODUSTANI);
		}
		if(listitem == 1) {
			if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu!");
			if(ScriptIDVozila[GetPlayerVehicleID(playerid)] == -1) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti u server side vozilu.");

			new autoid = ScriptIDVozila[GetPlayerVehicleID(playerid)], Float:Pos[4];

			GetVehiclePos(VehicleInfo[autoid][vID], Pos[0], Pos[1], Pos[2]);
			GetVehicleZAngle(VehicleInfo[autoid][vID], Pos[3]);

			VehicleInfo[autoid][vVirtualWorld] = GetPlayerVirtualWorld(playerid);
			VehicleInfo[autoid][vInterior] = GetPlayerInterior(playerid);

			VehicleInfo[autoid][vLokacijaX] = Pos[0];
			VehicleInfo[autoid][vLokacijaY] = Pos[1];
			VehicleInfo[autoid][vLokacijaZ] = Pos[2];
			VehicleInfo[autoid][vLokacijaA] = Pos[3];

			DestroyVehicle(VehicleInfo[autoid][vID]);
			VehicleInfo[autoid][vID] = Fusion_CreateVehicle(autoid, VehicleInfo[autoid][vUsage], VehicleInfo[autoid][vOrganization], VehicleInfo[autoid][vJob], VehicleInfo[autoid][vFuelStation], VehicleInfo[autoid][vModel], VehicleInfo[autoid][vLokacijaX], VehicleInfo[autoid][vLokacijaY], VehicleInfo[autoid][vLokacijaZ]+1.0, VehicleInfo[autoid][vLokacijaA], VehicleInfo[autoid][vColor1], VehicleInfo[autoid][vColor2], 300000);
			ac_LinkVehicleToInterior(VehicleInfo[autoid][vID], VehicleInfo[autoid][vInterior]);
			SetVehicleVirtualWorld(VehicleInfo[autoid][vID], VehicleInfo[autoid][vVirtualWorld]);

			TuneVehicle(autoid);

			ac_SetVehicleParamsEx(VehicleInfo[autoid][vID], 0, 0, 0, VehicleInfo[autoid][vLocked], 0, 0, 0);
			if(IsVehicleBajs(VehicleInfo[autoid][vID])) {
				ac_SetVehicleParamsEx(VehicleInfo[autoid][vID], 1, 0, 0, VehicleInfo[autoid][vLocked], 0, 0, 0);
			}

			SaveVehicle(autoid);

			SendInfoMessage(playerid, "Preparkirali ste vozilo. ID = %d.", autoid);

		}
		if(listitem == 2) {
			if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu sekciju.");

			if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu!");
			if(ScriptIDVozila[GetPlayerVehicleID(playerid)] == -1) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti u server side privatnom vozilu.");

			new izbor = ScriptIDVozila[GetPlayerVehicleID(playerid)];

			strmid(VehicleInfo[izbor][vOwner], "Drzava", 0, strlen("Drzava"), 24);

			SendInfoMessage(playerid, "Prodali ste vozilo. ID = %d.", izbor);

			SavePlayer(playerid);
			Fusion_DestroyVehicle(VehicleInfo[izbor][vID]);

			VehicleInfo[izbor][vVirtualWorld] = 0;
			VehicleInfo[izbor][vInterior] = 0;

			VehicleInfo[izbor][vOwned] = 0;
			VehicleInfo[izbor][vNeaktivnost] = 0;
			VehicleInfo[izbor][vPrice] = -1;

			VehicleInfo[izbor][vLokacijaX] = -2112.0281;
			VehicleInfo[izbor][vLokacijaY] = 2729.6250;
			VehicleInfo[izbor][vLokacijaZ] = 166.0840;
			VehicleInfo[izbor][vLokacijaA] = 202.9713;

			VehicleInfo[izbor][vID] = Fusion_CreateVehicle(izbor, PRIVATNO_VOZILO, -1, -1, -1, VehicleInfo[izbor][vModel], VehicleInfo[izbor][vLokacijaX], VehicleInfo[izbor][vLokacijaY], VehicleInfo[izbor][vLokacijaZ]+1.0, VehicleInfo[izbor][vLokacijaA], VehicleInfo[izbor][vColor1], VehicleInfo[izbor][vColor2], 300000);
			ac_LinkVehicleToInterior(VehicleInfo[izbor][vID], VehicleInfo[izbor][vInterior]);
			SetVehicleVirtualWorld(VehicleInfo[izbor][vID], VehicleInfo[izbor][vVirtualWorld]);

			TuneVehicle(izbor);

			ac_SetVehicleParamsEx(VehicleInfo[izbor][vID], 0, 0, 0, VehicleInfo[izbor][vLocked], 0, 0, 0);
			if(IsVehicleBajs(VehicleInfo[izbor][vID])) {
				ac_SetVehicleParamsEx(VehicleInfo[izbor][vID], 1, 0, 0, VehicleInfo[izbor][vLocked], 0, 0, 0);
			}

			SaveVehicle(izbor);

		}
		if(listitem == 3) {
			if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu sekciju.");

			if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu!");
			if(ScriptIDVozila[GetPlayerVehicleID(playerid)] == -1) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti u server side vozilu.");

			SPD(playerid, dialog_VCOLOR, DSI, D_NASLOV, "Unesite zeljeni ide boje1 i id boje 1. Primer: 2 2!", D_ODABERI, D_ODUSTANI);
		}
	}
}
else if(dialogid == dialog_VCOLOR && response) {
	new boja1, boja2;

	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu!");
	if(ScriptIDVozila[GetPlayerVehicleID(playerid)] == -1) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti u server side vozilu.");

	if(sscanf(inputtext, "dd", boja1, boja2)) return SPD(playerid, dialog_VCOLOR, DSI, D_NASLOV, "Unesite zeljeni ide boje1 i id boje 1. Primer: 2 2!", D_ODABERI, D_ODUSTANI);

	new autoid = ScriptIDVozila[GetPlayerVehicleID(playerid)];

	VehicleInfo[autoid][vColor1] = boja1; VehicleInfo[autoid][vColor2] = boja2;
	SaveVehicle(autoid);

	ChangeVehicleColor(VehicleInfo[autoid][vID], boja1, boja2);

	SendInfoMessage(playerid, "Prebojali ste vozilo. ID = %d. u boje %d %d", autoid, boja1, boja2);}
else if(dialogid == dialog_VPRICE && response) {
	new cena;

	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu!");
	if(ScriptIDVozila[GetPlayerVehicleID(playerid)] == -1) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti u server side privatnom vozilu.");
	if(sscanf(inputtext, "d", cena)) return SPD(playerid, dialog_VPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu vozila!", D_ODABERI, D_ODUSTANI);

	new autoid = ScriptIDVozila[GetPlayerVehicleID(playerid)];

	VehicleInfo[autoid][vPrice] = cena; SaveVehicle(autoid);
	SendInfoMessage(playerid, "Promenili ste cenu vozila. ID = %d | Cena = %d.", autoid, cena);}
else if(dialogid == dialog_FEDIT) {
	if(!response) return true;
	if(response) {
		if(listitem ==  0) {
			SPD(playerid, dialog_FNAME, DSI, D_NASLOV, "Unesite id i zeljeno ime firme!", D_ODABERI, D_ODUSTANI); }
		if(listitem ==  1) {
			SPD(playerid, dialog_FOPEN, DSI, D_NASLOV, "Unesite id firme koju zelite otkljucati.", D_ODABERI, D_ODUSTANI); }
		if(listitem ==  2) {
			SPD(playerid, dialog_FCLOSE, DSI, D_NASLOV, "Unesite id firme koju zelite zakljucati.", D_ODABERI, D_ODUSTANI); }
		if(listitem ==  3) {
			//if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu sekciju.");
			SPD(playerid, dialog_FSELL, DSI, D_NASLOV, "Unesti id firme koju zelite prodati", D_ODABERI, D_ODUSTANI);
		}
		if(listitem ==  4) {

			SPD(playerid, dialog_FCORDEXIT, DSI, D_NASLOV, "Unesite id firme, kordinate x,y,z, int i vw\nPrimer: 2, 1323.2, 625.2, -2314, 0 1!", D_ODABERI, D_ODUSTANI);
		}
		if(listitem ==  5) {

			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

			strcat(DialogStrgEx, ""col_white"Unesite id firme i broj vrste firme koju zelite.\n");
			strcat(DialogStrgEx, "Vrste: 1. 24/7 2. Firma bez ulaza 3. Burg 4. Cluckin Bell 5. Binco 6. Zip 7. Victim 8. Suburban\n");
			strcat(DialogStrgEx, "9. Gun Shop 10. Gym 11. Bar 12. Restoran 13. Pizza 14. Nocni klub\n");
			strcat(DialogStrgEx, "15. Disco 16. Electronic Shop 17. Trafika 18. Firma za posao 19. Rent firma 20. Pumpa\n");
			strcat(DialogStrgEx, "21. Javna Kuca 22. Kladionica 23. Oglas 24. Telekom 25. Pay 'n' Spray 26. Komunalije\n");
			strcat(DialogStrgEx, "27. Vodovod 28. Elektrana 29. Lutrija 30. Casino 31. Neon Shop 32. Roda 33. Nike 34. Ribar");

			SPD(playerid, dialog_FEDITTYPE, DSI, D_NASLOV, DialogStrgEx, "U redu", "");

			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
		}
	}
}
else if(dialogid == dialog_FEDITTYPE && response) {

	new id, vrsta, ImaFajl[40];
	if(sscanf(inputtext, "ii", id, vrsta)) {

		strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

		strcat(DialogStrgEx, ""col_white"Unesite id firme i broj vrste firme koju zelite.\n");
		strcat(DialogStrgEx, "Vrste: 1. 24/7 2. Firma bez ulaza 3. Burg 4. Cluckin Bell 5. Binco 6. Zip 7. Victim 8. Suburban\n");
		strcat(DialogStrgEx, "9. Gun Shop 10. Gym 11. Bar 12. Restoran 13. Pizza 14. Nocni klub\n");
		strcat(DialogStrgEx, "15. Disco 16. Electronic Shop 17. Trafika 18. Firma za posao 19. Rent firma 20. Pumpa\n");
		strcat(DialogStrgEx, "21. Javna Kuca 22. Kladionica 23. Oglas 24. Telekom 25. Pay 'n' Spray 26. Komunalije\n");
		strcat(DialogStrgEx, "27. Vodovod 28. Elektrana 29. Lutrija 30. Casino 31. Neon Shop 32. Roda 33. Nike 34. Ribar");

		SPD(playerid, dialog_FEDITTYPE, DSI, D_NASLOV, DialogStrgEx, "U redu", "");

		strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

		return true;
	}
	format(ImaFajl, sizeof(ImaFajl), F_FILE, id);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta firma ne postoji.");

	BusinessInfo[id][bType] = vrsta;

	SaveBusiness(id) ; Business_Refresh(id);
	SendInfoMessage(playerid, "Promenili ste promenili vrstu firme(ID: %d)!", id);

}
else if(dialogid == dialog_FCORDEXIT && response) {
	new id, Float:x, Float:y, Float:z, interior, vw, ImaFajl[40];
	if(sscanf(inputtext, "ifffii", id, x, y, z, interior, vw)) return SPD(playerid, dialog_FCORDEXIT, DSI, D_NASLOV, "Unesite id firme, kordinate x,y,z, int i vw\nPrimer: 2, 1323.2, 625.2, -2314, 0 1!", D_ODABERI, D_ODUSTANI);
	format(ImaFajl, sizeof(ImaFajl), F_FILE, id);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta firma ne postoji.");

	BusinessInfo[id][bInInt] = interior;
	BusinessInfo[id][bExitX] = x;
	BusinessInfo[id][bExitY] = y;
	BusinessInfo[id][bExitZ] = z;
	BusinessInfo[id][bInVW] = vw;

	SaveBusiness(id) ; Business_Refresh(id);
	SendInfoMessage(playerid, "Promenili ste promenili izlazne kordinate firme(ID: %d)!", id);}
else if(dialogid == dialog_FNAME && response) {
	SendInfoMessage(playerid, "Funkcija preko dijaloga onemogucena - koristite /promeniimefirme.");}
else if(dialogid == dialog_FOPEN && response) {
	new id, ImaFajl[40];
	if(sscanf(inputtext, "i", id)) return SPD(playerid, dialog_FOPEN, DSI, D_NASLOV, "Unesite id firme koju zelite otkljucati.", D_ODABERI, D_ODUSTANI);
	format(ImaFajl, sizeof(ImaFajl), F_FILE, id);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta firma ne postoji.");
	BusinessInfo[id][bLocked] = 0; GameTextForPlayer(playerid, "Firma ~g~otkljucana!", 3000, 3);
	SaveBusiness(id) ;
	SendInfoMessage(playerid, "Otkljucali ste firmu(ID: %d)!", id);}
else if(dialogid == dialog_FCLOSE && response) {
	new id, ImaFajl[40];
	if(sscanf(inputtext, "i", id)) return SPD(playerid, dialog_FCLOSE, DSI, D_NASLOV, "Unesite id firme koju zelite zakljucati.", D_ODABERI, D_ODUSTANI);
	format(ImaFajl, sizeof(ImaFajl), F_FILE, id);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta firma ne postoji.");
	BusinessInfo[id][bLocked] = 1; GameTextForPlayer(playerid, "Firma ~r~zakljucana!", 3000, 3);
	SaveBusiness(id) ;
	SendInfoMessage(playerid, "Zakljucali ste firmu(ID: %d)!", id);}
else if(dialogid == dialog_FSELL && response) {
	new id, ImaFajl[40];
	if(sscanf(inputtext, "i", id)) return SPD(playerid, dialog_FSELL, DSI, D_NASLOV, "Unesti id firme koju zelite prodati", D_ODABERI, D_ODUSTANI);
	format(ImaFajl, sizeof(ImaFajl), F_FILE, id);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta firma ne postoji.");
	BusinessInfo[id][bOwned] = 0;
	strmid(BusinessInfo[id][bOwner], "Drzava", 0, strlen("Drzava"), 32);
	SaveBusiness(id);
	BusinessInfo[id][bNeaktivnost] = 0;
	BusinessInfo[id][bFacture] = 100;
	Business_Refresh(id);
	SendInfoMessage(playerid, "Prodali ste firmu(ID: %d)!", id);}
else if(dialogid == dialog_VCREATE) {
	if(response) {
		if(ServerInfo[BrojKreiranihVozila] > MaxBrojKreiranih) return SCM(playerid, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		GetPlayerPos(playerid, PozX, PozY, PozZ);
		GetPlayerFacingAngle(playerid, PozA);
		if(carspawntimer == 1) {
			SCM(playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
			return 1;
		}
		if(sscanf(inputtext, "iii", idauta, boja1, boja2)) return SPD(playerid, dialog_VCREATE, DSI, D_NASLOV, "Unesite id zeljenog vozila, id boje1, id boje2!", D_ODABERI, D_NAZAD);
		if(idauta < 400 || idauta > 611) return SPD(playerid, dialog_VCREATE, DSI, D_NASLOV, "Unesite id zeljenog vozila, id boje1, id boje2!", D_ODABERI, D_NAZAD);
		if(VehPrice[idauta-400][1] == 0) return SendErrorMessage(playerid, "Vozilo sa unetim IDem se ne moze kreirati zbog nedefinisane cene.");
		if(boja1 < 0 || boja1 > 255) return SendErrorMessage(playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
		if(boja2 < 0 || boja2 > 255) return SendErrorMessage(playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
		for(new i = 1; i < MAX_CARS; i++) {
			new fileauta[40];
			format(fileauta, sizeof(fileauta), V_FILE, i);
			if(!fexist(fileauta)) {
				VehicleInfo[i][vOwned] = 0;
				VehicleInfo[i][vNeaktivnost] = 0;
				VehicleInfo[i][vKilometri] = 0;
				VehicleInfo[i][vMetri] = 0;
				VehicleInfo[i][vPrice] = VehPrice[idauta- 400][1];
				strmid(VehicleInfo[i][vOwner], "Drzava", 0, strlen("Drzava"), 32);
				VehicleInfo[i][vLocked] = 0;
				VehicleInfo[i][vLokacijaX] = PozX;
				VehicleInfo[i][vLokacijaY] = PozY;
				VehicleInfo[i][vLokacijaZ] = PozZ;
				VehicleInfo[i][vLokacijaA] = PozA;
				VehicleInfo[i][vUsage] = PRIVATNO_VOZILO;
				VehicleInfo[i][vVirtualWorld] = 0;
				VehicleInfo[i][vInterior] = 0;
				VehicleInfo[i][vJob] = 1;
				VehicleInfo[i][vOrganization] = 1;
				VehicleInfo[i][vFuelStation] = -1;
				VehicleInfo[i][vColor1] = boja1;
				VehicleInfo[i][vColor2] = boja2;
				VehicleInfo[i][vModel] = idauta;
				VehicleInfo[i][vReg] = 0;
				VehicleInfo[i][vRegVreme] = 0;
				VehicleInfo[i][vTeh] = 0;
				VehicleInfo[i][vGPS] = 0;
				VehicleInfo[i][vOsiguranje] = 5;
				VehicleInfo[i][vLock] = 0;
				VehicleInfo[i][vAlarm] = 0;
				VehicleInfo[i][vTuned] = 0;
				VehicleInfo[i][vNeon] = 0;
				VehicleInfo[i][vImobilizator] = 0;
				VehicleInfo[i][vSpoiler] = 0;
				VehicleInfo[i][vHood] = 0;
				VehicleInfo[i][vRoof] = 0;
				VehicleInfo[i][vSkirt] = 0;
				VehicleInfo[i][vLamps] = 0;
				VehicleInfo[i][vNitro] = 0;
				VehicleInfo[i][vExhaust] = 0;
				VehicleInfo[i][vWheels] = 0;
				VehicleInfo[i][vStereo] = 0;
				VehicleInfo[i][vHydraulics] = 0;
				VehicleInfo[i][vFrontBumper] = 0;
				VehicleInfo[i][vRearBumper] = 0;
				VehicleInfo[i][vVents] = 0;
				VehicleInfo[i][vPaintJob] = 255;
				VehicleInfo[i][vProvera] = i;
				VehicleInfo[i][vMaterijali] = 0;
				VehicleInfo[i][vDrug][0] = 0; VehicleInfo[i][vDrug][1] = 0; VehicleInfo[i][vDrug][2] = 0; VehicleInfo[i][vDrug][3] = 0; VehicleInfo[i][vDrug][4] = 0; VehicleInfo[i][vDrug][5] = 0;
				VehicleInfo[i][vDrugCode][0] = 0; VehicleInfo[i][vDrugCode][1] = 0; VehicleInfo[i][vDrugCode][2] = 0; VehicleInfo[i][vDrugCode][3] = 0; VehicleInfo[i][vDrugCode][4] = 0; VehicleInfo[i][vDrugCode][5] = 0;
				VehicleInfo[i][vMelee] = 0; VehicleInfo[i][vWeap1] = 0; VehicleInfo[i][vAmmo1] = 0; VehicleInfo[i][vWeap2] = 0; VehicleInfo[i][vAmmo2] = 0;
				VehicleInfo[i][vGajbica][0] = -1; VehicleInfo[i][vGajbica][1] = -1; VehicleInfo[i][vGajbica][2] = -1; VehicleInfo[i][vGajbica][3] = -1; VehicleInfo[i][vGajbica][4] = -1;
				VehicleInfo[i][vGajbicaAmmount][0] = 0; VehicleInfo[i][vGajbicaAmmount][1] = 0; VehicleInfo[i][vGajbicaAmmount][2] = 0; VehicleInfo[i][vGajbicaAmmount][3] = 0; VehicleInfo[i][vGajbicaAmmount][4] = 0;
				VehicleInfo[i][vID] = Fusion_CreateVehicle(i, PRIVATNO_VOZILO, -1, -1, -1, VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ]+1.0, VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], 300000);
				ac_LinkVehicleToInterior(VehicleInfo[i][vID], VehicleInfo[i][vInterior]);
				SetVehicleVirtualWorld(VehicleInfo[i][vID], VehicleInfo[i][vVirtualWorld]);
				VehicleInfo[i][vFuel] = getAmountFuel(VehicleInfo[i][vID]); vCanDrive[VehicleInfo[i][vID]] = 1; Fuel[VehicleInfo[i][vID]] = getAmountFuel(VehicleInfo[i][vID]);
				SetVehicleNumberPlate(VehicleInfo[i][vID], "NEMA"); UnLockCar(VehicleInfo[i][vID]);
				SaveVehicle(i); SendInfoMessage(playerid, "Uspesno ste kreirali vozilo: ID Auta: %d, Cena: %d", idauta, VehPrice[idauta- 400][1]);
				carspawntimer = 1; ResetVehicleStatistics(VehicleInfo[i][vID]);
				SetTimer("AntiSpawnCrash", 3000, 0);
				ac_SetVehicleParamsEx(VehicleInfo[i][vID], 0, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				if(IsVehicleBajs(VehicleInfo[i][vID])) {
					ac_SetVehicleParamsEx(VehicleInfo[i][vID], 1, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				}

				if(Diesel(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 1;
				else if(Gasoline(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 2;
				else if(GasOil(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 3;
				break;
			}
		}
	}
	else { SPD(playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nSafe Zona\nBrza Hrana\nGovornica\nNargila\nVip port\nPromoter port", D_ODABERI, D_NAZAD);  }
}
else if(dialogid == dialog_PCREATE) {
	if(response) {
		if(ServerInfo[BrojKreiranihVozila] > MaxBrojKreiranih) return SCM(playerid, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		new idauta, posao, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		GetPlayerPos(playerid, PozX, PozY, PozZ);
		GetPlayerFacingAngle(playerid, PozA);
		if(carspawntimer == 1)
		{
			SCM(playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
			return 1;
		}
		if(sscanf(inputtext, "iiii", idauta, posao, boja1, boja2)) return SPD(playerid, dialog_PCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id posla, id boje1, id boje2.\nID posla: 1. Kosac Trave, 2. Farmer, 3. Bus Vozac, 4. Rudar, 5. Komunalac, 6. Prevoznik, 7. Drvoseca\n8. P. Namestaja, 9. Pepsi Dostavljac, 10. Vocar, 11. Perac Prozora, 12. Prevoznik Novca, 13. Pilot", D_ODABERI, D_NAZAD);
		if(idauta < 400 || idauta > 611) return SPD(playerid, dialog_PCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id posla, id boje1, id boje2.\nID posla: 1. Kosac Trave, 2. Farmer, 3. Bus Vozac, 4. Rudar, 5. Komunalac, 6. Prevoznik, 7. Drvoseca\n8. P. Namestaja, 9. Pepsi Dostavljac, 10. Vocar, 11. Perac Prozora, 12. Prevoznik Novca, 13. Pilot", D_ODABERI, D_NAZAD);
		if(posao < 1 || posao > MAX_JOBS) return SendErrorMessage(playerid, "Pogresan id posla!");
		if(boja1 < 0 || boja1 > 255) return SendErrorMessage(playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
		if(boja2 < 0 || boja2 > 255) return SendErrorMessage(playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
		for(new i = 1; i < MAX_CARS; i++) {
			new fileauta[40];
			format(fileauta, sizeof(fileauta), V_FILE, i);
			if(!fexist(fileauta)) {
				VehicleInfo[i][vOwned] = 0;
				VehicleInfo[i][vNeaktivnost] = 0;
				VehicleInfo[i][vKilometri] = 0;
				VehicleInfo[i][vMetri] = 0;
				VehicleInfo[i][vPrice] = 0;
				strmid(VehicleInfo[i][vOwner], "Drzava", 0, strlen("Drzava"), 32);
				VehicleInfo[i][vLocked] = 0;
				VehicleInfo[i][vLokacijaX] = PozX;
				VehicleInfo[i][vLokacijaY] = PozY;
				VehicleInfo[i][vLokacijaZ] = PozZ;
				VehicleInfo[i][vLokacijaA] = PozA;
				VehicleInfo[i][vVirtualWorld] = 0;
				VehicleInfo[i][vInterior] = 0;
				VehicleInfo[i][vUsage] = POSLOVNO_VOZILO;
				VehicleInfo[i][vJob] = posao;
				VehicleInfo[i][vOrganization] = -1;
				VehicleInfo[i][vFuelStation] = -1;
				VehicleInfo[i][vColor1] = boja1;
				VehicleInfo[i][vColor2] = boja2;
				VehicleInfo[i][vModel] = idauta;
				VehicleInfo[i][vReg] = 1;
				VehicleInfo[i][vRegVreme] = 0;
				VehicleInfo[i][vTeh] = 1;
				VehicleInfo[i][vGPS] = 0;
				VehicleInfo[i][vOsiguranje] = 5;
				VehicleInfo[i][vLock] = 5;
				VehicleInfo[i][vAlarm] = 4;
				VehicleInfo[i][vTuned] = 0;
				VehicleInfo[i][vNeon] = 0;
				VehicleInfo[i][vImobilizator] = 5;
				VehicleInfo[i][vSpoiler] = 0;
				VehicleInfo[i][vHood] = 0;
				VehicleInfo[i][vRoof] = 0;
				VehicleInfo[i][vSkirt] = 0;
				VehicleInfo[i][vLamps] = 0;
				VehicleInfo[i][vNitro] = 0;
				VehicleInfo[i][vExhaust] = 0;
				VehicleInfo[i][vWheels] = 0;
				VehicleInfo[i][vStereo] = 0;
				VehicleInfo[i][vHydraulics] = 0;
				VehicleInfo[i][vFrontBumper] = 0;
				VehicleInfo[i][vRearBumper] = 0;
				VehicleInfo[i][vVents] = 0;
				VehicleInfo[i][vPaintJob] = 255;
				VehicleInfo[i][vProvera] = i;
				VehicleInfo[i][vMaterijali] = 0;
				VehicleInfo[i][vDrug][0] = 0; VehicleInfo[i][vDrug][1] = 0; VehicleInfo[i][vDrug][2] = 0; VehicleInfo[i][vDrug][3] = 0; VehicleInfo[i][vDrug][4] = 0; VehicleInfo[i][vDrug][5] = 0;
				VehicleInfo[i][vDrugCode][0] = 0; VehicleInfo[i][vDrugCode][1] = 0; VehicleInfo[i][vDrugCode][2] = 0; VehicleInfo[i][vDrugCode][3] = 0; VehicleInfo[i][vDrugCode][4] = 0; VehicleInfo[i][vDrugCode][5] = 0;
				VehicleInfo[i][vMelee] = 0; VehicleInfo[i][vWeap1] = 0; VehicleInfo[i][vAmmo1] = 0; VehicleInfo[i][vWeap2] = 0; VehicleInfo[i][vAmmo2] = 0;
				VehicleInfo[i][vGajbica][0] = -1; VehicleInfo[i][vGajbica][1] = -1; VehicleInfo[i][vGajbica][2] = -1; VehicleInfo[i][vGajbica][3] = -1; VehicleInfo[i][vGajbica][4] = -1;
				VehicleInfo[i][vGajbicaAmmount][0] = 0; VehicleInfo[i][vGajbicaAmmount][1] = 0; VehicleInfo[i][vGajbicaAmmount][2] = 0; VehicleInfo[i][vGajbicaAmmount][3] = 0; VehicleInfo[i][vGajbicaAmmount][4] = 0;
				VehicleInfo[i][vID] = Fusion_CreateVehicle(i, POSLOVNO_VOZILO, -1, posao, -1, VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ]+1.0, VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], 300000);
				ac_LinkVehicleToInterior(VehicleInfo[i][vID], VehicleInfo[i][vInterior]);
				SetVehicleVirtualWorld(VehicleInfo[i][vID], VehicleInfo[i][vVirtualWorld]);
				VehicleInfo[i][vFuel] = getAmountFuel(VehicleInfo[i][vID]); vCanDrive[VehicleInfo[i][vID]] = 1; Fuel[VehicleInfo[i][vID]] = getAmountFuel(VehicleInfo[i][vID]);
				UnLockCar(VehicleInfo[i][vID]); ResetVehicleStatistics(VehicleInfo[i][vID]); SetTablice(VehicleInfo[i][vID]);
				SaveVehicle(i); SendInfoMessage(playerid, "Uspesno ste kreirali poslovno vozilo: ID Auta: %d, PosaoID: %d",idauta,posao);
				carspawntimer = 1;
				SetTimer("AntiSpawnCrash", 3000, 0);
				ac_SetVehicleParamsEx(VehicleInfo[i][vID], 0, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				if(IsVehicleBajs(VehicleInfo[i][vID])) {
					ac_SetVehicleParamsEx(VehicleInfo[i][vID], 1, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				}

				if(Diesel(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 1;
				else if(Gasoline(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 2;
				else if(GasOil(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 3;

				break;
			}
		}
	}
	else { SPD(playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nSafe Zona\nBrza Hrana\nGovornica\nNargila\nVip port\nPromoter port", D_ODABERI, D_NAZAD);  }
}
else if(dialogid == dialog_GRCREATE) {
	if(response) {
		if(ServerInfo[BrojKreiranihVozila] > MaxBrojKreiranih) return SCM(playerid, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		GetPlayerPos(playerid, PozX, PozY, PozZ);
		GetPlayerFacingAngle(playerid, PozA);
		if(carspawntimer == 1)
		{
			SCM(playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
			return 1;
		}
		if(sscanf(inputtext, "iii", idauta, boja1, boja2)) return SPD(playerid, dialog_GRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za gradonacelnikovo vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD);
		if(idauta < 400 || idauta > 611) return SPD(playerid, dialog_GRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za gradonacelnikovo vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD);
		if(boja1 < 0 || boja1 > 255) return SendErrorMessage(playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
		if(boja2 < 0 || boja2 > 255) return SendErrorMessage(playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
		for(new i = 1; i < MAX_CARS; i++) {
			new fileauta[40];
			format(fileauta, sizeof(fileauta), V_FILE, i);
			if(!fexist(fileauta)) {
				VehicleInfo[i][vOwned] = 0;
				VehicleInfo[i][vNeaktivnost] = 0;
				VehicleInfo[i][vKilometri] = 0;
				VehicleInfo[i][vMetri] = 0;
				VehicleInfo[i][vPrice] = 0;
				strmid(VehicleInfo[i][vOwner], "Drzava", 0, strlen("Drzava"), 32);
				VehicleInfo[i][vLocked] = 0;
				VehicleInfo[i][vLokacijaX] = PozX;
				VehicleInfo[i][vLokacijaY] = PozY;
				VehicleInfo[i][vLokacijaZ] = PozZ;
				VehicleInfo[i][vLokacijaA] = PozA;
				VehicleInfo[i][vVirtualWorld] = 0;
				VehicleInfo[i][vInterior] = 0;
				VehicleInfo[i][vUsage] = GRADONACELNIKOVO_VOZILO;
				VehicleInfo[i][vJob] = -1;
				VehicleInfo[i][vOrganization] = -1;
				VehicleInfo[i][vFuelStation] = -1;
				VehicleInfo[i][vColor1] = boja1;
				VehicleInfo[i][vColor2] = boja2;
				VehicleInfo[i][vModel] = idauta;
				VehicleInfo[i][vReg] = 1;
				VehicleInfo[i][vRegVreme] = 0;
				VehicleInfo[i][vTeh] = 1;
				VehicleInfo[i][vGPS] = 0;
				VehicleInfo[i][vOsiguranje] = 5;
				VehicleInfo[i][vLock] = 5;
				VehicleInfo[i][vAlarm] = 4;
				VehicleInfo[i][vTuned] = 0;
				VehicleInfo[i][vNeon] = 0;
				VehicleInfo[i][vImobilizator] = 5;
				VehicleInfo[i][vSpoiler] = 0;
				VehicleInfo[i][vHood] = 0;
				VehicleInfo[i][vRoof] = 0;
				VehicleInfo[i][vSkirt] = 0;
				VehicleInfo[i][vLamps] = 0;
				VehicleInfo[i][vNitro] = 0;
				VehicleInfo[i][vExhaust] = 0;
				VehicleInfo[i][vWheels] = 0;
				VehicleInfo[i][vStereo] = 0;
				VehicleInfo[i][vHydraulics] = 0;
				VehicleInfo[i][vFrontBumper] = 0;
				VehicleInfo[i][vRearBumper] = 0;
				VehicleInfo[i][vVents] = 0;
				VehicleInfo[i][vPaintJob] = 255;
				VehicleInfo[i][vProvera] = i;
				VehicleInfo[i][vMaterijali] = 0;
				VehicleInfo[i][vDrug][0] = 0; VehicleInfo[i][vDrug][1] = 0; VehicleInfo[i][vDrug][2] = 0; VehicleInfo[i][vDrug][3] = 0; VehicleInfo[i][vDrug][4] = 0; VehicleInfo[i][vDrug][5] = 0;
				VehicleInfo[i][vDrugCode][0] = 0; VehicleInfo[i][vDrugCode][1] = 0; VehicleInfo[i][vDrugCode][2] = 0; VehicleInfo[i][vDrugCode][3] = 0; VehicleInfo[i][vDrugCode][4] = 0; VehicleInfo[i][vDrugCode][5] = 0;
				VehicleInfo[i][vMelee] = 0; VehicleInfo[i][vWeap1] = 0; VehicleInfo[i][vAmmo1] = 0; VehicleInfo[i][vWeap2] = 0; VehicleInfo[i][vAmmo2] = 0;
				VehicleInfo[i][vGajbica][0] = -1; VehicleInfo[i][vGajbica][1] = -1; VehicleInfo[i][vGajbica][2] = -1; VehicleInfo[i][vGajbica][3] = -1; VehicleInfo[i][vGajbica][4] = -1;
				VehicleInfo[i][vGajbicaAmmount][0] = 0; VehicleInfo[i][vGajbicaAmmount][1] = 0; VehicleInfo[i][vGajbicaAmmount][2] = 0; VehicleInfo[i][vGajbicaAmmount][3] = 0; VehicleInfo[i][vGajbicaAmmount][4] = 0;
				VehicleInfo[i][vID] = Fusion_CreateVehicle(i, GRADONACELNIKOVO_VOZILO, -1, -1, -1, VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ]+1.0, VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], 300000);
				ac_LinkVehicleToInterior(VehicleInfo[i][vID], VehicleInfo[i][vInterior]);
				SetVehicleVirtualWorld(VehicleInfo[i][vID], VehicleInfo[i][vVirtualWorld]);
				VehicleInfo[i][vFuel] = getAmountFuel(VehicleInfo[i][vID]); vCanDrive[VehicleInfo[i][vID]] = 1; Fuel[VehicleInfo[i][vID]] = getAmountFuel(VehicleInfo[i][vID]);
				UnLockCar(VehicleInfo[i][vID]); ResetVehicleStatistics(VehicleInfo[i][vID]); SetTablice(VehicleInfo[i][vID]);
				SaveVehicle(i); SendInfoMessage(playerid, "Uspesno ste kreirali gradonacelnikovo vozilo: ID Auta: %d.",idauta);
				carspawntimer = 1;
				SetTimer("AntiSpawnCrash", 3000, 0);
				ac_SetVehicleParamsEx(VehicleInfo[i][vID], 0, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				if(IsVehicleBajs(VehicleInfo[i][vID])) {
					ac_SetVehicleParamsEx(VehicleInfo[i][vID], 1, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				}

				if(Diesel(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 1;
				else if(Gasoline(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 2;
				else if(GasOil(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 3;
				break;
			}
		}
	}
	else { SPD(playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nSafe Zona\nBrza Hrana\nGovornica\nNargila\nVip port\nPromoter port", D_ODABERI, D_NAZAD);  }
}
else if(dialogid == dialog_IVCREATE) {
	if(response) {
		if(ServerInfo[BrojKreiranihVozila] > MaxBrojKreiranih) return SCM(playerid, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		GetPlayerPos(playerid, PozX, PozY, PozZ);
		GetPlayerFacingAngle(playerid, PozA);
		if(carspawntimer == 1)
		{
			SCM(playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
			return 1;
		}
		if(sscanf(inputtext, "iii", idauta, boja1, boja2)) return SPD(playerid, dialog_IVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za izlozbeno vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD);
		if(idauta < 400 || idauta > 611) return SPD(playerid, dialog_IVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za izlozbeno vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD);
		if(boja1 < 0 || boja1 > 255) return SendErrorMessage(playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
		if(boja2 < 0 || boja2 > 255) return SendErrorMessage(playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
		for(new i = 1; i < MAX_CARS; i++) {
			new fileauta[40];
			format(fileauta, sizeof(fileauta), V_FILE, i);
			if(!fexist(fileauta)) {
				VehicleInfo[i][vOwned] = 0;
				VehicleInfo[i][vNeaktivnost] = 0;
				VehicleInfo[i][vKilometri] = 0;
				VehicleInfo[i][vMetri] = 0;
				VehicleInfo[i][vPrice] = 0;
				strmid(VehicleInfo[i][vOwner], "Drzava", 0, strlen("Drzava"), 32);
				VehicleInfo[i][vLocked] = 0;
				VehicleInfo[i][vLokacijaX] = PozX;
				VehicleInfo[i][vLokacijaY] = PozY;
				VehicleInfo[i][vLokacijaZ] = PozZ;
				VehicleInfo[i][vLokacijaA] = PozA;
				VehicleInfo[i][vVirtualWorld] = 0;
				VehicleInfo[i][vInterior] = 0;
				VehicleInfo[i][vUsage] = IZLOZBENO_VOZILO;
				VehicleInfo[i][vJob] = -1;
				VehicleInfo[i][vOrganization] = -1;
				VehicleInfo[i][vFuelStation] = -1;
				VehicleInfo[i][vColor1] = boja1;
				VehicleInfo[i][vColor2] = boja2;
				VehicleInfo[i][vModel] = idauta;
				VehicleInfo[i][vReg] = 1;
				VehicleInfo[i][vRegVreme] = 0;
				VehicleInfo[i][vTeh] = 1;
				VehicleInfo[i][vGPS] = 0;
				VehicleInfo[i][vOsiguranje] = 5;
				VehicleInfo[i][vLock] = 5;
				VehicleInfo[i][vAlarm] = 4;
				VehicleInfo[i][vTuned] = 0;
				VehicleInfo[i][vNeon] = 0;
				VehicleInfo[i][vImobilizator] = 5;
				VehicleInfo[i][vSpoiler] = 0;
				VehicleInfo[i][vHood] = 0;
				VehicleInfo[i][vRoof] = 0;
				VehicleInfo[i][vSkirt] = 0;
				VehicleInfo[i][vLamps] = 0;
				VehicleInfo[i][vNitro] = 0;
				VehicleInfo[i][vExhaust] = 0;
				VehicleInfo[i][vWheels] = 0;
				VehicleInfo[i][vStereo] = 0;
				VehicleInfo[i][vHydraulics] = 0;
				VehicleInfo[i][vFrontBumper] = 0;
				VehicleInfo[i][vRearBumper] = 0;
				VehicleInfo[i][vVents] = 0;
				VehicleInfo[i][vPaintJob] = 255;
				VehicleInfo[i][vProvera] = i;
				VehicleInfo[i][vMaterijali] = 0;
				VehicleInfo[i][vDrug][0] = 0; VehicleInfo[i][vDrug][1] = 0; VehicleInfo[i][vDrug][2] = 0; VehicleInfo[i][vDrug][3] = 0; VehicleInfo[i][vDrug][4] = 0; VehicleInfo[i][vDrug][5] = 0;
				VehicleInfo[i][vDrugCode][0] = 0; VehicleInfo[i][vDrugCode][1] = 0; VehicleInfo[i][vDrugCode][2] = 0; VehicleInfo[i][vDrugCode][3] = 0; VehicleInfo[i][vDrugCode][4] = 0; VehicleInfo[i][vDrugCode][5] = 0;
				VehicleInfo[i][vMelee] = 0; VehicleInfo[i][vWeap1] = 0; VehicleInfo[i][vAmmo1] = 0; VehicleInfo[i][vWeap2] = 0; VehicleInfo[i][vAmmo2] = 0;
				VehicleInfo[i][vGajbica][0] = -1; VehicleInfo[i][vGajbica][1] = -1; VehicleInfo[i][vGajbica][2] = -1; VehicleInfo[i][vGajbica][3] = -1; VehicleInfo[i][vGajbica][4] = -1;
				VehicleInfo[i][vGajbicaAmmount][0] = 0; VehicleInfo[i][vGajbicaAmmount][1] = 0; VehicleInfo[i][vGajbicaAmmount][2] = 0; VehicleInfo[i][vGajbicaAmmount][3] = 0; VehicleInfo[i][vGajbicaAmmount][4] = 0;
				VehicleInfo[i][vID] = Fusion_CreateVehicle(i, IZLOZBENO_VOZILO, -1, -1, -1, VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ]+1.0, VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], 300000);
				ac_LinkVehicleToInterior(VehicleInfo[i][vID], VehicleInfo[i][vInterior]);
				SetVehicleVirtualWorld(VehicleInfo[i][vID], VehicleInfo[i][vVirtualWorld]);
				VehicleInfo[i][vFuel] = getAmountFuel(VehicleInfo[i][vID]); vCanDrive[VehicleInfo[i][vID]] = 1; Fuel[VehicleInfo[i][vID]] = getAmountFuel(VehicleInfo[i][vID]);
				UnLockCar(VehicleInfo[i][vID]); ResetVehicleStatistics(VehicleInfo[i][vID]); SetTablice(VehicleInfo[i][vID]);
				SaveVehicle(i); SendInfoMessage(playerid, "Uspesno ste kreirali izlozbeno vozilo: ID Auta: %d.",idauta);
				carspawntimer = 1;
				SetTimer("AntiSpawnCrash", 3000, 0);
				ac_SetVehicleParamsEx(VehicleInfo[i][vID], 0, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				if(IsVehicleBajs(VehicleInfo[i][vID])) {
					ac_SetVehicleParamsEx(VehicleInfo[i][vID], 1, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				}

				if(Diesel(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 1;
				else if(Gasoline(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 2;
				else if(GasOil(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 3;
				break;
			}
		}
	}
	else { SPD(playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nSafe Zona\nBrza Hrana\nGovornica\nNargila\nVip port\nPromoter port", D_ODABERI, D_NAZAD);  }
}
else if(dialogid == dialog_VVCREATE) {
	if(response) {
		if(ServerInfo[BrojKreiranihVozila] > MaxBrojKreiranih) return SCM(playerid, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		GetPlayerPos(playerid, PozX, PozY, PozZ);
		GetPlayerFacingAngle(playerid, PozA);
		if(carspawntimer == 1) {
			SCM(playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
			return 1;
		}
		if(sscanf(inputtext, "iii", idauta, boja1, boja2)) return SPD(playerid, dialog_VVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vip vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD);
		if(idauta < 400 || idauta > 611) return SPD(playerid, dialog_VVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vip vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD);
		if(boja1 < 0 || boja1 > 255) return SendErrorMessage(playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
		if(boja2 < 0 || boja2 > 255) return SendErrorMessage(playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
		for(new i = 1; i < MAX_CARS; i++) {
			new fileauta[40];
			format(fileauta, sizeof(fileauta), V_FILE, i);
			if(!fexist(fileauta)) {
				VehicleInfo[i][vOwned] = 0;
				VehicleInfo[i][vNeaktivnost] = 0;
				VehicleInfo[i][vKilometri] = 0;
				VehicleInfo[i][vMetri] = 0;
				VehicleInfo[i][vPrice] = 0;
				strmid(VehicleInfo[i][vOwner], "Drzava", 0, strlen("Drzava"), 32);
				VehicleInfo[i][vLocked] = 0;
				VehicleInfo[i][vLokacijaX] = PozX;
				VehicleInfo[i][vLokacijaY] = PozY;
				VehicleInfo[i][vLokacijaZ] = PozZ;
				VehicleInfo[i][vLokacijaA] = PozA;
				VehicleInfo[i][vVirtualWorld] = 0;
				VehicleInfo[i][vInterior] = 0;
				VehicleInfo[i][vUsage] = VIP_VOZILO;
				VehicleInfo[i][vJob] = -1;
				VehicleInfo[i][vOrganization] = -1;
				VehicleInfo[i][vFuelStation] = -1;
				VehicleInfo[i][vColor1] = boja1;
				VehicleInfo[i][vColor2] = boja2;
				VehicleInfo[i][vModel] = idauta;
				VehicleInfo[i][vReg] = 1;
				VehicleInfo[i][vRegVreme] = 0;
				VehicleInfo[i][vTeh] = 1;
				VehicleInfo[i][vGPS] = 0;
				VehicleInfo[i][vOsiguranje] = 5;
				VehicleInfo[i][vLock] = 5;
				VehicleInfo[i][vAlarm] = 4;
				VehicleInfo[i][vTuned] = 0;
				VehicleInfo[i][vNeon] = 0;
				VehicleInfo[i][vImobilizator] = 5;
				VehicleInfo[i][vSpoiler] = 0;
				VehicleInfo[i][vHood] = 0;
				VehicleInfo[i][vRoof] = 0;
				VehicleInfo[i][vSkirt] = 0;
				VehicleInfo[i][vLamps] = 0;
				VehicleInfo[i][vNitro] = 0;
				VehicleInfo[i][vExhaust] = 0;
				VehicleInfo[i][vWheels] = 0;
				VehicleInfo[i][vStereo] = 0;
				VehicleInfo[i][vHydraulics] = 0;
				VehicleInfo[i][vFrontBumper] = 0;
				VehicleInfo[i][vRearBumper] = 0;
				VehicleInfo[i][vVents] = 0;
				VehicleInfo[i][vPaintJob] = 255;
				VehicleInfo[i][vProvera] = i;
				VehicleInfo[i][vMaterijali] = 0;
				VehicleInfo[i][vDrug][0] = 0; VehicleInfo[i][vDrug][1] = 0; VehicleInfo[i][vDrug][2] = 0; VehicleInfo[i][vDrug][3] = 0; VehicleInfo[i][vDrug][4] = 0; VehicleInfo[i][vDrug][5] = 0;
				VehicleInfo[i][vDrugCode][0] = 0; VehicleInfo[i][vDrugCode][1] = 0; VehicleInfo[i][vDrugCode][2] = 0; VehicleInfo[i][vDrugCode][3] = 0; VehicleInfo[i][vDrugCode][4] = 0; VehicleInfo[i][vDrugCode][5] = 0;
				VehicleInfo[i][vMelee] = 0; VehicleInfo[i][vWeap1] = 0; VehicleInfo[i][vAmmo1] = 0; VehicleInfo[i][vWeap2] = 0; VehicleInfo[i][vAmmo2] = 0;
				VehicleInfo[i][vGajbica][0] = -1; VehicleInfo[i][vGajbica][1] = -1; VehicleInfo[i][vGajbica][2] = -1; VehicleInfo[i][vGajbica][3] = -1; VehicleInfo[i][vGajbica][4] = -1;
				VehicleInfo[i][vGajbicaAmmount][0] = 0; VehicleInfo[i][vGajbicaAmmount][1] = 0; VehicleInfo[i][vGajbicaAmmount][2] = 0; VehicleInfo[i][vGajbicaAmmount][3] = 0; VehicleInfo[i][vGajbicaAmmount][4] = 0;
				VehicleInfo[i][vID] = Fusion_CreateVehicle(i, VIP_VOZILO, -1, -1, -1, VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ]+1.0, VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], 300000);
				ac_LinkVehicleToInterior(VehicleInfo[i][vID], VehicleInfo[i][vInterior]);
				SetVehicleVirtualWorld(VehicleInfo[i][vID], VehicleInfo[i][vVirtualWorld]);
				VehicleInfo[i][vFuel] = getAmountFuel(VehicleInfo[i][vID]); vCanDrive[VehicleInfo[i][vID]] = 1; Fuel[VehicleInfo[i][vID]] = getAmountFuel(VehicleInfo[i][vID]);
				UnLockCar(VehicleInfo[i][vID]); ResetVehicleStatistics(VehicleInfo[i][vID]); SetTablice(VehicleInfo[i][vID]);
				SaveVehicle(i); SendInfoMessage(playerid, "Uspesno ste kreirali vip vozilo: ID Auta: %d.",idauta);
				SetVehicleLabels(i);
				carspawntimer = 1;
				SetTimer("AntiSpawnCrash", 3000, 0);
				ac_SetVehicleParamsEx(VehicleInfo[i][vID], 0, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				if(IsVehicleBajs(VehicleInfo[i][vID])) {
					ac_SetVehicleParamsEx(VehicleInfo[i][vID], 1, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				}

				if(Diesel(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 1;
				else if(Gasoline(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 2;
				else if(GasOil(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 3;
				break;
			}
		}
	}
	else { SPD(playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nSafe Zona\nBrza Hrana\nGovornica\nNargila\nVip port\nPromoter port", D_ODABERI, D_NAZAD);  }
}
else if(dialogid == dialog_POLVCREATE) {
	if(response) {
		if(ServerInfo[BrojKreiranihVozila] > MaxBrojKreiranih) return SCM(playerid, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		GetPlayerPos(playerid, PozX, PozY, PozZ);
		GetPlayerFacingAngle(playerid, PozA);
		if(carspawntimer == 1) {
			SCM(playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
			return 1;
		}
		if(sscanf(inputtext, "iii", idauta, boja1, boja2)) return SPD(playerid, dialog_VVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vip vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD);
		if(idauta < 400 || idauta > 611) return SPD(playerid, dialog_VVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vip vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD);
		if(boja1 < 0 || boja1 > 255) return SendErrorMessage(playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
		if(boja2 < 0 || boja2 > 255) return SendErrorMessage(playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
		for(new i = 1; i < MAX_CARS; i++) {
			new fileauta[40];
			format(fileauta, sizeof(fileauta), V_FILE, i);
			if(!fexist(fileauta)) {
				VehicleInfo[i][vOwned] = 0;
				VehicleInfo[i][vNeaktivnost] = 0;
				VehicleInfo[i][vKilometri] = 0;
				VehicleInfo[i][vMetri] = 0;
				VehicleInfo[i][vPrice] = 0;
				strmid(VehicleInfo[i][vOwner], "Drzava", 0, strlen("Drzava"), 32);
				VehicleInfo[i][vLocked] = 0;
				VehicleInfo[i][vLokacijaX] = PozX;
				VehicleInfo[i][vLokacijaY] = PozY;
				VehicleInfo[i][vLokacijaZ] = PozZ;
				VehicleInfo[i][vLokacijaA] = PozA;
				VehicleInfo[i][vVirtualWorld] = 0;
				VehicleInfo[i][vInterior] = 0;
				VehicleInfo[i][vUsage] = POLAGANJE_VOZILO;
				VehicleInfo[i][vJob] = -1;
				VehicleInfo[i][vOrganization] = -1;
				VehicleInfo[i][vFuelStation] = -1;
				VehicleInfo[i][vColor1] = boja1;
				VehicleInfo[i][vColor2] = boja2;
				VehicleInfo[i][vModel] = idauta;
				VehicleInfo[i][vReg] = 1;
				VehicleInfo[i][vRegVreme] = 0;
				VehicleInfo[i][vTeh] = 1;
				VehicleInfo[i][vGPS] = 0;
				VehicleInfo[i][vOsiguranje] = 5;
				VehicleInfo[i][vLock] = 5;
				VehicleInfo[i][vAlarm] = 4;
				VehicleInfo[i][vTuned] = 0;
				VehicleInfo[i][vNeon] = 0;
				VehicleInfo[i][vImobilizator] = 5;
				VehicleInfo[i][vSpoiler] = 0;
				VehicleInfo[i][vHood] = 0;
				VehicleInfo[i][vRoof] = 0;
				VehicleInfo[i][vSkirt] = 0;
				VehicleInfo[i][vLamps] = 0;
				VehicleInfo[i][vNitro] = 0;
				VehicleInfo[i][vExhaust] = 0;
				VehicleInfo[i][vWheels] = 0;
				VehicleInfo[i][vStereo] = 0;
				VehicleInfo[i][vHydraulics] = 0;
				VehicleInfo[i][vFrontBumper] = 0;
				VehicleInfo[i][vRearBumper] = 0;
				VehicleInfo[i][vVents] = 0;
				VehicleInfo[i][vPaintJob] = 255;
				VehicleInfo[i][vProvera] = i;
				VehicleInfo[i][vMaterijali] = 0;
				VehicleInfo[i][vDrug][0] = 0; VehicleInfo[i][vDrug][1] = 0; VehicleInfo[i][vDrug][2] = 0; VehicleInfo[i][vDrug][3] = 0; VehicleInfo[i][vDrug][4] = 0; VehicleInfo[i][vDrug][5] = 0;
				VehicleInfo[i][vDrugCode][0] = 0; VehicleInfo[i][vDrugCode][1] = 0; VehicleInfo[i][vDrugCode][2] = 0; VehicleInfo[i][vDrugCode][3] = 0; VehicleInfo[i][vDrugCode][4] = 0; VehicleInfo[i][vDrugCode][5] = 0;
				VehicleInfo[i][vMelee] = 0; VehicleInfo[i][vWeap1] = 0; VehicleInfo[i][vAmmo1] = 0; VehicleInfo[i][vWeap2] = 0; VehicleInfo[i][vAmmo2] = 0;
				VehicleInfo[i][vGajbica][0] = -1; VehicleInfo[i][vGajbica][1] = -1; VehicleInfo[i][vGajbica][2] = -1; VehicleInfo[i][vGajbica][3] = -1; VehicleInfo[i][vGajbica][4] = -1;
				VehicleInfo[i][vGajbicaAmmount][0] = 0; VehicleInfo[i][vGajbicaAmmount][1] = 0; VehicleInfo[i][vGajbicaAmmount][2] = 0; VehicleInfo[i][vGajbicaAmmount][3] = 0; VehicleInfo[i][vGajbicaAmmount][4] = 0;
				VehicleInfo[i][vID] = Fusion_CreateVehicle(i, POLAGANJE_VOZILO, -1, -1, -1, VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ]+1.0, VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], 300000);
				ac_LinkVehicleToInterior(VehicleInfo[i][vID], VehicleInfo[i][vInterior]);
				SetVehicleVirtualWorld(VehicleInfo[i][vID], VehicleInfo[i][vVirtualWorld]);
				VehicleInfo[i][vFuel] = getAmountFuel(VehicleInfo[i][vID]); vCanDrive[VehicleInfo[i][vID]] = 1; Fuel[VehicleInfo[i][vID]] = getAmountFuel(VehicleInfo[i][vID]);
				UnLockCar(VehicleInfo[i][vID]); ResetVehicleStatistics(VehicleInfo[i][vID]); SetTablice(VehicleInfo[i][vID]);
				SaveVehicle(i); SendInfoMessage(playerid, "Uspesno ste kreirali polaganje vozilo: ID Auta: %d.",idauta);
				carspawntimer = 1;
				SetTimer("AntiSpawnCrash", 3000, 0);
				ac_SetVehicleParamsEx(VehicleInfo[i][vID], 0, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				if(IsVehicleBajs(VehicleInfo[i][vID])) {
					ac_SetVehicleParamsEx(VehicleInfo[i][vID], 1, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				}

				if(Diesel(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 1;
				else if(Gasoline(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 2;
				else if(GasOil(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 3;
				break;
			}
		}
	}
	else { SPD(playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nSafe Zona\nBrza Hrana\nGovornica\nNargila\nVip port\nPromoter port", D_ODABERI, D_NAZAD);  }
}
else if(dialogid == dialog_PRCREATE) {
	if(response) {
		if(ServerInfo[BrojKreiranihVozila] > MaxBrojKreiranih) return SCM(playerid, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		GetPlayerPos(playerid, PozX, PozY, PozZ);
		GetPlayerFacingAngle(playerid, PozA);
		if(carspawntimer == 1) {
			SCM(playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
			return 1;
		}
		if(sscanf(inputtext, "iii", idauta, boja1, boja2)) return SPD(playerid, dialog_PRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za promotersko vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD);
		if(idauta < 400 || idauta > 611) return SPD(playerid, dialog_PRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za promotersko vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD);
		if(boja1 < 0 || boja1 > 255) return SendErrorMessage(playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
		if(boja2 < 0 || boja2 > 255) return SendErrorMessage(playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
		for(new i = 1; i < MAX_CARS; i++) {
			new fileauta[40];
			format(fileauta, sizeof(fileauta), V_FILE, i);
			if(!fexist(fileauta)) {
				VehicleInfo[i][vOwned] = 0;
				VehicleInfo[i][vNeaktivnost] = 0;
				VehicleInfo[i][vKilometri] = 0;
				VehicleInfo[i][vMetri] = 0;
				VehicleInfo[i][vPrice] = 0;
				strmid(VehicleInfo[i][vOwner], "Drzava", 0, strlen("Drzava"), 32);
				VehicleInfo[i][vLocked] = 0;
				VehicleInfo[i][vLokacijaX] = PozX;
				VehicleInfo[i][vLokacijaY] = PozY;
				VehicleInfo[i][vLokacijaZ] = PozZ;
				VehicleInfo[i][vLokacijaA] = PozA;
				VehicleInfo[i][vVirtualWorld] = 0;
				VehicleInfo[i][vInterior] = 0;
				VehicleInfo[i][vUsage] = PROMOTER_VOZILO;
				VehicleInfo[i][vJob] = -1;
				VehicleInfo[i][vOrganization] = -1;
				VehicleInfo[i][vFuelStation] = -1;
				VehicleInfo[i][vColor1] = boja1;
				VehicleInfo[i][vColor2] = boja2;
				VehicleInfo[i][vModel] = idauta;
				VehicleInfo[i][vReg] = 1;
				VehicleInfo[i][vRegVreme] = 0;
				VehicleInfo[i][vTeh] = 1;
				VehicleInfo[i][vGPS] = 0;
				VehicleInfo[i][vOsiguranje] = 5;
				VehicleInfo[i][vLock] = 5;
				VehicleInfo[i][vAlarm] = 4;
				VehicleInfo[i][vTuned] = 0;
				VehicleInfo[i][vNeon] = 0;
				VehicleInfo[i][vImobilizator] = 5;
				VehicleInfo[i][vSpoiler] = 0;
				VehicleInfo[i][vHood] = 0;
				VehicleInfo[i][vRoof] = 0;
				VehicleInfo[i][vSkirt] = 0;
				VehicleInfo[i][vLamps] = 0;
				VehicleInfo[i][vNitro] = 0;
				VehicleInfo[i][vExhaust] = 0;
				VehicleInfo[i][vWheels] = 0;
				VehicleInfo[i][vStereo] = 0;
				VehicleInfo[i][vHydraulics] = 0;
				VehicleInfo[i][vFrontBumper] = 0;
				VehicleInfo[i][vRearBumper] = 0;
				VehicleInfo[i][vVents] = 0;
				VehicleInfo[i][vPaintJob] = 255;
				VehicleInfo[i][vProvera] = i;
				VehicleInfo[i][vMaterijali] = 0;
				VehicleInfo[i][vDrug][0] = 0; VehicleInfo[i][vDrug][1] = 0; VehicleInfo[i][vDrug][2] = 0; VehicleInfo[i][vDrug][3] = 0; VehicleInfo[i][vDrug][4] = 0; VehicleInfo[i][vDrug][5] = 0;
				VehicleInfo[i][vDrugCode][0] = 0; VehicleInfo[i][vDrugCode][1] = 0; VehicleInfo[i][vDrugCode][2] = 0; VehicleInfo[i][vDrugCode][3] = 0; VehicleInfo[i][vDrugCode][4] = 0; VehicleInfo[i][vDrugCode][5] = 0;
				VehicleInfo[i][vMelee] = 0; VehicleInfo[i][vWeap1] = 0; VehicleInfo[i][vAmmo1] = 0; VehicleInfo[i][vWeap2] = 0; VehicleInfo[i][vAmmo2] = 0;
				VehicleInfo[i][vGajbica][0] = -1; VehicleInfo[i][vGajbica][1] = -1; VehicleInfo[i][vGajbica][2] = -1; VehicleInfo[i][vGajbica][3] = -1; VehicleInfo[i][vGajbica][4] = -1;
				VehicleInfo[i][vGajbicaAmmount][0] = 0; VehicleInfo[i][vGajbicaAmmount][1] = 0; VehicleInfo[i][vGajbicaAmmount][2] = 0; VehicleInfo[i][vGajbicaAmmount][3] = 0; VehicleInfo[i][vGajbicaAmmount][4] = 0;
				VehicleInfo[i][vID] = Fusion_CreateVehicle(i, PROMOTER_VOZILO, -1, -1, -1, VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ]+1.0, VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], 300000);
				ac_LinkVehicleToInterior(VehicleInfo[i][vID], VehicleInfo[i][vInterior]);
				SetVehicleVirtualWorld(VehicleInfo[i][vID], VehicleInfo[i][vVirtualWorld]);
				VehicleInfo[i][vFuel] = getAmountFuel(VehicleInfo[i][vID]); vCanDrive[VehicleInfo[i][vID]] = 1; Fuel[VehicleInfo[i][vID]] = getAmountFuel(VehicleInfo[i][vID]);
				UnLockCar(VehicleInfo[i][vID]); ResetVehicleStatistics(VehicleInfo[i][vID]); SetTablice(VehicleInfo[i][vID]);
				SaveVehicle(i); SendInfoMessage(playerid, "Uspesno ste kreirali promotersko vozilo: ID Auta: %d.",idauta);
				SetVehicleLabels(i);
				carspawntimer = 1;
				SetTimer("AntiSpawnCrash", 3000, 0);
				ac_SetVehicleParamsEx(VehicleInfo[i][vID], 0, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				if(IsVehicleBajs(VehicleInfo[i][vID])) {
					ac_SetVehicleParamsEx(VehicleInfo[i][vID], 1, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				}

				if(Diesel(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 1;
				else if(Gasoline(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 2;
				else if(GasOil(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 3;
				break;
			}
		}
	}
	else { SPD(playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nSafe Zona\nBrza Hrana\nGovornica\nNargila\nVip port\nPromoter port", D_ODABERI, D_NAZAD);  }
}
else if(dialogid == dialog_AVCREATE) {
	if(response) {
		if(ServerInfo[BrojKreiranihVozila] > MaxBrojKreiranih) return SCM(playerid, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		GetPlayerPos(playerid, PozX, PozY, PozZ);
		GetPlayerFacingAngle(playerid, PozA);
		if(carspawntimer == 1) {
			SCM(playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
			return 1;
		}
		if(sscanf(inputtext, "iii", idauta, boja1, boja2)) return SPD(playerid, dialog_AVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za Admin vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD);
		if(idauta < 400 || idauta > 611) return SPD(playerid, dialog_AVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za Admin vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD);
		if(boja1 < 0 || boja1 > 255) return SendErrorMessage(playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
		if(boja2 < 0 || boja2 > 255) return SendErrorMessage(playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
		for(new i = 1; i < MAX_CARS; i++) {
			new fileauta[40];
			format(fileauta, sizeof(fileauta), V_FILE, i);
			if(!fexist(fileauta)) {
				VehicleInfo[i][vOwned] = 0;
				VehicleInfo[i][vNeaktivnost] = 0;
				VehicleInfo[i][vKilometri] = 0;
				VehicleInfo[i][vMetri] = 0;
				VehicleInfo[i][vPrice] = 0;
				strmid(VehicleInfo[i][vOwner], "Drzava", 0, strlen("Drzava"), 32);
				VehicleInfo[i][vLocked] = 0;
				VehicleInfo[i][vLokacijaX] = PozX;
				VehicleInfo[i][vLokacijaY] = PozY;
				VehicleInfo[i][vLokacijaZ] = PozZ;
				VehicleInfo[i][vLokacijaA] = PozA;
				VehicleInfo[i][vVirtualWorld] = 0;
				VehicleInfo[i][vInterior] = 0;
				VehicleInfo[i][vUsage] = ADMIN_VOZILO;
				VehicleInfo[i][vJob] = -1;
				VehicleInfo[i][vOrganization] = -1;
				VehicleInfo[i][vFuelStation] = -1;
				VehicleInfo[i][vColor1] = boja1;
				VehicleInfo[i][vColor2] = boja2;
				VehicleInfo[i][vModel] = idauta;
				VehicleInfo[i][vReg] = 1;
				VehicleInfo[i][vRegVreme] = 0;
				VehicleInfo[i][vTeh] = 1;
				VehicleInfo[i][vGPS] = 0;
				VehicleInfo[i][vOsiguranje] = 5;
				VehicleInfo[i][vLock] = 5;
				VehicleInfo[i][vAlarm] = 4;
				VehicleInfo[i][vTuned] = 0;
				VehicleInfo[i][vNeon] = 0;
				VehicleInfo[i][vImobilizator] = 5;
				VehicleInfo[i][vSpoiler] = 0;
				VehicleInfo[i][vHood] = 0;
				VehicleInfo[i][vRoof] = 0;
				VehicleInfo[i][vSkirt] = 0;
				VehicleInfo[i][vLamps] = 0;
				VehicleInfo[i][vNitro] = 0;
				VehicleInfo[i][vExhaust] = 0;
				VehicleInfo[i][vWheels] = 0;
				VehicleInfo[i][vStereo] = 0;
				VehicleInfo[i][vHydraulics] = 0;
				VehicleInfo[i][vFrontBumper] = 0;
				VehicleInfo[i][vRearBumper] = 0;
				VehicleInfo[i][vVents] = 0;
				VehicleInfo[i][vPaintJob] = 255;
				VehicleInfo[i][vProvera] = i;
				VehicleInfo[i][vMaterijali] = 0;
				VehicleInfo[i][vDrug][0] = 0; VehicleInfo[i][vDrug][1] = 0; VehicleInfo[i][vDrug][2] = 0; VehicleInfo[i][vDrug][3] = 0; VehicleInfo[i][vDrug][4] = 0; VehicleInfo[i][vDrug][5] = 0;
				VehicleInfo[i][vDrugCode][0] = 0; VehicleInfo[i][vDrugCode][1] = 0; VehicleInfo[i][vDrugCode][2] = 0; VehicleInfo[i][vDrugCode][3] = 0; VehicleInfo[i][vDrugCode][4] = 0; VehicleInfo[i][vDrugCode][5] = 0;
				VehicleInfo[i][vMelee] = 0; VehicleInfo[i][vWeap1] = 0; VehicleInfo[i][vAmmo1] = 0; VehicleInfo[i][vWeap2] = 0; VehicleInfo[i][vAmmo2] = 0;
				VehicleInfo[i][vGajbica][0] = -1; VehicleInfo[i][vGajbica][1] = -1; VehicleInfo[i][vGajbica][2] = -1; VehicleInfo[i][vGajbica][3] = -1; VehicleInfo[i][vGajbica][4] = -1;
				VehicleInfo[i][vGajbicaAmmount][0] = 0; VehicleInfo[i][vGajbicaAmmount][1] = 0; VehicleInfo[i][vGajbicaAmmount][2] = 0; VehicleInfo[i][vGajbicaAmmount][3] = 0; VehicleInfo[i][vGajbicaAmmount][4] = 0;
				VehicleInfo[i][vID] = Fusion_CreateVehicle(i, ADMIN_VOZILO, -1, -1, -1, VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ]+1.0, VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], 300000);
				ac_LinkVehicleToInterior(VehicleInfo[i][vID], VehicleInfo[i][vInterior]);
				SetVehicleVirtualWorld(VehicleInfo[i][vID], VehicleInfo[i][vVirtualWorld]);
				VehicleInfo[i][vFuel] = getAmountFuel(VehicleInfo[i][vID]); vCanDrive[VehicleInfo[i][vID]] = 1; Fuel[VehicleInfo[i][vID]] = getAmountFuel(VehicleInfo[i][vID]);
				UnLockCar(VehicleInfo[i][vID]); ResetVehicleStatistics(VehicleInfo[i][vID]); SetTablice(VehicleInfo[i][vID]);
				SaveVehicle(i); SendInfoMessage(playerid, "Uspesno ste kreirali Admin vozilo: ID Auta: %d.",idauta);
				SetVehicleLabels(i);
				carspawntimer = 1;
				SetTimer("AntiSpawnCrash", 3000, 0);
				ac_SetVehicleParamsEx(VehicleInfo[i][vID], 0, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				if(IsVehicleBajs(VehicleInfo[i][vID])) {
					ac_SetVehicleParamsEx(VehicleInfo[i][vID], 1, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				}

				if(Diesel(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 1;
				else if(Gasoline(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 2;
				else if(GasOil(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 3;
				break;
			}
		}
	}
	else { SPD(playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nSafe Zona\nBrza Hrana\nGovornica\nNargila\nVip port\nPromoter port", D_ODABERI, D_NAZAD);  }
}
else if(dialogid == dialog_HVCREATE) {
	if(response) {
		if(ServerInfo[BrojKreiranihVozila] > MaxBrojKreiranih) return SCM(playerid, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		GetPlayerPos(playerid, PozX, PozY, PozZ);
		GetPlayerFacingAngle(playerid, PozA);
		if(carspawntimer == 1) {
			SCM(playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
			return 1;
		}
		if(sscanf(inputtext, "iii", idauta, boja1, boja2)) return SPD(playerid, dialog_HVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za Helper vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD);
		if(idauta < 400 || idauta > 611) return SPD(playerid, dialog_HVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za Helper vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD);
		if(boja1 < 0 || boja1 > 255) return SendErrorMessage(playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
		if(boja2 < 0 || boja2 > 255) return SendErrorMessage(playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
		for(new i = 1; i < MAX_CARS; i++) {
			new fileauta[40];
			format(fileauta, sizeof(fileauta), V_FILE, i);
			if(!fexist(fileauta)) {
				VehicleInfo[i][vOwned] = 0;
				VehicleInfo[i][vNeaktivnost] = 0;
				VehicleInfo[i][vKilometri] = 0;
				VehicleInfo[i][vMetri] = 0;
				VehicleInfo[i][vPrice] = 0;
				strmid(VehicleInfo[i][vOwner], "Drzava", 0, strlen("Drzava"), 32);
				VehicleInfo[i][vLocked] = 0;
				VehicleInfo[i][vLokacijaX] = PozX;
				VehicleInfo[i][vLokacijaY] = PozY;
				VehicleInfo[i][vLokacijaZ] = PozZ;
				VehicleInfo[i][vLokacijaA] = PozA;
				VehicleInfo[i][vVirtualWorld] = 0;
				VehicleInfo[i][vInterior] = 0;
				VehicleInfo[i][vUsage] = HELPER_VOZILO;
				VehicleInfo[i][vJob] = -1;
				VehicleInfo[i][vOrganization] = -1;
				VehicleInfo[i][vFuelStation] = -1;
				VehicleInfo[i][vColor1] = boja1;
				VehicleInfo[i][vColor2] = boja2;
				VehicleInfo[i][vModel] = idauta;
				VehicleInfo[i][vReg] = 1;
				VehicleInfo[i][vRegVreme] = 0;
				VehicleInfo[i][vTeh] = 1;
				VehicleInfo[i][vGPS] = 0;
				VehicleInfo[i][vOsiguranje] = 5;
				VehicleInfo[i][vLock] = 5;
				VehicleInfo[i][vAlarm] = 4;
				VehicleInfo[i][vTuned] = 0;
				VehicleInfo[i][vNeon] = 0;
				VehicleInfo[i][vImobilizator] = 5;
				VehicleInfo[i][vSpoiler] = 0;
				VehicleInfo[i][vHood] = 0;
				VehicleInfo[i][vRoof] = 0;
				VehicleInfo[i][vSkirt] = 0;
				VehicleInfo[i][vLamps] = 0;
				VehicleInfo[i][vNitro] = 0;
				VehicleInfo[i][vExhaust] = 0;
				VehicleInfo[i][vWheels] = 0;
				VehicleInfo[i][vStereo] = 0;
				VehicleInfo[i][vHydraulics] = 0;
				VehicleInfo[i][vFrontBumper] = 0;
				VehicleInfo[i][vRearBumper] = 0;
				VehicleInfo[i][vVents] = 0;
				VehicleInfo[i][vPaintJob] = 255;
				VehicleInfo[i][vProvera] = i;
				VehicleInfo[i][vMaterijali] = 0;
				VehicleInfo[i][vDrug][0] = 0; VehicleInfo[i][vDrug][1] = 0; VehicleInfo[i][vDrug][2] = 0; VehicleInfo[i][vDrug][3] = 0; VehicleInfo[i][vDrug][4] = 0; VehicleInfo[i][vDrug][5] = 0;
				VehicleInfo[i][vDrugCode][0] = 0; VehicleInfo[i][vDrugCode][1] = 0; VehicleInfo[i][vDrugCode][2] = 0; VehicleInfo[i][vDrugCode][3] = 0; VehicleInfo[i][vDrugCode][4] = 0; VehicleInfo[i][vDrugCode][5] = 0;
				VehicleInfo[i][vMelee] = 0; VehicleInfo[i][vWeap1] = 0; VehicleInfo[i][vAmmo1] = 0; VehicleInfo[i][vWeap2] = 0; VehicleInfo[i][vAmmo2] = 0;
				VehicleInfo[i][vGajbica][0] = -1; VehicleInfo[i][vGajbica][1] = -1; VehicleInfo[i][vGajbica][2] = -1; VehicleInfo[i][vGajbica][3] = -1; VehicleInfo[i][vGajbica][4] = -1;
				VehicleInfo[i][vGajbicaAmmount][0] = 0; VehicleInfo[i][vGajbicaAmmount][1] = 0; VehicleInfo[i][vGajbicaAmmount][2] = 0; VehicleInfo[i][vGajbicaAmmount][3] = 0; VehicleInfo[i][vGajbicaAmmount][4] = 0;
				VehicleInfo[i][vID] = Fusion_CreateVehicle(i, HELPER_VOZILO, -1, -1, -1, VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ]+1.0, VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], 300000);
				ac_LinkVehicleToInterior(VehicleInfo[i][vID], VehicleInfo[i][vInterior]);
				SetVehicleVirtualWorld(VehicleInfo[i][vID], VehicleInfo[i][vVirtualWorld]);
				VehicleInfo[i][vFuel] = getAmountFuel(VehicleInfo[i][vID]); vCanDrive[VehicleInfo[i][vID]] = 1; Fuel[VehicleInfo[i][vID]] = getAmountFuel(VehicleInfo[i][vID]);
				UnLockCar(VehicleInfo[i][vID]); ResetVehicleStatistics(VehicleInfo[i][vID]); SetTablice(VehicleInfo[i][vID]);
				SaveVehicle(i); SendInfoMessage(playerid, "Uspesno ste kreirali Helper vozilo: ID Auta: %d.",idauta);
				SetVehicleLabels(i);
				carspawntimer = 1;
				SetTimer("AntiSpawnCrash", 3000, 0);
				ac_SetVehicleParamsEx(VehicleInfo[i][vID], 0, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				if(IsVehicleBajs(VehicleInfo[i][vID])) {
					ac_SetVehicleParamsEx(VehicleInfo[i][vID], 1, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				}

				if(Diesel(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 1;
				else if(Gasoline(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 2;
				else if(GasOil(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 3;
				break;
			}
		}
	}
	else { SPD(playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nSafe Zona\nBrza Hrana\nGovornica\nNargila\nVip port\nPromoter port", D_ODABERI, D_NAZAD);  }
}
else if(dialogid == dialog_OVCREATE) {
	if(response) {
		if(ServerInfo[BrojKreiranihVozila] > MaxBrojKreiranih) return SCM(playerid, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		new idauta, orga, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		GetPlayerPos(playerid, PozX, PozY, PozZ);
		GetPlayerFacingAngle(playerid, PozA);
		if(carspawntimer == 1)
		{
			SCM(playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
			return 1;
		}
		if(sscanf(inputtext, "iiii", idauta, orga, boja1, boja2)) return SPD(playerid, dialog_OVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id organizacije, id boje1, id boje2.", D_ODABERI, D_NAZAD);
		if(idauta < 400 || idauta > 611) return SPD(playerid, dialog_OVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id organizacije, id boje1, id boje2.", D_ODABERI, D_NAZAD);
		if(orga < 1) return SendErrorMessage(playerid, "Pogresan id organizacije(1+)!");
		if(boja1 < 0 || boja1 > 255) return SendErrorMessage(playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
		if(boja2 < 0 || boja2 > 255) return SendErrorMessage(playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
		new ImaFajl[40];
		format(ImaFajl, sizeof(ImaFajl), O_FILE, orga);
		if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta organizacija ne postoji.");
		for(new i = 1; i < MAX_CARS; i++) {
			new fileauta[40];
			format(fileauta, sizeof(fileauta), V_FILE, i);
			if(!fexist(fileauta)) {
				VehicleInfo[i][vOwned] = 0;
				VehicleInfo[i][vNeaktivnost] = 0;
				VehicleInfo[i][vKilometri] = 0;
				VehicleInfo[i][vMetri] = 0;
				VehicleInfo[i][vPrice] = 0;
				strmid(VehicleInfo[i][vOwner], "Drzava", 0, strlen("Drzava"), 32);
				VehicleInfo[i][vLocked] = 0;
				VehicleInfo[i][vLokacijaX] = PozX;
				VehicleInfo[i][vLokacijaY] = PozY;
				VehicleInfo[i][vLokacijaZ] = PozZ;
				VehicleInfo[i][vLokacijaA] = PozA;
				VehicleInfo[i][vVirtualWorld] = 0;
				VehicleInfo[i][vInterior] = 0;
				VehicleInfo[i][vUsage] = ORGANIZACIJSKO_VOZILO;
				VehicleInfo[i][vJob] = -1;
				VehicleInfo[i][vOrganization] = orga;
				VehicleInfo[i][vFuelStation] = -1;
				VehicleInfo[i][vColor1] = boja1;
				VehicleInfo[i][vColor2] = boja2;
				VehicleInfo[i][vModel] = idauta;
				VehicleInfo[i][vReg] = 1;
				VehicleInfo[i][vRegVreme] = 0;
				VehicleInfo[i][vTeh] = 1;
				VehicleInfo[i][vGPS] = 0;
				VehicleInfo[i][vOsiguranje] = 5;
				VehicleInfo[i][vLock] = 5;
				VehicleInfo[i][vAlarm] = 4;
				VehicleInfo[i][vTuned] = 0;
				VehicleInfo[i][vNeon] = 0;
				VehicleInfo[i][vImobilizator] = 5;
				VehicleInfo[i][vSpoiler] = 0;
				VehicleInfo[i][vHood] = 0;
				VehicleInfo[i][vRoof] = 0;
				VehicleInfo[i][vSkirt] = 0;
				VehicleInfo[i][vLamps] = 0;
				VehicleInfo[i][vNitro] = 0;
				VehicleInfo[i][vExhaust] = 0;
				VehicleInfo[i][vWheels] = 0;
				VehicleInfo[i][vStereo] = 0;
				VehicleInfo[i][vHydraulics] = 0;
				VehicleInfo[i][vFrontBumper] = 0;
				VehicleInfo[i][vRearBumper] = 0;
				VehicleInfo[i][vVents] = 0;
				VehicleInfo[i][vPaintJob] = 255;
				VehicleInfo[i][vProvera] = i;
				VehicleInfo[i][vMaterijali] = 0;
				VehicleInfo[i][vDrug][0] = 0; VehicleInfo[i][vDrug][1] = 0; VehicleInfo[i][vDrug][2] = 0; VehicleInfo[i][vDrug][3] = 0; VehicleInfo[i][vDrug][4] = 0; VehicleInfo[i][vDrug][5] = 0;
				VehicleInfo[i][vDrugCode][0] = 0; VehicleInfo[i][vDrugCode][1] = 0; VehicleInfo[i][vDrugCode][2] = 0; VehicleInfo[i][vDrugCode][3] = 0; VehicleInfo[i][vDrugCode][4] = 0; VehicleInfo[i][vDrugCode][5] = 0;
				VehicleInfo[i][vMelee] = 0; VehicleInfo[i][vWeap1] = 0; VehicleInfo[i][vAmmo1] = 0; VehicleInfo[i][vWeap2] = 0; VehicleInfo[i][vAmmo2] = 0;
				VehicleInfo[i][vGajbica][0] = -1; VehicleInfo[i][vGajbica][1] = -1; VehicleInfo[i][vGajbica][2] = -1; VehicleInfo[i][vGajbica][3] = -1; VehicleInfo[i][vGajbica][4] = -1;
				VehicleInfo[i][vGajbicaAmmount][0] = 0; VehicleInfo[i][vGajbicaAmmount][1] = 0; VehicleInfo[i][vGajbicaAmmount][2] = 0; VehicleInfo[i][vGajbicaAmmount][3] = 0; VehicleInfo[i][vGajbicaAmmount][4] = 0;
				VehicleInfo[i][vID] = Fusion_CreateVehicle(i, ORGANIZACIJSKO_VOZILO, orga, -1, -1, VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ]+1.0, VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], 300000);
				ac_LinkVehicleToInterior(VehicleInfo[i][vID], VehicleInfo[i][vInterior]);
				SetVehicleVirtualWorld(VehicleInfo[i][vID], VehicleInfo[i][vVirtualWorld]);
				VehicleInfo[i][vFuel] = getAmountFuel(VehicleInfo[i][vID]); vCanDrive[VehicleInfo[i][vID]] = 1; Fuel[VehicleInfo[i][vID]] = getAmountFuel(VehicleInfo[i][vID]);
				UnLockCar(VehicleInfo[i][vID]); ResetVehicleStatistics(VehicleInfo[i][vID]); SetTablice(VehicleInfo[i][vID]);
				SaveVehicle(i); SendInfoMessage(playerid, "Uspesno ste kreirali organizacijsko vozilo: ID Auta: %d, OrgID: %d",idauta,orga);
				carspawntimer = 1;
				SetTimer("AntiSpawnCrash", 3000, 0);
				ac_SetVehicleParamsEx(VehicleInfo[i][vID], 0, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				if(IsVehicleBajs(VehicleInfo[i][vID])) {
					ac_SetVehicleParamsEx(VehicleInfo[i][vID], 1, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
				}

				if(Diesel(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 1;
				else if(Gasoline(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 2;
				else if(GasOil(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 3;
				break;
			}
		}
	}
	else { SPD(playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nSafe Zona\nBrza Hrana\nGovornica\nNargila\nVip port\nPromoter port", D_ODABERI, D_NAZAD);  }
}
else if(dialogid == dialog_RVCREATE) {
	if(response) {
		SendErrorMessage(playerid, "Koristite /kreirajrent za kreiranje rent pickupa.");
	}
	else { SPD(playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nSafe Zona\nBrza Hrana\nGovornica\nNargila\nVip port\nPromoter port", D_ODABERI, D_NAZAD);  }
}
else if(dialogid == dialog_ORGEDIT) {
	if(listitem ==  0) {
		SPD(playerid, dialog_ORGNAME, DSI, D_NASLOV, "Unesite id i zeljeno ime vase organizacije!", D_ODABERI, D_ODUSTANI); }
	if(listitem ==  1) {
		if(GetNearestOrganization(playerid) == -1) return SendErrorMessage(playerid, "Morate biti na pickupu organizacije.");
		SPD(playerid, dialog_ORGINT1, DSL, D_NASLOV, "Default Interior\nUnesi sam kordinate\nInterior bande\nInterior mafije\nInterior hitmana\nInterior taksista\nInterior bolnice\nInterior novinara", D_ODABERI, D_ODUSTANI); }
	if(listitem ==  2) {
		if(GetNearestOrganization(playerid) == -1) return SendErrorMessage(playerid, "Morate biti na pickupu organizacije.");
		SPD(playerid, dialog_ORGRANKS, DSL, D_NASLOV, "Rank 1\nRank 2\nRank 3\nRank 4\nRank 5\nRank 6", D_ODABERI, D_ODUSTANI); }
	if(listitem ==  3) {
		if(GetNearestOrganization(playerid) == -1) return SendErrorMessage(playerid, "Morate biti na pickupu organizacije.");
		SPD(playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI); }
	if(listitem ==  4) {
		if(GetNearestOrganization(playerid) == -1) return SendErrorMessage(playerid, "Morate biti na pickupu organizacije.");
		SPD(playerid, dialog_ORGSKINS, DSI, D_NASLOV, "Unesite id-ove muskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI); }
	if(listitem ==  5) {
		if(GetNearestOrganization(playerid) == -1) return SendErrorMessage(playerid, "Morate biti na pickupu organizacije.");
		SPD(playerid, dialog_ORGPREFIX, DSI, D_NASLOV, "Unesite skracenicu organizacije. Primer: LSPD", D_ODABERI, D_ODUSTANI); }
	if(listitem ==  6) {
		SPD(playerid, dialog_ORGDUTYP, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite duty point.", D_ODABERI, D_ODUSTANI); }
	if(listitem ==  7) {
		SPD(playerid, dialog_ORGEQUIPP, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite equipment point.", D_ODABERI, D_ODUSTANI); }
	if(listitem ==  8) {
		SPD(playerid, dialog_ORGPORTP, DSI, D_NASLOV, "Unesti ID orge, pozicije, int i virtual world gde ce se portati sa ovog mesta\n\nPrimer: 12 2323.123 756.341 12.24 2 3.", D_ODABERI, D_ODUSTANI);
	}
	if(listitem == 9) {
		if(GetNearestOrganization(playerid) == -1) return SendErrorMessage(playerid, "Morate biti na pickupu organizacije.");
		SPD(playerid, dialog_ORGZSKINS, DSI, D_NASLOV, "Unesite id-ove zenskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI);
	}
	if(listitem == 10) {
		if(GetNearestOrganization(playerid) == -1) return SendErrorMessage(playerid, "Morate biti na pickupu organizacije.");
		SPD(playerid, dialog_ORGMAXMEMB, DSI, D_NASLOV, "Unesti broj koliko ova orga moze imati maksimalno clanova(8-30)", D_ODABERI, D_ODUSTANI);
	}
	if(listitem == 11) {
		if(GetNearestOrganization(playerid) == -1) return SendErrorMessage(playerid, "Morate biti na pickupu organizacije.");
		new id = GetNearestOrganization(playerid);

		if(OI[id][oTip] == ORG_TIP_MAFIJA) {
			SPD(playerid, dialog_ORGDRUGCHOSE, DSL, "Izaberi org vrstu droge", "Kokain\nPlavi Methamphetamine", D_ODABERI, D_ODUSTANI);
		}
		else if(OI[id][oTip] == ORG_TIP_BANDA || OI[id][oTip] == ORG_TIP_SR || OI[id][oTip] == ORG_TIP_MC) {
			SPD(playerid, dialog_ORGDRUGCHOSE_2, DSL, "Izaberi org vrstu droge", "Marihuana\nMethamphetamine", D_ODABERI, D_ODUSTANI);
		}
		else return SendErrorMessage(playerid, "Ova opcija moze da se koristi samo za bande, bajkere, racere i mafije.");
	}
	if(listitem == 12) {
		if(inOrgInt[playerid] == -1) return SendErrorMessage(playerid, "Morate biti u interijeru organizacije organizacije.");
		new id = inOrgInt[playerid], Float:Pos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		OI[id][oSafePos][0] = Pos[0];
		OI[id][oSafePos][1] = Pos[1];
		OI[id][oSafePos][2] = Pos[2];

		if(IsValidDynamic3DTextLabel(OrgSafe3d[id]))
			DestroyDynamic3DTextLabel(OrgSafe3d[id]);

		if(IsValidDynamicPickup(OrgSafePickup[id]))
			ac_DestroyDynamicPickup(OrgSafePickup[id]);

		new string[128];
		format(string, sizeof(string), ""col_white"Sef za koriscenje /orgsef\n"col_server"%s", OI[id][oName]);
		OrgSafe3d[id] = CreateDynamic3DTextLabel(string, -1, OI[id][oSafePos][0], OI[id][oSafePos][1], OI[id][oSafePos][2], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[id][oVw], OI[id][oInt], -1, 20.0);
		OrgSafePickup[id] = acc_CreateDynamicPickup(1239, 1, OI[id][oSafePos][0], OI[id][oSafePos][1], OI[id][oSafePos][2], OI[id][oVw], OI[id][oInt], -1, 20.0);

		SaveOrganization(id);
		SendInfoMessage(playerid, "Napravili ste sef za orgu %s.", OI[id][oName]);
	}
	if(listitem == 13) {
		if(GetNearestOrganization(playerid) == -1) return SendErrorMessage(playerid, "Morate biti na pickupu organizacije.");
		SPD(playerid, dialog_ORGCOLOR, DSI, D_NASLOV, "Unesite boju za organizaciju(Vezano za zone). Primer: FF00FF", D_ODABERI, D_ODUSTANI);
	}
	if(listitem == 14) {
		if(GetNearestOrganization(playerid) == -1) return SendErrorMessage(playerid, "Morate biti na pickupu organizacije.");

		new id = GetNearestOrganization(playerid);

		if(!OI[id][oSuspended]) {

			OI[id][oSuspended] = true;
			SendInfoMessage(playerid, "Zakljucao si organizaciju %s. ", OI[id][oName]);
		}
		else if(OI[id][oSuspended]) {

			OI[id][oSuspended] = false;
			SendInfoMessage(playerid, "Otkljucao si organizaciju %s. ", OI[id][oName]);
		}

		SaveOrganization(id);
	}
	if(listitem == 15) {
		if(GetNearestOrganization(playerid) == -1) return SendErrorMessage(playerid, "Morate biti na pickupu organizacije.");
		SPD(playerid, dialog_ORGSPRAY, DSL, "Izaberite spray id za organizaciju", "GSF\nSeville BLVD\nLos Aztecas\nSF Rifa\nVagos\nBallas", D_ODABERI, D_ODUSTANI);
	}
}
else if(dialogid == dialog_ORGRANKS) {
	if(listitem ==  0) {
		SPD(playerid, dialog_ORGRANK1, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 1 ove organizacije.", D_ODABERI, D_ODUSTANI); }
	if(listitem ==  1) {
		SPD(playerid, dialog_ORGRANK2, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 2 ove organizacije.", D_ODABERI, D_ODUSTANI); }
	if(listitem ==  2) {
		SPD(playerid, dialog_ORGRANK3, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 3 ove organizacije.", D_ODABERI, D_ODUSTANI); }
	if(listitem ==  3) {
		SPD(playerid, dialog_ORGRANK4, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 4 ove organizacije.", D_ODABERI, D_ODUSTANI); }
	if(listitem ==  4) {
		SPD(playerid, dialog_ORGRANK5, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 5 ove organizacije.", D_ODABERI, D_ODUSTANI); }
	if(listitem ==  5) {
		SPD(playerid, dialog_ORGRANK6, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 6 ove organizacije.", D_ODABERI, D_ODUSTANI); }
}
else if(dialogid == dialog_ORGNAME && response) {
	new id, ime[ORG_IME], ImaFajl[40];
	if(sscanf(inputtext, "is[64]", id, ime)) return SPD(playerid, dialog_ORGNAME, DSI, D_NASLOV, "Unesite id i zeljeno ime vase organizacije!", D_ODABERI, D_ODUSTANI);
	format(ImaFajl, sizeof(ImaFajl), O_FILE, id);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta organizacija ne postoji.");
	if(CreatingOrg[playerid] == 0) {
		strmid(OI[id][oName], ime, 0, strlen(ime), ORG_IME);
		SaveOrganization(id); Orge3D(id);
		SendInfoMessage(playerid, "Promenili ste ime organizacije(ID: %d) u %s!", id, ime); }
}
else if(dialogid == dialog_ORGDUTYP && response) {
	new id, ImaFajl[40], Float:Pos[3];
	if(sscanf(inputtext, "i", id)) return SPD(playerid, dialog_ORGDUTYP, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite duty point.", D_ODABERI, D_ODUSTANI);
	format(ImaFajl, sizeof(ImaFajl), O_FILE, id);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta organizacija ne postoji.");
	if(OI[id][oTip] != ORG_TIP_PD) return SendErrorMessage(playerid, "Samo organizacije tipa PD/SWAT/FBI.");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	OI[id][oDutyPoint][0] = Pos[0];
	OI[id][oDutyPoint][1] = Pos[1];
	OI[id][oDutyPoint][2] = Pos[2];
	OI[id][oDutyInt] = GetPlayerInterior(playerid);
	OI[id][oDutyVW] = GetPlayerVirtualWorld(playerid);

	if(IsValidDynamic3DTextLabel(OrgDuty3D[id]))
		DestroyDynamic3DTextLabel(OrgDuty3D[id]);

	if(IsValidDynamicPickup(DutyPointPickup[id]))
		ac_DestroyDynamicPickup(DutyPointPickup[id]);

	OrgDuty3D[id] = CreateDynamic3DTextLabel(""col_white"[/undercover]\n"col_server"[/duty]", -1, OI[id][oDutyPoint][0], OI[id][oDutyPoint][1], OI[id][oDutyPoint][2], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[id][oDutyVW], OI[id][oDutyInt], -1, 20.0);
	DutyPointPickup[id] = acc_CreateDynamicPickup(1239, 1, OI[id][oDutyPoint][0], OI[id][oDutyPoint][1], OI[id][oDutyPoint][2], OI[id][oDutyVW], OI[id][oDutyInt], -1, 20.0);

	SaveOrganization(id);
	SendInfoMessage(playerid, "Kreirali ste duty point za organizaciju (ID: %d)!", id);}
else if(dialogid == dialog_ORGEQUIPP && response) {
	new id, ImaFajl[40], Float:Pos[3];
	if(sscanf(inputtext, "i", id)) return SPD(playerid, dialog_ORGEQUIPP, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite equipment point.", D_ODABERI, D_ODUSTANI);
	format(ImaFajl, sizeof(ImaFajl), O_FILE, id);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta organizacija ne postoji.");
	if(OI[id][oTip] != ORG_TIP_PD) return SendErrorMessage(playerid, "Samo organizacije tipa PD/SWAT/FBI.");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	OI[id][oEquipPoint][0] = Pos[0];
	OI[id][oEquipPoint][1] = Pos[1];
	OI[id][oEquipPoint][2] = Pos[2];
	OI[id][oEquipInt] = GetPlayerInterior(playerid);
	OI[id][oEquipVW] = GetPlayerVirtualWorld(playerid);

	if(IsValidDynamic3DTextLabel(OrgEquip3D[id]))
		DestroyDynamic3DTextLabel(OrgEquip3D[id]);

	if(IsValidDynamicPickup(EquipPointPickup[id]))
		ac_DestroyDynamicPickup(EquipPointPickup[id]);

	OrgEquip3D[id] = CreateDynamic3DTextLabel(""col_white"Da otvorite meni za opremu kucajte\n"col_server"[/equipment]", -1, OI[id][oEquipPoint][0], OI[id][oEquipPoint][1], OI[id][oEquipPoint][2], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[id][oEquipVW], OI[id][oEquipInt], -1, 20.0);
	EquipPointPickup[id] = acc_CreateDynamicPickup(1239, 1, OI[id][oEquipPoint][0], OI[id][oEquipPoint][1], OI[id][oEquipPoint][2], OI[id][oEquipVW], OI[id][oEquipInt], -1, 20.0);

	SaveOrganization(id);
	SendInfoMessage(playerid, "Kreirali ste equipment point za organizaciju (ID: %d)!", id);}
else if(dialogid == dialog_ORGPORTP && response) {
	new id, string[15], ImaFajl[40], Float:Pos[3], int1, vw1, Float:x, Float:y, Float:z;
	if(sscanf(inputtext, "ifffii", id, x, y, z, int1, vw1)) return SPD(playerid, dialog_ORGPORTP, DSI, D_NASLOV, "Unesti ID orge, pozicije, int i virtual world gde ce se portati sa ovog mesta\n\nPrimer: 12 2323.123 756.341 12.24 2 3.", D_ODABERI, D_ODUSTANI);
	format(ImaFajl, sizeof(ImaFajl), O_FILE, id);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta organizacija ne postoji.");
	if(OI[id][oMaxPort] == 10) return SendErrorMessage(playerid, "Ta organizacija vec ima 10 portova.");

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	PortOP[id][OI[id][oMaxPort]][Pos1][0] = Pos[0];
	PortOP[id][OI[id][oMaxPort]][Pos1][1] = Pos[1];
	PortOP[id][OI[id][oMaxPort]][Pos1][2] = Pos[2];
	PortOP[id][OI[id][oMaxPort]][Int][0] = GetPlayerInterior(playerid);
	PortOP[id][OI[id][oMaxPort]][VW][0] = GetPlayerVirtualWorld(playerid);

	PortOP[id][OI[id][oMaxPort]][Pos2][0] = x;
	PortOP[id][OI[id][oMaxPort]][Pos2][1] = y;
	PortOP[id][OI[id][oMaxPort]][Pos2][2] = z;
	PortOP[id][OI[id][oMaxPort]][Int][1] = int1;
	PortOP[id][OI[id][oMaxPort]][VW][1] = vw1;

	PortOP[id][OI[id][oMaxPort]][Pickup][0] = acc_CreateDynamicPickup(1239, 1, PortOP[id][OI[id][oMaxPort]][Pos1][0], PortOP[id][OI[id][oMaxPort]][Pos1][1], PortOP[id][OI[id][oMaxPort]][Pos1][2], PortOP[id][OI[id][oMaxPort]][VW][0], PortOP[id][OI[id][oMaxPort]][Int][0], -1, 20.0);
	PortOP[id][OI[id][oMaxPort]][Pickup][1] = acc_CreateDynamicPickup(1239, 1, PortOP[id][OI[id][oMaxPort]][Pos2][0], PortOP[id][OI[id][oMaxPort]][Pos2][1], PortOP[id][OI[id][oMaxPort]][Pos2][2], PortOP[id][OI[id][oMaxPort]][VW][1], PortOP[id][OI[id][oMaxPort]][Int][1], -1, 20.0);

	new pFile[40];
	format(pFile, sizeof(pFile), PORT_FILE, id);
	new INI:File = INI_Open(pFile);

	format(string, sizeof(string), "Pos1X%d", OI[id][oMaxPort]);
	INI_WriteFloat(File, string, Pos[0]);

	format(string, sizeof(string), "Pos1Y%d", OI[id][oMaxPort]);
	INI_WriteFloat(File, string, Pos[1]);

	format(string, sizeof(string), "Pos1Z%d", OI[id][oMaxPort]);
	INI_WriteFloat(File, string, Pos[2]);

	format(string, sizeof(string), "Int1%d", OI[id][oMaxPort]);
	INI_WriteInt(File, string, GetPlayerInterior(playerid));

	format(string, sizeof(string), "VW1%d", OI[id][oMaxPort]);
	INI_WriteInt(File, string, GetPlayerVirtualWorld(playerid));

	format(string, sizeof(string), "Pos2X%d", OI[id][oMaxPort]);
	INI_WriteFloat(File, string, x);

	format(string, sizeof(string), "Pos2Y%d", OI[id][oMaxPort]);
	INI_WriteFloat(File, string, y);

	format(string, sizeof(string), "Pos2Z%d", OI[id][oMaxPort]);
	INI_WriteFloat(File, string, z);

	format(string, sizeof(string), "Int2%d", OI[id][oMaxPort]);
	INI_WriteInt(File, string, int1);

	format(string, sizeof(string), "VW2%d", OI[id][oMaxPort]);
	INI_WriteInt(File, string, vw1);

	INI_Close(File);

	OI[id][oMaxPort]++;
	SaveOrganization(id);}
else if(dialogid == dialog_ORGDELETE && response) {
	new id, ImaFajl[40];
	if(!IsNumeric(inputtext)) return SendErrorMessage(playerid, "Unesi samo ID orge!");
	if(sscanf(inputtext, "i", id)) return SPD(playerid, dialog_ORGDELETE, DSI, D_NASLOV, "Unesite id organizacije koju zelite obrisati!", D_ODABERI, D_ODUSTANI);
	format(ImaFajl, sizeof(ImaFajl), O_FILE, id);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta organizacija ne postoji.");

	Delete3DTextLabel(Org3D[id]);

	if(IsValidDynamicPickup(OrgPickup[id]))
		ac_DestroyDynamicPickup(OrgPickup[id]);

	if(IsValidDynamic3DTextLabel(OrgSafe3d[id]))
		DestroyDynamic3DTextLabel(OrgSafe3d[id]);

	if(IsValidDynamicPickup(OrgSafePickup[id]))
		ac_DestroyDynamicPickup(OrgSafePickup[id]);

	if(IsValidDynamic3DTextLabel(OrgField3d[id]))
		DestroyDynamic3DTextLabel(OrgField3d[id]);

	if(IsValidDynamicPickup(OrgFieldPickup[id]))
		ac_DestroyDynamicPickup(OrgFieldPickup[id]);

	if(IsValidDynamic3DTextLabel(OrgEquip3D[id]))
		DestroyDynamic3DTextLabel(OrgEquip3D[id]);

	if(IsValidDynamicPickup(EquipPointPickup[id]))
		ac_DestroyDynamicPickup(EquipPointPickup[id]);

	if(IsValidDynamic3DTextLabel(OrgDuty3D[id]))
		DestroyDynamic3DTextLabel(OrgDuty3D[id]);

	if(IsValidDynamicPickup(DutyPointPickup[id]))
		ac_DestroyDynamicPickup(DutyPointPickup[id]);

	OI[id][oPozExtX] = 0;
	OI[id][oPozExtY] = 0;
	OI[id][oPozExtZ] = 0;

	fremove(ImaFajl);
	SendInfoMessage(playerid, "Uspesno ste izbrisali organizaciju id %d", id);}
else if(dialogid == dialog_FDELETE && response) {
	new id, ImaFajl[40];
	if(!IsNumeric(inputtext)) return SendErrorMessage(playerid, "Unesi samo ID firme!");
	if(sscanf(inputtext, "i", id)) return SPD(playerid, dialog_FDELETE, DSI, D_NASLOV, "Unesite id firme koju zelite obrisati!", D_ODABERI, D_ODUSTANI);
	format(ImaFajl, sizeof(ImaFajl), F_FILE, id);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta firma ne postoji.");

	if(IsValidDynamicPickup(FirmaPickup[id]))
		ac_DestroyDynamicPickup(FirmaPickup[id]);

	if(IsValidDynamic3DTextLabel(FirmaLabel[id]))
		DestroyDynamic3DTextLabel(FirmaLabel[id]);

	format(varstring, sizeof(varstring), F_FILE, id);
	fremove(varstring);

	SendInfoMessage(playerid, "Uspesno ste izbrisali firmu id %d", id);}
else if(dialogid == dialog_IMDELETE && response) {
	new id, ImaFajl[40];
	if(!IsNumeric(inputtext)) return SendErrorMessage(playerid, "Unesi samo ID imovine!");
	if(sscanf(inputtext, "i", id)) return SPD(playerid, dialog_IMDELETE, DSI, D_NASLOV, "Unesite id imovine koju zelite obrisati!", D_ODABERI, D_ODUSTANI);
	format(ImaFajl, sizeof(ImaFajl), IM_FILE, id);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta imovina ne postoji.");

	II[id][iExit][0] = 0.0;
		II[id][iExit][1] = 0.0;
		II[id][iExit][2] = 0.0;
	II[id][iEnter][0] = 0.0;
	II[id][iEnter][1] = 0.0;
	II[id][iEnter][2] = 0.0;

	if(IsValidDynamicPickup(ImovinaPickup[id]))
		ac_DestroyDynamicPickup(ImovinaPickup[id]);

	if(IsValidDynamic3DTextLabel(ImovinaLabel[id]))
		DestroyDynamic3DTextLabel(ImovinaLabel[id]);

	format(varstring, sizeof(varstring), IM_FILE, id);
	fremove(varstring);
	SendInfoMessage(playerid, "Uspesno ste izbrisali imovinu id %d", id);}
else if(dialogid == dialog_IMCREATE) {
	if(response) {
		new im = SledeciIDImovine(MAX_IMOVINA), vrsta, Float:PozX, Float:PozY, Float:PozZ, string[256], iimovine[40];
		if(sscanf(inputtext, "i", vrsta)) return SPD(playerid, dialog_IMCREATE, DSI, D_NASLOV, "Unesite vrstu kuce koju zelite.\nVrste: 1. Mala kuca 2. Srednja Kuca 3. Velika kuca 4. Vila!", D_ODABERI, D_NAZAD);
		if(vrsta < 1 || vrsta > 4) return SendErrorMessage(playerid, "Pogresna vrsta!");
		GetPlayerPos(playerid, PozX, PozY, PozZ);
		format(iimovine, sizeof(iimovine), IM_FILE, im);
		if(fexist(iimovine)) return SendErrorMessage(playerid, "ID te imovine vec postoji!");
			if(vrsta == MALA_KUCA) {
			II[im][iUsage] = IMOVINA_KUCA;
			II[im][iExit][0] = MALA_KUCA_X;
			II[im][iExit][1] = MALA_KUCA_Y;
			II[im][iExit][2] = MALA_KUCA_Z;
			II[im][iPrice] = MALA_KUCA_PRICE;
			II[im][iInterior] = MALA_KUCA_INT;
			II[im][iVrsta] = MALA_KUCA;
		}
		else if(vrsta == SREDNJA_KUCA) {
			II[im][iUsage] = IMOVINA_KUCA;
			II[im][iExit][0] = SREDNJA_KUCA_X;
			II[im][iExit][1] = SREDNJA_KUCA_Y;
			II[im][iExit][2] = SREDNJA_KUCA_Z;
			II[im][iPrice] = SREDNJA_KUCA_PRICE;
			II[im][iInterior] = SREDNJA_KUCA_INT;
			II[im][iVrsta] = SREDNJA_KUCA;
		}
		else if(vrsta == VELIKA_KUCA) {
			II[im][iUsage] = IMOVINA_KUCA;
			II[im][iExit][0] = VELIKA_KUCA_X;
			II[im][iExit][1] = VELIKA_KUCA_Y;
			II[im][iExit][2] = VELIKA_KUCA_Z;
			II[im][iPrice] = VELIKA_KUCA_PRICE;
			II[im][iInterior] = VELIKA_KUCA_INT;
			II[im][iVrsta] = VELIKA_KUCA;
		}
		else if(vrsta == VILA_KUCA) {
			II[im][iUsage] = IMOVINA_KUCA;
			II[im][iExit][0] = VILA_KUCA_X;
			II[im][iExit][1] = VILA_KUCA_Y;
			II[im][iExit][2] = VILA_KUCA_Z;
			II[im][iPrice] = VILA_KUCA_PRICE;
			II[im][iInterior] = VILA_KUCA_INT;
			II[im][iVrsta] = VILA_KUCA;
		}
		II[im][iOwned] = 0;
			II[im][iNeaktivnost] = 0;
		strmid(II[im][iOwner], "Drzava", 0, strlen("Drzava"), 32);
		II[im][iEnter][0] = PozX;
		II[im][iEnter][1] = PozY;
		II[im][iEnter][2] = PozZ;
		II[im][iLocked] = 0;
		II[im][iVW] = im;
		II[im][iOrmar] = 0;
		II[im][iLevel] = 5;
		strmid(II[im][iAdress], UlicaImovine(im), 0, strlen(UlicaImovine(im)), 32);
		II[im][iSkin][0] = 0;
		II[im][iSkin][1] = 0;
		II[im][iSkin][2] = 0;
		II[im][iMats] = 0;
		II[im][iSafeStatus] = 0; II[im][iSafePass] = 0;
		II[im][iOruzje][0] = 0; II[im][iOruzje][1] = 0; II[im][iOruzje][2] = 0; II[im][iOruzje][3] = 0;
		II[im][iMunicija][0] = 0; II[im][iMunicija][1] = 0; II[im][iMunicija][2] = 0; II[im][iMunicija][3] = 0;
		II[im][iDrug][0] = 0; II[im][iDrug][1] = 0; II[im][iDrug][2] = 0; II[im][iDrug][3] = 0; II[im][iDrug][4] = 0;
		II[im][iDrug][5] = 0; II[im][iDrug][6] = 0; II[im][iDrug][7] = 0; II[im][iDrug][8] = 0; II[im][iDrug][9] = 0;
		II[im][iDrugCode][0] = 0; II[im][iDrugCode][1] = 0; II[im][iDrugCode][2] = 0; II[im][iDrugCode][3] = 0; II[im][iDrugCode][4] = 0;
		II[im][iDrugCode][5] = 0; II[im][iDrugCode][6] = 0; II[im][iDrugCode][7] = 0; II[im][iDrugCode][8] = 0; II[im][iDrugCode][9] = 0;
		II[im][iDoorLevel] = 0; II[im][iAlarm] = 0; II[im][iLockLevel] = 0; II[im][iTime] = 0; II[im][iPizzaTime] = 0;
		SaveProperty(im);
		format(string, sizeof(string),"{F53D00]Kuca na Prodaju"col_white"[ID %d]{F53D00]\nVrsta: "col_white"%s{F53D00]\nCena: "col_white"%d$\n{F53D00]Potreban level: "col_white"%d\n{F53D00]Adresa: "col_white"%s\n{F53D00]Za kupovinu "col_white"/kupiimovinu", im, getTypePName(II[im][iVrsta]), II[im][iPrice], II[im][iLevel], II[im][iAdress]);
		ImovinaLabel[im] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
		ImovinaPickup[im] = acc_CreateDynamicPickup(1273, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2]);
		SendInfoMessage(playerid, "Uspesno si kreirao kucu.");
	}
	else { SPD(playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nSafe Zona\nBrza Hrana\nGovornica\nNargila\nVip port\nPromoter port", D_ODABERI, D_NAZAD);  }
}
else if(dialogid == dialog_FCREATE) {
	if(response) {
		new IDFirme = SledeciIDFirme(MAX_Business), vrsta, Float:PozX, Float:PozY, Float:PozZ, f_string[300], ffirme[40];
		GetPlayerPos(playerid, PozX, PozY, PozZ);

		if(sscanf(inputtext, "i", vrsta)) {

			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

			strcat(DialogStrgEx, ""col_white"Unesite vrstu firme koju zelite.\n");
			strcat(DialogStrgEx, "Vrste: 0. 24/7 1. Burg 2. Cluckin Bell 3. Binco 4. Firma bez ulaza 5. Zip 6. Victim 7. Suburban\n");
			strcat(DialogStrgEx, "8. Bar 9. Gym 10. Gun Shop 11. MRestoran 12. VRestoran 13. Pizza 14. Nocni klub\n");
			strcat(DialogStrgEx, "15. Disco 16. Electronic Shop 17. Trafika 18. Firma za posao 19. Rent firma 20. Pumpa\n");
			strcat(DialogStrgEx, "21. Javna Kuca 22. Kladionica 23. Oglas 24. Telekom 25. Pay 'n' Spray 26. Komunalije\n");
			strcat(DialogStrgEx, "27. Vodovod 28. Elektrana 29. Lutrija 30. Casino 31. Neon Shop 32. Roda 33. Nike 34. Ribar");

			SPD(playerid, dialog_FCREATE, DSI, D_NASLOV, DialogStrgEx, "U redu", "");

			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			return 1;
		}

		format(ffirme, sizeof(ffirme), F_FILE, IDFirme);
		if(fexist(ffirme)) return SendErrorMessage(playerid, "ID te firme vec postoji!");
		if(vrsta < 0 || vrsta > 34) return SendErrorMessage(playerid, "Pogresna vrsta!");

		BusinessInfo[IDFirme][bOwned] = 0;
		BusinessInfo[IDFirme][bNeaktivnost] = 0;
		BusinessInfo[IDFirme][bFacture] = 100;
		BusinessInfo[IDFirme][bReket] = -1;
		BusinessInfo[IDFirme][bReketTime] = 0;
		BusinessInfo[IDFirme][bEnterX] = PozX;
		BusinessInfo[IDFirme][bEnterY] = PozY;
		BusinessInfo[IDFirme][bEnterZ] = PozZ;
		BusinessInfo[IDFirme][bLocked] = 0;
		BusinessInfo[IDFirme][bLevel] = 5;
		BusinessInfo[IDFirme][bJobID] = 0;
		if(vrsta == 0) { // 24/7 Market
			BusinessInfo[IDFirme][bInInt] = 18;
			BusinessInfo[IDFirme][bExitX] = -30.9076;
			BusinessInfo[IDFirme][bExitY] = -92.0104;
			BusinessInfo[IDFirme][bExitZ] = 1003.5469;
			BusinessInfo[IDFirme][bPrice] = 500000;
			strmid(BusinessInfo[IDFirme][bName], "Prodavnica 24/7", 0, strlen("Prodavnica 24/7"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_MARKET;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}
		else if(vrsta == 1) { // Burg
			BusinessInfo[IDFirme][bInInt] = 10;
			BusinessInfo[IDFirme][bExitX] = 1168.2788;
			BusinessInfo[IDFirme][bExitY] = 474.9049;
			BusinessInfo[IDFirme][bExitZ] = -36.8283;
			BusinessInfo[IDFirme][bPrice] = 350000;
			strmid(BusinessInfo[IDFirme][bName], "Burg", 0, strlen("Burg"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_BURG;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}
		else if(vrsta == 2) { // Clucking Bell
			BusinessInfo[IDFirme][bInInt] = 9;
			BusinessInfo[IDFirme][bExitX] = 365.0046;
			BusinessInfo[IDFirme][bExitY] = -11.8387;
			BusinessInfo[IDFirme][bExitZ] = 1001.8516;
			BusinessInfo[IDFirme][bPrice] = 350000;
			strmid(BusinessInfo[IDFirme][bName], "Cluckin Bell", 0, strlen("Cluckin Bell"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_CLUCK;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}
		else if(vrsta == 3) { // Binco
			BusinessInfo[IDFirme][bInInt] = 15;
			BusinessInfo[IDFirme][bExitX] = 207.7204;
			BusinessInfo[IDFirme][bExitY] = -110.5464;
			BusinessInfo[IDFirme][bExitZ] = 1005.132812;
			BusinessInfo[IDFirme][bPrice] = 450000;
			strmid(BusinessInfo[IDFirme][bName], "Binco", 0, strlen("Binco"), 128);
			BusinessInfo[IDFirme][bType] = VRSTA_BINCO;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}
		else if(vrsta == 4) { // Bez ulaza firme
			BusinessInfo[IDFirme][bInInt] = 0;
			BusinessInfo[IDFirme][bExitX] = 0;
			BusinessInfo[IDFirme][bExitY] = 0;
			BusinessInfo[IDFirme][bExitZ] = 0;
			BusinessInfo[IDFirme][bPrice] = 152364;
			strmid(BusinessInfo[IDFirme][bName], "Promeni Ime!", 0, strlen("Promeni Ime!"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_JFIRMA;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}
		else if(vrsta == 5) { // Zip
			BusinessInfo[IDFirme][bInInt] = 18;
			BusinessInfo[IDFirme][bExitX] = 161.410293;
			BusinessInfo[IDFirme][bExitY] = -96.687202;
			BusinessInfo[IDFirme][bExitZ] = 1001.804687;
			BusinessInfo[IDFirme][bPrice] = 450000;
			strmid(BusinessInfo[IDFirme][bName], "Zip", 0, strlen("Zip"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_ZIP;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}
		else if(vrsta == 6) { // Victim
			BusinessInfo[IDFirme][bInInt] = 5;
			BusinessInfo[IDFirme][bExitX] = 227.342803;
			BusinessInfo[IDFirme][bExitY] = -8.243800;
			BusinessInfo[IDFirme][bExitZ] = 1002.210876;
			BusinessInfo[IDFirme][bPrice] = 450000;
			strmid(BusinessInfo[IDFirme][bName], "Victim", 0, strlen("Victim"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_VICTIM;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}
		else if(vrsta == 7) { // Suburban
			BusinessInfo[IDFirme][bInInt] = 1;
			BusinessInfo[IDFirme][bExitX] = 203.895294;
			BusinessInfo[IDFirme][bExitY] = -50.656700;
			BusinessInfo[IDFirme][bExitZ] = 1001.804687;
			BusinessInfo[IDFirme][bPrice] = 450000;
			strmid(BusinessInfo[IDFirme][bName], "Suburban", 0, strlen("Suburban"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_SUBURBAN;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}
		else if(vrsta == 8) { // Bar
			BusinessInfo[IDFirme][bInInt] = 11;
			BusinessInfo[IDFirme][bExitX] = 501.870788;
			BusinessInfo[IDFirme][bExitY] = -67.582000;
			BusinessInfo[IDFirme][bExitZ] = 998.757812;
			BusinessInfo[IDFirme][bPrice] = 150000;
			strmid(BusinessInfo[IDFirme][bName], "Bar", 0, strlen("Bar"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_BAR;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}
		else if(vrsta == 9) { // Gym
			BusinessInfo[IDFirme][bInInt] = 5;
			BusinessInfo[IDFirme][bExitX] = 772.359375;
			BusinessInfo[IDFirme][bExitY] = -5.515697;
			BusinessInfo[IDFirme][bExitZ] = 1000.728576;
			BusinessInfo[IDFirme][bPrice] = 250000;
			strmid(BusinessInfo[IDFirme][bName], "Gym", 0, strlen("Gym"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_GYM;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}
		else if(vrsta == 10) { // Gun Shop
			BusinessInfo[IDFirme][bLevel] = 10;
			BusinessInfo[IDFirme][bInInt] = 7;
			BusinessInfo[IDFirme][bExitX] = 1203.0422;
			BusinessInfo[IDFirme][bExitY] = -729.5431;
			BusinessInfo[IDFirme][bExitZ] = 1139.2307;
			BusinessInfo[IDFirme][bPrice] = 1000000;
			strmid(BusinessInfo[IDFirme][bName], "Gun Shop", 0, strlen("Gun Shop"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_GUNSHOP;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}
		else if(vrsta == 11) { // MRestoran
			BusinessInfo[IDFirme][bInInt] = 4;
			BusinessInfo[IDFirme][bExitX] = 460.265411;
			BusinessInfo[IDFirme][bExitY] = -88.611503;
			BusinessInfo[IDFirme][bExitZ] = 999.554687;
			BusinessInfo[IDFirme][bPrice] = 300000;
			strmid(BusinessInfo[IDFirme][bName], "Mali Restoran", 0, strlen("Mali Restoran"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_RESTORAN;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}
		else if(vrsta == 12) { // VRestoran
			BusinessInfo[IDFirme][bInInt] = 1;
			BusinessInfo[IDFirme][bExitX] = -794.850280;
			BusinessInfo[IDFirme][bExitY] = 489.279693;
			BusinessInfo[IDFirme][bExitZ] = 1376.195312;
			BusinessInfo[IDFirme][bPrice] = 350000;
			strmid(BusinessInfo[IDFirme][bName], "Veliki Restoran", 0, strlen("Veliki Restoran"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_RESTORAN;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}
		else if(vrsta == 13) { // Pizza
			BusinessInfo[IDFirme][bInInt] = 5;
			BusinessInfo[IDFirme][bExitX] = 372.2682;
			BusinessInfo[IDFirme][bExitY] = -133.5108;
			BusinessInfo[IDFirme][bExitZ] = 1001.4922;
			BusinessInfo[IDFirme][bPrice] = 750000;
			strmid(BusinessInfo[IDFirme][bName], "Well stacked pizza", 0, strlen("Well stacked pizza"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_PIZZA;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}
		else if(vrsta == 14) { // Nocni klub
			BusinessInfo[IDFirme][bInInt] = 3;
			BusinessInfo[IDFirme][bExitX] = -2636.5781;
			BusinessInfo[IDFirme][bExitY] = 1402.7936;
			BusinessInfo[IDFirme][bExitZ] = 906.4609;
			BusinessInfo[IDFirme][bPrice] = 200000;
			strmid(BusinessInfo[IDFirme][bName], "Nocni klub", 0, strlen("Nocni klub"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_NKLUB;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}
		else if(vrsta == 15) { // Diskoteka
			BusinessInfo[IDFirme][bInInt] = 17;
			BusinessInfo[IDFirme][bExitX] = 493.439300;
			BusinessInfo[IDFirme][bExitY] = -24.916900;
			BusinessInfo[IDFirme][bExitZ] = 1000.671875;
			BusinessInfo[IDFirme][bPrice] = 200000;
			strmid(BusinessInfo[IDFirme][bName], "Diskoteka", 0, strlen("Diskoteka"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_DISCO;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}
		else if(vrsta == 16) { // Electronic Shop
			BusinessInfo[IDFirme][bInInt] = 0;
			BusinessInfo[IDFirme][bExitX] = 1286.6089;
			BusinessInfo[IDFirme][bExitY] = -1652.3553;
			BusinessInfo[IDFirme][bExitZ] = 13.6949;
			BusinessInfo[IDFirme][bPrice] = 550000;
			strmid(BusinessInfo[IDFirme][bName], "Electronic Shop", 0, strlen("Electronic Shop"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_ELEKTRONIK;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}
		else if(vrsta == 17) { // Trafika
			BusinessInfo[IDFirme][bInInt] = 0;
			BusinessInfo[IDFirme][bExitX] = 0;
			BusinessInfo[IDFirme][bExitY] = 0;
			BusinessInfo[IDFirme][bExitZ] = 0;
			BusinessInfo[IDFirme][bPrice] = 200000;
			strmid(BusinessInfo[IDFirme][bName], "Trafika", 0, strlen("Trafika"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_TRAFIKA;
			BusinessInfo[IDFirme][bInVW] = IDFirme;
		}
		else if(vrsta == 18) { // Firma za posao
			BusinessInfo[IDFirme][bInInt] = 0;
			BusinessInfo[IDFirme][bExitX] = 0;
			BusinessInfo[IDFirme][bExitY] = 0;
			BusinessInfo[IDFirme][bExitZ] = 0;
			BusinessInfo[IDFirme][bPrice] = 15000000;
			BusinessInfo[IDFirme][bType] = VRSTA_POSAO;
			BusinessInfo[IDFirme][bInVW] = IDFirme;
			SPD(playerid, dialog_CREATEJOBBusiness, DSI, D_NASLOV, "Unesite id posla koji zelite za ovu firmu. ID poslova:\n\n1. Kosac Trave, 2. Farmer, 3. Bus Vozac, 4. Rudar, 5. Komunalac, 6. Prevoznik, 7. Drvoseca\n8. P. Namestaja, 9. Pepsi Dostavljac, 10. Vocar, 11. Perac Prozora, 12. Prevoznik Novca, 13. Pilot", D_ODABERI, D_ODUSTANI);
																																								
		}
		else if(vrsta == 19) { // Rent
			BusinessInfo[IDFirme][bInInt] = 0;
			BusinessInfo[IDFirme][bExitX] = 0;
			BusinessInfo[IDFirme][bExitY] = 0;
			BusinessInfo[IDFirme][bExitZ] = 0;
			BusinessInfo[IDFirme][bPrice] = 400000;
			strmid(BusinessInfo[IDFirme][bName], "Rent a vehicle", 0, strlen("Rent a vehicle"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_RENT;
			BusinessInfo[IDFirme][bInVW] = IDFirme;
		}
		else if(vrsta == 20) { // Pumpa
			BusinessInfo[IDFirme][bInInt] = 6;
			BusinessInfo[IDFirme][bExitX] = -27.3661;
			BusinessInfo[IDFirme][bExitY] = -58.0692;
			BusinessInfo[IDFirme][bExitZ] = 1003.5469;
			BusinessInfo[IDFirme][bPrice] = 750000;
			strmid(BusinessInfo[IDFirme][bName], "Pumpa", 0, strlen("Pumpa"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_PUMPA;
			BusinessInfo[IDFirme][bInVW] = IDFirme;
		}
		else if(vrsta == 21) { // Javna Kuca
			BusinessInfo[IDFirme][bInInt] = 6;
			BusinessInfo[IDFirme][bExitX] = -2385.0266;
			BusinessInfo[IDFirme][bExitY] = 999.6372;
			BusinessInfo[IDFirme][bExitZ] = -20.5350;
			BusinessInfo[IDFirme][bPrice] = 2000000;
			strmid(BusinessInfo[IDFirme][bName], "Javna Kuca", 0, strlen("Javna Kuca"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_JAVNAK;
			BusinessInfo[IDFirme][bInVW] = 0;
		}
		else if(vrsta == 22) { // Kladionica
			BusinessInfo[IDFirme][bInInt] = 0;
			BusinessInfo[IDFirme][bExitX] = 1059.9526;
			BusinessInfo[IDFirme][bExitY] = 2785.6584;
			BusinessInfo[IDFirme][bExitZ] = -21.2529;
			BusinessInfo[IDFirme][bPrice] = 2000000;
			strmid(BusinessInfo[IDFirme][bName], "Kladionica", 0, strlen("Kladionica"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_KLAD;
			BusinessInfo[IDFirme][bInVW] = 0;
		}
		else if(vrsta == 23) { // Oglas
			BusinessInfo[IDFirme][bInInt] = 0;
			BusinessInfo[IDFirme][bExitX] = 0;
			BusinessInfo[IDFirme][bExitY] = 0;
			BusinessInfo[IDFirme][bExitZ] = 0;
			BusinessInfo[IDFirme][bPrice] = 10000000;
			strmid(BusinessInfo[IDFirme][bName], "Oglas", 0, strlen("Oglas"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_OGLAS;
			BusinessInfo[IDFirme][bInVW] = 0;
		}
		else if(vrsta == 24) { // Telekom
			BusinessInfo[IDFirme][bInInt] = 0;
			BusinessInfo[IDFirme][bExitX] = 0;
			BusinessInfo[IDFirme][bExitY] = 0;
			BusinessInfo[IDFirme][bExitZ] = 0;
			BusinessInfo[IDFirme][bPrice] = 10000000;
			strmid(BusinessInfo[IDFirme][bName], "Telekom", 0, strlen("Telekom"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_TELEKOM;
			BusinessInfo[IDFirme][bInVW] = 0;
		}
		else if(vrsta == 25) { // Pay 'n' Spray
			BusinessInfo[IDFirme][bInInt] = 0;
			BusinessInfo[IDFirme][bExitX] = 0;
			BusinessInfo[IDFirme][bExitY] = 0;
			BusinessInfo[IDFirme][bExitZ] = 0;
			BusinessInfo[IDFirme][bPrice] = 10000000;
			strmid(BusinessInfo[IDFirme][bName], "Pay 'n' Spray", 0, strlen("Pay 'n' Spray"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_PAYSPRAY;
			BusinessInfo[IDFirme][bInVW] = 0;
		}
		else if(vrsta == 26) { // Komunalije
			BusinessInfo[IDFirme][bInInt] = 0;
			BusinessInfo[IDFirme][bExitX] = 0;
			BusinessInfo[IDFirme][bExitY] = 0;
			BusinessInfo[IDFirme][bExitZ] = 0;
			BusinessInfo[IDFirme][bPrice] = 10000000;
			strmid(BusinessInfo[IDFirme][bName], "Komunalije", 0, strlen("Komunalije"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_KOMUNALIJE;
			BusinessInfo[IDFirme][bInVW] = 0;
		}
		else if(vrsta == 27) { // Vodovod
			BusinessInfo[IDFirme][bInInt] = 0;
			BusinessInfo[IDFirme][bExitX] = 0;
			BusinessInfo[IDFirme][bExitY] = 0;
			BusinessInfo[IDFirme][bExitZ] = 0;
			BusinessInfo[IDFirme][bPrice] = 10000000;
			strmid(BusinessInfo[IDFirme][bName], "Vodovod", 0, strlen("Vodovod"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_VODOVOD;
			BusinessInfo[IDFirme][bInVW] = 0;
		}
		else if(vrsta == 28) { // Elektrana
			BusinessInfo[IDFirme][bInInt] = 0;
			BusinessInfo[IDFirme][bExitX] = 0;
			BusinessInfo[IDFirme][bExitY] = 0;
			BusinessInfo[IDFirme][bExitZ] = 0;
			BusinessInfo[IDFirme][bPrice] = 10000000;
			strmid(BusinessInfo[IDFirme][bName], "Elektrana", 0, strlen("Elektrana"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_ELEKTRANA;
			BusinessInfo[IDFirme][bInVW] = 0;
		}
		else if(vrsta == 29) { // Lutrija
			BusinessInfo[IDFirme][bInInt] = 0;
			BusinessInfo[IDFirme][bExitX] = 0;
			BusinessInfo[IDFirme][bExitY] = 0;
			BusinessInfo[IDFirme][bExitZ] = 0;
			BusinessInfo[IDFirme][bPrice] = 10000000;
			strmid(BusinessInfo[IDFirme][bName], "Lutrija", 0, strlen("Lutrija"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_LUTRIJA;
			BusinessInfo[IDFirme][bInVW] = 0;
		}
		else if(vrsta == 30) { // Casino t
			BusinessInfo[IDFirme][bInInt] = 3;
			BusinessInfo[IDFirme][bExitX] = 1141.8010;
			BusinessInfo[IDFirme][bExitY] = -50.7018;
			BusinessInfo[IDFirme][bExitZ] = 996.5208;
			BusinessInfo[IDFirme][bPrice] = 2000000;
			strmid(BusinessInfo[IDFirme][bName], "Casino", 0, strlen("Casino"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_CASINO;
			BusinessInfo[IDFirme][bInVW] = IDFirme;
		}
		else if(vrsta == 31) { // Neon Shop
			BusinessInfo[IDFirme][bInInt] = 0;
			BusinessInfo[IDFirme][bExitX] = 0;
			BusinessInfo[IDFirme][bExitY] = 0;
			BusinessInfo[IDFirme][bExitZ] = 0;
			BusinessInfo[IDFirme][bPrice] = 750000;
			strmid(BusinessInfo[IDFirme][bName], "Neon Shop", 0, strlen("Neon Shop"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_NEON;
			BusinessInfo[IDFirme][bInVW] = IDFirme;
		}
		else if(vrsta == 32) { // Roda
			BusinessInfo[IDFirme][bInInt] = 0;
			BusinessInfo[IDFirme][bExitX] = -1377.568725;
			BusinessInfo[IDFirme][bExitY] = 2043.693481;
			BusinessInfo[IDFirme][bExitZ] = 29.861936;
			BusinessInfo[IDFirme][bPrice] = 750000;
			strmid(BusinessInfo[IDFirme][bName], "Market Roda", 0, strlen("Market Roda"), 64);
			BusinessInfo[IDFirme][bType] = VRSTA_RODA;
			BusinessInfo[IDFirme][bInVW] = IDFirme;
		}
		else if(vrsta == 33) { // Nike Shop
			BusinessInfo[IDFirme][bInInt] = 0;
			BusinessInfo[IDFirme][bExitX] = 2813.9644;
			BusinessInfo[IDFirme][bExitY] = 1177.1628;
			BusinessInfo[IDFirme][bExitZ] = -21.8491;
			BusinessInfo[IDFirme][bPrice] = 1500000;
			strmid(BusinessInfo[IDFirme][bName], "Nike Shop", 0, strlen("Nike Shop"), 128);
			BusinessInfo[IDFirme][bType] = VRSTA_BINCO;
			BusinessInfo[IDFirme][bInVW] = IDFirme; 
		}
		else if(vrsta == 34) { // Ribar
			BusinessInfo[IDFirme][bInInt] = 0;
			BusinessInfo[IDFirme][bExitX] = 2813.9644;
			BusinessInfo[IDFirme][bExitY] = 1177.1628;
			BusinessInfo[IDFirme][bExitZ] = -21.8491;
			BusinessInfo[IDFirme][bPrice] = 1500000;
			strmid(BusinessInfo[IDFirme][bName], "Ribolovacka firma", 0, strlen("Ribolovacka firma"), 128);
			BusinessInfo[IDFirme][bType] = VRSTA_RIBAR;
			BusinessInfo[IDFirme][bInVW] = IDFirme;}

		BusinessInfo[IDFirme][bMoney] = 0;
		BusinessInfo[IDFirme][bInt] = GetPlayerInterior(playerid);
		BusinessInfo[IDFirme][bVW] = GetPlayerVirtualWorld(playerid);
		strmid(BusinessInfo[IDFirme][bOwner], "Drzava", 0, strlen("Drzava"), 32);
		SaveBusiness(IDFirme);
		format(f_string, sizeof(f_string), "{00DCF5]Firma na prodaju"col_white"[ID %d]{00DCF5]\n{00DCF5]Ime : "col_white"%s\n{00DCF5]Cena Firme : "col_white"%d$\n{00DCF5]Vrsta Firme : "col_white"%s\n{00DCF5]Potreban level: "col_white"%d\n{00DCF5]Adresa Firme: "col_white"%s\n{00DCF5]Za kupovinu upisite\n/kupifirmu", IDFirme, BusinessInfo[IDFirme][bName], BusinessInfo[IDFirme][bPrice], getBusinessType(IDFirme), BusinessInfo[IDFirme][bLevel], UliceFirme(IDFirme));
		FirmaLabel[IDFirme] = CreateDynamic3DTextLabel(f_string, 0x33CCFFAA, PozX, PozY, PozZ, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
		FirmaPickup[IDFirme] = acc_CreateDynamicPickup(1274, 1, PozX, PozY, PozZ); Business_Refresh(IDFirme);
		SendInfoMessage(playerid, "Uspesno si kreirao firmu.");
	}
	else { SPD(playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nSafe Zona\nBrza Hrana\nGovornica\nNargila\nVip port\nPromoter port", D_ODABERI, D_NAZAD);  }
}
else if(dialogid == dialog_CREATEJOBBusiness) {
	if(!response) return 1;
	if(response) {
		new jobid, IDFirme = GetNearestBusiness(playerid), stringic[64];
		if(sscanf(inputtext, "d", jobid)) return SPD(playerid, dialog_CREATEJOBBusiness, DSI, D_NASLOV, "Unesite id posla koji zelite za ovu firmu. ID poslova:\n\n1. Kosac Trave, 2. Farmer, 3. Bus Vozac, 4. Rudar, 5. Komunalac, 6. Prevoznik, 7. Drvoseca\n8. P. Namestaja, 9. Pepsi Dostavljac, 10. Vocar, 11. Perac Prozora, 12. Prevoznik Novca, 13. Pilot", D_ODABERI, D_ODUSTANI);
		if(jobid < 1 || jobid > MAX_JOBS) return SPD(playerid, dialog_CREATEJOBBusiness, DSI, D_NASLOV, "Unesite id posla koji zelite za ovu firmu. ID poslova:\n\n1. Kosac Trave, 2. Farmer, 3. Bus Vozac, 4. Rudar, 5. Komunalac, 6. Prevoznik, 7. Drvoseca\n8. P. Namestaja, 9. Pepsi Dostavljac, 10. Vocar, 11. Perac Prozora, 12. Prevoznik Novca, 13. Pilot", D_ODABERI, D_ODUSTANI);

		format(stringic, sizeof(stringic), "Firma - %s", getJobName(jobid));
		strmid(BusinessInfo[IDFirme][bName], stringic, 0, strlen(stringic), 64);
		BusinessInfo[IDFirme][bJobID] = jobid;
		SaveBusiness(IDFirme); Business_Refresh(IDFirme);
	}
}
else if(dialogid == dialog_ORGCREATE) {
	if(response) {
		new ime[ORG_IME], fileorge[40], Float:PozX, Float:PozY, Float:PozZ;
		GetPlayerPos(playerid, PozX, PozY, PozZ);
		if(sscanf(inputtext, "s[64]", ime)) return SPD(playerid, dialog_ORGCREATE, DSI, D_NASLOV, "Unesite zeljeno ime vase organizacije!", D_ODABERI, D_NAZAD);
		for(new id = 1; id < MAX_ORG; id++) {
			format(fileorge, sizeof(fileorge), O_FILE, id);
			if(!fexist(fileorge)) {
				strmid(OI[id][oName], ime, 0, strlen(ime), ORG_IME);
				OI[id][oID] = id;

				strmid(OI[id][oLider1], "Niko", 0, strlen("Niko"), ORG_LIDER);
				strmid(OI[id][oLider2], "Niko", 0, strlen("Niko"), ORG_LIDER);

				strmid(OI[id][oClan1], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan2], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan3], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan4], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan5], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan6], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan7], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan8], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan9], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan10], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan11], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan12], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan13], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan14], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan15], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan16], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan17], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan18], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan19], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan20], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan21], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan22], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan23], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan24], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan25], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan26], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan27], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan28], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan29], "Niko", 0, strlen("Niko"), ORG_CLAN);
				strmid(OI[id][oClan30], "Niko", 0, strlen("Niko"), ORG_CLAN);

				OI[id][oPozExtX] = PozX; OI[id][oPozExtY] = PozY; OI[id][oPozExtZ] = PozZ;

				OI[id][oSavez] = -1;

				CreatingOrg[playerid] = id;
				SaveOrganization(id) ;
				new string[256];
				format(string, sizeof(string),""col_white"%s\n{FF6200]Za ulaz u interijer pritisnite\n"col_white"'ENTER'", OI[id][oName]);
				Org3D[id] = Create3DTextLabel(string, -1, OI[id][oPozExtX], OI[id][oPozExtY], OI[id][oPozExtZ], 25, 0, 1);
				OrgPickup[id] = acc_CreateDynamicPickup(1314, 1, PozX, PozY, PozZ);
				SPD(playerid, dialog_ORGPREFIX, DSI, D_NASLOV, "Unesite skracenicu organizacije. Primer: LSPD", D_ODABERI, D_ODUSTANI);
				break;
			}
		}
	}
	else { SPD(playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nSafe Zona\nBrza Hrana\nGovornica\nNargila\nVip port\nPromoter port", D_ODABERI, D_NAZAD);  }
}
else if(dialogid == dialog_ORGPREFIX && response) {
	new id = GetNearestOrganization(playerid);
	new prefix[10];
	if(sscanf(inputtext, "s[10]", prefix)) return SPD(playerid, dialog_ORGPREFIX, DSI, D_NASLOV, "Unesite skracenicu organizacije. Primer: LSPD", D_ODABERI, D_ODUSTANI);
	if(CreatingOrg[playerid] == 0) {
		strmid(OI[id][oPreFix], prefix, 0, strlen(prefix), 10);
		SaveOrganization(id);
		SendInfoMessage(playerid, "Uspesno ste promenili prefix organizacije!");
	}
	else {
		strmid(OI[id][oPreFix], prefix, 0, strlen(prefix), 10);
		SaveOrganization(id);
		SPD(playerid, dialog_ORGINT1, DSL, D_NASLOV, "Default Interior\nUnesi sam kordinate\nInterior bande\nInterior mafije\nInterior hitmana\nInterior taksista\nInterior bolnice\nInterior novinara", D_ODABERI, D_ODUSTANI);
	}
}
else if(dialogid == dialog_ORGINT1 && response) {
	new id = GetNearestOrganization(playerid);
	if(listitem ==  0) {
		if(CreatingOrg[playerid] == 0) {
			OI[id][oPozIntX] = 246.7840;
			OI[id][oPozIntY] = 63.9002;
			OI[id][oPozIntZ] = 1003.6406;
			OI[id][oInt] = 6;
			OI[id][oVw] = id;
			SaveOrganization(id); SendInfoMessage(playerid, "Uspesno ste stavili default interior!"); }
		else {
			OI[id][oPozIntX] = 246.7840;
			OI[id][oPozIntY] = 63.9002;
			OI[id][oPozIntZ] = 1003.6406;
			OI[id][oInt] = 6;
			OI[id][oVw] = id;
			SaveOrganization(id);
			SPD(playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI);
		}
	}
	if(listitem ==  1) {
		SPD(playerid, dialog_ORGINT2, DSI, D_NASLOV, "Unesi id interiora i kordinate interiora\n Primer: 6 246.7840 63.9002 1003.6406", D_ODABERI, D_ODUSTANI);
	}
	if(listitem ==  2) {
		if(CreatingOrg[playerid] == 0) {
			OI[id][oPozIntX] = 2258.0603;
			OI[id][oPozIntY] = -1080.9207;
			OI[id][oPozIntZ] = 1048.9668;
			OI[id][oInt] = 6;
			OI[id][oVw] = id;
			SaveOrganization(id); SendInfoMessage(playerid, "Uspesno ste stavili banda interior!");
		}
		else {
			OI[id][oPozIntX] = 2258.0603;
			OI[id][oPozIntY] = -1080.9207;
			OI[id][oPozIntZ] = 1048.9668;
			OI[id][oInt] = 6;
			OI[id][oVw] = id;
			SaveOrganization(id);
			SPD(playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI);
		}
	 ]
	if(listitem ==  3) {
		if(CreatingOrg[playerid] == 0) {
			OI[id][oPozIntX] = 93.9262;
			OI[id][oPozIntY] = 643.1198;
			OI[id][oPozIntZ] = 1392.0549;
			OI[id][oInt] = 6;
			OI[id][oVw] = id;
			SaveOrganization(id); SendInfoMessage(playerid, "Uspesno ste stavili mafija interior!");
		}
		else {
			OI[id][oPozIntX] = 93.9262;
			OI[id][oPozIntY] = 643.1198;
			OI[id][oPozIntZ] = 1392.0549;
			OI[id][oInt] = 6;
			OI[id][oVw] = id;
			SaveOrganization(id);
			SPD(playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI);
		}
	}
	if(listitem ==  4) {
		if(CreatingOrg[playerid] == 0) {
			OI[id][oPozIntX] = 390.7695;
			OI[id][oPozIntY] = 173.8225;
			OI[id][oPozIntZ] = 1008.3828;
			OI[id][oInt] = 3;
			OI[id][oVw] = id;
			SaveOrganization(id); SendInfoMessage(playerid, "Uspesno ste stavili hitman interior!");
		}
		else {
			OI[id][oPozIntX] = 390.7695;
			OI[id][oPozIntY] = 173.8225;
			OI[id][oPozIntZ] = 1008.3828;
			OI[id][oInt] = 3;
			OI[id][oVw] = id;
			SaveOrganization(id);
			SPD(playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI);
		}
	}
	if(listitem == 5) {
		if(CreatingOrg[playerid] == 0) {
			OI[id][oPozIntX] = 2793.1833;
			OI[id][oPozIntY] = -1593.9452;
			OI[id][oPozIntZ] = -48.5485;
			OI[id][oInt] = 3;
			OI[id][oVw] = id;
			SaveOrganization(id); SendInfoMessage(playerid, "Uspesno ste stavili taksista interior!");
		}
		else {
			OI[id][oPozIntX] = 2793.1833;
			OI[id][oPozIntY] = -1593.9452;
			OI[id][oPozIntZ] = -48.5485;
			OI[id][oInt] = 3;
			OI[id][oVw] = id;
			SaveOrganization(id);
			SPD(playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI);
		}
	}
	if(listitem == 6) {
		if(CreatingOrg[playerid] == 0) {
			OI[id][oPozIntX] = -2330.1714;
			OI[id][oPozIntY] = 111.5213;
			OI[id][oPozIntZ] = -5.3942;
			OI[id][oInt] = 3;
			OI[id][oVw] = id;
			SaveOrganization(id); SendInfoMessage(playerid, "Uspesno ste stavili interior bolnice!");
		}
		else {
			OI[id][oPozIntX] = -2330.1714;
			OI[id][oPozIntY] = 111.5213;
			OI[id][oPozIntZ] = -5.3942;
			OI[id][oInt] = 3;
			OI[id][oVw] = id;
			SaveOrganization(id);
			SPD(playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI);
		}
	}
	if(listitem == 7) {
		if(CreatingOrg[playerid] == 0) {
			OI[id][oPozIntX] = 929.7870;
			OI[id][oPozIntY] = -1022.8786;
			OI[id][oPozIntZ] = -49.3566;
			OI[id][oInt] = 3;
			OI[id][oVw] = id;
			SaveOrganization(id); SendInfoMessage(playerid, "Uspesno ste stavili interior novinara!");
		}
		else {
			OI[id][oPozIntX] = 929.7870;
			OI[id][oPozIntY] = -1022.8786;
			OI[id][oPozIntZ] = -49.3566;
			OI[id][oInt] = 3;
			OI[id][oVw] = id;
			SaveOrganization(id);
			SPD(playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI);
		}
	}
}
else if(dialogid == dialog_ORGINT2 && response) {
	new id = GetNearestOrganization(playerid);
	new Float:Poz[3];
	new intid;
	if(sscanf(inputtext, "ifff", intid, Poz[0], Poz[1], Poz[2])) return SPD(playerid, dialog_ORGINT2, DSI, D_NASLOV, "Unesi id interiora i kordinate interiora\n Primer: 6 246.7840 63.9002 1003.6406", D_ODABERI, D_ODUSTANI);
	if(CreatingOrg[playerid] == 0) {
		OI[id][oPozIntX] = Poz[0];
		OI[id][oPozIntY] = Poz[1];
		OI[id][oPozIntZ] = Poz[2];
		OI[id][oInt] = intid;
		OI[id][oVw] = id;
		SaveOrganization(id); SCM(playerid, CRVENA, "Uspesno ste promenili interior!"); }
	else {
		OI[id][oPozIntX] = Poz[0];
		OI[id][oPozIntY] = Poz[1];
		OI[id][oPozIntZ] = Poz[2];
		OI[id][oInt] = intid;
		OI[id][oVw] = id;
		SaveOrganization(id);
		SPD(playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI); }
}
else if(dialogid == dialog_ORGTIP && response) {
	new id = GetNearestOrganization(playerid);
	if(CreatingOrg[playerid] == 0) {
		if(listitem ==  0) {
			OI[id][oTip] = ORG_TIP_PD;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : PD/FBI/CIA"); }
		if(listitem ==  1) {
			OI[id][oTip] = ORG_TIP_BANDA;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Banda"); }
		if(listitem ==  2) {
			OI[id][oTip] = ORG_TIP_MAFIJA;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Mafija"); }
		if(listitem ==  3) {
			OI[id][oTip] = ORG_TIP_MC;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Bajkeri"); }
		if(listitem ==  4) {
			OI[id][oTip] = ORG_TIP_SR;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Street Raceri"); }
		if(listitem ==  5) {
			OI[id][oTip] = ORG_TIP_MD;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Bolnicari"); }
		if(listitem ==  6) {
			OI[id][oTip] = ORG_TIP_CNN;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Novinari"); }
		if(listitem == 7) {
			OI[id][oTip] = ORG_TIP_HITM;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Hitmani"); }
		if(listitem == 8) {
			OI[id][oTip] = ORG_TIP_ELEK;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Elektricar");
		}
		if(listitem == 9) {
			OI[id][oTip] = ORG_TIP_TAXI;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Taksisti");
		}
	}
	else {
		if(listitem ==  0) {
			OI[id][oTip] = ORG_TIP_PD;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : PD/FBI/CIA"); }
		if(listitem ==  1) {
			OI[id][oTip] = ORG_TIP_BANDA;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Banda"); }
		if(listitem ==  2) {
			OI[id][oTip] = ORG_TIP_MAFIJA;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Mafija"); }
		if(listitem ==  3) {
			OI[id][oTip] = ORG_TIP_MC;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Bajkeri"); }
		if(listitem ==  4) {
			OI[id][oTip] = ORG_TIP_SR;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Street Raceri"); }
		if(listitem ==  5) {
			OI[id][oTip] = ORG_TIP_MD;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Bolnicari"); }
		if(listitem ==  6) {
			OI[id][oTip] = ORG_TIP_CNN;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Novinari"); }
		if(listitem ==  7) {
			OI[id][oTip] = ORG_TIP_HITM;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Hitmani"); }
		if(listitem ==  8) {
			OI[id][oTip] = ORG_TIP_ELEK;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Elektricar");
		}
		if(listitem == 9) {
			OI[id][oTip] = ORG_TIP_TAXI;
			SaveOrganization(id);
			SendInfoMessage(playerid, "Tip : Taksisti");
		}

		SPD(playerid, dialog_ORGRANK1, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 1 ove organizacije.", D_ODABERI, D_ODUSTANI);
	}
	return 1;}
else if(dialogid == dialog_ORGRANK1) {
	new id = GetNearestOrganization(playerid);
	new ime[ORG_RANK];
	if(sscanf(inputtext, "s[64]", ime)) return SPD(playerid, dialog_ORGRANK1, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 1 ove organizacije.", D_ODABERI, D_ODUSTANI);
	if(CreatingOrg[playerid] == 0) {
		strmid(OI[id][oRank1], ime, 0, strlen(ime), ORG_RANK);
		SaveOrganization(id);
		SendInfoMessage(playerid, "Postavili ste ime ranka na %s", OI[id][oRank1]); }
	else {
		strmid(OI[id][oRank1], ime, 0, strlen(ime), ORG_RANK);
		SaveOrganization(id);
		SendInfoMessage(playerid, "Postavili ste ime ranka na %s", OI[id][oRank1]);
		SPD(playerid, dialog_ORGRANK2, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 2 ove organizacije.", D_ODABERI, D_ODUSTANI); }
}
else if(dialogid == dialog_ORGRANK2) {
	new id = GetNearestOrganization(playerid);
	new ime[ORG_RANK];
	if(sscanf(inputtext, "s[64]", ime)) return SPD(playerid, dialog_ORGRANK2, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 2 ove organizacije.", D_ODABERI, D_ODUSTANI);
	if(CreatingOrg[playerid] == 0) {
		strmid(OI[id][oRank2], ime, 0, strlen(ime), ORG_RANK);
		SaveOrganization(id);
		SendInfoMessage(playerid, "Postavili ste ime ranka na %s", OI[id][oRank2]); }
	else {
		strmid(OI[id][oRank2], ime, 0, strlen(ime), ORG_RANK);
		SaveOrganization(id);
		SendInfoMessage(playerid, "Postavili ste ime ranka na %s", OI[id][oRank2]);
		SPD(playerid, dialog_ORGRANK3, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 3 ove organizacije.", D_ODABERI, D_ODUSTANI); }
}
else if(dialogid == dialog_ORGRANK3) {
	new id = GetNearestOrganization(playerid);
	new ime[ORG_RANK];
	if(sscanf(inputtext, "s[64]", ime)) return SPD(playerid, dialog_ORGRANK3, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 3 ove organizacije.", D_ODABERI, D_ODUSTANI);
	if(CreatingOrg[playerid] == 0) {
		strmid(OI[id][oRank3], ime, 0, strlen(ime), ORG_RANK);
		SaveOrganization(id);
		SendInfoMessage(playerid, "Postavili ste ime ranka na %s", OI[id][oRank3]); }
	else {
		strmid(OI[id][oRank3], ime, 0, strlen(ime), ORG_RANK);
		SaveOrganization(id);
		SendInfoMessage(playerid, "Postavili ste ime ranka na %s", OI[id][oRank3]);
		SPD(playerid, dialog_ORGRANK4, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 4 ove organizacije.", D_ODABERI, D_ODUSTANI); }
}
else if(dialogid == dialog_ORGRANK4) {
	new id = GetNearestOrganization(playerid);
	new ime[ORG_RANK];
	if(sscanf(inputtext, "s[64]", ime)) return SPD(playerid, dialog_ORGRANK4, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 4 ove organizacije.", D_ODABERI, D_ODUSTANI);
	if(CreatingOrg[playerid] == 0) {
		strmid(OI[id][oRank4], ime, 0, strlen(ime), ORG_RANK);
		SaveOrganization(id);
		SendInfoMessage(playerid, "Postavili ste ime ranka na %s", OI[id][oRank4]); }
	else {
		strmid(OI[id][oRank4], ime, 0, strlen(ime), ORG_RANK);
		SaveOrganization(id);
		SendInfoMessage(playerid, "Postavili ste ime ranka na %s", OI[id][oRank4]);
		SPD(playerid, dialog_ORGRANK5, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 5 ove organizacije.", D_ODABERI, D_ODUSTANI); }
}
else if(dialogid == dialog_ORGRANK5) {
	new id = GetNearestOrganization(playerid);
	new ime[ORG_RANK];
	if(sscanf(inputtext, "s[64]", ime)) return SPD(playerid, dialog_ORGRANK5, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 5 ove organizacije.", D_ODABERI, D_ODUSTANI);
	if(CreatingOrg[playerid] == 0) {
		strmid(OI[id][oRank5], ime, 0, strlen(ime), ORG_RANK);
		SaveOrganization(id);
		SendInfoMessage(playerid, "Postavili ste ime ranka na %s", OI[id][oRank5]); }
	else {
		strmid(OI[id][oRank5], ime, 0, strlen(ime), ORG_RANK);
		SaveOrganization(id);
		SendInfoMessage(playerid, "Postavili ste ime ranka na %s", OI[id][oRank5]);
		SPD(playerid, dialog_ORGRANK6, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 6 ove organizacije.", D_ODABERI, D_ODUSTANI); }
}
else if(dialogid == dialog_ORGRANK6) {
	new id = GetNearestOrganization(playerid);
	new ime[ORG_RANK];
	if(sscanf(inputtext, "s[64]", ime)) return SPD(playerid, dialog_ORGRANK6, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 6 ove organizacije.", D_ODABERI, D_ODUSTANI);
	strmid(OI[id][oRank6], ime, 0, strlen(ime), ORG_RANK);
	SaveOrganization(id);
	SendInfoMessage(playerid, "Postavili ste ime ranka na %s", OI[id][oRank6]);
	SPD(playerid, dialog_ORGSKINS, DSI, D_NASLOV, "Unesite id-ove muskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI);}
else if(dialogid == dialog_ORGSKINS && response) {
	new id = GetNearestOrganization(playerid);
	new rank1, rank2, rank3, rank4, rank5, rank6;
	if(sscanf(inputtext, "iiiiii", rank1, rank2, rank3, rank4, rank5, rank6)) return SPD(playerid, dialog_ORGSKINS, DSI, D_NASLOV, "Unesite id-ove muskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI);
	if(CreatingOrg[playerid] == 0) {
		OI[id][oSkin1] = rank1;
		OI[id][oSkin2] = rank2;
		OI[id][oSkin3] = rank3;
		OI[id][oSkin4] = rank4;
		OI[id][oSkin5] = rank5;
		OI[id][oSkin6] = rank6;
		SaveOrganization(id);
		SendInfoMessage(playerid, "Uspesno ste promenili id-ove muskih skinova za rankove!");
	}
	else {
		OI[id][oSkin1] = rank1;
		OI[id][oSkin2] = rank2;
		OI[id][oSkin3] = rank3;
		OI[id][oSkin4] = rank4;
		OI[id][oSkin5] = rank5;
		OI[id][oSkin6] = rank6;
		SaveOrganization(id);
		SendInfoMessage(playerid, "Uspesno ste postavili id-ove muskih skinova za rankove!");
		SPD(playerid, dialog_ORGZSKINS, DSI, D_NASLOV, "Unesite id-ove zenskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI);
	}
}
else if(dialogid == dialog_ORGZSKINS && response) {
	new id = GetNearestOrganization(playerid);
	new rank1, rank2, rank3, rank4, rank5, rank6;
	if(sscanf(inputtext, "iiiiii", rank1, rank2, rank3, rank4, rank5, rank6)) return SPD(playerid, dialog_ORGZSKINS, DSI, D_NASLOV, "Unesite id-ove zenskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI);
	if(CreatingOrg[playerid] == 0) {
		OI[id][oZSkin1] = rank1;
		OI[id][oZSkin2] = rank2;
		OI[id][oZSkin3] = rank3;
		OI[id][oZSkin4] = rank4;
		OI[id][oZSkin5] = rank5;
		OI[id][oZSkin6] = rank6;
		SaveOrganization(id);
		SendInfoMessage(playerid, "Uspesno ste promenili id-ove zenskih skinova za rankove!");
	}
	else {
		OI[id][oZSkin1] = rank1;
		OI[id][oZSkin2] = rank2;
		OI[id][oZSkin3] = rank3;
		OI[id][oZSkin4] = rank4;
		OI[id][oZSkin5] = rank5;
		OI[id][oZSkin6] = rank6;
		SPD(playerid, dialog_ORGMAXMEMB, DSI, D_NASLOV, "Unesti broj koliko ova orga moze imati maksimalno clanova(8-30)", D_ODABERI, D_ODUSTANI);
		SaveOrganization(id);
		SendInfoMessage(playerid, "Uspesno ste postavili id-ove zenskih skinova za rankove!");
	}
}
else if(dialogid == dialog_ORGMAXMEMB && response) {
	new id = GetNearestOrganization(playerid), maxmemb;
	if(sscanf(inputtext, "i", maxmemb)) return SPD(playerid, dialog_ORGMAXMEMB, DSI, D_NASLOV, "Unesti broj koliko ova orga moze imati maksimalno clanova(8-30)", D_ODABERI, D_ODUSTANI);
	if(maxmemb < 8 || maxmemb > 30) return SPD(playerid, dialog_ORGMAXMEMB, DSI, D_NASLOV, "Unesti broj koliko ova orga moze imati maksimalno clanova(8-30)", D_ODABERI, D_ODUSTANI);
	OI[id][oMaxClanova] = maxmemb;
	SaveOrganization(id);
	SendInfoMessage(playerid, "Uspesno ste postavili broj maksimalno clanova na %d!", maxmemb);
	SendInfoMessage(playerid, "Uspesno ste zavrsili kreiranje organizacija.");
	CreatingOrg[playerid] = 0;}
else if(dialogid == dialog_ORGDRUGCHOSE && response) {
	new id = GetNearestOrganization(playerid);
	switch(listitem) {
		case 0: {
			OI[id][oControlType] = CTIP_KOKAIN;
			SendInfoMessage(playerid, "Postavili da ova mafija upravlja Kokainom.");
			SendInfoMessage(playerid, "Sada trebas sacuvati poziciju poljanje gde ce moci da se sadi droga.");
			SendInfoMessage(playerid, "Odi na zeljeno mesto i kucaj /orgpolje.");
			PoljeDroge[playerid] = id;
		}
		case 1: {
			OI[id][oControlType] = CTIP_BMETH;
			SendInfoMessage(playerid, "Postavili da ova mafija upravlja Plavi Methamphetaminom.");
		}
	}
	SaveOrganization(id);}
else if(dialogid == dialog_ORGDRUGCHOSE_2 && response) {
	new id = GetNearestOrganization(playerid);
	switch(listitem) {
		case 0: {
			OI[id][oControlType] = CTIP_MARIHUANA;
			SendInfoMessage(playerid, "Postavili da ova banda upravlja Marihuanom.");
			SendInfoMessage(playerid, "Sada trebas sacuvati poziciju poljanje gde ce moci da se sadi droga.");
			SendInfoMessage(playerid, "Odi na zeljeno mesto i kucaj /orgpolje.");
			PoljeDroge[playerid] = id;
		}
		case 1: {
			OI[id][oControlType] = CTIP_METH;
			SendInfoMessage(playerid, "Postavili da ova banda upravlja Methamphetaminom.");
		}
	}
	SaveOrganization(id);}
else if(dialogid == dialog_ORGSPRAY && response) {
	new id = GetNearestOrganization(playerid);
	switch(listitem) {
		case 0: {
			OI[id][oSprayID] = 18659;
			SendInfoMessage(playerid, "Postavili da ova banda koristi spray GSF.");
		}
		case 1: {
			OI[id][oSprayID] = 18660;
			SendInfoMessage(playerid, "Postavili da ova banda koristi spray Seville BLVD.");
		}
		case 2: {
			OI[id][oSprayID] = 18661;
			SendInfoMessage(playerid, "Postavili da ova banda koristi spray Aztecas.");
		}
		case 3: {
			OI[id][oSprayID] = 18662;
			SendInfoMessage(playerid, "Postavili da ova banda koristi spray SF Rifa.");
		}
		case 4: {
			OI[id][oSprayID] = 18665;
			SendInfoMessage(playerid, "Postavili da ova banda koristi spray LS Vagos.");
		}
		case 5: {
			OI[id][oSprayID] = 18667;
			SendInfoMessage(playerid, "Postavili da ova banda koristi spray Ballas.");
		}
	}
	SaveOrganization(id);}
else if(dialogid == dialog_LIDER && response) {
	switch(listitem) {
		case 0: {
			new OrgID = PlayerInfo[playerid][xLider];

			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

			new string[128];
			format(string, sizeof(string), ""col_server"Broj ubacenih clanova: "col_white"%d/30\n", OI[OrgID][oUbacenihClanova]);
			strcat(DialogStrgEx, string);

			if(GetFactionType(playerid) == ORG_TIP_BANDA) {
				strcat(DialogStrgEx, "Za svaku teritoriju vasa banda dobija po 500 dolara svakog punog sata.\n");
			}

			if(OI[OrgID][oControlType] == CTIP_HEROIN) {
				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

				strcat(DialogStrgEx, ""col_server"Droga koju kontrolisete: "col_white"Heroin\n\n");

				strcat(DialogStrgEx, ""col_server"UPUTSTVO "col_white"za pravljenje\n");
				strcat(DialogStrgEx, ""col_white"1. "col_server"Morate kupiti opim kod dokova "col_white"'/droga buyilegal'\n");
				strcat(DialogStrgEx, ""col_white"2. "col_server"Morate da kupite kalcijum u apoteci "col_white"'/apoteka'\n");
				strcat(DialogStrgEx, ""col_white"3. "col_server"Morate da kupite amonijum hlorid u apoteci "col_white"'/apoteka'\n");
				strcat(DialogStrgEx, ""col_white"4. "col_server"Morate da napravite drogu u interieru "col_white"'/droga napravi'\n");
				strcat(DialogStrgEx, ""col_white"5. "col_server"Morate uneti dobro formulu zbog kvaliteta'\n");
				strcat(DialogStrgEx, ""col_white"6. "col_server"Heroin se pravi u velikim kolicinama'\n");
			}
			else if(OI[OrgID][oControlType] == CTIP_KOKAIN) {
				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

				strcat(DialogStrgEx, ""col_server"Droga koju kontrolisete: "col_white"Kokain\n\n");

				strcat(DialogStrgEx, ""col_server"UPUTSTVO "col_white"za pravljenje\n");
				strcat(DialogStrgEx, ""col_white"1. "col_server"Morate da posadite i oberete drogu, zatim da je osusite\n");
				strcat(DialogStrgEx, ""col_white"2. "col_server"Morate da kupite sodu bikarbonu u marketu "col_white"'/buy'\n");
				strcat(DialogStrgEx, ""col_white"3. "col_server"Morate da kupite destilovanu vodu u marketu "col_white"'/buy'\n");
				strcat(DialogStrgEx, ""col_white"4. "col_server"Morate imati osuseni kokain kod sebe\n");
				strcat(DialogStrgEx, ""col_white"5. "col_server"Morate da napravite drogu u interieru "col_white"'/droga napravi'\n");
				strcat(DialogStrgEx, ""col_white"6. "col_server"Moras uneti dobro formulu zbog kvaliteta'\n");
				strcat(DialogStrgEx, ""col_white"7. "col_server"Kokain se pravi u manjim kolicinama'\n");
			}
			else if(OI[OrgID][oControlType] == CTIP_BMETH) {
				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

				strcat(DialogStrgEx, ""col_server"Droga koju kontrolisete: "col_white"Blue Methamphetamine\n\n");

				strcat(DialogStrgEx, ""col_server"UPUTSTVO "col_white"za pravljenje\n");
				strcat(DialogStrgEx, ""col_white"1. "col_server"Morate kupiti methylamin kod dokova "col_white"'/droga buyilegal'\n");
				strcat(DialogStrgEx, ""col_white"2. "col_server"Morate da kupiti solnu kiselinu u apoteci "col_white"'/apoteka'\n");
				strcat(DialogStrgEx, ""col_white"3. "col_server"Morate da kupite crveni fosfor u apoteci "col_white"'/apoteka'\n");
				strcat(DialogStrgEx, ""col_white"4. "col_server"Morate da kupite sodu bikarbonu u marketu "col_white"'/buy'\n");
				strcat(DialogStrgEx, ""col_white"5. "col_server"Morate da napravite drogu u interieru "col_white"'/droga napravi'\n");
				strcat(DialogStrgEx, ""col_white"6. "col_server"Moras uneti dobro formulu zbog kvaliteta'\n");
				strcat(DialogStrgEx, ""col_white"7. "col_server"Blue Methamphetamine se pravi u manjim kolicinama'\n");
			}
			else if(OI[OrgID][oControlType] == CTIP_MARIHUANA) {
				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

				strcat(DialogStrgEx, ""col_server"Droga koju kontrolisete: "col_white"Marihuana\n\n");

				strcat(DialogStrgEx, ""col_server"UPUTSTVO "col_white"za pravljenje\n");
				strcat(DialogStrgEx, ""col_white"1. "col_server"Morate kupiti seme "col_white"'/droga buyseeds'\n");
				strcat(DialogStrgEx, ""col_white"2. "col_server"Morate da posadite seme "col_white"'/droga posadi'\n");
				strcat(DialogStrgEx, ""col_white"3. "col_server"Morate da oberete stabiljku "col_white"'/droga oberi'\n");
				strcat(DialogStrgEx, ""col_white"4. "col_server"Morate da osusite stabiljku "col_white"'/droga osusi'\n");
			}
			else if(OI[OrgID][oControlType] == CTIP_CRACK) {
				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

				strcat(DialogStrgEx, ""col_server"Droga koju kontrolisete: "col_white"Crack\n\n");

				strcat(DialogStrgEx, ""col_server"UPUTSTVO "col_white"za pravljenje\n");
				strcat(DialogStrgEx, ""col_white"1. "col_server"Morate da kupite sodu bikarbonu u marketu "col_white"'/buy'\n");
				strcat(DialogStrgEx, ""col_white"2. "col_server"Morate da kupite destilovanu vodu u marketu "col_white"'/buy'\n");
				strcat(DialogStrgEx, ""col_white"3. "col_server"Morate imati gotov kokain kod sebe\n");
				strcat(DialogStrgEx, ""col_white"4. "col_server"Morate da napravite drogu u interieru "col_white"'/droga napravi'\n");
				strcat(DialogStrgEx, ""col_white"5. "col_server"Moras uneti dobro formulu zbog kvaliteta'\n");
				strcat(DialogStrgEx, ""col_white"6. "col_server"Crack se pravi u manjim kolicinama'\n");
			}
			else if(OI[OrgID][oControlType] == CTIP_METH) {
				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

				strcat(DialogStrgEx, ""col_server"Droga koju kontrolisete: "col_white"Methamphetamine\n\n");

				strcat(DialogStrgEx, ""col_server"UPUTSTVO "col_white"za pravljenje\n");
				strcat(DialogStrgEx, ""col_white"1. "col_server"Morate da kupiti pseudo u apoteci "col_white"'/apoteka'\n");
				strcat(DialogStrgEx, ""col_white"2. "col_server"Morate da kupiti solnu kiselinu u apoteci "col_white"'/apoteka'\n");
				strcat(DialogStrgEx, ""col_white"3. "col_server"Morate da kupite crveni fosfor u apoteci "col_white"'/apoteka'\n");
				strcat(DialogStrgEx, ""col_white"4. "col_server"Morate da kupite sodu bikarbonu u marketu "col_white"'/buy'\n");
				strcat(DialogStrgEx, ""col_white"5. "col_server"Morate da napravite drogu u interieru "col_white"'/droga napravi'\n");
				strcat(DialogStrgEx, ""col_white"6. "col_server"Moras uneti dobro formulu zbog kvaliteta'\n");
				strcat(DialogStrgEx, ""col_white"7. "col_server"Methamphetamine se pravi u manjim kolicinama'\n");
			}

			SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
		}
		case 1: {
			SPD(playerid, dialog_UBACIUORG, DSI, D_NASLOV, "Unesite id igraca kojeg zelite pozvati u vasu organizaciju", D_ODABERI, D_ODUSTANI); }
		case 2: {
			SPD(playerid, dialog_IZBACIIZORG, DSI, D_NASLOV, "Unesite id igraca kojeg zelite izbaciti iz vase organizacije", D_ODABERI, D_ODUSTANI); }
		case 3: {
			SPD(playerid, dialog_OFFIZBACIIZORG, DSI, D_NASLOV, "Unesite ime i prezime(Ime_Prezime) igraca kojeg zelite izbaciti iz vase organizacije", D_ODABERI, D_ODUSTANI); }
		case 4: {
			SPD(playerid, dialog_DODELIRANK, DSI, D_NASLOV, "Unesite id igraca i broj ranka koji zelite da date igracu", D_ODABERI, D_ODUSTANI); }
		case 5: {
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			new OrgID = PlayerInfo[playerid][xLider];
			format(DialogStrgEx, sizeof(DialogStrgEx), "Lider 1: %s\nLider 2: %s\nClan 1: %s\nClan 2: %s\nClan 3: %s\nClan 4: %s\nClan 5: %s\nClan 6: %s\nClan 7: %s\nClan 8: %s\nClan 9: %s\nClan 10: %s\nClan 11: %s\nClan 12: %s\nClan 13: %s\nClan 14: %s\nClan 15: %s\nClan 16: %s\nClan 17: %s\nClan 18: %s\nClan 19: %s\nClan 20: %s\nClan 21: %s\nClan 22: %s\nClan 23: %s\nClan 24: %s\nClan 25: %s\nClan 26: %s\nClan 27: %s\nClan 28: %s\nClan 29: %s\nClan 30: %s" ,
				OI[OrgID][oLider1],
				OI[OrgID][oLider2],
				OI[OrgID][oClan1],
				OI[OrgID][oClan2],
				OI[OrgID][oClan3],
				OI[OrgID][oClan4],
				OI[OrgID][oClan5],
				OI[OrgID][oClan6],
				OI[OrgID][oClan7],
				OI[OrgID][oClan8],
				OI[OrgID][oClan9],
				OI[OrgID][oClan10],
				OI[OrgID][oClan11],
				OI[OrgID][oClan12],
				OI[OrgID][oClan13],
				OI[OrgID][oClan14],
				OI[OrgID][oClan15],
				OI[OrgID][oClan16],
				OI[OrgID][oClan17],
				OI[OrgID][oClan18],
				OI[OrgID][oClan19],
				OI[OrgID][oClan20],
				OI[OrgID][oClan21],
				OI[OrgID][oClan22],
				OI[OrgID][oClan23],
				OI[OrgID][oClan24],
				OI[OrgID][oClan25],
				OI[OrgID][oClan26],
				OI[OrgID][oClan27],
				OI[OrgID][oClan28],
				OI[OrgID][oClan29],
				OI[OrgID][oClan30]);
			SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
		}
		case 6: {
			if(GetFactionType(playerid) == ORG_TIP_PD && GetFactionType(playerid) == ORG_TIP_MD && GetFactionType(playerid) == ORG_TIP_CNN && GetFactionType(playerid) == ORG_TIP_HITM && GetFactionType(playerid) == ORG_TIP_ELEK && GetFactionType(playerid) == ORG_TIP_TAXI) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu sekciju.");
			SPD(playerid, dialog_WAR, DSL, D_NASLOV, "Zakazi War\nPozovi u War\nIzbaci iz Wara", D_ODABERI, D_ODUSTANI);
		}
		case 7: {
			SPD(playerid, dialog_LIDER_2, DSL, D_NASLOV, "Lokacija mesta za sadjenje\nLokacija nabavke opiuma\nLokacija nabavke metilamina\nLokacija nabavke semena", D_ODABERI, D_ODUSTANI);
		}
	}
}
else if(dialogid == dialog_LIDER_2 && response) {
	new OrgID = PlayerInfo[playerid][xLider];
	switch(listitem) {
		case 0: {
			if(OI[OrgID][oControlType] == CTIP_MARIHUANA || OI[OrgID][oControlType] == CTIP_KOKAIN) {

				Fusion_SetPlayerCheckpoint(playerid, OI[OrgID][oDrugField][0], OI[OrgID][oDrugField][1], OI[OrgID][oDrugField][2], 3.0);
				CheckpointStatus[playerid] = 15;
				SCM(playerid, ZUTA, "Mesto za sadjenje droge, lokacija se nalazi na mapi.");
			}
			else return SendErrorMessage(playerid, "Tvoja organizacija nema ovu opciju.");
		}
		case 1: {
			if(OI[OrgID][oControlType] == CTIP_HEROIN) {

				Fusion_SetPlayerCheckpoint(playerid, 2834.8999, -2360.7681, 26.8931, 3.0);
				CheckpointStatus[playerid] = 15;
				SCM(playerid, ZUTA, "Mesto za nabavku opiuma, lokacija se nalazi na mapi.");
			}
			else return SendErrorMessage(playerid, "Tvoja organizacija nema ovu opciju.");
		}
		case 2: {
			if(OI[OrgID][oControlType] == CTIP_BMETH) {

				Fusion_SetPlayerCheckpoint(playerid, 2834.8999, -2360.7681, 26.8931, 3.0);
				CheckpointStatus[playerid] = 15;
				SCM(playerid, ZUTA, "Mesto za nabavku metilamina, lokacija se nalazi na mapi.");
			}
			else return SendErrorMessage(playerid, "Tvoja organizacija nema ovu opciju.");
		}
		case 3: {
			if(OI[OrgID][oControlType] == CTIP_MARIHUANA || OI[OrgID][oControlType] == CTIP_KOKAIN) {

				Fusion_SetPlayerCheckpoint(playerid, 870.3927, -24.9189, 63.9863, 3.0);
				CheckpointStatus[playerid] = 15;
				SCM(playerid, ZUTA, "Mesto za nabavku metilamina, lokacija se nalazi na mapi.");
			}
			else return SendErrorMessage(playerid, "Tvoja organizacija nema ovu opciju.");
		}
	}
}
else if(dialogid == dialog_UBACIUORG && response) {
	new igrac, Float:Pos[3];
	if(sscanf(inputtext, "u", igrac)) return SendErrorMessage(playerid, "Nepravilan ID!");
	if(igrac == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Igrac nije online ili si ukucao pogresan ID!");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	if(!IsPlayerInRangeOfPoint(igrac, 10.0, Pos[0], Pos[1], Pos[2])) return SendErrorMessage(playerid, "Igrac nije blizu vas.");
	if(PlayerInfo[igrac][xClan] != 0) return SendErrorMessage(playerid, "Igrac je vec clan organizacije!");
	if(PlayerInfo[igrac][xLider] != 0) return SendErrorMessage(playerid, "Igrac je vec clan organizacije!");
	if(PlayerInfo[igrac][xLevel] < 3) return SendErrorMessage(playerid, "Za ulaz u organizacuju potreban je level 3.");
	new OrgID = PlayerInfo[playerid][xLider];
	if(OI[OrgID][oUbacenihClanova] >= OI[OrgID][oMaxClanova]) return SendErrorMessage(playerid, "Vec imas ubacenih maksimalnih %d clanova.", OI[OrgID][oMaxClanova]);
	new ImaFajl[40];
	format(ImaFajl, sizeof(ImaFajl), O_FILE, OrgID);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Tvoja organizacija ne postoji u bazi.");

	PonudioIgrac[igrac] = playerid;

	new string[512];
	format(string, sizeof(string), "Lider %s vas je pozvao u svoju orgu %s.\nDa prihvatis pretisni na 'Prihvati'.\nDa odustanes pritisni na 'Odustani'", ImeIgraca(playerid), getOrgName(OrgID));

	SPD(igrac, dialog_UBACIUORG_2, DSMSG, D_NASLOV, string, D_ODABERI, D_ODUSTANI);}
else if(dialogid == dialog_UBACIUORG_2) {
	if(response) {
		new igrac = PonudioIgrac[playerid];

		new OrgID = PlayerInfo[igrac][xLider];
		new ImaFajl[40];
		format(ImaFajl, sizeof(ImaFajl), O_FILE, OrgID);
		if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ova organizacija ne postoji u bazi.");

		if(!strcmp(OI[OrgID][oClan1], "Niko", true)) { strmid(OI[OrgID][oClan1], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan2], "Niko", true)) { strmid(OI[OrgID][oClan2], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan3], "Niko", true)) { strmid(OI[OrgID][oClan3], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan4], "Niko", true)) { strmid(OI[OrgID][oClan4], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan5], "Niko", true)) { strmid(OI[OrgID][oClan5], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan6], "Niko", true)) { strmid(OI[OrgID][oClan6], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan7], "Niko", true)) { strmid(OI[OrgID][oClan7], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan8], "Niko", true)) { strmid(OI[OrgID][oClan8], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan9], "Niko", true)) { strmid(OI[OrgID][oClan9], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan10], "Niko", true)) { strmid(OI[OrgID][oClan10], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan11], "Niko", true)) { strmid(OI[OrgID][oClan11], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan12], "Niko", true)) { strmid(OI[OrgID][oClan12], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan13], "Niko", true)) { strmid(OI[OrgID][oClan13], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan14], "Niko", true)) { strmid(OI[OrgID][oClan14], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan15], "Niko", true)) { strmid(OI[OrgID][oClan15], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan16], "Niko", true)) { strmid(OI[OrgID][oClan16], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan17], "Niko", true)) { strmid(OI[OrgID][oClan17], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan18], "Niko", true)) { strmid(OI[OrgID][oClan18], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan19], "Niko", true)) { strmid(OI[OrgID][oClan19], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan20], "Niko", true)) { strmid(OI[OrgID][oClan20], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan21], "Niko", true)) { strmid(OI[OrgID][oClan21], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan22], "Niko", true)) { strmid(OI[OrgID][oClan22], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan23], "Niko", true)) { strmid(OI[OrgID][oClan23], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan24], "Niko", true)) { strmid(OI[OrgID][oClan24], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan25], "Niko", true)) { strmid(OI[OrgID][oClan25], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan26], "Niko", true)) { strmid(OI[OrgID][oClan26], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan27], "Niko", true)) { strmid(OI[OrgID][oClan27], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan28], "Niko", true)) { strmid(OI[OrgID][oClan28], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan29], "Niko", true)) { strmid(OI[OrgID][oClan29], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan30], "Niko", true)) { strmid(OI[OrgID][oClan30], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), ORG_CLAN); }
		else return SendErrorMessage(playerid, "Ova organizacija ima maksimalni broj clanova!");

		OI[OrgID][oUbacenihClanova]++;
		PlayerInfo[playerid][xClan] = OrgID;
		PlayerInfo[playerid][xRank] = 1;
		PlayerInfo[playerid][xSpawn] = SPAWN_BAZA;

		if(PlayerInfo[playerid][xPol] == 1) {
			PlayerInfo[playerid][xSkin] = OI[OrgID][oSkin1]; c_SetPlayerSkin(playerid, OI[OrgID][oSkin1]);
		}
		else if(PlayerInfo[igrac][xPol] == 2) {
			PlayerInfo[playerid][xSkin] = OI[OrgID][oZSkin1]; c_SetPlayerSkin(playerid, OI[OrgID][oZSkin1]);
		}

		PlayerInfo[playerid][xOrgUgovor] = 0; SavePlayer(playerid); SaveOrganization(OrgID);
		SendInfoMessage(playerid, "Cestitamo, usli ste u organizaciju %s.", getOrgName(OrgID));
		SendInfoMessage(playerid, "Predlazemo vam da odete relog, da bi videli teritorije.");
		SendInfoMessage(igrac, "Igrac %s je prihvatio poziv u vasu organizaciju", ImeIgraca(playerid));

		PonudioIgrac[playerid] = -1;
	}
	else if(!response) {
		new igrac = PonudioIgrac[igrac];

		if(igrac != -1) {
			SendInfoMessage(igrac, "Igrac %s je odbio poziv u vasu organizaciju", ImeIgraca(playerid));
		}

		SendInfoMessage(playerid, "Odbili ste poziv za ulazak u organizaciju.");
		PonudioIgrac[playerid] = -1;
	}
}
else if(dialogid == dialog_OFFIZBACIIZORG && response) {
	new imeigraca[24], ifile[64], OrgID = PlayerInfo[playerid][xLider];
	if(sscanf(inputtext, "s[24]", imeigraca)) return SendErrorMessage(playerid, "Nepravilno uneto ime i prezime(Ime_Prezime)!");
	format(ifile, 64, I_FILE, imeigraca);
	if(!fexist(ifile)) return SendErrorMessage(playerid, "Taj igrac ne postoji u bazi podataka!");
	if(IsPlayerConnected(GetPlayerIdFromName(imeigraca))) {
		SendErrorMessage(playerid, "Taj igrac je online tako da izbaci ga online.");
		return 1;
	}

	if(strcmp(imeigraca, OI[OrgID][oClan1], true) == 0) { strmid(OI[OrgID][oClan1], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan2], true) == 0) { strmid(OI[OrgID][oClan2], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan3], true) == 0) { strmid(OI[OrgID][oClan3], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan4], true) == 0) { strmid(OI[OrgID][oClan4], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan5], true) == 0) { strmid(OI[OrgID][oClan5], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan6], true) == 0) { strmid(OI[OrgID][oClan6], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan7], true) == 0) { strmid(OI[OrgID][oClan7], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan8], true) == 0) { strmid(OI[OrgID][oClan8], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan9], true) == 0) { strmid(OI[OrgID][oClan9], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan10], true) == 0) { strmid(OI[OrgID][oClan10], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan11], true) == 0) { strmid(OI[OrgID][oClan11], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan12], true) == 0) { strmid(OI[OrgID][oClan12], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan13], true) == 0) { strmid(OI[OrgID][oClan13], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan14], true) == 0) { strmid(OI[OrgID][oClan14], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan15], true) == 0) { strmid(OI[OrgID][oClan15], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan16], true) == 0) { strmid(OI[OrgID][oClan16], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan17], true) == 0) { strmid(OI[OrgID][oClan17], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan18], true) == 0) { strmid(OI[OrgID][oClan18], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan19], true) == 0) { strmid(OI[OrgID][oClan19], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan20], true) == 0) { strmid(OI[OrgID][oClan20], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan21], true) == 0) { strmid(OI[OrgID][oClan21], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan22], true) == 0) { strmid(OI[OrgID][oClan22], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan23], true) == 0) { strmid(OI[OrgID][oClan23], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan24], true) == 0) { strmid(OI[OrgID][oClan24], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan25], true) == 0) { strmid(OI[OrgID][oClan25], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan26], true) == 0) { strmid(OI[OrgID][oClan26], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan27], true) == 0) { strmid(OI[OrgID][oClan27], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan28], true) == 0) { strmid(OI[OrgID][oClan28], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan29], true) == 0) { strmid(OI[OrgID][oClan29], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan30], true) == 0) { strmid(OI[OrgID][oClan30], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else return SendErrorMessage(playerid, "Taj clan nije u tvojoj orgi.");

	OI[OrgID][oUbacenihClanova]--;
	new INI:File = INI_Open(ifile);
	INI_SetTag(File, "Informacije");
	INI_WriteInt(File, "Clan", 0);
	INI_WriteInt(File, "Rank", 0);
	INI_WriteInt(File, "Skin", MaleSkinIDs[0][0]);
	INI_WriteInt(File, "Spawn", 0);
	INI_Close(File);
	SaveOrganization(OrgID);
	SendClientMessageEx(playerid, CRVENA, "Izbacili ste igraca %s iz vase organizacije", imeigraca);}
else if(dialogid == dialog_IZBACIIZORG && response) {
	new igrac, OrgID = PlayerInfo[playerid][xLider];
	if(sscanf(inputtext, "u", igrac)) return SendErrorMessage(playerid, "Nepravilan ID!");
	if(igrac == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Igrac nije online ili si ukucao pogresan ID!");
	if(igrac == playerid) return SendErrorMessage(playerid, "NE mozes sam sebe.");
	if(PlayerInfo[igrac][xClan] != OrgID) return SendErrorMessage(playerid, "Igrac nije clan vase organizacije!");
	if(PlayerInfo[igrac][xLider] > 0) return SendErrorMessage(playerid, "Ne mozes to lideru.");
	new ImaFajl[40], name[MAX_PLAYER_NAME];
	GetPlayerName(igrac, name, sizeof(name));
	format(ImaFajl, sizeof(ImaFajl), O_FILE, OrgID);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Tvoja organizacija ne postoji u bazi.");

	if(strcmp(name, OI[OrgID][oClan1], true) == 0) { strmid(OI[OrgID][oClan1], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan2], true) == 0) { strmid(OI[OrgID][oClan2], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan3], true) == 0) { strmid(OI[OrgID][oClan3], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan4], true) == 0) { strmid(OI[OrgID][oClan4], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan5], true) == 0) { strmid(OI[OrgID][oClan5], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan6], true) == 0) { strmid(OI[OrgID][oClan6], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan7], true) == 0) { strmid(OI[OrgID][oClan7], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan8], true) == 0) { strmid(OI[OrgID][oClan8], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan9], true) == 0) { strmid(OI[OrgID][oClan9], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan10], true) == 0) { strmid(OI[OrgID][oClan10], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan11], true) == 0) { strmid(OI[OrgID][oClan11], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan12], true) == 0) { strmid(OI[OrgID][oClan12], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan13], true) == 0) { strmid(OI[OrgID][oClan13], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan18], true) == 0) { strmid(OI[OrgID][oClan18], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan19], true) == 0) { strmid(OI[OrgID][oClan19], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan20], true) == 0) { strmid(OI[OrgID][oClan20], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan21], true) == 0) { strmid(OI[OrgID][oClan21], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan22], true) == 0) { strmid(OI[OrgID][oClan22], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan23], true) == 0) { strmid(OI[OrgID][oClan23], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan24], true) == 0) { strmid(OI[OrgID][oClan24], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan25], true) == 0) { strmid(OI[OrgID][oClan25], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan26], true) == 0) { strmid(OI[OrgID][oClan26], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan27], true) == 0) { strmid(OI[OrgID][oClan27], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan28], true) == 0) { strmid(OI[OrgID][oClan28], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan29], true) == 0) { strmid(OI[OrgID][oClan29], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	if(strcmp(name, OI[OrgID][oClan30], true) == 0) { strmid(OI[OrgID][oClan30], "Niko", 0, strlen("Niko"), ORG_CLAN); }


	ResetAllWeapons(igrac);
	OI[OrgID][oUbacenihClanova]--;
	PlayerInfo[igrac][xClan] = 0; PlayerInfo[igrac][xRank] = 0; PlayerInfo[igrac][xSpawn] = SetRandomSpawn(igrac);
	PlayerInfo[igrac][xOrgUgovor] = 0; SavePlayer(igrac); PlayerInfo[igrac][xSkin] = SetSexSkin(igrac); c_SetPlayerSkin(igrac, SetSexSkin(igrac));
	if(IsPlayerInAnyVehicle(igrac)){
		new Float:vehPos[3];
		getPosBehindVehicle(GetPlayerVehicleID(igrac), vehPos[0], vehPos[1], vehPos[2], 0.0);
		ac_SetPlayerPos(igrac, vehPos[0], vehPos[1], vehPos[2]);
	}
	SendClientMessageEx(igrac, CRVENA, "Izbacen si iz organizacije %s", getOrgName(OrgID)); SaveOrganization(OrgID);
	SendClientMessageEx(playerid, CRVENA, "Izbacili ste igraca %s iz vase organizacije", ImeIgraca(igrac));}
else if(dialogid == dialog_DODELIRANK && response) {
	new clan, OrgID = PlayerInfo[playerid][xLider], rank;
	if(sscanf(inputtext, "ui", clan, rank)) return SPD(playerid, dialog_DODELIRANK, DSI, D_NASLOV, "Unesite id igraca i broj ranka koji zelite da date igracu", D_ODABERI, D_ODUSTANI);
	if(clan == IPI) return SendErrorMessage(playerid, "Igrac nije online ili si ukucao pogresan ID!");
	if(clan == playerid) return SendErrorMessage(playerid, "Ne mozes sam sebi.");
	if(PlayerInfo[clan][xClan] != OrgID) return SendErrorMessage(playerid, "Igrac nije clan vase organizacije!");
	if(PlayerInfo[clan][xLider] == OrgID) return SendErrorMessage(playerid, "Ne mozes drugom lideru skinuti rank.");
	if(PlayerInfo[clan][xLider] > 0) return SendErrorMessage(playerid, "Ne mozes to lideru.");
	new ImaFajl[40];
	format(ImaFajl, sizeof(ImaFajl), O_FILE, OrgID);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Tvoja organizacija ne postoji u bazi.");
	if(rank < 1 || rank > 6) return SendErrorMessage(playerid, "Ne mozes veci rank od 6 a manji od 1!");

	if(PlayerInfo[clan][xPol] == 1) {
		if(rank == 1) { PlayerInfo[clan][xSkin] = OI[OrgID][oSkin1]; c_SetPlayerSkin(clan, OI[OrgID][oSkin1]); }
		else if(rank == 2) { PlayerInfo[clan][xSkin] = OI[OrgID][oSkin2]; c_SetPlayerSkin(clan, OI[OrgID][oSkin2]); }
		else if(rank == 3) { PlayerInfo[clan][xSkin] = OI[OrgID][oSkin3]; c_SetPlayerSkin(clan, OI[OrgID][oSkin3]); }
		else if(rank == 4) { PlayerInfo[clan][xSkin] = OI[OrgID][oSkin4]; c_SetPlayerSkin(clan, OI[OrgID][oSkin4]); }
		else if(rank == 5) { PlayerInfo[clan][xSkin] = OI[OrgID][oSkin5]; c_SetPlayerSkin(clan, OI[OrgID][oSkin5]); }
		else if(rank == 6) { PlayerInfo[clan][xSkin] = OI[OrgID][oSkin6]; c_SetPlayerSkin(clan, OI[OrgID][oSkin6]); }
	}
	else if(PlayerInfo[clan][xPol] == 2) {
		if(rank == 1) { PlayerInfo[clan][xSkin] = OI[OrgID][oZSkin1]; c_SetPlayerSkin(clan, OI[OrgID][oZSkin1]); }
		else if(rank == 2) { PlayerInfo[clan][xSkin] = OI[OrgID][oZSkin2]; c_SetPlayerSkin(clan, OI[OrgID][oZSkin2]); }
		else if(rank == 3) { PlayerInfo[clan][xSkin] = OI[OrgID][oZSkin3]; c_SetPlayerSkin(clan, OI[OrgID][oZSkin3]); }
		else if(rank == 4) { PlayerInfo[clan][xSkin] = OI[OrgID][oZSkin4]; c_SetPlayerSkin(clan, OI[OrgID][oZSkin4]); }
		else if(rank == 5) { PlayerInfo[clan][xSkin] = OI[OrgID][oZSkin5]; c_SetPlayerSkin(clan, OI[OrgID][oZSkin5]); }
		else if(rank == 6) { PlayerInfo[clan][xSkin] = OI[OrgID][oZSkin6]; c_SetPlayerSkin(clan, OI[OrgID][oZSkin6]); }
	}

	PlayerInfo[clan][xRank] = rank; SavePlayer(clan);
	SendInfoMessage(clan, "Lider te unapredio na rank %d!", rank);
	SendInfoMessage(playerid, "Unapredili ste igraca %s na rank %d!", ImeIgraca(clan), rank);}
else if(dialogid == dialog_FIRMA && response) {
	if(listitem == 0) {
		new string[256];
		new id = PlayerInfo[playerid][xFirmaID];
		format(string, sizeof(string), ""col_crvena"Ime Firme : "col_white"%s\n\n"col_crvena"Novac : "col_white"%d$\n\n"col_crvena"Fakture : "col_white"%d", BusinessInfo[id][bName], BusinessInfo[id][bMoney], BusinessInfo[id][bFacture]);
		SPD(playerid, dialog_FINFO, DSMSG, D_NASLOV, string, D_ODABERI, D_ODUSTANI); }
	//if(listitem == 1) {
		//SPD(playerid, dialog_FCNAME, DSI, D_NASLOV, "Molimo vas da unesete novo ime koje zelite.", D_ODABERI, D_ODUSTANI); }
	if(listitem == 1) {
		SPD(playerid, dialog_FLOCK, DSMSG, D_NASLOV, "Molimo vas da odaberete da li zelite da ?", "Otkljucate", "Zakljucate"); }
	if(listitem == 2) {
		if(GetNearestBusiness(playerid) != PlayerInfo[playerid][xFirmaID]) return SendErrorMessage(playerid, "Niste blizu ulaza firme!");
			SPD(playerid, dialog_FPMONEY, DSI, D_NASLOV, "Molimo vas da unesete koliko zelite novca da podignete..", D_ODABERI, D_ODUSTANI); }
	if(listitem == 3) {
			if(GetNearestBusiness(playerid) != PlayerInfo[playerid][xFirmaID]) return SendErrorMessage(playerid, "Niste blizu ulaza firme!");
		SPD(playerid, dialog_FOMONEY, DSI, D_NASLOV, "Molimo vas da unesete koliko zelite novca da ostavite...", D_ODABERI, D_ODUSTANI); }
	if(listitem == 4) {

			if(PlayerInfo[playerid][xFirmaID] == -1) return SendErrorMessage(playerid, "Ne posedujes firmu!");
		if(GetNearestBusiness(playerid) != PlayerInfo[playerid][xFirmaID]) return SendErrorMessage(playerid, "Niste blizu ulaza firme!");

		SPD(playerid, dialog_FIRMASELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vasu firmu drzavi?", "Da", "Ne");
	}
	if(listitem == 5) {

		if(GetNearestBusiness(playerid) != PlayerInfo[playerid][xFirmaID]) return SendErrorMessage(playerid, "Niste blizu ulaza firme!");

		SPD(playerid, dialog_FIRMASELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu firme", "Ponudi", D_ODUSTANI);
	}
	if(listitem == 6) {

		new id = PlayerInfo[playerid][xFirmaID];

		if(GetNearestBusiness(playerid) != PlayerInfo[playerid][xFirmaID]) return SendErrorMessage(playerid, "Niste blizu ulaza firme!");

		if(!KupljeneFakture[playerid]) return SendErrorMessage(playerid, "Niste kupili fakture.");

		KupljeneFakture[playerid] = false;

		BusinessInfo[id][bFacture] += 20;

		SaveBusiness(id);
		SendInfoMessage(playerid, "Uspesno si ubacio 20 faktura u biznis, trenutno imas %d!", BusinessInfo[id][bFacture]);
		Business_Refresh(id);

	}
}
else if(dialogid == dialog_FIRMASELLDRZAVA) {

	if(response) {

		new id = PlayerInfo[playerid][xFirmaID];
			if(PlayerInfo[playerid][xFirmaID] == -1) return SendErrorMessage(playerid, "Ne posedujes firmu!");
		if(GetNearestBusiness(playerid) != PlayerInfo[playerid][xFirmaID]) return SendErrorMessage(playerid, "Niste blizu ulaza firme!");
		if(PlayerInfo[playerid][xBRacun] < 0) return SendErrorMessage(playerid, "Ne mozes da prodas firmu dok ne izadjes iz minusa u banci.");
		if(ponudjenotomigacu[playerid] == 1) return SendErrorMessage(playerid, "Vec ste ponudili ovu firmu nekom igracu.");
		new string1[128];
		format(string1, sizeof(string1), "Igrac %s je prodao firmu ID %d na buy", ImeIgraca(playerid), id);
		LogSave("Ostalo/LogProdajaImovine.log", string1);

		BusinessInfo[id][bOwned] = 0;
		BusinessInfo[id][bNeaktivnost] = 0;
		BusinessInfo[id][bFacture] = 100;
		strmid(BusinessInfo[id][bOwner], "Drzava", 0, strlen("Drzava"), 32);
		BusinessInfo[id][bLocked] = 1;
		DajIgracuNovac(playerid, BusinessInfo[id][bPrice]/2);
		PlayerInfo[playerid][xFirmaID] = -1;
		SaveBusiness(id);
		SendInfoMessage(playerid, "Firma uspesno prodana!");
		Business_Refresh(id);
		SavePlayer(playerid);
	}
	if(!response) {
		SCM(playerid, -1, "Odustali ste od prodaje firme drzavi.");
	}
}
else if(dialogid == dialog_FIRMASELLTP) {
	if(!response) return 1;
	if(response) {
		if(PlayerInfo[playerid][xBRacun] < 0) return SendErrorMessage(playerid, "Ne mozes da prodas firmu dok ne izadjes iz minusa u banci.");
		new id = PlayerInfo[playerid][xFirmaID];
		new idigraca, cena, string[128], Float:Pos[3];
		if(sscanf(inputtext, "ui", idigraca, cena)) return SPD(playerid, dialog_FIRMASELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu firme", "Ponudi", D_ODUSTANI);
		GetPlayerPos(idigraca, Pos[0], Pos[1], Pos[2]);
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, Pos[0], Pos[1], Pos[2])) return SendErrorMessage(playerid, "Igrac nije blizu vas");
		if(cena < 1) return SendErrorMessage(playerid, "Cena ne moze biti manja od 1$!");
		if(idigraca == IPI) return SendErrorMessage(playerid, "Pogresan ID.");
		if(idigraca == playerid) return SendErrorMessage(playerid, "Ne mozes sam sebi prodati firmu!");
		if(PlayerInfo[idigraca][xFirmaID] != -1)return SendErrorMessage(playerid, "Igrac vec ima firmu!");
		if(PlayerInfo[idigraca][xLevel] < BusinessInfo[id][bLevel]) return SendClientMessageEx(playerid, CRVENA, "Igrac mora biti level %d+ da bi ste mu prodali firmu.", BusinessInfo[id][bLevel]);
		SendClientMessageEx(playerid, SVETLOPLAVA, "Ponudili ste igracu %s firmu po ceni od %d.", ImeIgraca(idigraca), cena);
		GlobalProdaja[idigraca] = playerid;
		GlobalCena[idigraca] = cena;
		ponudjenotomigacu[playerid] = 1;
		format(string, sizeof(string), "Igrac %s vam je ponudio da kupite njegovu firmu za %d", ImeIgraca(playerid), cena);
		SPD(idigraca, dialog_ACCEPTFRIMA, DSMSG, D_NASLOV, string, "Prihvati", "Odbij");
	}
}
else if(dialogid == dialog_ACCEPTFRIMA) {
	if(response) {
		new id = PlayerInfo[GlobalProdaja[playerid]][xFirmaID];
		if(PlayerInfo[playerid][xNovac] < GlobalCena[playerid]) return SendErrorMessage(playerid, "Nemate dovoljno novca.");

		new string1[128];
		format(string1, sizeof(string1), "Igrac %s je prodao firmu ID %d igracu %s za %d", ImeIgraca(GlobalProdaja[playerid]), id, ImeIgraca(playerid), GlobalCena[playerid]);
		LogSave("Ostalo/LogProdajaImovine.log", string1);

		SendClientMessageEx(playerid, SVETLOPLAVA, "Uspesno ste kupili firmu od igraca %s za $d.", ImeIgraca(GlobalProdaja[playerid]), GlobalCena[playerid]);

		PlayerInfo[GlobalProdaja[playerid]][xFirmaID] = -1;
		PlayerInfo[playerid][xFirmaID] = id;
		strmid(BusinessInfo[id][bOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 255);
		SaveBusiness(id); Business_Refresh(id);
		SavePlayer(playerid); SavePlayer(GlobalProdaja[playerid]);
		format(varstring, sizeof(varstring), "Prodali ste firmu igracu %s za %d!", ImeIgraca(playerid), GlobalCena[playerid]);
		SCM(GlobalProdaja[playerid], -1, varstring);
		DajIgracuNovac(GlobalProdaja[playerid], GlobalCena[playerid]);
		DajIgracuNovac(playerid, -GlobalCena[playerid]);
		SCM(playerid, -1, "Kupili ste firmu!");
		ponudjenotomigacu[GlobalProdaja[playerid]] = 0;
		GlobalProdaja[playerid] = -1;
		GlobalCena[playerid] = -1;
	}
	else if(!response) {
		format(varstring, sizeof(varstring),"Igrac %s je odbio vasu ponudu za kupovinu firme!", ImeIgraca(playerid));
		SCM(GlobalProdaja[playerid], -1, varstring);
		SCM(playerid, -1, "Odbili ste ponudu!");
		ponudjenotomigacu[GlobalProdaja[playerid]] = 0;
		GlobalProdaja[playerid] = -1;
		GlobalCena[playerid] = -1;
	}
}
else if(dialogid == dialog_FLOCK) {
	new id = GetNearestBusiness(playerid);
	if(id != PlayerInfo[playerid][xFirmaID]) return SendErrorMessage(playerid, "Ovo nije tvoja firma");
		if(response) {
		BusinessInfo[id][bLocked] = 0;
		GameTextForPlayer(playerid, "Firma ~g~otkljucana!", 3000, 3);
		SaveBusiness(id); }
	else {
		BusinessInfo[id][bLocked] = 1;
		GameTextForPlayer(playerid, "Firma ~r~zakljucana!", 3000, 3);
		SaveBusiness(id); }
}
else if(dialogid == dialog_FCNAME && response) {
	new IDFirme = PlayerInfo[playerid][xFirmaID], imefirme[64];
	if(IDFirme == -1) return SendErrorMessage(playerid, "Ne posedujes firmu!");
	if(sscanf(inputtext, "s[64]", imefirme)) return SPD(playerid, dialog_FCNAME, DSI, D_NASLOV, "Molimo vas da unesete novo ime koje zelite.", D_ODABERI, D_ODUSTANI);
	strmid(BusinessInfo[IDFirme][bName], imefirme, 0, strlen(imefirme), 64);
	SaveBusiness(IDFirme); Business_Refresh(IDFirme);
	SendInfoMessage(playerid, "Uspesno si promenio ime firme.");}
else if(dialogid == dialog_FOMONEY) {
	if(!response) return true;
	if(response)
	{
		new iznos, IDFirme = PlayerInfo[playerid][xFirmaID];
		if(sscanf(inputtext, "i", iznos)) return SendErrorMessage(playerid, "Niste uneli kolicinu novca za ostavljanje!");
		if(iznos < 1 || iznos > 5000000) return SendErrorMessage(playerid, "Kolicina novca ne moze biti ispod 1 i iznad 5000000!");
		if(iznos > PlayerInfo[playerid][xNovac]) return SendErrorMessage(playerid, "Nemate toliko novca kod sebe!");
		DajIgracuNovac(playerid, -iznos); BusinessInfo[IDFirme][bMoney] += iznos;
		SendInfoMessage(playerid, "Ostavili ste %d$ u kasu firme!", iznos);
		SaveBusiness(IDFirme);
		SavePlayer(playerid); }
}
else if(dialogid == dialog_FPMONEY) {
	if(!response) return true;
	if(response) {
		new iznos, IDFirme = PlayerInfo[playerid][xFirmaID];
		if(sscanf(inputtext, "i", iznos)) return SendErrorMessage(playerid, "Niste uneli kolicinu novca za ostavljanje!");
		if(iznos < 1 || iznos > 5000000) return SendErrorMessage(playerid, "Kolicina novca ne moze biti ispod 1 i iznad 5000000!");
		if(iznos > BusinessInfo[IDFirme][bMoney]) return SendErrorMessage(playerid, "Nemate toliko novca u kasi!");
		DajIgracuNovac(playerid, iznos); BusinessInfo[IDFirme][bMoney] -= iznos;
		SendInfoMessage(playerid, "Podigli ste %d$ iz kase firme!", iznos);
		SaveBusiness(IDFirme);
		SavePlayer(playerid);
	}
}
else if(dialogid == dialog_RESTORAN) {
	if(!response) return 1;
	new string[50];
	switch(listitem) {
		case 0: {
			if(PlayerInfo[playerid][xNovac] < 150) return SendErrorMessage(playerid, "Nemate dovoljno novca 150$!");
			//DajIgracuGlad(playerid, 22);
			BusinessMoney(uFirmi[playerid] , 150, playerid);
			DajIgracuNovac(playerid, -150);

			format(string, sizeof(string), "* %s jede juhu.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		}
		case 1: {
			if(PlayerInfo[playerid][xNovac] < 220) return SendErrorMessage(playerid, "Nemate dovoljno novca 220$!");
			BusinessMoney(uFirmi[playerid] , 220, playerid);
			//DajIgracuGlad(playerid, 25);
			DajIgracuNovac(playerid, -220);

			format(string, sizeof(string), "* %s jede Piletinu.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		}
		case 2:
		{
			if(PlayerInfo[playerid][xNovac] < 350) return SendErrorMessage(playerid, "Nemate dovoljno novca 350$!");
			BusinessMoney(uFirmi[playerid] , 350, playerid);
			//DajIgracuGlad(playerid, 26);
			DajIgracuNovac(playerid, -350);

			format(string, sizeof(string), "* %s jede pecenog morskog psa na salati.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		}
		case 3:
		{
			if(PlayerInfo[playerid][xNovac] < 410) return SendErrorMessage(playerid, "Nemate dovoljno novca 410$!");
			BusinessMoney(uFirmi[playerid] , 410, playerid);
			DajIgracuNovac(playerid, -410);
			//DajIgracuGlad(playerid, 28);

			format(string, sizeof(string), "* %s jede spagete.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		}
		case 4:
		{
			if(PlayerInfo[playerid][xNovac] < 630) return SendErrorMessage(playerid, "Nemate dovoljno novca 630$!");
			BusinessMoney(uFirmi[playerid] , 630, playerid);
			DajIgracuNovac(playerid, -630);
			//DajIgracuGlad(playerid, 30);
			format(string, sizeof(string), "* %s jede kolac.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		}
		case 5:
		{
			if(PlayerInfo[playerid][xNovac] < 50) return SendErrorMessage(playerid, "Nemate dovoljno novca 50$!");
			BusinessMoney(uFirmi[playerid] , 50, playerid);
			DajIgracuNovac(playerid, -50);

			//DajIgracuGlad(playerid, 5);
			format(string, sizeof(string), "* %s pije coca colu.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
		}
		case 6:
		{
			if(PlayerInfo[playerid][xNovac] < 25) return SendErrorMessage(playerid, "Nemate dovoljno novca 25$!");
			BusinessMoney(uFirmi[playerid] , 25, playerid);
			DajIgracuNovac(playerid, -25);
			//DajIgracuGlad(playerid, 2);
			format(string, sizeof(string), "* %s pije vodu.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
		}
	}
}
else if(dialogid == dialog_CLUCKIN)
{
	if(!response) return 1;
	new string[50];
	switch(listitem)
	{
		case 0:
		{
			if(PlayerInfo[playerid][xNovac] < 100) return SendErrorMessage(playerid, "Nemate dovoljno novca 100$!");
			BusinessMoney(uFirmi[playerid], 90, playerid);
			DajIgracuNovac(playerid, -100);

			//DajIgracuGlad(playerid, 8);
			format(string, sizeof(string), "* %s jede Topli Sendvic.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			SavePlayer(playerid);
		}
		case 1:
		{
			if(PlayerInfo[playerid][xNovac] < 150) return SendErrorMessage(playerid, "Nemate dovoljno novca 150$!");
			BusinessMoney(uFirmi[playerid], 120, playerid);
			DajIgracuNovac(playerid, -150);

			//DajIgracuGlad(playerid, 10);
			format(string, sizeof(string), "* %s jede Cevape.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		}
		case 2:
		{
			if(PlayerInfo[playerid][xNovac] < 100) return SendErrorMessage(playerid, "Nemate dovoljno novca 100$!");
			BusinessMoney(uFirmi[playerid], 100, playerid);
			DajIgracuNovac(playerid, -100);

			//DajIgracuGlad(playerid, 8);
			format(string, sizeof(string), "* %s jede Filete.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			SavePlayer(playerid);
		}
		case 3:
		{
			if(PlayerInfo[playerid][xNovac] < 100) return SendErrorMessage(playerid, "Nemate dovoljno novca 100$!");
			BusinessMoney(uFirmi[playerid], 80, playerid);
			DajIgracuNovac(playerid, -100);
			//DajIgracuGlad(playerid, 6);
			format(string, sizeof(string), "* %s jede Vocnu salatu.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			SavePlayer(playerid);
		}
		case 4:
		{
			if(PlayerInfo[playerid][xNovac] < 120) return SendErrorMessage(playerid, "Nemate dovoljno novca 120$!");
			BusinessMoney(uFirmi[playerid], 100, playerid);
			DajIgracuNovac(playerid, -120);
			//DajIgracuGlad(playerid, 10);

			format(string, sizeof(string), "* %s jede Kebab.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			SavePlayer(playerid);
		}
		case 5:
		{
			if(PlayerInfo[playerid][xNovac] < 50) return SendErrorMessage(playerid, "Nemate dovoljno novca 50$!");
			BusinessMoney(uFirmi[playerid], 40, playerid);
			DajIgracuNovac(playerid, -50);
			//DajIgracuGlad(playerid, 1);

			format(string, sizeof(string), "* %s pije sprite.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			SavePlayer(playerid);
		}
		case 6:
		{
			if(PlayerInfo[playerid][xNovac] < 25) return SendErrorMessage(playerid, "Nemate dovoljno novca 25$!");
			BusinessMoney(uFirmi[playerid], 10, playerid);
			DajIgracuNovac(playerid, -25);
			//DajIgracuGlad(playerid, 1);
			format(string, sizeof(string), "* %s pije vodu.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			SavePlayer(playerid);
		}
	}
}
else if(dialogid == dialog_CHOSEGAME) {
	if(!response) return 1;
	if(response) {
		switch(listitem) {
			case 0: {

				if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete igrati CS 1.6, imate zabranu - /disarmtime.");
				if(PljackaUToku || ZlataraUToku) return SendErrorMessage(playerid, "Ne mozete ovo dok je pljacka u toku.");

				if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 4) || PlayerInfo[playerid][xHelper] > 0) {
					new hour, minute, second;
					gettimeEx(hour, minute, second);
					FixHour(hour);
					hour = shifthour;

					new admini = 0;
					foreach(new i : Player) {
						if(AdminDuty[i] == true) admini++;
					}

					if((hour >= 00) && (hour <= 10)) {}
					else {
						if(admini < 3) return SendErrorMessage(playerid, "Da bi bili u igraonici za vreme smene moraju biti bar 3 admina/helpera na duty.");
					}
				}

				if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Ne mozes ako nisi level 3+.");

				if(PlayerInfo[playerid][xWanted] >= 1) return SendErrorMessage(playerid, "Ne mozete na izazov dok imate wanted.");
				if(PlayerInfo[playerid][xZatvor] >= 1) return SendErrorMessage(playerid, "Ne mozete na izazov dok ste u zatvoru / ALKATRAZ.");
				if(PlayerCuffed[playerid] >= 1) return SendErrorMessage(playerid, "Ne mozes na izazov dok si cuffovan.");
				if(IgracZavezan[playerid] == true) return SendErrorMessage(playerid, "Ne mozes na izazov dok si vezan.");

				if(!IsPlayerInRangeOfPoint(playerid, 50, 1466.3201, 1416.2100, -5.0676)) return SendErrorMessage(playerid, "Morate biti u igraonici.");

				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

				strcat(DialogStrgEx, "MAPA\tBroj igraca\n");
				format(DialogStrgEx, sizeof(DialogStrgEx), "MAPA\tBroj igraca\n\
				de_dust\t%d/32\n\
				de_inferno\t%d/32\n\
				cs_assault\t%d/32\n\
				fy_snow\t%d/32", dustply, infernoply, assaultply, snowply, DialogStrgEx);
				SPD(playerid, dialog_csmaps, DSH, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI);
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			}
			case 1: {
				SPD(playerid, dialog_RACEINVITE, DSI, "Izazovite na trku", "Unesite ID igraca, zatim broj iz ponude i ulog.\n[Broj] 1. Sultan 2. Infernus 3. Bullet 4. Elegy 5. Turismo\n[Broj] 6. Quad 7. Sabre 8. Hotring Racer 9. NRG-500 10. Tractor\n[Ulog] Ukoliko je ulog 0, igracete bez uloga\n\nPrimer: 25 4 100000", "U redu", "Izadji");
			}
			case 2: {
				if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete igrati duel, imate zabranu - /disarmtime.");
				SPD(playerid, dialog_DUELGUN, DSI, "Odabir Oruzja", "Deagle\nAK-47\nBomba\nMolotov\nShotGun\nM4\nSawnOff ShotGun", "Odaberi", "Odustani");
			}

		}
	}
}
else if(dialogid == dialog_RACEINVITE) {
	if(!response) return 1;
	if(response) {

		new id, broj, model, ulog;
		if(sscanf(inputtext, "uii", id, broj, ulog)) {
			SPD(playerid, dialog_RACEINVITE, DSI, "Izazovite na trku", "Unesite ID igraca, zatim broj iz ponude i ulog.\n[Broj] 1. Sultan 2. Infernus 3. Bullet 4. Elegy 5. Turismo\n[Broj] 6. Quad 7. Sabre 8. Hotring Racer 9. NRG-500 10. Tractor\n[Ulog] Ukoliko je ulog 0, igracete bez uloga\n\nPrimer: 25 4 100000", "U redu", "Izadji");
			return 1;
		}

		if(PljackaUToku || ZlataraUToku) return SendErrorMessage(playerid, "Ne mozete ovo dok je pljacka u toku.");

		if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 4) || PlayerInfo[playerid][xHelper] > 0) {
			new hour, minute, second;
			gettimeEx(hour, minute, second);
			FixHour(hour);
			hour = shifthour;

			new admini = 0;
			foreach(new i : Player) {
				if(AdminDuty[i] == true) admini++;
			}

			if((hour >= 00) && (hour <= 10)) {}
			else {
				if(admini < 3) return SendErrorMessage(playerid, "Da bi bili u igraonici za vreme smene moraju biti bar 3 admina/helpera na duty.");
			}
		}

		if(id == IPI) return SendErrorMessage(playerid, "Pogresan id igraca.");
		if(id == playerid) return SendErrorMessage(playerid, "Ne mozes sam sebe da izazoves.");
		if(!IsPlayerInRangeOfPoint(playerid, 50, 1466.3201, 1416.2100, -5.0676)) return SendErrorMessage(playerid, "Morate biti u igraonici.");
		if(!IsPlayerInRangeOfPoint(id, 50, 1466.3201, 1416.2100, -5.0676)) return SendErrorMessage(playerid, "Morate biti u igraonici.");
		if(NaUtrci[playerid]) return SendErrorMessage(playerid, "Vec si na trci.");
		if(NaUtrci[id]) return SendErrorMessage(playerid, "Igrac je vec na trci.");
		if(PljackaNovac[playerid] > 0) return SendErrorMessage(playerid, "Ne mozes da ides na trku dok si u toku pljacke.");
		if(PljackaNovac[id] > 0) return SendErrorMessage(playerid, "Ne mozes da invite igraca koji je u toku pljacke.");
		if(PljackaZlato[playerid] > 0) return SendErrorMessage(playerid, "Ne mozes da ides na trku dok si u toku pljacke.");
		if(PljackaZlato[id] > 0) return SendErrorMessage(playerid, "Ne mozes da invite igraca koji je u toku pljacke.");
		if(broj < 1 || broj > 10) return SendErrorMessage(playerid, "Broj moze ici od 1 do 10.");
		if(ulog < 0) return SendErrorMessage(playerid, "Ulog ne moze biti manji od 0.");
		if(ulog >= 200001) return SendErrorMessage(playerid, "Ulog ne moze biti veci od 200000.");
		if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Ne mozes ako nisi level 3+.");
		if(PlayerCuffed[playerid] >= 1) return SendErrorMessage(playerid, "Ne mozes na izazov dok si cuffovan.");
		if(IgracZavezan[playerid] == true) return SendErrorMessage(playerid, "Ne mozes na izazov dok si vezan.");
		if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti na nogama da bi otisli na izazov.");
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Morate biti na nogama da bi otisli na izazov.");
		if(PlayerInfo[playerid][xWanted] >= 1) return SendErrorMessage(playerid, "Ne mozete na izazov dok imate wanted.");
		if(PlayerInfo[playerid][xZatvor] >= 1) return SendErrorMessage(playerid, "Ne mozete na izazov dok ste u zatvoru / ALKATRAZ.");
		if(PlayerInfo[playerid][xNovac] < ulog) return SendErrorMessage(playerid, "Nemate dovoljno novca za ulog.");
		if(PlayerInfo[id][xNovac] < ulog) return SendErrorMessage(playerid, "Taj igrac nema dovoljno novca.");
		if(PlayerInfo[id][xWanted] >= 1) return SendErrorMessage(playerid, "Taj igrac ima WL.");

		if(ServerInfo[BrojKreiranihVozila] > MaxBrojKreiranih) return SCM(playerid, ANTICHEAT, "[ANTICHEAT]"col_white" Nemoguce je trenutno otici na izazov, limit vozila na serveru je dosegnut.");

		switch(broj) {
			case 1: model = 560;
			case 2: model = 411;
			case 3: model = 541;
			case 4: model = 562;
			case 5: model = 451;
			case 6: model = 471;
			case 7: model = 475;
			case 8: model = 502;
			case 9: model = 522;
			case 10: model = 531;
		}

		PonudioIgrac[id] = playerid;
		PonudioIgrac[playerid] = id;
		UlogTrke[id] = ulog;
		UlogTrke[playerid] = ulog;

		ModelTrke[id] = model;

		new string[512];
		format(string, sizeof(string), "Igrac %s vas je izazvao na trku sa %s.\nUlog trke je %d$\nDa prihvatis pretisni na 'Prihvati'.\nDa odustanes pritisni na 'Odustani'", RPImeIgraca(playerid), GetVehicleNameEx(model), ulog);

		SPD(id, dialog_IZAZOVITRKA, DSMSG, D_NASLOV, string, D_ODABERI, D_ODUSTANI);

		SendInfoMessage(playerid, "Izazvali ste na trku %s.", RPImeIgraca(id));
	}
}
else if(dialogid == dialog_csmaps)
{
	if(!response) return 1;
	switch(listitem)
	{
		case 0:
		{
			new sat, minut, sekund;
			gettime(sat, minut, sekund);
			if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Ne mozes ako nisi level 3+.");
			if(PlayerInfo[playerid][xWanted] > 0) return SendErrorMessage(playerid, "Ne mozes na CS sa WLom.");
			if(PoliceDuty[playerid]) return SendErrorMessage(playerid, "Ne mozes sa PD duty u Counter Strike.");

			if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 7) || PlayerInfo[playerid][xHelper] > 0) {
				new hour, minute, second;
				gettimeEx(hour, minute, second);
				FixHour(hour);
				hour = shifthour;

				new admini = 0;
				foreach(new i : Player) {
						if(AdminDuty[i] == true) admini++;
				}
				if((hour >= 00) && (hour <= 10)) {}
				else {
					if(admini < 3) return SendErrorMessage(playerid, "Da bi bili u igraonici za vreme smene moraju biti bar 3 admina/helpera na duty.");
				}
			}
			
			if(dustply == 32) return SendErrorMessage(playerid, "Ova mapa je puna.");

			dustply++;
			NaDustu[playerid] = true;
			new rand = random(sizeof(de_dustPos));
			ac_SetPlayerPos(playerid, de_dustPos[rand][0], de_dustPos[rand][1],de_dustPos[rand][2]);
			SetPlayerFacingAngle(playerid, 360.000);
			SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
			TogglePlayerControllable(playerid, false);
			SetCameraBehindPlayer(playerid);
			ac_SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 10);
			SendInfoMessage(playerid, "Da izadjete sa cs-a kucajte /izadjisacs");

			Fusion_SetPlayerHealth(playerid, 100);
			Fusion_SetPlayerArmour(playerid, 100);

			if(PlayerInfo[playerid][xDMEventUbistva] >= 4500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 10.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 26, 150);
				GiveWeaponToPlayer(playerid, 28, 400);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 4000) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 9.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 27, 150);
				GiveWeaponToPlayer(playerid, 32, 800);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 3500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 8.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 27, 150);
				GiveWeaponToPlayer(playerid, 28, 800);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 3000) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 7.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 27, 150);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 2500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 6.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 26, 150);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 2000) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 5.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 26, 150);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 30, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 1500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 4.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 25, 100);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 1000) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 3.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 25, 100);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 30, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 2.");
				GiveWeaponToPlayer(playerid, 24, 200);
				GiveWeaponToPlayer(playerid, 25, 100);
				GiveWeaponToPlayer(playerid, 29, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 0) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 1.");
				GiveWeaponToPlayer(playerid, 24, 200);
				GiveWeaponToPlayer(playerid, 25, 100);
			}
		}
		case 1:
		{
			new sat, minut, sekund;
			gettime(sat, minut, sekund);
			if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Ne mozes ako nisi level 3+.");
			if(PlayerInfo[playerid][xWanted] > 0) return SendErrorMessage(playerid, "Ne mozes na CS sa WLom.");
			if(PoliceDuty[playerid]) return SendErrorMessage(playerid, "Ne mozes sa PD duty u Counter Strike.");

			if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 7) || PlayerInfo[playerid][xHelper] > 0) {
				new hour, minute, second;
				gettimeEx(hour, minute, second);
				FixHour(hour);
				hour = shifthour;

				new admini = 0;
				foreach(new i : Player) {
					if(AdminDuty[i] == true) admini++;
				}

				if((hour >= 00) && (hour <= 10)) {}
				else {
					if(admini < 3) return SendErrorMessage(playerid, "Da bi bili u igraonici za vreme smene moraju biti bar 3 admina/helpera na duty.");
				}
			}

			if(infernoply == 32) return SendErrorMessage(playerid, "Ova mapa je puna.");
			
			infernoply++;
			NaInferno[playerid] = true;
			new rand = random(sizeof(de_infernoPos));
			ac_SetPlayerPos(playerid, de_infernoPos[rand][0], de_infernoPos[rand][1],de_infernoPos[rand][2]);
			SetPlayerFacingAngle(playerid, 360.000);
			SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
			TogglePlayerControllable(playerid, false);
			SetCameraBehindPlayer(playerid);
			ac_SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 10);
			SendInfoMessage(playerid, "Da izadjete sa cs-a kucajte /izadjisacs");

			Fusion_SetPlayerHealth(playerid, 100);
			Fusion_SetPlayerArmour(playerid, 100);

			if(PlayerInfo[playerid][xDMEventUbistva] >= 4500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 10.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 26, 150);
				GiveWeaponToPlayer(playerid, 28, 400);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 4000) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 9.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 27, 150);
				GiveWeaponToPlayer(playerid, 32, 800);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 3500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 8.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 27, 150);
				GiveWeaponToPlayer(playerid, 28, 800);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 3000) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 7.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 27, 150);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 2500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 6.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 26, 150);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 2000) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 5.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 26, 150);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 30, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 1500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 4.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 25, 100);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 1000) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 3.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 25, 100);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 30, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 2.");
				GiveWeaponToPlayer(playerid, 24, 200);
				GiveWeaponToPlayer(playerid, 25, 100);
				GiveWeaponToPlayer(playerid, 29, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 0) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 1.");
				GiveWeaponToPlayer(playerid, 24, 200);
				GiveWeaponToPlayer(playerid, 25, 100);
			}
		}
		case 2:
		{
			new sat, minut, sekund;
			gettime(sat, minut, sekund);
			if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Ne mozes ako nisi level 3+.");
			if(PlayerInfo[playerid][xWanted] > 0) return SendErrorMessage(playerid, "Ne mozes na CS sa WLom.");
			if(PoliceDuty[playerid]) return SendErrorMessage(playerid, "Ne mozes sa PD duty u Counter Strike.");

			if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 7) || PlayerInfo[playerid][xHelper] > 0) {
				new hour, minute, second;
				gettimeEx(hour, minute, second);
				FixHour(hour);
				hour = shifthour;

				new admini = 0;
				foreach(new i : Player) {
					if(AdminDuty[i] == true) admini++;
				}

				if((hour >= 00) && (hour <= 10)) {}
				else {
					if(admini < 3) return SendErrorMessage(playerid, "Da bi bili u igraonici za vreme smene moraju biti bar 3 admina/helpera na duty.");
				}
			}

			if(assaultply == 32) return SendErrorMessage(playerid, "Ova mapa je puna.");
			
			assaultply++;
			NaAssault[playerid] = true;
			new rand = random(sizeof(cs_assaultPos));
			ac_SetPlayerPos(playerid, cs_assaultPos[rand][0], cs_assaultPos[rand][1],cs_assaultPos[rand][2]);
			SetPlayerFacingAngle(playerid, 360.000);
			SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
			TogglePlayerControllable(playerid, false);
			SetCameraBehindPlayer(playerid);
			ac_SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 10);
			SendInfoMessage(playerid, "Da izadjete sa cs-a kucajte /izadjisacs");

			Fusion_SetPlayerHealth(playerid, 100);
			Fusion_SetPlayerArmour(playerid, 100);

			if(PlayerInfo[playerid][xDMEventUbistva] >= 4500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 10.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 26, 150);
				GiveWeaponToPlayer(playerid, 28, 400);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 4000) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 9.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 27, 150);
				GiveWeaponToPlayer(playerid, 32, 800);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 3500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 8.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 27, 150);
				GiveWeaponToPlayer(playerid, 28, 800);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 3000) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 7.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 27, 150);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 2500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 6.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 26, 150);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 2000) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 5.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 26, 150);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 30, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 1500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 4.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 25, 100);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 1000) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 3.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 25, 100);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 30, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 2.");
				GiveWeaponToPlayer(playerid, 24, 200);
				GiveWeaponToPlayer(playerid, 25, 100);
				GiveWeaponToPlayer(playerid, 29, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 0) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 1.");
				GiveWeaponToPlayer(playerid, 24, 200);
				GiveWeaponToPlayer(playerid, 25, 100);
			}
		}
		case 3:
		{
			new sat, minut, sekund;
			gettime(sat, minut, sekund);
			if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Ne mozes ako nisi level 3+.");
			if(PlayerInfo[playerid][xWanted] > 0) return SendErrorMessage(playerid, "Ne mozes na CS sa WLom.");
			if(PoliceDuty[playerid]) return SendErrorMessage(playerid, "Ne mozes sa PD duty u Counter Strike.");

			if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 7) || PlayerInfo[playerid][xHelper] > 0) {
				new hour, minute, second;
				gettimeEx(hour, minute, second);
				FixHour(hour);
				hour = shifthour;

				new admini = 0;
				foreach(new i : Player) {
					if(AdminDuty[i] == true) admini++;
				}

				if((hour >= 00) && (hour <= 10)) {}
				else {
					if(admini < 3) return SendErrorMessage(playerid, "Da bi bili u igraonici za vreme smene moraju biti bar 3 admina/helpera na duty.");
				}
			}

			if(snowply == 32) return SendErrorMessage(playerid, "Ova mapa je puna.");
			
			snowply++;
			NaSnow[playerid] = true;
			new rand = random(sizeof(fy_snowPos));
			ac_SetPlayerPos(playerid, fy_snowPos[rand][0], fy_snowPos[rand][1],fy_snowPos[rand][2]);
			SetPlayerFacingAngle(playerid, 360.000);
			SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
			TogglePlayerControllable(playerid, false);
			SetCameraBehindPlayer(playerid);
			ac_SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 10);
			SendInfoMessage(playerid, "Da izadjete sa cs-a kucajte /izadjisacs");

			Fusion_SetPlayerHealth(playerid, 100);
			Fusion_SetPlayerArmour(playerid, 100);

			if(PlayerInfo[playerid][xDMEventUbistva] >= 4500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 10.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 26, 150);
				GiveWeaponToPlayer(playerid, 28, 400);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 4000) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 9.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 27, 150);
				GiveWeaponToPlayer(playerid, 32, 800);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 3500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 8.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 27, 150);
				GiveWeaponToPlayer(playerid, 28, 800);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 3000) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 7.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 27, 150);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 2500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 6.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 26, 150);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 2000) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 5.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 26, 150);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 30, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 1500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 4.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 25, 100);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 31, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 1000) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 3.");
				GiveWeaponToPlayer(playerid, 24, 150);
				GiveWeaponToPlayer(playerid, 25, 100);
				GiveWeaponToPlayer(playerid, 29, 400);
				GiveWeaponToPlayer(playerid, 30, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 500) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 2.");
				GiveWeaponToPlayer(playerid, 24, 200);
				GiveWeaponToPlayer(playerid, 25, 100);
				GiveWeaponToPlayer(playerid, 29, 400);
			}
			else if(PlayerInfo[playerid][xDMEventUbistva] >= 0) {
				SendInfoMessage(playerid, "Usao si na CS sa rankom 1.");
				GiveWeaponToPlayer(playerid, 24, 200);
				GiveWeaponToPlayer(playerid, 25, 100);
			}
		}
	}
}
else if(dialogid == dialog_BURG)
{
	if(!response) return 1;
	new string[50];
	switch(listitem)
	{
		case 0:
		{
			if(PlayerInfo[playerid][xNovac] < 100) return SendErrorMessage(playerid, "Nemate dovoljno novca 100$!");
			BusinessMoney(uFirmi[playerid], 90, playerid);
			DajIgracuNovac(playerid, -100);

			DodajIgracuHP(playerid, 50);
			format(string, sizeof(string), "* %s jede Hamburger.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			SavePlayer(playerid);
		}
		case 1:
		{
			if(PlayerInfo[playerid][xNovac] < 150) return SendErrorMessage(playerid, "Nemate dovoljno novca 150$!");
			BusinessMoney(uFirmi[playerid], 120, playerid);
			DajIgracuNovac(playerid, -150);

			DodajIgracuHP(playerid, 50);
			format(string, sizeof(string), "* %s jede Cheeseburger.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		}
		case 2:
		{
			if(PlayerInfo[playerid][xNovac] < 100) return SendErrorMessage(playerid, "Nemate dovoljno novca 100$!");
			BusinessMoney(uFirmi[playerid], 100, playerid);
			DajIgracuNovac(playerid, -100);

			DodajIgracuHP(playerid, 50);
			format(string, sizeof(string), "* %s jede McFlurry.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			SavePlayer(playerid);
		}
		case 3:
		{
			if(PlayerInfo[playerid][xNovac] < 100) return SendErrorMessage(playerid, "Nemate dovoljno novca 100$!");
			BusinessMoney(uFirmi[playerid], 80, playerid);
			DajIgracuNovac(playerid, -100);
			DodajIgracuHP(playerid, 50);
			format(string, sizeof(string), "* %s jede Big Mac.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			SavePlayer(playerid);
		}
		case 4:
		{
			if(PlayerInfo[playerid][xNovac] < 120) return SendErrorMessage(playerid, "Nemate dovoljno novca 120$!");
			BusinessMoney(uFirmi[playerid], 100, playerid);
			DajIgracuNovac(playerid, -120);
			DodajIgracuHP(playerid, 50);

			format(string, sizeof(string), "* %s jede McWRAP.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			SavePlayer(playerid);
		}
		case 5:
		{
			if(PlayerInfo[playerid][xNovac] < 50) return SendErrorMessage(playerid, "Nemate dovoljno novca 50$!");
			BusinessMoney(uFirmi[playerid], 40, playerid);
			DajIgracuNovac(playerid, -50);
			DodajIgracuHP(playerid, 50);

			format(string, sizeof(string), "* %s pije coca cola.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			SavePlayer(playerid);
		}
		case 6:
		{
			if(PlayerInfo[playerid][xNovac] < 70) return SendErrorMessage(playerid, "Nemate dovoljno novca 25$!");
			BusinessMoney(uFirmi[playerid], 10, playerid);
			DajIgracuNovac(playerid, -70);
			DodajIgracuHP(playerid, 50);
			format(string, sizeof(string), "* %s pije milkshake.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			SavePlayer(playerid);
		}
	}
}
else if(dialogid == dialog_PIZZA) {

	if(!response) return 1;

	new string[50];
	switch(listitem)
	{
		case 0:
		{
			if(PlayerInfo[playerid][xNovac] < 100) return SendErrorMessage(playerid, "Nemate dovoljno novca 100$!");
			BusinessMoney(uFirmi[playerid] , 100, playerid);
			DajIgracuNovac(playerid, -100);
			//DajIgracuGlad(playerid, 9);

			format(string, sizeof(string), "* %s jede Pizzetu.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			SavePlayer(playerid);
		}
		case 1:
		{
			if(PlayerInfo[playerid][xNovac] < 150) return SendErrorMessage(playerid, "Nemate dovoljno novca 150$!");
			BusinessMoney(uFirmi[playerid] , 150, playerid);
			DajIgracuNovac(playerid, -150);
			//DajIgracuGlad(playerid, 11);

			format(string, sizeof(string), "* %s jede Veliku pizzu.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			SavePlayer(playerid);
		}
		case 2:
		{
			if(PlayerInfo[playerid][xNovac] < 45) return SendErrorMessage(playerid, "Nemate dovoljno novca 45$!");
			BusinessMoney(uFirmi[playerid] , 40, playerid);
			DajIgracuNovac(playerid, -45);

			//DajIgracuGlad(playerid, 4);
			format(string, sizeof(string), "* %s jede Topli sendvic.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			SavePlayer(playerid);
		}
		case 3:
		{
			if(PlayerInfo[playerid][xNovac] < 40) return SendErrorMessage(playerid, "Nemate dovoljno novca 40$!");
			BusinessMoney(uFirmi[playerid] , 40, playerid);
			DajIgracuNovac(playerid, -40);
			//DajIgracuGlad(playerid, 4);
			format(string, sizeof(string), "* %s jede salatu.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			SavePlayer(playerid);
		}
		case 4:
		{
			if(PlayerInfo[playerid][xNovac] < 250) return SendErrorMessage(playerid, "Nemate dovoljno novca 250$!");
			BusinessMoney(uFirmi[playerid] , 230, playerid);
			DajIgracuNovac(playerid, -250);
			//DajIgracuGlad(playerid, 16);

			format(string, sizeof(string), "* %s jede Jumbo Pizzu.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			SavePlayer(playerid);
		}
		case 5:
		{
			if(PlayerInfo[playerid][xNovac] < 50) return SendErrorMessage(playerid, "Nemate dovoljno novca 50$!");
			BusinessMoney(uFirmi[playerid] , 45, playerid);
			DajIgracuNovac(playerid, -50);
			//DajIgracuGlad(playerid, 3);

			format(string, sizeof(string), "* %s pije Sprite.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			SavePlayer(playerid);
		}
		case 6:
		{
			if(PlayerInfo[playerid][xNovac] < 25) return SendErrorMessage(playerid, "Nemate dovoljno novca 25$!");
			BusinessMoney(uFirmi[playerid] , 20, playerid);
			DajIgracuNovac(playerid, -25);
			//DajIgracuGlad(playerid, 1);
			format(string, sizeof(string), "* %s pije vodu.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, string, LJUBICASTA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			SavePlayer(playerid);
		}
	}
}
else if(dialogid == dialog_DRINK) {

	new drunklevel = GetPlayerDrunkLevel(playerid);
	if(!response) return 1;

	switch(listitem) {
		case 0: {
			if(PlayerInfo[playerid][xNovac] < 200) return SendErrorMessage(playerid, "Nemate dovoljno novca 200$!");

			if(uFirmi[playerid] != -1) BusinessMoney(uFirmi[playerid] , 200, playerid);
			else BusinessRodaMoney(200, playerid);

			DajIgracuNovac(playerid, -200);
			//DajIgracuGlad(playerid, 15);
			SetPlayerDrunkLevel(playerid, drunklevel + 1000);
			if(drunklevel > 2000) {
				GameTextForPlayer(playerid, "~p~Pijani ste", 3500, 1);
			}
			format(varstring, sizeof(varstring), "* %s pije viski.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		}
		case 1: {
			if(PlayerInfo[playerid][xNovac] < 170) return SendErrorMessage(playerid, "Nemate dovoljno novca 170$!");
			if(uFirmi[playerid] != -1) BusinessMoney(uFirmi[playerid], 170, playerid);
			else BusinessRodaMoney(170, playerid);
			DajIgracuNovac(playerid, -170);
			//DajIgracuGlad(playerid, 14);
			SetPlayerDrunkLevel(playerid, drunklevel + 500);
			if(drunklevel > 2000) {
				GameTextForPlayer(playerid, "~p~Pijani ste", 3500, 1);
			}
			format(varstring, sizeof(varstring), "* %s pije vodku.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		}
		case 2: {
			if(PlayerInfo[playerid][xNovac] < 85) return SendErrorMessage(playerid, "Nemate dovoljno novca 85$!");
			if(uFirmi[playerid] != -1) BusinessMoney(uFirmi[playerid], 85, playerid);
			else BusinessRodaMoney(85, playerid);

			DajIgracuNovac(playerid, -85);
			//DajIgracuGlad(playerid, 8);
			SetPlayerDrunkLevel(playerid, drunklevel + 200);
			if(drunklevel > 2000) {
				GameTextForPlayer(playerid, "~p~Pijani ste", 3500, 1);
			}
			format(varstring, sizeof(varstring), "* %s pije Heineken pivo.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		}
		case 3: {
			if(PlayerInfo[playerid][xNovac] < 120) return SendErrorMessage(playerid, "Nemate dovoljno novca 120$!");
			if(uFirmi[playerid] != -1) BusinessMoney(uFirmi[playerid], 120, playerid);
			else BusinessRodaMoney(120, playerid);

			DajIgracuNovac(playerid, -120);
			//DajIgracuGlad(playerid, 9);
			SetPlayerDrunkLevel(playerid, drunklevel + 800);
			if(drunklevel > 2000) {
				GameTextForPlayer(playerid, "~p~Pijani ste", 3500, 1);
			}
			format(varstring, sizeof(varstring), "* %s pije Konjak.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		}
		case 4: {
			if(PlayerInfo[playerid][xNovac] < 150) return SendErrorMessage(playerid, "Nemate dovoljno novca 150$!");
			if(uFirmi[playerid] != -1) BusinessMoney(uFirmi[playerid], 150, playerid);
			else BusinessRodaMoney(150, playerid);

			DajIgracuNovac(playerid, -150);
			//DajIgracuGlad(playerid, 10);
			SetPlayerDrunkLevel(playerid, drunklevel + 500);
			if(drunklevel > 2000) {
				GameTextForPlayer(playerid, "~p~Pijani ste", 3500, 1);
			}
			format(varstring, sizeof(varstring), "* %s pije tekilu.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		}
		case 5: {
			if(PlayerInfo[playerid][xNovac] < 290) return SendErrorMessage(playerid, "Nemate dovoljno novca 290$!");
			if(uFirmi[playerid] != -1) BusinessMoney(uFirmi[playerid], 290, playerid);
			else BusinessRodaMoney(290, playerid);

			DajIgracuNovac(playerid, -290);
			//DajIgracuGlad(playerid, 18);
			SetPlayerDrunkLevel(playerid, drunklevel + 700);
			if(drunklevel > 2000) {
				GameTextForPlayer(playerid, "~p~Pijani ste", 3500, 1);
			}
			format(varstring, sizeof(varstring), "* %s pije Jack Daniels.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		}
		case 6: {
			if(PlayerInfo[playerid][xNovac] < 60)  return SendErrorMessage(playerid, "Nemate dovoljno novca 60$!");
			if(uFirmi[playerid] != -1) BusinessMoney(uFirmi[playerid], 60, playerid);
			else BusinessRodaMoney(60, playerid);

			DajIgracuNovac(playerid, -60);
			//DajIgracuGlad(playerid, 3);
			format(varstring, sizeof(varstring), "* %s pije mineralnu vodu.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		}
		case 7: {
			if(PlayerInfo[playerid][xNovac] < 80) return SendErrorMessage(playerid, "Nemate dovoljno novca 80$!");
			if(uFirmi[playerid] != -1) BusinessMoney(uFirmi[playerid], 80, playerid);
			else BusinessRodaMoney(80, playerid);

			DajIgracuNovac(playerid, -80);
			//DajIgracuGlad(playerid, 4);
			format(varstring, sizeof(varstring), "* %s pije Cedevitu od Narandze.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		}
		case 8: {
			if(PlayerInfo[playerid][xNovac] < 50) return SendErrorMessage(playerid, "Nemate dovoljno novca 50$!");
			if(uFirmi[playerid] != -1) BusinessMoney(uFirmi[playerid], 50, playerid);
			else BusinessRodaMoney(50, playerid);

			DajIgracuNovac(playerid, -50);
			//DajIgracuGlad(playerid, 1);
			format(varstring, sizeof(varstring), "* %s pije coca colu.", ImeIgraca(playerid));
			PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		}
	}
}
else if(dialogid == dialog_GUNSHOP) {

	if(response) {

		switch(listitem) {

			case 0: {
				if(PlayerInfo[playerid][xNovac] < 2500) return SendErrorMessage(playerid, "Nemate dovoljno novca 2500$!");
				DajIgracuNovac(playerid, -2500);
				GiveWeaponToPlayer(playerid, 4, 1);
				format(varstring, sizeof(varstring), "* %s je kupio noz.", ImeIgraca(playerid));
				PorukaRadius(8.0, playerid, varstring, LJUBICASTA);

				BusinessMoney(uFirmi[playerid], 500, playerid);
			}
			case 1:  {

				if(PlayerInfo[playerid][xNovac] < 1000) return SendErrorMessage(playerid, "Nemate dovoljno novca 1000$!");
				DajIgracuNovac(playerid, -1000);
				GiveWeaponToPlayer(playerid, 5, 1);
				format(varstring, sizeof(varstring), "* %s je kupio baseball bat.", ImeIgraca(playerid));
				PorukaRadius(8.0, playerid, varstring, LJUBICASTA);

				BusinessMoney(uFirmi[playerid], 200, playerid);
			}
			case 2:  {

				if(PlayerInfo[playerid][xNovac] < 6250) return SendErrorMessage(playerid, "Nemate dovoljno novca 6250$!");
				DajIgracuNovac(playerid, -6250);
				GiveWeaponToPlayer(playerid, 22, 100);
				format(varstring, sizeof(varstring), "* %s je kupio Colt 45.", ImeIgraca(playerid));
				PorukaRadius(8.0, playerid, varstring, LJUBICASTA);

				BusinessMoney(uFirmi[playerid], 1250, playerid);
			}
			case 3: {

				if(PlayerInfo[playerid][xNovac] < 12500) return SendErrorMessage(playerid, "Nemate dovoljno novca 12500$!");
				DajIgracuNovac(playerid, -12500);
				GiveWeaponToPlayer(playerid, 24, 50);
				format(varstring, sizeof(varstring), "* %s je kupio Desert Eagle.", ImeIgraca(playerid));
				PorukaRadius(8.0, playerid, varstring, LJUBICASTA);

				BusinessMoney(uFirmi[playerid], 2500, playerid);
			}
			case 4: {

				if(PlayerInfo[playerid][xNovac] < 20000) return SendErrorMessage(playerid, "Nemate dovoljno novca 20000$!");
				DajIgracuNovac(playerid, -20000);
				GiveWeaponToPlayer(playerid, 25, 50);
				format(varstring, sizeof(varstring), "* %s je kupio Shotgun.", ImeIgraca(playerid));
				PorukaRadius(8.0, playerid, varstring, LJUBICASTA);

				BusinessMoney(uFirmi[playerid], 4000, playerid);
			}
			case 5: {

				if(PlayerInfo[playerid][xNovac] < 30000) return SendErrorMessage(playerid, "Nemate dovoljno novca 30000$!");
				DajIgracuNovac(playerid, -30000);
				GiveWeaponToPlayer(playerid, 33, 50);
				format(varstring, sizeof(varstring), "* %s je kupio Country Rifle.", ImeIgraca(playerid));
				PorukaRadius(8.0, playerid, varstring, LJUBICASTA);

				BusinessMoney(uFirmi[playerid], 6000, playerid);
			}case 6: {

				if(PlayerInfo[playerid][xNovac] < 35000) return SendErrorMessage(playerid, "Nemate dovoljno novca 35000$!");
				DajIgracuNovac(playerid, -35000);
				GiveWeaponToPlayer(playerid, 34, 50);
				format(varstring, sizeof(varstring), "* %s je kupio Sniper Rifle.", ImeIgraca(playerid));
				PorukaRadius(8.0, playerid, varstring, LJUBICASTA);

				BusinessMoney(uFirmi[playerid], 7000, playerid);
			}
			case 7: {

				if(PlayerInfo[playerid][xNovac] < 20000) return SendErrorMessage(playerid, "Nemate dovoljno novca 20000$!");
				DajIgracuNovac(playerid, -20000);
				GiveWeaponToPlayer(playerid, 31, 150);
				format(varstring, sizeof(varstring), "* %s je kupio Sniper Rifle.", ImeIgraca(playerid));
				PorukaRadius(8.0, playerid, varstring, LJUBICASTA);

				BusinessMoney(uFirmi[playerid], 4000, playerid);
			}
			case 8: {

				if(PlayerInfo[playerid][xNovac] < 12500) return SendErrorMessage(playerid, "Nemate dovoljno novca 12500$!");
				DajIgracuNovac(playerid, -12500);
				GiveWeaponToPlayer(playerid, 29, 150);
				format(varstring, sizeof(varstring), "* %s je kupio SMG.", ImeIgraca(playerid));
				PorukaRadius(8.0, playerid, varstring, LJUBICASTA);

				BusinessMoney(uFirmi[playerid], 2500, playerid);
			}
			case 9: {

				if(PlayerInfo[playerid][xNovac] < 10000) return SendErrorMessage(playerid, "Nemate dovoljno novca 10000$!");
				DajIgracuNovac(playerid, -10000);
				Fusion_SetPlayerArmour(playerid, 100);
				format(varstring, sizeof(varstring), "* %s je kupio pancir.", ImeIgraca(playerid));
				PorukaRadius(8.0, playerid, varstring, LJUBICASTA);

				BusinessMoney(uFirmi[playerid], 2000, playerid);
			}
		}
	}
}
else if(dialogid == dialog_AKTORPANEL) {
	if(!response) return 1;
	if(response) {
		switch(listitem) {
			case 0: return SPD(playerid, dialog_KREIRAJAKTORA1, DSI, "{0077C7]KREIRANJE {FFFFFF]AKTORA", "Unesite ID skina aktora.\nPrimer: 294", "U redu", "Izlaz");
			case 1: return SPD(playerid, dialog_IZMENIAKTORA, DSL, "{0077C7]IZMENI {FFFFFF]AKTORA", "Promeni poziciju\nPromeni skin\nPromeni ime", "Izaberi", "Izlaz");
			case 2: return SPD(playerid, dialog_IZBRISIAKTORA, DSL, "{0077C7]IZBRISI {FFFFFF]AKTORA", "Najblizeg aktora\nID aktora", "Izaberi", "Izlaz");
		}
	}
}
else if(dialogid == dialog_KREIRAJAKTORA1) {
	if(!response) return 1;
	if(response) {
		new skinid, i = NextAktorID(MAX_AKTORI), Float:X, Float:Y, Float:Z, Float:A;
		if(sscanf(inputtext, "d", skinid)) return SPD(playerid, dialog_KREIRAJAKTORA1, DSI, "{0077C7]KREIRANJE {FFFFFF]AKTORA", "Unesite ID skina aktora.\nPrimer: 294", "U redu", "Izlaz");
		if(skinid > 311) return SPD(playerid, dialog_KREIRAJAKTORA1, DSI, "{FF1414]NEPOSTOJECI ID SKINA {FFFFFF](0-311)", "Unesite ID skina aktora.\nPrimer: 294", "U redu", "Izlaz");
		GetPlayerPos(playerid, X,Y,Z); GetPlayerFacingAngle(playerid, A);
		AktorInfo[i][aktorX] = X; AktorInfo[i][aktorY] = Y; AktorInfo[i][aktorZ] = Z; AktorInfo[i][aktorA] = A;
		AktorInfo[i][aktorskin] = skinid;
		AktorInfo[i][aktoranimacija] = 0;
		KreiraAktora[playerid] = i;
		SPD(playerid, dialog_KREIRAJAKTORA2, DSI, "{0077C7]KREIRANJE {FFFFFF]AKTORA", "Unesite ime aktora.\nPrimer: Obezbedjenje", "U redu", "Izlaz");
	}
}
else if(dialogid == dialog_KREIRAJAKTORA2) {
	if(!response) return 1;
	if(response) {
		new aktornick[40], str[56], i = KreiraAktora[playerid];
		if(sscanf(inputtext, "s[40]", aktornick)) return SPD(playerid, dialog_KREIRAJAKTORA2, DSI, "{0077C7]KREIRANJE {FFFFFF]AKTORA", "Unesite ime aktora.\nPrimer: Obezbedjenje", "U redu", "Izlaz");
		AktorInfo[i][aktorime] = aktornick;
		AktorInfo[i][aktorid] = CreateActor(AktorInfo[i][aktorskin], AktorInfo[i][aktorX], AktorInfo[i][aktorY], AktorInfo[i][aktorZ], AktorInfo[i][aktorA]);
		ApplyActorAnimation(AktorInfo[i][aktorid], "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0);
		SetPlayerPos(playerid, AktorInfo[i][aktorX]+2, AktorInfo[i][aktorY]+2, AktorInfo[i][aktorZ]);
		format(str, sizeof(str), ""col_server"%s", aktornick, i);
		AktorLabel[i] = Create3DTextLabel(str, 0xFFFFFFFF, AktorInfo[i][aktorX], AktorInfo[i][aktorY], AktorInfo[i][aktorZ]+1.0, 10.0, 0);
		SaveAktor(i);
	}
}
else if(dialogid == dialog_IZMENIAKTORA) {
	if(!response) return 1;
	if(response) {
		switch(listitem) {
			case 0: return SPD(playerid, dialog_IZMENIPOZICIJU, DSI, "{0077C7]MENJANJE {FFFFFF]POZICIJE", "Unesite ID aktora.", "U redu", "Izlaz");
			case 1: return SPD(playerid, dialog_IZMENISKIN, DSI, "{0077C7]MENJANJE {FFFFFF]SKINA", "Unesite ID skina.\n{FF1414]NAPOMENA: {FFFFFF]Menja skin aktoru najblizem Vama.", "U redu", "Izlaz");
			case 2: return SPD(playerid, dialog_IZMENIIME, DSI, "{0077C7]MENJANJE {FFFFFF]IMENA", "Unesite novo ime.\n{FF1414]NAPOMENA: {FFFFFF]Menja ime aktoru najblizem Vama.", "U redu", "Izlaz");
		}
	}
}
else if(dialogid == dialog_IZMENIPOZICIJU) {
	if(!response) return 1;
	if(response) {
		new i, Float:X, Float:Y, Float:Z, Float:A, str[60];
		if(sscanf(inputtext, "d", i)) return SPD(playerid, dialog_IZMENIPOZICIJU, DSI, "{0077C7]MENJANJE {FFFFFF]POZICIJE", "Unesite ID aktora.", "U redu", "Izlaz");
		GetPlayerPos(playerid, X,Y,Z); GetPlayerFacingAngle(playerid, A);
		SetPlayerPos(playerid, X+2, Y+2, Z);
		SetActorPos(AktorInfo[i][aktorid], X, Y, Z);
		SetActorFacingAngle(AktorInfo[i][aktorid], A);
		Delete3DTextLabel(AktorLabel[i]);
		format(str, sizeof(str), ""col_server"%s", AktorInfo[i][aktorime], i);
		AktorLabel[i] = Create3DTextLabel(str, 0xFFFFFFFF, X,Y,Z+1.0, 10.0, 0);
		AktorInfo[i][aktorX] = X; AktorInfo[i][aktorY] = Y; AktorInfo[i][aktorZ] = Z; AktorInfo[i][aktorA] = A;
		SaveAktor(i);
		SendInfoMessage(playerid, "Pozicija aktora promenjena.");
	}
}
else if(dialogid == dialog_IZMENISKIN) {
	if(!response) return 1;
	if(response) {
		new skinid, i = GetNearestAktor(playerid);
		if(i == -1) return SendClientMessage(playerid, 0x0077C7FF, "[AKTOR SYSTEM] {FFFFFF]Niste blizu aktora.");
		if(sscanf(inputtext, "d", skinid)) return SPD(playerid, dialog_IZMENISKIN, DSI, "{0077C7]MENJANJE {FFFFFF]SKINA", "Unesite ID skina.\n{FF1414]NAPOMENA: {FFFFFF]Menja skin aktoru najblizem Vama.", "U redu", "Izlaz");
		if(skinid > 311) return SPD(playerid, dialog_KREIRAJAKTORA1, DSI, "{FF1414]NEPOSTOJECI ID SKINA {FFFFFF](0-311)", "Unesite ID skina aktora.\nPrimer: 294", "U redu", "Izlaz");
		DestroyActor(AktorInfo[i][aktorid]);
		AktorInfo[i][aktorskin] = skinid;
		AktorInfo[i][aktorid] = CreateActor(AktorInfo[i][aktorskin], AktorInfo[i][aktorX], AktorInfo[i][aktorY], AktorInfo[i][aktorZ], AktorInfo[i][aktorA]);
		ApplyActorAnimation(AktorInfo[i][aktorid], "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0);
		SaveAktor(i);
		SendInfoMessage(playerid, "Skin aktora promenjen.");
	}
}
else if(dialogid == dialog_IZMENIIME) {
	if(!response) return 1;
	if(response) {
		new actime[40], str[60], i = GetNearestAktor(playerid);
		if(i == -1) return SendClientMessage(playerid, 0x0077C7FF, "[AKTOR SYSTEM] {FFFFFF]Niste blizu aktora.");
		if(sscanf(inputtext, "s[40]", actime)) return SPD(playerid, dialog_IZMENIIME, DSI, "{0077C7]MENJANJE {FFFFFF]IMENA", "Unesite novo ime.\n{FF1414]NAPOMENA: {FFFFFF]Menja ime aktoru najblizem Vama.", "U redu", "Izlaz");
		format(str, sizeof(str), ""col_server"%s", actime, i);
		Update3DTextLabelText(AktorLabel[i], 0xFFFFFFFF, str);
		AktorInfo[i][aktorime] = actime;
		SaveAktor(i);
		SendInfoMessage(playerid, "Ime aktora promenjeno.");
	}
}
else if(dialogid == dialog_IZBRISIAKTORA) {
	if(!response) return 1;
	if(response) {
		switch(listitem) {
			case 0: {
				if(GetNearestAktor(playerid) == -1) return SendClientMessage(playerid, 0x0077C7FF, "[AKTOR SYSTEM] {FFFFFF]Niste blizu aktora.");
				new i = GetNearestAktor(playerid), aktorFile[60];
				DestroyActor(AktorInfo[i][aktorid]);
				Delete3DTextLabel(AktorLabel[i]);
				AktorInfo[i][aktorX] = 0.0; AktorInfo[i][aktorY] = 0.0; AktorInfo[i][aktorZ] = 0.0; AktorInfo[i][aktorA] = 0.0;
				SendInfoMessage(playerid, "Aktor ID %d obrisan.", i);
				format(aktorFile, sizeof(aktorFile), AKTOR_FILE, i);
				if(fexist(aktorFile)) { fremove(aktorFile); }
			}
			case 1: return SPD(playerid, dialog_BRISANJEAKTORA, DSI, "{0077C7]BRISANJE {FFFFFF]AKTORA", "Unesite ID aktora.","U redu","Izlaz");
		}
	}
}
else if(dialogid == dialog_BRISANJEAKTORA) {
	if(!response) return 1;
	if(response) {
		new i, aktorFile[60];
		if(sscanf(inputtext, "%d", i)) return SPD(playerid, dialog_BRISANJEAKTORA, DSI, "{0077C7]BRISANJE {FFFFFF]AKTORA", "Unesite ID aktora.","U redu","Izlaz");
		DestroyActor(AktorInfo[i][aktorid]);
		Delete3DTextLabel(AktorLabel[i]);
		AktorInfo[i][aktorX] = 0.0; AktorInfo[i][aktorY] = 0.0; AktorInfo[i][aktorZ] = 0.0; AktorInfo[i][aktorA] = 0.0;
		SendInfoMessage(playerid, "Aktor ID %d obrisan.", i);
		format(aktorFile, sizeof(aktorFile), AKTOR_FILE, i);
		if(fexist(aktorFile)) { fremove(aktorFile); }
	}
}
else if(dialogid == dialog_PHARMACY)
{
	if(response == 1)
	{
		switch(listitem)
		{
			case 0:
			{
				if(PlayerInfo[playerid][xNovac] < 500) return SendErrorMessage(playerid, "Nemate dovoljno novca(500$).");
				SendInfoMessage(playerid, "Kupili ste bocicu solne kiseline.");
				DajIgracuNovac(playerid, -500);
				PlayerInfo[playerid][xSolna] += 10;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			case 1:
			{
				if(PlayerInfo[playerid][xNovac] < 850) return SendErrorMessage(playerid, "Nemate dovoljno novca(850$).");
				SendInfoMessage(playerid, "Kupili ste 5 pseudo tableta.");
				PlayerInfo[playerid][xPseudo] += 5;
				DajIgracuNovac(playerid, -850);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			case 2:
			{
				if(PlayerInfo[playerid][xNovac] < 650) return SendErrorMessage(playerid, "Nemate dovoljno novca(650$).");
				SendInfoMessage(playerid, "Kupili ste galon crvenog fosfora.");
				PlayerInfo[playerid][xCrvenif] += 10;
				DajIgracuNovac(playerid, -650);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			case 3:
			{
				if(PlayerInfo[playerid][xNovac] < 350) return SendErrorMessage(playerid, "Nemate dovoljno novca(350$).");
				SendInfoMessage(playerid, "Kupili ste bocicu Lysergic acida.");
				PlayerInfo[playerid][xLysAcid] += 5;
				DajIgracuNovac(playerid, -350);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			case 4:
			{
				if(PlayerInfo[playerid][xNovac] < 250) return SendErrorMessage(playerid, "Nemate dovoljno novca(250$).");
				SendInfoMessage(playerid, "Kupili ste 10 tableta kalcijuma.");
				PlayerInfo[playerid][xKalcij] += 10;
				DajIgracuNovac(playerid, -250);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			case 5:
			{
				if(PlayerInfo[playerid][xNovac] < 450) return SendErrorMessage(playerid, "Nemate dovoljno novca(450$).");
				SendInfoMessage(playerid, "Kupili ste bocicu Amonijum Hlorida.");
				PlayerInfo[playerid][xAmonijH] += 10;
				DajIgracuNovac(playerid, -450);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
		}
	}
}
else if(dialogid == dialog_ORMAR) {
	if(response == 1) {
		switch(listitem) {
			case 0: {
				if(II[inProperty[playerid]][iSkin][0] == 0)
				{
					SCM(playerid, BELA, "Spremili ste trenutnu odecu u ormar!");
					II[inProperty[playerid]][iSkin][0] = GetPlayerSkin(playerid);
					c_SetPlayerSkin(playerid, 154); PlayerInfo[playerid][xSkin] = 154; SaveProperty(inProperty[playerid]);
				}
				else if(II[inProperty[playerid]][iSkin][1] == 0)
				{
					SCM(playerid, BELA, "Spremili ste trenutnu odecu u ormar!");
					II[inProperty[playerid]][iSkin][1] = GetPlayerSkin(playerid);
					c_SetPlayerSkin(playerid, 154); PlayerInfo[playerid][xSkin] = 154; SaveProperty(inProperty[playerid]);
				}
				else if(II[inProperty[playerid]][iSkin][2] == 0)
				{
					SCM(playerid, BELA, "Spremili ste trenutnu odecu u ormar!");
					II[inProperty[playerid]][iSkin][2] = GetPlayerSkin(playerid);
					c_SetPlayerSkin(playerid, 154); PlayerInfo[playerid][xSkin] = 154; SaveProperty(inProperty[playerid]);
				}
				else return SendErrorMessage(playerid, "Nemate mesta za vise odece u ormaru.");
			}
			case 1: {
				ac_SetPlayerPos(playerid, 258.4893,-41.4008,1002.0234);
				ac_SetPlayerInterior(playerid, 14);
				SetPlayerFacingAngle(playerid, 270.0);
				SetPlayerCameraPos(playerid, 256.0815, -43.0475, 1004.0234);
				SetPlayerCameraLookAt(playerid, 258.4893, -41.4008, 1002.0234);
				TogglePlayerControllable(playerid, false);
				ApplyAnimation(playerid, "CLOTHES","CLO_Pose_Legs",4.1,1,0,0,0,0, 1);
				OrmarTDControl(playerid, true);
				PlayerTextDrawSetPreviewModel(playerid, Ormar[playerid][3], II[inProperty[playerid]][iSkin][0]);
				PlayerTextDrawSetPreviewModel(playerid, Ormar[playerid][4], II[inProperty[playerid]][iSkin][1]);
				PlayerTextDrawSetPreviewModel(playerid, Ormar[playerid][5], II[inProperty[playerid]][iSkin][2]);

				for(new i = 0; i < 10; i++) {
					PlayerTextDrawShow(playerid, Ormar[playerid][i]);
				}
				SelectTextDraw(playerid, 0x5D9FCEFF);
			}
		}
	}
}
else if(dialogid == dialog_KUPIKARTICU) {
	new string[128];
	if(response) {
		switch(listitem)  {
			case 0: {

				new randphone = 100000 + random(899999);
				format(string, sizeof(string), "064%d", randphone);
				PlayerInfo[playerid][xBrojTelefona] = strval(string);
				format(varstring, sizeof(varstring), "[MTS]: Vas novi broj mobilnog telefona je %d", strval(string));
				SCM(playerid, ZUTA, varstring);
			}
			case 1: {

				new randphone = 100000 + random(899999);
				format(string, sizeof(string), "061%d", randphone);
				PlayerInfo[playerid][xBrojTelefona] = strval(string);
				format(varstring, sizeof(varstring), "[A1]: Vas novi broj mobilnog telefona je %d", strval(string));
				SCM(playerid, ZUTA, varstring);
			}
			case 2: {

				new randphone = 100000 + random(899999);
				format(string, sizeof(string), "063%d", randphone);
				PlayerInfo[playerid][xBrojTelefona] = strval(string);
				format(varstring, sizeof(varstring), "[YETTEL]: Vas novi broj mobilnog telefona je %d", strval(string));
				SCM(playerid, ZUTA, varstring);
			}
		}
	}
}
else if(dialogid == dialog_BUY_MOBILEPHONE) {

	if(response) {

		switch(listitem)  {

			case 0: {

				if(PlayerInfo[playerid][xNovac] < 6985) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
				DajIgracuNovac(playerid, -6985);
				BusinessMoney(uFirmi[playerid], 3492, playerid);
				PlayerInfo[playerid][xModelTelefona] = 18865;
				SCM(playerid, BELA, "Uspesno ste kupili Samsung Galaxy S8!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

			}
			case 1: {

				if(PlayerInfo[playerid][xNovac] < 5351) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
				DajIgracuNovac(playerid, -5351);
				BusinessMoney(uFirmi[playerid], 2675, playerid);
				PlayerInfo[playerid][xModelTelefona] = 18866;
				SCM(playerid, BELA, "Uspesno ste kupili Samsung Galaxy A8!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

			}
			case 2: {

				if(PlayerInfo[playerid][xNovac] < 6101) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
				DajIgracuNovac(playerid, -6101);
				BusinessMoney(uFirmi[playerid], 3050, playerid);
				PlayerInfo[playerid][xModelTelefona] = 18867;
				SCM(playerid, BELA, "Uspesno ste kupili Sony Xperia XZ Premium!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

			}
			case 3: {

				if(PlayerInfo[playerid][xNovac] < 4568) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
				DajIgracuNovac(playerid, -4568);
				BusinessMoney(uFirmi[playerid], 2284, playerid);
				PlayerInfo[playerid][xModelTelefona] = 18868;
				SCM(playerid, BELA, "Uspesno ste kupili Apple iPhone X!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

			}
			case 4: {

				if(PlayerInfo[playerid][xNovac] < 3657) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
				DajIgracuNovac(playerid, -3657);
				BusinessMoney(uFirmi[playerid], 1828, playerid);
				PlayerInfo[playerid][xModelTelefona] = 18869;
				SCM(playerid, BELA, "Uspesno ste kupili LG G6!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

			}
			case 5: {

				if(PlayerInfo[playerid][xNovac] < 2657) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
				DajIgracuNovac(playerid, -2657);
				BusinessMoney(uFirmi[playerid], 1328, playerid);
				PlayerInfo[playerid][xModelTelefona] = 18870;
				SCM(playerid, BELA, "Uspesno ste kupili Huawei Honor 9!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

			}
			case 6: {

				if(PlayerInfo[playerid][xNovac] < 1245) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
				DajIgracuNovac(playerid, -1245);
				BusinessMoney(uFirmi[playerid], 622, playerid);
				PlayerInfo[playerid][xModelTelefona] = 18871;
				SCM(playerid, BELA, "Uspesno ste kupili Nokia 8!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

			}
			case 7: {

				if(PlayerInfo[playerid][xNovac] < 1278) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
				DajIgracuNovac(playerid, -1278);
				BusinessMoney(uFirmi[playerid], 639, playerid);
				PlayerInfo[playerid][xModelTelefona] = 18872;
				SCM(playerid, BELA, "Uspesno ste kupili Huawei P10!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

			}
			case 8: {

				if(PlayerInfo[playerid][xNovac] < 5975) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
				DajIgracuNovac(playerid, -5975);
				BusinessMoney(uFirmi[playerid], 2987, playerid);
				PlayerInfo[playerid][xModelTelefona] = 18873;
				SCM(playerid, BELA, "Uspesno ste kupili LG Q6!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

			}
			case 9: {

				if(PlayerInfo[playerid][xNovac] < 3422) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
				DajIgracuNovac(playerid, -3422);
				BusinessMoney(uFirmi[playerid], 1711, playerid);
				PlayerInfo[playerid][xModelTelefona] = 18874;
				SCM(playerid, BELA, "Uspesno ste kupili Blackberry Z30 LTE!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

			}
		}
	}
}
else if(dialogid == dialog_SEARCH_NAME && response && strlen(inputtext)) {

	if(GetPlayerIdFromName(inputtext) == INVALID_PLAYER_ID) {
		SCM(playerid, CRVENA, "Pogresno ime gradjanina.");
		return 1;
	}
	new SexTxt[7], ID = GetPlayerIdFromName(inputtext);

	if(PlayerInfo[ID][xPol] == 2) format(SexTxt, sizeof(SexTxt), "Zensko");
	else format(SexTxt, sizeof(SexTxt), "Musko");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
	format(DialogStrgEx, sizeof(DialogStrgEx), "Ime i prezime: %s\nPol: %s\nGodine: %d\n\nPosao: %s\nBroj mobilnog: %d\n\nZlocin : %s\nPrijavio : %s",
	ImeIgraca(ID), SexTxt, PlayerInfo[ID][xGodine], getJobName(PlayerInfo[ID][xPosao]), PlayerInfo[ID][xBrojTelefona], ZlocinInfo[ID][zZlocin], ZlocinInfo[ID][zPrijavio]);

	SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
	return true;}
else if(dialogid == dialog_SEARCH_NUMBERPLATE && response && strlen(inputtext)) {

	new string[64];

	if(ScriptIDVozila[strval(inputtext)] == -1) return SendErrorMessage(playerid, "Krivi unos.");

	new autoid = ScriptIDVozila[strval(inputtext)];

	format(string, sizeof(string), V_FILE, autoid);
	if(!fexist(string)) return SendErrorMessage(playerid, "Krivi unos.");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
	format(DialogStrgEx, sizeof(DialogStrgEx), "Model: %s\nRegistracija: 'LS - %d'\nVlasnik: %s", ImeVozila[VehicleInfo[autoid][vModel]-400], VehicleInfo[autoid][vID], VehicleInfo[autoid][vOwner]);
	SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

	return true;}
else if(dialogid == dialog_POSTAVIPOTERU && response && strlen(inputtext)) {

	new lala[32], tekst[64];
	if(sscanf(inputtext,"s[32]s[64]", lala, tekst)) return SendErrorMessage(playerid, "Krivi unos.");
	if(GetPlayerIdFromName(lala) == INVALID_PLAYER_ID) {
		SCM(playerid, CRVENA, "Pogresno ime gradjanina.");
		return 1;
	}
	new id = GetPlayerIdFromName(lala);
	if(id == playerid) return SendErrorMessage(playerid, "Ne mozete sebi dati wanted level!");
	if(GetFactionType(id) == ORG_TIP_PD) return SendErrorMessage(playerid, "Ne mozes dati wl policajcu.");
	PostaviWanted(id, tekst, ImeIgraca(playerid));
	return true;}
else if(dialogid == dialog_OCISTIDOSIJE && response && strlen(inputtext)) {

	if(GetPlayerIdFromName(inputtext) == INVALID_PLAYER_ID)
		{
		SCM(playerid, CRVENA, "Pogresno ime gradjanina.");
		return 1;
	}
	new ID = GetPlayerIdFromName(inputtext);
	PlayerInfo[ID][xWanted] = 0;
	Fusion_SetPlayerWantedLevel(ID, PlayerInfo[ID][xWanted]);
	strmid(ZlocinInfo[ID][zPrijavio], "Nema", 0, strlen("Nema"), 255);
	strmid(ZlocinInfo[ID][zPocinio], "Nema", 0, strlen("Nema"), 255);
	strmid(ZlocinInfo[ID][zZlocin], "Nema", 0, strlen("Nema"), 255);
	SendClientMessageEx(playerid, BELA, "Obrisali ste dosije gradjaninu %s.", ImeIgraca(ID));

	format(varstring, sizeof(varstring), "| CLEARWL | %s je ocistio WL igracu %s.", ImeIgraca(playerid), ImeIgraca(ID));
	AdminPoruka(SVETLOCRVENA, varstring);

	format(varstring, sizeof varstring, "| CLEARWL | %s je ocistio WL igracu %s.", ImeIgraca(playerid), ImeIgraca(ID));
	OrgPorukaLeader(PlayerInfo[playerid][xClan], 0xD2CFCFFF, varstring);
	return true;}
else if(dialogid == dialog_SELECTVDODATAK) {
	if(!response) return 1;
	if(response) {
		switch(listitem) {
			case 0: {
				SendInfoMessage(playerid, "Uspesno ste stavili dodatak. Da skinete (/dodacioff)");
				SetPlayerAttachedObject(playerid,0, 19078, 4, -0.067000,0.053999,0.018000,-168.400039,-169.800003,-2.800000,1.000000,1.000000,1.000000);
			}
			case 1: {
				//if(PlayerInfo[playerid][xVIPLevel] < 2) return SendErrorMessage(playerid, "Ovaj dodatak moze koristiti samo VIP Level 2+.");
				SendInfoMessage(playerid, "Uspesno ste stavili dodatak. Da skinete (/dodacioff)");
				SetPlayerAttachedObject(playerid,0, 1274, 2, 0.554999,0.000000,0.041999,0.041999,82.499847,151.599792,1.000000,1.000000,1.000000);
				
			}
			case 2: {
				//if(PlayerInfo[playerid][xVIPLevel] < 3) return SendErrorMessage(playerid, "Ovaj dodatak moze koristiti samo VIP Level 3+.");
				SendInfoMessage(playerid, "Uspesno ste stavili dodatak. Da skinete (/dodacioff)");
				SetPlayerAttachedObject(playerid, 6, 19086, 8, -0.049768, -0.014062, -0.108385, 87.458297, 263.478149, 184.123764, 0.622413, 1.041609, 1.012785);
			}
			case 3: {
				//if(PlayerInfo[playerid][xVIPLevel] < 4) return SendErrorMessage(playerid, "Ovaj dodatak moze koristiti samo VIP Level 4+.");
				SendInfoMessage(playerid, "Uspesno ste stavili dodatak. Da skinete (/dodacioff)");
				SetPlayerAttachedObject(playerid,0,  1328,1,-0.128000,0.064999,0.016000,1.700000,86.299995, 0.000000, 1.099999,1.205999,1.000000);
				
			}
			case 4: {
				//if(PlayerInfo[playerid][xVIPLevel] < 5) return SendErrorMessage(playerid, "Ovaj dodatak moze koristiti samo VIP Level 5+.");
				SendInfoMessage(playerid, "Uspesno ste stavili dodatak. Da skinete (/dodacioff)");
				SetPlayerAttachedObject(playerid,0, 19583,2,0.299000,0.000000,0.131999,101.199996,0.000000,-36.400005,1.000000,1.000000,1.000000);
			}
			case 5: {
				//if(PlayerInfo[playerid][xVIPLevel] < 5) return SendErrorMessage(playerid, "Ovaj dodatak moze koristiti samo VIP Level 6+.");
				SendInfoMessage(playerid, "Uspesno ste stavili dodatak. Da skinete (/dodacioff)");
				SetPlayerAttachedObject(playerid,0, 11704,2,0.064999,0.086999,-0.001999,0.000000,81.999984,179.799987,0.311999,0.619999,0.465999);
			}
			case 6: {
				//if(PlayerInfo[playerid][xVIPLevel] < 5) return SendErrorMessage(playerid, "Ovaj dodatak moze koristiti samo VIP Level 7+.");
				SendInfoMessage(playerid, "Uspesno ste stavili dodatak. Da skinete (/dodacioff)");
				SetPlayerAttachedObject(playerid,0, 18702,1,-0.487999, 0.103999,-1.629000,0.000000, 0.000000, 0.000000,1.000000,1.000000,1.000000);
			}
			case 7: {
				//if(PlayerInfo[playerid][xVIPLevel] < 5) return SendErrorMessage(playerid, "Ovaj dodatak moze koristiti samo VIP Level 8+.");
				SetPlayerAttachedObject(playerid, 6, 18645, 2, 0.017478, 0.051500, 0.003912, 285.055511, 90.860740, 171.179550, 1.780549, 0.912008, 1.208514);
				SetPlayerAttachedObject(playerid, 7, 18690, 2, -2.979508, 0.306475, -0.388553, 285.055511, 90.860740, 171.179550, 1.780549, 0.912008, 1.208514);
				SetPlayerAttachedObject(playerid, 8, 18716, 2, -2.979508, 0.306475, -0.388553, 285.055511, 90.860740, 171.179550, 1.780549, 0.912008, 1.208514);
				SendInfoMessage(playerid, "Uspesno ste stavili dodatak. Da skinete (/dodacioff)");
			}
			case 8: {
				//if(PlayerInfo[playerid][xVIPLevel] < 5) return SendErrorMessage(playerid, "Ovaj dodatak moze koristiti samo VIP Level 8+.");
				SetPlayerAttachedObject(playerid, 6, 18693, 5, 1.983503, 1.558882, -0.129482, 86.705787, 308.978118, 268.198822, 1.500000, 1.500000, 1.500000);
				SetPlayerAttachedObject(playerid, 7, 18693, 6, 1.983503, 1.558882, -0.129482, 86.705787, 308.978118, 268.198822, 1.500000, 1.500000, 1.500000);
				SetPlayerAttachedObject(playerid, 8, 18703, 6, 1.983503, 1.558882, -0.129482, 86.705787, 308.978118, 268.198822, 1.500000, 1.500000, 1.500000);
				SetPlayerAttachedObject(playerid, 9, 18703, 5, 1.983503, 1.558882, -0.129482, 86.705787, 308.978118, 268.198822, 1.500000, 1.500000, 1.500000);
				SetPlayerAttachedObject(playerid, 4, 18965, 2, 0.111052, 0.021643, -0.000846, 92.280899, 92.752510, 358.071044, 1.200000, 1.283168, 1.200000);
				SendInfoMessage(playerid, "Uspesno ste stavili dodatak. Da skinete (/dodacioff)");
			}
		}
	}
}
else if(dialogid == dialog_OPREMA) {
	if(response) {
		switch(listitem) {
			case 0: {
				ResetAllWeapons(playerid);
				c_SetPlayerSkin(playerid, 284);
				GiveWeaponToPlayer(playerid, 3, 1);
				GiveWeaponToPlayer(playerid, 41, 500);
				GiveWeaponToPlayer(playerid, 24, 100);
				c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
				format(varstring, sizeof(varstring), "* %s je upravo uzeo patrolnu opremu.", ImeIgraca(playerid));
				PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
			}
			case 1: {
				ResetAllWeapons(playerid);
				c_SetPlayerSkin(playerid, 280);
				GiveWeaponToPlayer(playerid, 3, 1);
				GiveWeaponToPlayer(playerid, 24, 100);
				GiveWeaponToPlayer(playerid, 25, 100);
				c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
				format(varstring, sizeof(varstring), "* %s je upravo uzeo standardnu opremu.", ImeIgraca(playerid));
				PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
			}
			case 2: {
				if(PlayerInfo[playerid][xRank] >= 2) {
					c_SetPlayerSkin(playerid, 165);
					ResetAllWeapons(playerid);
					GiveWeaponToPlayer(playerid, 3, 1);
					GiveWeaponToPlayer(playerid, 24, 100);
					GiveWeaponToPlayer(playerid, 25, 100);
					GiveWeaponToPlayer(playerid, 29, 500);
					c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
					format(varstring, sizeof(varstring), "* %s je upravo uzeo specijalnu opremu.", ImeIgraca(playerid));
					PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
				} else return SendErrorMessage(playerid, "Nemate dovoljni rank(2+).");

			}
			case 3: {
				if(PlayerInfo[playerid][xRank] >= 1) {
					c_SetPlayerSkin(playerid, 283);
					ResetAllWeapons(playerid);
					GiveWeaponToPlayer(playerid, 24, 100);
					GiveWeaponToPlayer(playerid, 29, 500);
					GiveWeaponToPlayer(playerid, 31, 500);
					c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
					format(varstring, sizeof(varstring), "* %s je upravo uzeo profesionalnu opremu.", ImeIgraca(playerid));
					PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
				} else return SendErrorMessage(playerid, "Nemate dovoljni rank(1+).");
			}
			case 4: {
				if(PlayerInfo[playerid][xRank] >= 3) {
					c_SetPlayerSkin(playerid, 310);
					ResetAllWeapons(playerid);
					GiveWeaponToPlayer(playerid, 24, 100);
					GiveWeaponToPlayer(playerid, 34, 100);
					c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
					format(varstring, sizeof(varstring), "* %s je upravo uzeo snajpersku opremu.", ImeIgraca(playerid));
					PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
				} else return SendErrorMessage(playerid, "Nemate dovoljni rank(3+).");
			}
			case 5: {
				Fusion_SetPlayerArmour(playerid, 100);
				format(varstring, sizeof(varstring), "* %s je upravo uzeo nesto iz ormara.", ImeIgraca(playerid));
				PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
			}
			case 6: {
				Fusion_SetPlayerHealth(playerid, 100);
				format(varstring, sizeof(varstring), "* %s je upravo uzeo nesto iz ormara.", ImeIgraca(playerid));
				PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
			}
			case 7: {
				if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_LHAND)) {
					SCM(playerid, CRVENA, "Vec imas neki objekt u lijevoj ruci!");
					return 1;
				}
				RiotShield[playerid] = true;
				SetPlayerAttachedObject(playerid, OBJECT_SLOT_LHAND, 18637, 3, 0.297411, -0.252804, -0.022625, 0.626678, 1.138009, 82.256072, 1, 1, 1);
				SendInfoMessage(playerid, "Uzeli ste Riot Shield iz Armoury-a.");
				format(varstring, sizeof(varstring), "* %s je uzeo Riot Shield iz Armoury-a.", ImeIgraca(playerid));
				PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			}
			case 8: {
				if(PlayerInfo[playerid][xRank] >= 1) {
					c_SetPlayerSkin(playerid, 285);
					Fusion_SetPlayerHealth(playerid, 100);
					Fusion_SetPlayerArmour(playerid, 150);
					format(varstring, sizeof(varstring), "* %s je upravo obukao swat opremu.", ImeIgraca(playerid));
					PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
				} else return SendErrorMessage(playerid, "Nemate dovoljni rank(1+).");
			}
			case 9: {
				BrojLisica[playerid] = 10;
				SendInfoMessage(playerid, "Uzeli ste 10 para lisica iz ormara.");
				format(varstring, sizeof(varstring), "* %s je upravo uzeo nesto iz ormara.", ImeIgraca(playerid));
				PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
			}
			case 10: {
				TazerMetkovi[playerid] = 100;
				SendInfoMessage(playerid, "Uzeli ste 100 metkova tazera iz ormara.");
				format(varstring, sizeof(varstring), "* %s je upravo uzeo nesto iz ormara.", ImeIgraca(playerid));
				PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
			  ]
		}
	}
}
else if(dialogid == dialog_VEHICLEWEPTAKE) {
	new wepname[32];
	if(response == 1)  {
		switch(listitem) {
			case 0: {
				if(VehicleInfo[TrunkVehicle[playerid]][vWeap1] == 0) {
					SendErrorMessage(playerid, "Nemate oruzja u tom slotu.");
					return 1;
				}
				if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete uzeti oruzje, imate zabranu - /disarmtime.");

				format(wepname, sizeof(wepname), "%s", WeapNames[VehicleInfo[TrunkVehicle[playerid]][vWeap1]]);
				antiCheatCS[playerid][WeaponDetect] = 3;
				GiveWeaponToPlayer(playerid, VehicleInfo[TrunkVehicle[playerid]][vWeap1], VehicleInfo[TrunkVehicle[playerid]][vAmmo1]);
				VehicleInfo[TrunkVehicle[playerid]][vWeap1] = 0;
				VehicleInfo[TrunkVehicle[playerid]][vAmmo1] = 0;
				SaveVehicle(TrunkVehicle[playerid]);

				format(varstring, sizeof(varstring), "* %s vadi %s iz prtljaznika.", ImeIgraca(playerid), wepname);
				PorukaRadius(5, playerid, varstring, LJUBICASTA);
			}
			case 1: {
				if(VehicleInfo[TrunkVehicle[playerid]][vWeap2] == 0) {
					SendErrorMessage(playerid, "Nemate oruzja u tom slotu.");
					return 1;
				}
				if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete uzeti oruzje, imate zabranu - /disarmtime.");

				format(wepname, sizeof(wepname), "%s", WeapNames[VehicleInfo[TrunkVehicle[playerid]][vWeap2]]);
				antiCheatCS[playerid][WeaponDetect] = 3;
				GiveWeaponToPlayer(playerid, VehicleInfo[TrunkVehicle[playerid]][vWeap2], VehicleInfo[TrunkVehicle[playerid]][vAmmo2]);
				VehicleInfo[TrunkVehicle[playerid]][vWeap2] = 0;
				VehicleInfo[TrunkVehicle[playerid]][vAmmo2] = 0;
				SaveVehicle(TrunkVehicle[playerid]);

				format(varstring, sizeof(varstring), "* %s vadi %s iz prtljaznika.", ImeIgraca(playerid), wepname);
				PorukaRadius(5, playerid, varstring, LJUBICASTA);
			}
			case 2: {
				if(VehicleInfo[TrunkVehicle[playerid]][vMelee] == 0) {
					SendErrorMessage(playerid, "Nemate oruzja u tom slotu.");
					return 1;
				}
				if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete uzeti oruzje, imate zabranu - /disarmtime.");

				format(wepname, sizeof(wepname), "%s", WeapNames[VehicleInfo[TrunkVehicle[playerid]][vMelee]]);
				antiCheatCS[playerid][WeaponDetect] = 3;
				GiveWeaponToPlayer(playerid, VehicleInfo[TrunkVehicle[playerid]][vMelee], 1);
				VehicleInfo[TrunkVehicle[playerid]][vMelee] = 0;
				SaveVehicle(TrunkVehicle[playerid]);

				format(varstring, sizeof(varstring), "* %s vadi %s iz prtljaznika.", ImeIgraca(playerid), wepname);
				PorukaRadius(5, playerid, varstring, LJUBICASTA);
			}
		}
	}
}
else if(dialogid == dialog_MUNifORM)
{
	if(response == 1)
	{
		switch(listitem)
		{
			case 0:
			{
				PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
				SendInfoMessage(playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
				format(varstring, sizeof(varstring), "* %s oblaci svoju radnu uniformu i priprema se za posao.", ImeIgraca(playerid));
				PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
				c_SetPlayerSkin(playerid, 70);
			}
			case 1:
			{
				PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
				SendInfoMessage(playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
				format(varstring, sizeof(varstring), "* %s oblaci svoju radnu uniformu i priprema se za posao.", ImeIgraca(playerid));
				PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
				c_SetPlayerSkin(playerid, 274);
			}
			case 2:
			{
				PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
				SendInfoMessage(playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
				format(varstring, sizeof(varstring), "* %s oblaci svoju radnu uniformu i priprema se za posao.", ImeIgraca(playerid));
				PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
				c_SetPlayerSkin(playerid, 275);
			}
			case 3:
			{
				PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
				SendInfoMessage(playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
				format(varstring, sizeof(varstring), "* %s oblaci svoju radnu uniformu i priprema se za posao.", ImeIgraca(playerid));
				PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
				c_SetPlayerSkin(playerid, 276);
			}
		}
	}
}
else if(dialogid == dialog_ZAHTEVTP) {
	if(response) {
		EnableAntiCheatForPlayer(playerid, 2, 0);
		EnableAntiCheatForPlayer(playerid, 7, 0);
		EnableAntiCheatForPlayer(playerid, 9, 0);
		EnableAntiCheatForPlayer(playerid, 0, 0);
		new Float:pozp[3], igrac = TPZahtev[playerid];
		GetPlayerPos(playerid, pozp[0], pozp[1], pozp[2]);
		if(GetPlayerState(igrac) == 2) {
			ac_SetVehiclePos(GetPlayerVehicleID(igrac), pozp[0]+1, pozp[1]+1, pozp[2]);
			ac_SetPlayerInterior(igrac, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(igrac, GetPlayerVirtualWorld(playerid));
		}
		else {
			ac_SetPlayerPos(igrac, pozp[0]+1, pozp[1]+1, pozp[2]);
			ac_SetPlayerInterior(igrac, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(igrac, GetPlayerVirtualWorld(playerid));
		}

		SendInfoMessage(igrac, "Teleportirani ste do igraca: %s", ImeIgraca(playerid));
		SendInfoMessage(playerid, "%s se teleportovao do vas.", ImeIgraca(igrac));
		if(inOrgInt[playerid] != -1) {
			inOrgInt[igrac] = inOrgInt[playerid];
		}

		if(uInterijeru[playerid] != -1) {
			uInterijeru[igrac] = uInterijeru[playerid];
		}

		if(PlayerInfo[playerid][xAdmin] < 6) {
			format(varstring, sizeof(varstring), "GOTO | %s se portao do igraca: %s", ImeIgraca(igrac), ImeIgraca(playerid));
			RPTChat(NARACRVENA, varstring);
		}

		if(PlayerInfo[playerid][xVIPLevel] >= 1) GotoCMD[playerid] = 60;
		if(PlayerInfo[playerid][xPromoter] >= 1) GotoCMD[playerid] = 120;
		if(PlayerInfo[playerid][xYouTuber] >= 1) GotoCMD[playerid] = 120;

		TPZahtev[igrac] = -1;
		TPZahtev[playerid] = -1;
		
		EnableAntiCheatForPlayer(playerid, 2, 1);
		EnableAntiCheatForPlayer(playerid, 7, 1);
		EnableAntiCheatForPlayer(playerid, 9, 1);
		EnableAntiCheatForPlayer(playerid, 0, 1);
	}
	else {
		SendErrorMessage(TPZahtev[playerid], "Igrac je odbio Vas zahtev za teleport.");
		KillTimer(GotoTimer[TPZahtev[playerid]]);
		KillTimer(GotoTimer[playerid]);
		TPZahtev[TPZahtev[playerid]] = -1;
		TPZahtev[playerid] = -1;
		EnableAntiCheatForPlayer(playerid, 2, 1);
		EnableAntiCheatForPlayer(playerid, 7, 1);
		EnableAntiCheatForPlayer(playerid, 9, 1);
		EnableAntiCheatForPlayer(playerid, 0, 1);
	}
	return true;}
else if(dialogid == dialog_TAXIOFFER) {
	if(response) {
		new string[39];

		TaximetarUkljucen[offeredByCabbie[playerid]] = true;
		CenaVoznje[offeredByCabbie[playerid]] = 1;
		VoziIgracaID[offeredByCabbie[playerid]] = playerid;

		PlayerTextDrawShow(playerid, TaxistaTD[playerid][0]);
		PlayerTextDrawShow(playerid, TaxistaTD[playerid][1]);
		PlayerTextDrawShow(playerid, TaxistaTD[playerid][2]);
		PlayerTextDrawShow(playerid, TaxistaTD[playerid][3]);
		PlayerTextDrawShow(playerid, TaxistaTD[playerid][4]);
		PlayerTextDrawShow(playerid, TaxistaTD[playerid][5]);
		PlayerTextDrawShow(playerid, TaxistaTD[playerid][7]);
		PlayerTextDrawShow(playerid, TaxistaTD[playerid][8]);
		PlayerTextDrawShow(playerid, TaxistaTD[playerid][10]);
		PlayerTextDrawShow(playerid, TaxistaTD[playerid][11]);

		format(string, sizeof(string), "%s", GetPlayerLocation(playerid));
		PlayerTextDrawSetString(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][6], string);

		format(string, sizeof(string), "%s", GetPlayerLocation(playerid));
		PlayerTextDrawSetString(playerid, TaxistaTD[playerid][6], string);

		format(string, sizeof(string), "%d$", CenaVoznje[offeredByCabbie[playerid]]);
		PlayerTextDrawSetString(offeredByCabbie[offeredByCabbie[playerid}}, TaxistaTD[offeredByCabbie[playerid]][9], string);

		format(string, sizeof(string), "%d$", CenaVoznje[offeredByCabbie[playerid]]);
		PlayerTextDrawSetString(playerid, TaxistaTD[playerid][9], string);

		PlayerTextDrawShow(playerid, TaxistaTD[playerid][6]);
		PlayerTextDrawShow(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][6]);
		PlayerTextDrawShow(playerid, TaxistaTD[playerid][9]);
		PlayerTextDrawShow(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][9]);

		SCM(offeredByCabbie[playerid], ZUTA, "Klijent je prihvatio voznju!");
		SCM(playerid, ZUTA, "Ukoliko taxista abjusa te ne zeli stati kucajte /stoptaxi te slikajte i prijaviti na forum.");
		SCM(playerid, ZUTA, "U suprutnom ne kucajte vec samo izadjite na lokaciji gdje vas odveze inace cete biti kaznjeni!");

		TaxiTimer[offeredByCabbie[playerid]] = SetTimerEx("Taxitimer", 6000, true, "i", offeredByCabbie[playerid]);
	}
	else
	{
		SCM(playerid, ZUTA, "Odbio si voznju!");

		if(offeredByCabbie[playerid] != IPI) SCM(offeredByCabbie[playerid], ZUTA, "Klijent je odbio voznju!");

		offeredByCabbie[playerid] = INVALID_PLAYER_ID;
	}
}
else if(dialogid == dialog_KIOSK) {
	if(response == 1) {
		switch(listitem) {
			case 0: {
				if(PlayerInfo[playerid][xBrojTelefona] == 0) return SendErrorMessage(playerid, " Nemate mobilni telefon!");
				if(PlayerInfo[playerid][xNovac] < 2000) return SendErrorMessage(playerid, " Nemate dovoljno novca 2000$!");
				PlayerInfo[playerid][xTelefonBon] += 2000;
				DajIgracuNovac(playerid, -2000);
				SCM(playerid, BELA, "Kupili ste 2000 kredita za 2000$!") ;
				SavePlayer(playerid); BusinessTrafikaMoney(playerid, 1200);
				EnableAntiCheatForPlayer(playerid, 39, 1);
			}
			case 1: {
				if(PlayerInfo[playerid][xBrojTelefona] == 0) return SendErrorMessage(playerid, " Nemate mobilni telefon!");
				if(PlayerInfo[playerid][xNovac] < 5000) return SendErrorMessage(playerid, " Nemate dovoljno novca 5000$!");
				PlayerInfo[playerid][xTelefonBon] += 5000;
				DajIgracuNovac(playerid, -5000);
				SCM(playerid, BELA, "Kupili ste 5000 kredita za 5000$!") ;
				SavePlayer(playerid); BusinessTrafikaMoney(playerid, 1500);
				EnableAntiCheatForPlayer(playerid, 39, 1);
			}
			case 2: {
				if(PlayerInfo[playerid][xBrojTelefona] == 0) return SendErrorMessage(playerid, " Nemate mobilni telefon!");
				if(PlayerInfo[playerid][xNovac] < 10000) return SendErrorMessage(playerid, " Nemate dovoljno novca 10000$!");
				PlayerInfo[playerid][xTelefonBon] += 10000;
				DajIgracuNovac(playerid, -10000);
				SCM(playerid, BELA, "Kupili ste 10000 kredita za 10000$!") ;
				SavePlayer(playerid); BusinessTrafikaMoney(playerid, 5000);
				EnableAntiCheatForPlayer(playerid, 39, 1);
			}
			case 3: {
				if(PlayerInfo[playerid][xBrojTelefona] == 0) return SendErrorMessage(playerid, " Nemate mobilni telefon!");
				if(PlayerInfo[playerid][xNovac] < 50000) return SendErrorMessage(playerid, " Nemate dovoljno novca 50000$!");
				PlayerInfo[playerid][xTelefonBon] += 50000;
				DajIgracuNovac(playerid, -50000);
				SCM(playerid, BELA, "Kupili ste 50000 kredita za 50000$!") ;
				SavePlayer(playerid); BusinessTrafikaMoney(playerid, 5000);
				EnableAntiCheatForPlayer(playerid, 39, 1);
			}
			case 4: {
				if(PlayerInfo[playerid][xNovac] < 3000) return SendErrorMessage(playerid, " Nemate dovoljno novca 3000$!");
				DajIgracuNovac(playerid, -3000);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				SCM(playerid, BELA, "Kupili ste sprite za 30$!"); BusinessTrafikaMoney(playerid, 1500);
				EnableAntiCheatForPlayer(playerid, 39, 1);
			}
			case 5: {
				if(PlayerInfo[playerid][xNovac] < 7000) return SendErrorMessage(playerid, " Nemate dovoljno novca 7000$!");
				new Float:Health; GetPlayerHealth(playerid, Health);
				if(Health >= 100) return SendErrorMessage(playerid, "Vec imas 100HP.");
				//DajIgracuGlad(playerid, 5);
				format(varstring, sizeof(varstring), "* %s jede cokoladicu.", ImeIgraca(playerid));
				PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
				OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				DodajIgracuHP(playerid, 20);
				DajIgracuNovac(playerid, -7000); BusinessTrafikaMoney(playerid, 5000);
				EnableAntiCheatForPlayer(playerid, 39, 1);
			}
			case 6:
			{
				if(PlayerInfo[playerid][xNovac] < 1700) return SendErrorMessage(playerid, "Nemate dovoljno novca 1700$!");
				DajIgracuNovac(playerid, -1700);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
				SCM(playerid,-1,"Kupili ste pivo za 1700$!"); BusinessTrafikaMoney(playerid, 850);
				EnableAntiCheatForPlayer(playerid, 39, 1);
			}
			case 7: {
				if(PlayerInfo[playerid][xNovac] < 1200) return SendErrorMessage(playerid, "Nemate dovoljno novca 1200$!");
				DajIgracuNovac(playerid, -1200);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				SCM(playerid, BELA, "Kupili ste coca colu za 120$!"); BusinessTrafikaMoney(playerid, 520);
				EnableAntiCheatForPlayer(playerid, 39, 1);
			}
			case 8: {
				if(PlayerInfo[playerid][xNovac] < 10000) return SendErrorMessage(playerid, "Nemate dovoljno novca 10000$!");
				PlayerInfo[playerid][xCigare] += 20;
				DajIgracuNovac(playerid, -10000);
				SCM(playerid, BELA, "Kupili ste kutiju cigareta koja sadrzi 20 cigara za 10000$!");
				SCM(playerid, BELA, "Da pusis cigare koristi /uzmicigaretu.");
				SavePlayer(playerid); BusinessTrafikaMoney(playerid, 4000);
				EnableAntiCheatForPlayer(playerid, 39, 1);
			}
			case 9: {
				if(PlayerInfo[playerid][xUpaljac] == 1) return SendErrorMessage(playerid, "Vec posedujes upaljac!");
				if(PlayerInfo[playerid][xNovac] < 7000) return SendErrorMessage(playerid, "Nemate dovoljno novca 7000$!");
				PlayerInfo[playerid][xUpaljac] = 1;
				DajIgracuNovac(playerid, -7000);
				SCM(playerid, BELA, "Kupili ste upaljac za 7000$!");
				SCM(playerid, BELA, "Da pusis cigare koristi /uzmicigaretu.");
				SavePlayer(playerid); BusinessTrafikaMoney(playerid, 4000);
				EnableAntiCheatForPlayer(playerid, 39, 1);
			}
			case 10: {
				if(PlayerInfo[playerid][xNovac] < 7000) return SendErrorMessage(playerid, "Nemate dovoljno novca 7000$!");
				GiveWeaponToPlayer(playerid, 41, 450);
				DajIgracuNovac(playerid, -1500);
				SendInfoMessage(playerid,"Kupili ste sprej za 1500$.");
				EnableAntiCheatForPlayer(playerid, 39, 1);
			}
		}
	}
}
else if(dialogid == dialog_SPAWNCHANGE) {
	if(response) {
		switch(listitem) {
			case 0: {
				if(PlayerInfo[playerid][xSpawn] == SPAWN_OBICAN_LS_1) return SendErrorMessage(playerid, "Spawn ti je vec postavljen na uobicajni u LSu!");
				PlayerInfo[playerid][xSpawn] = SPAWN_OBICAN_LS_1; SavePlayer(playerid);
				SCM(playerid, BELA, "Postavili ste spawn na uobicajni u LSu 1.");
			}
			case 1: {
				if(PlayerInfo[playerid][xClan] < 1) return SendErrorMessage(playerid, "Nisi clan nijedne organizacije.");
				PlayerInfo[playerid][xSpawn] = SPAWN_BAZA; SavePlayer(playerid);
				SCM(playerid, BELA, "Od sada cete se spawnati u bazi orge/mafije/bande.");
			}
			case 2: {
				if(PlayerInfo[playerid][xSpawn] == SPAWN_IMOVINA_1) return SendErrorMessage(playerid, "Spawn ti je vec postavljen na imovinu 1!");
				if(PlayerInfo[playerid][xProperty][0] == -1) return SendErrorMessage(playerid, "Nemas imovinu 1!");
				PlayerInfo[playerid][xSpawn] = SPAWN_IMOVINA_1; SavePlayer(playerid);
				SCM(playerid, BELA, "Od sada cete se spawnati u imovini 1.");
			}
			case 3: {
				if(PlayerInfo[playerid][xSpawn] == SPAWN_IMOVINA_2) return SendErrorMessage(playerid, "Spawn ti je vec postavljen na imovinu 2!");
				if(PlayerInfo[playerid][xProperty][1] == -1) return SendErrorMessage(playerid, "Nemas imovinu 2!");
				PlayerInfo[playerid][xSpawn] = SPAWN_IMOVINA_2; SavePlayer(playerid);
				SCM(playerid, BELA, "Od sada cete se spawnati u imovini 2.");
			}
			case 4: {
				if(PlayerInfo[playerid][xSpawn] == SPAWN_IMOVINA_3) return SendErrorMessage(playerid, "Spawn ti je vec postavljen na imovinu 3!");
				if(PlayerInfo[playerid][xProperty][2] == -1) return SendErrorMessage(playerid, "Nemas imovinu 3!");
				PlayerInfo[playerid][xSpawn] = SPAWN_IMOVINA_3; SavePlayer(playerid);
				SCM(playerid, BELA, "Od sada cete se spawnati u imovini 3.");
			}
			case 5: {
				if(PlayerInfo[playerid][xSpawn] == SPAWN_RENTHOTEL) return SendErrorMessage(playerid, "Spawn ti je vec postavljen na hotelsku sobu!");
				if(PlayerInfo[playerid][xHotelRoom] == -1) return SendErrorMessage(playerid, "Ne mozete staviti spawn na sobu u hotelu jer je niste iznajmili.");
				PlayerInfo[playerid][xSpawn] = SPAWN_RENTHOTEL;
				SavePlayer(playerid);
				SCM(playerid, BELA, "Od sada cete se spawnati u iznajmljenoj sobi u hotelu.");
			}
			case 6: {
				if(PlayerInfo[playerid][xSpawn] == SPAWN_RENT) return SendErrorMessage(playerid, "Spawn ti je vec postavljen na iznajmljenu sobu!");
				if(PlayerInfo[playerid][xRentID] == -1) return SendErrorMessage(playerid, "Ne mozete staviti spawn na iznajmljenu sobu jer je niste iznajmili.");
				PlayerInfo[playerid][xSpawn] = SPAWN_RENT;
				SavePlayer(playerid);
				SCM(playerid, BELA, "Od sada cete se spawnati u iznajmljenoj sobi.");
			}
			case 7: {
				if(PlayerInfo[playerid][xSpawn] == SPAWN_ADMIN) return SendErrorMessage(playerid, "Spawn ti je vec postavljen na Admin bazu!");
				if(PlayerInfo[playerid][xAdmin] >= 1) {
					PlayerInfo[playerid][xSpawn] = SPAWN_ADMIN;
					SavePlayer(playerid);
					SCM(playerid, BELA, "Od sada cete se spawnati u Admin bazi.");
				}
				else return SendErrorMessage(playerid, "Samo Admini.");
			}
			case 8: {
				if(PlayerInfo[playerid][xSpawn] == SPAWN_HELPER) return SendErrorMessage(playerid, "Spawn ti je vec postavljen na Helper bazu!");
				if(PlayerInfo[playerid][xHelper] >= 1) {
					PlayerInfo[playerid][xSpawn] = SPAWN_HELPER;
					SavePlayer(playerid);
					SCM(playerid, BELA, "Od sada cete se spawnati u Helper bazi.");
				}
				else return SendErrorMessage(playerid, "Samo Helperi.");
			}
		}
	}
}
else if(dialogid == dialog_KREDIT) {
	if(!response) return 1;
	if(response){
		if(PlayerInfo[playerid][xPreostaloZaOtplatu] > 0) return SendErrorMessage(playerid, "Vec imate podignut kredit!");
		switch(listitem) {
			case 0: {
				if(PlayerInfo[playerid][xLevel] < 5) return SendErrorMessage(playerid, "Morate biti level 5+ za ovaj kredit!");
				PlayerInfo[playerid][xIznosKredita] = 150000;
				PlayerInfo[playerid][xIznosRate] = 10000;
				PlayerInfo[playerid][xPreostaloZaOtplatu] = PlayerInfo[playerid][xIznosKredita];
				PlayerInfo[playerid][xBRacun] += PlayerInfo[playerid][xIznosKredita];
				SCM(playerid, ZUTA, "Podigli ste kredit u iznosu od 150000$ | INFO: /kredit.");
				SavePlayer(playerid); update_fg_info_tds(playerid);
				new string[128];
				format(string, sizeof(string), "Igrac: %s | Podigao kredit: 150000$", ImeIgraca(playerid));
				LogSave("Ostalo/LogKredit.log", string);
			}
			case 1: {
				if(PlayerInfo[playerid][xLevel] < 10) return SendErrorMessage(playerid, "Morate biti level 10+ za ovaj kredit!");
				PlayerInfo[playerid][xIznosKredita] = 250000;
				PlayerInfo[playerid][xIznosRate] = 10000;
				PlayerInfo[playerid][xPreostaloZaOtplatu] = PlayerInfo[playerid][xIznosKredita];
				PlayerInfo[playerid][xBRacun] += PlayerInfo[playerid][xIznosKredita];
				SCM(playerid, ZUTA, "Podigli ste kredit u iznosu od 250000$ | INFO: /kredit.");
				SavePlayer(playerid); update_fg_info_tds(playerid);
				new string[128];
				format(string, sizeof(string), "Igrac: %s | Podigao kredit: 250000$", ImeIgraca(playerid));
				LogSave("Ostalo/LogKredit.log", string);
			}
			case 2: {
				if(PlayerInfo[playerid][xLevel] < 15) return SendErrorMessage(playerid, "Morate biti level 15+ za ovaj kredit!");
				PlayerInfo[playerid][xIznosKredita] = 350000;
				PlayerInfo[playerid][xIznosRate] = 10000;
				PlayerInfo[playerid][xPreostaloZaOtplatu] = PlayerInfo[playerid][xIznosKredita];
				PlayerInfo[playerid][xBRacun] += PlayerInfo[playerid][xIznosKredita];
				SCM(playerid, ZUTA, "Podigli ste kredit u iznosu od 350000$ | INFO: /kredit.");
				SavePlayer(playerid); update_fg_info_tds(playerid);
				new string[128];
				format(string, sizeof(string), "Igrac: %s | Podigao kredit: 350000$", ImeIgraca(playerid));
				LogSave("Ostalo/LogKredit.log", string);
			}
			case 3: {
				if(PlayerInfo[playerid][xLevel] < 20) return SendErrorMessage(playerid, "Morate biti level 20+ za ovaj kredit!");
				PlayerInfo[playerid][xIznosKredita] = 500000;
				PlayerInfo[playerid][xIznosRate] = 10000;
				PlayerInfo[playerid][xPreostaloZaOtplatu] = PlayerInfo[playerid][xIznosKredita];
				PlayerInfo[playerid][xBRacun] += PlayerInfo[playerid][xIznosKredita];
				SCM(playerid, ZUTA, "Podigli ste kredit u iznosu od 500000$ | INFO: /kredit.");
				SavePlayer(playerid); update_fg_info_tds(playerid);
				new string[128];
				format(string, sizeof(string), "Igrac: %s | Podigao kredit: 500000$", ImeIgraca(playerid));
				LogSave("Ostalo/LogKredit.log", string);
			}
		}
	}
}
else if(dialogid == dialog_INFOKREDIT && response) {

	if(!response) return 1;
	switch(listitem) {
		case 0: {
			format(varstring, sizeof(varstring),"- Iznos Kredita: %d$\n- Iznos Rate Kredita: %d$\n- Preostalo za otplatu: %d$", PlayerInfo[playerid][xIznosKredita], PlayerInfo[playerid][xIznosRate], PlayerInfo[playerid][xPreostaloZaOtplatu]);
			SPD(playerid, dialog_BALANCE, DSMSG, D_NASLOV, varstring, D_ODABERI, D_ODUSTANI);
		}
		case 1: SPD(playerid, dialog_PROMENARATEKREDITA, DSI, D_NASLOV, "Upisite novi iznos rate koje cete otplacivati...", D_ODABERI, D_ODUSTANI);
		case 2: {
			if(PlayerInfo[playerid][xBRacun] >= PlayerInfo[playerid][xPreostaloZaOtplatu]) {
				SendInfoMessage(playerid, "Uspesno ste otplatili ostatak kredita u iznosu od %d$.", PlayerInfo[playerid][xPreostaloZaOtplatu]);
				PlayerInfo[playerid][xBRacun] -= PlayerInfo[playerid][xPreostaloZaOtplatu];
				PlayerInfo[playerid][xPreostaloZaOtplatu] = 0;
				PlayerInfo[playerid][xIznosKredita] = 0;
				PlayerInfo[playerid][xIznosRate] = 0;
				SavePlayer(playerid);
			}
			else if(PlayerInfo[playerid][xNovac] > PlayerInfo[playerid][xPreostaloZaOtplatu]) {
				SendInfoMessage(playerid, "Uspesno ste otplatili ostatak kredita u iznosu od %d$.", PlayerInfo[playerid][xPreostaloZaOtplatu]);
				DajIgracuNovac(playerid, -PlayerInfo[playerid][xPreostaloZaOtplatu]);
				PlayerInfo[playerid][xPreostaloZaOtplatu] = 0;
				PlayerInfo[playerid][xIznosKredita] = 0;
				PlayerInfo[playerid][xIznosRate] = 0;
				SavePlayer(playerid);
			}
			else return SendErrorMessage(playerid, "Nemate dovoljno novca za otplacivanje kredita.");
		}
	}
}
else if(dialogid == dialog_PROMENARATEKREDITA)
{
	if(!response) return 1;
	if(response) {
		new iznos;
		if(sscanf(inputtext, "i", iznos)) return SPD(playerid, dialog_PROMENARATEKREDITA, DSI, D_NASLOV, "Upisite novi iznos rate koje cete otplacivati...", D_ODABERI, D_ODUSTANI);
		if(iznos < 5000 || iznos > 20000)
		{
			SendErrorMessage(playerid, "Suma ne moze biti manja od 5000$ i veca od 20000$!");
			SPD(playerid, dialog_PROMENARATEKREDITA, DSI, D_NASLOV, "Upisite novi iznos rate koje cete otplacivati...", D_ODABERI, D_ODUSTANI);
			return 1;
		}
		PlayerInfo[playerid][xIznosRate] = iznos;
		SendClientMessageEx(playerid, ZUTA, "Podesili ste iznos rate kredita na %d$.", iznos);
	}
	else SPD(playerid, dialog_INFOKREDIT, DSL, D_NASLOV, "Info Kredit\nPromena Iznosa Rate", D_ODABERI, D_ODUSTANI);}
else if(dialogid == dialog_CHANGEPASSWORD) {
	if(response) {
		if(strlen(inputtext) < 6 || strlen(inputtext) > 20) {
			SendErrorMessage(playerid, "Lozinka treba da sadrzi najmanje 6 a najvise 20 znakova.");
			return 1;
		}
		else {
			strmid(PlayerInfo[playerid][xLozinka], inputtext, 0, strlen(inputtext), 255);
			format(varstring, sizeof(varstring), "Nova lozinka: %s", inputtext);
			SCM(playerid, ZUTA, varstring);
			SavePlayer(playerid);
			format(varstring, sizeof(varstring), "Prijavite se ponovno sa novom lozinkom: %s", inputtext);
			Kickovanje(playerid, varstring);

			new playersip[128];
			GetPlayerIp(playerid, playersip, sizeof(playersip));

			new string[128];
			format(string, sizeof(string), "IP: %s | Igrac %s je promenio svoju lozinku.", playersip, ImeIgraca(playerid));
			LogSave("Ostalo/LogPromenaLozinke.log", string);
		}
	}
}
else if(dialogid == dialog_PROPERTYWEPTAKE) {
	new wepname[32];
	if(response == 1)
	{
		switch(listitem)
		{
			case 0:
			{
				if(II[PropertySafeGun[playerid]][iOruzje][0] == 0)
				{
					SendErrorMessage(playerid, "Nemate oruzja u tom slotu.");
					return 1;
				}
				if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete uzeti oruzje, imate zabranu - /disarmtime.");

				format(wepname, sizeof(wepname), "%s", WeapNames[II[PropertySafeGun[playerid]][iOruzje][0]]);
				antiCheatCS[playerid][WeaponDetect] = 3;
				GiveWeaponToPlayer(playerid, II[PropertySafeGun[playerid]][iOruzje][0], II[PropertySafeGun[playerid]][iMunicija][0]);
				II[PropertySafeGun[playerid]][iOruzje][0] = 0;
				II[PropertySafeGun[playerid]][iMunicija][0] = 0;
				SaveProperty(PropertySafeGun[playerid]);

				format(varstring, sizeof(varstring), "* %s vadi %s iz sefa.", ImeIgraca(playerid), wepname);
				PorukaRadius(5, playerid, varstring, LJUBICASTA);
			}
			case 1:
			{
				if(II[PropertySafeGun[playerid]][iOruzje][1] == 0)
				{
					SendErrorMessage(playerid, "Nemate oruzja u tom slotu.");
					return 1;
				}
				if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete uzeti oruzje, imate zabranu - /disarmtime.");

				format(wepname, sizeof(wepname), "%s", WeapNames[II[PropertySafeGun[playerid]][iOruzje][1]]);
				antiCheatCS[playerid][WeaponDetect] = 3;
				GiveWeaponToPlayer(playerid, II[PropertySafeGun[playerid]][iOruzje][1], II[PropertySafeGun[playerid]][iMunicija][1]);
				II[PropertySafeGun[playerid]][iOruzje][1] = 0;
				II[PropertySafeGun[playerid]][iMunicija][1] = 0;
				SaveProperty(PropertySafeGun[playerid]);

				format(varstring, sizeof(varstring), "* %s vadi %s iz sefa.", ImeIgraca(playerid), wepname);
				PorukaRadius(5, playerid, varstring, LJUBICASTA);
			}
			case 2:
			{
				if(II[PropertySafeGun[playerid]][iOruzje][2] == 0)
				{
					SendErrorMessage(playerid, "Nemate oruzja u tom slotu.");
					return 1;
				}
				if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete uzeti oruzje, imate zabranu - /disarmtime.");

				format(wepname, sizeof(wepname), "%s", WeapNames[II[PropertySafeGun[playerid]][iOruzje][2]]);
				antiCheatCS[playerid][WeaponDetect] = 3;
				GiveWeaponToPlayer(playerid, II[PropertySafeGun[playerid]][iOruzje][2], II[PropertySafeGun[playerid]][iMunicija][2]);
				II[PropertySafeGun[playerid]][iOruzje][2] = 0;
				II[PropertySafeGun[playerid]][iMunicija][2] = 0;
				SaveProperty(PropertySafeGun[playerid]);

				format(varstring, sizeof(varstring), "* %s vadi %s iz sefa.", ImeIgraca(playerid), wepname);
				PorukaRadius(5, playerid, varstring, LJUBICASTA);
			}
			case 3:
			{
				if(II[PropertySafeGun[playerid]][iOruzje][3] == 0)
				{
					SendErrorMessage(playerid, "Nemate oruzja u tom slotu.");
					return 1;
				}
				if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete uzeti oruzje, imate zabranu - /disarmtime.");

				format(wepname, sizeof(wepname), "%s", WeapNames[II[PropertySafeGun[playerid]][iOruzje][3]]);
				antiCheatCS[playerid][WeaponDetect] = 3;
				GiveWeaponToPlayer(playerid, II[PropertySafeGun[playerid]][iOruzje][3], II[PropertySafeGun[playerid]][iMunicija][3]);
				II[PropertySafeGun[playerid]][iOruzje][3] = 0;
				II[PropertySafeGun[playerid]][iMunicija][3] = 0;
				SaveProperty(PropertySafeGun[playerid]);

				format(varstring, sizeof(varstring), "* %s vadi %s iz sefa.", ImeIgraca(playerid), wepname);
				PorukaRadius(5, playerid, varstring, LJUBICASTA);
			}
		}
	}
}
else if(dialogid == dialog_JOBLIST) {

	if(response) {

		Fusion_SetPlayerCheckpoint(playerid, jobsInfos[listitem][jPos][0], jobsInfos[listitem][jPos][1], jobsInfos[listitem][jPos][2], 5.0);
		CheckpointStatus[playerid] = 15;
		SendClientMessageEx(playerid, ZUTA, "Posao %s je oznacen na mapi.", jobsInfos[listitem][jName]);
	}
}
else if(dialogid == dialog_CREATEEVENT) {
	if(!response) return 1;
	format(EventName[playerid], 64, "%s", inputtext);
	SPD(playerid, dialog_CREATEEVENT2, DSI, D_NASLOV, "Unesti ID vozila za event", D_ODABERI, D_ODUSTANI);}
else if(dialogid == dialog_CREATEEVENT2) {
	if(!response) return 1;
	EventCarsCreate[playerid] = 1;
	EventCP[playerid] = 1;
	EventVehID[playerid] = strval(inputtext);
	SCM(playerid, ZUTA, "Koristi LMB da postavis 2 reda vozila.");
	SCM(playerid, ZUTA, "Prvo snimanje prvi red vozila, drugo snimanje drugi red vozila.");}
else if(dialogid == dialog_EVENTSTART) {
	if(!response) return 1;
	if(response) {

		if(listitem < 10) {

			new ideventa = (listitem+1) + (EventStranica[playerid]-10);
			new gFile[35];
			format(gFile, 35, EVENT_FILE, ideventa);
			if(!fexist(gFile)) return SendErrorMessage(playerid, "Izabrali ste event koji nepostoji.");
			if(EventInfo[eID] != 0) return SendErrorMessage(playerid, "Vec je ukljucen jedan event, koristi /eugasi.");
			if(Event[ideventa][VehID] == 0) return SendErrorMessage(playerid, "Ovaj event nije kreiran.");

			EventInfo[eID] = ideventa;
			EventInfo[EventTime] = MAX_TIME;
			EventInfo[Drivers] = 0;

			Event[EventInfo[eID]][PrivremeniX1] = Event[EventInfo[eID]][TCPX];
			Event[EventInfo[eID]][PrivremeniY1] = Event[EventInfo[eID]][TCPY];
			Event[EventInfo[eID]][PrivremeniX2] = Event[EventInfo[eID]][TCPX2];
			Event[EventInfo[eID]][PrivremeniY2] = Event[EventInfo[eID]][TCPY2];

			format(varstring, sizeof(varstring), ""col_orange"%s Event | "col_white"je poceo, imate {A6A6A6]20"col_white" sekundi da se pridruzite {A6A6A6][/join]", Event[EventInfo[eID]][Name]);
			SCMA(-1, varstring);
			format(varstring, sizeof(varstring), "EVENT | %s je pokrenuo event %s.", ImeIgraca(playerid), Event[EventInfo[eID]][Name]);
			AdminPoruka(NARACRVENA, varstring);

		}
		else if(listitem == 10) {

			if(EventStranica[playerid] == 100) return SendErrorMessage(playerid, "Ne mozete dalje.");
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			EventStranica[playerid] += 10;
			for(new i = (EventStranica[playerid]-9); i <= EventStranica[playerid]; i++) {

				format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, Event[i][Name]);

			}

			format(DialogStrgEx, sizeof(DialogStrgEx), "%sSledeca stranica ->\n", DialogStrgEx);
			format(DialogStrgEx, sizeof(DialogStrgEx), "%s<- Prethodna stranica", DialogStrgEx);


			SPD(playerid, dialog_EVENTSTART, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI);
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
		}
		else if(listitem == 11) {

			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			EventStranica[playerid] -= 10;

			for(new i = (EventStranica[playerid]-9); i <= EventStranica[playerid]; i++) {

				format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, Event[i][Name]);

			}

			if(EventStranica[playerid] > 10) {
				format(DialogStrgEx, sizeof(DialogStrgEx), "%sSledeca stranica ->\n", DialogStrgEx);
				format(DialogStrgEx, sizeof(DialogStrgEx), "%s<- Prethodna stranica", DialogStrgEx);
			}
			else if(EventStranica[playerid] <= 10) {
				format(DialogStrgEx, sizeof(DialogStrgEx), "%sSledeca stranica ->", DialogStrgEx);
			}

			SPD(playerid, dialog_EVENTSTART, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI);
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
		}
	}
}
else if(dialogid == dialog_BUY_GPS) {
		if(!response) return true;

	new requiredMoney = 500,
		gpsLevel = 1,
		dString[128]
	;

	format(dString, sizeof(dString), "Uspesno ste kupili Osnovi GPS");

	switch(listitem) {
		case MEDIUM_GPS: {
			format(dString, sizeof(dString), "Uspesno ste kupili Srednji GPS");
			requiredMoney = 750;
			gpsLevel = 2;
		}
		case ADVANCED_GPS: {
			format(dString, sizeof(dString), "Uspesno ste kupili Napredni GPS");
			requiredMoney = 1000;
			gpsLevel = 3;
		}
	}

	if(PlayerInfo[playerid][xNovac] < requiredMoney) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
	DajIgracuNovac(playerid, -requiredMoney);
	BusinessMoney(uFirmi[playerid], requiredMoney / 10, playerid);

	SCM(playerid, BELA, dString);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerInfo[playerid][xGpsLevel] = gpsLevel;}
else if(dialogid == dialog_GPS_FIND) {
	pMappedType[playerid] = MAPPED_NONE;
	if(!response) return true;

	dStyle = DSL;
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

	switch(listitem) {
		case 0: {
			pMappedType[playerid] = MAPPED_IMPORTANT;
			for(new i = 1; i < MAX_GPS; i++) {
				new filename[32];
				format(filename, sizeof(filename), F_GPS, i);
				if(fexist(filename)) {
					format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, gpsInfo[i][gpsName]);
				}
			}
			SPD(playerid, dialog_GPS, dStyle, "Izaberi lokaciju:", DialogStrgEx, D_ODABERI, D_ODUSTANI);
		}
		case 1: {
			pMappedType[playerid] = MAPPED_HOUSE;
			SPD(playerid, dialog_GPS, DSI, "Izaberi lokaciju:", "Unesite id imovine do koje zelite da odete.", D_ODABERI, D_ODUSTANI);
		}
		case 2: {
			pMappedType[playerid] = MAPPED_BUSINESS;
			SPD(playerid, dialog_GPS, DSI, "Izaberi lokaciju:", "Unesite id firme do koje zelite da odete.", D_ODABERI, D_ODUSTANI);
		}
		case 3: {
			pMappedType[playerid] = MAPPED_JOB;

			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

			strcat(DialogStrgEx, "ID\tIme posla\tKvalifikacije\n");
			for(new i = 0; i < MAX_JOBS; i++) {
				format(DialogStrgEx, sizeof(DialogStrgEx), "%s%d\t%s\t%s\n", DialogStrgEx, i+1, jobsInfos[i][jName], GetJobDegree(i+1));
			}

			SPD(playerid, dialog_GPS, DSH, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI);
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
		}
	}
	return true;}
else if(dialogid == dialog_GPS) {
	if(!response) return true;

	switch(pMappedType[playerid]) {
		case MAPPED_IMPORTANT: {
			listitem++;
			setPlayerGps(playerid, gpsInfo[listitem][gpsPos][0], gpsInfo[listitem][gpsPos][1], gpsInfo[listitem][gpsPos][2]);
		}
		case MAPPED_HOUSE: {
			pMappedType[playerid] = MAPPED_HOUSE;
			new broj, filename[64];
			if(sscanf(inputtext, "d", broj)) return SPD(playerid, dialog_GPS, DSI, "Izaberi lokaciju:", "Unesite id imovine do koje zelite da odete.", D_ODABERI, D_ODUSTANI);
			format(filename, sizeof(filename), IM_FILE, broj);
			if(!fexist(filename)) return SendErrorMessage(playerid, "ID te imovine ne postoji u bazi podataka!");
			setPlayerGps(playerid, II[broj][iEnter][0], II[broj][iEnter][1], II[broj][iEnter][2]);
		}
		case MAPPED_JOB: {
			setPlayerGps(playerid, jobsInfos[listitem][jPos][0], jobsInfos[listitem][jPos][1], jobsInfos[listitem][jPos][2]);
		}
		case MAPPED_BUSINESS: {
			pMappedType[playerid] = MAPPED_BUSINESS;
			new broj, filename[64];
			if(sscanf(inputtext, "d", broj)) return SPD(playerid, dialog_GPS, DSI, "Izaberi lokaciju:", "Unesite id firme do koje zelite da odete.", D_ODABERI, D_ODUSTANI);
			format(filename, sizeof(filename), F_FILE, broj);
			if(!fexist(filename)) return SendErrorMessage(playerid, "ID te firme ne postoji u bazi podataka!");
			setPlayerGps(playerid, BusinessInfo[broj][bEnterX], BusinessInfo[broj][bEnterY], BusinessInfo[broj][bEnterZ]);
		}
	}
}
else if(dialogid == dialog_WAR && response) {
	if(listitem == 0) { SPD(playerid, dialog_WAR_ZAKAZI_1, DSL, "Izaberi mapu", "Mapa 1 - Abandoned\nMapa 2 - RC Battlefield\nMapa 3 - Skladiste\nMapa 4 - United\nMapa 5 - Farma", "Odaberi", "Ponisti"); }
	if(listitem == 1) { SPD(playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti"); }
	if(listitem == 2) { SPD(playerid, dialog_WARIZBACI, DSI, "Izbacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti"); }
}
else if(dialogid == dialog_WARIZBACI && response) {
	if(WARPInfo[playerid][WARIgrac] == -1) return SendErrorMessage(playerid, "Niste u waru.");
	new igrac, w = WARPInfo[playerid][WARIgrac];
	if(sscanf(inputtext, "u", igrac)) return SPD(playerid, dialog_WARIZBACI, DSI, "Izbacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
	if(WARInfo[w][WARAktivan] == false) return SendErrorMessage(playerid, "War nije jos startovan.");
	if(igrac == IPI) return SPD(playerid, dialog_WARIZBACI, DSI, "Izbacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
	if(PlayerInfo[igrac][xClan] != PlayerInfo[playerid][xLider]) return SPD(playerid, dialog_WARIZBACI, DSI, "Izbacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
	if(WARPInfo[igrac][WARIgrac] == -1) return SPD(playerid, dialog_WARIZBACI, DSI, "Izbacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
	Fusion_SetPlayerHealth(igrac, 100);

	ac_SetPlayerPos(igrac, PozicijaWAR[igrac][0], PozicijaWAR[igrac][1],  PozicijaWAR[igrac][2]);
	SetPlayerVirtualWorld(igrac, VirtualWWAR[igrac]);
	ac_SetPlayerInterior(igrac, InteriorWAR[igrac]);
	antiCheatCS[igrac][WeaponDetect] = 3;
	ResetAllWeapons(igrac);
	WARPInfo[igrac][WARIgrac] = -1;
	ResetujWarIgraca(igrac);
	if(WARPInfo[playerid][WARTim][0] == true) { WARInfo[w][WARTimClanovi][0]--;}
	if(WARPInfo[playerid][WARTim][1] == true) { WARInfo[w][WARTimClanovi][1]--;}

	SCM(playerid, -1, "Izbacio si clana.");

	WarTDControl(igrac, false);}
else if(dialogid == dialog_WARUBACI && response) {
	if(WARPInfo[playerid][WARIgrac] == -1) return SendErrorMessage(playerid, "Niste u waru.");
	new igrac, w = WARPInfo[playerid][WARIgrac];
	if(sscanf(inputtext, "u", igrac)) return SPD(playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
	if(WARInfo[w][WARAktivan] == false) return SendErrorMessage(playerid, "War nije jos startovan.");
	if(igrac == playerid) return SPD(playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
	if(igrac == IPI) return SPD(playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
	if(PlayerInfo[igrac][xClan] != PlayerInfo[playerid][xLider]) return SPD(playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
	if(WARPInfo[igrac][WARIgrac] != -1) return SPD(playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
	if(PlayerCP[igrac] > 0) return SendErrorMessage(playerid, "Ne mozete ubaciti igraca koji je na eventu.");
	if(PlayerInfo[igrac][xWanted] > 0) return SendErrorMessage(playerid, "Ne mozete ubaciti igraca koji ima wanted level.");
	if(PlayerInfo[igrac][xZatvor] > 0) return SendErrorMessage(playerid, "Ne mozete ubaciti igraca koji ima je u zatvoru.");
	if(WARPInfo[playerid][WARTim][0] == true) {
		if(WARInfo[w][WARTimClanovi][0] >= WARInfo[w][WARMaxClanova]) return SendErrorMessage(playerid, "Imate maksimalan broj clanova u waru!");

		GetPlayerPos(igrac, PozicijaWAR[igrac][0], PozicijaWAR[igrac][1],  PozicijaWAR[igrac][2]);
		VirtualWWAR[igrac] = GetPlayerVirtualWorld(igrac);
		InteriorWAR[igrac] = GetPlayerInterior(igrac);
		new rand1 = random(sizeof(RandomWARMapa11));
		new rand21 = random(sizeof(RandomWARMapa21));
		new rand31 = random(sizeof(RandomWARMapa31));
		new rand41 = random(sizeof(RandomWARMapa41));
		new rand51 = random(sizeof(RandomWARMapa51));
		if(WARInfo[w][WARMapa] == 1) {
			ac_SetPlayerPos(igrac, RandomWARMapa11[rand1][0], RandomWARMapa11[rand1][1],RandomWARMapa11[rand1][2]);
			ac_SetPlayerInterior(playerid, 0);
		}
		else if(WARInfo[w][WARMapa] == 2) {
			ac_SetPlayerPos(igrac, RandomWARMapa21[rand21][0], RandomWARMapa21[rand21][1],RandomWARMapa21[rand21][2]);
			ac_SetPlayerInterior(igrac, 10);
		}
		else if(WARInfo[w][WARMapa] == 3) {
			ac_SetPlayerPos(igrac, RandomWARMapa31[rand31][0], RandomWARMapa31[rand31][1],RandomWARMapa31[rand31][2]);
			ac_SetPlayerInterior(igrac, 0);
		}
		else if(WARInfo[w][WARMapa] == 4) {
			ac_SetPlayerPos(igrac, RandomWARMapa41[rand41][0], RandomWARMapa41[rand41][1],RandomWARMapa41[rand41][2]);
			ac_SetPlayerInterior(igrac, 0);
		}
		else if(WARInfo[w][WARMapa] == 5) {
			ac_SetPlayerPos(igrac, RandomWARMapa51[rand51][0], RandomWARMapa51[rand51][1],RandomWARMapa51[rand51][2]);
			ac_SetPlayerInterior(igrac, 0);
		}


		GiveWeaponToPlayer(igrac, WARInfo[w][WAROruzje][0], 300);
		GiveWeaponToPlayer(igrac, WARInfo[w][WAROruzje][1], 300);
		GiveWeaponToPlayer(igrac, WARInfo[w][WAROruzje][2], 300);
		GiveWeaponToPlayer(igrac, WARInfo[w][WAROruzje][3], 300);
		SetPlayerVirtualWorld(igrac, w);
		Fusion_SetPlayerHealth(igrac, 100);
		Fusion_SetPlayerArmour(igrac, 100);

		WARInfo[w][WARTimClanovi][0]++;

		ResetujWarIgraca(igrac);
		WARPInfo[igrac][WARTim][0] = true;
		WARPInfo[igrac][WARIgrac] = w;
		new string[128];
		format(string, sizeof(string), ""col_orange"WAR "col_white"| "col_orange"Tim 1: "col_white"%s "col_white"| "col_orange"Tim 2: "col_white"%s", getOrgName(PlayerInfo[WARInfo[w][WARTimLider][0]][xClan]), getOrgName(PlayerInfo[WARInfo[w][WARTimLider][1]][xClan]));
			SCM(igrac, -1, string);
		SCM(igrac, -1, "War chat /wp /warnapusti.");
		SCM(playerid, -1, "Ubacio si clana.");

		WarTDControl(igrac, true);
		SetWarStatsTD(w);
	}
	else if(WARPInfo[playerid][WARTim][1] == true) {
		if(WARInfo[w][WARTimClanovi][1] >= WARInfo[w][WARMaxClanova]) return SendErrorMessage(playerid, "Imate maksimalan broj clanova u waru!");

		GetPlayerPos(igrac, PozicijaWAR[igrac][0], PozicijaWAR[igrac][1],  PozicijaWAR[igrac][2]);
		VirtualWWAR[igrac] = GetPlayerVirtualWorld(igrac);
		InteriorWAR[igrac] = GetPlayerInterior(igrac);

		new rand2 = random(sizeof(RandomWARMapa12));
		new rand22 = random(sizeof(RandomWARMapa22));
		new rand32 = random(sizeof(RandomWARMapa32));
		new rand42 = random(sizeof(RandomWARMapa42));
		new rand52 = random(sizeof(RandomWARMapa52));
		if(WARInfo[w][WARMapa] == 1) {
			ac_SetPlayerPos(igrac, RandomWARMapa12[rand2][0], RandomWARMapa12[rand2][1],RandomWARMapa12[rand2][2]);
			ac_SetPlayerInterior(igrac, 0);
		}
		else if(WARInfo[w][WARMapa] == 2) {
			ac_SetPlayerPos(igrac, RandomWARMapa22[rand22][0], RandomWARMapa22[rand22][1],RandomWARMapa22[rand22][2]);
			ac_SetPlayerInterior(igrac, 10);
		}
		else if(WARInfo[w][WARMapa] == 3) {
			ac_SetPlayerPos(igrac, RandomWARMapa32[rand32][0], RandomWARMapa32[rand32][1],RandomWARMapa32[rand32][2]);
			ac_SetPlayerInterior(igrac, 0);
		}
		else if(WARInfo[w][WARMapa] == 4) {
			ac_SetPlayerPos(igrac, RandomWARMapa42[rand42][0], RandomWARMapa42[rand42][1],RandomWARMapa42[rand42][2]);
			ac_SetPlayerInterior(igrac, 0);
		}
		else if(WARInfo[w][WARMapa] == 5) {
			ac_SetPlayerPos(igrac, RandomWARMapa52[rand52][0], RandomWARMapa52[rand52][1],RandomWARMapa52[rand52][2]);
			ac_SetPlayerInterior(igrac, 0);
		}

		GiveWeaponToPlayer(igrac, WARInfo[w][WAROruzje][0], 300);
		GiveWeaponToPlayer(igrac, WARInfo[w][WAROruzje][1], 300);
		GiveWeaponToPlayer(igrac, WARInfo[w][WAROruzje][2], 300);
		GiveWeaponToPlayer(igrac, WARInfo[w][WAROruzje][3], 300);
		SetPlayerVirtualWorld(igrac, w);
		Fusion_SetPlayerHealth(igrac, 100);
		Fusion_SetPlayerArmour(igrac, 100);

		WARInfo[w][WARTimClanovi][1]++;

		ResetujWarIgraca(igrac);
		WARPInfo[igrac][WARTim][1] = true;
		WARPInfo[igrac][WARIgrac] = w;

		new string[128];
		format(string, sizeof(string), ""col_orange"WAR "col_white"| "col_orange"Tim 1: "col_white"%s "col_white"| "col_orange"Tim 2: "col_white"%s", getOrgName(PlayerInfo[WARInfo[w][WARTimLider][0]][xClan]), getOrgName(PlayerInfo[WARInfo[w][WARTimLider][1]][xClan]));
			SCM(igrac, -1, string);
		SCM(igrac, -1, "War chat /wp /warnapusti.");
		SCM(playerid, -1, "Ubacio si clana.");

		WarTDControl(igrac, true);
		SetWarStatsTD(w);
	}
}
else if(dialogid == dialog_WAR_ZAKAZI_1 && response) {
	if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes u waru dok si u jailu.");
	new warid = -1;
	for(new w = 1; w < MAX_WARS; w ++) {
		if(WARInfo[w][WARAktivan] == false && WARInfo[w][WARKreiranje] == false) {
			warid = w;
			break;
		}
	}
	if(warid == -1) return SendErrorMessage(playerid, "Vec ima 10 warova u toku, sacekajte da se neki zavrsi.");
	KreiranjeWara[playerid] = warid;
	WARInfo[warid][WARKreiranje] = true;
	WARInfo[warid][WARAktivan] = false;
	WARInfo[warid][WARCena] = 0;
	if(listitem == 0) { WARInfo[warid][WARMapa] = 1;}
	if(listitem == 1) { WARInfo[warid][WARMapa] = 2;}
	if(listitem == 2) { WARInfo[warid][WARMapa] = 3;}
	if(listitem == 3) { WARInfo[warid][WARMapa] = 4;}
	if(listitem == 4) { WARInfo[warid][WARMapa] = 5;}
	SPD(playerid, dialog_WAR_ZAKAZI_2, DSL, "Izaberi oruzje slot 1", "Deagle\nColt 45\nSilenced Pistol", "Odaberi", "Ponisti");}
else if(dialogid == dialog_WAR_ZAKAZI_2) {
	if(response) {
		new w = KreiranjeWara[playerid];
		if(listitem == 0) { WARInfo[w][WAROruzje][0] = 24;}
		if(listitem == 1) { WARInfo[w][WAROruzje][0] = 22;}
		if(listitem == 2) { WARInfo[w][WAROruzje][0] = 23;}
		SPD(playerid, dialog_WAR_ZAKAZI_3, DSL, "Izaberi oruzje slot 2", "Uzi\nMP5", "Odaberi", "Ponisti");
	}
	else if(!response) {
		new w = KreiranjeWara[playerid];
		WARInfo[w][WARKreiranje] = false;
		WARInfo[w][WARAktivan] = false;
		KreiranjeWara[playerid] = -1;
	}
}
else if(dialogid == dialog_WAR_ZAKAZI_3) {
	if(response) {
		new w = KreiranjeWara[playerid];
		if(listitem == 0) { WARInfo[w][WAROruzje][1] = 28;}
		if(listitem == 1) { WARInfo[w][WAROruzje][1] = 29;}
		SPD(playerid, dialog_WAR_ZAKAZI_4, DSL, "Izaberi oruzje slot 3", "AK-47\nM4", "Odaberi", "Ponisti");
	}
	else if(!response) {
		new w = KreiranjeWara[playerid];
		WARInfo[w][WARKreiranje] = false;
		WARInfo[w][WARAktivan] = false;
		KreiranjeWara[playerid] = -1;
	}
}
else if(dialogid == dialog_WAR_ZAKAZI_4) {
	if(response) {
		new w = KreiranjeWara[playerid];
		if(listitem == 0) { WARInfo[w][WAROruzje][2] = 30;}
		if(listitem == 1) { WARInfo[w][WAROruzje][2] = 31;}
		SPD(playerid, dialog_WAR_ZAKAZI_5, DSL, "Izaberi oruzje slot 4", "Country Rifle\nShotgun", "Odaberi", "Ponisti");
	}
	else if(!response) {
		new w = KreiranjeWara[playerid];
		WARInfo[w][WARKreiranje] = false;
		WARInfo[w][WARAktivan] = false;
		KreiranjeWara[playerid] = -1;
	}
}
else if(dialogid == dialog_WAR_ZAKAZI_5) {
	if(response) {
		new w = KreiranjeWara[playerid];
		if(listitem == 0) { WARInfo[w][WAROruzje][3] = 33;}
		if(listitem == 1) { WARInfo[w][WAROruzje][3] = 25;}
		SPD(playerid, dialog_WAR_ZAKAZI_9, DSI, "Ulaganje novca", "Unesite para koliko zelite da ulozite u war, protivncki lider mora isto toliko da ulozi(Ako uneses 0 onda nema uloga).", "Odaberi", "Ponisti");
	}
	else if(!response) {
		new w = KreiranjeWara[playerid];
		WARInfo[w][WARKreiranje] = false;
		WARInfo[w][WARAktivan] = false;
		KreiranjeWara[playerid] = -1;
	}
}
else if(dialogid == dialog_WAR_ZAKAZI_9) {
	if(response) {
		new w = KreiranjeWara[playerid], novac;
		if(sscanf(inputtext, "i", novac)) return SPD(playerid, dialog_WAR_ZAKAZI_9, DSI, "Ulaganje novca", "Unesite para koliko zelite da ulozite u war, protivncki lider mora isto toliko da ulozi(Ako uneses 0 onda nema uloga).", "Odaberi", "Ponisti");
		if(PlayerInfo[playerid][xNovac] < novac) return SPD(playerid, dialog_WAR_ZAKAZI_9, DSI, "Nemate dovoljno novca", "Unesite para koliko zelite da ulozite u war, protivncki lider mora isto toliko da ulozi(Ako uneses 0 onda nema uloga).", "Odaberi", "Ponisti");
		if(novac < 0 || novac > 100000) return SPD(playerid, dialog_WAR_ZAKAZI_9, DSI, "Ulaganje novca", "Unesite para koliko zelite da ulozite u war, protivncki lider mora isto toliko da ulozi(Ako uneses 0 onda nema uloga).", "Odaberi", "Ponisti");

		WARInfo[w][WARCena] = novac;
		SPD(playerid, dialog_WAR_ZAKAZI_6, DSI, "Maximum clanova", "Upisite koliko maximum clanova ce biti u waru(3-10).", "Odaberi", "Ponisti");
	}
	else if(!response) {
		new w = KreiranjeWara[playerid];
		WARInfo[w][WARKreiranje] = false;
		WARInfo[w][WARAktivan] = false;
		KreiranjeWara[playerid] = -1;
	}
}
else if(dialogid == dialog_WAR_ZAKAZI_6) {
	if(response) {
		new maxigraca, w = KreiranjeWara[playerid];
		if(sscanf(inputtext, "i", maxigraca)) return SPD(playerid, dialog_WAR_ZAKAZI_6, DSI, "Maximum clanova", "Upisite koliko maximum clanova ce biti u waru(3-10).", "Odaberi", "Ponisti");
		if(maxigraca < 3 || maxigraca > 10) return SPD(playerid, dialog_WAR_ZAKAZI_6, DSI, "Maximum clanova", "Upisite koliko maximum clanova ce biti u waru(3-10).", "Odaberi", "Ponisti");
		WARInfo[w][WARMaxClanova] = maxigraca;
		SPD(playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika", "Upisite id lidera protivnicke orge.", "Odaberi", "Ponisti");
	}
	else if(!response) {
		new w = KreiranjeWara[playerid];
		WARInfo[w][WARKreiranje] = false;
		WARInfo[w][WARAktivan] = false;
		KreiranjeWara[playerid] = -1;
	}
}
else if(dialogid == dialog_WAR_ZAKAZI_7) {
	if(response) {
		new id, w = KreiranjeWara[playerid], string[128];
		if(sscanf(inputtext, "u", id)) return SPD(playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika", "Upisite id lidera protivnicke orge.", "Odaberi", "Ponisti");
		if(id == IPI) return SPD(playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika", "Upisite id lidera protivnicke orge.", "Odaberi", "Ponisti");
		if(PlayerInfo[playerid][xLider] == PlayerInfo[id][xLider]) return SPD(playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika", "Upisite id lidera protivnicke orge.", "Odaberi", "Ponisti");
		if(PlayerInfo[id][xLider] < 1) return SPD(playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika", "Upisite id lidera protivnicke orge.", "Odaberi", "Ponisti");
		if(id == playerid) return SPD(playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika", "Upisite id lidera protivnicke orge.", "Odaberi", "Ponisti");
		if(OI[PlayerInfo[id][xClan]][oTip] == ORG_TIP_PD && OI[PlayerInfo[id][xClan]][oTip] == ORG_TIP_MD && OI[PlayerInfo[id][xClan]][oTip] == ORG_TIP_CNN && OI[PlayerInfo[id][xClan]][oTip] == ORG_TIP_HITM && OI[PlayerInfo[id][xClan]][oTip] == ORG_TIP_ELEK && OI[PlayerInfo[id][xClan]][oTip] == ORG_TIP_TAXI) return SPD(playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika", "Upisite id lidera protivnicke orge.", "Odaberi", "Ponisti");
		if(PlayerInfo[id][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes u waru pozvati lidera koji je u jailu.");
		WARInfo[w][WARTimLider][0] = playerid;
		WARInfo[w][WARTimLider][1] = id;
		KreiranjeWara[id] = w;

		strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
		format(string, sizeof(string), ""col_orange"Oruzje 1: "col_white"%s\n", WeaponInfos[WARInfo[w][WAROruzje][0]][wName]);
		strcat(DialogStrgEx, string);
		format(string, sizeof(string), ""col_orange"Oruzje 2: "col_white"%s\n", WeaponInfos[WARInfo[w][WAROruzje][1]][wName]);
		strcat(DialogStrgEx, string);
		format(string, sizeof(string), ""col_orange"Oruzje 3: "col_white"%s\n", WeaponInfos[WARInfo[w][WAROruzje][2]][wName]);
		strcat(DialogStrgEx, string);
		format(string, sizeof(string), ""col_orange"Maksimalni broj clanova: "col_white"%d\n\n", WARInfo[w][WARMaxClanova]);
		strcat(DialogStrgEx, string);
		format(string, sizeof(string), ""col_orange"Ulog novca: "col_white"%d$\n\n", WARInfo[w][WARCena]);
		strcat(DialogStrgEx, string);
		format(string, sizeof(string), ""col_orange"Lider "col_white"%s "col_orange"vam je poslao zahtev za war.Izaberi:", getOrgName(PlayerInfo[playerid][xClan]));
		strcat(DialogStrgEx, string);
		SPD(id, dialog_WAR_ZAKAZI_8, DSMSG, "Zahtev za war", DialogStrgEx, "Prihvati", "Odbij");
		strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
	}
	else if(!response) {
		new w = KreiranjeWara[playerid];
		WARInfo[w][WARKreiranje] = false;
		WARInfo[w][WARAktivan] = false;
		KreiranjeWara[playerid] = -1;
	}
}
else if(dialogid == dialog_WAR_ZAKAZI_8) {
	if(response) {
		new w = KreiranjeWara[playerid];
		if(PlayerInfo[playerid][xNovac] < WARInfo[w][WARCena]) return SendErrorMessage(playerid, "Nemate dovoljno novca za ulog.");
		if(gettime() < CommandTime[playerid]) 	return SendErrorMessage(playerid, "Ovu komandu mozete koristiti svakih 5 minuta!");


		SCM(WARInfo[w][WARTimLider][1], -1, ""col_orange"WAR | "col_white"Prihvatio si poziv za war ubaci svoje igrace!");
		SCM(WARInfo[w][WARTimLider][0], -1, ""col_orange"WAR | "col_white"Igrac je prihvatio poziv za war ubaci svoje igrace!");

		DajIgracuNovac(WARInfo[w][WARTimLider][0], -WARInfo[w][WARCena]);
		DajIgracuNovac(WARInfo[w][WARTimLider][1], -WARInfo[w][WARCena]);

		GetPlayerPos(WARInfo[w][WARTimLider][0], PozicijaWAR[WARInfo[w][WARTimLider][0]][0], PozicijaWAR[WARInfo[w][WARTimLider][0]][1],  PozicijaWAR[WARInfo[w][WARTimLider][0]][2]);
		VirtualWWAR[WARInfo[w][WARTimLider][0]] = GetPlayerVirtualWorld(WARInfo[w][WARTimLider][0]);
		InteriorWAR[WARInfo[w][WARTimLider][0]] = GetPlayerInterior(WARInfo[w][WARTimLider][0]);

		GetPlayerPos(WARInfo[w][WARTimLider][1], PozicijaWAR[WARInfo[w][WARTimLider][1]][0], PozicijaWAR[WARInfo[w][WARTimLider][1]][1],  PozicijaWAR[WARInfo[w][WARTimLider][1]][2]);
		VirtualWWAR[WARInfo[w][WARTimLider][1]] = GetPlayerVirtualWorld(WARInfo[w][WARTimLider][0]);
		InteriorWAR[WARInfo[w][WARTimLider][1]] = GetPlayerInterior(WARInfo[w][WARTimLider][1]);

		if(WARInfo[w][WARMapa] == 1) {
			new rand1 = random(sizeof(RandomWARMapa11));
			new rand2 = random(sizeof(RandomWARMapa12));
			ac_SetPlayerPos(WARInfo[w][WARTimLider][0], RandomWARMapa11[rand1][0], RandomWARMapa11[rand1][1],RandomWARMapa11[rand1][2]);
			ac_SetPlayerPos(WARInfo[w][WARTimLider][1], RandomWARMapa12[rand2][0], RandomWARMapa12[rand2][1],RandomWARMapa12[rand2][2]);
			ac_SetPlayerInterior(WARInfo[w][WARTimLider][0], 0);
			ac_SetPlayerInterior(WARInfo[w][WARTimLider][1], 0);
		}
		else if(WARInfo[w][WARMapa] == 2) {
			new rand1 = random(sizeof(RandomWARMapa21));
			new rand2 = random(sizeof(RandomWARMapa22));
			ac_SetPlayerPos(WARInfo[w][WARTimLider][0], RandomWARMapa21[rand1][0], RandomWARMapa21[rand1][1],RandomWARMapa21[rand1][2]);
			ac_SetPlayerPos(WARInfo[w][WARTimLider][1], RandomWARMapa22[rand2][0], RandomWARMapa22[rand2][1],RandomWARMapa22[rand2][2]);
			ac_SetPlayerInterior(WARInfo[w][WARTimLider][0], 10);
			ac_SetPlayerInterior(WARInfo[w][WARTimLider][1], 10);
		}
		else if(WARInfo[w][WARMapa] == 3) {
			new rand1 = random(sizeof(RandomWARMapa31));
			new rand2 = random(sizeof(RandomWARMapa32));
			ac_SetPlayerPos(WARInfo[w][WARTimLider][0], RandomWARMapa31[rand1][0], RandomWARMapa31[rand1][1],RandomWARMapa31[rand1][2]);
			ac_SetPlayerPos(WARInfo[w][WARTimLider][1], RandomWARMapa32[rand2][0], RandomWARMapa32[rand2][1],RandomWARMapa32[rand2][2]);
			ac_SetPlayerInterior(WARInfo[w][WARTimLider][0], 0);
			ac_SetPlayerInterior(WARInfo[w][WARTimLider][1], 0);
		}
		else if(WARInfo[w][WARMapa] == 4) {
			new rand1 = random(sizeof(RandomWARMapa41));
			new rand2 = random(sizeof(RandomWARMapa42));
			ac_SetPlayerPos(WARInfo[w][WARTimLider][0], RandomWARMapa41[rand1][0], RandomWARMapa41[rand1][1],RandomWARMapa41[rand1][2]);
			ac_SetPlayerPos(WARInfo[w][WARTimLider][1], RandomWARMapa42[rand2][0], RandomWARMapa42[rand2][1],RandomWARMapa42[rand2][2]);
			ac_SetPlayerInterior(WARInfo[w][WARTimLider][0], 0);
			ac_SetPlayerInterior(WARInfo[w][WARTimLider][1], 0);
		}
		else if(WARInfo[w][WARMapa] == 5) {
			new rand1 = random(sizeof(RandomWARMapa51));
			new rand2 = random(sizeof(RandomWARMapa52));
			ac_SetPlayerPos(WARInfo[w][WARTimLider][0], RandomWARMapa51[rand1][0], RandomWARMapa51[rand1][1],RandomWARMapa51[rand1][2]);
			ac_SetPlayerPos(WARInfo[w][WARTimLider][1], RandomWARMapa52[rand2][0], RandomWARMapa52[rand2][1],RandomWARMapa52[rand2][2]);
			ac_SetPlayerInterior(WARInfo[w][WARTimLider][0], 0);
			ac_SetPlayerInterior(WARInfo[w][WARTimLider][1], 0);
		}

		WARInfo[w][WARAktivan] = true;

		GiveWeaponToPlayer(WARInfo[w][WARTimLider][0], WARInfo[w][WAROruzje][0], 300);
		GiveWeaponToPlayer(WARInfo[w][WARTimLider][0], WARInfo[w][WAROruzje][1], 300);
		GiveWeaponToPlayer(WARInfo[w][WARTimLider][0], WARInfo[w][WAROruzje][2], 300);
		GiveWeaponToPlayer(WARInfo[w][WARTimLider][0], WARInfo[w][WAROruzje][3], 300);
		SetPlayerVirtualWorld(WARInfo[w][WARTimLider][0], w);
		Fusion_SetPlayerHealth(WARInfo[w][WARTimLider][0], 100);
		Fusion_SetPlayerArmour(WARInfo[w][WARTimLider][0], 100);

		GiveWeaponToPlayer(WARInfo[w][WARTimLider][1], WARInfo[w][WAROruzje][0], 300);
		GiveWeaponToPlayer(WARInfo[w][WARTimLider][1], WARInfo[w][WAROruzje][1], 300);
		GiveWeaponToPlayer(WARInfo[w][WARTimLider][1], WARInfo[w][WAROruzje][2], 300);
		GiveWeaponToPlayer(WARInfo[w][WARTimLider][1], WARInfo[w][WAROruzje][3], 300);
		SetPlayerVirtualWorld(WARInfo[w][WARTimLider][1], w);
		Fusion_SetPlayerHealth(WARInfo[w][WARTimLider][1], 100);
		Fusion_SetPlayerArmour(WARInfo[w][WARTimLider][1], 100);

		WARInfo[w][WARTeamID][0] = PlayerInfo[WARInfo[w][WARTimLider][0]][xClan];
		WARInfo[w][WARTeamID][1] = PlayerInfo[WARInfo[w][WARTimLider][1]][xClan];

		WARInfo[w][WARTimClanovi][0]++;
		WARInfo[w][WARTimClanovi][1]++;

		WARInfo[w][WARTimer] = SetTimerEx("ZaustaviWAR", 10*60000, false, "d", w);
		WARInfo[w][TimerWARMin] = 1; WARInfo[w][TimerWARSec] =0;
		WARInfo[w][TimerWAROstaloVreme] = SetTimerEx("TimerWAROstaloVremeB", 1000, true, "d", w);

		ResetujWarIgraca(WARInfo[w][WARTimLider][0]);
		WARPInfo[WARInfo[w][WARTimLider][0]][WARTim][0] = true;
		WARPInfo[WARInfo[w][WARTimLider][0]][WARIgrac] = w;

		ResetujWarIgraca(WARInfo[w][WARTimLider][1]);
		WARPInfo[WARInfo[w][WARTimLider][1]][WARTim][1] = true;
		WARPInfo[WARInfo[w][WARTimLider][1]][WARIgrac] = w;

		new string[128];
		format(string, sizeof(string), ""col_orange"WAR "col_white"| "col_orange"Tim 1: "col_white"%s "col_white"| "col_orange"Tim 2: "col_white"%s", getOrgName(PlayerInfo[WARInfo[w][WARTimLider][0]][xClan]), getOrgName(PlayerInfo[WARInfo[w][WARTimLider][1]][xClan]));
			SCM(WARInfo[w][WARTimLider][0], -1, string);
		SCM(WARInfo[w][WARTimLider][0], -1, "War chat /wp.");

		format(string, sizeof(string), ""col_orange"WAR "col_white"| "col_orange"Tim 1: "col_white"%s "col_white"| "col_orange"Tim 2: "col_white"%s", getOrgName(PlayerInfo[WARInfo[w][WARTimLider][0]][xClan]), getOrgName(PlayerInfo[WARInfo[w][WARTimLider][1]][xClan]));
			SCM(WARInfo[w][WARTimLider][1], -1, string);
		SCM(WARInfo[w][WARTimLider][1], -1, "War chat /wp.");

		WarTDControl(WARInfo[w][WARTimLider][0], true);
		WarTDControl(WARInfo[w][WARTimLider][1], true);
		SetWarStatsTD(w);

		format(varstring, sizeof(varstring), "WAR | %s je pokrenuo war izmedju %s i %s", ImeIgraca(WARInfo[w][WARTimLider][0]), getOrgName(PlayerInfo[WARInfo[w][WARTimLider][0]][xClan]), getOrgName(PlayerInfo[WARInfo[w][WARTimLider][1]][xClan]));
		AdminPoruka(NARACRVENA, varstring);

		new string12[128];
		format(string12, sizeof(string12), "Igrac %s je pokrenuo war izmedju %s i %s", ImeIgraca(WARInfo[w][WARTimLider][0]), getOrgName(PlayerInfo[WARInfo[w][WARTimLider][0]][xClan]), getOrgName(PlayerInfo[WARInfo[w][WARTimLider][1]][xClan]));
		LogSave("Ostalo/LogWAR.log", string12);
			CommandTime[playerid] = gettime() + 300;

	}
	else {
		new w = KreiranjeWara[playerid];
		SCM(WARInfo[w][WARTimLider][0], -1, "Protivnicki Lider je odbio poziv za war!");
		WARInfo[w][WARKreiranje] = false;
		WARInfo[w][WARAktivan] = false;
		KreiranjeWara[WARInfo[w][WARTimLider][0]] = -1;
		KreiranjeWara[playerid] = -1;
	}
}
else if(dialogid == dialog_DOGLAS) {
	if(!response) return 1;
	if(response) {
		new CHB = 5;
		if(PlayerInfo[playerid][xVIPLevel] < CHB) return SendErrorMessage(playerid, "Nemate dovoljno Fusion Gaming bodova.");
		new text[128];
		if(sscanf(inputtext, "s[128]", text)) return SPD(playerid, dialog_DOGLAS, DSI, D_NASLOV, "Unesi oglas koji zelite da objavite", D_ODABERI, D_ODUSTANI);
		format(varstring, sizeof(varstring), "Oglas: %s, Kontakt: %s Broj: %d",  text, ImeIgraca(playerid), PlayerInfo[playerid][xBrojTelefona]);
		OOCNews(0x00D900C8, varstring);
		PlayerInfo[playerid][xBrojTelefona] = strval(inputtext);
		SavePlayer(playerid);
		SCM(playerid, SVETLOCRVENA, "Dali ste oglas za bodove!");

		text[0] = (EOS);
	}
}
else if(dialogid == dialog_IZMENABROJA) {
	if(!response) return 1;
	if(response) {
		new CHB = 10;
		if(strlen(inputtext) != 6) return SendErrorMessage(playerid, "Mora biti samo 6 cifara!");
		if(PlayerInfo[playerid][xVIPLevel] < CHB) return SendErrorMessage(playerid, "Nemate dovoljno Fusion Gaming bodova.");
		if(!IsNumeric(inputtext)) return SendErrorMessage(playerid, "Moze samo brojevi.");
		if(strval(inputtext) < 100000) return SendErrorMessage(playerid, "Pogresan broj.");
		PlayerInfo[playerid][xVIPLevel] -= CHB;
		PlayerInfo[playerid][xBrojTelefona] = strval(inputtext);
		SavePlayer(playerid);
		SendClientMessageEx(playerid, SVETLOCRVENA, "Promenili ste broj u "col_white"%s!", inputtext);
		SendClientMessageEx(playerid, CRVENA, "Iskoristili ste %d CHB imate još %d CHB.", CHB, PlayerInfo[playerid][xVIPLevel]);
	}
}
else if(dialogid == dialog_EMAIL) {
	if(!response) return 1;
	if(response) {
		new CHB = 50;
		if(PlayerInfo[playerid][xVIPLevel] < CHB) return SendErrorMessage(playerid, "Nemate dovoljno Fusion Gaming bodova.");
		new mailstring = strfind(inputtext, "@", true), tackastring = strfind(inputtext, ".", true);
		if(mailstring == -1 || tackastring == -1) {
			SPD(playerid, dialog_EMAIL, DSI, D_NASLOV, "U prazni prostor ispod unesite vasu e-mail adresu.\nE-mail adresa ce nam posluziti u vracanju vasih passworda.(Bez maila nema vracanja passworda)", "Unos", "Izlaz");
		}
		PlayerInfo[playerid][xVIPLevel] -= CHB;
		strmid(PlayerInfo[playerid][xEmail], inputtext, 0, strlen(inputtext), 34);
		SavePlayer(playerid);
		SendClientMessageEx(playerid, SVETLOCRVENA, "Promenili ste email u "col_white"%s!", inputtext);
		SendClientMessageEx(playerid, CRVENA, "Iskoristili ste %d CHB imate još %d CHB.", CHB, PlayerInfo[playerid][xVIPLevel]);
	}
}
else if(dialogid == dialog_PROPERTYLIST) {
	if(!response) return 1;
	if(response) {
		switch(listitem) {
			case 0: {
				if(PlayerInfo[playerid][xProperty][0] == -1) return SendErrorMessage(playerid, "Nemate imovinu u slotu 1.");
				if(strcmp(ImeIgraca(playerid), II[PlayerInfo[playerid][xProperty][0]][iOwner], true) == 0) {
					ChosenProperty[playerid] = PlayerInfo[playerid][xProperty][0];
					SPD(playerid, dialog_PROPCHOSEN, DSL, D_NASLOV, "Informacije\nZakljucaj/Otkljucaj\nUnapredi\nOrmar\nSef\n{F81414]Prodaj drzavi\n{F81414]Prodaj igracu\n{FFFFFF]Rentanje\nUzimanje novca\nOstavljanje novca", D_ODABERI, D_ODUSTANI);
				} else return SendErrorMessage(playerid, "Ovo nije vase..");
			}
			case 1: {
				if(PlayerInfo[playerid][xProperty][1] == -1) return SendErrorMessage(playerid, "Nemate imovinu u slotu 2.");
				if(strcmp(ImeIgraca(playerid), II[PlayerInfo[playerid][xProperty][1]][iOwner], true) == 0) {
					ChosenProperty[playerid] = PlayerInfo[playerid][xProperty][1];
					SPD(playerid, dialog_PROPCHOSEN, DSL, D_NASLOV, "Informacije\nZakljucaj/Otkljucaj\nUnapredi\nOrmar\nSef\n{F81414]Prodaj drzavi\n{F81414]Prodaj igracu\n{FFFFFF]Rentanje\nUzimanje novca\nOstavljanje novca", D_ODABERI, D_ODUSTANI);
				} else return SendErrorMessage(playerid, "Ovo nije vase..");
			}
			case 2: {
				if(PlayerInfo[playerid][xProperty][2] == -1) return SendErrorMessage(playerid, "Nemate imovinu u slotu 3.");
				if(strcmp(ImeIgraca(playerid), II[PlayerInfo[playerid][xProperty][2]][iOwner], true) == 0) {
					ChosenProperty[playerid] = PlayerInfo[playerid][xProperty][2];
					SPD(playerid, dialog_PROPCHOSEN, DSL, D_NASLOV, "Informacije\nZakljucaj/Otkljucaj\nUnapredi\nOrmar\nSef\n{F81414]Prodaj drzavi\n{F81414]Prodaj igracu\n{FFFFFF]Rentanje\nUzimanje novca\nOstavljanje novca", D_ODABERI, D_ODUSTANI);
				} else return SendErrorMessage(playerid, "Ovo nije vase..");
			}
		}
	}
}
else if(dialogid == dialog_PROPCHOSEN) {
	if(!response) return 1;
	if(response) {
		switch(listitem) {
			case 0: {
				new hid = ChosenProperty[playerid];
				if(GetNearestProperty(playerid) != hid && inProperty[playerid] != hid) return SendErrorMessage(playerid, "Niste pored svoje imovine ili u njoj!");
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
				format(varstring, sizeof(varstring), ""col_server"%s "col_white"- "col_server"ID: "col_white"%d\n\n",  GetPropertyAName(hid), hid);
				strcat(DialogStrgEx, varstring);

				format(varstring, sizeof(varstring), ""col_server"Novac: "col_white"%d\n", II[hid][iMoney]);
				strcat(DialogStrgEx, varstring);
				format(varstring, sizeof(varstring), ""col_server"Broj rentova: "col_white"%d\n", II[hid][iRentovano]);
				strcat(DialogStrgEx, varstring);
				strcat(DialogStrgEx, ""col_server"_____________"col_white"_____________\n");
				if(II[hid][iLocked] == 1)
					strcat(DialogStrgEx, ""col_server"Status vrata: "col_white"Zakljucano\n");
				else
					strcat(DialogStrgEx, ""col_server"Status vrata: "col_white"Otkljucano\n");
				strcat(DialogStrgEx, ""col_server"_____________"col_white"_____________\n");
				if(II[hid][iLockLevel] == 0)
					strcat(DialogStrgEx, ""col_server"Kvaliteta brave: "col_white"Nekvalitetna\n");
				else {
					format(varstring, sizeof(varstring), ""col_server"Kvaliteta brave: "col_white"%d\n",  II[hid][iLockLevel]);
					strcat(DialogStrgEx, varstring);
				}
				strcat(DialogStrgEx, ""col_server"_____________"col_white"_____________\n");
				if(II[hid][iDoorLevel] == 0)
					strcat(DialogStrgEx, ""col_server"Kvalitet vrata: "col_white"Nekvalitetna\n");
				else {
					format(varstring, sizeof(varstring), ""col_server"Kvalitet vrata: "col_white"%d level\n",  II[hid][iDoorLevel]);
					strcat(DialogStrgEx, varstring);
				}
				strcat(DialogStrgEx, ""col_server"_____________"col_white"_____________\n");
				if(II[hid][iOrmar] > 0) {
					strcat(DialogStrgEx, ""col_server"Ormar: "col_white"Ima\n");
				} else strcat(DialogStrgEx, ""col_server"Ormar: "col_white"Nema\n");
				strcat(DialogStrgEx, ""col_server"_____________"col_white"_____________\n");
				if(II[hid][iAlarm] > 0) {
					format(varstring, sizeof(varstring), ""col_server"Alarm level: "col_white"%d",  II[hid][iAlarm]);
					strcat(DialogStrgEx, varstring);
				} else strcat(DialogStrgEx, ""col_server"Alarm: "col_white"Nema");
				SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "");
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			}
			case 1: {
				new id = ChosenProperty[playerid];
				if(GetNearestProperty(playerid) != id && inProperty[playerid] != id) return SendErrorMessage(playerid, "Niste pored svoje imovine ili u njoj!");
				if(strcmp(ImeIgraca(playerid), II[id][iOwner], true) == 0) {
					if(II[id][iLocked] == 0) {
						II[id][iLocked] = 1;
						GameTextForPlayer(playerid, "~w~Imovina ~r~zakljucana", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						format(varstring, sizeof(varstring), "* %s zakljucava %s.", ImeIgraca(playerid), GetPropertyName(id));
						PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
					}
					else {
						II[id][iLocked] = 0;
						GameTextForPlayer(playerid, "~w~Imovina ~g~otkljucana", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						format(varstring, sizeof(varstring), "* %s otkljucava %s.", ImeIgraca(playerid), GetPropertyName(id));
						PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
					}
				} else return SendErrorMessage(playerid, "Ovo nije vase..");
			}
			case 2: {
				new id = ChosenProperty[playerid];
				if(inProperty[playerid] != id) return SendErrorMessage(playerid, "Niste u vasoj kuci/stanu/vikendici.");
				SPD(playerid, dialog_PROPUNAPREDI, DSI, D_NASLOV, "Izaberite broj: 1. ormar, 2. sef, 3. alarm, 4. brava, 5. vrata.\nCene:ormar(250$), sef(250$), alarm(500$), brava(300$), vrata(100$)", D_ODABERI, D_ODUSTANI);
			}
			case 3: {
				new id = ChosenProperty[playerid];
				if(inProperty[playerid] != id) return SendErrorMessage(playerid, "Niste u vasoj kuci/stanu/vikendici.");
				if(II[inProperty[playerid]][iOrmar] != 1) return SendErrorMessage(playerid, "U ovoj imovini nema ormara!");
				if(strcmp(ImeIgraca(playerid), II[inProperty[playerid]][iOwner], true) == 0) {
					SPD(playerid, dialog_ORMAR, DSL, D_NASLOV, "Stavi trenutnu odecu u ormar\nUdji u ormar\nIzbaci odecu iz ormara", D_ODABERI, D_ODUSTANI);
				} else return SendErrorMessage(playerid, "Ovo nije vase..");
			}
			case 4: {
				new id = ChosenProperty[playerid];
				if(inProperty[playerid] != id) return SendErrorMessage(playerid, "Niste u vasoj kuci/stanu/vikendici.");
				if(strcmp(ImeIgraca(playerid), II[inProperty[playerid]][iOwner], true) == 0) {
					new hid = inProperty[playerid];
					new i = GetNearestFurniture(playerid, inProperty[playerid]);
					if(GetNearestFurniture(playerid, inProperty[playerid]) == -1) return SendErrorMessage(playerid, "Nema objekta u blizini.");
					if(Furniture[hid][i][f_Model] != 2332) return SendErrorMessage(playerid, "Niste pored sefa.");
					SPD(playerid, dialog_SAFEALL, DSL, D_NASLOV, "Informacije\nPromeni lozinku\nOtkljucaj/Zakljucaj\nOstavi drogu\nUzmi drogu\nOstavi oruzje\nUzmi oruzje\nOstavi materijale\nUzmi materijale", D_ODABERI, D_ODUSTANI);
				} else return SendErrorMessage(playerid, "Ovo nije vase..");
			}
			case 5: {
				new id = ChosenProperty[playerid];
				if(GetNearestProperty(playerid) != id) return SendErrorMessage(playerid, "Niste pored svoje imovine!");
				if(strcmp(ImeIgraca(playerid), II[GetNearestProperty(playerid)][iOwner], true) == 0) {
					SPD(playerid, dialog_PROPSELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vasu imovinu drzavi?", "Da", "Ne");

				} else return SendErrorMessage(playerid, "Ovo nije vase..");
			}
			case 6: {
				new id = ChosenProperty[playerid];
				if(GetNearestProperty(playerid) != id) return SendErrorMessage(playerid, "Niste pored svoje imovine!");
				SPD(playerid, dialog_PROPSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu imovina", "Ponudi", D_ODUSTANI);
			}
			case 7: {
				new id = ChosenProperty[playerid];
				if(GetNearestProperty(playerid) != id) return SendErrorMessage(playerid, "Niste pored svoje imovine!");
				if(strcmp(ImeIgraca(playerid), II[GetNearestProperty(playerid)][iOwner], true) == 0) {

					SPD(playerid, dialog_RENTABLE, DSI, D_NASLOV, "Unesite cenu renta.\nAko uneses 0 nema rentanja u vasoj kuci.\nMaksimalna cena je 1000$", D_ODABERI, D_ODUSTANI);
				} else return SendErrorMessage(playerid, "Ovo nije vase..");
			}
			case 8: {
				new id = ChosenProperty[playerid];
				if(inProperty[playerid] != id) return SendErrorMessage(playerid, "Niste u vasoj kuci/stanu/vikendici.");
				SPD(playerid, dialog_PROPTAKEMONEY, DSI, D_NASLOV, "Unesite koliko zelite da uzmete novca iz imovine.", D_ODABERI, D_ODUSTANI);
			}
			case 9: {
				new id = ChosenProperty[playerid];
				if(inProperty[playerid] != id) return SendErrorMessage(playerid, "Niste u vasoj kuci/stanu/vikendici.");
				SPD(playerid, dialog_PROPPUTMONEY, DSI, D_NASLOV, "Unesite koliko zelite da ostavite novca u imovine.", D_ODABERI, D_ODUSTANI);
			}
		}
	}
}
else if(dialogid == dialog_PROPTAKEMONEY) {
	if(!response) return 1;
	if(response) {
		new novac, id = ChosenProperty[playerid];
		if(inProperty[playerid] != id) return SendErrorMessage(playerid, "Niste u vasoj kuci/stanu/vikendici.");
		if(sscanf(inputtext, "i", novac)) return SPD(playerid, dialog_PROPTAKEMONEY, DSI, D_NASLOV, "Unesite koliko zelite da uzmete novca iz imovine.", D_ODABERI, D_ODUSTANI);
		if(novac < 0 || novac > 100000000) return SPD(playerid, dialog_PROPTAKEMONEY, DSI, D_NASLOV, "Unesite koliko zelite da uzmete novca iz imovine.", D_ODABERI, D_ODUSTANI);
		if(novac > II[id][iMoney]) return SPD(playerid, dialog_PROPTAKEMONEY, DSI, D_NASLOV, "Unesite koliko zelite da uzmete novca iz imovine.", D_ODABERI, D_ODUSTANI);

		II[id][iMoney] -= novac;
		SaveProperty(id);
		DajIgracuNovac(playerid, novac);
		SendInfoMessage(playerid, "Uzeli ste %d$ iz sefa.", novac);
	}
}
else if(dialogid == dialog_PROPPUTMONEY) {
	if(!response) return 1;
	if(response) {
		new novac, id = ChosenProperty[playerid];
		if(inProperty[playerid] != id) return SendErrorMessage(playerid, "Niste u vasoj kuci/stanu/vikendici.");
		if(sscanf(inputtext, "i", novac)) return SPD(playerid, dialog_PROPPUTMONEY, DSI, D_NASLOV, "Unesite koliko zelite da ostavite novca u imovine.", D_ODABERI, D_ODUSTANI);
		if(novac < 0 || novac > 100000000) return SPD(playerid, dialog_PROPPUTMONEY, DSI, D_NASLOV, "Unesite koliko zelite da ostavite novca u imovine.", D_ODABERI, D_ODUSTANI);
		if(novac > PlayerInfo[playerid][xNovac]) return SPD(playerid, dialog_PROPPUTMONEY, DSI, D_NASLOV, "Unesite koliko zelite da ostavite novca u imovine.", D_ODABERI, D_ODUSTANI);

		II[id][iMoney] += novac;
		SaveProperty(id);
		DajIgracuNovac(playerid, -novac);
		SendInfoMessage(playerid, "Ostavili ste %d$ u sef.", novac);
	}
}
else if(dialogid == dialog_RENTABLE) {
	if(!response) return 1;
	if(response) {
		new cena, id = ChosenProperty[playerid];
		if(sscanf(inputtext, "i", cena)) return SPD(playerid, dialog_RENTABLE, DSI, D_NASLOV, "Unesite cenu renta.\nAko uneses 0 nema rentanja u vasoj kuci.\nMaksimalna cena je 5000$", D_ODABERI, D_ODUSTANI);
		if(cena < 0 || cena > 5000) return SPD(playerid, dialog_RENTABLE, DSI, D_NASLOV, "Unesite cenu renta.\nAko uneses 0 nema rentanja u vasoj kuci.\nMaksimalna cena je 5000$", D_ODABERI, D_ODUSTANI);

		if(cena == 0) {
			II[id][iRentable] = 0;
			II[id][iRentPrice] = 0;

			PropertyRefresh(id);
			SaveProperty(id);
			SendInfoMessage(playerid, "Ugasili ste mogucnost rentanja.");
		}
		else if(cena > 0) {
			II[id][iRentable] = 1;
			II[id][iRentPrice] = cena;

			PropertyRefresh(id);
			SaveProperty(id);
			SendInfoMessage(playerid, "Ukljucili ste mogucnost rentanja za %d$.", cena);
		}
	}
}
else if(dialogid == dialog_PROPSELLDRZAVA) {
	if(response) {
		if(PlayerInfo[playerid][xBRacun] < 0) return SendErrorMessage(playerid, "Ne mozes da prodas imovinu dok ne izadjes iz minusa u banci.");
		new id = ChosenProperty[playerid];
		if(GetNearestProperty(playerid) != id) return SendErrorMessage(playerid, "Niste pored svoje imovine!");
		if(ponudjenotomigacu[playerid] == 1) return SendErrorMessage(playerid, "Vec ste ponudili ovu imovinu nekom igracu.");
		if(strcmp(ImeIgraca(playerid), II[GetNearestProperty(playerid)][iOwner], true) == 0) {
			if(PlayerInfo[playerid][xProperty][0] == id) { PlayerInfo[playerid][xProperty][0] = -1;}
			else if(PlayerInfo[playerid][xProperty][1] == id) { PlayerInfo[playerid][xProperty][1] = -1;}
			else if(PlayerInfo[playerid][xProperty][2] == id) { PlayerInfo[playerid][xProperty][2] = -1;}

			new string1[128];
			format(string1, sizeof(string1), "Igrac %s je prodao imovinu ID %d na buy", ImeIgraca(playerid), id);
			LogSave("Ostalo/LogProdajaImovine.log", string1);

			strmid(II[GetNearestProperty(playerid)][iOwner], "Drzava", 0, strlen("Drzava"), 32);
			DajIgracuNovac(playerid, (II[GetNearestProperty(playerid)][iPrice]/2));
			II[GetNearestProperty(playerid)][iNeaktivnost] = 0;
			II[GetNearestProperty(playerid)][iOwned] = 0; PlayerPlaySound(playerid, 1058, 0, 0, 0);
			SavePlayer(playerid); PropertyRefresh(GetNearestProperty(playerid)); SaveProperty(GetNearestProperty(playerid));

		} else return SendErrorMessage(playerid, "Ovo nije vase..");
	}
	if(!response) {
		SCM(playerid, -1, "Odustali ste od prodaje imovine drzavi");
	}
}
else if(dialogid == dialog_PROPSELLTP) {
	if(!response) return 1;
	if(response) {
		if(PlayerInfo[playerid][xBRacun] < 0) return SendErrorMessage(playerid, "Ne mozes da prodas imovinu dok ne izadjes iz minusa u banci.");
		new id = ChosenProperty[playerid];
		new idigraca, cena, string[128], Float:Pos[3];
		if(sscanf(inputtext, "ui", idigraca, cena)) return SPD(playerid, dialog_PROPSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu imovina", "Ponudi", D_ODUSTANI);
		GetPlayerPos(idigraca, Pos[0], Pos[1], Pos[2]);
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, Pos[0], Pos[1], Pos[2])) return SendErrorMessage(playerid, "Igrac nije blizu vas");
		if(cena < 1) return SendErrorMessage(playerid, "Cena ne moze biti manja od 1$!");
		if(idigraca == IPI) return SendErrorMessage(playerid, "Pogresan ID.");
		if(idigraca == playerid) return SendErrorMessage(playerid, "Ne mozes sam sebi prodati kucu!");
		if(PlayerInfo[idigraca][xProperty][0] != -1 && PlayerInfo[idigraca][xProperty][1] != -1 && PlayerInfo[idigraca][xProperty][2] != -1)return SendErrorMessage(playerid, "Igrac vec ima 3 imovine!");
		if(PlayerInfo[idigraca][xLevel] < II[id][iLevel]) return SendClientMessageEx(playerid, CRVENA, "Da bi ste tom igracu prodali ovu imovinu, on mora biti level %d+.", II[id][iLevel]);
		SendClientMessageEx(playerid, SVETLOPLAVA, "Ponudili ste igracu %s imovinu po ceni od %d.", ImeIgraca(idigraca), cena);
		GlobalProdaja[idigraca] = playerid;
		GlobalCena[idigraca] = cena;
		GlobalID[idigraca] = id;
		ponudjenotomigacu[playerid] = 1;
		format(string, sizeof(string), "Igrac %s vam je ponudio da kupite njegovu imovinu za %d", ImeIgraca(playerid), cena);
		SPD(idigraca, dialog_ACCEPTPROP, DSMSG, D_NASLOV, string, "Prihvati", "Odbij");
	}
}
else if(dialogid == dialog_ACCEPTPROP) {
	if(response) {
		new id = GlobalID[playerid];
		if(PlayerInfo[playerid][xNovac] < GlobalCena[playerid]) return SendErrorMessage(playerid, "Nemate dovoljno novca.");

		if(PlayerInfo[GlobalProdaja[playerid]][xProperty][0] == id) { PlayerInfo[GlobalProdaja[playerid]][xProperty][0] = -1;}
		else if(PlayerInfo[GlobalProdaja[playerid]][xProperty][1] == id) { PlayerInfo[GlobalProdaja[playerid]][xProperty][1] = -1;}
		else if(PlayerInfo[GlobalProdaja[playerid]][xProperty][2] == id) { PlayerInfo[GlobalProdaja[playerid]][xProperty][2] = -1;}

		if(PlayerInfo[playerid][xProperty][0] == -1) { PlayerInfo[playerid][xProperty][0] = id;}
		else if(PlayerInfo[playerid][xProperty][1] == -1) { PlayerInfo[playerid][xProperty][1] = id;}
		else if(PlayerInfo[playerid][xProperty][2] == -1) { PlayerInfo[playerid][xProperty][2] = id;}

		new string1[128];
		format(string1, sizeof(string1), "Igrac %s je prodao imovinu ID %d igracu %s za %d", ImeIgraca(GlobalProdaja[playerid]), id, ImeIgraca(playerid), GlobalCena[playerid]);
		LogSave("Ostalo/LogProdajaImovine.log", string1);

		SendClientMessageEx(playerid, SVETLOPLAVA, "Uspesno ste kupili imovinu od igraca %s za $d.", ImeIgraca(GlobalProdaja[playerid]), GlobalCena[playerid]);
		strmid(II[id][iOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 255);
		SaveProperty(id); PropertyRefresh(id);
		SavePlayer(playerid); SavePlayer(GlobalProdaja[playerid]);
		format(varstring, sizeof(varstring), "Prodali ste kucu igracu %s za %d!", ImeIgraca(playerid), GlobalCena[playerid]);
		SCM(GlobalProdaja[playerid], -1, varstring);
		DajIgracuNovac(GlobalProdaja[playerid], GlobalCena[playerid]);
		DajIgracuNovac(playerid, -GlobalCena[playerid]);
		SCM(playerid, -1, "Kupili ste kucu!");
		ponudjenotomigacu[GlobalProdaja[playerid]] = 0;
		GlobalProdaja[playerid] = -1;
		GlobalCena[playerid] = -1;
		GlobalID[playerid] = -1;
	}
	else if(!response) {
		format(varstring, sizeof(varstring),"Igrac %s je odbio vasu ponudu za kupovinu imovine!", ImeIgraca(playerid));
		SCM(GlobalProdaja[playerid], -1, varstring);
		SCM(playerid, -1, "Odbili ste ponudu!");
		ponudjenotomigacu[GlobalProdaja[playerid]] = 0;
		GlobalProdaja[playerid] = -1;
		GlobalCena[playerid] = -1;
		GlobalID[playerid] = -1;
	}
}
else if(dialogid == dialog_SAFEALL) {
	if(!response) return 1;
	if(response) {
		switch(listitem) {
			case 0: {
				new hid = inProperty[playerid];
				new wepname1[32], wepname2[32], wepname3[32], wepname4[32];

				new drug1 = II[hid][iDrugCode][0],
				drug2 = II[hid][iDrugCode][1],
				drug3 = II[hid][iDrugCode][2],
				drug4 = II[hid][iDrugCode][3],
				drug5 = II[hid][iDrugCode][4],
				drug6 = II[hid][iDrugCode][5],
				drug7 = II[hid][iDrugCode][6],
				drug8 = II[hid][iDrugCode][7],
				drug9 = II[hid][iDrugCode][8],
				drug10 = II[hid][iDrugCode][9];

				if(II[hid][iOruzje][0] != 0)
					format(wepname1, sizeof(wepname1), "%s", WeapNames[II[hid][iOruzje][0]]);
				else
					strmid(wepname1, "None", 0, 5);

				if(II[hid][iOruzje][1] != 0)
					format(wepname2, sizeof(wepname2), "%s", WeapNames[II[hid][iOruzje][1]]);
				else
					strmid(wepname2, "None", 0, 5);

				if(II[hid][iOruzje][2] != 0)
					format(wepname3, sizeof(wepname3), "%s", WeapNames[II[hid][iOruzje][2]]);
				else
					strmid(wepname3, "None", 0, 5);

				if(II[hid][iOruzje][3] != 0)
					format(wepname4, sizeof(wepname4), "%s", WeapNames[II[hid][iOruzje][3]]);
				else
					strmid(wepname4, "None", 0, 5);

				if(II[hid][iSafeStatus] == 1) {
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

					format(varstring, sizeof(varstring), ""col_white"Novac: %d$\n\n", II[hid][iMoney]);
					strcat(DialogStrgEx, varstring);

					format(varstring, sizeof(varstring), "Materijali: %d\n", II[hid][iMats]);
					strcat(DialogStrgEx, varstring);

					strcat(DialogStrgEx, ""col_red"______________DROGA______________\n");

					format(varstring, sizeof(varstring), ""col_white"Slot 1: %s(%d g) | Slot 2: %s(%d g)\n", GetDrugNameByDrugID(drug1), II[hid][iDrug][0], GetDrugNameByDrugID(drug2), II[hid][iDrug][1]);
					strcat(DialogStrgEx, varstring);

					format(varstring, sizeof(varstring), "Slot 3: %s(%d g) | Slot 4: %s(%d g)\n", GetDrugNameByDrugID(drug3), II[hid][iDrug][2], GetDrugNameByDrugID(drug4), II[hid][iDrug][3]);
					strcat(DialogStrgEx, varstring);

					format(varstring, sizeof(varstring), "Slot 5: %s(%d g) | Slot 6: %s(%d g)\n", GetDrugNameByDrugID(drug5), II[hid][iDrug][4], GetDrugNameByDrugID(drug6), II[hid][iDrug][5]);
					strcat(DialogStrgEx, varstring);

					format(varstring, sizeof(varstring), "Slot 7: %s(%d g) | Slot 8: %s(%d g)\n", GetDrugNameByDrugID(drug7), II[hid][iDrug][6], GetDrugNameByDrugID(drug8), II[hid][iDrug][7]);
					strcat(DialogStrgEx, varstring);

					format(varstring, sizeof(varstring), "Slot 9: %s(%d g) | Slot 10: %s(%d g)\n\n", GetDrugNameByDrugID(drug9), II[hid][iDrug][8], GetDrugNameByDrugID(drug10), II[hid][iDrug][9]);
					strcat(DialogStrgEx, varstring);

					strcat(DialogStrgEx, ""col_red"______________ORUZJE______________\n");

					format(varstring, sizeof(varstring), ""col_white"Slot 1:[%s]    |    Metaka: %d\n", wepname1, II[hid][iMunicija][0]);
					strcat(DialogStrgEx, varstring);

					format(varstring, sizeof(varstring), "Slot 2:[%s]    |    Metaka: %d\n", wepname2, II[hid][iMunicija][1]);
					strcat(DialogStrgEx, varstring);

					format(varstring, sizeof(varstring), "Slot 3:[%s]    |    Metaka: %d\n", wepname3, II[hid][iMunicija][2]);
					strcat(DialogStrgEx, varstring);

					format(varstring, sizeof(varstring), "Slot 4:[%s]    |    Metaka: %d", wepname4, II[hid][iMunicija][3]);
					strcat(DialogStrgEx, varstring);

					SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "");
					strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

				}
				else return SendErrorMessage(playerid, "Sef je zakljucan!");
			}
			case 1: {
				SPD(playerid, dialog_SAFECHANGEPASS, DSI, D_NASLOV, "Sifra mora biti u brojevima i mora biti u duzini od 6 karaktera.\nUnesi novu lozinku za sef.", D_ODABERI, D_ODUSTANI);
			}
			case 2: {
				new hid = inProperty[playerid];
				if(II[hid][iSafeStatus] == 1) {
					II[hid][iSafeStatus] = 0; SaveProperty(hid);
					SCM(playerid, FUSIONGAMING, "Identitet potvrdjen. Sef je zakljucan!");
				}
				else {
					SPD(playerid, dialog_SAFEUNLOCK, DSI, D_NASLOV, "Unesi svoju lozinku sefa za otkljucavanje.", D_ODABERI, D_ODUSTANI);
				}
			}
			case 3: {
				new hid = inProperty[playerid];
				if(II[hid][iSafeStatus] == 0) return SendErrorMessage(playerid, "Sef je zakljucan!");
				SPD(playerid, dialog_SAFEPUTDRUG, DSI, D_NASLOV, "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI);
			}
			case 4: {
				new hid = inProperty[playerid];
				if(II[hid][iSafeStatus] == 0) return SendErrorMessage(playerid, "Sef je zakljucan!");
				SPD(playerid, dialog_SAFETAKEDRUG, DSI, D_NASLOV, "Unesite slot droge u imovini i kolicinu droge za uzimanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI);
			}
			case 5: {
				if(GetFactionType(playerid) == ORG_TIP_PD || GetFactionType(playerid) == ORG_TIP_HITM) {
					SendErrorMessage(playerid, "Vi ste u drzavnoj organizaciji ne mozes ubacivati oruzje u sef!");
					return 1;
				}
				if(WARPInfo[playerid][WARIgrac] != -1) return SendErrorMessage(playerid, "Ne mozes ovo dok si u waru.");
				if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes ovo dok si na dmu.");
				if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete ostaviti oruzje, imate zabranu - /disarmtime.");

				new wepname[32];
				new hid = inProperty[playerid];

				if(ForbiddenWeap(playerid)) return SendErrorMessage(playerid, "Ne mozes ubaciti zabranjena oruzja u sef.");
				if(II[hid][iSafeStatus] == 0) return SendErrorMessage(playerid, "Sef je zakljucan!");
				if(II[hid][iOruzje][0] != 0 && II[hid][iOruzje][1] != 0 && II[hid][iOruzje][2] != 0 && II[hid][iOruzje][3] != 0) return SendErrorMessage(playerid, "Slotovi za oruzja su zauzeti!");
				if(II[hid][iOruzje][0] == 0) {
					if((II[hid][iMunicija][0] + GetPlayerAmmo(playerid)) < 501) {

						format(wepname, sizeof(wepname), "%s", WeapNames[GetWeapon(playerid)]);
						antiCheatCS[playerid][WeaponDetect] = 3;
						II[hid][iMunicija][0] = GetPlayerAmmo(playerid);
						II[hid][iOruzje][0] = GetWeapon(playerid);
						RemovePlayerWeapon(playerid, GetWeapon(playerid));
						SaveProperty(hid);

						format(varstring, sizeof(varstring), "* %s sprema %s u sef.", ImeIgraca(playerid), wepname);
						PorukaRadius(6.0, playerid, varstring, LJUBICASTA);
					} else return SendErrorMessage(playerid, "U 1 slotu mozete staviti najvise 500 metaka!");
				}
				else if(II[hid][iOruzje][1] == 0) {
					if((II[hid][iMunicija][1] + GetPlayerAmmo(playerid)) < 501) {
						format(wepname, sizeof(wepname), "%s", WeapNames[GetWeapon(playerid)]);
						antiCheatCS[playerid][WeaponDetect] = 3;
						II[hid][iMunicija][1] = GetPlayerAmmo(playerid);
						II[hid][iOruzje][1] = GetWeapon(playerid);
						RemovePlayerWeapon(playerid, GetWeapon(playerid));
						SaveProperty(hid);

						format(varstring, sizeof(varstring), "* %s sprema %s u sef.", ImeIgraca(playerid), wepname);
						PorukaRadius(6.0, playerid, varstring, LJUBICASTA);
					} else return SendErrorMessage(playerid, "U 1 slotu mozete staviti najvise 500 metaka!");
				}
				else if(II[hid][iOruzje][2] == 0) {
					if((II[hid][iMunicija][2] + GetPlayerAmmo(playerid)) < 501) {
						format(wepname, sizeof(wepname), "%s", WeapNames[GetWeapon(playerid)]);
						antiCheatCS[playerid][WeaponDetect] = 3;
						II[hid][iMunicija][2] = GetPlayerAmmo(playerid);
						II[hid][iOruzje][2] = GetWeapon(playerid);
						RemovePlayerWeapon(playerid, GetWeapon(playerid));
						SaveProperty(hid);

						format(varstring, sizeof(varstring), "* %s sprema %s u sef.", ImeIgraca(playerid), wepname);
						PorukaRadius(6.0, playerid, varstring, LJUBICASTA);
					} else return SendErrorMessage(playerid, "U 1 slotu mozete staviti najvise 500 metaka!");
				}
				else if(II[hid][iOruzje][3] == 0) {
					if((II[hid][iMunicija][3] + GetPlayerAmmo(playerid)) < 501) {
						format(wepname, sizeof(wepname), "%s", WeapNames[GetWeapon(playerid)]);
						antiCheatCS[playerid][WeaponDetect] = 3;
						II[hid][iMunicija][3] = GetPlayerAmmo(playerid);
						II[hid][iOruzje][3] = GetWeapon(playerid);
						RemovePlayerWeapon(playerid, GetWeapon(playerid));
						SaveProperty(hid);

						format(varstring, sizeof(varstring), "* %s sprema %s u sef.", ImeIgraca(playerid), wepname);
						PorukaRadius(6.0, playerid, varstring, LJUBICASTA);
					} else return SendErrorMessage(playerid, "U 1 slotu mozete staviti najvise 500 metaka!");
				}
			}
			case 6: {
				new hid = inProperty[playerid];
				if(II[hid][iSafeStatus] == 0) return SendErrorMessage(playerid, "Sef je zakljucan!");
				new wepname1[32], wepname2[32], wepname3[32], wepname4[32];
				if(II[hid][iOruzje][0] == 0 && II[hid][iOruzje][1] == 0 && II[hid][iOruzje][2] == 0 && II[hid][iOruzje][3] == 0) return SendErrorMessage(playerid, "Svi slotovi su prazni!");
				if(II[hid][iOruzje][0] != 0)
					format(wepname1, sizeof(wepname1), "%s", WeapNames[II[hid][iOruzje][0]]);
				else
					format(wepname1, sizeof(wepname1), "None");

				if(II[hid][iOruzje][1] != 0)
					format(wepname2, sizeof(wepname2), "%s", WeapNames[II[hid][iOruzje][1]]);
				else
					format(wepname2, sizeof(wepname2), "None");

				if(II[hid][iOruzje][2] != 0)
					format(wepname3, sizeof(wepname3), "%s", WeapNames[II[hid][iOruzje][2]]);
				else
					format(wepname3, sizeof(wepname3), "None");

				if(II[hid][iOruzje][3] != 0)
					format(wepname4, sizeof(wepname4), "%s", WeapNames[II[hid][iOruzje][3]]);
				else
					format(wepname4, sizeof(wepname4), "None");
				PropertySafeGun[playerid] = hid;
				format(varstring, sizeof(varstring), "%s\n%s\n%s\n%s", wepname1, wepname2, wepname3, wepname4);
				SPD(playerid, dialog_PROPERTYWEPTAKE, DSL, D_NASLOV, varstring, D_ODABERI, D_ODUSTANI);
			}
			case 7: {
				new hid = inProperty[playerid];
				if(II[hid][iSafeStatus] == 0) return SendErrorMessage(playerid, "Sef je zakljucan!");
				SPD(playerid, dialog_SAFEPUTMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za ostavljanje.", D_ODABERI, D_ODUSTANI);
			}
			case 8: {
				new hid = inProperty[playerid];
				if(II[hid][iSafeStatus] == 0) return SendErrorMessage(playerid, "Sef je zakljucan!");
				SPD(playerid, dialog_SAFETAKEMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za uzimanje.", D_ODABERI, D_ODUSTANI);
			}
		}
	}
}
else if(dialogid == dialog_SAFEPUTMATS) {

	if(!response) return 1;
	if(response) {

		new kolicina, izbor = inProperty[playerid];
		if(sscanf(inputtext, "d", kolicina)) return SPD(playerid, dialog_SAFETAKEMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za uzimanje.", D_ODABERI, D_ODUSTANI);

		if(PlayerInfo[playerid][xMaterijali] == 0) return SendErrorMessage(playerid, "Nemate materijale kod vas!");
		if(kolicina < 1 || kolicina > PlayerInfo[playerid][xMaterijali]) return SendErrorMessage(playerid, "Nemate toliko materijala kod vas!");

		if((II[izbor][iMats]+kolicina) > 10000) return SendErrorMessage(playerid, "Najvise u sefu moze stati 10000 materijala.");

		PlayerInfo[playerid][xMaterijali] -= kolicina;

		format(varstring, sizeof(varstring), "* %s stavlja nesto u sef.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		SendClientMessageEx(playerid, FUSIONGAMING, "Stavili ste %d materijala u sef.", kolicina);

		II[izbor][iMats] += kolicina;

		SaveProperty(izbor);

	}
}
else if(dialogid == dialog_SAFETAKEMATS) {

	if(!response) return 1;
	if(response) {

		new kolicina, izbor = inProperty[playerid];
		if(sscanf(inputtext, "d", kolicina)) return SPD(playerid, dialog_SAFETAKEMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za uzimanje.", D_ODABERI, D_ODUSTANI);

		if(II[izbor][iMats] == 0) return SendErrorMessage(playerid, "Nema materijala u sefu!");
		if(kolicina < 1 || kolicina > II[izbor][iMats]) return SendErrorMessage(playerid, "Nemate toliko materijala u sefu!");

		PlayerInfo[playerid][xMaterijali] += kolicina;

		format(varstring, sizeof(varstring), "* %s uzima nesto iz sef.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		SendClientMessageEx(playerid, FUSIONGAMING, "Uzeli ste %d materijala iz sef.", kolicina);

		II[izbor][iMats] -= kolicina;

		SaveProperty(izbor);
	}
}
else if(dialogid == dialog_SAFETAKEDRUG) {
	if(!response) return 1;
	if(response) {
		new slot, slot2, kolicina, hid = inProperty[playerid];
		if(sscanf(inputtext, "dd", slot, kolicina)) return SPD(playerid, dialog_SAFETAKEDRUG, DSI, D_NASLOV, "Unesite slot droge u imovini i kolicinu droge za uzimanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI);
		if(II[hid][iSafeStatus] == 0) return SendErrorMessage(playerid, "Sef je zakljucan!");
		if(slot < 1 || slot > 10) return SendErrorMessage(playerid, "Krivi broj slota!");
		slot2 = slot-1;
		if(II[hid][iDrugCode][slot2] == 0) return SendErrorMessage(playerid, "Ova imovina nema drogu pod tim slotom!");
		if(kolicina < 1 || kolicina > II[hid][iDrug][slot2]) return SendErrorMessage(playerid, "Ova imovina nema toliko droge pod tim slotom!");


		if(PlayerInfo[playerid][xDrugCode][0] == 0) {
			PlayerInfo[playerid][xDrugCode][0] = II[hid][iDrugCode][slot2];
			PlayerInfo[playerid][xDrug][0] = kolicina;
		}
		else if(PlayerInfo[playerid][xDrugCode][1] == 0) {
			PlayerInfo[playerid][xDrugCode][1] = II[hid][iDrugCode][slot2];
			PlayerInfo[playerid][xDrug][1] = kolicina;
		}
		else if(PlayerInfo[playerid][xDrugCode][2] == 0) {
			PlayerInfo[playerid][xDrugCode][2] = II[hid][iDrugCode][slot2];
			PlayerInfo[playerid][xDrug][2] = kolicina;
		}
		else if(PlayerInfo[playerid][xDrugCode][3] == 0) {
			PlayerInfo[playerid][xDrugCode][3] = II[hid][iDrugCode][slot2];
			PlayerInfo[playerid][xDrug][3] = kolicina;
		}
		else if(PlayerInfo[playerid][xDrugCode][4] == 0) {
			PlayerInfo[playerid][xDrugCode][4] = II[hid][iDrugCode][slot2];
			PlayerInfo[playerid][xDrug][4] = kolicina;
		}
		else return SendErrorMessage(playerid, "Svi slotovi su puni.");

		II[hid][iDrug][slot2] -= kolicina;
		format(varstring, sizeof(varstring), "* %s uzima nesto iz sefa.", ImeIgraca(playerid));
		PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		SendClientMessageEx(playerid, FUSIONGAMING, "Uzeli ste %d grama %s iz sefa.", kolicina, GetDrugNameByDrugID(II[hid][iDrugCode][slot2]));

		if(II[hid][iDrug][slot2] <= 0)
			II[hid][iDrugCode][slot2] = 0;

		SaveProperty(hid);
	}
}
else if(dialogid == dialog_SAFEPUTDRUG) {
	if(!response) return 1;
	if(response) {
		new slot, slot2, kolicina, hid = inProperty[playerid];
		if(sscanf(inputtext, "dd", slot, kolicina)) return SPD(playerid, dialog_SAFEPUTDRUG, DSI, D_NASLOV, "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI);
		if(II[hid][iSafeStatus] == 0) return SendErrorMessage(playerid, "Sef je zakljucan!");
		if(slot < 1 || slot > 5) return SendErrorMessage(playerid, "Krivi broj slota!");
		slot2 = slot-1;
		if(PlayerInfo[playerid][xDrugCode][slot2] == 0) return SendErrorMessage(playerid, "Nemate droge pod tim slotom!");
		if(kolicina < 1 || kolicina > PlayerInfo[playerid][xDrug][slot2]) return SendErrorMessage(playerid, "Nemate toliko droge pod tim slotom!");
		if(kolicina > 500) return SendErrorMessage(playerid, "Najvise u 1 slotu sefa moze stati 500g droge.");
		if(II[hid][iDrugCode][0] != 0 && II[hid][iDrugCode][1] != 0 && II[hid][iDrugCode][2] != 0 && II[hid][iDrugCode][3] != 0 && II[hid][iDrugCode][4] != 0 &&
			II[hid][iDrugCode][5] != 0 && II[hid][iDrugCode][6] != 0 && II[hid][iDrugCode][7] != 0 && II[hid][iDrugCode][8] != 0 && II[hid][iDrugCode][9] != 0) return SendErrorMessage(playerid, "Svih 10 slotova kuce su zauzeti!");

		PlayerInfo[playerid][xDrug][slot2] -= kolicina;
		format(varstring, sizeof(varstring), "* %s stavlja nesto u sef.", ImeIgraca(playerid));
		PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		SendClientMessageEx(playerid, FUSIONGAMING, "Stavili ste %d grama %s u sef.", kolicina , GetDrugNameByDrugID(PlayerInfo[playerid][xDrugCode][slot2]));

		if(II[hid][iDrugCode][0] == 0) {
			II[hid][iDrugCode][0] = PlayerInfo[playerid][xDrugCode][slot2];
			II[hid][iDrug][0] = kolicina;
		}
		else if(II[hid][iDrugCode][1] == 0) {
			II[hid][iDrugCode][1] = PlayerInfo[playerid][xDrugCode][slot2];
			II[hid][iDrug][1] = kolicina;
		}
		else if(II[hid][iDrugCode][2] == 0) {
			II[hid][iDrugCode][2] = PlayerInfo[playerid][xDrugCode][slot2];
			II[hid][iDrug][2] = kolicina;
		}
		else if(II[hid][iDrugCode][3] == 0) {
			II[hid][iDrugCode][3] = PlayerInfo[playerid][xDrugCode][slot2];
			II[hid][iDrug][3] = kolicina;
		}
		else if(II[hid][iDrugCode][4] == 0) {
			II[hid][iDrugCode][4] = PlayerInfo[playerid][xDrugCode][slot2];
			II[hid][iDrug][4] = kolicina;
		}
		else if(II[hid][iDrugCode][5] == 0) {
			II[hid][iDrugCode][5] = PlayerInfo[playerid][xDrugCode][slot2];
			II[hid][iDrug][5] = kolicina;
		}
		else if(II[hid][iDrugCode][6] == 0) {
			II[hid][iDrugCode][6] = PlayerInfo[playerid][xDrugCode][slot2];
			II[hid][iDrug][6] = kolicina;
		}
		else if(II[hid][iDrugCode][7] == 0) {
			II[hid][iDrugCode][7] = PlayerInfo[playerid][xDrugCode][slot2];
			II[hid][iDrug][7] = kolicina;
		}
		else if(II[hid][iDrugCode][8] == 0) {
			II[hid][iDrugCode][8] = PlayerInfo[playerid][xDrugCode][slot2];
			II[hid][iDrug][8] = kolicina;
		}
		else if(II[hid][iDrugCode][9] == 0) {
			II[hid][iDrugCode][9] = PlayerInfo[playerid][xDrugCode][slot2];
			II[hid][iDrug][9] = kolicina;
		}
		SaveProperty(hid);

		if(PlayerInfo[playerid][xDrug][slot2] <= 0)
			PlayerInfo[playerid][xDrugCode][slot2] = 0;
	}
}
else if(dialogid == dialog_SAFEUNLOCK) {
	if(!response) return 1;
	if(response) {
		new sifra, hid = inProperty[playerid];
		if(sscanf(inputtext, "d", sifra)) return SPD(playerid, dialog_SAFEUNLOCK, DSI, D_NASLOV, "Unesi svoju lozinku sefa za otkljucavanje.", D_ODABERI, D_ODUSTANI);
		if(II[hid][iSafeStatus] == 1) return SendErrorMessage(playerid, "Sef je vec otkljucan!");
		if(sifra != II[hid][iSafePass]) return SendErrorMessage(playerid, "Sifra je pogresna.");
		II[hid][iSafeStatus] = 1; SaveProperty(hid);
		SCM(playerid, FUSIONGAMING, "Identitet potvrdjen. Sef je otkljucan!");
	}
}
else if(dialogid == dialog_SAFECHANGEPASS) {
	if(!response) return 1;
	if(response) {
		new sifra, hid = inProperty[playerid];
		if(sscanf(inputtext, "d", sifra)) return SPD(playerid, dialog_SAFECHANGEPASS, DSI, D_NASLOV, "Unesi novu lozinku za sef.", D_ODABERI, D_ODUSTANI);
		if(sifra < 111111 || sifra > 999999) return SendErrorMessage(playerid, "Nevaljana kombinacija. Sifra mora biti u brojevima i mora biti u duzini od 6 karaktera.");
		II[hid][iSafePass] = sifra; SaveProperty(hid);
		SCM(playerid, FUSIONGAMING, "Sifra je promjenjena. Nemojte je zaboravit!");
		SendClientMessageEx(playerid, BELA, "Nova sifra: %d", sifra);
	}
}
else if(dialogid == dialog_PROPUNAPREDI) {
	if(!response) return 1;
	if(response) {
		new broj, id = ChosenProperty[playerid];
		if(sscanf(inputtext, "d", broj)) return SPD(playerid, dialog_PROPUNAPREDI, DSI, D_NASLOV, "Izaberite broj: 1. ormar, 2. sef, 3. alarm, 4. brava, 5. vrata.\nCene:ormar(250$), sef(250$), alarm(500$), brava(300$), vrata(100$)", D_ODABERI, D_ODUSTANI);
		if(broj == 1) {
			if(inProperty[playerid] != id) return SendErrorMessage(playerid, "Niste u vasoj kuci/stanu/vikendici.");
			if(PlayerInfo[playerid][xNovac] < 250) return SendErrorMessage(playerid, "Nemate dovoljno novca!");
			if(II[inProperty[playerid]][iOrmar] == 1) return SendErrorMessage(playerid, "Vasa imovina vec ima ormar!");
			if(strcmp(ImeIgraca(playerid), II[inProperty[playerid]][iOwner], true) == 0) {
				DajIgracuNovac(playerid, -250);
				II[inProperty[playerid]][iOrmar] = 1;
				SaveProperty(inProperty[playerid]);
				SendInfoMessage(playerid, "Uspesno ste kupili ormar za vasu imovinu.");
			} else return SendErrorMessage(playerid, "Ovo nije vase..");
		}
		else if(broj == 2) {
			if(inProperty[playerid] != id) return SendErrorMessage(playerid, "Niste u vasoj kuci/stanu/vikendici.");
			if(PlayerInfo[playerid][xNovac] < 250) return SendErrorMessage(playerid, "Nemate dovoljno novca!");
			if(strcmp(ImeIgraca(playerid), II[inProperty[playerid]][iOwner], true) == 0)
			{
				new Float:X, Float:Y, Float:Z, Float:A, i = (MAX_X_OBJECTS+2), hid = inProperty[playerid];
				GetPlayerPos(playerid, X, Y, Z); GetPlayerFacingAngle(playerid, A);

				for(new a = 0; a < MAX_X_OBJECTS; a++) {
					if(!Furniture[hid][a][f_Model]) {
						i = a;
						break;
					} else continue;
				}

				if(i != (MAX_X_OBJECTS+2)) {
					DajIgracuNovac(playerid, -250);
					Furniture[hid][i][f_Model] = 2332;
					Furniture[hid][i][f_X] = X;
					Furniture[hid][i][f_Y] = Y;
					Furniture[hid][i][f_Z] = Z;
					Furniture[hid][i][f_rX] = 0.0;
					Furniture[hid][i][f_rY] = 0.0;
					Furniture[hid][i][f_rZ] = A;
					Furniture[hid][i][f_VW] = GetPlayerVirtualWorld(playerid);
					Furniture[hid][i][f_Object] = CreateDynamicObject(Furniture[hid][i][f_Model], Furniture[hid][i][f_X], Furniture[hid][i][f_Y], Furniture[hid][i][f_Z], Furniture[hid][i][f_rX], Furniture[hid][i][f_rY], Furniture[hid][i][f_rZ], II[hid][iVW], II[hid][iInterior], -1, 200.0);
					Streamer_Update(playerid);
					EditDynamicObject(playerid, Furniture[hid][i][f_Object]);
					SCM(playerid, FUSIONGAMING, "Pozicioniraj sefa.");
					SCM(playerid, BELA, "Koristite ~k~~PED_SPRINT~ da bi pomerali kameru.");
					SaveFurniture(hid); SaveProperty(hid); ObjectEdition_TYPE[playerid] = i;
				} else {
					SendErrorMessage(playerid, "Svi slotovi su zauzeti");
					SendErrorMessage(playerid, "Koristi /namestaj izbrisi za brisanje");
				}
			} else return SendErrorMessage(playerid, "Ovo nije vase..");
		}
		else if(broj == 3) {
			if(inProperty[playerid] != id) return SendErrorMessage(playerid, "Niste u vasoj kuci/stanu/vikendici.");
			if(PlayerInfo[playerid][xNovac] < 500) return SendErrorMessage(playerid, "Nemate dovoljno novca(500$)!");
			if(strcmp(ImeIgraca(playerid), II[inProperty[playerid]][iOwner], true) == 0)
			{
				if(II[inProperty[playerid]][iAlarm] == 4) return SendErrorMessage(playerid, "Vec imate najveci moguci level alarma!");
				II[inProperty[playerid]][iAlarm] ++;
				DajIgracuNovac(playerid, -500);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SCM(playerid, SVETLOPLAVA, "Unapredili ste vas alarm za 1 level!");
				SaveProperty(inProperty[playerid]);
			} else return SendErrorMessage(playerid, "Ovo nije vase..");
		}
		else if(broj == 4) {
			if(inProperty[playerid] != id) return SendErrorMessage(playerid, "Niste u vasoj kuci/stanu/vikendici.");
			if(PlayerInfo[playerid][xNovac] < 100) return SendErrorMessage(playerid, "Nemate dovoljno novca(100$)!");
			if(strcmp(ImeIgraca(playerid), II[inProperty[playerid]][iOwner], true) == 0)
			{
				if(II[inProperty[playerid]][iLockLevel] == 4) return SendErrorMessage(playerid, "Vec imate najveci moguci level brave!");
				II[inProperty[playerid]][iLockLevel] ++;
				DajIgracuNovac(playerid, -100);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SCM(playerid, SVETLOPLAVA, "Unapredili ste vasu bravu za 1 level!");
				SaveProperty(inProperty[playerid]);
			} else return SendErrorMessage(playerid, "Ovo nije vase..");
		}
		else if(broj == 5) {
			if(inProperty[playerid] != id) return SendErrorMessage(playerid, "Niste u vasoj kuci/stanu/vikendici.");
			if(PlayerInfo[playerid][xNovac] < 300) return SendErrorMessage(playerid, "Nemate dovoljno novca(300$)!");
			if(strcmp(ImeIgraca(playerid), II[inProperty[playerid]][iOwner], true) == 0)
			{
				if(II[inProperty[playerid]][iDoorLevel] == 5) return SendErrorMessage(playerid, "Vec imate najveci moguci level vrata!");
				II[inProperty[playerid]][iDoorLevel] ++;
				DajIgracuNovac(playerid, -300);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SCM(playerid, SVETLOPLAVA, "Unapredili ste vasa vrata za 1 level!");
				SaveProperty(inProperty[playerid]);
			} else return SendErrorMessage(playerid, "Ovo nije vase..");
		}
		else return SendErrorMessage(playerid, "Pogresan broj.");
	}
}
else if(dialogid == dialog_VEHLIST) {
	if(!response) return 1;
	if(response) {
		switch(listitem) {
			case 0: {
				if(PlayerInfo[playerid][xVoziloID][0] == -1) return SendErrorMessage(playerid, "Ti ne posedujes vozilo u ovom slotu.");
				if(PlayerInfo[playerid][xVoziloID][0] == 0) return SendErrorMessage(playerid, "Ti ne posedujes vozilo u ovom slotu.");
				new vFile[50];
				format(vFile, sizeof(vFile), V_FILE, PlayerInfo[playerid][xVoziloID][0]);
				if(fexist(vFile)) {
					if(strcmp(ImeIgraca(playerid), VehicleInfo[PlayerInfo[playerid][xVoziloID][0]][vOwner], true) == 0) {
						ChosenVehicle[playerid] = PlayerInfo[playerid][xVoziloID][0];
						SPD(playerid, dialog_VEHCHOSEN, DSL, "Vozilo", "Informacije\nParkiraj\nLociraj\nUgradi GPS\nProdaj igracu\nProdaj otpadu\nMakni tuning\nNeon\nGepek\nPromeni boju", "Odaberi", "Nazad");
					}
					else {
						SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Ovo vozilo nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska.");
					}
				}
				else {
					SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Vase vozilo ne postoji u bazi podataka, obratite se na forumu ako mislite je greska.");
				}
			}
			case 1: {
				if(PlayerInfo[playerid][xVoziloID][1] == -1) return SendErrorMessage(playerid, "Ti ne posedujes vozilo u ovom slotu.");
				if(PlayerInfo[playerid][xVoziloID][1] == 0) return SendErrorMessage(playerid, "Ti ne posedujes vozilo u ovom slotu.");
				new vFile[50];
				format(vFile, sizeof(vFile), V_FILE, PlayerInfo[playerid][xVoziloID][1]);
				if(fexist(vFile)) {
					if(strcmp(ImeIgraca(playerid), VehicleInfo[PlayerInfo[playerid][xVoziloID][1]][vOwner], true) == 0) {
						ChosenVehicle[playerid] = PlayerInfo[playerid][xVoziloID][1];
						SPD(playerid, dialog_VEHCHOSEN, DSL, "Vozilo", "Informacije\nParkiraj\nLociraj\nUgradi GPS\nProdaj igracu\nProdaj otpadu\nMakni tuning\nNeon\nGepek\nPromeni boju", "Odaberi", "Nazad");
					}
					else {
						SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Ovo vozilo nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska.");
					}
				}
				else {
					SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Vase vozilo ne postoji u bazi podataka, obratite se na forumu ako mislite je greska.");
				}
			}
			case 2: {
				if(PlayerInfo[playerid][xVoziloID][2] == -1) return SendErrorMessage(playerid, "Ti ne posedujes vozilo u ovom slotu.");
				if(PlayerInfo[playerid][xVoziloID][2] == 0) return SendErrorMessage(playerid, "Ti ne posedujes vozilo u ovom slotu.");
				new vFile[50];
				format(vFile, sizeof(vFile), V_FILE, PlayerInfo[playerid][xVoziloID][2]);
				if(fexist(vFile)) {
					if(strcmp(ImeIgraca(playerid), VehicleInfo[PlayerInfo[playerid][xVoziloID][2]][vOwner], true) == 0) {
						ChosenVehicle[playerid] = PlayerInfo[playerid][xVoziloID][2];
						SPD(playerid, dialog_VEHCHOSEN, DSL, "Vozilo", "Informacije\nParkiraj\nLociraj\nUgradi GPS\nProdaj igracu\nProdaj otpadu\nMakni tuning\nNeon\nGepek\nPromeni boju", "Odaberi", "Nazad");
					}
					else {
						SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Ovo vozilo nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska.");
					}
				}
				else {
					SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Vase vozilo ne postoji u bazi podataka, obratite se na forumu ako mislite je greska.");
				}
			}
			case 3: {
				if(PlayerInfo[playerid][xVoziloID][3] == -1) return SendErrorMessage(playerid, "Ti ne posedujes vozilo u ovom slotu.");
				if(PlayerInfo[playerid][xVoziloID][3] == 0) return SendErrorMessage(playerid, "Ti ne posedujes vozilo u ovom slotu.");
				new vFile[50];
				format(vFile, sizeof(vFile), V_FILE, PlayerInfo[playerid][xVoziloID][3]);
				if(fexist(vFile)) {
					if(strcmp(ImeIgraca(playerid), VehicleInfo[PlayerInfo[playerid][xVoziloID][3]][vOwner], true) == 0) {
						ChosenVehicle[playerid] = PlayerInfo[playerid][xVoziloID][3];
						SPD(playerid, dialog_VEHCHOSEN, DSL, "Vozilo", "Informacije\nParkiraj\nLociraj\nUgradi GPS\nProdaj igracu\nProdaj otpadu\nMakni tuning\nNeon\nGepek\nPromeni boju", "Odaberi", "Nazad");
					}
					else {
						SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Ovo vozilo nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska.");
					}
				}
				else {
					SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Vase vozilo ne postoji u bazi podataka, obratite se na forumu ako mislite je greska.");
				}
			}
		}
	}
}
else if(dialogid == dialog_VEHCHOSEN) {
	if(!response) return 1;
	if(response) {
		switch(listitem) {
			case 0: {
				new izbor = ChosenVehicle[playerid];

				//if(!IsPlayerInVehicle(playerid, VehicleInfo[izbor][vID])) return SendErrorMessage(playerid, "Morate biti u svom vozilu!");
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
				format(varstring, sizeof(varstring), ""col_white"___________"col_server"Vozilo: "col_white"%s ["col_server"Model ID: "col_white"%d]___________\n\n", ImeVozila[VehicleInfo[izbor][vModel]-400],  VehicleInfo[izbor][vModel]);
				strcat(DialogStrgEx, varstring);

				format(varstring, sizeof(varstring), ""col_server"Cena vozila: "col_white"%d$\n", VehicleInfo[izbor][vPrice]);
				strcat(DialogStrgEx, varstring);
				
				format(varstring, sizeof(varstring), ""col_server"Kljuc vozila: "col_white"%d\n", izbor);
				strcat(DialogStrgEx, varstring);

				format(varstring, sizeof(varstring), ""col_server"ID vozila: "col_white"%d\n", VehicleInfo[izbor][vID]);
				strcat(DialogStrgEx, varstring);

				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

				if(VehicleInfo[izbor][vReg] == 1) {

					new tablice[50];
					if(10 > VehicleInfo[izbor][vID]) { format(tablice, sizeof(tablice), "LS 000%d.", VehicleInfo[izbor][vID]); }
					else if(10 <= VehicleInfo[izbor][vID] && VehicleInfo[izbor][vID] < 100) { format(tablice , sizeof(tablice), "LS 00%d.", VehicleInfo[izbor][vID]); }
					else if(100 <= VehicleInfo[izbor][vID] && VehicleInfo[izbor][vID] < 1000) { format(tablice, sizeof(tablice), "LS 0%d.", VehicleInfo[izbor][vID]); }
					else if(1000 <= VehicleInfo[izbor][vID] && VehicleInfo[izbor][vID] < 2001) { format(tablice, sizeof(tablice), "LS %d.", VehicleInfo[izbor][vID]); }

					format(varstring, sizeof(varstring), ""col_server"Registracija: "col_white"%s\n",  tablice);
					strcat(DialogStrgEx, varstring);
					format(varstring, sizeof(varstring), ""col_server"Registrovan jos: "col_white"%dh\n",  VehicleInfo[izbor][vRegVreme]);
					strcat(DialogStrgEx, varstring);
				}
				else if(VehicleInfo[izbor][vReg] == 2) {

					format(varstring, sizeof(varstring), ""col_server"Registracija: "col_white"%s\n",  VehicleInfo[izbor][vTablice]);
					strcat(DialogStrgEx, varstring);
					format(varstring, sizeof(varstring), ""col_server"Registrovan jos: "col_white"%dh\n",  VehicleInfo[izbor][vRegVreme]);
					strcat(DialogStrgEx, varstring);
				}
				else {

					format(varstring, sizeof(varstring), ""col_server"Vase vozilo je neregistrovano. "col_white"%dh\n",  VehicleInfo[izbor][vRegVreme]);
					strcat(DialogStrgEx, varstring);
					strcat(DialogStrgEx, "Na -720h vase vozilo se prodaje na aukciju\n");
				}

				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
				if(VehicleInfo[izbor][vLocked] == 1)
					strcat(DialogStrgEx, ""col_server"Status brave: "col_white"Zakljucano\n");
				else
					strcat(DialogStrgEx, ""col_server"Status brave: "col_white"Otkljucano\n");
				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
				format(varstring, sizeof(varstring), ""col_server"Vrsta goriva: "col_white"%s\n", GetVehicleFuelType(VehicleInfo[izbor][vID]));
				strcat(DialogStrgEx, varstring);
				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
				format(varstring, sizeof(varstring), ""col_server"Predjena kilometraza: "col_white"%d\n", VehicleInfo[izbor][vKilometri]);
				strcat(DialogStrgEx, varstring);
				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
				if(VehicleInfo[izbor][vLock] == 0)
					strcat(DialogStrgEx, ""col_server"Kvaliteta brave: "col_white"Nekvalitetna\n");
				else {
					format(varstring, sizeof(varstring), ""col_server"Kvaliteta brave: "col_white"%d\n",  VehicleInfo[izbor][vLock]);
					strcat(DialogStrgEx, varstring);
				}
				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
				if(VehicleInfo[izbor][vImobilizator] == 0)
					strcat(DialogStrgEx, ""col_server"Imobilizator: "col_white"Nekvalitetan\n");
				else {
					format(varstring, sizeof(varstring), ""col_server"Imobilizator level: "col_white"%d\n",  VehicleInfo[izbor][vImobilizator]);
					SCM(playerid, BELA, varstring);
				}
				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

				if(VehicleInfo[izbor][vAlarm] > 0) {
					format(varstring, sizeof(varstring), ""col_server"Alarm level: "col_white"%d\n",  VehicleInfo[izbor][vAlarm]);
					strcat(DialogStrgEx, varstring);
				} else strcat(DialogStrgEx, ""col_server"Alarm: "col_white"Nema\n");
				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
				if(VehicleInfo[izbor][vGPS] > 0) {
					if(VehicleInfo[izbor][vGPS] == 1)
						strcat(DialogStrgEx, ""col_server"GPS: "col_white"Jednostavan\n");
					else if(VehicleInfo[izbor][vGPS] == 2)
						strcat(DialogStrgEx, ""col_server"GPS: "col_white"Napredan\n");
				} else strcat(DialogStrgEx, ""col_server"GPS: "col_white"Nema\n");

				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________");
				SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "");
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			}
			case 1: {
				new izbor = ChosenVehicle[playerid], Float:HP, Float:Pos[4];

				if(!IsPlayerInVehicle(playerid, VehicleInfo[izbor][vID])) return SendErrorMessage(playerid, "Morate biti u svom vozilu!");
				if(GetPlayerVehicleSeat(playerid) != 0) return SendErrorMessage(playerid, "Morate biti u svom vozilu na vozackom mjestu!");
				if(IsPlayerInArea(playerid, 1486.062, -1776.608, 1653.387, -1567.377)) return SendErrorMessage(playerid, "Ne mozete parkirati auto u blizini policije!");
				if(IsPlayerInArea(playerid, 1136.201, -1014.694, 1311.132, -856.7839)) return SendErrorMessage(playerid, "Ne mozete parkirati auto u blizini burga!");
				if(IsPlayerInArea(playerid, 1383.386, -1077.857, 1554.513, -947.582)) return SendErrorMessage(playerid, "Ne mozete parkirati auto u blizini banke!");
				GetVehicleHealth(GetPlayerVehicleID(playerid), HP);
				if(HP < 800.0) return SendErrorMessage(playerid, "Motor vam je previse ostecen, ne mozete ga parkirati.");

				GetVehiclePos(VehicleInfo[izbor][vID], Pos[0], Pos[1], Pos[2]);
				GetVehicleZAngle(VehicleInfo[izbor][vID], Pos[3]);

				VehicleInfo[izbor][vVirtualWorld] = GetPlayerVirtualWorld(playerid);
				VehicleInfo[izbor][vInterior] = GetPlayerInterior(playerid);

				VehicleInfo[izbor][vLokacijaX] = Pos[0];
				VehicleInfo[izbor][vLokacijaY] = Pos[1];
				VehicleInfo[izbor][vLokacijaZ] = Pos[2];
				VehicleInfo[izbor][vLokacijaA] = Pos[3];

				DestroyVehicle(VehicleInfo[izbor][vID]);
				VehicleInfo[izbor][vID] = Fusion_CreateVehicle(izbor, PRIVATNO_VOZILO, -1, -1, -1, VehicleInfo[izbor][vModel], VehicleInfo[izbor][vLokacijaX], VehicleInfo[izbor][vLokacijaY], VehicleInfo[izbor][vLokacijaZ]+1.0, VehicleInfo[izbor][vLokacijaA], VehicleInfo[izbor][vColor1], VehicleInfo[izbor][vColor2], 300000);
				ac_LinkVehicleToInterior(VehicleInfo[izbor][vID], VehicleInfo[izbor][vInterior]);
				SetVehicleVirtualWorld(VehicleInfo[izbor][vID], VehicleInfo[izbor][vVirtualWorld]);

				TuneVehicle(izbor);

				ac_SetVehicleParamsEx(VehicleInfo[izbor][vID], 0, 0, 0, VehicleInfo[izbor][vLocked], 0, 0, 0);
				if(IsVehicleBajs(VehicleInfo[izbor][vID])) {
					ac_SetVehicleParamsEx(VehicleInfo[izbor][vID], 1, 0, 0, VehicleInfo[izbor][vLocked], 0, 0, 0);
				}

				SaveVehicle(izbor);

				SendInfoMessage(playerid, "Uspesno ste parkirali vozilo!");
			}
			case 2: {
				new izbor = ChosenVehicle[playerid];
				//if(VehicleInfo[izbor][vGPS] == 0) return SendErrorMessage(playerid, "Ne posjedujete GPS na ovom vozilu.");
				if(GetPVarInt(playerid, "LocatingCar") == 0) {
					GameTextForPlayer(playerid, "~y~spajanje na satelit...", 4000, 1);
					SetPVarInt(playerid, "GPSConnectTimer", SetTimerEx("GPSConnect", 5000, 0, "iii", playerid, 1, VehicleInfo[izbor][vID]));
					SetPVarInt(playerid, "GPSTimerCalled", 1);
				}
				else if(GetPVarInt(playerid, "LocatingCar") == 1) {
					SetPVarInt(playerid, "LocatingCar", 0);
					GameTextForPlayer(playerid, "~r~gps ugasen", 4500, 1);
					CheckpointStatus[playerid] = 0;
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					Fusion_DisablePlayerCheckpoint(playerid);
				}
			}
			case 3: {
				new izbor = ChosenVehicle[playerid];
				if(!IsPlayerInVehicle(playerid, VehicleInfo[izbor][vID])) return SendErrorMessage(playerid, "Morate biti u svom vozilu!");
				if(VehicleInfo[izbor][vGPS] == 2) return SendErrorMessage(playerid, "Vase vozilo vec ima najbolji gps!");
				//if(KupljenGPS[playerid] != 1) return SendErrorMessage(playerid, "Prvo trebate kupiti GPS u electronic shopu.");
				VehicleInfo[izbor][vGPS] ++; SaveVehicle(izbor);
				SCM(playerid, SVETLOPLAVA, "Uspesno si unapredio svoj GPS sistem.");
			}
			case 4: {
				new izbor = ChosenVehicle[playerid];
				if(!IsPlayerInVehicle(playerid, VehicleInfo[izbor][vID])) return SendErrorMessage(playerid, "Morate biti u svom vozilu!");
				SPD(playerid, dialog_VEHSELLTP, DSI, D_NASLOV, "Unesite id igraca kome zelite da prodate vozilo i cenu.\nPrimer: 145 12003", D_ODABERI, D_ODUSTANI);
			}
			case 5: {
				new izbor = ChosenVehicle[playerid];
				if(!IsPlayerInVehicle(playerid, VehicleInfo[izbor][vID])) return SendErrorMessage(playerid, "Morate biti u svom vozilu!");
				if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2203.2778,-6.5869,26.6885)) return SendErrorMessage(playerid, "Da biste koristili ovu komandu morati biti na vagi na otpadu.");

				new string1[128];
				format(string1, sizeof(string1), "Igrac %s je prodao vozilo %s na otpad", ImeIgraca(playerid), GetVehicleNameEx(VehicleInfo[izbor][vModel]));
				LogSave("Ostalo/LogProdajaVozila.log", string1);

				DajIgracuNovac(playerid, VehicleInfo[izbor][vPrice]/2);
				SendClientMessageEx(playerid, ZUTA, "Dobili ste %d$ od otpada za ovo vozilo.", VehicleInfo[izbor][vPrice]/2);
				//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");

				if(PlayerInfo[playerid][xVoziloID][0] == VehicleInfo[izbor][vProvera]) { PlayerInfo[playerid][xVoziloID][0] = -1;}
				else if(PlayerInfo[playerid][xVoziloID][1] == VehicleInfo[izbor][vProvera]) { PlayerInfo[playerid][xVoziloID][1] = -1;}
				else if(PlayerInfo[playerid][xVoziloID][2] == VehicleInfo[izbor][vProvera]) { PlayerInfo[playerid][xVoziloID][2] = -1;}
				else if(PlayerInfo[playerid][xVoziloID][3] == VehicleInfo[izbor][vProvera]) { PlayerInfo[playerid][xVoziloID][3] = -1;}

				SavePlayer(playerid);

				Fusion_DestroyVehicle(VehicleInfo[izbor][vID]);
				ResetVehicle(izbor);
				ObrisiVozilo(izbor);					

				SCM(playerid, BELA, "Vase vozilo je uspesno prodano na otpad!");
			}
			case 6: {
				new izbor = ChosenVehicle[playerid];
				if(!IsPlayerInVehicle(playerid, VehicleInfo[izbor][vID])) return SendErrorMessage(playerid, "Morate biti u svom vozilu!");

				if(Neon[VehicleInfo[izbor][vID]] == 1) {
					Neon[VehicleInfo[izbor][vID]] = 0;
					DestroyDynamicObject(NeonObject1[VehicleInfo[izbor][vID]]);
					DestroyDynamicObject(NeonObject2[VehicleInfo[izbor][vID]]);
				}

				VehicleInfo[izbor][vNeon] = 0;
				VehicleInfo[izbor][vTuned] = 0;
				VehicleInfo[izbor][vImobilizator] = 0;
				VehicleInfo[izbor][vSpoiler] = 0;
				VehicleInfo[izbor][vHood] = 0;
				VehicleInfo[izbor][vRoof] = 0;
				VehicleInfo[izbor][vSkirt] = 0;
				VehicleInfo[izbor][vLamps] = 0;
				VehicleInfo[izbor][vNitro] = 0;
				VehicleInfo[izbor][vExhaust] = 0;
				VehicleInfo[izbor][vWheels] = 0;
				VehicleInfo[izbor][vStereo] = 0;
				VehicleInfo[izbor][vHydraulics] = 0;
				VehicleInfo[izbor][vFrontBumper] = 0;
				VehicleInfo[izbor][vRearBumper] = 0;
				VehicleInfo[izbor][vVents] = 0;
				VehicleInfo[izbor][vPaintJob] = 255;
				ChangeVehiclePaintjob(VehicleInfo[izbor][vID], 3);
				new componentid;

				for(new i; i < 14; i++) {
					componentid = GetVehicleComponentInSlot(VehicleInfo[izbor][vID], i);
					if(componentid != 0)
						RemoveVehicleComponent(VehicleInfo[izbor][vID], componentid);
				}

				SCM(playerid, SVETLOCRVENA, "Skinuli ste tuning sa vozila.");
				SaveVehicle(izbor);
			}
			case 7: {
				new izbor = ChosenVehicle[playerid];
				if(!IsPlayerInVehicle(playerid, VehicleInfo[izbor][vID])) return SendErrorMessage(playerid, "Morate biti u svom vozilu!");
				if(GetPlayerVehicleSeat(playerid) != 0) return SendErrorMessage(playerid, "Morate biti u svom vozilu na vozackom mjestu!");
				if(VehicleInfo[izbor][vNeon] == 0) return SendErrorMessage(playerid, "Na ovom vozilu nije ugradjena neonka!");
				if(Neon[VehicleInfo[izbor][vID]] == 0) {
					Neon[VehicleInfo[izbor][vID]] = 1;
					NeonObject1[VehicleInfo[izbor][vID]] = CreateDynamicObject(VehicleInfo[izbor][vNeon], 0, 0, 1500, 0, 0, 0);
					NeonObject2[VehicleInfo[izbor][vID]] = CreateDynamicObject(VehicleInfo[izbor][vNeon], 0, 0, 1500, 0, 0, 0);
					AttachDynamicObjectToVehicle(NeonObject1[VehicleInfo[izbor][vID}},  VehicleInfo[izbor][vID] , -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					AttachDynamicObjectToVehicle(NeonObject2[VehicleInfo[izbor][vID}},  VehicleInfo[izbor][vID] , 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					format(varstring, sizeof(varstring), "* %s pritisce dugme na komodi i postavlja neonke.", ImeIgraca(playerid));
					PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
				}
				else if(Neon[VehicleInfo[izbor][vID]] == 1) {
					Neon[VehicleInfo[izbor][vID]] = 0;
					DestroyDynamicObject(NeonObject1[VehicleInfo[izbor][vID]]);
					DestroyDynamicObject(NeonObject2[VehicleInfo[izbor][vID]]);
					format(varstring, sizeof(varstring), "* %s pritisce gumb na komodi i uvlaci neonke.", ImeIgraca(playerid));
					PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
				}
			}
			case 8: {
				SendInfoMessage(playerid, "Koristite /gepek za upravljanje gepekom.");
			}
			case 9: {
				SPD(playerid, dialog_VEHCOLOR, DSI, D_NASLOV, "Unesi id boje 1 i id boje 2 vozila.\nPrimer: 1 2", D_ODABERI, D_ODUSTANI);
			}
		}
	}
}
else if(dialogid == dialog_ACCEPTVEH) {
	if(response) {

		new seller = GlobalProdaja[playerid];
		new autoid = GlobalID[playerid];

		if(seller == IPI) return SendErrorMessage(playerid, "Taj igrac je offline.");
		if(carspawntimer == 1) return SendErrorMessage(playerid, "Netko je spawnao/parkirao vozilo prije vas.Pokusajte za 3 sekunde. (Anticrash)");
		if(PlayerInfo[seller][xVoziloID][0] != autoid && PlayerInfo[seller][xVoziloID][1] != autoid && PlayerInfo[seller][xVoziloID][2] != autoid && PlayerInfo[seller][xVoziloID][3] != autoid) return SendErrorMessage(playerid, "To vozilo nije u vlasnistvu igraca koji vam ga je ponudio!");
		if(!IsPlayerNearPlayer(5.0, playerid, seller)) return SendErrorMessage(playerid, "Niste blizu igraca koji vam zeli prodati vozilo.");
		if(PlayerInfo[playerid][xNovac] < GlobalCena[playerid]) return SendErrorMessage(playerid, "Nemate dovoljno novca za kupiti vozilo.");
		if(!IsPlayerConnected(seller)) {
			SendErrorMessage(playerid, "Taj igrac je offline.");
			GlobalProdaja[playerid] = -1;
			GlobalCena[playerid] = -1;
			GlobalID[playerid] = -1;
			return 1;
		}

		if(PlayerInfo[playerid][xVoziloID][0] == -1) {}
		else if(PlayerInfo[playerid][xVoziloID][1] == -1) {}
		else if(PlayerInfo[playerid][xVoziloID][2] == -1) {}
		else if(PlayerInfo[playerid][xVoziloID][3] == -1) {
			if(PlayerInfo[playerid][xDonatorSlot] == true) {}
			else return SendErrorMessage(playerid, "Svi slotovi vozila su vam zauzeti.");
		}
		else return SendErrorMessage(playerid, "Svi slotovi vozila su vam zauzeti.");

		strmid(VehicleInfo[autoid][vOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 24);

		if(PlayerInfo[seller][xVoziloID][0] == VehicleInfo[autoid][vProvera]) { PlayerInfo[seller][xVoziloID][0] = -1;}
		else if(PlayerInfo[seller][xVoziloID][1] == VehicleInfo[autoid][vProvera]) { PlayerInfo[seller][xVoziloID][1] = -1;}
		else if(PlayerInfo[seller][xVoziloID][2] == VehicleInfo[autoid][vProvera]) { PlayerInfo[seller][xVoziloID][2] = -1;}
		else if(PlayerInfo[seller][xVoziloID][3] == VehicleInfo[autoid][vProvera]) { PlayerInfo[seller][xVoziloID][3] = -1;}

		if(PlayerInfo[playerid][xVoziloID][0] == -1){ PlayerInfo[playerid][xVoziloID][0] = autoid;}
		else if(PlayerInfo[playerid][xVoziloID][1] == -1) { PlayerInfo[playerid][xVoziloID][1] = autoid;}
		else if(PlayerInfo[playerid][xVoziloID][2] == -1) { PlayerInfo[playerid][xVoziloID][2] = autoid;}
		else if(PlayerInfo[playerid][xVoziloID][3] == -1) { PlayerInfo[playerid][xVoziloID][3] = autoid;}

		new string1[128];
		format(string1, sizeof(string1), "Igrac %s je prodao vozilo %s igracu %s za %d", ImeIgraca(seller), GetVehicleNameEx(VehicleInfo[autoid][vModel]), ImeIgraca(playerid), GlobalCena[playerid]);
		LogSave("Ostalo/LogProdajaVozila.log", string1);

		SaveVehicle(autoid);
		DajIgracuNovac(seller, GlobalCena[playerid]);
		ac_RemovePlayerFromVehicle(seller);

		DajIgracuNovac(playerid, -GlobalCena[playerid]);
		SendInfoMessage(playerid, "Uspesno ste kupili vozilo.");
		SendInfoMessage(seller, "Uspesno ste prodali vozilo.");


		Delete3DTextLabel(VehicleInfo[autoid][v3DText]);
		new szString[100];
		format(szString, sizeof(szString), "Vlasnik: {FFFFFF]%s{2867ED]",VehicleInfo[autoid][vOwner]);

		VehicleInfo[autoid][Validv3DText] = true;
		VehicleInfo[autoid][v3DText] = Create3DTextLabel(szString, 0x2867EDFF, 0.0, 0.0, 0.0, 30.0, 0, 1);
		Attach3DTextLabelToVehicle(VehicleInfo[autoid][v3DText], VehicleInfo[autoid][vID], 0.0, 0.0, 0.0);


		carspawntimer = 1;
		SetTimer("AntiSpawnCrash", 3000, 0);

		GlobalProdaja[playerid] = -1;
		GlobalCena[playerid] = -1;
		GlobalID[playerid] = -1;
	}
	else if(!response) {
		format(varstring, sizeof(varstring),"Igrac %s je odbio vasu ponudu za kupovinu vozla!", ImeIgraca(playerid));
		SCM(GlobalProdaja[playerid], -1, varstring);
		SCM(playerid, -1, "Odbili ste ponudu!");
		GlobalProdaja[playerid] = -1;
		GlobalCena[playerid] = -1;
		GlobalID[playerid] = -1;
	}
}
else if(dialogid == dialog_VEHSELLTP) {
	if(!response) return 1;
	if(response) {
		new idigraca, string[128], cena, autoid = ChosenVehicle[playerid];
		if(sscanf(inputtext, "ui", idigraca, cena)) return SPD(playerid, dialog_VEHSELLTP, DSI, D_NASLOV, "Unesite id igraca kome zelite da prodate vozilo i cenu.\nPrimer: 145 12003", D_ODABERI, D_ODUSTANI);
		if(!IsPlayerConnected(idigraca) || idigraca == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Nevaljan ID igraca.");
		if(!IsPlayerNearPlayer(5.0, playerid, idigraca)) return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
		if(idigraca == playerid) return SendErrorMessage(playerid, "Ne mozes sam sebi prodati vozilo!");

		if(PlayerInfo[playerid][xVoziloID][0] == autoid) {}
		else if(PlayerInfo[playerid][xVoziloID][1] == autoid) {}
		else if(PlayerInfo[playerid][xVoziloID][2] == autoid) {}
		else if(PlayerInfo[playerid][xVoziloID][3] == autoid) {}
		else return SendErrorMessage(playerid, "Broj vozila koji ste uneli nije u vasem vlasnistvu.");

		if(PlayerInfo[idigraca][xVoziloID][0] == -1) {}
		else if(PlayerInfo[idigraca][xVoziloID][1] == -1) {}
		else if(PlayerInfo[idigraca][xVoziloID][2] == -1) {}
		else if(PlayerInfo[idigraca][xVoziloID][3] == -1) {
			if(PlayerInfo[idigraca][xDonatorSlot] == true) {}
			else return SendErrorMessage(playerid, "Svi slotovi vozila izabranog igraca su zauzeti.");
		}
		else return SendErrorMessage(playerid, "Svi slotovi vozila izabranog igraca su zauzeti.");

		if(cena < (VehicleInfo[autoid][vPrice]/2)) return SendErrorMessage(playerid, "Cena mora biti veca od polovine kupljene.");

		if(!IsVehicleBajs(VehicleInfo[autoid][vID])) {
			if(PlayerInfo[idigraca][xLevel] < 5) return SendErrorMessage(playerid, "Igrac mora biti level 5+ da bi ste mu prodali vozilo.");
		}

		SendClientMessageEx(playerid, SVETLOPLAVA, "Ponudili ste igracu %s vozilo po ceni od %d.", ImeIgraca(idigraca), cena);
		GlobalProdaja[idigraca] = playerid;
		GlobalCena[idigraca] = cena;
		GlobalID[idigraca] = autoid;
		format(string, sizeof(string), "Igrac %s vam je ponudio da kupite njegovo vozilo marke %s za %d", ImeIgraca(playerid), GetVehicleNameEx(VehicleInfo[autoid][vModel]), cena);
		SPD(idigraca, dialog_ACCEPTVEH, DSMSG, D_NASLOV, string, "Prihvati", "Odbij");

	}
}
else if(dialogid == dialog_VEHCOLOR) {
	if(!response) return 1;
	if(response) {
		new boja1, boja2, izbor = ChosenVehicle[playerid];
		if(sscanf(inputtext, "ii", boja1, boja2)) SPD(playerid, dialog_VEHCOLOR, DSI, D_NASLOV, "Unesi id boje 1 i id boje 2 vozila.\nPrimer: 1 2", D_ODABERI, D_ODUSTANI);

		if(boja1 < 0 || boja1 > 255) return SendErrorMessage(playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
		if(boja2 < 0 || boja2 > 255) return SendErrorMessage(playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

		if(!IsPlayerInVehicle(playerid, VehicleInfo[izbor][vID])) return SendErrorMessage(playerid, "Morate biti u svom vozilu!");

		VehicleInfo[izbor][vColor1] = boja1;
		VehicleInfo[izbor][vColor2] = boja2;
		SaveVehicle(izbor);

		ChangeVehicleColor(VehicleInfo[izbor][vID], boja1, boja2);
		SendInfoMessage(playerid, "Promenili ste boju vozila u %d, %d.", boja1, boja2);
	}
}
else if(dialogid == dialog_VEHICLEPUTMATS) {

	if(!response) return 1;
	if(response) {

		new kolicina, izbor = ChosenVehicle[playerid];
		if(sscanf(inputtext, "d", kolicina)) return SPD(playerid, dialog_VEHICLEPUTMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za ostavljanje.", D_ODABERI, D_ODUSTANI);

		if(PlayerInfo[playerid][xMaterijali] == 0) return SendErrorMessage(playerid, "Nemate materijale kod vas!");
		if(kolicina < 1 || kolicina > PlayerInfo[playerid][xMaterijali]) return SendErrorMessage(playerid, "Nemate toliko materijala kod vas!");

		if((VehicleInfo[izbor][vMaterijali]+kolicina) > 10000) return SendErrorMessage(playerid, "Najvise u gepeku moze stati 10000 materijala.");

		PlayerInfo[playerid][xMaterijali] -= kolicina;

		format(varstring, sizeof(varstring), "* %s stavlja nesto u gepek.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		SendClientMessageEx(playerid, FUSIONGAMING, "Stavili ste %d materijala u gepek.", kolicina);

		VehicleInfo[izbor][vMaterijali] += kolicina;

		SaveVehicle(izbor);

	}
}
else if(dialogid == dialog_VEHICLETAKEMATS) {

	if(!response) return 1;
	if(response) {

		new kolicina, izbor = ChosenVehicle[playerid];
		if(sscanf(inputtext, "d", kolicina)) return SPD(playerid, dialog_VEHICLETAKEMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za uzimanje iz gepeka.", D_ODABERI, D_ODUSTANI);

		if(VehicleInfo[izbor][vMaterijali] == 0) return SendErrorMessage(playerid, "Nema materijala u gepeku!");
		if(kolicina < 1 || kolicina > VehicleInfo[izbor][vMaterijali]) return SendErrorMessage(playerid, "Nemate toliko materijala u gepeku!");

		PlayerInfo[playerid][xMaterijali] += kolicina;

		format(varstring, sizeof(varstring), "* %s uzima nesto iz gepeka.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		SendClientMessageEx(playerid, FUSIONGAMING, "Uzeli ste %d materijala iz gepeka.", kolicina);

		VehicleInfo[izbor][vMaterijali] -= kolicina;

		SaveVehicle(izbor);
	}
}
else if(dialogid == dialog_VEHICLEPUTDRUG) {
	if(!response) return 1;
	if(response) {
		new slot, slot2, kolicina, izbor = ChosenVehicle[playerid];
		if(sscanf(inputtext, "dd", slot, kolicina)) return SPD(playerid, dialog_VEHICLEPUTDRUG, DSI, D_NASLOV, "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI);

		if(slot < 1 || slot > 5) return SendErrorMessage(playerid, "Krivi broj slota!");
		slot2 = slot-1;
		if(PlayerInfo[playerid][xDrugCode][slot2] == 0) return SendErrorMessage(playerid, "Nemate droge pod tim slotom!");
		if(kolicina < 1 || kolicina > PlayerInfo[playerid][xDrug][slot2]) return SendErrorMessage(playerid, "Nemate toliko droge pod tim slotom!");
		if(kolicina > 500) return SendErrorMessage(playerid, "Najvise u 1 slotu gepeka moze stati 500g droge.");
		if(VehicleInfo[izbor][vDrugCode][0] != 0 && VehicleInfo[izbor][vDrugCode][1] != 0 && VehicleInfo[izbor][vDrugCode][2] != 0 && VehicleInfo[izbor][vDrugCode][3] != 0 && VehicleInfo[izbor][vDrugCode][4] != 0 &&
			VehicleInfo[izbor][vDrugCode][5] != 0) return SendErrorMessage(playerid, "Svih 6 slotova droge u autu su zauzeti!");

		PlayerInfo[playerid][xDrug][slot2] -= kolicina;
		format(varstring, sizeof(varstring), "* %s stavlja nesto u gepek.", ImeIgraca(playerid));
		PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		SendClientMessageEx(playerid, FUSIONGAMING, "Stavili ste %d grama %s u gepek.", kolicina , GetDrugNameByDrugID(PlayerInfo[playerid][xDrugCode][slot2]));

		if(VehicleInfo[izbor][vDrugCode][0] == 0) {
			VehicleInfo[izbor][vDrugCode][0] = PlayerInfo[playerid][xDrugCode][slot2];
			VehicleInfo[izbor][vDrug][0] = kolicina;
		}
		else if(VehicleInfo[izbor][vDrugCode][1] == 0) {
			VehicleInfo[izbor][vDrugCode][1] = PlayerInfo[playerid][xDrugCode][slot2];
			VehicleInfo[izbor][vDrug][1] = kolicina;
		}
		else if(VehicleInfo[izbor][vDrugCode][2] == 0) {
			VehicleInfo[izbor][vDrugCode][2] = PlayerInfo[playerid][xDrugCode][slot2];
			VehicleInfo[izbor][vDrug][2] = kolicina;
		}
		else if(VehicleInfo[izbor][vDrugCode][3] == 0) {
			VehicleInfo[izbor][vDrugCode][3] = PlayerInfo[playerid][xDrugCode][slot2];
			VehicleInfo[izbor][vDrug][3] = kolicina;
		}
		else if(VehicleInfo[izbor][vDrugCode][4] == 0) {
			VehicleInfo[izbor][vDrugCode][4] = PlayerInfo[playerid][xDrugCode][slot2];
			VehicleInfo[izbor][vDrug][4] = kolicina;
		}
		else if(VehicleInfo[izbor][vDrugCode][5] == 0) {
			VehicleInfo[izbor][vDrugCode][5] = PlayerInfo[playerid][xDrugCode][slot2];
			VehicleInfo[izbor][vDrug][5] = kolicina;
		}
		SaveVehicle(izbor);

		if(PlayerInfo[playerid][xDrug][slot2] <= 0)
			PlayerInfo[playerid][xDrugCode][slot2] = 0;
	}
}
else if(dialogid == dialog_VEHICLETAKEDRUG) {
	if(!response) return 1;
	if(response) {
		new slot, slot2, kolicina, izbor = ChosenVehicle[playerid];
		if(sscanf(inputtext, "dd", slot, kolicina)) return SPD(playerid, dialog_VEHICLETAKEDRUG, DSI, D_NASLOV, "Unesite slot droge u vozilu i kolicinu droge za uzimanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI);

		if(slot < 1 || slot > 6) return SendErrorMessage(playerid, "Krivi broj slota!");
		slot2 = slot-1;
		if(VehicleInfo[izbor][vDrugCode][slot2] == 0) return SendErrorMessage(playerid, "Ovo vozilo nema drogu pod tim slotom!");
		if(kolicina < 1 || kolicina > VehicleInfo[izbor][vDrug][slot2]) return SendErrorMessage(playerid, "Ovo vozilo nema toliko droge pod tim slotom!");

		VehicleInfo[izbor][vDrug][slot2] -= kolicina;
		format(varstring, sizeof(varstring), "* %s uzima nesto iz gepeka.", ImeIgraca(playerid));
		PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		SendClientMessageEx(playerid, FUSIONGAMING, "Uzeli ste %d grama %s iz gepeka.", kolicina, GetDrugNameByDrugID(VehicleInfo[izbor][vDrugCode][slot2]));

		if(PlayerInfo[playerid][xDrugCode][0] == 0) {
			PlayerInfo[playerid][xDrugCode][0] = VehicleInfo[izbor][vDrugCode][slot2];
			PlayerInfo[playerid][xDrug][0] = kolicina;
		}
		else if(PlayerInfo[playerid][xDrugCode][1] == 0) {
			PlayerInfo[playerid][xDrugCode][1] = VehicleInfo[izbor][vDrugCode][slot2];
			PlayerInfo[playerid][xDrug][1] = kolicina;
		}
		else if(PlayerInfo[playerid][xDrugCode][2] == 0) {
			PlayerInfo[playerid][xDrugCode][2] = VehicleInfo[izbor][vDrugCode][slot2];
			PlayerInfo[playerid][xDrug][2] = kolicina;
		}
		else if(PlayerInfo[playerid][xDrugCode][3] == 0) {
			PlayerInfo[playerid][xDrugCode][3] = VehicleInfo[izbor][vDrugCode][slot2];
			PlayerInfo[playerid][xDrug][3] = kolicina;
		}
		else if(PlayerInfo[playerid][xDrugCode][4] == 0) {
			PlayerInfo[playerid][xDrugCode][4] = VehicleInfo[izbor][vDrugCode][slot2];
			PlayerInfo[playerid][xDrug][4] = kolicina;
		}

		if(VehicleInfo[izbor][vDrug][slot2] <= 0)
			VehicleInfo[izbor][vDrugCode][slot2] = 0;

		SaveVehicle(izbor);
	}
}
else if(dialogid == dialog_PORTABLE) {
	if(!response) return 1;
	if(response) {
		switch(listitem) {
			case 0: {
				if(PlayerInfo[playerid][xRank] < 4) return SendErrorMessage(playerid, "Samo Rank 4 Agencije ili preko moze da dodjeli mete !");
				SearchingHit(playerid);
			}
			case 1: {
				if(PlayerInfo[playerid][xRank] < 4) return SendErrorMessage(playerid, "Samo Rank 4 Agencije ili preko moze da dodjeli mete !");
				if(hitfound == 0) return SendErrorMessage(playerid, "Trenutno nema pronadjenih meta, koristite prvo /portable da vidite dostupne mete!");
				SPD(playerid, dialog_GIVEHIT, DSI, D_NASLOV, "Unesite ID ubojice kojem dajete metu:", D_ODABERI, D_ODUSTANI);
			}
			case 2: {
				SCM(playerid, BELA, "|__________________ Rankovi Agencije __________________|");
				new string[64], OrgID = PlayerInfo[playerid][xClan];
				foreach(new i : Player) {
					if(IsPlayerConnected(i) && PlayerLogged[i] == true && PlayerInfo[i][xClan] == OrgID) {
						format(string, sizeof(string), "* %s: Rank %d", ImeIgraca(i), PlayerInfo[i][xRank]);
						SCM(playerid, SIVA, string);
					}
				}
			}
			case 3: {
				SPD(playerid, dialog_HORDER, DSL, "Dostupni Paketi", "Paket 1($200)Rank 1+\nPaket 2($300)Rank 2+\nPaket 3($500)Rank 3+\nPaket 4($750)Rank 4+\nPaket 5($1000)Rank 5+", D_ODABERI, D_ODUSTANI);
			}
		}
	}
}
else if(dialogid == dialog_GIVEHIT) {
	if(!response) return 1;
	if(response) {
		new id;
		if(sscanf(inputtext, "u", id)) return SendErrorMessage(playerid, "Krivi id");
		if(id == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Krivi id");
		if(OI[PlayerInfo[id][xClan]][oTip] != ORG_TIP_HITM) return SendErrorMessage(playerid, "Taj igrac nije clan agencije!");
		if(HitmanInfo[id][GoChase] < 999) return SendErrorMessage(playerid, "Taj clan ima vec dodjeljenu metu !");
		if(PlayerInfo[ahitid][xHitmenCena] == 0) return SendErrorMessage(playerid, "Prvo moras da vidis kontrakte.");
		if(IsPlayerConnected(ahitid)) {
			for(new a = 1; a < MAX_ORG; a++) {
				if(OI[a][oTip] == ORG_TIP_HITM) {
					format(varstring, sizeof(varstring), "* Hitman %s, je dodelio ubojici %s-u da ubije: %s(ID:%d), za $%d.", ImeIgraca(playerid), ImeIgraca(id), ImeIgraca(ahitid), ahitid, PlayerInfo[ahitid][xHitmenCena]);
					OrgPoruka(a, ZUTA, varstring);
				}
			}
			HitmanInfo[id][GoChase] = ahitid;
			HitmanInfo[ahitid][GetChased] = id;
			HitmanInfo[ahitid][GotHit] = 1;
			ahitid = 0;
			hitfound = 0;
		}
		else return SendErrorMessage(playerid, "Meta je trenutno offline, potrazite nove !");
	}
}
else if(dialogid == dialog_HORDER) {
	if(!response) return 1;
	if(response) {
		switch(listitem) {
			case 0: {
				if(PlayerInfo[playerid][xRank] < 1) return SendErrorMessage(playerid, "Da bi porucili zeljeni paket morate imati visi rank!");
				if(PlayerInfo[playerid][xNovac] > 200) {
					SCM(playerid, SVETLOPLAVA, "* Narucili ste paket, cena ovog paketa je 200$, paket je bacen iz helikoptera i sada se nalazi kod vas.");
					GiveWeaponToPlayer(playerid, 24, 50);
					GiveWeaponToPlayer(playerid, 29, 500);
					GiveWeaponToPlayer(playerid, 25, 100);
					GiveWeaponToPlayer(playerid, 4, 1);
					DajIgracuNovac(playerid, -200);
				}
				else return SendErrorMessage(playerid, "Nemate dovoljno novca za odabrani paket!");
			}
			case 1: {
				if(PlayerInfo[playerid][xRank] < 2) return SendErrorMessage(playerid, "Da bi porucili zeljeni paket morate imati visi rank!");
				if(PlayerInfo[playerid][xNovac] > 300) {
					SCM(playerid, SVETLOPLAVA, "* Narucili ste paket, cena ovog paketa je 300$, paket je bacen iz helikoptera i sada se nalazi kod vas.");
					GiveWeaponToPlayer(playerid, 24, 50);
					GiveWeaponToPlayer(playerid, 29, 500);
					GiveWeaponToPlayer(playerid, 25, 50);
					GiveWeaponToPlayer(playerid, 31, 500);
					GiveWeaponToPlayer(playerid, 4, 1);
					DajIgracuNovac(playerid, -300);
				}
				else return SendErrorMessage(playerid, "Nemate dovoljno novca za odabrani paket!");
			}
			case 2: {
				if(PlayerInfo[playerid][xRank] < 3) return SendErrorMessage(playerid, "Da bi porucili zeljeni paket morate imati visi rank!");
				if(PlayerInfo[playerid][xNovac] > 500) {
					SCM(playerid, SVETLOPLAVA, "* Narucili ste paket, cena ovog paketa je 500$, paket je bacen iz helikoptera i sada se nalazi kod vas.");
					GiveWeaponToPlayer(playerid, 24, 50);
					GiveWeaponToPlayer(playerid, 29, 500);
					GiveWeaponToPlayer(playerid, 25, 50);
					GiveWeaponToPlayer(playerid, 30, 500);
					GiveWeaponToPlayer(playerid, 4, 1);
					DajIgracuNovac(playerid, -500);
				}
				else return SendErrorMessage(playerid, "Nemate dovoljno novca za odabrani paket!");
			}
			case 3: {
				if(PlayerInfo[playerid][xRank] < 4) return SendErrorMessage(playerid, "Da bi porucili zeljeni paket morate imati visi rank!");
				if(PlayerInfo[playerid][xNovac] > 750) {
					SCM(playerid, SVETLOPLAVA, "* Narucili ste paket, cena ovog paketa je 750$, paket je bacen iz helikoptera i sada se nalazi kod vas.");
					GiveWeaponToPlayer(playerid, 24, 50);
					GiveWeaponToPlayer(playerid, 29, 500);
					GiveWeaponToPlayer(playerid, 25, 50);
					GiveWeaponToPlayer(playerid, 31, 500);
					GiveWeaponToPlayer(playerid, 4, 1);
					GiveWeaponToPlayer(playerid, 34, 20);
					DajIgracuNovac(playerid, -750);
				}
				else return SendErrorMessage(playerid, "Nemate dovoljno novca za odabrani paket!");
			}
			case 4: {
				if(PlayerInfo[playerid][xRank] < 5) return SendErrorMessage(playerid, "Da bi porucili zeljeni paket morate imati visi rank!");
				if(PlayerInfo[playerid][xNovac] > 1000) {
					SCM(playerid, SVETLOPLAVA, "* Narucili ste paket, cena ovog paketa je 1000$, paket je bacen iz helikoptera i sada se nalazi kod vas.");
					GiveWeaponToPlayer(playerid, 24, 50);
					GiveWeaponToPlayer(playerid, 29, 500);
					GiveWeaponToPlayer(playerid, 25, 50);
					GiveWeaponToPlayer(playerid, 30, 500);
					GiveWeaponToPlayer(playerid, 4, 1);
					GiveWeaponToPlayer(playerid, 34, 20);
					DajIgracuNovac(playerid, -1000);
				}
				else return SendErrorMessage(playerid, "Nemate dovoljno novca za odabrani paket!");
			}
		}
	}
}
else if(dialogid == dialog_RESETIRAJ) {
	if(!response) return 1;
	if(response) {
		switch(listitem) {
			case 0: {
				if(ServerInfo[RRVehicle] == true) return SendErrorMessage(playerid, "Vec je pokrenut jedan RAC.");
				SetTimerEx("RespawnCall", 15000, false, "dd", playerid, 1);
				format(varstring, sizeof(varstring), "[RESPAWN] Admin %s je aktivirao respawn praznih privatnih vozila!", ImeIgraca(playerid));
				SCMA(0x86C6DBAA, varstring);
				SCMA(0x86C6DBAA, "[RESPAWN] Respawn ce biti pokrenut za 15 sekundi.");
			}
			case 1: {
				if(ServerInfo[RRVehicle] == true) return SendErrorMessage(playerid, "Vec je pokrenut jedan RAC.");
				SetTimerEx("RespawnCall", 15000, false, "dd", playerid, 2);
				format(varstring, sizeof(varstring), "[RESPAWN] Admin %s je aktivirao respawn praznih poslovnih vozila!", ImeIgraca(playerid));
				SCMA(0x86C6DBAA, varstring);
				SCMA(0x86C6DBAA, "[RESPAWN] Respawn ce biti pokrenut za 15 sekundi.");
			}
			case 2: {
				if(ServerInfo[RRVehicle] == true) return SendErrorMessage(playerid, "Vec je pokrenut jedan RAC.");
				SetTimerEx("RespawnCall", 15000, false, "dd", playerid, 3);
				format(varstring, sizeof(varstring), "[RESPAWN] Admin %s je aktivirao respawn praznih organizacijskih vozila!", ImeIgraca(playerid));
				SCMA(0x86C6DBAA, varstring);
				SCMA(0x86C6DBAA, "[RESPAWN] Respawn ce biti pokrenut za 15 sekundi.");
			}
			case 3: {
				if(ServerInfo[RRVehicle] == true) return SendErrorMessage(playerid, "Vec je pokrenut jedan RAC.");
				SendErrorMessage(playerid, "Ova akcija je onemogucena zbog dinamicnih rent pickupa.");
			}
			case 4: {
				if(ServerInfo[RRVehicle] == true) return SendErrorMessage(playerid, "Vec je pokrenut jedan RAC.");
				if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
				SetTimerEx("RespawnCall", 15000, false, "dd", playerid, 5);
				format(varstring, sizeof(varstring), "[RESPAWN] Vlasnik %s je aktivirao respawn svih vozila!", ImeIgraca(playerid));
				SCMA(0x86C6DBAA, varstring);
				SCMA(0x86C6DBAA, "[RESPAWN] Respawn ce biti pokrenut za 15 sekundi.");
			}
			case 5: {
				if(ServerInfo[RRVehicle] == true) return SendErrorMessage(playerid, "Vec je pokrenut jedan RAC.");
				if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
				for(new i = 0; i < MAX_VEHICLES; i++) {
					if(IsValidVehicle(i) && IsVehiclePrikolica(i)) {
						ac_SetVehicleToRespawn(i);
					}
				}
				format(varstring, sizeof(varstring), "[RESPAWN] Vlasnik %s je respawnao sve cisterne!", ImeIgraca(playerid));
				SCMA(0x86C6DBAA, varstring);
			}
			case 6: {
				if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
				ac_SetVehiclePos(vagonSpawn, 1260.2913,-1334.7225,15.1090);
				SendInfoMessage(playerid, "Respawnovali ste vagon na spawnu.");
			}
		}
	}
}
else if(dialogid == dialog_FGPOENI) {

	if(!response) return 1;
	if(response) {

		new FGPOEN;
		switch(listitem) {

			case 0: {

				FGPOEN = 3;
				if(PlayerInfo[playerid][xFGpoeni] < FGPOEN) return SendErrorMessage(playerid, "Nemate dovoljno FGpoena.");
				PlayerInfo[playerid][xVIPLevel] = 1;
				PlayerInfo[playerid][xVipTime] = 336;
				PlayerInfo[playerid][xFGpoeni] -= FGPOEN;
				SavePlayer(playerid);
				SCM(playerid, SVETLOCRVENA, "Uzeli ste paket - VIP level 1, 14 dana - /vipinfo.");
				SendClientMessageEx(playerid, CRVENA, "Iskoristili ste %d FGpoena imate još %d FGpoena.", FGPOEN, PlayerInfo[playerid][xFGpoeni]);

				new stringbre[128];
				format(stringbre, sizeof(stringbre), "Igrac %s je aktivirao VIP level 1 FGpoenima", ImeIgraca(playerid));
				LogSave("Ostalo/LogFGpoeni.log", stringbre);
			}
			case 1: {

				FGPOEN = 5;
				if(PlayerInfo[playerid][xFGpoeni] < FGPOEN) return SendErrorMessage(playerid, "Nemate dovoljno FGpoena.");
				PlayerInfo[playerid][xVIPLevel] = 2;
				PlayerInfo[playerid][xVipTime] = 336;
				PlayerInfo[playerid][xFGpoeni] -= FGPOEN;
				SavePlayer(playerid);
				SCM(playerid, SVETLOCRVENA, "Uzeli ste paket - VIP level 2, 14 dana - /vipinfo.");
				SendClientMessageEx(playerid, CRVENA, "Iskoristili ste %d FGpoena imate još %d FGpoena.", FGPOEN, PlayerInfo[playerid][xFGpoeni]);

				new stringbre[128];
				format(stringbre, sizeof(stringbre), "Igrac %s je aktivirao VIP level 2 FGpoenima", ImeIgraca(playerid));
				LogSave("Ostalo/LogFGpoeni.log", stringbre);
			}
			case 2: {

				FGPOEN = 7;
				if(PlayerInfo[playerid][xFGpoeni] < FGPOEN) return SendErrorMessage(playerid, "Nemate dovoljno FGpoena.");
				PlayerInfo[playerid][xVIPLevel] = 3;
				PlayerInfo[playerid][xVipTime] = 336;
				PlayerInfo[playerid][xFGpoeni] -= FGPOEN;
				SavePlayer(playerid);
				SCM(playerid, SVETLOCRVENA, "Uzeli ste paket - VIP level 3, 14 dana - /vipinfo.");
				SendClientMessageEx(playerid, CRVENA, "Iskoristili ste %d FGpoena imate još %d FGpoena.", FGPOEN, PlayerInfo[playerid][xFGpoeni]);

				new stringbre[128];
				format(stringbre, sizeof(stringbre), "Igrac %s je aktivirao VIP level 3 FGpoenima", ImeIgraca(playerid));
				LogSave("Ostalo/LogFGpoeni.log", stringbre);
			}
			case 3: {

				FGPOEN = 2;
				if(PlayerInfo[playerid][xFGpoeni] < FGPOEN) return SendErrorMessage(playerid, "Nemate dovoljno FGpoena.");
				PlayerInfo[playerid][xLevel]++;
				SetPlayerScore(playerid, PlayerInfo[playerid][xLevel]);
				PlayerInfo[playerid][xFGpoeni] -= FGPOEN;
				SavePlayer(playerid);
				SCM(playerid, SVETLOCRVENA, "Uzeli ste paket - Level UP.");
				SendClientMessageEx(playerid, CRVENA, "Iskoristili ste %d FGpoena imate još %d FGpoena.", FGPOEN, PlayerInfo[playerid][xFGpoeni]);

				new stringbre[128];
				format(stringbre, sizeof(stringbre), "Igrac %s je dodao level up FGpoenima", ImeIgraca(playerid));
				LogSave("Ostalo/LogFGpoeni.log", stringbre);
			}
			case 4: {

				FGPOEN = 2;
				if(PlayerInfo[playerid][xFGpoeni] < FGPOEN) return SendErrorMessage(playerid, "Nemate dovoljno FGpoena.");
				DajIgracuNovac(playerid, 1000000);
				PlayerInfo[playerid][xFGpoeni] -= FGPOEN;
				SavePlayer(playerid);
				SCM(playerid, SVETLOCRVENA, "Uzeli ste paket - 1.000.000$.");
				SendClientMessageEx(playerid, CRVENA, "Iskoristili ste %d FGpoena imate još %d FGpoena.", FGPOEN, PlayerInfo[playerid][xFGpoeni]);

				new stringbre[128];
				format(stringbre, sizeof(stringbre), "Igrac %s je dodao 1.000.000$ FGpoenima", ImeIgraca(playerid));
				LogSave("Ostalo/LogFGpoeni.log", stringbre);
			}
			case 5: {

				FGPOEN = 4;
				if(PlayerInfo[playerid][xFGpoeni] < FGPOEN) return SendErrorMessage(playerid, "Nemate dovoljno FGpoena.");
				PlayerInfo[playerid][xDBO] = true;
				PlayerInfo[playerid][xFGpoeni] -= FGPOEN;
				SavePlayer(playerid);
				SCM(playerid, SVETLOCRVENA, "Uzeli ste paket - Donatorske boje - /dboja.");
				SendClientMessageEx(playerid, CRVENA, "Iskoristili ste %d FGpoena imate još %d FGpoena.", FGPOEN, PlayerInfo[playerid][xFGpoeni]);

				new stringbre[128];
				format(stringbre, sizeof(stringbre), "Igrac %s je kupio donatorsku boju FGpoenima", ImeIgraca(playerid));
				LogSave("Ostalo/LogFGpoeni.log", stringbre);
			}
		}
	}
}
else if(dialogid == dialog_STRELJANA) {
	if(!response) return 1;
	if(response) {
		switch(listitem) {
			case 0: {
				if(PlayerInfo[playerid][xDeagleSkill] >= 999) return SendErrorMessage(playerid, "Vec imate maksimalan skill na ovom oruzju.");
				SendInfoMessage(playerid, "Zapoceli ste trening za Desert Eagle, imate 10 sekundi da ispucate sve metke iz sarzera.");
				ResetAllWeapons(playerid);
				GiveWeaponToPlayer(playerid, ORUZJE_DEAGLE, SARZER_DEAGLE);
				Trenira[playerid] = ORUZJE_DEAGLE;
				SetPlayerArmedWeapon(playerid, ORUZJE_DEAGLE);
				treniranjetimer[playerid] = SetTimerEx("TreniranjeTimer", 10000, false, "d", playerid);
				Trenirao[playerid] = 2;
				TreniranjeProvera[playerid] = 1;
			}
			case 1: {
				if(PlayerInfo[playerid][xPistolSkill] >= 999) return SendErrorMessage(playerid, "Vec imate maksimalan skill na ovom oruzju.");
				SendInfoMessage(playerid, "Zapoceli ste trening za Pistol, imate 10 sekundi da ispucate sve metke iz sarzera.");
				ResetAllWeapons(playerid);
				GiveWeaponToPlayer(playerid, ORUZJE_PISTOL, SARZER_PISTOL);
				Trenira[playerid] = ORUZJE_PISTOL;
				SetPlayerArmedWeapon(playerid, ORUZJE_PISTOL);
				treniranjetimer[playerid] = SetTimerEx("TreniranjeTimer", 10000, false, "d", playerid);
				Trenirao[playerid] = 2;
				TreniranjeProvera[playerid] = 1;
			}
			case 2: {
				if(PlayerInfo[playerid][xM4Skill] >= 999) return SendErrorMessage(playerid, "Vec imate maksimalan skill na ovom oruzju.");
				SendInfoMessage(playerid, "Zapoceli ste trening za M4, imate 10 sekundi da ispucate sve metke iz sarzera.");
				ResetAllWeapons(playerid);
				GiveWeaponToPlayer(playerid, ORUZJE_M4, SARZER_M4);
				Trenira[playerid] = ORUZJE_M4;
				SetPlayerArmedWeapon(playerid, ORUZJE_M4);
				treniranjetimer[playerid] = SetTimerEx("TreniranjeTimer", 10000, false, "d", playerid);
				Trenirao[playerid] = 2;
				TreniranjeProvera[playerid] = 1;
			}
			case 3: {
				if(PlayerInfo[playerid][xAKSkill] >= 999) return SendErrorMessage(playerid, "Vec imate maksimalan skill na ovom oruzju.");
				SendInfoMessage(playerid, "Zapoceli ste trening za AK-47, imate 10 sekundi da ispucate sve metke iz sarzera.");
				ResetAllWeapons(playerid);
				GiveWeaponToPlayer(playerid, ORUZJE_AK47, SARZER_AK47);
				Trenira[playerid] = ORUZJE_AK47;
				SetPlayerArmedWeapon(playerid, ORUZJE_AK47);
				treniranjetimer[playerid] = SetTimerEx("TreniranjeTimer", 10000, false, "d", playerid);
				Trenirao[playerid] = 2;
				TreniranjeProvera[playerid] = 1;
			}
			case 4: {
				if(PlayerInfo[playerid][xMPSkill] >= 999) return SendErrorMessage(playerid, "Vec imate maksimalan skill na ovom oruzju.");
				SendInfoMessage(playerid, "Zapoceli ste trening za MP5, imate 10 sekundi da ispucate sve metke iz sarzera.");
				ResetAllWeapons(playerid);
				GiveWeaponToPlayer(playerid, ORUZJE_MP5, SARZER_MP5);
				Trenira[playerid] = ORUZJE_MP5;
				SetPlayerArmedWeapon(playerid, ORUZJE_MP5);
				treniranjetimer[playerid] = SetTimerEx("TreniranjeTimer", 10000, false, "d", playerid);
				Trenirao[playerid] = 2;
				TreniranjeProvera[playerid] = 1;
			}
			case 5: {
				if(PlayerInfo[playerid][xShotgunSkill] >= 999) return SendErrorMessage(playerid, "Vec imate maksimalan skill na ovom oruzju.");
				SendInfoMessage(playerid, "Zapoceli ste trening za Shotgun, imate 10 sekundi da ispucate sve metke iz sarzera.");
				ResetAllWeapons(playerid);
				GiveWeaponToPlayer(playerid, ORUZJE_SHOTGUN, SARZER_SHOTGUN);
				Trenira[playerid] = ORUZJE_SHOTGUN;
				SetPlayerArmedWeapon(playerid, ORUZJE_SHOTGUN);
				treniranjetimer[playerid] = SetTimerEx("TreniranjeTimer", 10000, false, "d", playerid);
				Trenirao[playerid] = 2;
				TreniranjeProvera[playerid] = 1;
			}
			case 6: {
				if(PlayerInfo[playerid][xSawnSkill] >= 999) return SendErrorMessage(playerid, "Vec imate maksimalan skill na ovom oruzju.");
				SendInfoMessage(playerid, "Zapoceli ste trening za Sawnoff Shotgun, imate 10 sekundi da ispucate sve metke iz sarzera.");
				ResetAllWeapons(playerid);
				GiveWeaponToPlayer(playerid, ORUZJE_SAWNOFF, SARZER_SAWNOFF);
				Trenira[playerid] = ORUZJE_SAWNOFF;
				SetPlayerArmedWeapon(playerid, ORUZJE_SAWNOFF);
				treniranjetimer[playerid] = SetTimerEx("TreniranjeTimer", 10000, false, "d", playerid);
				Trenirao[playerid] = 2;
				TreniranjeProvera[playerid] = 1;
			}
			case 7: {
				if(PlayerInfo[playerid][xSniperSkill] >= 999) return SendErrorMessage(playerid, "Vec imate maksimalan skill na ovom oruzju.");
				SendInfoMessage(playerid, "Zapoceli ste trening za Sniper, imate 10 sekundi da ispucate sve metke iz sarzera.");
				ResetAllWeapons(playerid);
				GiveWeaponToPlayer(playerid, ORUZJE_SNIPER, SARZER_SNIPER);
				Trenira[playerid] = ORUZJE_SNIPER;
				SetPlayerArmedWeapon(playerid, ORUZJE_SNIPER);
				treniranjetimer[playerid] = SetTimerEx("TreniranjeTimer", 10000, false, "d", playerid);
				Trenirao[playerid] = 2;
				TreniranjeProvera[playerid] = 1;
			}
			case 8: {
				if(PlayerInfo[playerid][xCombatSkill] >= 999) return SendErrorMessage(playerid, "Vec imate maksimalan skill na ovom oruzju.");
				SendInfoMessage(playerid, "Zapoceli ste trening za Combat, imate 10 sekundi da ispucate sve metke iz sarzera.");
				ResetAllWeapons(playerid);
				GiveWeaponToPlayer(playerid, ORUZJE_COMBAT, SARZER_COMBAT);
				Trenira[playerid] = ORUZJE_COMBAT;
				SetPlayerArmedWeapon(playerid, ORUZJE_COMBAT);
				treniranjetimer[playerid] = SetTimerEx("TreniranjeTimer", 10000, false, "d", playerid);
				Trenirao[playerid] = 2;
				TreniranjeProvera[playerid] = 1;
			}
		}
	}
}
else if(dialogid == dialog_AKTIVPOENI) {

	if(!response) return 1;
	if(response) {

		new APOEN;
		switch(listitem) {

			case 0: {

				APOEN = 2;
				if(PlayerInfo[playerid][xAktivpoeni] < APOEN) return SendErrorMessage(playerid, "Nemate dovoljno aktivnih poena.");
				DajIgracuNovac(playerid, 6000);
				PlayerInfo[playerid][xAktivpoeni] -= APOEN;
				SavePlayer(playerid);
				SCM(playerid, SVETLOCRVENA, "Uzeli ste paket - 6000$.");
				SendClientMessageEx(playerid, CRVENA, "Iskoristili ste %d poena, imate još %d aktivnih poena.", APOEN, PlayerInfo[playerid][xAktivpoeni]);

				new stringbre[128];
				format(stringbre, sizeof(stringbre), "Igrac %s je uzeo 6000$ Aktivnim poenima", ImeIgraca(playerid));
				LogSave("Ostalo/LogFGpoeni.log", stringbre);
			}
			case 1: {

				APOEN = 4;
				if(PlayerInfo[playerid][xAktivpoeni] < APOEN) return SendErrorMessage(playerid, "Nemate dovoljno aktivnih poena.");
				PlayerInfo[playerid][xRespekt]++;
				PlayerInfo[playerid][xAktivpoeni] -= APOEN;
				SavePlayer(playerid);
				SCM(playerid, SVETLOCRVENA, "Uzeli ste paket - respect up.");
				SendClientMessageEx(playerid, CRVENA, "Iskoristili ste %d poena, imate još %d aktivnih poena.", APOEN, PlayerInfo[playerid][xAktivpoeni]);

				new stringbre[128];
				format(stringbre, sizeof(stringbre), "Igrac %s je uzeo 1 respect Aktivnim poenima", ImeIgraca(playerid));
				LogSave("Ostalo/LogFGpoeni.log", stringbre);
			}
		}
	}
}
else if(dialogid == dialog_SELECTVGUN) {
	if(!response) return 1;
	if(response) {
		switch(listitem) {
			case 0: {
				if(PlayerInfo[playerid][xNovac] < 9500) return SendErrorMessage(playerid, "Nemate dovoljno novca 9.500$!");
				DajIgracuNovac(playerid, -9500);
				GiveWeaponToPlayer(playerid, 25, 50);
				SendInfoMessage(playerid, "Kupili ste Shotgun sa 50 metaka za 9.500$.");
			}
			case 1: {
				if(PlayerInfo[playerid][xNovac] < 1000) return SendErrorMessage(playerid, "Nemate dovoljno novca 1.000$!");
				DajIgracuNovac(playerid, -1000);
				GiveWeaponToPlayer(playerid, 5, 1);
				SendInfoMessage(playerid, "Kupili ste palicu za 1.000$.");
			}
			case 2: {
				if(PlayerInfo[playerid][xNovac] < 1000) return SendErrorMessage(playerid, "Nemate dovoljno novca 1.000$!");
				DajIgracuNovac(playerid, -1000);
				GiveWeaponToPlayer(playerid, 14, 1);
				SendInfoMessage(playerid, "Kupili ste cvece za 1.000$.");
			}
			case 3: {
				if(PlayerInfo[playerid][xVIPLevel] < 2 || PlayerInfo[playerid][xYouTuber] != 1) return SendErrorMessage(playerid, "Ovo oruzje moze da kupi samo VIP Level 2+.");
				if(PlayerInfo[playerid][xNovac] < 7000) return SendErrorMessage(playerid, "Nemate dovoljno novca 7.000$!");
				DajIgracuNovac(playerid, -7000);
				GiveWeaponToPlayer(playerid, 24, 50);
				SendInfoMessage(playerid, "Kupili ste deagle sa 50 metaka za 7.000$.");
			}
			case 4: {
				if(PlayerInfo[playerid][xVIPLevel] < 2 || PlayerInfo[playerid][xYouTuber] != 1) return SendErrorMessage(playerid, "Ovo oruzje moze da kupi samo VIP Level 2+.");
				if(PlayerInfo[playerid][xNovac] < 4000) return SendErrorMessage(playerid, "Nemate dovoljno novca 4.000$!");
				DajIgracuNovac(playerid, -4000);
				GiveWeaponToPlayer(playerid, 22, 100);
				SendInfoMessage(playerid, "Kupili ste Pistol 9mm sa 100 metaka za 4.000$.");
			}
			case 5: {
				if(PlayerInfo[playerid][xVIPLevel] < 3 || PlayerInfo[playerid][xYouTuber] != 1) return SendErrorMessage(playerid, "Ovo oruzje moze da kupi samo VIP Level 3+.");
				if(PlayerInfo[playerid][xNovac] < 9000) return SendErrorMessage(playerid, "Nemate dovoljno novca 9.000$!");
				DajIgracuNovac(playerid, -9000);
				GiveWeaponToPlayer(playerid, 28, 150);
				SendInfoMessage(playerid, "Kupili ste Uzi sa 150 metaka za 9.000$.");
			}
			case 6: {
				if(PlayerInfo[playerid][xVIPLevel] < 3 || PlayerInfo[playerid][xYouTuber] != 1) return SendErrorMessage(playerid, "Ovo oruzje moze da kupi samo VIP Level 3+.");
				if(PlayerInfo[playerid][xNovac] < 9500) return SendErrorMessage(playerid, "Nemate dovoljno novca 9.500$!");
				DajIgracuNovac(playerid, -9500);
				GiveWeaponToPlayer(playerid, 29, 150);
				SendInfoMessage(playerid, "Kupili ste MP5 sa 150 metaka za 9.500$.");
			}
			case 7: {
				if(PlayerInfo[playerid][xVIPLevel] < 4 || PlayerInfo[playerid][xYouTuber] != 1) return SendErrorMessage(playerid, "Ovo oruzje moze da kupi samo VIP Level 4+.");
				if(PlayerInfo[playerid][xNovac] < 11000) return SendErrorMessage(playerid, "Nemate dovoljno novca 11.000$!");
				DajIgracuNovac(playerid, -11000);
				GiveWeaponToPlayer(playerid, 31, 200);
				SendInfoMessage(playerid, "Kupili ste M4 sa 200 metaka za 11.000$.");
			}
			case 8: {
				if(PlayerInfo[playerid][xVIPLevel] < 4 || PlayerInfo[playerid][xYouTuber] != 1) return SendErrorMessage(playerid, "Ovo oruzje moze da kupi samo VIP Level 4+.");
				if(PlayerInfo[playerid][xNovac] < 11500) return SendErrorMessage(playerid, "Nemate dovoljno novca 11.500$!");
				DajIgracuNovac(playerid, -11500);
				GiveWeaponToPlayer(playerid, 30, 200);
				SendInfoMessage(playerid, "Kupili ste AK47 sa 200 metaka za 11.500$.");
			}
			case 9: {
				if(PlayerInfo[playerid][xVIPLevel] < 5 || PlayerInfo[playerid][xYouTuber] != 1) return SendErrorMessage(playerid, "Pancir moze da kupi samo VIP Level 5+.");
				if(PlayerInfo[playerid][xNovac] < 12000) return SendErrorMessage(playerid, "Nemate dovoljno novca 12.000$!");
				DajIgracuNovac(playerid, -12000);
				Fusion_SetPlayerArmour(playerid, 100);
				SendInfoMessage(playerid, "Kupili ste pancir za 10.000$.");
			}
			case 10: {
				if(PlayerInfo[playerid][xVIPLevel] < 5 || PlayerInfo[playerid][xYouTuber] != 1) return SendErrorMessage(playerid, "Ovo oruzje moze da kupi samo VIP Level 5+.");
				if(PlayerInfo[playerid][xNovac] < 20000) return SendErrorMessage(playerid, "Nemate dovoljno novca 20.000$!");
				DajIgracuNovac(playerid, -20000);
				GiveWeaponToPlayer(playerid, 34, 30);
				SendInfoMessage(playerid, "Kupili ste Sniper sa 10 metaka za 20.000$.");
			}
		}
	}
}
else if(dialogid == dialog_SELECTAPORT) {
	if(!response) return 1;
	if(response) {
		EnableAntiCheatForPlayer(playerid, 2, 0);
		EnableAntiCheatForPlayer(playerid, 7, 0);
		EnableAntiCheatForPlayer(playerid, 9, 0);
		EnableAntiCheatForPlayer(playerid, 0, 0);
		new tmpcar = GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) == 2) {
			ac_SetVehiclePos(tmpcar, aportInfo[listitem][aportPos][0], aportInfo[listitem][aportPos][1], aportInfo[listitem][aportPos][2]);
		}
		else {
			ac_SetPlayerPos(playerid, aportInfo[listitem][aportPos][0], aportInfo[listitem][aportPos][1], aportInfo[listitem][aportPos][2]);
		}
		TogglePlayerControllable(playerid, false);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
		ac_SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SendInfoMessage(playerid, "Uspesno ste se teleportovali do lokacije ' %s '.", aportInfo[listitem][aportName]);
		EnableAntiCheatForPlayer(playerid, 2, 1);
		EnableAntiCheatForPlayer(playerid, 7, 1);
		EnableAntiCheatForPlayer(playerid, 9, 1);
		EnableAntiCheatForPlayer(playerid, 0, 1);
	}
}
else if(dialogid == dialog_SELECTSPORT) {
	if(!response) return 1;
	if(response) {
		EnableAntiCheatForPlayer(playerid, 2, 0);
		EnableAntiCheatForPlayer(playerid, 7, 0);
		EnableAntiCheatForPlayer(playerid, 9, 0);
		EnableAntiCheatForPlayer(playerid, 0, 0);
		new tmpcar = GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) == 2) {
			ac_SetVehiclePos(tmpcar, supportInfo[listitem][supportPos][0], supportInfo[listitem][supportPos][1], supportInfo[listitem][supportPos][2]);
		}
		else {
			ac_SetPlayerPos(playerid, supportInfo[listitem][supportPos][0], supportInfo[listitem][supportPos][1], supportInfo[listitem][supportPos][2]);
		}
		TogglePlayerControllable(playerid, false);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
		ac_SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SendInfoMessage(playerid, "Uspesno ste se teleportovali do lokacije ' %s '.", supportInfo[listitem][supportName]);
		EnableAntiCheatForPlayer(playerid, 2, 1);
		EnableAntiCheatForPlayer(playerid, 7, 1);
		EnableAntiCheatForPlayer(playerid, 9, 1);
		EnableAntiCheatForPlayer(playerid, 0, 1);
	}
}
else if(dialogid == dialog_SELECTVPORT) {
	if(!response) return 1;
	if(response) {
		EnableAntiCheatForPlayer(playerid, 2, 0);
		EnableAntiCheatForPlayer(playerid, 7, 0);
		EnableAntiCheatForPlayer(playerid, 9, 0);
		EnableAntiCheatForPlayer(playerid, 0, 0);
		new tmpcar = GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) == 2) {
			ac_SetVehiclePos(tmpcar, vportInfo[listitem][vportPos][0], vportInfo[listitem][vportPos][1], vportInfo[listitem][vportPos][2]);
		}
		else {
			ac_SetPlayerPos(playerid, vportInfo[listitem][vportPos][0], vportInfo[listitem][vportPos][1], vportInfo[listitem][vportPos][2]);
		}
		TogglePlayerControllable(playerid, false);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
		ac_SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SendInfoMessage(playerid, "Uspesno ste se teleportovali do lokacije ' %s '.", vportInfo[listitem][vportName]);
		format(varstring, sizeof(varstring), "VPORT | %s se teleportovao do ' %s '.", ImeIgraca(playerid), vportInfo[listitem][vportName]);
		AdminPoruka(NARACRVENA, varstring);

		VIPPort[playerid] = 60;

		ac_SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		EnableAntiCheatForPlayer(playerid, 2, 1);
		EnableAntiCheatForPlayer(playerid, 7, 1);
		EnableAntiCheatForPlayer(playerid, 9, 1);
		EnableAntiCheatForPlayer(playerid, 0, 1);
	}
}
else if(dialogid == dialog_SELECTPPORT) {
	if(!response) return 1;
	if(response) {
		EnableAntiCheatForPlayer(playerid, 2, 0);
		EnableAntiCheatForPlayer(playerid, 7, 0);
		EnableAntiCheatForPlayer(playerid, 9, 0);
		EnableAntiCheatForPlayer(playerid, 0, 0);
		new tmpcar = GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) == 2) {
			ac_SetVehiclePos(tmpcar, pportInfo[listitem][pportPos][0], pportInfo[listitem][pportPos][1], pportInfo[listitem][pportPos][2]);
		}
		else {
			ac_SetPlayerPos(playerid, pportInfo[listitem][pportPos][0], pportInfo[listitem][pportPos][1], pportInfo[listitem][pportPos][2]);
		}
		TogglePlayerControllable(playerid, false);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
		ac_SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SendInfoMessage(playerid, "Uspesno ste se teleportovali do lokacije ' %s '.", pportInfo[listitem][pportName]);
		format(varstring, sizeof(varstring), "PPORT | %s se teleportovao do ' %s '.", ImeIgraca(playerid), pportInfo[listitem][pportName]);
		AdminPoruka(NARACRVENA, varstring);

		PromoterPort[playerid] = 75;
		ac_SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		EnableAntiCheatForPlayer(playerid, 2, 1);
		EnableAntiCheatForPlayer(playerid, 7, 1);
		EnableAntiCheatForPlayer(playerid, 9, 1);
		EnableAntiCheatForPlayer(playerid, 0, 1);

	}
}
else if(dialogid == dialog_HOTEL) {
	if(response) {
		switch(listitem) {
			case 0: {
				if(inHotel[playerid] != PlayerInfo[playerid][xHotelID]) return SendErrorMessage(playerid, "Morate biti u hotelu!");
				new string[128], hid = PlayerInfo[playerid][xHotelID];
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
				strcat(DialogStrgEx, "__________________________________________________________________\n \n");
				strcat(DialogStrgEx, "Hotel - Informacije\n \n");
				format(string, sizeof(string), "Racun hotela: [%d$] | Cena najma: [%d$]\n \n", hotelInfo[hid][hMoney], hotelInfo[hid][hRoomPrice]);
				strcat(DialogStrgEx, string);
				format(string, sizeof(string), "Gost u sobi 1: %s\n", hotelInfo[hid][hGuest_1]);
				strcat(DialogStrgEx, string);
				format(string, sizeof(string), "Gost u sobi 2: %s\n", hotelInfo[hid][hGuest_2]);
				strcat(DialogStrgEx, string);
				format(string, sizeof(string), "Gost u sobi 3: %s\n", hotelInfo[hid][hGuest_3]);
				strcat(DialogStrgEx, string);
				format(string, sizeof(string), "Gost u sobi 4: %s\n", hotelInfo[hid][hGuest_4]);
				strcat(DialogStrgEx, string);
				format(string, sizeof(string), "Gost u sobi 5: %s\n", hotelInfo[hid][hGuest_5]);
				strcat(DialogStrgEx, string);
				format(string, sizeof(string), "Gost u sobi 6: %s\n", hotelInfo[hid][hGuest_6]);
				strcat(DialogStrgEx, string);
				format(string, sizeof(string), "Gost u sobi 7: %s\n", hotelInfo[hid][hGuest_7]);
				strcat(DialogStrgEx, string);
				format(string, sizeof(string), "Gost u sobi 8: %s\n", hotelInfo[hid][hGuest_8]);
				strcat(DialogStrgEx, string);
				format(string, sizeof(string), "Gost u sobi 9: %s\n", hotelInfo[hid][hGuest_9]);
				strcat(DialogStrgEx, string);
				format(string, sizeof(string), "Gost u sobi 10: %s\n \n", hotelInfo[hid][hGuest_10]);
				strcat(DialogStrgEx, string);
				strcat(DialogStrgEx, "__________________________________________________________________");
				SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

			}
			case 1: {
				if(inHotel[playerid] != PlayerInfo[playerid][xHotelID]) return SendErrorMessage(playerid, "Morate biti u hotelu!");
					SPD(playerid, dialog_HOTELRENTP, DSI, D_NASLOV, "Molimo vas da unesete vasu cenu najma sobe.", D_ODABERI, D_ODUSTANI);
			}
			case 2: {
				if(inHotel[playerid] != PlayerInfo[playerid][xHotelID]) return SendErrorMessage(playerid, "Morate biti u hotelu!");
				new hid = PlayerInfo[playerid][xHotelID];
				new string[260];
				format(string, sizeof(string), ""col_white"%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s",
					hotelInfo[hid][hGuest_1],
					hotelInfo[hid][hGuest_2],
					hotelInfo[hid][hGuest_3],
					hotelInfo[hid][hGuest_4],
					hotelInfo[hid][hGuest_5],
					hotelInfo[hid][hGuest_6],
					hotelInfo[hid][hGuest_7],
					hotelInfo[hid][hGuest_8],
					hotelInfo[hid][hGuest_9],
					hotelInfo[hid][hGuest_10]);
				SPD(playerid, dialog_HOTELIZBACI, DSL, "Izaberite koga zelite izbaciti:", string, D_ODABERI, D_ODUSTANI);
			}
			case 3: {
				if(inHotel[playerid] != PlayerInfo[playerid][xHotelID]) return SendErrorMessage(playerid, "Morate biti u hotelu!");
					SPD(playerid, dialog_HPMONEY, DSI, D_NASLOV, "Molimo vas da unesete kolicinu novca koju zelite da podignete.", D_ODABERI, D_ODUSTANI);
			}
			case 4: {
				if(inHotel[playerid] != PlayerInfo[playerid][xHotelID]) return SendErrorMessage(playerid, "Morate biti u hotelu!");
					SPD(playerid, dialog_HOMONEY, DSI, D_NASLOV, "Molimo vas da unesete kolicinu novca koju zelite da ostavite.", D_ODABERI, D_ODUSTANI);
			}
			case 5: {
				if(inHotel[playerid] != PlayerInfo[playerid][xHotelID] && GetNearestHotel(playerid) != PlayerInfo[playerid][xHotelID]) return SendErrorMessage(playerid, "Morate biti u/pored hotelu/a!");
				SPD(playerid, dialog_HOTELLOCK, DSMSG, D_NASLOV, "Molimo vas da odaberete da li zelite da ?", "Otkljucate", "Zakljucate");
			}
			case 6: {
				if(GetNearestHotel(playerid) != PlayerInfo[playerid][xHotelID]) return SendErrorMessage(playerid, "Niste blizu ulaza hotela!");
				SPD(playerid, dialog_HOTELSELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vas hotel drzavi?", "Da", "Ne");
			}
			case 7: {
				if(GetNearestHotel(playerid) != PlayerInfo[playerid][xHotelID]) return SendErrorMessage(playerid, "Niste blizu ulaza hotela!");
				SPD(playerid, dialog_HOTELSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu hotel", "Ponudi", D_ODUSTANI);
			}
		}
	}
}
else if(dialogid == dialog_HOTELSELLTP) {
	if(!response) return 1;
	if(response) {
		if(PlayerInfo[playerid][xBRacun] < 0) return SendErrorMessage(playerid, "Ne mozes da prodas hotel dok ne izadjes iz minusa u banci.");
		new id = PlayerInfo[playerid][xHotelID];
		new idigraca, cena, string[128], Float:Pos[3];
		if(sscanf(inputtext, "ui", idigraca, cena)) return SPD(playerid, dialog_HOTELSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu hotel", "Ponudi", D_ODUSTANI);
		GetPlayerPos(idigraca, Pos[0], Pos[1], Pos[2]);
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, Pos[0], Pos[1], Pos[2])) return SendErrorMessage(playerid, "Igrac nije blizu vas");
		if(cena < 1) return SendErrorMessage(playerid, "Cena ne moze biti manja od 1$!");
		if(idigraca == IPI) return SendErrorMessage(playerid, "Pogresan ID.");
		if(idigraca == playerid) return SendErrorMessage(playerid, "Ne mozes sam sebi prodati hotel!");
		if(PlayerInfo[idigraca][xHotelID] != -1)return SendErrorMessage(playerid, "Igrac vec ima hotel!");
		if(PlayerInfo[idigraca][xLevel] < hotelInfo[id][hLevel]) return SendClientMessageEx(playerid, CRVENA, "Igrac mora biti level %d+ da bi ste mu prodali hotel.", hotelInfo[id][hLevel]);
		SendClientMessageEx(playerid, SVETLOPLAVA, "Ponudili ste igracu %s hotel po ceni od %d.", ImeIgraca(idigraca), cena);
		GlobalProdaja[idigraca] = playerid;
		GlobalCena[idigraca] = cena;
		format(string, sizeof(string), "Igrac %s vam je ponudio da kupite njegov hotel za %d", ImeIgraca(playerid), cena);
		SPD(idigraca, dialog_ACCEPTHOTEL, DSMSG, D_NASLOV, string, "Prihvati", "Odbij");
	}
}
else if(dialogid == dialog_ACCEPTHOTEL) {
	if(response) {
		new id = PlayerInfo[GlobalProdaja[playerid]][xHotelID];
		if(PlayerInfo[playerid][xNovac] < GlobalCena[playerid]) return SendErrorMessage(playerid, "Nemate dovoljno novca.");

		new string1[128];
		format(string1, sizeof(string1), "Igrac %s je prodao hotel ID %d igracu %s za %d", ImeIgraca(GlobalProdaja[playerid]), id, ImeIgraca(playerid), GlobalCena[playerid]);
		LogSave("Ostalo/LogProdajaImovine.log", string1);

		SendClientMessageEx(playerid, SVETLOPLAVA, "Uspesno ste kupili hotel od igraca %s za $d.", ImeIgraca(GlobalProdaja[playerid]), GlobalCena[playerid]);

		PlayerInfo[GlobalProdaja[playerid]][xHotelID] = -1;
		PlayerInfo[playerid][xHotelID] = id;
		strmid(hotelInfo[id][hOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 255);
		SaveHotel(id); HotelRefresh(id);
		SavePlayer(playerid); SavePlayer(GlobalProdaja[playerid]);
		format(varstring, sizeof(varstring), "Prodali ste hotel igracu %s za %d!", ImeIgraca(playerid), GlobalCena[playerid]);
		SCM(GlobalProdaja[playerid], -1, varstring);
		DajIgracuNovac(GlobalProdaja[playerid], GlobalCena[playerid]);
		DajIgracuNovac(playerid, -GlobalCena[playerid]);
		SCM(playerid, -1, "Kupili ste hotel!");
		GlobalProdaja[playerid] = -1;
		GlobalCena[playerid] = -1;
	}
	else if(!response) {
		format(varstring, sizeof(varstring),"Igrac %s je odbio vasu ponudu za kupovinu hotelaa!", ImeIgraca(playerid));
		SCM(GlobalProdaja[playerid], -1, varstring);
		SCM(playerid, -1, "Odbili ste ponudu!");
		GlobalProdaja[playerid] = -1;
		GlobalCena[playerid] = -1;
	}
}
else if(dialogid == dialog_HOTELSELLDRZAVA) {
	if(response) {
		if(PlayerInfo[playerid][xBRacun] < 0) return SendErrorMessage(playerid, "Ne mozes da prodas hotel dok ne izadjes iz minusa u banci.");
		new id = PlayerInfo[playerid][xHotelID];
			if(PlayerInfo[playerid][xHotelID] == -1) return SendErrorMessage(playerid, "Ne posedujes hotel!");
		if(GetNearestHotel(playerid) != PlayerInfo[playerid][xHotelID]) return SendErrorMessage(playerid, "Niste blizu ulaza hotela!");

		new string1[128];
		format(string1, sizeof(string1), "Igrac %s je prodao hotel ID %d na buy", ImeIgraca(playerid), id);
		LogSave("Ostalo/LogProdajaImovine.log", string1);

		hotelInfo[id][hOwned] = 0;
		strmid(hotelInfo[id][hOwner], "Drzava", 0, strlen("Drzava"), 24);
		hotelInfo[id][hLocked] = 0;
		DajIgracuNovac(playerid, hotelInfo[id][hPrice]/2);
		PlayerInfo[playerid][xHotelID] = -1;
		SaveHotel(id);
		SendInfoMessage(playerid, "Hotel uspesno prodat!");
		HotelRefresh(id);
		SavePlayer(playerid);
	}
	if(!response) {
		SCM(playerid, -1, "Odustali ste od prodaje hotela drzavi.");
	}
}
else if(dialogid == dialog_HOTELLOCK) {
	new hid = PlayerInfo[playerid][xHotelID];
	if(inHotel[playerid] != PlayerInfo[playerid][xHotelID] && GetNearestHotel(playerid) != PlayerInfo[playerid][xHotelID]) return SendErrorMessage(playerid, "Morate biti u/pored hotelu/a!");
		if(response) {
		hotelInfo[hid][hLocked] = 0;
		GameTextForPlayer(playerid, "Hotel ~g~otkljucana!", 3000, 3);
		SaveHotel(hid);
	}
	else {
		hotelInfo[hid][hLocked] = 1;
		GameTextForPlayer(playerid, "Hotel ~r~zakljucana!", 3000, 3);
		SaveHotel(hid);
	}
}
else if(dialogid == dialog_HOTELRENTP) {
	if(response) {
		if(inHotel[playerid] != PlayerInfo[playerid][xHotelID]) return SendErrorMessage(playerid, "Morate biti u hotelu!");
		new iznos, hid = PlayerInfo[playerid][xHotelID];
		if(sscanf(inputtext, "i", iznos)) return SPD(playerid, dialog_HOTELRENTP, DSI, D_NASLOV, "Molimo vas da unesete vasu cenu najma sobe.", D_ODABERI, D_ODUSTANI);
		if(iznos < 1 || iznos > 1000) return SendErrorMessage(playerid, "Cena najma ne moze biti ispod 1 i iznad 1000!");
		hotelInfo[hid][hRoomPrice] = iznos;
		SaveHotel(hid); HotelRefresh(hid);
		SendClientMessageEx(playerid, FUSIONGAMING, "Uspesno ste promenili cenu najma u %d$.", iznos);
	}
}
else if(dialogid == dialog_HOTELIZBACI) {
	if(response) {
		if(inHotel[playerid] != PlayerInfo[playerid][xHotelID]) return SendErrorMessage(playerid, "Morate biti u hotelu!");
		new hid = PlayerInfo[playerid][xHotelID];
		switch(listitem) {
			case 0: {
				if(strcmp(hotelInfo[hid][hGuest_1], "Niko", true)) {
					SendClientMessageEx(playerid, FUSIONGAMING, "Uspesno ste izbacili %s iz sobe.", hotelInfo[hid][hGuest_1]);
					strmid(hotelInfo[hid][hGuest_1], "Niko", 0, strlen("Niko"), 24);
				}
			}
			case 1: {
				if(strcmp(hotelInfo[hid][hGuest_2], "Niko", true)) {
					SendClientMessageEx(playerid, FUSIONGAMING, "Uspesno ste izbacili %s iz sobe.", hotelInfo[hid][hGuest_2]);
					strmid(hotelInfo[hid][hGuest_2], "Niko", 0, strlen("Niko"), 24);
				}
			}
			case 2: {
				if(strcmp(hotelInfo[hid][hGuest_3], "Niko", true)) {
					SendClientMessageEx(playerid, FUSIONGAMING, "Uspesno ste izbacili %s iz sobe.", hotelInfo[hid][hGuest_3]);
					strmid(hotelInfo[hid][hGuest_3], "Niko", 0, strlen("Niko"), 24);
				}
			}
			case 3: {
				if(strcmp(hotelInfo[hid][hGuest_4], "Niko", true)) {
					SendClientMessageEx(playerid, FUSIONGAMING, "Uspesno ste izbacili %s iz sobe.", hotelInfo[hid][hGuest_4]);
					strmid(hotelInfo[hid][hGuest_4], "Niko", 0, strlen("Niko"), 24);
				}
			}
			case 4: {
				if(strcmp(hotelInfo[hid][hGuest_5], "Niko", true)) {
					SendClientMessageEx(playerid, FUSIONGAMING, "Uspesno ste izbacili %s iz sobe.", hotelInfo[hid][hGuest_5]);
					strmid(hotelInfo[hid][hGuest_5], "Niko", 0, strlen("Niko"), 24);
				}
			}
			case 5: {
				if(strcmp(hotelInfo[hid][hGuest_6], "Niko", true)) {
					SendClientMessageEx(playerid, FUSIONGAMING, "Uspesno ste izbacili %s iz sobe.", hotelInfo[hid][hGuest_6]);
					strmid(hotelInfo[hid][hGuest_6], "Niko", 0, strlen("Niko"), 24);
				}
			}
			case 6: {
				if(strcmp(hotelInfo[hid][hGuest_7], "Niko", true)) {
					SendClientMessageEx(playerid, FUSIONGAMING, "Uspesno ste izbacili %s iz sobe.", hotelInfo[hid][hGuest_7]);
					strmid(hotelInfo[hid][hGuest_7], "Niko", 0, strlen("Niko"), 24);
				}
			}
			case 7: {
				if(strcmp(hotelInfo[hid][hGuest_8], "Niko", true)) {
					SendClientMessageEx(playerid, FUSIONGAMING, "Uspesno ste izbacili %s iz sobe.", hotelInfo[hid][hGuest_8]);
					strmid(hotelInfo[hid][hGuest_8], "Niko", 0, strlen("Niko"), 24);
				}
			}
			case 8: {
				if(strcmp(hotelInfo[hid][hGuest_9], "Niko", true)) {
					SendClientMessageEx(playerid, FUSIONGAMING, "Uspesno ste izbacili %s iz sobe.", hotelInfo[hid][hGuest_9]);
					strmid(hotelInfo[hid][hGuest_9], "Niko", 0, strlen("Niko"), 24);
				}
			}
			case 9: {
				if(strcmp(hotelInfo[hid][hGuest_10], "Niko", true)) {
					SendClientMessageEx(playerid, FUSIONGAMING, "Uspesno ste izbacili %s iz sobe.", hotelInfo[hid][hGuest_10]);
					strmid(hotelInfo[hid][hGuest_10], "Niko", 0, strlen("Niko"), 24);
				}
			}
		}
		SaveHotel(hid);
	}
}
else if(dialogid == dialog_HOMONEY) {
	if(!response) return true;
	if(response) {
		if(inHotel[playerid] != PlayerInfo[playerid][xHotelID]) return SendErrorMessage(playerid, "Morate biti u hotelu!");
		new iznos, hid = PlayerInfo[playerid][xHotelID];
		if(sscanf(inputtext, "i", iznos)) return SPD(playerid, dialog_HOMONEY, DSI, D_NASLOV, "Molimo vas da unesete kolicinu novca koju zelite da ostavite.", D_ODABERI, D_ODUSTANI);
		if(iznos < 1 || iznos > 10000) return SendErrorMessage(playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10000!");
		if(iznos > PlayerInfo[playerid][xNovac]) return SendErrorMessage(playerid, "Nemate toliko novca kod sebe!");
		DajIgracuNovac(playerid, -iznos); hotelInfo[hid][hMoney] += iznos;
		SendInfoMessage(playerid, "Ostavili ste %d$ u kasu hotela!", iznos);
		SaveHotel(hid);
		SavePlayer(playerid);
	}
}
else if(dialogid == dialog_HPMONEY) {
	if(!response) return true;
	if(response) {
		if(inHotel[playerid] != PlayerInfo[playerid][xHotelID]) return SendErrorMessage(playerid, "Morate biti u hotelu!");
		new iznos, hid = PlayerInfo[playerid][xHotelID];
		if(sscanf(inputtext, "i", iznos)) return SPD(playerid, dialog_HPMONEY, DSI, D_NASLOV, "Molimo vas da unesete kolicinu novca koju zelite da podignete.", D_ODABERI, D_ODUSTANI);
		if(iznos < 1 || iznos > 10000) return SendErrorMessage(playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10000!");
		if(iznos > hotelInfo[hid][hMoney]) return SendErrorMessage(playerid, "Nemate toliko novca u kasi!");
		DajIgracuNovac(playerid, iznos); hotelInfo[hid][hMoney] -= iznos;
		SendInfoMessage(playerid, "Podigli ste %d$ iz kase hotela!", iznos);
		SaveHotel(hid);
		SavePlayer(playerid);
	}
}
else if(dialogid == dialog_PILOT) {
	if(!response) return true;
	if(response) {
		switch(listitem) {
			case 0: {
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 519 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 553) {
					Fusion_SetPlayerCheckpoint(playerid, 1847.4221, -2414.0798, 13.5547, 5.0);
					LetSF[playerid] = 1; CheckpointStatus[playerid] = 20;
					SendJobMessage(playerid, "Krenuli ste sa poslom, prevozite putnike u SF.");
					StaroVreme[playerid] = gettime();
					NovoVreme[playerid] = 120;
				}
			}
			case 1: {
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 519 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 553) {
					Fusion_SetPlayerCheckpoint(playerid, 1847.4221, -2414.0798, 13.5547, 5.0);
					LetLV[playerid] = 1; CheckpointStatus[playerid] = 21;
					SendJobMessage(playerid, "Krenuli ste sa poslom, prevozite putnike u LV.");
					StaroVreme[playerid] = gettime();
					NovoVreme[playerid] = 120;
				}
			}
		}
	}
}
else if(dialogid == dialog_GEPEK) {
	if(!response) return true;
	if(response) {
		new vehicleid, found, engine, lights, alarm, doors, bonnet, boot, objective;
		for(new i = 0; i < MAX_VEHICLES; i++) {
			new Float:X, Float:Y, Float:Z;
			GetVehiclePos(i, X, Y, Z);
			if(IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z)) {
				vehicleid = i;
				found = 1;
				break;
			}
			else
				continue;
		}
		if(found == 0) return SendErrorMessage(playerid, "Niste blizu vozila.");

		new Float:vehPos[3];
		getPosBehindVehicle(vehicleid, vehPos[0], vehPos[1], vehPos[2], 0.0);
		if(!IsPlayerInRangeOfPoint(playerid, 2, vehPos[0], vehPos[1], vehPos[2])) return SendErrorMessage(playerid, "Morate biti pored prtljaznika.");

		if(IsANoTrunkVehicle(vehicleid)) return SendErrorMessage(playerid, "Ovo vozilo nema prtljaznik!");
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Morate biti na nogama.");
		if(IsVehicleBajs(vehicleid) || IsVehicleMotor(vehicleid) || IsVehicleBrod(vehicleid)) {
			SendErrorMessage(playerid, "Nepoznata akcija.");
			return 1;
		}

		if(TipVozila[vehicleid] == PRIVATNO_VOZILO) {

			if(PlayerInfo[playerid][xVoziloID][0] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][0]][vID] == vehicleid) {}
			else if(PlayerInfo[playerid][xVoziloID][1] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][1]][vID] == vehicleid) {}
			else if(PlayerInfo[playerid][xVoziloID][2] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][2]][vID] == vehicleid) {}
			else if(PlayerInfo[playerid][xVoziloID][3] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][3]][vID] == vehicleid) {}
			else return SendErrorMessage(playerid, "Nemate kljuceve ovog vozila.");
		}
		else if(TipVozila[vehicleid] == ORGANIZACIJSKO_VOZILO) {
			if(OrgaVozila[vehicleid] != PlayerInfo[playerid][xClan]) return SendErrorMessage(playerid, "Nemate kljuceve ovog vozila.");
		}
		else if(TipVozila[vehicleid] == POSLOVNO_VOZILO) {
			if(PosaoVozila[vehicleid] != PlayerInfo[playerid][xPosao]) return SendErrorMessage(playerid, "Nemate kljuceve ovog vozila.");
		}
		else return SendErrorMessage(playerid, "Nemate kljuceve ovog vozila.");

		new autoid = ScriptIDVozila[vehicleid];

		switch(listitem) {
			case 0: {
				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				if(boot == 0) {
					ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, 1, objective);
				} else {
					ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, 0, objective);
				}
			}
			case 1: {
				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				if(boot == 0) return SendErrorMessage(playerid, "Morate prvo otvoriti gepek.");

				new wepname1[32],
					wepname2[32],
					wepname3[32],
					drug1 = VehicleInfo[autoid][vDrugCode][0],
					drug2 = VehicleInfo[autoid][vDrugCode][1],
					drug3 = VehicleInfo[autoid][vDrugCode][2],
					drug4 = VehicleInfo[autoid][vDrugCode][3],
					drug5 = VehicleInfo[autoid][vDrugCode][4],
					drug6 = VehicleInfo[autoid][vDrugCode][5];

				if(VehicleInfo[autoid][vWeap1] != 0)
					format(wepname1, sizeof(wepname1), "%s", WeapNames[VehicleInfo[autoid][vWeap1]]);
				else
					strmid(wepname1, "None", 0, 5);

				if(VehicleInfo[autoid][vWeap2] != 0)
					format(wepname2, sizeof(wepname2), "%s", WeapNames[VehicleInfo[autoid][vWeap2]]);
				else
					strmid(wepname2, "None", 0, 5);

				if(VehicleInfo[autoid][vMelee] != 0)
					format(wepname3, sizeof(wepname3), "%s", WeapNames[VehicleInfo[autoid][vMelee]]);
				else
					strmid(wepname3, "None", 0, 5);

				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

				format(varstring, sizeof(varstring), "Materijali: %d\n", VehicleInfo[autoid][vMaterijali]);
				strcat(DialogStrgEx, varstring);

				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
				format(varstring, sizeof(varstring), "Drug1: %s(%d g) | Drug2: %s(%d g)\n", GetDrugNameByDrugID(drug1), VehicleInfo[autoid][vDrug][0], GetDrugNameByDrugID(drug2), VehicleInfo[autoid][vDrug][1]);
				strcat(DialogStrgEx, varstring);

				format(varstring, sizeof(varstring), "Drug3: %s(%d g) | Drug4: %s(%d g)\n", GetDrugNameByDrugID(drug3), VehicleInfo[autoid][vDrug][2], GetDrugNameByDrugID(drug4), VehicleInfo[autoid][vDrug][3]);
				strcat(DialogStrgEx, varstring);

				format(varstring, sizeof(varstring), "Drug5: %s(%d g) | Drug6: %s(%d g)\n", GetDrugNameByDrugID(drug5), VehicleInfo[autoid][vDrug][4], GetDrugNameByDrugID(drug6), VehicleInfo[autoid][vDrug][5]);
				strcat(DialogStrgEx, varstring);
				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
				format(varstring, sizeof(varstring), "Melee:[%s]\n", wepname3);
				strcat(DialogStrgEx, varstring);

				format(varstring, sizeof(varstring), "Slot 1:[%s]    |    Metaka: %d\n", wepname1, VehicleInfo[autoid][vAmmo1]);
				strcat(DialogStrgEx, varstring);

				format(varstring, sizeof(varstring), "Slot 2:[%s]    |    Metaka: %d\n", wepname2, VehicleInfo[autoid][vAmmo2]);
				strcat(DialogStrgEx, varstring);
				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
				format(varstring, sizeof(varstring), "Gajbica 1:[%s]    |    Komada: %d\n", getGajbicaName(VehicleInfo[autoid][vGajbica][0]), VehicleInfo[autoid][vGajbicaAmmount][0]);
				strcat(DialogStrgEx, varstring);

				format(varstring, sizeof(varstring), "Gajbica 2:[%s]    |    Komada: %d\n", getGajbicaName(VehicleInfo[autoid][vGajbica][1]), VehicleInfo[autoid][vGajbicaAmmount][1]);
				strcat(DialogStrgEx, varstring);

				format(varstring, sizeof(varstring), "Gajbica 3:[%s]    |    Komada: %d\n", getGajbicaName(VehicleInfo[autoid][vGajbica][2]), VehicleInfo[autoid][vGajbicaAmmount][2]);
				strcat(DialogStrgEx, varstring);

				format(varstring, sizeof(varstring), "Gajbica 4:[%s]    |    Komada: %d\n", getGajbicaName(VehicleInfo[autoid][vGajbica][3]), VehicleInfo[autoid][vGajbicaAmmount][3]);
				strcat(DialogStrgEx, varstring);

				format(varstring, sizeof(varstring), "Gajbica 5:[%s]    |    Komada: %d\n", getGajbicaName(VehicleInfo[autoid][vGajbica][4]), VehicleInfo[autoid][vGajbicaAmmount][4]);
				strcat(DialogStrgEx, varstring);
				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
				SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "");
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			}
			case 2: {
				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				if(boot == 0) return SendErrorMessage(playerid, "Morate prvo otvoriti gepek.");

				ChosenVehicle[playerid] = autoid;
				SPD(playerid, dialog_GEPEKOSTAVI, DSL, D_NASLOV, "Ostavi oruzje\nOstavi drogu\nOstavi gajbicu\nOstavi materijale", D_ODABERI, D_ODUSTANI);
			}
			case 3: {
				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				if(boot == 0) return SendErrorMessage(playerid, "Morate prvo otvoriti gepek.");

				ChosenVehicle[playerid] = autoid;
				SPD(playerid, dialog_GEPEKIZVADI, DSL, D_NASLOV, "Izvadi oruzje\nIzvadi drogu\nIzvadi gajbicu\nIzvadi materijale", D_ODABERI, D_ODUSTANI);
			}
		}
	}
}
else if(dialogid == dialog_GEPEKIZVADI) {
	if(!response) return true;
	if(response) {
		new vehicleid, found;
		for(new i = 0; i < MAX_VEHICLES; i++) {
			new Float:X, Float:Y, Float:Z;
			GetVehiclePos(i, X, Y, Z);
			if(IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z)) {
				vehicleid = i;
				found = 1;
				break;
			}
			else
				continue;
		}
		if(found == 0) return SendErrorMessage(playerid, "Niste blizu vozila.");

		new Float:vehPos[3];
		getPosBehindVehicle(vehicleid, vehPos[0], vehPos[1], vehPos[2], 0.0);
		if(!IsPlayerInRangeOfPoint(playerid, 2, vehPos[0], vehPos[1], vehPos[2])) return SendErrorMessage(playerid, "Morate biti pored prtljaznika.");

		if(IsANoTrunkVehicle(vehicleid)) return SendErrorMessage(playerid, "Ovo vozilo nema prtljaznik!");
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Morate biti na nogama.");
		if(IsVehicleBajs(vehicleid) || IsVehicleMotor(vehicleid) || IsVehicleBrod(vehicleid)) {
			SendErrorMessage(playerid, "Nepoznata akcija.");
			return 1;
		}

		new autoid = ChosenVehicle[playerid];
		if(VehicleInfo[autoid][vUsage] == PRIVATNO_VOZILO) {
			if(strcmp(ImeIgraca(playerid), VehicleInfo[autoid][vOwner], true) == 0) {}
			else return SendErrorMessage(playerid, "Nemate kljuceve ovog vozila.");
		}
		else if(VehicleInfo[autoid][vUsage] == ORGANIZACIJSKO_VOZILO) {
			if(VehicleInfo[autoid][vOrganization] != PlayerInfo[playerid][xClan]) return SendErrorMessage(playerid, "Nemate kljuceve ovog vozila.");
		}
		else if(VehicleInfo[autoid][vUsage] == POSLOVNO_VOZILO) {
			if(VehicleInfo[autoid][vJob] != PlayerInfo[playerid][xPosao]) return SendErrorMessage(playerid, "Nemate kljuceve ovog vozila.");
		}
		else {}

		switch(listitem) {
			case 0: {
				if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete uzeti oruzje, imate zabranu - /disarmtime.");
				new wepname1[32], wepname2[32], wepname3[32];
				if(VehicleInfo[autoid][vMelee] ==  0 && VehicleInfo[autoid][vWeap1] == 0 && VehicleInfo[autoid][vWeap2] == 0) return SendErrorMessage(playerid, "Svi slotovi su prazni!");
				if(VehicleInfo[autoid][vWeap1] != 0)
					format(wepname1, sizeof(wepname1), "%s", WeapNames[VehicleInfo[autoid][vWeap1]]);
				else
					format(wepname1, sizeof(wepname1), "None");

				if(VehicleInfo[autoid][vWeap2] != 0)
					format(wepname2, sizeof(wepname2), "%s", WeapNames[VehicleInfo[autoid][vWeap2]]);
				else
					format(wepname2, sizeof(wepname2), "None");

				if(VehicleInfo[autoid][vMelee] != 0)
					format(wepname3, sizeof(wepname3), "%s", WeapNames[VehicleInfo[autoid][vMelee]]);
				else
					format(wepname3, sizeof(wepname3), "None");
				TrunkVehicle[playerid] = autoid;
				format(varstring, sizeof(varstring), "%s\n%s\n%s", wepname1, wepname2, wepname3);
				SPD(playerid, dialog_VEHICLEWEPTAKE, DSL, D_NASLOV, varstring, D_ODABERI, D_ODUSTANI);
			}
			case 1: {
				SPD(playerid, dialog_VEHICLETAKEDRUG, DSI, D_NASLOV, "Unesite slot droge u vozilu i kolicinu droge za uzimanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI);
			}
			case 2: {
				new coordsstring[64], vrsta[10];
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

				for(new i = 0; i < 5; i++) {
					if(VehicleInfo[autoid][vGajbica][i] != -1) {

						if(VehicleInfo[autoid][vGajbica][i] == 0) {
							format(coordsstring, sizeof(coordsstring), "Slot %d - Prazna gajbica\n", i+1);
						}
						else {
							if(VehicleInfo[autoid][vGajbica][i] == BILJKA_SLJIVA) { vrsta = "Sljiva";}
							else if(VehicleInfo[autoid][vGajbica][i] == BILJKA_KRUSKA) { vrsta = "Kruska";}
							else if(VehicleInfo[autoid][vGajbica][i] == BILJKA_JABUKA) { vrsta = "Jabuka";}
							else if(VehicleInfo[autoid][vGajbica][i] == BILJKA_KUPUS) { vrsta = "Kupus";}
							else if(VehicleInfo[autoid][vGajbica][i] == BILJKA_RUZE) { vrsta = "Ruze";}

							format(coordsstring, sizeof(coordsstring), "Gajbica %d - %s - %d komada\n", i+1, vrsta, VehicleInfo[autoid][vGajbicaAmmount][i]);
						}
						strcat(DialogStrgEx, coordsstring);
					}
					else if(VehicleInfo[autoid][vGajbica][i] == -1) {
						format(coordsstring, sizeof(coordsstring), "Slot %d - Nema gajbice\n", i+1);
						strcat(DialogStrgEx, coordsstring);
					}
				}
				SPD(playerid, dialog_IZVADIGAJBICE, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI);
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			}
			case 3: {

				SPD(playerid, dialog_VEHICLETAKEMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za uzimanje iz gepeka.", D_ODABERI, D_ODUSTANI);

			}
		}
	}
}
else if(dialogid == dialog_IZVADIGAJBICE) {
	if(!response) return true;
	if(response) {
		new autoid = ChosenVehicle[playerid];
		if(VehicleInfo[autoid][vGajbica][listitem] == -1) return SendErrorMessage(playerid, "Ovaj slot je prazan.");
		if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) return SendErrorMessage(playerid, "Vec imas gajbicu u rukama.");

		if(VehicleInfo[autoid][vGajbica][listitem] == 0) {
			PraznaGajbica[playerid] = true;
			SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 19639, 1, 0.10, 0.46, -0.01, 0.0, 89.0, 85.0, 1.04, 1.00, 1.00);
		}
		else if(VehicleInfo[autoid][vGajbica][listitem] > 0) {
			if(VehicleInfo[autoid][vGajbica][listitem] == BILJKA_SLJIVA) {
				GajbicaBiljka[playerid] = BILJKA_SLJIVA;
				PlayerInfo[playerid][xSljive] += VehicleInfo[autoid][vGajbicaAmmount][listitem];
			}
			else if(VehicleInfo[autoid][vGajbica][listitem] == BILJKA_KRUSKA) {
				GajbicaBiljka[playerid] = BILJKA_KRUSKA;
				PlayerInfo[playerid][xKruske] += VehicleInfo[autoid][vGajbicaAmmount][listitem];
			}
			else if(VehicleInfo[autoid][vGajbica][listitem] == BILJKA_JABUKA) {
				GajbicaBiljka[playerid] = BILJKA_JABUKA;
				PlayerInfo[playerid][xJabuke] += VehicleInfo[autoid][vGajbicaAmmount][listitem];
			}
			else if(VehicleInfo[autoid][vGajbica][listitem] == BILJKA_KUPUS) {
				GajbicaBiljka[playerid] = BILJKA_KUPUS;
				PlayerInfo[playerid][xKupus] += VehicleInfo[autoid][vGajbicaAmmount][listitem];
			}
			else if(VehicleInfo[autoid][vGajbica][listitem] == BILJKA_RUZE) {
				GajbicaBiljka[playerid] = BILJKA_RUZE;
				PlayerInfo[playerid][xRuze] += VehicleInfo[autoid][vGajbicaAmmount][listitem];
			}
			PraznaGajbica[playerid] = false;
			SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 19636, 1, 0.10, 0.46, -0.01, 0.0, 89.0, 85.0, 1.04, 1.00, 1.00);
		}

		VehicleInfo[autoid][vGajbica][listitem] = -1;
		VehicleInfo[autoid][vGajbicaAmmount][listitem] = 0;
		SaveVehicle(autoid);

		format(varstring, sizeof(varstring), "* %s vadi gajbicu iz prtljaznika.", ImeIgraca(playerid));
		PorukaRadius(10.0, playerid, varstring, LJUBICASTA);

		ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1);
	}
}
else if(dialogid == dialog_GEPEKOSTAVI) {
	if(!response) return true;
	if(response) {
		new vehicleid, found;
		for(new i = 0; i < MAX_VEHICLES; i++) {
			new Float:X, Float:Y, Float:Z;
			GetVehiclePos(i, X, Y, Z);
			if(IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z)) {
				vehicleid = i;
				found = 1;
				break;
			}
			else
				continue;
		}
		if(found == 0) return SendErrorMessage(playerid, "Niste blizu vozila.");

		new Float:vehPos[3];
		getPosBehindVehicle(vehicleid, vehPos[0], vehPos[1], vehPos[2], 0.0);
		if(!IsPlayerInRangeOfPoint(playerid, 2, vehPos[0], vehPos[1], vehPos[2])) return SendErrorMessage(playerid, "Morate biti pored prtljaznika.");

		if(IsANoTrunkVehicle(vehicleid)) return SendErrorMessage(playerid, "Ovo vozilo nema prtljaznik!");
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Morate biti na nogama.");
		if(IsVehicleBajs(vehicleid) || IsVehicleMotor(vehicleid) || IsVehicleBrod(vehicleid)) {
			SendErrorMessage(playerid, "Nepoznata akcija.");
			return 1;
		}

		new autoid = ChosenVehicle[playerid];
		if(VehicleInfo[autoid][vUsage] == PRIVATNO_VOZILO) {
			if(strcmp(ImeIgraca(playerid), VehicleInfo[autoid][vOwner], true) == 0) {}
			else return SendErrorMessage(playerid, "Nemate kljuceve ovog vozila.");
		}
		else if(VehicleInfo[autoid][vUsage] == ORGANIZACIJSKO_VOZILO) {
			if(VehicleInfo[autoid][vOrganization] != PlayerInfo[playerid][xClan]) return SendErrorMessage(playerid, "Nemate kljuceve ovog vozila.");
		}
		else if(VehicleInfo[autoid][vUsage] == POSLOVNO_VOZILO) {
			if(VehicleInfo[autoid][vJob] != PlayerInfo[playerid][xPosao]) return SendErrorMessage(playerid, "Nemate kljuceve ovog vozila.");
		}
		else {}

		switch(listitem) {
			case 0: {
				if(GetFactionType(playerid) == ORG_TIP_PD || GetFactionType(playerid) == ORG_TIP_HITM) {
					SendErrorMessage(playerid, "Vi ste u drzavnoj organizaciji, ne mozete ubacivati oruzje u gepek!");
					return 1;
				}
				if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete ostaviti oruzje, imate zabranu - /disarmtime.");
				if(WARPInfo[playerid][WARIgrac] != -1) return SendErrorMessage(playerid, "Ne mozes ovo dok si u waru.");
				if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes ovo dok si na dmu.");
				new wepname[32];
				if(ForbiddenWeap(playerid)) return SendErrorMessage(playerid, "Ne mozes ubaciti zabranjena oruzja u gepek.");
				if(IsMeleeWeapon(GetWeapon(playerid)) && VehicleInfo[autoid][vMelee] != 0) return SendErrorMessage(playerid, "Slot za melee oruzja je zauzet!");
				if(!IsMeleeWeapon(GetWeapon(playerid)) && VehicleInfo[autoid][vWeap1] != 0 && VehicleInfo[autoid][vWeap2] != 0) return SendErrorMessage(playerid,  "Slotovi za vatrena oruzja su zauzeti!");
				if(IsMeleeWeapon(GetWeapon(playerid))) {
					format(wepname, sizeof(wepname), "%s", WeapNames[GetWeapon(playerid)]);
					antiCheatCS[playerid][WeaponDetect] = 3;
					VehicleInfo[autoid][vMelee] = GetWeapon(playerid);
					RemovePlayerWeapon(playerid, GetWeapon(playerid));
					SaveVehicle(autoid);

					format(varstring, sizeof(varstring), "* %s sprema %s u prtljaznik.", ImeIgraca(playerid), wepname);
					PorukaRadius(6.0, playerid, varstring, LJUBICASTA);

				}
				else if(VehicleInfo[autoid][vWeap1] == 0) {
					if((VehicleInfo[autoid][vAmmo1] + GetPlayerAmmo(playerid)) < 501) {
						format(wepname, sizeof(wepname), "%s", WeapNames[GetWeapon(playerid)]);
						antiCheatCS[playerid][WeaponDetect] = 3;
						VehicleInfo[autoid][vAmmo1] = GetPlayerAmmo(playerid);
						VehicleInfo[autoid][vWeap1] = GetWeapon(playerid);
						RemovePlayerWeapon(playerid, GetWeapon(playerid));
						SaveVehicle(autoid);

						format(varstring, sizeof(varstring), "* %s sprema %s u prtljaznik.", ImeIgraca(playerid), wepname);
						PorukaRadius(6.0, playerid, varstring, LJUBICASTA);
					} else return SendErrorMessage(playerid,  "U slot mozete staviti najvise 500 metaka!");
				}
				else if(VehicleInfo[autoid][vWeap2] == 0) {
					if((VehicleInfo[autoid][vAmmo2] + GetPlayerAmmo(playerid)) < 501) {
						format(wepname, sizeof(wepname), "%s", WeapNames[GetWeapon(playerid)]);
						antiCheatCS[playerid][WeaponDetect] = 3;
						VehicleInfo[autoid][vAmmo2] = GetPlayerAmmo(playerid);
						VehicleInfo[autoid][vWeap2] = GetWeapon(playerid);
						RemovePlayerWeapon(playerid, GetWeapon(playerid));
						SaveVehicle(autoid);

						format(varstring, sizeof(varstring), "* %s sprema %s u prtljaznik.", ImeIgraca(playerid), wepname);
						PorukaRadius(6.0, playerid, varstring, LJUBICASTA);
					} else return SendErrorMessage(playerid,  "U slot mozete staviti najvise 500 metaka!");
				}
			}
			case 1: {
				SPD(playerid, dialog_VEHICLEPUTDRUG, DSI, D_NASLOV, "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI);
			}
			case 2: {
				if(!IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) return SendErrorMessage(playerid, "Nemate gajbicu u rukama.");
				new brojg = 0, brojg2;

				if(VehicleInfo[autoid][vGajbica][0] != -1) { brojg++;}
				else if(VehicleInfo[autoid][vGajbica][1] != -1) { brojg++;}
				else if(VehicleInfo[autoid][vGajbica][2] != -1) { brojg++;}
				else if(VehicleInfo[autoid][vGajbica][3] != -1) { brojg++;}
				else if(VehicleInfo[autoid][vGajbica][4] != -1) { brojg++;}

				if(brojg == 5) return SendErrorMessage(playerid, "Svi slotovi za gajbice su zauzeti.");

				brojg2 = brojg-1;

				VehicleInfo[autoid][vGajbica][brojg2] = GajbicaBiljka[playerid];

				if(PraznaGajbica[playerid] == true) {
					VehicleInfo[autoid][vGajbicaAmmount][brojg2] = 0;
				}
				else if(PraznaGajbica[playerid] == false) {
					if(GajbicaBiljka[playerid] == BILJKA_SLJIVA) {
						VehicleInfo[autoid][vGajbicaAmmount][brojg2] = PlayerInfo[playerid][xSljive];
						PlayerInfo[playerid][xSljive] = 0;
					}
					else if(GajbicaBiljka[playerid] == BILJKA_KRUSKA) {
						VehicleInfo[autoid][vGajbicaAmmount][brojg2] = PlayerInfo[playerid][xKruske];
						PlayerInfo[playerid][xKruske] = 0;
					}
					else if(GajbicaBiljka[playerid] == BILJKA_JABUKA) {
						VehicleInfo[autoid][vGajbicaAmmount][brojg2] = PlayerInfo[playerid][xJabuke];
						PlayerInfo[playerid][xJabuke] = 0;
					}
					else if(GajbicaBiljka[playerid] == BILJKA_KUPUS) {
						VehicleInfo[autoid][vGajbicaAmmount][brojg2] = PlayerInfo[playerid][xKupus];
						PlayerInfo[playerid][xKupus] = 0;
					}
					else if(GajbicaBiljka[playerid] == BILJKA_RUZE) {
						VehicleInfo[autoid][vGajbicaAmmount][brojg2] = PlayerInfo[playerid][xRuze];
						PlayerInfo[playerid][xRuze] = 0;
					}
				}

				SaveVehicle(autoid);

				ClearAnimations(playerid);
				if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
			}
			case 3: {

				SPD(playerid, dialog_VEHICLEPUTMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za ostavljanje.", D_ODABERI, D_ODUSTANI);
			}
		}
	}
}
else if(dialogid == dialog_GARAZA) {
	if(!response) return true;
	if(response) {
		switch(listitem) {
			case 0: {
				new string[128], status[20], id = PlayerInfo[playerid][xGarageID];
				if(garageInfo[id][garageLocked] == true) { status = "Zakljucano";}
				else { status = "Otkljucano";}
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
				strcat(DialogStrgEx, "__________________________________________________________________\n \n");
				strcat(DialogStrgEx, "Garaza - Informacije\n \n");
				format(string, sizeof(string), "Vlasnik garaze: [%s] | Cena garaze: [%d$]\n", garageInfo[id][garageOwner], garageInfo[id][garagePrice]);
				strcat(DialogStrgEx, string);
				format(string, sizeof(string), "Level garaze: [%d] | Status brave: [%s]\n \n", garageInfo[id][garageLevel], status);
				strcat(DialogStrgEx, string);
				strcat(DialogStrgEx, "__________________________________________________________________");
				SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			}
			case 1: {
				if(GetNearestGarage(playerid) != PlayerInfo[playerid][xGarageID]) return SendErrorMessage(playerid, "Morate biti pored ulaza svoje garaze.");
				SPD(playerid, dialog_GARAGELOCK, DSMSG, D_NASLOV, "Odaberite opciju:", "Otkljucaj", "Zakljucaj");
			}
			case 2: {
				new id = PlayerInfo[playerid][xGarageID];
				if(GetNearestGarage(playerid) != id) return SendErrorMessage(playerid, "Niste pored svoje garaze!");
				if(strcmp(ImeIgraca(playerid), garageInfo[GetNearestGarage(playerid)][garageOwner], true) == 0) {
					SPD(playerid, dialog_GARAGESELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vasu garazu drzavi?", "Da", "Ne");

				} else return SendErrorMessage(playerid, "Ovo nije vase..");
			}
			case 3: {
				new id = PlayerInfo[playerid][xGarageID];
				if(GetNearestGarage(playerid) != id) return SendErrorMessage(playerid, "Niste pored svoje garaze!");
				SPD(playerid, dialog_GARAGESELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu garaze", "Ponudi", D_ODUSTANI);
			}
		}
	}
}
else if(dialogid == dialog_GARAGESELLDRZAVA) {
	if(response) {
		if(PlayerInfo[playerid][xBRacun] < 0) return SendErrorMessage(playerid, "Ne mozes da prodas garazu dok ne izadjes iz minusa u banci.");
		new id = PlayerInfo[playerid][xGarageID];
		if(GetNearestGarage(playerid) != id) return SendErrorMessage(playerid, "Niste pored svoje garaze!");
		if(strcmp(ImeIgraca(playerid), garageInfo[GetNearestGarage(playerid)][garageOwner], true) == 0) {

			PlayerInfo[playerid][xGarageID] = -1;

			new string1[128];
			format(string1, sizeof(string1), "Igrac %s je prodao garazu ID %d na buy", ImeIgraca(playerid), id);
			LogSave("Ostalo/LogProdajaImovine.log", string1);

			strmid(garageInfo[GetNearestGarage(playerid)][garageOwner], "Drzava", 0, strlen("Drzava"), 32);
			DajIgracuNovac(playerid, (garageInfo[GetNearestGarage(playerid)][garagePrice]/2));
			garageInfo[GetNearestGarage(playerid)][garageOwned] = false; PlayerPlaySound(playerid, 1058, 0, 0, 0);
			SavePlayer(playerid); Garage_Refresh(GetNearestGarage(playerid)); Garage_Save(GetNearestGarage(playerid));

		} else return SendErrorMessage(playerid, "Ovo nije vase..");
	}
	if(!response) {
		SCM(playerid, -1, "Odustali ste od prodaje garaze drzavi");
	}
}
else if(dialogid == dialog_GARAGESELLTP) {
	if(!response) return 1;
	if(response) {
		if(PlayerInfo[playerid][xBRacun] < 0) return SendErrorMessage(playerid, "Ne mozes da prodas garazu dok ne izadjes iz minusa u banci.");
		new id = PlayerInfo[playerid][xGarageID];
		new idigraca, cena, string[128], Float:Pos[3];
		if(sscanf(inputtext, "ui", idigraca, cena)) return SPD(playerid, dialog_GARAGESELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu garaze", "Ponudi", D_ODUSTANI);
		GetPlayerPos(idigraca, Pos[0], Pos[1], Pos[2]);
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, Pos[0], Pos[1], Pos[2])) return SendErrorMessage(playerid, "Igrac nije blizu vas");
		if(cena < 1) return SendErrorMessage(playerid, "Cena ne moze biti manja od 1$!");
		if(idigraca == IPI) return SendErrorMessage(playerid, "Pogresan ID.");
		if(idigraca == playerid) return SendErrorMessage(playerid, "Ne mozes sam sebi prodati garazu!");
		if(PlayerInfo[idigraca][xGarageID] != -1)return SendErrorMessage(playerid, "Igrac vec ima garazu!");
		if(PlayerInfo[idigraca][xLevel] < garageInfo[id][garageLevel]) return SendClientMessageEx(playerid, CRVENA, "Da bi ste tom igracu prodali ovu garazu, on mora biti level %d+.", garageInfo[id][garageLevel]);
		SendClientMessageEx(playerid, SVETLOPLAVA, "Ponudili ste igracu %s garazu po ceni od %d.", ImeIgraca(idigraca), cena);
		GlobalProdaja[idigraca] = playerid;
		GlobalCena[idigraca] = cena;
		GlobalID[idigraca] = id;
		format(string, sizeof(string), "Igrac %s vam je ponudio da kupite njegovu garazu za %d", ImeIgraca(playerid), cena);
		SPD(idigraca, dialog_ACCEPTGARAGE, DSMSG, D_NASLOV, string, "Prihvati", "Odbij");
	}
}
else if(dialogid == dialog_ACCEPTGARAGE) {
	if(response) {
		new id = GlobalID[playerid];
		if(PlayerInfo[playerid][xNovac] < GlobalCena[playerid]) return SendErrorMessage(playerid, "Nemate dovoljno novca.");

		PlayerInfo[GlobalProdaja[playerid]][xGarageID] = -1;

		PlayerInfo[playerid][xGarageID] = id;

		new string1[128];
		format(string1, sizeof(string1), "Igrac %s je prodao garazu ID %d igracu %s za %d", ImeIgraca(GlobalProdaja[playerid]), id, ImeIgraca(playerid), GlobalCena[playerid]);
		LogSave("Ostalo/LogProdajaImovine.log", string1);

		SendClientMessageEx(playerid, SVETLOPLAVA, "Uspesno ste kupili garazu od igraca %s za $d.", ImeIgraca(GlobalProdaja[playerid]), GlobalCena[playerid]);
		strmid(garageInfo[id][garageOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 255);
		Garage_Save(id); Garage_Refresh(id);
		SavePlayer(playerid); SavePlayer(GlobalProdaja[playerid]);
		format(varstring, sizeof(varstring), "Prodali ste garazu igracu %s za %d!", ImeIgraca(playerid), GlobalCena[playerid]);
		SCM(GlobalProdaja[playerid], -1, varstring);
		DajIgracuNovac(GlobalProdaja[playerid], GlobalCena[playerid]);
		DajIgracuNovac(playerid, -GlobalCena[playerid]);
		GlobalProdaja[playerid] = -1;
		GlobalCena[playerid] = -1;
		GlobalID[playerid] = -1;
	}
	else if(!response) {
		format(varstring, sizeof(varstring),"Igrac %s je odbio vasu ponudu za kupovinu garaze!", ImeIgraca(playerid));
		SCM(GlobalProdaja[playerid], -1, varstring);
		SCM(playerid, -1, "Odbili ste ponudu!");
		GlobalProdaja[playerid] = -1;
		GlobalCena[playerid] = -1;
		GlobalID[playerid] = -1;
	}
}
else if(dialogid == dialog_GARAGELOCK) {
	new id = PlayerInfo[playerid][xGarageID];
	if(GetNearestGarage(playerid) != PlayerInfo[playerid][xGarageID]) return SendErrorMessage(playerid, "Morate biti pored ulaza svoje garaze.");
	if(response) {
		if(garageInfo[id][garageLocked] == false) return SendErrorMessage(playerid, "Garaza je vec otkljucana.");
		garageInfo[id][garageLocked] = false;
		Garage_Save(id);
		SendInfoMessage(playerid, "Otkljucao si svoju garazu.");
	}
	else if(!response) {
		if(garageInfo[id][garageLocked] == true) return SendErrorMessage(playerid, "Garaza je vec zakljucana.");
		garageInfo[id][garageLocked] = true;
		Garage_Save(id);
		SendInfoMessage(playerid, "Zakljucao si svoju garazu.");
	}
}
else if(dialogid == dialog_IMANJE) {
	if(!response) return true;
	if(response) {
		switch(listitem) {
			case 0: {
				new string[128], id = PlayerInfo[playerid][xFieldID];
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
				strcat(DialogStrgEx, "__________________________________________________________________\n \n");
				strcat(DialogStrgEx, "Imanje - Informacije\n \n");
				format(string, sizeof(string), "Vlasnik imanja: [%s] | Cena imanja: [%d$]\n", fieldInfo[id][fieldOwner], fieldInfo[id][fieldPrice]);
				strcat(DialogStrgEx, string);
				format(string, sizeof(string), "Level imanja: [%d] | Zasadjeno biljaka: [%d]\n \n", fieldInfo[id][fieldLevel], fieldInfo[id][fieldStalkNumber]);
				strcat(DialogStrgEx, string);
				strcat(DialogStrgEx, "__________________________________________________________________");
				SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			}
			case 1: {
				new id = PlayerInfo[playerid][xFieldID];
				if(GetNearestField(playerid) != id) return SendErrorMessage(playerid, "Niste pored svog imanja!");
				if(strcmp(ImeIgraca(playerid), fieldInfo[GetNearestField(playerid)][fieldOwner], true) == 0) {
					SPD(playerid, dialog_IMANJESELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vase imanje drzavi?", "Da", "Ne");

				} else return SendErrorMessage(playerid, "Ovo nije vase..");
			}
			case 2: {
				new id = PlayerInfo[playerid][xFieldID];
				if(GetNearestField(playerid) != id) return SendErrorMessage(playerid, "Niste pored svog imanja!");
				SPD(playerid, dialog_IMANJESELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu imanja", "Ponudi", D_ODUSTANI);
			}
		}
	}
}
else if(dialogid == dialog_IMANJESELLDRZAVA) {
	if(response) {
		if(PlayerInfo[playerid][xBRacun] < 0) return SendErrorMessage(playerid, "Ne mozes da prodas imanje dok ne izadjes iz minusa u banci.");
		new id = PlayerInfo[playerid][xFieldID];
		if(GetNearestField(playerid) != id) return SendErrorMessage(playerid, "Niste pored svog imanja!");
		if(strcmp(ImeIgraca(playerid), fieldInfo[GetNearestField(playerid)][fieldOwner], true) == 0) {

			PlayerInfo[playerid][xFieldID] = -1;

			new string1[128];
			format(string1, sizeof(string1), "Igrac %s je prodao imanje ID %d na buy", ImeIgraca(playerid), id);
			LogSave("Ostalo/LogProdajaImovine.log", string1);

			strmid(fieldInfo[GetNearestField(playerid)][fieldOwner], "Drzava", 0, strlen("Drzava"), 32);
			DajIgracuNovac(playerid, (fieldInfo[GetNearestField(playerid)][fieldPrice]/2));
			fieldInfo[GetNearestField(playerid)][fieldOwned] = false; PlayerPlaySound(playerid, 1058, 0, 0, 0);
			SavePlayer(playerid); Field_Refresh(GetNearestField(playerid)); Field_Save(GetNearestField(playerid));

		} else return SendErrorMessage(playerid, "Ovo nije vase..");
	}
	if(!response) {
		SCM(playerid, -1, "Odustali ste od prodaje imanja drzavi");
	}
}
else if(dialogid == dialog_IMANJESELLTP) {
	if(!response) return 1;
	if(response) {
		if(PlayerInfo[playerid][xBRacun] < 0) return SendErrorMessage(playerid, "Ne mozes da prodas imanje dok ne izadjes iz minusa u banci.");
		new id = PlayerInfo[playerid][xFieldID];
		new idigraca, cena, string[128], Float:Pos[3];
		if(sscanf(inputtext, "ui", idigraca, cena)) return SPD(playerid, dialog_IMANJESELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu imanja", "Ponudi", D_ODUSTANI);
		GetPlayerPos(idigraca, Pos[0], Pos[1], Pos[2]);
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, Pos[0], Pos[1], Pos[2])) return SendErrorMessage(playerid, "Igrac nije blizu vas");
		if(cena < 1) return SendErrorMessage(playerid, "Cena ne moze biti manja od 1$!");
		if(idigraca == IPI) return SendErrorMessage(playerid, "Pogresan ID.");
		if(idigraca == playerid) return SendErrorMessage(playerid, "Ne mozes sam sebi prodati imanje!");
		if(PlayerInfo[idigraca][xFieldID] != -1)return SendErrorMessage(playerid, "Igrac vec ima imanje!");
		if(PlayerInfo[idigraca][xLevel] < fieldInfo[id][fieldLevel]) return SendClientMessageEx(playerid, CRVENA, "Da bi ste tom igracu prodali ovu imanje, on mora biti level %d+.", fieldInfo[id][fieldLevel]);
		SendClientMessageEx(playerid, SVETLOPLAVA, "Ponudili ste igracu %s imovinu po ceni od %d.", ImeIgraca(idigraca), cena);
		GlobalProdaja[idigraca] = playerid;
		GlobalCena[idigraca] = cena;
		GlobalID[idigraca] = id;
		format(string, sizeof(string), "Igrac %s vam je ponudio da kupite njegovo imanje za %d", ImeIgraca(playerid), cena);
		SPD(idigraca, dialog_ACCEPTIMANJE, DSMSG, D_NASLOV, string, "Prihvati", "Odbij");
	}
}
else if(dialogid == dialog_ACCEPTIMANJE) {
	if(response) {
		new id = GlobalID[playerid];
		if(PlayerInfo[playerid][xNovac] < GlobalCena[playerid]) return SendErrorMessage(playerid, "Nemate dovoljno novca.");

		PlayerInfo[GlobalProdaja[playerid]][xFieldID] = -1;

		PlayerInfo[playerid][xFieldID] = id;

		new string1[128];
		format(string1, sizeof(string1), "Igrac %s je prodao imanje ID %d igracu %s za %d", ImeIgraca(GlobalProdaja[playerid]), id, ImeIgraca(playerid), GlobalCena[playerid]);
		LogSave("Ostalo/LogProdajaImovine.log", string1);

		SendClientMessageEx(playerid, SVETLOPLAVA, "Uspesno ste kupili imanje od igraca %s za $d.", ImeIgraca(GlobalProdaja[playerid]), GlobalCena[playerid]);
		strmid(fieldInfo[id][fieldOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 255);
		Field_Save(id); Field_Refresh(id);
		SavePlayer(playerid); SavePlayer(GlobalProdaja[playerid]);
		format(varstring, sizeof(varstring), "Prodali ste imanje igracu %s za %d!", ImeIgraca(playerid), GlobalCena[playerid]);
		SCM(GlobalProdaja[playerid], -1, varstring);
		DajIgracuNovac(GlobalProdaja[playerid], GlobalCena[playerid]);
		DajIgracuNovac(playerid, -GlobalCena[playerid]);
		GlobalProdaja[playerid] = -1;
		GlobalCena[playerid] = -1;
		GlobalID[playerid] = -1;
	}
	else if(!response) {
		format(varstring, sizeof(varstring),"Igrac %s je odbio vasu ponudu za kupovinu imanja!", ImeIgraca(playerid));
		SCM(GlobalProdaja[playerid], -1, varstring);
		SCM(playerid, -1, "Odbili ste ponudu!");
		GlobalProdaja[playerid] = -1;
		GlobalCena[playerid] = -1;
		GlobalID[playerid] = -1;
	}
}
else if(dialogid == dialog_CREATEFIELD) {
	if(!response) return true;
	if(response) {
		new id = CreatingField[playerid], level, cena;
		if(sscanf(inputtext, "ii", level, cena)) return SPD(playerid, dialog_CREATEFIELD, DSI, D_NASLOV, "Unesite u prazno polje level i cenu imanja.\nPrimer: 4 12323", D_ODABERI, D_NAZAD);
		if(level < 1 || cena < 1000) return SPD(playerid, dialog_CREATEFIELD, DSI, D_NASLOV, "Unesite u prazno polje level i cenu imanja.\nPrimer: 4 12323", D_ODABERI, D_NAZAD);

		fieldInfo[id][fieldPrice] = cena;
		fieldInfo[id][fieldLevel] = level;
		Field_Save(id);
		Field_Refresh(id);
		SendInfoMessage(playerid, "Postavio si cenu na "col_white"%d%"col_server", i level na "col_white"%d.", cena, level);
		CreatingField[playerid] = -1;
	}
}
else if(dialogid == dialog_INVENTORY) {
	if(!response) return true;
	if(response) {
		new
			itemid = ChosenItem[playerid];

		switch(listitem) {
			case 0: {
				if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes dok si u vozilu.");
				CallLocalFunction("OnPlayerUseItem", "dds", playerid, itemid, inventoryInfo[playerid][itemid][invItem]);
			}
			case 1: {
				ChosenItem[playerid] = itemid;
				if(IsInventoryWeapon(inventoryInfo[playerid][itemid][invItem])) return SendErrorMessage(playerid, "Oruzje mozes davati samo komandom /daj.");
				SPD(playerid, dialog_GIVEITEM, DSI, "Daj predmet", "Unesite ime ili id igraca:", "Ok", "Izadji");
			}
			case 2: {
				if(GetNearestContainer(playerid) != -1) {

					Inventory_Remove(playerid, inventoryInfo[playerid][itemid][invItem]);
					format(varstring, sizeof(varstring), "** %s baca \"%s\" u kontejner.", ImeIgraca(playerid), inventoryInfo[playerid][itemid][invItem]);
					PorukaRadius(30.0 , playerid, varstring, LJUBICASTA);
				}
				else return SendErrorMessage(playerid, "Nisi pored kontejnera.");
			}
		}
	}
}
else if(dialogid == dialog_GIVEITEM) {
	if(!response) return true;
	if(response) {
		static
			userid = -1,
			itemid = -1;

		if(sscanf(inputtext, "u", userid))
			return SPD(playerid, dialog_GIVEITEM, DSI, "Daj predmet", "Unesite ime ili id igraca:", "Ok", "Izadji");

		if(userid == INVALID_PLAYER_ID)
			return SPD(playerid, dialog_GIVEITEM, DSI, "Daj predmet", "Greska: Nepostojeci igrac.\n\nUnesite ime ili id igraca:", "Ok", "Izadji");

		if(!IsPlayerNearPlayer(6.0, playerid, userid))
			return SPD(playerid, dialog_GIVEITEM, DSI, "Daj predmet", "Greska: Niste u blizini tog igraca.\n\nUnesite ime ili id igraca:", "Ok", "Izadji");

		if(userid == playerid)
			return SPD(playerid, dialog_GIVEITEM, DSI, "Daj predmet", "Greska: Nemozete dati predmet samome sebi.\n\nUnesite ime ili id igraca:", "Ok", "Izadji");

		itemid = ChosenItem[playerid];

		if(itemid == -1)
			return false;


		if(inventoryInfo[playerid][itemid][invQuantity] == 1) {

			new id = Inventory_Add(userid, inventoryInfo[playerid][itemid][invItem], inventoryInfo[playerid][itemid][invModel]);

			if(id == -1)
				return SendErrorMessage(playerid, "Taj igrac nema vise mesta za stvari.");

			if(IsInventoryWeapon(inventoryInfo[playerid][itemid][invItem])) {
				OruzjeUInventoriju[userid]++;
				OruzjeUInventoriju[playerid]--;
			}

			SendInfoMessage(playerid, "Dao si \"%s\" igracu %s.", inventoryInfo[playerid][itemid][invItem], ImeIgraca(userid));
			SendInfoMessage(userid, "%s vam je dao \"%s\" (dodano u inventory).", ImeIgraca(playerid), inventoryInfo[playerid][itemid][invItem]);

			Inventory_Remove(playerid, inventoryInfo[playerid][itemid][invItem]);
		}
		else {
			new stringic[180];
			format(stringic, sizeof(stringic), "Predmet: %s (Kolicina: %d)\n\nUnesite kolicinu koju zelite dati %s:", inventoryInfo[playerid][itemid][invItem], inventoryInfo[playerid][itemid][invQuantity], ImeIgraca(userid));
			SPD(playerid, dialog_GIVEQUANTITY, DSI, "Daj predmet", stringic, "Daj", "Izadji");
			GiveItemID[playerid] = userid;
		}
	}
}
else if(dialogid == dialog_GIVEQUANTITY) {
	if(!response) return true;
	if(response) {
		if(GiveItemID[playerid] != INVALID_PLAYER_ID) {
			new
				userid = GiveItemID[playerid],
				itemid = ChosenItem[playerid];

			if(isnull(inputtext)) {
				new stringic[180];
				format(stringic, sizeof(stringic), "Predmet: %s (Kolicina: %d)\n\nUnesite kolicinu koju zelite dati %s:", inventoryInfo[playerid][itemid][invItem], inventoryInfo[playerid][itemid][invQuantity], ImeIgraca(userid));
				SPD(playerid, dialog_GIVEQUANTITY, DSI, "Daj predmet", stringic, "Daj", "Izadji");
				return 1;
			}

			if(strval(inputtext) < 1 || strval(inputtext) > inventoryInfo[playerid][itemid][invQuantity]) {
				new stringic[180];
				format(stringic, sizeof(stringic), "Predmet: %s (Kolicina: %d)\n\nUnesite kolicinu koju zelite dati %s:", inventoryInfo[playerid][itemid][invItem], inventoryInfo[playerid][itemid][invQuantity], ImeIgraca(userid));
				SPD(playerid, dialog_GIVEQUANTITY, DSI, "Daj predmet", stringic, "Daj", "Izadji");
				return 1;
			}

			new id = Inventory_Add(userid, inventoryInfo[playerid][itemid][invItem], inventoryInfo[playerid][itemid][invModel], strval(inputtext));

			if(id == -1)
				return SendErrorMessage(playerid, "Taj igrac nema vise mesta za stvari.");

			SendInfoMessage(playerid, "Dao si \"%s\" igracu %s.", inventoryInfo[playerid][itemid][invItem], ImeIgraca(userid));
			SendInfoMessage(userid, "%s vam je dao \"%s\" (dodano u inventory).", ImeIgraca(playerid), inventoryInfo[playerid][itemid][invItem]);

			Inventory_Remove(playerid, inventoryInfo[playerid][itemid][invItem], strval(inputtext));
		}
	}
}


else if(dialogid == dialog_TUNING) {
		if(response) {
			if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu.");
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti na mestu vozaca.");
			new vehicleid = GetPlayerVehicleID(playerid), Float:Pos[6];

			TPInfo[playerid][tID] = -1;

			switch(listitem) {
				case 0: {

					for(new i = 0; i < NUMBER_TYPE_PAINTJOB; i++) {
						if(pjInfo[i][vehID] == GetVehicleModel(vehicleid)) {
							TPInfo[playerid][tID] = i;
							break;
						}
					}
					if(TPInfo[playerid][tID] == -1) return SendErrorMessage(playerid, "Nema kompatibilnih boja za vas model auta.");

					new pid = TPInfo[playerid][tID];
					TPInfo[playerid][tPaintjob] = true;

					GetVehicleColor(vehicleid, TPInfo[playerid][PJColor][0], TPInfo[playerid][PJColor][1]);

					TogglePlayerControllable(playerid, false);
					TuningTDShow(playerid, true);

					ChangeVehicleColor(vehicleid, 1, 1);
					ChangeVehiclePaintjob(vehicleid, pjInfo[pid][pNumber]);

					PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "Paintjobs");
					format(varstring, sizeof(varstring), "%s", pjInfo[pid][pNameBre]);
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][3], varstring);
					format(varstring, sizeof(varstring), "%s", GetVehicleNameEx(GetVehicleModel(vehicleid)));
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][4], varstring);

					GetVehicleCameraPos(vehicleid, Pos[0], Pos[1], Pos[2], 4, 0, 5);
					SetPlayerCameraPos(playerid, Pos[0], Pos[1], Pos[2]);

					GetVehiclePos(vehicleid, Pos[0],Pos[1],Pos[2]);
					SetPlayerCameraLookAt(playerid, Pos[0],Pos[1],Pos[2]);

					SelectTextDraw(playerid, FUSIONGAMING);
				}
				case 1: {
					SPD(playerid, dialog_TUNING_2, DSI, D_NASLOV, "Unesi id boje 1 i id boje 2 boje koje zelis za svoje auto.\nFormat:0 1", D_ODABERI, D_ODUSTANI);
				}
				case 2: {

					for(new i = 0; i < MAX_COMPONENTS; i++) {
						if(cInfo[i][cType] == CARMODTYPE_EXHAUST) {
							if(cInfo[i][cID] == IsComponentidCompatible(GetVehicleModel(vehicleid), cInfo[i][cID])) {
								TPInfo[playerid][tID] = i;
								break;
							}
						}
					}
					if(TPInfo[playerid][tID] == -1) return SendErrorMessage(playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta.");

					new cid = TPInfo[playerid][tID];
					TPInfo[playerid][tType] = CARMODTYPE_EXHAUST;
					TPInfo[playerid][tPaintjob] = false;

					TogglePlayerControllable(playerid, false);
					TuningTDShow(playerid, true);

					PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "Exhausts");
					format(varstring, sizeof(varstring), "%s", cInfo[cid][cName]);
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][3], varstring);
					format(varstring, sizeof(varstring), "%s", GetVehicleNameEx(GetVehicleModel(vehicleid)));
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][4], varstring);

					AddVehicleComponent(vehicleid, cInfo[cid][cID]);

					GetVehicleCameraPos(vehicleid, Pos[0], Pos[1], Pos[2], -2, -5, 0);
					SetPlayerCameraPos(playerid, Pos[0], Pos[1], Pos[2]);

					GetVehiclePos(vehicleid, Pos[0],Pos[1],Pos[2]);
					SetPlayerCameraLookAt(playerid, Pos[0],Pos[1],Pos[2]);

					SelectTextDraw(playerid, FUSIONGAMING);
				}
				case 3: {

					for(new i = 0; i < MAX_COMPONENTS; i++) {
						if(cInfo[i][cType] == CARMODTYPE_FRONT_BUMPER) {
							if(cInfo[i][cID] == IsComponentidCompatible(GetVehicleModel(vehicleid), cInfo[i][cID])) {
								TPInfo[playerid][tID] = i;
								break;
							}
						}
					}
					if(TPInfo[playerid][tID] == -1) return SendErrorMessage(playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta.");

					new cid = TPInfo[playerid][tID];
					TPInfo[playerid][tType] = CARMODTYPE_FRONT_BUMPER;
					TPInfo[playerid][tPaintjob] = false;

					TogglePlayerControllable(playerid, false);
					TuningTDShow(playerid, true);

					PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "Front Bumper");
					format(varstring, sizeof(varstring), "%s", cInfo[cid][cName]);
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][3], varstring);
					format(varstring, sizeof(varstring), "%s", GetVehicleNameEx(GetVehicleModel(vehicleid)));
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][4], varstring);

					AddVehicleComponent(vehicleid, cInfo[cid][cID]);

					GetVehicleCameraPos(vehicleid, Pos[0], Pos[1], Pos[2], 0, 6, 0.5); // done
					SetPlayerCameraPos(playerid, Pos[0], Pos[1], Pos[2]);

					GetVehiclePos(vehicleid, Pos[0],Pos[1],Pos[2]);
					SetPlayerCameraLookAt(playerid, Pos[0],Pos[1],Pos[2]);

					SelectTextDraw(playerid, FUSIONGAMING);
				}
				case 4: {

					for(new i = 0; i < MAX_COMPONENTS; i++) {
						if(cInfo[i][cType] == CARMODTYPE_REAR_BUMPER) {
							if(cInfo[i][cID] == IsComponentidCompatible(GetVehicleModel(vehicleid), cInfo[i][cID])) {
								TPInfo[playerid][tID] = i;
								break;
							}
						}
					}
					if(TPInfo[playerid][tID] == -1) return SendErrorMessage(playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta.");

					new cid = TPInfo[playerid][tID];
					TPInfo[playerid][tType] = CARMODTYPE_REAR_BUMPER;
					TPInfo[playerid][tPaintjob] = false;

					TogglePlayerControllable(playerid, false);
					TuningTDShow(playerid, true);

					PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "Rear Bumper");
					format(varstring, sizeof(varstring), "%s", cInfo[cid][cName]);
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][3], varstring);
					format(varstring, sizeof(varstring), "%s", GetVehicleNameEx(GetVehicleModel(vehicleid)));
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][4], varstring);

					AddVehicleComponent(vehicleid, cInfo[cid][cID]);

					GetVehicleCameraPos(vehicleid, Pos[0], Pos[1], Pos[2], 0, -6, 0.5); // done
					SetPlayerCameraPos(playerid, Pos[0], Pos[1], Pos[2]);

					GetVehiclePos(vehicleid, Pos[0],Pos[1],Pos[2]);
					SetPlayerCameraLookAt(playerid, Pos[0],Pos[1],Pos[2]);

					SelectTextDraw(playerid, FUSIONGAMING);
				}
				case 5: {

					for(new i = 0; i < MAX_COMPONENTS; i++) {
						if(cInfo[i][cType] == CARMODTYPE_ROOF) {
							if(cInfo[i][cID] == IsComponentidCompatible(GetVehicleModel(vehicleid), cInfo[i][cID])) {
								TPInfo[playerid][tID] = i;
								break;
							}
						}
					}
					if(TPInfo[playerid][tID] == -1) return SendErrorMessage(playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta.");

					new cid = TPInfo[playerid][tID];
					TPInfo[playerid][tType] = CARMODTYPE_ROOF;
					TPInfo[playerid][tPaintjob] = false;

					TogglePlayerControllable(playerid, false);
					TuningTDShow(playerid, true);

					PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "Roof");
					format(varstring, sizeof(varstring), "%s", cInfo[cid][cName]);
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][3], varstring);
					format(varstring, sizeof(varstring), "%s", GetVehicleNameEx(GetVehicleModel(vehicleid)));
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][4], varstring);

					AddVehicleComponent(vehicleid, cInfo[cid][cID]);

					GetVehicleCameraPos(vehicleid, Pos[0], Pos[1], Pos[2], 0, 6, 2); // done
					SetPlayerCameraPos(playerid, Pos[0], Pos[1], Pos[2]);

					GetVehiclePos(vehicleid, Pos[0],Pos[1],Pos[2]);
					SetPlayerCameraLookAt(playerid, Pos[0],Pos[1],Pos[2]);

					SelectTextDraw(playerid, FUSIONGAMING);
				}
				case 6: {

					for(new i = 0; i < MAX_COMPONENTS; i++) {
						if(cInfo[i][cType] == CARMODTYPE_SPOILER) {
							if(cInfo[i][cID] == IsComponentidCompatible(GetVehicleModel(vehicleid), cInfo[i][cID])) {
								TPInfo[playerid][tID] = i;
								break;
							}
						}
					}
					if(TPInfo[playerid][tID] == -1) return SendErrorMessage(playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta.");

					new cid = TPInfo[playerid][tID];
					TPInfo[playerid][tType] = CARMODTYPE_SPOILER;
					TPInfo[playerid][tPaintjob] = false;

					TogglePlayerControllable(playerid, false);
					TuningTDShow(playerid, true);

					PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "Spoilers");
					format(varstring, sizeof(varstring), "%s", cInfo[cid][cName]);
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][3], varstring);
					format(varstring, sizeof(varstring), "%s", GetVehicleNameEx(GetVehicleModel(vehicleid)));
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][4], varstring);

					AddVehicleComponent(vehicleid, cInfo[cid][cID]);

					GetVehicleCameraPos(vehicleid, Pos[0], Pos[1], Pos[2], 0, -6, 2); // done
					SetPlayerCameraPos(playerid, Pos[0], Pos[1], Pos[2]);

					GetVehiclePos(vehicleid, Pos[0],Pos[1],Pos[2]);
					SetPlayerCameraLookAt(playerid, Pos[0],Pos[1],Pos[2]);

					SelectTextDraw(playerid, FUSIONGAMING);
				}
				case 7: {

					for(new i = 0; i < MAX_COMPONENTS; i++) {
						if(cInfo[i][cType] == CARMODTYPE_SIDESKIRT) {
							if(cInfo[i][cID] == IsComponentidCompatible(GetVehicleModel(vehicleid), cInfo[i][cID])) {
								TPInfo[playerid][tID] = i;
								break;
							}
						}
					}
					if(TPInfo[playerid][tID] == -1) return SendErrorMessage(playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta.");

					new cid = TPInfo[playerid][tID];
					TPInfo[playerid][tType] = CARMODTYPE_SIDESKIRT;
					TPInfo[playerid][tPaintjob] = false;

					TogglePlayerControllable(playerid, false);
					TuningTDShow(playerid, true);

					PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "Side Skirts");
					format(varstring, sizeof(varstring), "%s", cInfo[cid][cName]);
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][3], varstring);
					format(varstring, sizeof(varstring), "%s", GetVehicleNameEx(GetVehicleModel(vehicleid)));
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][4], varstring);

					AddVehicleComponent(vehicleid, cInfo[cid][cID]);

					GetVehicleCameraPos(vehicleid, Pos[0], Pos[1], Pos[2], 4, 0, 0.5);
					SetPlayerCameraPos(playerid, Pos[0], Pos[1], Pos[2]);

					GetVehiclePos(vehicleid, Pos[0],Pos[1],Pos[2]);
					SetPlayerCameraLookAt(playerid, Pos[0],Pos[1],Pos[2]);

					SelectTextDraw(playerid, FUSIONGAMING);
				}
				case 8: {

					for(new i = 0; i < MAX_COMPONENTS; i++) {
						if(cInfo[i][cType] == CARMODTYPE_WHEELS) {
							if(cInfo[i][cID] == IsComponentidCompatible(GetVehicleModel(vehicleid), cInfo[i][cID])) {
								TPInfo[playerid][tID] = i;
								break;
							}
						}
					}
					if(TPInfo[playerid][tID] == -1) return SendErrorMessage(playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta.");

					new cid = TPInfo[playerid][tID];
					TPInfo[playerid][tType] = CARMODTYPE_WHEELS;
					TPInfo[playerid][tPaintjob] = false;

					TogglePlayerControllable(playerid, false);
					TuningTDShow(playerid, true);

					PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "Wheels");
					format(varstring, sizeof(varstring), "%s", cInfo[cid][cName]);
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][3], varstring);
					format(varstring, sizeof(varstring), "%s", GetVehicleNameEx(GetVehicleModel(vehicleid)));
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][4], varstring);

					AddVehicleComponent(vehicleid, cInfo[cid][cID]);

					GetVehicleCameraPos(vehicleid, Pos[0], Pos[1], Pos[2], 4, 0, 0.5); // done
					SetPlayerCameraPos(playerid, Pos[0], Pos[1], Pos[2]);

					GetVehiclePos(vehicleid, Pos[0],Pos[1],Pos[2]);
					SetPlayerCameraLookAt(playerid, Pos[0],Pos[1],Pos[2]);

					SelectTextDraw(playerid, FUSIONGAMING);
				}
				case 9: {

					for(new i = 0; i < MAX_COMPONENTS; i++) {
						if(cInfo[i][cType] == CARMODTYPE_STEREO) {
							if(cInfo[i][cID] == IsComponentidCompatible(GetVehicleModel(vehicleid), cInfo[i][cID])) {
								TPInfo[playerid][tID] = i;
								break;
							}
						}
					}
					if(TPInfo[playerid][tID] == -1) return SendErrorMessage(playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta.");

					new cid = TPInfo[playerid][tID];
					TPInfo[playerid][tType] = CARMODTYPE_STEREO;
					TPInfo[playerid][tPaintjob] = false;

					TogglePlayerControllable(playerid, false);
					TuningTDShow(playerid, true);

					PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "Car Stereo");
					format(varstring, sizeof(varstring), "%s", cInfo[cid][cName]);
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][3], varstring);
					format(varstring, sizeof(varstring), "%s", GetVehicleNameEx(GetVehicleModel(vehicleid)));
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][4], varstring);

					AddVehicleComponent(vehicleid, cInfo[cid][cID]);

					GetVehicleCameraPos(vehicleid, Pos[0], Pos[1], Pos[2], 0, -6, 2);
					SetPlayerCameraPos(playerid, Pos[0], Pos[1], Pos[2]);

					GetVehiclePos(vehicleid, Pos[0],Pos[1],Pos[2]);
					SetPlayerCameraLookAt(playerid, Pos[0],Pos[1],Pos[2]);

					SelectTextDraw(playerid, FUSIONGAMING);
				}
				case 10: {

					for(new i = 0; i < MAX_COMPONENTS; i++) {
						if(cInfo[i][cType] == CARMODTYPE_HYDRAULICS) {
							if(cInfo[i][cID] == IsComponentidCompatible(GetVehicleModel(vehicleid), cInfo[i][cID])) {
								TPInfo[playerid][tID] = i;
								break;
							}
						}
					}
					if(TPInfo[playerid][tID] == -1) return SendErrorMessage(playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta.");

					new cid = TPInfo[playerid][tID];
					TPInfo[playerid][tType] = CARMODTYPE_HYDRAULICS;
					TPInfo[playerid][tPaintjob] = false;

					TogglePlayerControllable(playerid, false);
					TuningTDShow(playerid, true);

					PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "Hydraulics");
					format(varstring, sizeof(varstring), "%s", cInfo[cid][cName]);
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][3], varstring);
					format(varstring, sizeof(varstring), "%s", GetVehicleNameEx(GetVehicleModel(vehicleid)));
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][4], varstring);

					AddVehicleComponent(vehicleid, cInfo[cid][cID]);

					GetVehicleCameraPos(vehicleid, Pos[0], Pos[1], Pos[2], 2, 2, 2);
					SetPlayerCameraPos(playerid, Pos[0], Pos[1], Pos[2]);

					GetVehiclePos(vehicleid, Pos[0],Pos[1],Pos[2]);
					SetPlayerCameraLookAt(playerid, Pos[0],Pos[1],Pos[2]);

					SelectTextDraw(playerid, FUSIONGAMING);
				}
				case 11: {

					for(new i = 0; i < MAX_COMPONENTS; i++) {
						if(cInfo[i][cType] == CARMODTYPE_NITRO) {
							if(cInfo[i][cID] == IsComponentidCompatible(GetVehicleModel(vehicleid), cInfo[i][cID])) {
								TPInfo[playerid][tID] = i;
								break;
							}
						}
					}
					if(TPInfo[playerid][tID] == -1) return SendErrorMessage(playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta.");

					new cid = TPInfo[playerid][tID];
					TPInfo[playerid][tType] = CARMODTYPE_NITRO;
					TPInfo[playerid][tPaintjob] = false;

					TogglePlayerControllable(playerid, false);
					TuningTDShow(playerid, true);

					PlayerTextDrawSetString(playerid, TuningBuy[playerid][1], "Nitro");
					format(varstring, sizeof(varstring), "%s", cInfo[cid][cName]);
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][3], varstring);
					format(varstring, sizeof(varstring), "%s", GetVehicleNameEx(GetVehicleModel(vehicleid)));
					PlayerTextDrawSetString(playerid, TuningBuy[playerid][4], varstring);

					AddVehicleComponent(vehicleid, cInfo[cid][cID]);

					GetVehicleCameraPos(vehicleid, Pos[0], Pos[1], Pos[2], 0, -6, 2); // done
					SetPlayerCameraPos(playerid, Pos[0], Pos[1], Pos[2]);

					GetVehiclePos(vehicleid, Pos[0],Pos[1],Pos[2]);
					SetPlayerCameraLookAt(playerid, Pos[0],Pos[1],Pos[2]);

					SelectTextDraw(playerid, FUSIONGAMING);
				}
			}
		}
		else if(!response) {
			SetCameraBehindPlayer(playerid);
			TuningTDControl(playerid, false);
			PlayerTuningCar[playerid] = false;
		}
}
else if(dialogid == dialog_TUNING_2) {
		if(!response) return 1;
		if(response) {
			if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu.");
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti na mestu vozaca.");
			new vehicleid = GetPlayerVehicleID(playerid);
			new b1, b2;
			if(sscanf(inputtext, "ii", b1, b2)) return SPD(playerid, dialog_TUNING_2, DSI, D_NASLOV, "Unesi id boje 1 i id boje 2 boje koje zelis za svoje auto.\nFormat:0 1", D_ODABERI, D_ODUSTANI);
			if(b1 < 0 || b2 < 0 || b1 > 255 || b2 > 255) return SendErrorMessage(playerid, "ID boje ne moze biti manji od 0 ili veci od 255!");

			ChangeVehicleColor(vehicleid, b1, b2);

			SPD(playerid, dialog_TUNING, DSL, D_NASLOV, "Paintjobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nWheels\nCar Stereo\nHydraulics\nNitro", D_ODABERI, D_ODUSTANI);
		}
}
else if(dialogid == dialog_BIRAJLOKACIJU) {
	if(!response) return true;
	if(response) {
		switch(listitem) {
			case 0: {
				Fusion_SetPlayerCheckpoint(playerid, -569.0004, -93.3358, 63.9587, 5.0);
				CheckpointStatus[playerid] = 15;
				SendJobMessage(playerid, "Oznacena vam je lokacija utovara drveca.");
			}
			case 1: {
				Fusion_SetPlayerCheckpoint(playerid, 620.8951, 832.1742, -42.9609, 5.0);
				CheckpointStatus[playerid] = 15;
				SendJobMessage(playerid, "Oznacena vam je lokacija utovara sljunka.");
			}
		}
	}
}
else if(dialogid == dialog_VERifIKACIJA) {
	if(!response) return true;
	if(response) {
		if(PlayerCode[playerid] == strval(inputtext) && !isnull(inputtext)) {
			SendInfoMessage(playerid, "Vas account je verifikovan, sada mozete pokrenuti posao.");
			AccountVerified[playerid] = true;
		}
		else return SendErrorMessage(playerid, "Uneli ste pogresan kod.");
	}
}
else if(dialogid == dialog_CCTV) {
	if(!response) return true;
	if(response) {
		switch(listitem) {
			case 0: {
				SetPlayerPos(playerid, 1492.2963, -1022.7849, -100.0);
				SetPlayerCameraPos(playerid, 1492.2963, -1022.7849, 32.1062);
				SetPlayerCameraLookAt(playerid, 1491.3254, -1023.0229, 31.7661);
				ac_SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			}
			case 1: {
				SetPlayerPos(playerid, 1810.1304, -1234.1027, -100.0);
				SetPlayerCameraPos(playerid, 1810.1304, -1234.1027, 68.2777);
				SetPlayerCameraLookAt(playerid, 1811.1062, -1233.8708, 67.8378);
				ac_SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			}
			case 2: {
				SetPlayerPos(playerid, 1829.7693, -1210.4064, -100.0);
				SetPlayerCameraPos(playerid, 1829.7693, -1210.4064, 70.8133);
				SetPlayerCameraLookAt(playerid, 1829.3317, -1211.3047, 70.3782);
				ac_SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			}
			case 3: {
				SetPlayerPos(playerid, 1829.5350, -1238.6161, -100.0);
				SetPlayerCameraPos(playerid, 1829.5350, -1238.6161, 71.2610);
				SetPlayerCameraLookAt(playerid, 1829.1722, -1237.6848, 70.8008);
				ac_SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			}
			case 4: {
				SetPlayerPos(playerid, 1801.9082, -1212.8043, -100.0);
				SetPlayerCameraPos(playerid, 1801.9082, -1212.8043, 65.8913);
				SetPlayerCameraLookAt(playerid, 1801.2021, -1213.5159, 65.6614);
				ac_SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			}
		}
	}
}
else if(dialogid == dialog_RADIOPLAY) {
	if(!response) return true;
	if(response) {
		switch(listitem) {
			case 0: {
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://radio.bumbumradio.rs:8010");
				SendInfoMessage(playerid, "Pustili ste BUM radio.");
			}
			case 1: {
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://stream.b92.net:7999/radio-b92.mp3.m3u");
				SendInfoMessage(playerid, "Pustili ste B92 radio.");
			}
			case 2: {
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://94.23.38.225:7005");
				SendInfoMessage(playerid, "Pustili ste Antena radio.");
			}
			case 3: {
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://rtvmerak.com:8003");
				SendInfoMessage(playerid, "Pustili ste radio Juzni Vetar.");
			}
			case 4: {
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://176.9.30.66/listen.pls");
				SendInfoMessage(playerid, "Pustili ste Cool Radio.");
			}
			case 5: {
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://naxi128.streaming.rs:9150");
				SendInfoMessage(playerid, "Pustili ste Naxi Radio.");
			}
			case 6: {
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://50.7.70.66:8559");
				SendInfoMessage(playerid, "Pustili ste Pingvin Radio.");
			}
			case 7: {
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://carsija.topstream.net:19406");
				SendInfoMessage(playerid, "Pustili ste Carsija Radio.");
			}
			case 8: {
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://stream.rtvbn.com:8522");
				SendInfoMessage(playerid, "Pustili ste Radio BN.");
			}
			case 9: {
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://195.222.33.217:8026");
				SendInfoMessage(playerid, "Pustili ste Radio M.");
			}
			case 10: {
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://stream2.radio-banovina.hr:9996");
				SendInfoMessage(playerid, "Pustili ste Radio Banovina.");
			}
			case 11: {
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://88.198.53.74:9996");
				SendInfoMessage(playerid, "Pustili ste Radio Super.");
			}
			case 12: {
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://balkan.dj.topstream.net:8070");
				SendInfoMessage(playerid, "Pustili ste radio Balkan DJ.");
			}
			case 13: {
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://myradiostream.com/2/30232.pls");
				SendInfoMessage(playerid, "Pustili ste radio D Plus.");
			}
			case 14: {
				StopAudioStreamForPlayer(playerid);
				SendInfoMessage(playerid, "Ugasili ste radio.");
			}
		}
	}
}
	else if(dialogid == dialog_IZAZOVITRKA) {
	if(!response) return true;
	if(response) {
		if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Ne mozes ako nisi level 3+.");
		if(PlayerCuffed[playerid] >= 1) return SendErrorMessage(playerid, "Ne mozes na izazov dok si cuffovan.");
		if(IgracZavezan[playerid] == true) return SendErrorMessage(playerid, "Ne mozes na izazov dok si vezan.");
		if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti na nogamo da bi otisli na izazov.");
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Morate biti na nogamo da bi otisli na izazov.");
		if(!IsPlayerInRangeOfPoint(playerid, 50, 1466.3201, 1416.2100, -5.0676)) return SendErrorMessage(playerid, "Morate biti u igraonici.");
		if(PlayerInfo[playerid][xWanted] >= 1) return SendErrorMessage(playerid, "Ne mozete na izazov dok imate wanted.");
		if(PlayerInfo[playerid][xZatvor] >= 1) return SendErrorMessage(playerid, "Ne mozete na izazov dok ste u zatvoru / ALKATRAZ.");
		if(PlayerInfo[playerid][xNovac] < UlogTrke[playerid]) return SendErrorMessage(playerid, "Nemate dovoljno novca za ulog.");
		if(NaUtrci[playerid]) return SendErrorMessage(playerid, "Vec si na trci.");

		new igrac = PonudioIgrac[playerid];
		new model = ModelTrke[playerid];
		new ulog = UlogTrke[playerid];
		new virtualworld = playerid;
		if(igrac == IPI) return SendErrorMessage(playerid, "Igrac koji vas je izazvao nije na serveru.");

		if(PljackaNovac[playerid] > 0) return SendErrorMessage(playerid, "Ne mozes da ides na trku dok si u toku pljacke.");
		if(PljackaNovac[igrac] > 0) return SendErrorMessage(playerid, "Ne mozes da ides na trku dok si u toku pljacke.");
		if(PljackaZlato[igrac] > 0) return SendErrorMessage(playerid, "Ne mozes da ides na trku dok si u toku pljacke.");
		if(PljackaZlato[playerid] > 0) return SendErrorMessage(playerid, "Ne mozes da ides na trku dok si u toku pljacke.");

		GetPlayerPos(playerid, PlayerPos[playerid][0], PlayerPos[playerid][1], PlayerPos[playerid][2]);
		PlayerPosInt[playerid] = GetPlayerInterior(playerid);
		PlayerPosVW[playerid] = GetPlayerVirtualWorld(playerid);

		GetPlayerPos(igrac, PlayerPos[igrac][0], PlayerPos[igrac][1], PlayerPos[igrac][2]);
		PlayerPosInt[igrac] = GetPlayerInterior(igrac);
		PlayerPosVW[igrac] = GetPlayerVirtualWorld(igrac);

		TrkaVozilo[igrac] = Fusion_CreateVehicle(-1, -1, -1, -1, -1, model, -1392.8976, -226.2226, 1042.9152, 0, random(128), random(128), 3600);
		ac_SetPlayerPos(igrac, -1392.8976, -226.2226, 1042.9152);
		ac_PutPlayerInVehicle(igrac, TrkaVozilo[igrac], 0);
		SetVehicleVirtualWorld(TrkaVozilo[igrac], virtualworld);
		ac_LinkVehicleToInterior(TrkaVozilo[igrac], 7);
		SetPlayerVirtualWorld(igrac, virtualworld);
		ac_SetPlayerInterior(igrac, 7);
		vCanDrive[TrkaVozilo[igrac]] = 1;
		Fuel[TrkaVozilo[igrac]] = 100;
		ac_PutPlayerInVehicle(igrac, TrkaVozilo[igrac], 0);
		ResetVehicleStatistics(TrkaVozilo[igrac]);
		ac_SetVehicleParamsEx(TrkaVozilo[igrac], 1, 0, 0, 0, 0, 0, 0);
		TogglePlayerControllable(igrac, false);
		Krugovi[igrac] = 0; TrkaCheckpoint[igrac] = 0;
		TrkaIzazov[igrac] = 4;
		NaUtrci[igrac] = true;
		DajIgracuNovac(igrac, -ulog);

		TrkaVozilo[playerid] = Fusion_CreateVehicle(-1, -1, -1, -1, -1, model, -1398.1986, -223.7272, 1042.8796, 0, random(128), random(128), 3600);
		ac_SetPlayerPos(playerid, -1398.1986, -223.7272, 1042.8796);
		ac_PutPlayerInVehicle(playerid, TrkaVozilo[playerid], 0);
		SetVehicleVirtualWorld(TrkaVozilo[playerid], virtualworld);
		ac_LinkVehicleToInterior(TrkaVozilo[playerid], 7);
		SetPlayerVirtualWorld(playerid, virtualworld);
		ac_SetPlayerInterior(playerid, 7);
		vCanDrive[TrkaVozilo[playerid]] = 1;
		Fuel[TrkaVozilo[playerid]] = 100;
		ac_PutPlayerInVehicle(playerid, TrkaVozilo[playerid], 0);
		ResetVehicleStatistics(TrkaVozilo[playerid]);
		ac_SetVehicleParamsEx(TrkaVozilo[playerid], 1, 0, 0, 0, 0, 0, 0);
		TogglePlayerControllable(playerid, false);
		Krugovi[playerid] = 0; TrkaCheckpoint[playerid] = 0;
		TrkaIzazov[playerid] = 4;
		NaUtrci[playerid] = true;
		DajIgracuNovac(playerid, -ulog);

		SendInfoMessage(igrac, "Izazvani %s je prihvatio vas izazov.", ImeIgraca(playerid));
		SendInfoMessage(playerid, "Prihvatili ste izazov od %s.", ImeIgraca(igrac));

		SendInfoMessage(playerid, "Ko prvi zavrsi 10 krugova je pobednik.");
		SendInfoMessage(igrac, "Ko prvi zavrsi 10 krugova je pobednik.");

		IzazivanjeTimer[playerid] = SetTimerEx("TimerIzazov", 1000, true, "d", playerid);
		IzazivanjeTimer[igrac] = SetTimerEx("TimerIzazov", 1000, true, "d", igrac);
	}
	else if(!response) {

		if(PonudioIgrac[playerid] != -1) SendInfoMessage(PonudioIgrac[playerid], "Izazvani %s je odbio vas izazov.", ImeIgraca(playerid));

		SendInfoMessage(playerid, "Odbili ste izazov od %s.", ImeIgraca(PonudioIgrac[playerid]));

		PonudioIgrac[playerid] = -1;
		ModelTrke[playerid] = 0;
	}
}
else if(dialogid == dialog_ORGSAFE) {
	if(!response) return true;
	if(response) {
		switch(listitem) {
			case 0: {
				new OrgID = PlayerInfo[playerid][xClan],
					drug1 = OI[OrgID][oSafeDrugCode][0],
					drug2 = OI[OrgID][oSafeDrugCode][1],
					drug3 = OI[OrgID][oSafeDrugCode][2],
					drug4 = OI[OrgID][oSafeDrugCode][3];

				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

				format(varstring, sizeof(varstring), "Novac: %d$\n", OI[OrgID][oSafeMoney]);
				strcat(DialogStrgEx, varstring);

				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
				format(varstring, sizeof(varstring), "Drug1: %s(%d g) | Drug2: %s(%d g)\n", GetDrugNameByDrugID(drug1), OI[OrgID][oSafeDrug][0], GetDrugNameByDrugID(drug2), OI[OrgID][oSafeDrug][1]);
				strcat(DialogStrgEx, varstring);

				format(varstring, sizeof(varstring), "Drug3: %s(%d g) | Drug4: %s(%d g)\n", GetDrugNameByDrugID(drug3), OI[OrgID][oSafeDrug][2], GetDrugNameByDrugID(drug4), OI[OrgID][oSafeDrug][3]);
				strcat(DialogStrgEx, varstring);

				strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
				SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "");
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			}
			case 1: {
				SPD(playerid, dialog_ORGSAFEPUT, DSMSG, D_NASLOV,  "Izaberi sta zelis da ostavis?", "Novac", "Droga");
			}
			case 2: {
				if(PlayerInfo[playerid][xLider] == 0) return SendErrorMessage(playerid, "Ovo moze samo lider.");
				SPD(playerid, dialog_ORGSAFETAKE, DSMSG, D_NASLOV,  "Izaberi sta zelis da uzmes?", "Novac", "Droga");
			}
			case 3: {
				if(PlayerInfo[playerid][xUzoPaket] != 0) return SendErrorMessage(playerid, "Vec ste uzeli paket, sacekajte jos %d minuta.", PlayerInfo[playerid][xUzoPaket]);
				if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete uzeti paket, imate zabranu - /disarmtime.");
				SPD(playerid, dialog_ORGSAFEWEAPON, DSL, D_NASLOV,
				"Paket 1(Palica, Colt45, Uzi)\n\
				Paket 2(Noz, Colt45, MP5)\n\
				Paket 3(Palica, Deagle, Tec-9)\n",
				D_ODABERI, D_ODUSTANI);

			}
		}
	}
}
else if(dialogid == dialog_ORGSAFEPUT) {
	if(response) {
		SPD(playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI);
	}
	else if(!response) {
		SPD(playerid, dialog_ORGSAFEPDRUG, DSI, D_NASLOV,  "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI);
	}
}
else if(dialogid == dialog_ORGSAFETAKE) {
	if(response) {
		SPD(playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI);
	}
	else if(!response) {

		new drugname1[32], drugname2[32], drugname3[32], drugname4[32], OrgID = PlayerInfo[playerid][xClan];
		if(OI[OrgID][oSafeDrugCode][0] == 0 && OI[OrgID][oSafeDrugCode][1] == 0 && OI[OrgID][oSafeDrugCode][2] == 0 && OI[OrgID][oSafeDrugCode][3] == 0) return SendErrorMessage(playerid, "Svi slotovi droge su prazni!");

		if(OI[OrgID][oSafeDrugCode][0] != 0)
			format(drugname1, sizeof(drugname1), "%s", GetDrugNameByDrugID(OI[OrgID][oSafeDrugCode][0]));
		else
			format(drugname1, sizeof(drugname1), "None");

		if(OI[OrgID][oSafeDrugCode][1] != 0)
			format(drugname2, sizeof(drugname2), "%s", GetDrugNameByDrugID(OI[OrgID][oSafeDrugCode][1]));
		else
			format(drugname2, sizeof(drugname2), "None");

		if(OI[OrgID][oSafeDrugCode][2] != 0)
			format(drugname3, sizeof(drugname3), "%s", GetDrugNameByDrugID(OI[OrgID][oSafeDrugCode][2]));
		else
			format(drugname3, sizeof(drugname3), "None");

		if(OI[OrgID][oSafeDrugCode][3] != 0)
			format(drugname4, sizeof(drugname4), "%s", GetDrugNameByDrugID(OI[OrgID][oSafeDrugCode][3]));
		else
			format(drugname4, sizeof(drugname4), "None");

		new string[256];
		format(string, sizeof(string), "1. %s\n2. %s\n3. %s\n4. %s\nUnesite slot droge u sefu i kolicinu droge za uzimanje.\nPrimer: 1 232", drugname1, drugname2, drugname3, drugname4);
		SPD(playerid, dialog_ORGSAFETDRUG, DSI, D_NASLOV, string, D_ODABERI, D_ODUSTANI);
	}
}
else if(dialogid == dialog_ORGSAFETDRUG) {
	if(!response) return 1;
	if(response) {

		new slot, slot2, kolicina, OrgID = PlayerInfo[playerid][xClan];
		if(sscanf(inputtext, "dd", slot, kolicina)) {

			new drugname1[32], drugname2[32], drugname3[32], drugname4[32];

			if(OI[OrgID][oSafeDrugCode][0] != 0)
				format(drugname1, sizeof(drugname1), "%s", GetDrugNameByDrugID(OI[OrgID][oSafeDrugCode][0]));
			else
				format(drugname1, sizeof(drugname1), "None");

			if(OI[OrgID][oSafeDrugCode][1] != 0)
				format(drugname2, sizeof(drugname2), "%s", GetDrugNameByDrugID(OI[OrgID][oSafeDrugCode][1]));
			else
				format(drugname2, sizeof(drugname2), "None");

			if(OI[OrgID][oSafeDrugCode][2] != 0)
				format(drugname3, sizeof(drugname3), "%s", GetDrugNameByDrugID(OI[OrgID][oSafeDrugCode][2]));
			else
				format(drugname3, sizeof(drugname3), "None");

			if(OI[OrgID][oSafeDrugCode][3] != 0)
				format(drugname4, sizeof(drugname4), "%s", GetDrugNameByDrugID(OI[OrgID][oSafeDrugCode][3]));
			else
				format(drugname4, sizeof(drugname4), "None");

			new string[256];
			format(string, sizeof(string), "1. %s\n2. %s\n3. %s\n4. %s\nUnesite slot droge u sefu i kolicinu droge za uzimanje.\nPrimer: 1 232", drugname1, drugname2, drugname3, drugname4);
			SPD(playerid, dialog_ORGSAFETDRUG, DSL, D_NASLOV, string, D_ODABERI, D_ODUSTANI);

			return 1;
		}

		if(slot < 1 || slot > 4) return SendErrorMessage(playerid, "Krivi broj slota!");
		slot2 = slot-1;
		if(OI[OrgID][oSafeDrugCode][slot2] == 0) return SendErrorMessage(playerid, "Ovaj sef nema drogu pod tim slotom!");
		if(kolicina < 1 || kolicina > OI[OrgID][oSafeDrug][slot2]) return SendErrorMessage(playerid, "Ovaj sef nema toliko droge pod tim slotom!");

		OI[OrgID][oSafeDrug][slot2] -= kolicina;
		format(varstring, sizeof(varstring), "* %s uzima nesto iz sefa.", ImeIgraca(playerid));
		PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		SendClientMessageEx(playerid, FUSIONGAMING, "%s | Uzeli ste %d grama %s iz sefa.", OI[OrgID][oPreFix], kolicina, GetDrugNameByDrugID(OI[OrgID][oSafeDrugCode][slot2]));

		new string1[128];
		format(string1, sizeof(string1), "%s |  %s je uzeo %d grama %s iz sefa.", OI[OrgID][oPreFix], ImeIgraca(playerid), kolicina, GetDrugNameByDrugID(OI[OrgID][oSafeDrugCode][slot2]));
		LogSave("Ostalo/LogSefovi.log", string1);

		if(PlayerInfo[playerid][xDrugCode][0] == 0) {
			PlayerInfo[playerid][xDrugCode][0] = OI[OrgID][oSafeDrugCode][slot2];
			PlayerInfo[playerid][xDrug][0] = kolicina;
		}
		else if(PlayerInfo[playerid][xDrugCode][1] == 0) {
			PlayerInfo[playerid][xDrugCode][1] = OI[OrgID][oSafeDrugCode][slot2];
			PlayerInfo[playerid][xDrug][1] = kolicina;
		}
		else if(PlayerInfo[playerid][xDrugCode][2] == 0) {
			PlayerInfo[playerid][xDrugCode][2] = OI[OrgID][oSafeDrugCode][slot2];
			PlayerInfo[playerid][xDrug][2] = kolicina;
		}
		else if(PlayerInfo[playerid][xDrugCode][3] == 0) {
			PlayerInfo[playerid][xDrugCode][3] = OI[OrgID][oSafeDrugCode][slot2];
			PlayerInfo[playerid][xDrug][3] = kolicina;
		}
		else if(PlayerInfo[playerid][xDrugCode][4] == 0) {
			PlayerInfo[playerid][xDrugCode][4] = OI[OrgID][oSafeDrugCode][slot2];
			PlayerInfo[playerid][xDrug][4] = kolicina;
		}

		if(OI[OrgID][oSafeDrug][slot2] <= 0)
			OI[OrgID][oSafeDrugCode][slot2] = 0;

		SaveOrganization(OrgID);
	}
}
else if(dialogid == dialog_ORGSAFEPDRUG) {
	if(!response) return 1;
	if(response) {
		new slot, slot2, kolicina, OrgID = PlayerInfo[playerid][xClan];
		if(sscanf(inputtext, "dd", slot, kolicina)) return SPD(playerid, dialog_ORGSAFEPDRUG, DSI, D_NASLOV,  "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI);

		if(slot < 1 || slot > 5) return SendErrorMessage(playerid, "Krivi broj slota!");
		slot2 = slot-1;
		if(PlayerInfo[playerid][xDrugCode][slot2] == 0) return SendErrorMessage(playerid, "Nemate droge pod tim slotom!");
		if(kolicina < 1 || kolicina > PlayerInfo[playerid][xDrug][slot2]) return SendErrorMessage(playerid, "Nemate toliko droge pod tim slotom!");
		if(kolicina > 1000) return SendErrorMessage(playerid, "Najvise u 1 slotu sefa moze stati 1000g droge.");
		if(OI[OrgID][oSafeDrugCode][0] != 0 && OI[OrgID][oSafeDrugCode][1] != 0 && OI[OrgID][oSafeDrugCode][2] != 0 && OI[OrgID][oSafeDrugCode][3] != 0) return SendErrorMessage(playerid, "Svih 4 slotova droge u sefu su zauzeti!");

		PlayerInfo[playerid][xDrug][slot2] -= kolicina;
		format(varstring, sizeof(varstring), "* %s stavlja nesto u sef.", ImeIgraca(playerid));
		PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		SendClientMessageEx(playerid, ZUTA, "%s | Stavili ste %d grama %s u sef.", OI[OrgID][oPreFix], kolicina , GetDrugNameByDrugID(PlayerInfo[playerid][xDrugCode][slot2]));

		if(OI[OrgID][oSafeDrugCode][0] == 0) {
			OI[OrgID][oSafeDrugCode][0] = PlayerInfo[playerid][xDrugCode][slot2];
			OI[OrgID][oSafeDrug][0] = kolicina;
		}
		else if(OI[OrgID][oSafeDrugCode][1] == 0) {
			OI[OrgID][oSafeDrugCode][1] = PlayerInfo[playerid][xDrugCode][slot2];
			OI[OrgID][oSafeDrug][1] = kolicina;
		}
		else if(OI[OrgID][oSafeDrugCode][2] == 0) {
			OI[OrgID][oSafeDrugCode][2] = PlayerInfo[playerid][xDrugCode][slot2];
			OI[OrgID][oSafeDrug][2] = kolicina;
		}
		else if(OI[OrgID][oSafeDrugCode][3] == 0) {
			OI[OrgID][oSafeDrugCode][3] = PlayerInfo[playerid][xDrugCode][slot2];
			OI[OrgID][oSafeDrug][3] = kolicina;
		}
		SaveOrganization(OrgID);

		if(PlayerInfo[playerid][xDrug][slot2] <= 0)
			PlayerInfo[playerid][xDrugCode][slot2] = 0;
	}
}
else if(dialogid == dialog_ORGSAFEPMONEY) {
	if(!response) return true;
	if(response) {
		new novac, OrgID = PlayerInfo[playerid][xClan];
		if(sscanf(inputtext, "i", novac)) return SPD(playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI);
		if(novac < 1 || novac > 100000) return SPD(playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "GRESKA: Ne moze ispod 1 ili iznad 100000\nUnesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI);
		if(novac > PlayerInfo[playerid][xNovac]) return SPD(playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "GRESKA: Nemate toliko novca kod sebe\nUnesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI);

		DajIgracuNovac(playerid, -novac);
		OI[OrgID][oSafeMoney] += novac;
		SaveOrganization(OrgID);

		SendClientMessageEx(playerid, ZUTA, "%s | Ostavili ste %d$ u sef.", OI[OrgID][oPreFix], novac);
		format(varstring, sizeof(varstring), "%s | Igrac %s je ostavio %d$ u sef organizacije.", OI[OrgID][oPreFix], ImeIgraca(playerid), novac);
		OrgPoruka(OrgID, 0xFFC801C8, varstring);
	}
}
else if(dialogid == dialog_ORGSAFETMONEY) {
	if(!response) return true;
	if(response) {
		new novac, OrgID = PlayerInfo[playerid][xClan];
		if(sscanf(inputtext, "i", novac)) return SPD(playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI);
		if(novac < 1 || novac > 100000) return SPD(playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "GRESKA: Ne moze ispod 1 ili iznad 100000\nUnesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI);
		if(novac > OI[OrgID][oSafeMoney]) return SPD(playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "GRESKA: Nema toliko novca u sefu\nUnesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI);

		DajIgracuNovac(playerid, novac);
		OI[OrgID][oSafeMoney] -= novac;
		SaveOrganization(OrgID);

		SendClientMessageEx(playerid, ZUTA, "%s | Uzeli ste %d$ iz sefa.", OI[OrgID][oPreFix], novac);
		format(varstring, sizeof(varstring), "%s | Igrac %s je uzeo %d$ iz sefa organizacije.", OI[OrgID][oPreFix], ImeIgraca(playerid), novac);
		OrgPoruka(OrgID, 0xFFC801C8, varstring);

		new string1[128];
		format(string1, sizeof(string1), "%s |  %s je uzeo %d$ iz sefa.", OI[OrgID][oPreFix], ImeIgraca(playerid), novac);
		LogSave("Ostalo/LogSefovi.log", string1);
	}
}
else if(dialogid == dialog_ORGSAFEWEAPON) {

	if(response) {

		switch(listitem) {

			case 0: {
				GiveWeaponToPlayer(playerid, 5, 1);
				GiveWeaponToPlayer(playerid, 22, 50);
				GiveWeaponToPlayer(playerid, 28, 120);
				SendInfoMessage(playerid, "Uzeli ste paket oruzja (Palica, Colt45, Uzi). Sledeci paket mozete uzeti za 3h.");
				PlayerInfo[playerid][xUzoPaket] = 180;
				SavePlayer(playerid);
			}
			case 1: {
				GiveWeaponToPlayer(playerid, 4, 1);
				GiveWeaponToPlayer(playerid, 22, 50);
				GiveWeaponToPlayer(playerid, 29, 120);
				SendInfoMessage(playerid, "Uzeli ste paket oruzja (Noz, Colt45, MP5). Sledeci paket mozete uzeti za 3h.");
				PlayerInfo[playerid][xUzoPaket] = 180;
				SavePlayer(playerid);
			}
			case 2: {
				GiveWeaponToPlayer(playerid, 5, 1);
				GiveWeaponToPlayer(playerid, 24, 50);
				GiveWeaponToPlayer(playerid, 32, 120);
				SendInfoMessage(playerid, "Uzeli ste paket oruzja (Palica, Deagle, TEC-9). Sledeci paket mozete uzeti za 3h.");
				PlayerInfo[playerid][xUzoPaket] = 180;
				SavePlayer(playerid);
			}
		}
	}
}
else if(dialogid == dialog_RCONPROVERA) {

	if(!response) return Kick(playerid);
	if(response) {
		new broj;
		if(sscanf(inputtext, "i", broj)) return Kick(playerid);
		if(broj != 642333832) return Kick(playerid);
		Fusion_KillTimer(rconCheckTimer[playerid]);
		rconCheck[playerid] = false;
		SendInfoMessage(playerid, "Dobili ste pristup RCON adminu.");
	}
}
else if(dialogid == dialog_ASKLISTA) {
	if(!response) return true;
	if(response) {
		listitem++;
		new string[256];
		if(askqList[listitem][askqSend] == false) return SendErrorMessage(playerid, "U ovom slotu nema pitanja.");

		IzabraniAskQ[playerid] = listitem;

		format(string, sizeof(string), "Igrac %s je poslao pitanje.\n\nPitanje: %s", askqList[listitem][askqOwner], askqList[listitem][askqQuestion]);

		SPD(playerid, dialog_ASKLISTA_2, DSI, D_NASLOV, string, D_ODABERI, D_ODUSTANI);
	}
}
else if(dialogid == dialog_ASKLISTA_2) {
	if(!response) return true;
	if(response) {
		new text[128];
		if(sscanf(inputtext, "s[128]", text)) return 1;

		new askid = IzabraniAskQ[playerid];

		if(askqList[askid][askqSend] == false) return SendErrorMessage(playerid, "U ovom slotu nema pitanja.");

		askqList[askid][askqSend] = false;

		new id = askqList[askid][askqID];
		IzabraniAskQ[playerid] = -1;

		if(strcmp(ImeIgraca(id), askqList[askid][askqOwner], true) == 0) {

			askqInfo[id][askqAnswered] = true;
			strmid(askqInfo[id][askqAdmin], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 32);
			strmid(askqInfo[id][askqAnswer], text, 0, strlen(text), 128);

			if(PlayerInfo[playerid][xHelper] >= 1) {
				format(varstring, sizeof(varstring), "{AE7C5B]|ASKQ| %s -> %s : Postovani, %s", ImeIgraca(playerid), askqList[askid][askqOwner], text);
				RPTChatPlus(Helper, varstring);
			}

			SendInfoMessage(playerid, "Poslali ste odgovor igracu %s.", askqList[askid][askqOwner]);
			SendInfoMessage(playerid, "Vas odgovor glasi: %s.", text);

			SendClientMessageEx(id, FUSIONGAMING, "Admin/Helper je odgovorio na tvoje pitanje.");
			SendClientMessageEx(id, FUSIONGAMING, "Da pogledate odgovor ukucajte "col_white"'/pogledajodgovor'.");

			PlayerInfo[playerid][xHAskq]++;
			SavePlayer(playerid);

			strmid(askqList[askid][askqOwner], "None", 0, strlen("None"), 32);
			askqList[askid][askqID] = -1;

			text[0] = (EOS);
		}
		else {

			if(id != IPI) {

				askqInfo[id][askqSended] = false;
				askqInfo[id][askqAnswered] = false;
				strmid(askqInfo[id][askqAdmin], "None", 0, strlen("None"), 32);
				strmid(askqInfo[id][askqAnswer], "None", 0, strlen("None"), 128);
			}

			strmid(askqList[askid][askqOwner], "None", 0, strlen("None"), 32);
			askqList[askid][askqID] = -1;
			SendErrorMessage(playerid, "Taj igrac nije online.");
			return 1;
		}
	}
}
else if(dialogid == dialog_ZAMENA_2) {

	if(!response) return 1;
	if(response) {

		new slot1, slot2, igrac = GlobalProdaja[playerid], ID_1 = GlobalID[playerid], ID_2 = GlobalID_2[playerid];

		strmid(VehicleInfo[ID_1][vOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 24);
		strmid(VehicleInfo[ID_2][vOwner], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), 24);

		if(PlayerInfo[igrac][xVoziloID][0] == VehicleInfo[ID_1][vProvera]) { slot1 = 1;}//PlayerInfo[igrac][xVoziloID][0] = ID_2;}
		else if(PlayerInfo[igrac][xVoziloID][1] == VehicleInfo[ID_1][vProvera]) { slot1 = 2;}//PlayerInfo[igrac][xVoziloID][1] = ID_2;}
		else if(PlayerInfo[igrac][xVoziloID][2] == VehicleInfo[ID_1][vProvera]) { slot1 = 3;}//PlayerInfo[igrac][xVoziloID][2] = ID_2;}
		else if(PlayerInfo[igrac][xVoziloID][3] == VehicleInfo[ID_1][vProvera]) { slot1 = 4;}//PlayerInfo[igrac][xVoziloID][3] = ID_2;}

		if(PlayerInfo[playerid][xVoziloID][0] == VehicleInfo[ID_2][vProvera]) { slot2 = 1;}//PlayerInfo[igrac][xVoziloID][0] = ID_1;}
		else if(PlayerInfo[playerid][xVoziloID][1] == VehicleInfo[ID_2][vProvera]) { slot2 = 2;}//PlayerInfo[igrac][xVoziloID][1] = ID_1;}
		else if(PlayerInfo[playerid][xVoziloID][2] == VehicleInfo[ID_2][vProvera]) { slot2 = 3;}//PlayerInfo[igrac][xVoziloID][2] = ID_1;}
		else if(PlayerInfo[playerid][xVoziloID][3] == VehicleInfo[ID_2][vProvera]) { slot2 = 4;}//PlayerInfo[igrac][xVoziloID][3] = ID_1;}

		if(slot1 == 1) { PlayerInfo[igrac][xVoziloID][0] = ID_2;}
		else if(slot1 == 2) { PlayerInfo[igrac][xVoziloID][1] = ID_2;}
		else if(slot1 == 3) { PlayerInfo[igrac][xVoziloID][2] = ID_2;}
		else if(slot1 == 4) { PlayerInfo[igrac][xVoziloID][3] = ID_2;}

		if(slot2 == 1) { PlayerInfo[playerid][xVoziloID][0] = ID_1;}
		else if(slot2 == 2) { PlayerInfo[playerid][xVoziloID][1] = ID_1;}
		else if(slot2 == 3) { PlayerInfo[playerid][xVoziloID][2] = ID_1;}
		else if(slot2 == 4) { PlayerInfo[playerid][xVoziloID][3] = ID_1;}

		SendInfoMessage(playerid, "Uspesno ste zamenili vozila");
		ac_RemovePlayerFromVehicle(playerid);
		SendInfoMessage(igrac, "Uspesno ste zamenili vozila");
		ac_RemovePlayerFromVehicle(igrac);

		new string1[128];
		format(string1, sizeof(string1), "ZamenaV | %s - %s(ID %d) -> %s - %s(ID %d)", ImeIgraca(igrac), GetVehicleNameEx(VehicleInfo[ID_1][vModel]), ID_1, ImeIgraca(playerid), GetVehicleNameEx(VehicleInfo[ID_2][vModel]), ID_2);
		LogSave("Ostalo/LogZamenaVozila.log", string1);

		SavePlayer(playerid); SavePlayer(igrac);
		SaveVehicle(ID_1); SaveVehicle(ID_2);
	}
}
else if(dialogid == dialog_ZAMENA_4) {

	if(!response) return 1;
	if(response) {

		new slot1, slot2, igrac = GlobalProdaja[playerid], ID_1 = GlobalID[playerid], ID_2 = GlobalID_2[playerid];

		strmid(II[ID_1][iOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 24);
		strmid(II[ID_2][iOwner], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), 24);

		if(PlayerInfo[igrac][xProperty][0] == II[ID_1][iVW]) { slot1 = 1;}
		else if(PlayerInfo[igrac][xProperty][1] == II[ID_1][iVW]) { slot1 = 2;}
		else if(PlayerInfo[igrac][xProperty][2] == II[ID_1][iVW]) { slot1 = 3;}

		if(PlayerInfo[playerid][xProperty][0] == II[ID_2][iVW]) { slot2 = 1;}
		else if(PlayerInfo[playerid][xProperty][1] == II[ID_2][iVW]) { slot2 = 2;}
		else if(PlayerInfo[playerid][xProperty][2] == II[ID_2][iVW]) { slot2 = 3;}

		if(slot1 == 1) { PlayerInfo[igrac][xProperty][0] = ID_2;}
		else if(slot1 == 2) { PlayerInfo[igrac][xProperty][1] = ID_2;}
		else if(slot1 == 3) { PlayerInfo[igrac][xProperty][2] = ID_2;}

		if(slot2 == 1) { PlayerInfo[playerid][xProperty][0] = ID_1;}
		else if(slot2 == 2) { PlayerInfo[playerid][xProperty][1] = ID_1;}
		else if(slot2 == 3) { PlayerInfo[playerid][xProperty][2] = ID_1;}

		new string1[128];
		format(string1, sizeof(string1), "ZamenaI | %s - ID %d -> %s - ID %d", ImeIgraca(igrac), ID_1, ImeIgraca(playerid), ID_2);
		LogSave("Ostalo/LogZamenaImovina.log", string1);

		SavePlayer(playerid); SavePlayer(igrac);
		SaveProperty(ID_1); SaveProperty(ID_2);
	}
}
else if(dialogid == dialog_ZAMENA_3) {

	if(!response) return 1;
	if(response) {

		new igrac = GlobalProdaja[playerid], ID_1 = PlayerInfo[igrac][xFirmaID], ID_2 = PlayerInfo[playerid][xFirmaID];

		strmid(BusinessInfo[ID_1][bOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 24);
		strmid(BusinessInfo[ID_2][bOwner], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), 24);

		PlayerInfo[igrac][xFirmaID] = ID_2;
		PlayerInfo[playerid][xFirmaID] = ID_1;

		new string1[128];
		format(string1, sizeof(string1), "ZamenaF | %s - ID %d -> %s - ID %d", ImeIgraca(igrac), ID_1, ImeIgraca(playerid), ID_2);
		LogSave("Ostalo/LogZamenaFirmi.log", string1);

		SavePlayer(playerid); SavePlayer(igrac);
		SaveBusiness(ID_1); SaveBusiness(ID_2);
	}
}
else if(dialogid == dialog_UPLATITIKET) {

	if(response) {

		IzabraniPar[playerid] = listitem;

		new str[20];

		strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

		format(str, sizeof(str), "1 - %.2f\n", Parovi[IzabraniPar[playerid]][Kvota][0]);
		strcat(DialogStrgEx, str);
		format(str, sizeof(str), "X - %.2f\n", Parovi[IzabraniPar[playerid]][Kvota][2]);
		strcat(DialogStrgEx, str);
		format(str, sizeof(str), "2 - %.2f", Parovi[IzabraniPar[playerid]][Kvota][1]);
		strcat(DialogStrgEx, str);

		SPD(playerid, dialog_UPLATITIKET_2, DSL, "Izaberi konacan ishod", DialogStrgEx, "Izaberi", "Odustani");

		strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
	}
	else if(!response) {

		for(new i = 0; i < 10; i++) {
			KladionicaListic[playerid][parID][i] = -1;
			KladionicaListic[playerid][keciksdva][i] = -1;
			KladionicaListic[playerid][Kvota][i] = 0.0;
			KladionicaListic[playerid][teamID1][i] = -1;
			KladionicaListic[playerid][teamID2][i] = -1;
		}
		KladionicaListic[playerid][Uplaceno] = false;
		KladionicaListic[playerid][Zavrseno] = false;
		KladionicaListic[playerid][Uplata] = 0;
		KladionicaListic[playerid][Dobitak] = 0;
		KladionicaListic[playerid][Status] = false;
		SaveKladionica(playerid);
		KladionicaTDControl(playerid, false);
	}

}
else if(dialogid == dialog_UPLATITIKET_2) {

	if(response) {

		for(new ic = 0; ic < 10; ic++) {

			if(IzabraniPar[playerid] == KladionicaListic[playerid][parID][ic]) {

				new str[128];

				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
				strcat(DialogStrgEx, str);

				for(new i = 0; i < 10; i++) {

					format(str, sizeof(str), "%s vs %s\n", bettingInfo[Parovi[i][parID][0]][teamName], bettingInfo[Parovi[i][parID][1]][teamName]);

					strcat(DialogStrgEx, str);
				}

				SPD(playerid, dialog_UPLATITIKET, DSL, "Izaberi par:", DialogStrgEx, "Izaberi", "Odustani");
				strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

				SendErrorMessage(playerid, "Vec imate taj par na listicu.");
				return true;

			}
		}

		new izabraniID = -1;
		for(new i = 0; i < 10; i++) {

			if(KladionicaListic[playerid][parID][i] == -1) {

				izabraniID = i;
				break;

			}
		}
		if(izabraniID == -1) {

			SPD(playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Unesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani");
			SendErrorMessage(playerid, "Vec imas odigranih 10 parova.");
			return 1;
		}

		switch(listitem) {

			case 0: {

				KladionicaListic[playerid][parID][izabraniID] = IzabraniPar[playerid];
				KladionicaListic[playerid][keciksdva][izabraniID] = 1;
				KladionicaListic[playerid][Kvota][izabraniID] = Parovi[IzabraniPar[playerid]][Kvota][0];
			}
			case 1: {

				KladionicaListic[playerid][parID][izabraniID] = IzabraniPar[playerid];
				KladionicaListic[playerid][keciksdva][izabraniID] = 2;
				KladionicaListic[playerid][Kvota][izabraniID] = Parovi[IzabraniPar[playerid]][Kvota][2];
			}
			case 2: {

				KladionicaListic[playerid][parID][izabraniID] = IzabraniPar[playerid];
				KladionicaListic[playerid][keciksdva][izabraniID] = 3;
				KladionicaListic[playerid][Kvota][izabraniID] = Parovi[IzabraniPar[playerid]][Kvota][1];
			}
		}
		KladionicaListic[playerid][teamID1][izabraniID] = Parovi[IzabraniPar[playerid]][parID][0];
		KladionicaListic[playerid][teamID2][izabraniID] = Parovi[IzabraniPar[playerid]][parID][1];

		SPD(playerid, dialog_UPLATITIKET_3, DSMSG, "Nastavak", "Da li zelite da odigrate jos neki par?", "Da", "Ne");
	}
	else if(!response) {

		for(new i = 0; i < 10; i++) {
			KladionicaListic[playerid][parID][i] = -1;
			KladionicaListic[playerid][keciksdva][i] = -1;
			KladionicaListic[playerid][Kvota][i] = 0.0;
			KladionicaListic[playerid][teamID1][i] = -1;
			KladionicaListic[playerid][teamID2][i] = -1;
		}
		KladionicaListic[playerid][Uplaceno] = false;
		KladionicaListic[playerid][Zavrseno] = false;
		KladionicaListic[playerid][Uplata] = 0;
		KladionicaListic[playerid][Dobitak] = 0;
		KladionicaListic[playerid][Status] = false;
		SaveKladionica(playerid);
		KladionicaTDControl(playerid, false);
	}

}
else if(dialogid == dialog_UPLATITIKET_3) {

	if(response) {

		new broj = 0;
		for(new i = 0; i < 10; i++) {

			if(KladionicaListic[playerid][parID][i] != -1) {

				broj++;
			}
		}
		if(broj == 10) {

			SPD(playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Unesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani");

			SendErrorMessage(playerid, "Vec imate odigranih 10 parova.");
			return true;
		}

		new str[128];

		strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
		strcat(DialogStrgEx, str);

		for(new i = 0; i < 10; i++) {

			format(str, sizeof(str), "%s vs %s\n", bettingInfo[Parovi[i][parID][0]][teamName], bettingInfo[Parovi[i][parID][1]][teamName]);

			strcat(DialogStrgEx, str);
		}

		SPD(playerid, dialog_UPLATITIKET, DSL, "Izaberi par:", DialogStrgEx, "Izaberi", "Odustani");
		strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

	}
	else if(!response) {

		new broj = 0;
		for(new i = 0; i < 10; i++) {

			if(KladionicaListic[playerid][parID][i] != -1) {

				broj++;
			}
		}
		if(broj == 0) {

			new str[128];

			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
			strcat(DialogStrgEx, str);

			for(new i = 0; i < 10; i++) {

				format(str, sizeof(str), "%s vs %s\n", bettingInfo[Parovi[i][parID][0]][teamName], bettingInfo[Parovi[i][parID][1]][teamName]);

				strcat(DialogStrgEx, str);
			}

			SPD(playerid, dialog_UPLATITIKET, DSL, "Izaberi par:", DialogStrgEx, "Izaberi", "Odustani");
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

			SendErrorMessage(playerid, "Nemate odigranu ni jednu tekmu.");
			return true;
		}

		SPD(playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Unesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani");
	}
}
else if(dialogid == dialog_UPLATITIKET_4) {

	if(response) {

		new novac, Float:kvota[10];
		if(sscanf(inputtext, "i", novac)) return SPD(playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Unesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani");
		if(novac < 2000 || novac > 10000) return SPD(playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Greska: samo od 2000 do 10000 dolara.\nUnesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani");
		if(PlayerInfo[playerid][xNovac] < novac) return SPD(playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Greska: nemate toliko novca.\nUnesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani");

		new hour, minute, second, day, year, month;
		getdate(year, month, day);
		gettimeEx(hour, minute, second);
		FixHour(hour);
		hour = shifthour;

		if(minute > 30) return SendErrorMessage(playerid, "Proslo je pola sata za uplate, cekajte sledece kolo.");

		DajIgracuNovac(playerid, -novac);
		BusinessMoney(uFirmi[playerid], novac, playerid);

		SendInfoMessage(playerid, "Da vidis svoj tiket kucaj /mojlistic.");

		KladionicaListic[playerid][Uplata] = novac;
		KladionicaListic[playerid][Uplaceno] = true;
		KladionicaListic[playerid][Zavrseno] = false;

		if(KladionicaListic[playerid][Kvota][0] == 0) { kvota[0] = 1;} else { kvota[0] = KladionicaListic[playerid][Kvota][0];}
		if(KladionicaListic[playerid][Kvota][1] == 0) { kvota[1] = 1;} else { kvota[1] = KladionicaListic[playerid][Kvota][1];}
		if(KladionicaListic[playerid][Kvota][2] == 0) { kvota[2] = 1;} else { kvota[2] = KladionicaListic[playerid][Kvota][2];}
		if(KladionicaListic[playerid][Kvota][3] == 0) { kvota[3] = 1;} else { kvota[3] = KladionicaListic[playerid][Kvota][3];}
		if(KladionicaListic[playerid][Kvota][4] == 0) { kvota[4] = 1;} else { kvota[4] = KladionicaListic[playerid][Kvota][4];}
		if(KladionicaListic[playerid][Kvota][5] == 0) { kvota[5] = 1;} else { kvota[5] = KladionicaListic[playerid][Kvota][5];}
		if(KladionicaListic[playerid][Kvota][6] == 0) { kvota[6] = 1;} else { kvota[6] = KladionicaListic[playerid][Kvota][6];}
		if(KladionicaListic[playerid][Kvota][7] == 0) { kvota[7] = 1;} else { kvota[7] = KladionicaListic[playerid][Kvota][7];}
		if(KladionicaListic[playerid][Kvota][7] == 0) { kvota[8] = 1;} else { kvota[8] = KladionicaListic[playerid][Kvota][8];}
		if(KladionicaListic[playerid][Kvota][8] == 0) { kvota[9] = 1;} else { kvota[9] = KladionicaListic[playerid][Kvota][9];}

		KladionicaListic[playerid][Dobitak] = novac*
												  kvota[0]*
												  kvota[1]*
												  kvota[2]*
												  kvota[3]*
												  kvota[4]*
												  kvota[5]*
												  kvota[6]*
												  kvota[7]*
												  kvota[8]*
												  kvota[9];
		SendInfoMessage(playerid, "Uspesno ste uplatili tiket. Dobitak %.2f$", KladionicaListic[playerid][Dobitak]);



		new staar[32];
		format(staar, sizeof(staar), "%d.%d.%d %02d:30", day, month, year, hour);
		strmid(KladionicaListic[playerid][HourPobeda], staar, 0, strlen(staar), 32);

		SaveKladionica(playerid);
		KladionicaTDControl(playerid, false);
	}
	else if(!response) {

		for(new i = 0; i < 10; i++) {
			KladionicaListic[playerid][parID][i] = -1;
			KladionicaListic[playerid][keciksdva][i] = -1;
			KladionicaListic[playerid][Kvota][i] = 0.0;
			KladionicaListic[playerid][teamID1][i] = -1;
			KladionicaListic[playerid][teamID2][i] = -1;
		}
		KladionicaListic[playerid][Uplaceno] = false;
		KladionicaListic[playerid][Zavrseno] = false;
		KladionicaListic[playerid][Uplata] = 0;
		KladionicaListic[playerid][Dobitak] = 0;
		KladionicaListic[playerid][Status] = false;
		SaveKladionica(playerid);
		KladionicaTDControl(playerid, false);
	}
}
else if(dialogid == dialog_DONATORBOJA) {

	if(response) {

		PlayerInfo[playerid][xDBoja] = listitem+1;
		DonatorBoja(playerid);
		SendInfoMessage(playerid, "Vasa boja imena je promenjena.");
		SavePlayer(playerid);
	}
}
else if(dialogid == dialog_ZAMENA_1) {

	if(response) {

		new ponudjeno = Ponudjeno[playerid], trazeno = Trazio[playerid], igrac = GlobalProdaja[playerid], ID_1 = GlobalID[playerid], ID_2 = GlobalID_2[playerid];

		if(igrac == IPI) return SendErrorMessage(playerid, "Taj igrac trenutno nije online.");

		if(ponudjeno >= 1 && ponudjeno <= 4) {

			strmid(VehicleInfo[ID_1][vOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 24);

			if(PlayerInfo[igrac][xVoziloID][0] == VehicleInfo[ID_1][vProvera]) { PlayerInfo[igrac][xVoziloID][0] = -1;}
			else if(PlayerInfo[igrac][xVoziloID][1] == VehicleInfo[ID_1][vProvera]) { PlayerInfo[igrac][xVoziloID][1] = -1;}
			else if(PlayerInfo[igrac][xVoziloID][2] == VehicleInfo[ID_1][vProvera]) { PlayerInfo[igrac][xVoziloID][2] = -1;}
			else if(PlayerInfo[igrac][xVoziloID][3] == VehicleInfo[ID_1][vProvera]) { PlayerInfo[igrac][xVoziloID][3] = -1;}

			if(PlayerInfo[playerid][xVoziloID][0] == -1) { PlayerInfo[playerid][xVoziloID][0] = ID_1;}
			else if(PlayerInfo[playerid][xVoziloID][1] == -1) { PlayerInfo[playerid][xVoziloID][1] = ID_1;}
			else if(PlayerInfo[playerid][xVoziloID][2] == -1) { PlayerInfo[playerid][xVoziloID][2] = ID_1;}
			else if(PlayerInfo[playerid][xVoziloID][3] == -1) { PlayerInfo[playerid][xVoziloID][3] = ID_1;}

			//new string1[128]; new s, m, se, year, month, day; getdate(year, month, day);  format(string1, sizeof(string1), "Igrac %s je prodao vozilo %s igracu %s za %d", ImeIgraca(seller), GetVehicleNameEx(VehicleInfo[autoid][vModel]), ImeIgraca(playerid), GlobalCena[playerid]);  LogSave("Ostalo/LogProdajaVozila.log", string1);

			SavePlayer(playerid); SavePlayer(igrac);
			SaveVehicle(ID_1);

			if(trazeno >= 1 && trazeno <= 4) {

				strmid(VehicleInfo[ID_2][vOwner], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), 24);

				if(PlayerInfo[playerid][xVoziloID][0] == VehicleInfo[ID_2][vProvera]) { PlayerInfo[playerid][xVoziloID][0] = -1;}
				else if(PlayerInfo[playerid][xVoziloID][1] == VehicleInfo[ID_2][vProvera]) { PlayerInfo[playerid][xVoziloID][1] = -1;}
				else if(PlayerInfo[playerid][xVoziloID][2] == VehicleInfo[ID_2][vProvera]) { PlayerInfo[playerid][xVoziloID][2] = -1;}
				else if(PlayerInfo[playerid][xVoziloID][3] == VehicleInfo[ID_2][vProvera]) { PlayerInfo[playerid][xVoziloID][3] = -1;}

				if(PlayerInfo[igrac][xVoziloID][0] == -1){ PlayerInfo[igrac][xVoziloID][0] = ID_2;}
				else if(PlayerInfo[igrac][xVoziloID][1] == -1) { PlayerInfo[igrac][xVoziloID][1] = ID_2;}
				else if(PlayerInfo[igrac][xVoziloID][2] == -1) { PlayerInfo[igrac][xVoziloID][2] = ID_2;}
				else if(PlayerInfo[igrac][xVoziloID][3] == -1) { PlayerInfo[igrac][xVoziloID][3] = ID_2;}

				//new string1[128]; new s, m, se, year, month, day; getdate(year, month, day);  format(string1, sizeof(string1), "Igrac %s je prodao vozilo %s igracu %s za %d", ImeIgraca(seller), GetVehicleNameEx(VehicleInfo[autoid][vModel]), ImeIgraca(playerid), GlobalCena[playerid]);  LogSave("Ostalo/LogProdajaVozila.log", string1);

				SavePlayer(playerid); SavePlayer(igrac);
				SaveVehicle(ID_2);
			}
			else if(trazeno >= 5 && trazeno <= 7) {

				if(PlayerInfo[playerid][xProperty][0] == ID_2) { PlayerInfo[playerid][xProperty][0] = -1;}
				else if(PlayerInfo[playerid][xProperty][1] == ID_2) { PlayerInfo[playerid][xProperty][1] = -1;}
				else if(PlayerInfo[playerid][xProperty][2] == ID_2) { PlayerInfo[playerid][xProperty][2] = -1;}

				if(PlayerInfo[igrac][xProperty][0] == -1) { PlayerInfo[igrac][xProperty][0] = ID_2;}
				else if(PlayerInfo[igrac][xProperty][1] == -1) { PlayerInfo[igrac][xProperty][1] = ID_2;}
				else if(PlayerInfo[igrac][xProperty][2] == -1) { PlayerInfo[igrac][xProperty][2] = ID_2;}

				//new string1[128]; new s, m, se, year, month, day; getdate(year, month, day);  format(string1, sizeof(string1), "Igrac %s je prodao imovinu ID %d igracu %s za %d", ImeIgraca(GlobalProdaja[playerid]), id, ImeIgraca(playerid), GlobalCena[playerid]);  LogSave("Ostalo/LogProdajaImovine.log", string1);


				strmid(II[ID_2][iOwner], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), 255);
				SaveProperty(ID_2); PropertyRefresh(ID_2);
				SavePlayer(playerid); SavePlayer(igrac);

			}
			else if(trazeno == 8) {

				PlayerInfo[playerid][xFirmaID] = -1;
				PlayerInfo[igrac][xFirmaID] = ID_2;
				strmid(BusinessInfo[ID_2][bOwner], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), 255);
				SaveBusiness(ID_2); Business_Refresh(ID_2);
				SavePlayer(playerid); SavePlayer(igrac);

			}
		}
		else if(ponudjeno >= 5 && ponudjeno <= 7) {

			if(PlayerInfo[igrac][xProperty][0] == ID_1) { PlayerInfo[igrac][xProperty][0] = -1;}
			else if(PlayerInfo[igrac][xProperty][1] == ID_1) { PlayerInfo[igrac][xProperty][1] = -1;}
			else if(PlayerInfo[igrac][xProperty][2] == ID_1) { PlayerInfo[igrac][xProperty][2] = -1;}

			if(PlayerInfo[playerid][xProperty][0] == -1) { PlayerInfo[playerid][xProperty][0] = ID_1;}
			else if(PlayerInfo[playerid][xProperty][1] == -1) { PlayerInfo[playerid][xProperty][1] = ID_1;}
			else if(PlayerInfo[playerid][xProperty][2] == -1) { PlayerInfo[playerid][xProperty][2] = ID_1;}

			//new string1[128]; new s, m, se, year, month, day; getdate(year, month, day);  format(string1, sizeof(string1), "Igrac %s je prodao imovinu ID %d igracu %s za %d", ImeIgraca(GlobalProdaja[playerid]), id, ImeIgraca(playerid), GlobalCena[playerid]);  LogSave("Ostalo/LogProdajaImovine.log", string1);

			strmid(II[ID_1][iOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 255);
			SaveProperty(ID_1); PropertyRefresh(ID_1);
			SavePlayer(playerid); SavePlayer(igrac);

			if(trazeno >= 1 && trazeno <= 4) {

				strmid(VehicleInfo[ID_2][vOwner], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), 24);

				if(PlayerInfo[playerid][xVoziloID][0] == VehicleInfo[ID_2][vProvera]) { PlayerInfo[playerid][xVoziloID][0] = -1;}
				else if(PlayerInfo[playerid][xVoziloID][1] == VehicleInfo[ID_2][vProvera]) { PlayerInfo[playerid][xVoziloID][1] = -1;}
				else if(PlayerInfo[playerid][xVoziloID][2] == VehicleInfo[ID_2][vProvera]) { PlayerInfo[playerid][xVoziloID][2] = -1;}
				else if(PlayerInfo[playerid][xVoziloID][3] == VehicleInfo[ID_2][vProvera]) { PlayerInfo[playerid][xVoziloID][3] = -1;}

				if(PlayerInfo[igrac][xVoziloID][0] == -1){ PlayerInfo[igrac][xVoziloID][0] = ID_2;}
				else if(PlayerInfo[igrac][xVoziloID][1] == -1) { PlayerInfo[igrac][xVoziloID][1] = ID_2;}
				else if(PlayerInfo[igrac][xVoziloID][2] == -1) { PlayerInfo[igrac][xVoziloID][2] = ID_2;}
				else if(PlayerInfo[igrac][xVoziloID][3] == -1) { PlayerInfo[igrac][xVoziloID][3] = ID_2;}

				//new string1[128]; new s, m, se, year, month, day; getdate(year, month, day);  format(string1, sizeof(string1), "Igrac %s je prodao vozilo %s igracu %s za %d", ImeIgraca(seller), GetVehicleNameEx(VehicleInfo[autoid][vModel]), ImeIgraca(playerid), GlobalCena[playerid]);  LogSave("Ostalo/LogProdajaVozila.log", string1);

				SavePlayer(playerid); SavePlayer(igrac);
				SaveVehicle(ID_2);
			}
			else if(trazeno >= 5 && trazeno <= 7) {

				if(PlayerInfo[playerid][xProperty][0] == ID_2) { PlayerInfo[playerid][xProperty][0] = -1;}
				else if(PlayerInfo[playerid][xProperty][1] == ID_2) { PlayerInfo[playerid][xProperty][1] = -1;}
				else if(PlayerInfo[playerid][xProperty][2] == ID_2) { PlayerInfo[playerid][xProperty][2] = -1;}

				if(PlayerInfo[igrac][xProperty][0] == -1) { PlayerInfo[igrac][xProperty][0] = ID_2;}
				else if(PlayerInfo[igrac][xProperty][1] == -1) { PlayerInfo[igrac][xProperty][1] = ID_2;}
				else if(PlayerInfo[igrac][xProperty][2] == -1) { PlayerInfo[igrac][xProperty][2] = ID_2;}

				//new string1[128]; new s, m, se, year, month, day; getdate(year, month, day);  format(string1, sizeof(string1), "Igrac %s je prodao imovinu ID %d igracu %s za %d", ImeIgraca(GlobalProdaja[playerid]), id, ImeIgraca(playerid), GlobalCena[playerid]);  LogSave("Ostalo/LogProdajaImovine.log", string1);


				strmid(II[ID_2][iOwner], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), 255);
				SaveProperty(ID_2); PropertyRefresh(ID_2);
				SavePlayer(playerid); SavePlayer(igrac);

			}
			else if(trazeno == 8) {

				PlayerInfo[playerid][xFirmaID] = -1;
				PlayerInfo[igrac][xFirmaID] = ID_2;
				strmid(BusinessInfo[ID_2][bOwner], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), 255);
				SaveBusiness(ID_2); Business_Refresh(ID_2);
				SavePlayer(playerid); SavePlayer(igrac);

			}

		}
		else if(ponudjeno == 8) {

			PlayerInfo[igrac][xFirmaID] = -1;
			PlayerInfo[playerid][xFirmaID] = ID_1;
			strmid(BusinessInfo[ID_1][bOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 255);
			SaveBusiness(ID_1); Business_Refresh(ID_1);
			SavePlayer(playerid); SavePlayer(igrac);

			if(trazeno >= 1 && trazeno <= 4) {

				strmid(VehicleInfo[ID_2][vOwner], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), 24);

				if(PlayerInfo[playerid][xVoziloID][0] == VehicleInfo[ID_2][vProvera]) { PlayerInfo[playerid][xVoziloID][0] = -1;}
				else if(PlayerInfo[playerid][xVoziloID][1] == VehicleInfo[ID_2][vProvera]) { PlayerInfo[playerid][xVoziloID][1] = -1;}
				else if(PlayerInfo[playerid][xVoziloID][2] == VehicleInfo[ID_2][vProvera]) { PlayerInfo[playerid][xVoziloID][2] = -1;}
				else if(PlayerInfo[playerid][xVoziloID][3] == VehicleInfo[ID_2][vProvera]) { PlayerInfo[playerid][xVoziloID][3] = -1;}

				if(PlayerInfo[igrac][xVoziloID][0] == -1){ PlayerInfo[igrac][xVoziloID][0] = ID_2;}
				else if(PlayerInfo[igrac][xVoziloID][1] == -1) { PlayerInfo[igrac][xVoziloID][1] = ID_2;}
				else if(PlayerInfo[igrac][xVoziloID][2] == -1) { PlayerInfo[igrac][xVoziloID][2] = ID_2;}
				else if(PlayerInfo[igrac][xVoziloID][3] == -1) { PlayerInfo[igrac][xVoziloID][3] = ID_2;}

				//new string1[128]; new s, m, se, year, month, day; getdate(year, month, day);  format(string1, sizeof(string1), "Igrac %s je prodao vozilo %s igracu %s za %d", ImeIgraca(seller), GetVehicleNameEx(VehicleInfo[autoid][vModel]), ImeIgraca(playerid), GlobalCena[playerid]);  LogSave("Ostalo/LogProdajaVozila.log", string1);

				SavePlayer(playerid); SavePlayer(igrac);
				SaveVehicle(ID_2);
			}
			else if(trazeno >= 5 && trazeno <= 7) {

				if(PlayerInfo[playerid][xProperty][0] == ID_2) { PlayerInfo[playerid][xProperty][0] = -1;}
				else if(PlayerInfo[playerid][xProperty][1] == ID_2) { PlayerInfo[playerid][xProperty][1] = -1;}
				else if(PlayerInfo[playerid][xProperty][2] == ID_2) { PlayerInfo[playerid][xProperty][2] = -1;}

				if(PlayerInfo[igrac][xProperty][0] == -1) { PlayerInfo[igrac][xProperty][0] = ID_2;}
				else if(PlayerInfo[igrac][xProperty][1] == -1) { PlayerInfo[igrac][xProperty][1] = ID_2;}
				else if(PlayerInfo[igrac][xProperty][2] == -1) { PlayerInfo[igrac][xProperty][2] = ID_2;}

				//new string1[128]; new s, m, se, year, month, day; getdate(year, month, day);  format(string1, sizeof(string1), "Igrac %s je prodao imovinu ID %d igracu %s za %d", ImeIgraca(GlobalProdaja[playerid]), id, ImeIgraca(playerid), GlobalCena[playerid]);  LogSave("Ostalo/LogProdajaImovine.log", string1);


				strmid(II[ID_2][iOwner], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), 255);
				SaveProperty(ID_2); PropertyRefresh(ID_2);
				SavePlayer(playerid); SavePlayer(igrac);

			}
			else if(trazeno == 8) {

				PlayerInfo[playerid][xFirmaID] = -1;
				PlayerInfo[igrac][xFirmaID] = ID_2;
				strmid(BusinessInfo[ID_2][bOwner], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), 255);
				SaveBusiness(ID_2); Business_Refresh(ID_2);
				SavePlayer(playerid); SavePlayer(igrac);

			}

		}

		Ponudjeno[playerid] = -1;
		Trazio[playerid] = -1;
		GlobalProdaja[playerid] = -1;
		GlobalID[playerid] = -1;
		GlobalID_2[playerid] = -1;

	}
	else if(!response) {
	}
}
else if(dialogid == dialog_HELPERI) {
	if(!response) return true;
	if(response) {
		switch(listitem) {
			case 0: {
				new stringgh[1024];
				format(stringgh,sizeof(stringgh),"");
				foreach(new i : Player) {
					if(PlayerInfo[i][xHelper] >= 1) {
						new string[512];
						format(string,sizeof(string),"{FFFFFF][ID %d] {0080C0]%s {FFFFFF]| {0080C0]Helper Level: {FFFFFF]%d{FFFFFF] | {0080C0]DUTY: ",i,ImeIgraca(i),PlayerInfo[i][xHelper]);
						strcat(stringgh,string);
						if(AdminDuty[i]) {
							strcat(stringgh,"{33AA33]ON DUTY");
						}
						else {
							strcat(stringgh,"{FF0019]OFF DUTY");
						}
						strcat(stringgh,"\n");
					}
				}
				if(strlen(stringgh) == 0) return SendInfoMessage(playerid, "Na serveru nema online helpera.");
				SPD(playerid,dialog_EMPTY,DSMSG,"Lista online helpera",stringgh,"U redu","");
			}
			case 1: {
				new text[64];

				new File:lider1 = fopen("Helperi/1.txt",io_read);
				while(fread(lider1,text)) {
				strmid(hSlot1,text,0,strlen(text),255); }
				fclose(lider1);

				new File:lider2 = fopen("Helperi/2.txt",io_read);
				while(fread(lider2,text)) {
				strmid(hSlot2,text,0,strlen(text),255); }
				fclose(lider2);

				new File:lider3 = fopen("Helperi/3.txt",io_read);
				while(fread(lider3,text)) {
				strmid(hSlot3,text,0,strlen(text),255); }
				fclose(lider3);

				new File:lider4 = fopen("Helperi/4.txt",io_read);
				while(fread(lider4,text)) {
				strmid(hSlot4,text,0,strlen(text),255); }
				fclose(lider4);

				new File:lider5 = fopen("Helperi/5.txt",io_read);
				while(fread(lider5,text)) {
				strmid(hSlot5,text,0,strlen(text),255); }
				fclose(lider5);

				new File:lider6 = fopen("Helperi/6.txt",io_read);
				while(fread(lider6,text)) {
				strmid(hSlot6,text,0,strlen(text),255); }
				fclose(lider6);

				new File:lider7 = fopen("Helperi/7.txt",io_read);
				while(fread(lider7,text)) {
				strmid(hSlot7,text,0,strlen(text),255); }
				fclose(lider7);

				new File:lider8 = fopen("Helperi/8.txt",io_read);
				while(fread(lider8,text)) {
				strmid(hSlot8,text,0,strlen(text),255); }
				fclose(lider8);

				new File:lider9 = fopen("Helperi/9.txt",io_read);
				while(fread(lider9,text)) {
				strmid(hSlot9,text,0,strlen(text),255); }
				fclose(lider9);

				new File:lider10 = fopen("Helperi/10.txt",io_read);
				while(fread(lider10,text)) {
				strmid(hSlot10,text,0,strlen(text),255); }
				fclose(lider10);

				new File:lider11 = fopen("Helperi/11.txt",io_read);
				while(fread(lider11,text)) {
				strmid(hSlot11,text,0,strlen(text),255); }
				fclose(lider11);

				new File:lider12 = fopen("Helperi/12.txt",io_read);
				while(fread(lider12,text)) {
				strmid(hSlot12,text,0,strlen(text),255); }
				fclose(lider12);

				new File:lider13 = fopen("Helperi/13.txt",io_read);
				while(fread(lider13,text)) {
				strmid(hSlot13,text,0,strlen(text),255); }
				fclose(lider13);

				new File:lider14 = fopen("Helperi/14.txt",io_read);
				while(fread(lider14,text)) {
				strmid(hSlot14,text,0,strlen(text),255); }
				fclose(lider14);

				new File:lider15 = fopen("Helperi/15.txt",io_read);
				while(fread(lider15,text)) {
				strmid(hSlot15,text,0,strlen(text),255); }
				fclose(lider15);

				new File:lider16 = fopen("Helperi/16.txt",io_read);
				while(fread(lider16,text)) {
				strmid(hSlot16,text,0,strlen(text),255); }
				fclose(lider16);

				new File:lider17 = fopen("Helperi/17.txt",io_read);
				while(fread(lider17,text)) {
				strmid(hSlot17,text,0,strlen(text),255); }
				fclose(lider17);

				new File:lider18 = fopen("Helperi/18.txt",io_read);
				while(fread(lider18,text)) {
				strmid(hSlot18,text,0,strlen(text),255); }
				fclose(lider18);

				new File:lider19 = fopen("Helperi/19.txt",io_read);
				while(fread(lider19,text)) {
				strmid(hSlot19,text,0,strlen(text),255); }
				fclose(lider19);

				new File:lider20 = fopen("Helperi/20.txt",io_read);
				while(fread(lider20,text)) {
				strmid(hSlot20,text,0,strlen(text),255); }
				fclose(lider20);

				new File:lider21 = fopen("Helperi/21.txt",io_read);
				while(fread(lider21,text)) {
				strmid(hSlot21,text,0,strlen(text),255); }
				fclose(lider21);

				new File:lider22 = fopen("Helperi/22.txt",io_read);
				while(fread(lider22,text)) {
				strmid(hSlot22,text,0,strlen(text),255); }
				fclose(lider22);

				new File:lider23 = fopen("Helperi/23.txt",io_read);
				while(fread(lider23,text)) {
				strmid(hSlot23,text,0,strlen(text),255); }
				fclose(lider23);

				new File:lider24 = fopen("Helperi/24.txt",io_read);
				while(fread(lider24,text)) {
				strmid(hSlot24,text,0,strlen(text),255); }
				fclose(lider24);

				new File:lider25 = fopen("Helperi/25.txt",io_read);
				while(fread(lider25,text)) {
				strmid(hSlot25,text,0,strlen(text),255); }
				fclose(lider25);

				new File:lider26 = fopen("Helperi/26.txt",io_read);
				while(fread(lider26,text)) {
				strmid(hSlot26,text,0,strlen(text),255); }
				fclose(lider26);

				new File:lider27 = fopen("Helperi/27.txt",io_read);
				while(fread(lider27,text)) {
				strmid(hSlot27,text,0,strlen(text),255); }
				fclose(lider27);

				new File:lider28 = fopen("Helperi/28.txt",io_read);
				while(fread(lider28,text)) {
				strmid(hSlot28,text,0,strlen(text),255); }
				fclose(lider28);

				new File:lider29 = fopen("Helperi/29.txt",io_read);
				while(fread(lider29,text)) {
				strmid(hSlot29,text,0,strlen(text),255); }
				fclose(lider29);

				new File:lider30 = fopen("Helperi/30.txt",io_read);
				while(fread(lider30,text)) {
				strmid(hSlot30,text,0,strlen(text),255); }
				fclose(lider30);

				strdel(DialogStrgEx,0,sizeof(DialogStrgEx));
				format(DialogStrgEx,sizeof(DialogStrgEx),"Slot 1: %s\nSlot 2: %s\nSlot 3: %s\nSlot 4: %s\nSlot 5: %s\nSlot 6: %s\nSlot 7: %s\nSlot 8: %s\nSlot 9: %s\nSlot 10: %s\nSlot 11: %s\nSlot 12: %s\nSlot 13: %s\nSlot 14: %s\nSlot 15: %s\nSlot 16: %s\nSlot 17: %s\nSlot 18: %s\nSlot 19: %s\nSlot 20: %s\nSlot 21: %s\nSlot 22: %s\nSlot 23: %s\nSlot 24: %s\nSlot 25: %s\nSlot 26: %s\nSlot 27: %s\nSlot 28: %s\nSlot 29: %s\nSlot 30: %s",
					hSlot1,
					hSlot2,
					hSlot3,
					hSlot4,
					hSlot5,
					hSlot6,
					hSlot7,
					hSlot8,
					hSlot9,
					hSlot10,
					hSlot11,
					hSlot12,
					hSlot13,
					hSlot14,
					hSlot15,
					hSlot16,
					hSlot17,
					hSlot18,
					hSlot19,
					hSlot20,
					hSlot21,
					hSlot22,
					hSlot23,
					hSlot24,
					hSlot25,
					hSlot26,
					hSlot27,
					hSlot28,
					hSlot29,
					hSlot30);
				SPD(playerid,dialog_EMPTY,DSMSG,D_NASLOV,DialogStrgEx,"U redu","");
				strdel(DialogStrgEx,0,sizeof(DialogStrgEx));
			}
		}
	}
}
else if(dialogid == dialog_ADMINI) {
	if(!response) return true;
	if(response) {
		switch(listitem) {
			case 0: {
				new stringgh[1024];
				format(stringgh,sizeof(stringgh),"");
				foreach(new i : Player) {
					if(PlayerInfo[i][xAdmin] >= 1) {
						new string[512];
						format(string,sizeof(string),"{FFFFFF][ID %d] {0080C0]%s {FFFFFF]| {0080C0]AFG Level: {FFFFFF]%d{FFFFFF] | {0080C0]DUTY: ",i,ImeIgraca(i),PlayerInfo[i][xAdmin]);
						strcat(stringgh,string);
						if(AdminDuty[i]) {
							strcat(stringgh,"{33AA33]ON DUTY");
						}
						else {
							strcat(stringgh,"{FF0019]OFF DUTY");
						}
						strcat(stringgh,"\n");
					}
				}
				if(strlen(stringgh) == 0) return SendInfoMessage(playerid, "Na serveru nema online admina.");
				SPD(playerid,dialog_EMPTY,DSMSG,"Lista online admina",stringgh,"U redu","");
			}
			case 1: {
				new text[64];

				new File:lider1 = fopen("Admini/1.txt",io_read);
				while(fread(lider1,text)) {
				strmid(aSlot1,text,0,strlen(text),255); }
				fclose(lider1);

				new File:lider2 = fopen("Admini/2.txt",io_read);
				while(fread(lider2,text)) {
				strmid(aSlot2,text,0,strlen(text),255); }
				fclose(lider2);

				new File:lider3 = fopen("Admini/3.txt",io_read);
				while(fread(lider3,text)) {
				strmid(aSlot3,text,0,strlen(text),255); }
				fclose(lider3);

				new File:lider4 = fopen("Admini/4.txt",io_read);
				while(fread(lider4,text)) {
				strmid(aSlot4,text,0,strlen(text),255); }
				fclose(lider4);

				new File:lider5 = fopen("Admini/5.txt",io_read);
				while(fread(lider5,text)) {
				strmid(aSlot5,text,0,strlen(text),255); }
				fclose(lider5);

				new File:lider6 = fopen("Admini/6.txt",io_read);
				while(fread(lider6,text)) {
				strmid(aSlot6,text,0,strlen(text),255); }
				fclose(lider6);

				new File:lider7 = fopen("Admini/7.txt",io_read);
				while(fread(lider7,text)) {
				strmid(aSlot7,text,0,strlen(text),255); }
				fclose(lider7);

				new File:lider8 = fopen("Admini/8.txt",io_read);
				while(fread(lider8,text)) {
				strmid(aSlot8,text,0,strlen(text),255); }
				fclose(lider8);

				new File:lider9 = fopen("Admini/9.txt",io_read);
				while(fread(lider9,text)) {
				strmid(aSlot9,text,0,strlen(text),255); }
				fclose(lider9);

				new File:lider10 = fopen("Admini/10.txt",io_read);
				while(fread(lider10,text)) {
				strmid(aSlot10,text,0,strlen(text),255); }
				fclose(lider10);

				new File:lider11 = fopen("Admini/11.txt",io_read);
				while(fread(lider11,text)) {
				strmid(aSlot11,text,0,strlen(text),255); }
				fclose(lider11);

				new File:lider12 = fopen("Admini/12.txt",io_read);
				while(fread(lider12,text)) {
				strmid(aSlot12,text,0,strlen(text),255); }
				fclose(lider12);

				new File:lider13 = fopen("Admini/13.txt",io_read);
				while(fread(lider13,text)) {
				strmid(aSlot13,text,0,strlen(text),255); }
				fclose(lider13);

				new File:lider14 = fopen("Admini/14.txt",io_read);
				while(fread(lider14,text)) {
				strmid(aSlot14,text,0,strlen(text),255); }
				fclose(lider14);

				new File:lider15 = fopen("Admini/15.txt",io_read);
				while(fread(lider15,text)) {
				strmid(aSlot15,text,0,strlen(text),255); }
				fclose(lider15);

				new File:lider16 = fopen("Admini/16.txt",io_read);
				while(fread(lider16,text)) {
				strmid(aSlot16,text,0,strlen(text),255); }
				fclose(lider16);

				new File:lider17 = fopen("Admini/17.txt",io_read);
				while(fread(lider17,text)) {
				strmid(aSlot17,text,0,strlen(text),255); }
				fclose(lider17);

				new File:lider18 = fopen("Admini/18.txt",io_read);
				while(fread(lider18,text)) {
				strmid(aSlot18,text,0,strlen(text),255); }
				fclose(lider18);

				new File:lider19 = fopen("Admini/19.txt",io_read);
				while(fread(lider19,text)) {
				strmid(aSlot19,text,0,strlen(text),255); }
				fclose(lider19);

				new File:lider20 = fopen("Admini/20.txt",io_read);
				while(fread(lider20,text)) {
				strmid(aSlot20,text,0,strlen(text),255); }
				fclose(lider20);

				new File:lider21 = fopen("Admini/21.txt",io_read);
				while(fread(lider21,text)) {
				strmid(aSlot21,text,0,strlen(text),255); }
				fclose(lider21);

				new File:lider22 = fopen("Admini/22.txt",io_read);
				while(fread(lider22,text)) {
				strmid(aSlot22,text,0,strlen(text),255); }
				fclose(lider22);

				new File:lider23 = fopen("Admini/23.txt",io_read);
				while(fread(lider23,text)) {
				strmid(aSlot23,text,0,strlen(text),255); }
				fclose(lider23);

				new File:lider24 = fopen("Admini/24.txt",io_read);
				while(fread(lider24,text)) {
				strmid(aSlot24,text,0,strlen(text),255); }
				fclose(lider24);

				new File:lider25 = fopen("Admini/25.txt",io_read);
				while(fread(lider25,text)) {
				strmid(aSlot25,text,0,strlen(text),255); }
				fclose(lider25);

				new File:lider26 = fopen("Admini/26.txt",io_read);
				while(fread(lider26,text)) {
				strmid(aSlot26,text,0,strlen(text),255); }
				fclose(lider26);

				new File:lider27 = fopen("Admini/27.txt",io_read);
				while(fread(lider27,text)) {
				strmid(aSlot27,text,0,strlen(text),255); }
				fclose(lider27);

				new File:lider28 = fopen("Admini/28.txt",io_read);
				while(fread(lider28,text)) {
				strmid(aSlot28,text,0,strlen(text),255); }
				fclose(lider28);

				new File:lider29 = fopen("Admini/29.txt",io_read);
				while(fread(lider29,text)) {
				strmid(aSlot29,text,0,strlen(text),255); }
				fclose(lider29);

				new File:lider30 = fopen("Admini/30.txt",io_read);
				while(fread(lider30,text)) {
				strmid(aSlot30,text,0,strlen(text),255); }
				fclose(lider30);

				strdel(DialogStrgEx,0,sizeof(DialogStrgEx));
				format(DialogStrgEx,sizeof(DialogStrgEx),"Slot 1: %s\nSlot 2: %s\nSlot 3: %s\nSlot 4: %s\nSlot 5: %s\nSlot 6: %s\nSlot 7: %s\nSlot 8: %s\nSlot 9: %s\nSlot 10: %s\nSlot 11: %s\nSlot 12: %s\nSlot 13: %s\nSlot 14: %s\nSlot 15: %s\nSlot 16: %s\nSlot 17: %s\nSlot 18: %s\nSlot 19: %s\nSlot 20: %s\nSlot 21: %s\nSlot 22: %s\nSlot 23: %s\nSlot 24: %s\nSlot 25: %s\nSlot 26: %s\nSlot 27: %s\nSlot 28: %s\nSlot 29: %s\nSlot 30: %s",
					aSlot1,
					aSlot2,
					aSlot3,
					aSlot4,
					aSlot5,
					aSlot6,
					aSlot7,
					aSlot8,
					aSlot9,
					aSlot10,
					aSlot11,
					aSlot12,
					aSlot13,
					aSlot14,
					aSlot15,
					aSlot16,
					aSlot17,
					aSlot18,
					aSlot19,
					aSlot20,
					aSlot21,
					aSlot22,
					aSlot23,
					aSlot24,
					aSlot25,
					aSlot26,
					aSlot27,
					aSlot28,
					aSlot29,
					aSlot30);
				SPD(playerid,dialog_EMPTY,DSMSG,D_NASLOV,DialogStrgEx,"U redu","");
				strdel(DialogStrgEx,0,sizeof(DialogStrgEx));
			}
		}
	}
}
else if(dialogid == dialog_SAVEZ) {

	if(response) {

		new id = GlobalProdaja[playerid];

		OI[PlayerInfo[playerid][xClan]][oSavez] = PlayerInfo[id][xClan];
		OI[PlayerInfo[id][xClan]][oSavez] = PlayerInfo[playerid][xClan];

		SaveOrganization(PlayerInfo[playerid][xClan]);
		SaveOrganization(PlayerInfo[id][xClan]);

		SendInfoMessage(playerid, "Cestitamo, sada ste u savezu sa %s.", OI[PlayerInfo[id][xClan]][oName]);
		SendInfoMessage(id, "Cestitamo, sada ste u savezu sa %s.", OI[PlayerInfo[playerid][xClan]][oName]);

		SendInfoMessage(playerid, "Mozete koristiti zajednicki chat izmedju lidera saveza i podlidera '/sa'.");
		SendInfoMessage(id, "Mozete koristiti zajednicki chat izmedju lidera saveza i podlidera '/sa'.");

		GlobalProdaja[playerid] = -1;
	}
	else if(!response) {

		new id = GlobalProdaja[playerid];

		SendInfoMessage(playerid, "Odbili ste savez sa %s.", OI[PlayerInfo[id][xClan]][oName]);
		SendInfoMessage(id, "Lider %s je odbio savez sa vama.", OI[PlayerInfo[playerid][xClan]][oName]);

		GlobalProdaja[playerid] = -1;
	}
}
else if(dialogid == dialog_VEHGOLDBUY) {
	if(response) {
		SendErrorMessage(playerid, "Kupovina zlatom je privremeno onemogucena.");
		new as = GetNearestSalon(playerid), slotid = AutoSalon[as][aIzlogVeh];
		if(as != -1) {
			AutoSalon[as][AlreadyBuying] = false;

			PlayerBuyingAS[playerid] = -1;
			ModelCar[playerid] = 0;

			Fusion_DestroyVehicle(VehicleInfo[slotid][vID]);
			VehicleInfo[slotid][vID] = Fusion_CreateVehicle(slotid, VehicleInfo[slotid][vUsage], VehicleInfo[slotid][vOrganization], VehicleInfo[slotid][vJob], VehicleInfo[slotid][vFuelStation], AutoSalon[as][aVehModel][0], VehicleInfo[slotid][vLokacijaX], VehicleInfo[slotid][vLokacijaY], VehicleInfo[slotid][vLokacijaZ]+1.0, VehicleInfo[slotid][vLokacijaA], -1, -1, -1);
			SetVehicleVirtualWorld(VehicleInfo[slotid][vID], AutoSalon[as][aVW]);
			ac_LinkVehicleToInterior(VehicleInfo[slotid][vID], AutoSalon[as][aInt]);

			BuyCarTDControl(playerid, false);
			TogglePlayerControllable(playerid, true);

			SetCameraBehindPlayer(playerid);
			CancelSelectTextDraw(playerid);
		}
	}
	else if(!response) {
		SendErrorMessage(playerid, "Kupovina zlatom je privremeno onemogucena.");
		new as = GetNearestSalon(playerid), slotid = AutoSalon[as][aIzlogVeh];
		if(as != -1) {
			AutoSalon[as][AlreadyBuying] = false;

			PlayerBuyingAS[playerid] = -1;
			ModelCar[playerid] = 0;

			Fusion_DestroyVehicle(VehicleInfo[slotid][vID]);
			VehicleInfo[slotid][vID] = Fusion_CreateVehicle(slotid, VehicleInfo[slotid][vUsage], VehicleInfo[slotid][vOrganization], VehicleInfo[slotid][vJob], VehicleInfo[slotid][vFuelStation], AutoSalon[as][aVehModel][0], VehicleInfo[slotid][vLokacijaX], VehicleInfo[slotid][vLokacijaY], VehicleInfo[slotid][vLokacijaZ]+1.0, VehicleInfo[slotid][vLokacijaA], -1, -1, -1);
			SetVehicleVirtualWorld(VehicleInfo[slotid][vID], AutoSalon[as][aVW]);
			ac_LinkVehicleToInterior(VehicleInfo[slotid][vID], AutoSalon[as][aInt]);

			BuyCarTDControl(playerid, false);
			TogglePlayerControllable(playerid, true);

			SetCameraBehindPlayer(playerid);
			CancelSelectTextDraw(playerid);
		}
	}
}
else if(dialogid == dialog_IZABERITABLICE) {

	if(response) {
		if(listitem == 0) {

			new izbor = PonudioIgrac[playerid];

			VehicleInfo[izbor][vTeh] = 3; SaveVehicle(izbor);
			SCM(playerid, SVETLOPLAVA, "Uzeo si tablice idi stavi ih na auto(/vehicle postavitable).");
			SCM(playerid, CRVENA, "Kada postavite tablice, auto se respawna.");
		}
		if(listitem == 1) {

			SPD(playerid, dialog_IZABERITABLICE_2, DSI, D_NASLOV, "Unesite zeljeni tekst, koji ce se nalaziti na vasim tablicama.\nMaksimum je 16 karaktera.", "Izaberi", "Odustani");
		}
	}
}
else if(dialogid == dialog_IZABERITABLICE_2) {

	if(response) {

		new izbor = PonudioIgrac[playerid];

		new plate[14];
		if(sscanf(inputtext, "s[14]", plate)) return SPD(playerid, dialog_IZABERITABLICE_2, DSI, D_NASLOV, "Unesite zeljeni tekst, koji ce se nalaziti na vasim tablicama.\nMaksimum je 16 karaktera.", "Izaberi", "Odustani");

		VehicleInfo[izbor][vTeh] = 4; SaveVehicle(izbor);
		strmid(VehicleInfo[izbor][vTablice], plate, 0, strlen(plate), 32);
		SaveVehicle(izbor);
		SendClientMessageEx(playerid, SVETLOPLAVA, "Uzeo si tablice sa natpison '%s' idi stavi ih na auto(/vehicle postavitable).", plate);
		SCM(playerid, CRVENA, "Kada postavite tablice, auto se respawna.");
	}
}
else if(dialogid == dialog_PUMPA) {

	if(response) {

		switch(listitem) {

			case 0: {

				SPD(playerid, dialog_IMEPUMPE, DSI, ""col_white"Ime Pumpe", ""col_white"Upisite novo ime pumpe\nZabranjeno je stavljati OOC ime pumpe!", "Unos", "Izlaz");
			}
			case 1: {

				SPD(playerid, dialog_DIZELCENA, DSI,""col_white"Cena goriva - Dizel",""col_white"Unesite novu cenu goriva po litri DIZELA", D_ODABERI, D_ODUSTANI);
			}
			case 2: {

				SPD(playerid, dialog_BENZINCENA, DSI, ""col_white"Cena goriva - Benzin",""col_white"Unesite novu cenu goriva po litri BENZINA", D_ODABERI, D_ODUSTANI);
			}
			case 3: {

				SPD(playerid, dialog_GASNOCENA, DSI, ""col_white"Cena goriva - Gasno Ulje",""col_white"Unesite novu cenu goriva po litri GASNOG ULJA", D_ODABERI, D_ODUSTANI);
			}
			case 4: {

				new fsID = IsThatFuelStationMy(playerid);
				if(fsID == -1) return SendErrorMessage(playerid, "Nemate u vlasnistvu nijednu pumpu.");

				SendClientMessageEx(playerid, -1, ""col_white"U odlagalistu ima jos "col_server"%d "col_white"litara dizela!", FuelStation[fsID][fsDieselL]);
				SendClientMessageEx(playerid, -1, ""col_white"U odlagalistu ima jos "col_server"%d "col_white"litara benzina!", FuelStation[fsID][fsGasolineL]);
				SendClientMessageEx(playerid, -1, ""col_white"U odlagalistu ima jos "col_server"%d "col_white"litara gasnog ulja!", FuelStation[fsID][fsGasOilL]);

			}
			case 5: {

				SendInfoMessage(playerid, "Lokacija naftne rafinerije je oznacena na mapi!");
				CheckpointStatus[playerid] = 15;
				Fusion_SetPlayerCheckpoint(playerid, 269.1654,1465.2311,10.5859, 5.0);
			}
			case 6: {

				SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, ""col_white"/pumpa /natocicisternu /ispraznicisternu", "U redu", "");
			}
			case 7: {

				new fsID = IsThatFuelStationMy(playerid);
				if(fsID == -1) return SendErrorMessage(playerid, "Nemate u vlasnistvu nijednu pumpu.");

				ac_SetVehicleToRespawn(VehicleInfo[FuelStation[fsID][fsTruckID]][vID]);
				ac_SetVehicleToRespawn(VehicleInfo[FuelStation[fsID][fsCisternID]][vID]);
				SendInfoMessage(playerid, "Respawnovali ste kamion i cisternu vase pumpe!");
			}
		}

	}

}
else if(dialogid == dialog_IMEPUMPE) {

	if(response) {

		new fsID = IsThatFuelStationMy(playerid);
		if(fsID == -1) return SendErrorMessage(playerid, "Nemate u vlasnistvu nijednu pumpu.");

		new ime[64];
		if(sscanf(inputtext, "s[64]", ime)) return SPD(playerid, dialog_IMEPUMPE, DSI, ""col_white"Ime Pumpe", ""col_white"Upisite novo ime pumpe\nZabranjeno je stavljati OOC ime pumpe!", "Unos", "Izlaz");

		strmid(FuelStation[fsID][fsName], ime, 0, strlen(ime), 64);
		FStation_Save(fsID);
		FStation_Refresh(fsID);
		SendInfoMessage(playerid, "Promenili ste ime pumpe u %s!", ime);
	}
}
else if(dialogid == dialog_DIZELCENA) {

	if(response) {

		if(!IsNumeric(inputtext)) {

			SendErrorMessage(playerid, "Mozete koristiti samo brojeve!");
			SPD(playerid, dialog_DIZELCENA, DSI,""col_white"Cena goriva - Dizel",""col_white"Unesite novu cenu goriva po litri DIZELA", D_ODABERI, D_ODUSTANI);
			return 1;
		}
		new cena = strval(inputtext);
		if(cena < 400 || cena > 800) {

			SendErrorMessage(playerid, "Cena ne moze biti manja od 400$ i veca od 800$!");
			SPD(playerid, dialog_DIZELCENA, DSI,""col_white"Cena goriva - Dizel",""col_white"Unesite novu cenu goriva po litri DIZELA", D_ODABERI, D_ODUSTANI);
			return 1;
		}

		new fsID = IsThatFuelStationMy(playerid);
		if(fsID == -1) return SendErrorMessage(playerid, "Nemate u vlasnistvu nijednu pumpu.");

		FuelStation[fsID][fsDieselPrice] = cena;
		FStation_Save(fsID);
		FStation_Refresh(fsID);

		SendInfoMessage(playerid, "Nova cena goriva po litri dizela je "col_server"%d$.", cena);

		format(varstring, sizeof(varstring), "[FG] Vesti | "col_white"Nova cena dizela po litru je %d$! Ime pumpe: %s.", cena, FuelStation[fsID][fsName]);
		OOCNews(0xFFA500AA, varstring);

	}
}
else if(dialogid == dialog_BENZINCENA) {

	if(response) {

		if(!IsNumeric(inputtext)) {

			SendErrorMessage(playerid, "Mozete koristiti samo brojeve!");
			SPD(playerid, dialog_BENZINCENA, DSI, ""col_white"Cena goriva - Benzin",""col_white"Unesite novu cenu goriva po litri BENZINA", D_ODABERI, D_ODUSTANI);
			return 1;
		}
		new cena = strval(inputtext);
		if(cena < 400 || cena > 800) {

			SendErrorMessage(playerid, "Cena nemoze biti manja od 400$ i veca od 800$!");
			SPD(playerid, dialog_BENZINCENA, DSI, ""col_white"Cena goriva - Benzin",""col_white"Unesite novu cenu goriva po litri BENZINA", D_ODABERI, D_ODUSTANI);
			return 1;
		}

		new fsID = IsThatFuelStationMy(playerid);
		if(fsID == -1) return SendErrorMessage(playerid, "Nemate u vlasnistvu nijednu pumpu.");

		FuelStation[fsID][fsGasolinePrice] = cena;
		FStation_Save(fsID);
		FStation_Refresh(fsID);

		SendInfoMessage(playerid, "Nova cena goriva po litri benzina je "col_server"%d$.", cena);

		format(varstring, sizeof(varstring), "[FG] Vesti | "col_white"Nova cena benzina po litru je %d$! Ime pumpe: %s.", cena, FuelStation[fsID][fsName]);
		OOCNews(0xFFA500AA, varstring);

	}
}
else if(dialogid == dialog_GASNOCENA) {

	if(response) {

		if(!IsNumeric(inputtext)) {

			SendErrorMessage(playerid, "Mozete koristiti samo brojeve!");
			SPD(playerid, dialog_GASNOCENA, DSI, ""col_white"Cena goriva - Gasno Ulje",""col_white"Unesite novu cenu goriva po litri GASNOG ULJA", D_ODABERI, D_ODUSTANI);
			return 1;
		}
		new cena = strval(inputtext);
		if(cena < 500 || cena > 1000) {

			SendErrorMessage(playerid, "Cena ne moze biti manja od 500$ i veca od 1000$!");
			SPD(playerid, dialog_GASNOCENA, DSI, ""col_white"Cena goriva - Gasno Ulje",""col_white"Unesite novu cenu goriva po litri GASNOG ULJA", D_ODABERI, D_ODUSTANI);
			return 1;
		}

		new fsID = IsThatFuelStationMy(playerid);
		if(fsID == -1) return SendErrorMessage(playerid, "Nemate u vlasnistvu nijednu pumpu.");

		FuelStation[fsID][fsGasOilPrice] = cena;
		FStation_Save(fsID);
		FStation_Refresh(fsID);

		SendInfoMessage(playerid, "Nova cena goriva po litri gasnog ulja je "col_server"%d$.", cena);

		format(varstring, sizeof(varstring), "[FG] Vesti | "col_white"Nova cena gasnog ulja po litru je %d$! Ime pumpe: %s.", cena, FuelStation[fsID][fsName]);
		OOCNews(0xFFA500AA, varstring);

	}
}
else if(dialogid == dialog_DELIVERPEPSI) {

	if(!response) return ac_RemovePlayerFromVehicle(playerid);
	if(response) {

		DeliverLevel[playerid] = 1;
		DeliverCar[playerid] = GetPlayerVehicleID(playerid);
		KamionUsed[GetPlayerVehicleID(playerid)] = playerid;
		SendJobMessage(playerid, "Pokrenuli ste razvoz pepsija po trafikama, sada vozite do skladista i utovarite kutije sa pepsijem!");
		SendInfoMessage(playerid, "Kutije sa pepsijem uzimate komandom /uzmikutiju!");

	}
}
else if(dialogid == dialog_NEONSHOP) {

	if(response) {

		new autoid = -1;

		if(ScriptIDVozila[GetPlayerVehicleID(playerid)] != -1) {

			autoid = ScriptIDVozila[GetPlayerVehicleID(playerid)];
		}

		if(listitem == 6) {

			if(PlayerInfo[playerid][xNovac] < 300) return SendErrorMessage(playerid, "Nemas 300$ kod sebe.");

			if(Neon[GetPlayerVehicleID(playerid)] == 1) {

				Neon[GetPlayerVehicleID(playerid)] = 0;
				DestroyDynamicObject(NeonObject1[GetPlayerVehicleID(playerid)]);
				DestroyDynamicObject(NeonObject2[GetPlayerVehicleID(playerid)]);
			}

			if(autoid != -1) {

				VehicleInfo[autoid][vNeon] = 0;
				SaveVehicle(autoid);
			}

			SendInfoMessage(playerid, "Uspesno ste skinuli Neonke sa auta i platili 300$ za usluge.");
			DajIgracuNovac(playerid, -300);

			BusinessNeonMoney(playerid, 150);
			return true;
		}
		else if(listitem < 6) {

			if(PlayerInfo[playerid][xNovac] < 10000) return SendErrorMessage(playerid, "Nemas 10000$ kod sebe.");

			if(autoid != -1 && VehicleInfo[autoid][vUsage] == PRIVATNO_VOZILO) {

				if(strcmp(ImeIgraca(playerid), VehicleInfo[autoid][vOwner], true) == 0) {

					switch(listitem) {

						case 0: {
							VehicleInfo[autoid][vNeon] = 18648;
						}
						case 1: {
							VehicleInfo[autoid][vNeon] = 18647;
						}
						case 2: {
							VehicleInfo[autoid][vNeon] = 18649;
						}
						case 3: {
							VehicleInfo[autoid][vNeon] = 18652;
						}
						case 4: {
							VehicleInfo[autoid][vNeon] = 18651;
						}
						case 5: {
							VehicleInfo[autoid][vNeon] = 18650;
						}
					}
					NeonObject1[GetPlayerVehicleID(playerid)] = CreateDynamicObject(VehicleInfo[autoid][vNeon], 0, 0, 1500, 0, 0, 0);
					NeonObject2[GetPlayerVehicleID(playerid)] = CreateDynamicObject(VehicleInfo[autoid][vNeon], 0, 0, 1500, 0, 0, 0);
					AttachDynamicObjectToVehicle(NeonObject1[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					AttachDynamicObjectToVehicle(NeonObject2[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					Neon[GetPlayerVehicleID(playerid)] = 1;
					SaveVehicle(autoid);
				}
			}
			else if(autoid == -1) {
				new neonka;
				switch(listitem) {

					case 0: {
						neonka = 18648;
					}
					case 1: {
						neonka = 18647;
					}
					case 2: {
						neonka = 18649;
					}
					case 3: {
						neonka = 18652;
					}
					case 4: {
						neonka = 18651;
					}
					case 5: {
						neonka = 18650;
					}

				}
				NeonObject1[GetPlayerVehicleID(playerid)] = CreateDynamicObject(neonka, 0, 0, 1500, 0, 0, 0);
				NeonObject2[GetPlayerVehicleID(playerid)] = CreateDynamicObject(neonka, 0, 0, 1500, 0, 0, 0);
				AttachDynamicObjectToVehicle(NeonObject1[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				AttachDynamicObjectToVehicle(NeonObject2[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				Neon[GetPlayerVehicleID(playerid)] = 1;
			}

			SendInfoMessage(playerid, "Uspesno ste ugradili Neonke sa auta i platili 10000$.");
			DajIgracuNovac(playerid, -10000);
			BusinessNeonMoney(playerid, 1000);
		}
	}
}
else if(dialogid == dialog_PARKING) {

	if(response) {

		new parkID = GetNearestParkingZone(playerid);
		if(parkID == -1) return SendErrorMessage(playerid, "Nisi u nijednoj parking zoni.");

		if(ParkingPlaces[parkID][listitem][parkTaken]) return SendErrorMessage(playerid, "Ovo mesto je zauzeto.");

		ParkingPlace[playerid] = listitem;
		SPD(playerid, dialog_PARKING_2, DSI, D_NASLOV, ""col_white"Unesite koliko minuta zelite da iznajmite parking mesto.", D_ODABERI, D_ODUSTANI);

	}
}
else if(dialogid == dialog_PARKING_2) {

	if(response) {

		new parkID = GetNearestParkingZone(playerid);
		if(parkID == -1) return SendErrorMessage(playerid, "Nisi u nijednoj parking zoni.");

		new id = ParkingPlace[playerid];

		new minuti;
		if(sscanf(inputtext, "i", minuti)) return SPD(playerid, dialog_PARKING_2, DSI, D_NASLOV, ""col_white"Unesite koliko minuta zelite da iznajmite parking mesto.", D_ODABERI, D_ODUSTANI);

		if(minuti < 1 || minuti > 120) return SendErrorMessage(playerid, "Ne moze ispod 1 minut ili iznad 120 minuta.");

		if(PlayerInfo[playerid][xNovac] < minuti*50) return SendErrorMessage(playerid, "Nemate dovoljno novca(%d$).", minuti*50);

		format(varstring, sizeof(varstring), "* %s ubacuje novce u aparat za parking.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

		DajIgracuNovac(playerid, minuti*50);

		SendInfoMessage(playerid, "Platili ste %d$ za koriscenje parking mesta na %d minuta.", minuti*50, minuti);

		ParkingPlaces[parkID][id][parkTaken] = true;

		ac_SetVehiclePos(GetPlayerVehicleID(playerid), ParkingPlaces[parkID][id][parkPlace_X], ParkingPlaces[parkID][id][parkPlace_Y], ParkingPlaces[parkID][id][parkPlace_Z]);
		SetVehicleZAngle(GetPlayerVehicleID(playerid), ParkingPlaces[parkID][id][parkPlace_A]);

		ac_SetPlayerPos(playerid, ParkingInfo[parkID][parkPickup_1_Pos][0], ParkingInfo[parkID][parkPickup_1_Pos][1], ParkingInfo[parkID][parkPickup_1_Pos][2]);

		ParkingPlace[playerid] = -1;

		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
		ac_SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, 1, bonnet, boot, objective);

		Parked[GetPlayerVehicleID(playerid)] = id;
		ParkingTime[GetPlayerVehicleID(playerid)] = SetTimerEx("VehicleParkTimer", minuti*60000, false, "ii", parkID, GetPlayerVehicleID(playerid));
	}
}
else if(dialogid == dialog_PARKING_3) {

	if(response) {

		new parkID = GetNearestParkingZone(playerid);
		if(parkID == -1) return SendErrorMessage(playerid, "Nisi u nijednoj parking zoni.");

		ParkingPlaces[parkID][Parked[GetPlayerVehicleID(playerid)]][parkTaken] = false;

		Parked[GetPlayerVehicleID(playerid)] = -1;
		Fusion_KillTimer(ParkingTime[GetPlayerVehicleID(playerid)]);

		SendInfoMessage(playerid, "Ovo vozilo vise nema iznajmljeno mesto za parkiranje.");

	}
	else if(!response) {

		new Float:Poz[3];
		GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
		ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]+2);
		ac_RemovePlayerFromVehicle(playerid);

	}
}

if(dialogid == dialog_PLifT1){
	if(response){
		if (listitem == 0){
			if(IsPlayerConnected(playerid)){
				MoveDynamicObject(plift1, 1836.9537, -1314.4675, 85.1479, 2.5);
			}
		}
		if (listitem == 1){
			if(IsPlayerConnected(playerid)){
				MoveDynamicObject(plift1, 1836.9537, -1314.4675, 92.5639, 2.5);
				}
			}
		if (listitem == 2){
			if(IsPlayerConnected(playerid)){
				MoveDynamicObject(plift1, 1836.9537, -1314.4675, 16.7479, 2.5);
			}
		}
		}
}
if(dialogid == dialog_PLifT2){
	if(response){
		if (listitem == 0){
			if(IsPlayerConnected(playerid)){
				MoveDynamicObject(plift2, 1836.9340, -1294.2676, 85.1769, 2.5);
			}
		}
		if (listitem == 1){
			if(IsPlayerConnected(playerid)){
				MoveDynamicObject(plift2, 1836.9340, -1294.2676, 92.6699, 2.5);
				}
			}
		if (listitem == 2){
			if(IsPlayerConnected(playerid)){
				MoveDynamicObject(plift2, 1836.93396, -1294.26758, 16.7479, 2.5);
			}
		}
		}
}

if(dialogid == dialog_PLifT3){
	if(response){
		if (listitem == 0){
			if(IsPlayerConnected(playerid)){
				MoveDynamicObject(plift3, 1836.9340, -1274.0641, 85.1479, 2.5);
			}
		}
		if (listitem == 1){
			if(IsPlayerConnected(playerid)){
				MoveDynamicObject(plift3, 1836.9340, -1274.0641, 92.6699, 2.5);
				}
			}
		if (listitem == 2){
			if(IsPlayerConnected(playerid)){
				MoveDynamicObject(plift3, 1836.9340, -1274.0641, 16.7479, 2.5);
			}
		}
		}
}

if(dialogid == dialog_PD_ENT)
{
	if(response)
	{
		if (listitem == 0)
		{
			if(IsPlayerConnected(playerid))
			{
				SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 0);
				ac_SetPlayerPos(playerid, 1571.845703, -1675.535034, 28.395463);
				GameTextForPlayer(playerid, "~w~Krov",5000,1);
				ac_SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);

			}
		}
		if (listitem == 1)
		{
			if(IsPlayerConnected(playerid))
			{
				SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 0);
				ac_SetPlayerPos(playerid, 1524.483032, -1677.824707, 6.218750);
				GameTextForPlayer(playerid, "~w~Garaza",5000,1);
				ac_SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);

			}
		}
		}
}

if(dialogid == dialog_PD_KROV)
{
	if(response)
	{
		if (listitem == 0)
		{
			if(IsPlayerConnected(playerid))
			{
				SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 0);
				ac_SetPlayerPos(playerid, 691.1639, 2005.1420, -22.3034);
				GameTextForPlayer(playerid, "~w~Enterijer",5000,1);
				ac_SetPlayerInterior(playerid,12);
				SetPlayerVirtualWorld(playerid,1);
			}
		}
		if (listitem == 1)
		{
			if(IsPlayerConnected(playerid))
			{
				SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 0);
				ac_SetPlayerPos(playerid, 1524.483032, -1677.824707, 6.218750);
				GameTextForPlayer(playerid, "~w~Garaza",5000,1);
				ac_SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
		}
		}
}


if(dialogid == dialog_PD_GARAZA)
{
	if(response)
	{
		if (listitem == 0)
		{
			if(IsPlayerConnected(playerid))
			{
				SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 0);
				ac_SetPlayerPos(playerid, 691.1639, 2005.1420, -22.3034);
				GameTextForPlayer(playerid, "~w~Enterijer",5000,1);
				ac_SetPlayerInterior(playerid,12);
				SetPlayerVirtualWorld(playerid,1);
			}
		}
		if (listitem == 1)
		{
			if(IsPlayerConnected(playerid))
			{
				SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 0);
				ac_SetPlayerPos(playerid, 1571.845703, -1675.535034, 28.395463);
				GameTextForPlayer(playerid, "~w~Krov",5000,1);
				ac_SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
		}
		}
}
if(dialogid == dialog_KGUN13)
{
	if(response)
	{
	DajIgracuNovac(playerid,-7000);
	BusinessMoney(uFirmi[playerid], 700, playerid);
		Fusion_SetPlayerArmour(playerid, 100.0);
	SendInfoMessage(playerid, "Kupili ste Pancir!");
	SavePlayer(playerid);

	}
}
if(dialogid == dialog_KGUN12)
{
	if(response)
	{
	DajIgracuNovac(playerid,-12000);
	BusinessMoney(uFirmi[playerid], 1200, playerid);
	GiveWeaponToPlayer(playerid, 34,100);
	SendInfoMessage(playerid, "Kupili ste Sniper Rifle!");
	SavePlayer(playerid);

	}
}
if(dialogid == dialog_KGUN11)
{
	if(response)
	{
	DajIgracuNovac(playerid,-12000);
	BusinessMoney(uFirmi[playerid], 1200, playerid);
	GiveWeaponToPlayer(playerid, 33,100);
	SendInfoMessage(playerid, "Kupili ste Country Rifle!");
	SavePlayer(playerid);

	}
}
if(dialogid == dialog_KGUN10)
{
	if(response)
	{
	DajIgracuNovac(playerid,-8000);
	BusinessMoney(uFirmi[playerid], 800, playerid);
	GiveWeaponToPlayer(playerid, 32,100);
	SendInfoMessage(playerid, "Kupili ste Tec 9!");
	SavePlayer(playerid);

	}
}
if(dialogid == dialog_KGUN9)
{
	if(response)
	{
	DajIgracuNovac(playerid,-12000);
	BusinessMoney(uFirmi[playerid], 1200, playerid);
	GiveWeaponToPlayer(playerid, 31,100);
	SendInfoMessage(playerid, "Kupili ste M 4!");
	SavePlayer(playerid);

	}
}
if(dialogid == dialog_KGUN8)
{
	if(response)
	{
	DajIgracuNovac(playerid,-12000);
	BusinessMoney(uFirmi[playerid], 1200, playerid);
	GiveWeaponToPlayer(playerid, 30,100);
	SendInfoMessage(playerid, "Kupili ste AK 47!");
	SavePlayer(playerid);

	}
}
if(dialogid == dialog_KGUN7)
{
	if(response)
	{
	DajIgracuNovac(playerid,-10000);
	BusinessMoney(uFirmi[playerid], 1000, playerid);
	GiveWeaponToPlayer(playerid, 29,100);
	SendInfoMessage(playerid, "Kupili ste MP 5!");
	SavePlayer(playerid);

	}
}
if(dialogid == dialog_KGUN6)
{
	if(response)
	{
	DajIgracuNovac(playerid,-8000);
	BusinessMoney(uFirmi[playerid], 800, playerid);
	GiveWeaponToPlayer(playerid, 28,100);
	SendInfoMessage(playerid, "Kupili ste Micro Uzi!");
	SavePlayer(playerid);

	}
}
if(dialogid == dialog_KGUN5)
{
	if(response)
	{
	DajIgracuNovac(playerid,-15000);
	BusinessMoney(uFirmi[playerid], 1500, playerid);
	GiveWeaponToPlayer(playerid, 27,100);
	SendInfoMessage(playerid, "Kupili ste Combat Shotgun!");
	SavePlayer(playerid);

	}
}
if(dialogid == dialog_KGUN4)
{
	if(response)
	{
	DajIgracuNovac(playerid,-15000);
	BusinessMoney(uFirmi[playerid], 1500, playerid);
	GiveWeaponToPlayer(playerid, 26,1);
	SendInfoMessage(playerid, "Kupili ste Sawn-Off Shotgun!");
	SavePlayer(playerid);

	}
}
if(dialogid == dialog_KGUN3)
{
	if(response)
	{
	DajIgracuNovac(playerid,-8000);
	BusinessMoney(uFirmi[playerid], 800, playerid);
	GiveWeaponToPlayer(playerid, 25,100);
	SendInfoMessage(playerid, "Kupili ste Shotgun!");
	SavePlayer(playerid);

	}
}
if(dialogid == dialog_KGUN2)
{
	if(response)
	{
	DajIgracuNovac(playerid,-9000);
	BusinessMoney(uFirmi[playerid], 900, playerid);
	GiveWeaponToPlayer(playerid, 24,100);
	SendInfoMessage(playerid, "Kupili ste Desert Eagle!");
	SavePlayer(playerid);

	}
}
if(dialogid == dialog_KGUN1)
{
	if(response)
	{
	DajIgracuNovac(playerid,-5000);
	BusinessMoney(uFirmi[playerid], 500, playerid);
	GiveWeaponToPlayer(playerid, 22,100);
	SendInfoMessage(playerid, "Kupili ste 9mm Pistol!");
	SavePlayer(playerid);
	}
}
else if(dialogid == dialog_VEHMONEYBUY) {

	if(response) {

		new as = GetNearestSalon(playerid), slotid = AutoSalon[as][aIzlogVeh];
		if(as != -1) {
			if(ServerInfo[BrojKreiranihVozila] > MaxBrojKreiranih) return SCM(playerid, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Nemoguce je trenutno kupiti vozilo, limit vozila na serveru je dosegnut.");
			if(PlayerInfo[playerid][xNovac] < VehPrice[AutoSalon[as][aVehModel][ModelCar[playerid]]- 400][1]) return SendErrorMessage(playerid, "Nemas dovoljno novca.");

			if(PlayerInfo[playerid][xVoziloID][0] == -1) {}
			else if(PlayerInfo[playerid][xVoziloID][1] == -1) {}
			else if(PlayerInfo[playerid][xVoziloID][2] == -1) {}
			else if(PlayerInfo[playerid][xVoziloID][3] == -1) {
				if(PlayerInfo[playerid][xDonatorSlot] == true) {}
				else return SendErrorMessage(playerid, "Svi slotovi vozila su vam zauzeti.");
			}
			else return SendErrorMessage(playerid, "Svi slotovi vozila su vam zauzeti.");

			if(PlayerInfo[playerid][xLevel] < 5) return SendErrorMessage(playerid, "Morate biti level 5+ da bi ste kupili vozilo.");

			if(AutoSalon[as][aVehAmmount][ModelCar[playerid]] == 0) return SendErrorMessage(playerid, "Nemamo vise ovih modela u prodaji.");

			for(new i = 1; i < MAX_CARS; i++) {
				new fileauta[40];
				format(fileauta, sizeof(fileauta), V_FILE, i);
				if(!fexist(fileauta)) {
					VehicleInfo[i][vOwned] = 1;
					VehicleInfo[i][vNeaktivnost] = 0;
					VehicleInfo[i][vPrice] = VehPrice[AutoSalon[as][aVehModel][ModelCar[playerid]]- 400][1];
					strmid(VehicleInfo[i][vOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 32);
					VehicleInfo[i][vLocked] = 0;
					VehicleInfo[i][vLokacijaX] = AutoSalon[as][aVehBuyedPos][0];
					VehicleInfo[i][vLokacijaY] = AutoSalon[as][aVehBuyedPos][1];
					VehicleInfo[i][vLokacijaZ] = AutoSalon[as][aVehBuyedPos][2];
					VehicleInfo[i][vLokacijaA] = AutoSalon[as][aVehBuyedPos][3];
					VehicleInfo[i][vVirtualWorld] = 0;
					VehicleInfo[i][vInterior] = 0;
					VehicleInfo[i][vUsage] = PRIVATNO_VOZILO;
					VehicleInfo[i][vJob] = -1;
					VehicleInfo[i][vOrganization] = -1;
					VehicleInfo[i][vFuelStation] = -1;
					VehicleInfo[i][vColor1] = 0;
					VehicleInfo[i][vColor2] = 0;
					VehicleInfo[i][vModel] = AutoSalon[as][aVehModel][ModelCar[playerid]];
					VehicleInfo[i][vReg] = 0;
					VehicleInfo[i][vRegVreme] = 0;
					VehicleInfo[i][vTeh] = 0;
					VehicleInfo[i][vGPS] = 0;
					VehicleInfo[i][vOsiguranje] = 5;
					VehicleInfo[i][vLock] = 0;
					VehicleInfo[i][vAlarm] = 0;
					VehicleInfo[i][vTuned] = 0;
					VehicleInfo[i][vNeon] = 0;
					VehicleInfo[i][vImobilizator] = 0;
					VehicleInfo[i][vSpoiler] = 0;
					VehicleInfo[i][vHood] = 0;
					VehicleInfo[i][vRoof] = 0;
					VehicleInfo[i][vSkirt] = 0;
					VehicleInfo[i][vLamps] = 0;
					VehicleInfo[i][vNitro] = 0;
					VehicleInfo[i][vExhaust] = 0;
					VehicleInfo[i][vWheels] = 0;
					VehicleInfo[i][vStereo] = 0;
					VehicleInfo[i][vHydraulics] = 0;
					VehicleInfo[i][vFrontBumper] = 0;
					VehicleInfo[i][vRearBumper] = 0;
					VehicleInfo[i][vVents] = 0;
					VehicleInfo[i][vPaintJob] = 255;
					VehicleInfo[i][vProvera] = i;
					VehicleInfo[i][vMaterijali] = 0;
					VehicleInfo[i][vDrug][0] = 0; VehicleInfo[i][vDrug][1] = 0; VehicleInfo[i][vDrug][2] = 0; VehicleInfo[i][vDrug][3] = 0; VehicleInfo[i][vDrug][4] = 0; VehicleInfo[i][vDrug][5] = 0;
					VehicleInfo[i][vDrugCode][0] = 0; VehicleInfo[i][vDrugCode][1] = 0; VehicleInfo[i][vDrugCode][2] = 0; VehicleInfo[i][vDrugCode][3] = 0; VehicleInfo[i][vDrugCode][4] = 0; VehicleInfo[i][vDrugCode][5] = 0;
					VehicleInfo[i][vMelee] = 0; VehicleInfo[i][vWeap1] = 0; VehicleInfo[i][vAmmo1] = 0; VehicleInfo[i][vWeap2] = 0; VehicleInfo[i][vAmmo2] = 0;
					VehicleInfo[i][vGajbica][0] = -1; VehicleInfo[i][vGajbica][1] = -1; VehicleInfo[i][vGajbica][2] = -1; VehicleInfo[i][vGajbica][3] = -1; VehicleInfo[i][vGajbica][4] = -1;
					VehicleInfo[i][vGajbicaAmmount][0] = 0; VehicleInfo[i][vGajbicaAmmount][1] = 0; VehicleInfo[i][vGajbicaAmmount][2] = 0; VehicleInfo[i][vGajbicaAmmount][3] = 0; VehicleInfo[i][vGajbicaAmmount][4] = 0;
					VehicleInfo[i][vID] = Fusion_CreateVehicle(i, PRIVATNO_VOZILO, -1, -1, -1, VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ]+1.0, VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], 300000);
					ac_LinkVehicleToInterior(VehicleInfo[i][vID], VehicleInfo[i][vInterior]);
					SetVehicleVirtualWorld(VehicleInfo[i][vID], VehicleInfo[i][vVirtualWorld]);
					VehicleInfo[i][vFuel] = getAmountFuel(VehicleInfo[i][vID]); vCanDrive[VehicleInfo[i][vID]] = 1; Fuel[VehicleInfo[i][vID]] = getAmountFuel(VehicleInfo[i][vID]);
					SetVehicleNumberPlate(VehicleInfo[i][vID], "NEMA"); UnLockCar(VehicleInfo[i][vID]);
					SaveVehicle(i);
					carspawntimer = 1; ResetVehicleStatistics(VehicleInfo[i][vID]);
					SetTimer("AntiSpawnCrash", 3000, 0);

					if(Diesel(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 1;
					else if(Gasoline(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 2;
					else if(GasOil(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 3;


					ac_SetVehicleParamsEx(VehicleInfo[i][vID], 0, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
					if(IsVehicleBajs(VehicleInfo[i][vID])) {
						ac_SetVehicleParamsEx(VehicleInfo[i][vID], 1, 0, 0, VehicleInfo[i][vLocked], 0, 0, 0);
					}

					DajIgracuNovac(playerid, -VehPrice[AutoSalon[as][aVehModel][ModelCar[playerid]]- 400][1]);

					if(PlayerInfo[playerid][xVoziloID][0] == -1){ PlayerInfo[playerid][xVoziloID][0] = i;}
					else if(PlayerInfo[playerid][xVoziloID][1] == -1) { PlayerInfo[playerid][xVoziloID][1] = i;}
					else if(PlayerInfo[playerid][xVoziloID][2] == -1) { PlayerInfo[playerid][xVoziloID][2] = i;}
					else if(PlayerInfo[playerid][xVoziloID][3] == -1) { PlayerInfo[playerid][xVoziloID][3] = i;}
					SavePlayer(playerid);

					new string[128];
					format(string, sizeof(string), "Igrac %s je kupio vozilo %s u salonu ID %d", ImeIgraca(playerid), ImeVozila[AutoSalon[as][aVehModel][ModelCar[playerid]]-400], as);
					LogSave("Ostalo/LogKupiVozilo.log", string);

					AutoSalon[as][aVehAmmount][ModelCar[playerid]]--;
					AutoSalon[as][AlreadyBuying] = false;
					SaveSalon(as);

					PlayerBuyingAS[playerid] = -1;
					ModelCar[playerid] = 0;

					Fusion_DestroyVehicle(VehicleInfo[slotid][vID]);
					VehicleInfo[slotid][vID] = Fusion_CreateVehicle(i, VehicleInfo[slotid][vUsage], VehicleInfo[slotid][vOrganization], VehicleInfo[slotid][vJob], VehicleInfo[slotid][vFuelStation], AutoSalon[as][aVehModel][0], VehicleInfo[slotid][vLokacijaX], VehicleInfo[slotid][vLokacijaY], VehicleInfo[slotid][vLokacijaZ]+1.0, VehicleInfo[slotid][vLokacijaA], -1, -1, -1);
					SetVehicleVirtualWorld(VehicleInfo[slotid][vID], AutoSalon[as][aVW]);
					ac_LinkVehicleToInterior(VehicleInfo[slotid][vID], AutoSalon[as][aInt]);

					BuyCarTDControl(playerid, false);
					TogglePlayerControllable(playerid, true);

					SetCameraBehindPlayer(playerid);
					CancelSelectTextDraw(playerid);
					SendInfoMessage(playerid, "Uspesno ste kupili vozilo, oznaceno vam je na radaru markerom.");

					Fusion_SetPlayerCheckpoint(playerid, VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ], 5.0);
					CheckpointStatus[playerid] = 15;
					break;
				}
			}
		}
	}
	else if(!response) {

		new as = GetNearestSalon(playerid), slotid = AutoSalon[as][aIzlogVeh];
		if(as != -1) {
			AutoSalon[as][AlreadyBuying] = false;

			PlayerBuyingAS[playerid] = -1;
			ModelCar[playerid] = 0;

			Fusion_DestroyVehicle(VehicleInfo[slotid][vID]);
			VehicleInfo[slotid][vID] = Fusion_CreateVehicle(slotid, VehicleInfo[slotid][vUsage], VehicleInfo[slotid][vOrganization], VehicleInfo[slotid][vJob], VehicleInfo[slotid][vFuelStation], AutoSalon[as][aVehModel][0], VehicleInfo[slotid][vLokacijaX], VehicleInfo[slotid][vLokacijaY], VehicleInfo[slotid][vLokacijaZ]+1.0, VehicleInfo[slotid][vLokacijaA], -1, -1, -1);
			SetVehicleVirtualWorld(VehicleInfo[slotid][vID], AutoSalon[as][aVW]);
			ac_LinkVehicleToInterior(VehicleInfo[slotid][vID], AutoSalon[as][aInt]);

			BuyCarTDControl(playerid, false);
			TogglePlayerControllable(playerid, true);

			SetCameraBehindPlayer(playerid);
			CancelSelectTextDraw(playerid);
		}

	}
}
return true;}

public ZaustaviWAR(w) {
WARInfo[w][WARAktivan] = false;
WARInfo[w][WARKreiranje] = false;
Fusion_KillTimer(WARInfo[w][WARTimer]);

if(WARInfo[w][WARTimSkor][0] > WARInfo[w][WARTimSkor][1]) {
	DajIgracuNovac(WARInfo[w][WARTimLider][0], (WARInfo[w][WARCena]*2));}

if(WARInfo[w][WARTimSkor][1] > WARInfo[w][WARTimSkor][0]) {
	DajIgracuNovac(WARInfo[w][WARTimLider][1], (WARInfo[w][WARCena]*2));}

if(WARInfo[w][WARTimSkor][0] == WARInfo[w][WARTimSkor][1]) {
	DajIgracuNovac(WARInfo[w][WARTimLider][0], WARInfo[w][WARCena]);
	DajIgracuNovac(WARInfo[w][WARTimLider][1], WARInfo[w][WARCena]);}

foreach(new i : Player) {
	if(WARPInfo[i][WARIgrac] == w) {

		if(WARInfo[w][WARTimSkor][0] > WARInfo[w][WARTimSkor][1]) {
			if(WARPInfo[i][WARTim][0]) {
				SendClientMessageEx(i, -1, "{FFAF00]WAR {FFFFFF]| {FFAF00]Pobedili ste i vasa organizacija je dobila {FFFFFF]%d!", (WARInfo[w][WARCena]*2));
			}
		}

		if(WARInfo[w][WARTimSkor][1] > WARInfo[w][WARTimSkor][0]) {
			if(WARPInfo[i][WARTim][1]) {
				SendClientMessageEx(i, -1, "{FFAF00]WAR {FFFFFF]| {FFAF00]Pobedili ste i vasa organizacija je dobila {FFFFFF]%d!", (WARInfo[w][WARCena]*2));
			}
		}


		new string[128];
			SCM(i, -1, string);
			format(string, sizeof(string), ""col_orange"WAR "col_white"| "col_orange"Tvoj Skor "col_white"|  "col_orange"Ubistva: "col_white"%d "col_white"| "col_orange"Smrti: "col_white"%d", WARPInfo[i][WARUbistva], WARPInfo[i][WARSmrti]);
			SCM(i, -1, string);
			format(string, sizeof(string), ""col_orange"WAR "col_white"| "col_orange"Tim 1: "col_white"%s "col_white"| "col_orange"Tim 2: "col_white"%s", getOrgName(WARInfo[w][WARTeamID][0]), getOrgName(WARInfo[w][WARTeamID][1]));
			SCM(i, -1, string);
			format(string, sizeof(string), ""col_orange"WAR zavrsen "col_white"| {F81414]Tim 1: "col_white"%d | {0049FF]Tim 2: "col_white"%d", WARInfo[w][WARTimSkor][0], WARInfo[w][WARTimSkor][1]);
			SCM(i, -1, string);

		Fusion_SetPlayerHealth(i, 100);
		Fusion_SetPlayerArmour(i, 0);

		antiCheatCS[i][TeleportCheck] = 4;
		antiCheatCS[i][WeaponDetect] = 3;

		ac_SetPlayerPos(i, PozicijaWAR[i][0], PozicijaWAR[i][1],  PozicijaWAR[i][2]);
		SetPlayerVirtualWorld(i, VirtualWWAR[i]);
		ac_SetPlayerInterior(i, InteriorWAR[i]);

		ResetAllWeapons(i);

		WARPInfo[i][WARIgrac] = -1;

		ResetujWarIgraca(i);

		WarTDControl(i, false);
	}
}
WARInfo[w][WARCena] = 0;
WARInfo[w][WARMaxClanova] = 0;
WARInfo[w][WARTimClanovi][0] = 0;
WARInfo[w][WARTimClanovi][1] = 0;
WARInfo[w][WARTimSkor][0] = 0;
WARInfo[w][WARTimSkor][1] = 0;
WARInfo[w][WARTeamID][0] = -1;
WARInfo[w][WARTeamID][1] = -1;
return true;}

public TimerWAROstaloVremeB(w) {
if(WARInfo[w][WARAktivan] == false) { WARInfo[w][TimerWARMin] = 1; WARInfo[w][TimerWARSec] =0; Fusion_KillTimer(WARInfo[w][TimerWAROstaloVreme]); }
WARInfo[w][TimerWARSec]++;
if(WARInfo[w][TimerWARSec] == 60) { WARInfo[w][TimerWARMin]++; WARInfo[w][TimerWARSec] = 0;}
foreach(new i : Player) {
	if(WARPInfo[i][WARIgrac] == w) {
		new vreme_string[10];
		if(WARInfo[w][TimerWARSec] >= 51) {
			format(vreme_string, sizeof(vreme_string), "%d:0%d",10*60000/60000 - WARInfo[w][TimerWARMin], 10*60000/10000 - WARInfo[w][TimerWARSec]);
		}
		else if(WARInfo[w][TimerWARMin] >= 6) {
			format(vreme_string, sizeof(vreme_string), "0%d:%d",10*60000/60000 - WARInfo[w][TimerWARMin], 10*60000/10000 - WARInfo[w][TimerWARSec]);
		}
		else if(WARInfo[w][TimerWARSec] >= 51 && WARInfo[w][TimerWARMin] >= 6) {
			format(vreme_string, sizeof(vreme_string), "0%d:0%d",10*60000/60000 - WARInfo[w][TimerWARMin], 10*60000/10000 - WARInfo[w][TimerWARSec]);
		}
		else {
			format(vreme_string, sizeof(vreme_string), "%d:%d",10*60000/60000 - WARInfo[w][TimerWARMin], 10*60000/10000 - WARInfo[w][TimerWARSec]);
		}
		PlayerTextDrawSetString(i, WARTextDraw[i][8],  vreme_string);
	}
}
return 1;}
stock GetPlayerIdFromName(playername[]) {
foreach(new i : Player) {
	if(IsPlayerConnected(i)) {
		new playername2[MAX_PLAYER_NAME] ;
		GetPlayerName(i, playername2, sizeof(playername2));
		if(strcmp(playername2, playername, true, strlen(playername)) == 0)
		{
			return i;
		}
	}
}
return INVALID_PLAYER_ID;}

public OnPlayerClickPlayer(playerid, clickedplayerid, source) {
new string[128], name[MAX_PLAYER_NAME];
GetPlayerName(clickedplayerid, name, sizeof(name));

format(string, sizeof(string), "Ime: %s\nTelefon: %d", name, PlayerInfo[clickedplayerid][xBrojTelefona]);
SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, string, "OK", "");
return true;}

CMD:scp(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
SPD(playerid, dialog_SERVERMI, DSL, D_NASLOV, "Upravljanje serverom\nSacuvaj naloge\nNapravi\nIzbrisi\nIzmeni\nSpisak organizacija", D_ODABERI, D_ODUSTANI);
return true;}
CMD:anticheat(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6) {
	new id, code, status, string1[256];
	if(sscanf(params, "uii", id, code, status))
	{
		SendUsageMessage(playerid, "/anticheat [ID/Deo Imena] [AC Kod] [0 (iskljuci) | 1 (ukljuci)]");
		SendUsageMessage(playerid, "Ova komanda sluzi da ukljucite/iskljucite odredjenu AC detekciju za odredjenog igraca.");
		SendUsageMessage(playerid, "Popis svih detekcija i njihovih kodova se nalaze na forumu u AFG sekciji.");
		return 1;
	}
	if(id == IPI) return SendErrorMessage(playerid, "Igrac je offline.");
	if(status > 1 || status < 0) return SendErrorMessage(playerid, "Status moze biti samo iskljucen (0) ili ukljucen (1).");
	if(status == 0)
	{
		format(string1, sizeof string1, ""col_server" [ FG:RPG ] : "col_white"Iskljucili ste %s detekciju za igraca %s.", GetCheatType(code), ImeIgraca(id));
		SendClientMessage(playerid,-1,string1);
		EnableAntiCheatForPlayer(id, code, 0);
		format(string1, sizeof(string1), "Admin %s je iskljucio %s detekciju igracu %s.", ImeIgraca(playerid), GetCheatType(code), ImeIgraca(id));
		LogSave("Ostalo/LogAntiCheatCMD.log", string1);
		return 1;
	}
	if(status == 1)
	{
		format(string1, sizeof string1, ""col_server" [ FG:RPG ] : "col_white"Ukljucili ste %s detekciju za igraca %s.", GetCheatType(code), ImeIgraca(id));
		SendClientMessage(playerid,-1,string1);
		EnableAntiCheatForPlayer(id, code, 1);
		format(string1, sizeof(string1), "Admin %s je ukljucio %s detekciju igracu %s.", ImeIgraca(playerid), GetCheatType(code), ImeIgraca(id));
		LogSave("Ostalo/LogAntiCheatCMD.log", string1);	   	
		return 1;
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
//////////////////////////WALK OF FAME KOMANDE//////////////////////////////////
CMD:prodajwof(playerid, params[])
{
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new wof;
if(sscanf(params, "i", wof)) return SendUsageMessage(playerid, "/prodajwof (id)");
WOFInfo[wof][fImaVlasnika] = 0;
strmid(WOFInfo[wof][fVlasnik], "Niko", 0, strlen("Niko"), 255);
SacuvajWOF(wof);
WOFLabelIPickup(wof);
SendInfoMessage(playerid, "Prodali ste WOF ID:%d!",wof);
return true;}
CMD:obrisiwof(playerid, params[])
{
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new id;
if(sscanf(params, "i", id)) return SendUsageMessage(playerid, "/obrisiwof (id)");
DestroyDynamic3DTextLabel(WOFLabel[id]);
	ac_DestroyDynamicPickup(WOFPickup[id]);
	WOFInfo[id][fWOFX] = 0;
WOFInfo[id][fWOFY] = 0;
	WOFInfo[id][fWOFZ] = 0;
	WOFInfo[id][fImaVlasnika] = 0;
WOFInfo[id][fPostavljen] = 0;
strmid(WOFInfo[id][fVlasnik],"Niko",0,strlen("Niko"),255);
WOFInfo[id][fCena] = 0;
SacuvajWOF(id);
new woff[128];
format(woff,128,"WalkOfFame/WOF_%d.ini",id);
fremove(woff);
SendInfoMessage(playerid, "Obrisali ste WOF ID:%d!",id);
return true;}
CMD:napraviwof(playerid, params[])
{
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new string[512];
new wofid = 0;
new Float:X, Float:Y, Float:Z;
GetPlayerPos(playerid, X,Y,Z);
for(new b = 0; b < sizeof(WOFInfo); b++)
{
	if(WOFInfo[b][fPostavljen] == 1)
	{
		wofid = b + 1;
	}
}
if(wofid > MAX_WOF) return SendErrorMessage(playerid, "Ne mozete napraviti vise od 100 WOF-a.");
	new cena;
	if(sscanf(params, "i", cena)) return SendUsageMessage(playerid, "/napraviwof (cena)");
	WOFInfo[wofid][fWOFX] = X;
	WOFInfo[wofid][fWOFY] = Y;
	WOFInfo[wofid][fWOFZ] = Z;
WOFInfo[wofid][fImaVlasnika] = 0;
WOFInfo[wofid][fPostavljen] = 1;
WOFInfo[wofid][fCena] = cena;
strmid(WOFInfo[wofid][fVlasnik],"Niko",0,strlen("Niko"),255);
format(string,sizeof(string),"Walk Of Fame: {FFFFFF]WOF ID:%d je napravljen.",wofid);
SCM(playerid,SIVA,string);
WOFLabelIPickup(wofid);
SacuvajWOF(wofid);
return true;}
CMD:donatewof(playerid, params[])
{
new id = UzmiIDWOF(playerid);
if(id == -1 || id == 0) return SendErrorMessage(playerid, "Niste u blizini plocice.");
if(PlayerInfo[playerid][xWOF] != -1) return SendErrorMessage(playerid, "Vi vec posedujete Vasu plocicu.");
if(PlayerInfo[playerid][xNovac] < WOFInfo[id][fCena]) return SendErrorMessage(playerid, "Nemate dovoljno novca.");
if(WOFInfo[id][fImaVlasnika] != 0) return SendErrorMessage(playerid, "Ova plocica je vec u vlasnistvu igraca.");
DajIgracuNovac(playerid, -WOFInfo[id][fCena]);
PlayerInfo[playerid][xWOF] = id;
SavePlayer(playerid);

WOFInfo[id][fImaVlasnika] = 1;
strmid(WOFInfo[id][fVlasnik], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), MAX_PLAYER_NAME);

SacuvajWOF(id);
WOFLabelIPickup(id);

SendInfoMessage(playerid, "Kupili ste Walk Of Fame plocicu!");
return (true);}

CMD:trenutnekordinate(playerid, params[]) {
new Float:Pos[3];
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
SendInfoMessage(playerid, "Trenutno ste na kordinatama %f %f %f.", Pos[0], Pos[1], Pos[2]);
return true;}

CMD:sastavitiket(playerid, params[]) {

if(uFirmi[playerid] == -1) return SendErrorMessage(playerid, "Morate biti u kladionici.");
if(BusinessInfo[uFirmi[playerid]][bType] != VRSTA_KLAD) return SendErrorMessage(playerid, "Morate biti u kladionici.");

if(KladionicaListic[playerid][Uplaceno]) {
	SendErrorMessage(playerid, "Vec imas uplacen tiket.");
	SendErrorMessage(playerid, "Ukoliko hoces novi moras stari da bacis.");
	SendErrorMessage(playerid, "Komanda /bacitiket.");
	return true;}

//if(PlayerInfo[playerid][xGodine] < 18) return SendErrorMessage(playerid, "Nemate 18 godina.");

if(!ListaPrikazana[playerid]) {
	KladionicaTDControl(playerid, true);
	ClearChat(playerid, 25);
	SendInfoMessage(playerid, "Da ugasis listu kucaj /sastavitiket.");}
else if(ListaPrikazana[playerid]) {
	KladionicaTDControl(playerid, false);}
//SendInfoMessage(playerid, "Komanda trenutno nije u funkciji.");
return true;}

CMD:bacitiket(playerid, params[]) {

if(!KladionicaListic[playerid][Uplaceno]) return SendErrorMessage(playerid, "Nemate uplacen tiket.");

for(new i = 0; i < 10; i++) {
	KladionicaListic[playerid][parID][i] = -1;
	KladionicaListic[playerid][keciksdva][i] = -1;
	KladionicaListic[playerid][Kvota][i] = 0.0;
	KladionicaListic[playerid][teamID1][i] = -1;
	KladionicaListic[playerid][teamID2][i] = -1;}
KladionicaListic[playerid][Uplaceno] = false;
KladionicaListic[playerid][Zavrseno] = false;
KladionicaListic[playerid][Uplata] = 0;
	KladionicaListic[playerid][Dobitak] = 0;
	KladionicaListic[playerid][Status] = false;

	SaveKladionica(playerid);

	SendInfoMessage(playerid, "Uspesno ste bacili tiket.");
return true;}

CMD:rezultati(playerid, params[]) {

if(uFirmi[playerid] == -1) return SendErrorMessage(playerid, "Morate biti u kladionici.");
if(BusinessInfo[uFirmi[playerid]][bType] != VRSTA_KLAD) return SendErrorMessage(playerid, "Morate biti u kladionici.");

if(PlayerInfo[playerid][xGodine] < 18) return SendErrorMessage(playerid, "Nemate 18 godina.");

if(!RezultatiPrikazana[playerid]) {
	RezultatiTDControl(playerid, true);
	ClearChat(playerid, 25);
	SendInfoMessage(playerid, "Da ugasis listu rezultata kucaj /rezultati.");}
else if(RezultatiPrikazana[playerid]) {
	RezultatiTDControl(playerid, false);}
return true;}

CMD:podignitiket(playerid, params[]) {

if(uFirmi[playerid] == -1) return SendErrorMessage(playerid, "Morate biti u kladionici.");
if(BusinessInfo[uFirmi[playerid]][bType] != VRSTA_KLAD) return SendErrorMessage(playerid, "Morate biti u kladionici.");

if(PlayerInfo[playerid][xGodine] < 18) return SendErrorMessage(playerid, "Nemate 18 godina.");

if(!KladionicaListic[playerid][Uplaceno]) return SendErrorMessage(playerid, "Nemate uplacen tiket.");
if(!KladionicaListic[playerid][Zavrseno]) return SendErrorMessage(playerid, "Utakmice nisu zavrsene.");
if(!KladionicaListic[playerid][Status]) return SendErrorMessage(playerid, "Vas tiket nije prosao.");

DajIgracuNovac(playerid, floatround(KladionicaListic[playerid][Dobitak]));

SendInfoMessage(playerid, "Dobili ste %.2f$ na kladionici. Cestitamo.", KladionicaListic[playerid][Dobitak]);
//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");

for(new i = 0; i < 10; i++) {
	KladionicaListic[playerid][parID][i] = -1;
	KladionicaListic[playerid][keciksdva][i] = -1;
	KladionicaListic[playerid][Kvota][i] = 0.0;
	KladionicaListic[playerid][teamID1][i] = -1;
	KladionicaListic[playerid][teamID2][i] = -1;}
KladionicaListic[playerid][Uplaceno] = false;
KladionicaListic[playerid][Zavrseno] = false;
KladionicaListic[playerid][Uplata] = 0;
	KladionicaListic[playerid][Dobitak] = 0;
	KladionicaListic[playerid][Status] = false;
SaveKladionica(playerid);

return true;}

CMD:mojlistic(playerid, params[]) {

if(!KladionicaListic[playerid][Uplaceno]) return SendErrorMessage(playerid, "Nemate uplacen tiket.");
if(!MojListicPrikazan[playerid]) {
	KladionicaListicTDControl(playerid, true);
	ClearChat(playerid, 25);
	SendInfoMessage(playerid, "Da ugasis prikaz tiketa kucaj /mojlistic.");}
else if(MojListicPrikazan[playerid]) {
	KladionicaListicTDControl(playerid, false);}
return true;}

CMD:adresa(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

new adresa[38];

if(sscanf(params, "s[38]", adresa)) {
	SendUsageMessage(playerid, "/adresa [Nova adresa]");
	return 1;}
new im = GetNearestProperty(playerid);
if(GetNearestProperty(playerid) == -1) return SendErrorMessage(playerid, "Nema imovine u vasoj blizini!");
if(strlen(params) > 38) return SendErrorMessage(playerid, "Adresa ne moze biti duza od 38 karaktera.");

strmid(II[im][iAdress], adresa, 0, strlen(adresa), 32);
SaveProperty(im);
PropertyRefresh(im);

return true;}

CMD:neaktivnost(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

new izbor, id, File[64];

if(sscanf(params, "ii", izbor, id)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/neaktivnost [izbor] [ID]");
	SCM(playerid, BELA, "[Izbor] 1. imovina | 2. firma | 3. vozilo");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(izbor == 1) {
	format(File, sizeof(File), IM_FILE, id);
	if(!fexist(File)) return SendErrorMessage(playerid, "Ta imovina(ID) ne postoji u bazi podataka!");

	SendInfoMessage(playerid, "Neaktivnost imovine ID - %d je %dh.", id, II[id][iNeaktivnost]);}
else if(izbor == 2) {
	format(File, sizeof(File), F_FILE, id);
	if(!fexist(File)) return SendErrorMessage(playerid, "Ta firma(ID) ne postoji u bazi podataka!");

	SendInfoMessage(playerid, "Neaktivnost firme ID - %d je %dh.", id, BusinessInfo[id][bNeaktivnost]);}
else if(izbor == 3) {
	format(File, sizeof(File), V_FILE, id);
	if(!fexist(File)) return SendErrorMessage(playerid, "To vozilo(ID) ne postoji u bazi podataka!");

	SendInfoMessage(playerid, "Neaktivnost vozila ID - %d je %dh.", id, VehicleInfo[id][vNeaktivnost]);}
else return SendErrorMessage(playerid, "Pogresan izbor(1-3).");
return true;}

CMD:edit(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
new vrsta, izbor, kolicina;
new varstring[80];
if(sscanf(params, "iii", vrsta, izbor, kolicina)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/edit [vrsta] [izbor] [kolicina]");
	SCM(playerid, BELA, "[VRSTA] 1. imovina | 2. firma ");
	SCM(playerid, BELA, "[IZBOR] 1. level | 2. cena | 3. fakture ");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(vrsta == 1) {
	new id = GetNearestProperty(playerid);
	if(GetNearestProperty(playerid) == -1) return SendErrorMessage(playerid, "Nema imovine u vasoj blizini!");
	if(izbor == 1) {
		II[id][iLevel] = kolicina;
		PropertyRefresh(id);
		SaveProperty(id);
		format(varstring, sizeof(varstring), "Izmenili ste level imovine(ID: %d) u %d!", id, II[id][iLevel]);
		SCM(playerid, FUSIONGAMING, varstring);

		new string1[128];
		format(string1, sizeof(string1), "Admin %s je izmenio level na imovini ID %d u %d", ImeIgraca(playerid), id, kolicina);
		LogSave("Ostalo/LogEditCommand.log", string1);

	}
	else if(izbor == 2) {
		II[id][iPrice] = kolicina;
		PropertyRefresh(id);
		SaveProperty(id);
		format(varstring, sizeof(varstring), "Izmenili ste cenu imovine(ID: %d) u %d$!", id, II[id][iPrice]);
		SCM(playerid, FUSIONGAMING, varstring);

		new string1[128];
		format(string1, sizeof(string1), "Admin %s je izmenio cenu na imovini ID %d u %d$", ImeIgraca(playerid), id, kolicina);
		LogSave("Ostalo/LogEditCommand.log", string1);
	}
	else if(izbor == 3) {
		SendErrorMessage(playerid, "Ne mozete koristiti ovu opciju na imovinama.");
		return 1;
	}
	else return SendErrorMessage(playerid, "Pogresan izbor levela ili cene.");}
else if(vrsta == 2) {
	new id = GetNearestBusiness(playerid);
	if(GetNearestBusiness(playerid) == -1) return SendErrorMessage(playerid, "Nema firme u vasoj blizini!");
	if(izbor == 1) {
		BusinessInfo[id][bLevel] = kolicina;
		Business_Refresh(id);
		SaveBusiness(id);
		format(varstring, sizeof(varstring), "Izmenili ste level firme(ID: %d) u %d!", id, BusinessInfo[id][bLevel]);
		SCM(playerid, FUSIONGAMING, varstring);
		new string1[128];
		format(string1, sizeof(string1), "Admin %s je izmenio level na firmi ID %d u %d", ImeIgraca(playerid), id, kolicina);
		LogSave("Ostalo/LogEditCommand.log", string1);
	}
	else if(izbor == 2) {
		BusinessInfo[id][bPrice] = kolicina;
		Business_Refresh(id);
		SaveBusiness(id);
		format(varstring, sizeof(varstring), "Izmenili ste cenu firme(ID: %d) u %d$!", id, BusinessInfo[id][bPrice]);
		SCM(playerid, FUSIONGAMING, varstring);
		new string1[128];
		format(string1, sizeof(string1), "Admin %s je izmenio cenu na firmi ID %d u %d$", ImeIgraca(playerid), id, kolicina);
		LogSave("Ostalo/LogEditCommand.log", string1);
	}
	else if(izbor == 3) {
		BusinessInfo[id][bFacture] = kolicina;
		Business_Refresh(id);
		SaveBusiness(id);
		format(varstring, sizeof(varstring), "Izmenili ste fakture firme(ID: %d) na %d!", id, BusinessInfo[id][bFacture]);
		SCM(playerid, FUSIONGAMING, varstring);
		new string1[128];
		format(string1, sizeof(string1), "Admin %s je izmenio fakture na firmi ID %d u %d", ImeIgraca(playerid), id, kolicina);
		LogSave("Ostalo/LogEditCommand.log", string1);
	}
	else return SendErrorMessage(playerid, "Pogresan izbor levela ili cene.");}
else return SendErrorMessage(playerid, "Pogresan izbor firme ili imovine.");
return true;}

CMD:dajsvima(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

new vrsta, kolicina;
new varstring[128];

if(sscanf(params, "ii", vrsta, kolicina)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/dajsvima [Vrsta] [kolicina]");
	SCM(playerid, BELA, "[Vrsta] 1. Level | 2. Novac | 3. Respekt");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(kolicina < 1) return SendErrorMessage(playerid, "Kolicina ne moze biti ispod 1.");
if(vrsta == 1) {
	if(kolicina > 2) return SendErrorMessage(playerid, "Ne mozete dati vise od 2 levela.");
	foreach(new i : Player) {
		if(i != INVALID_PLAYER_ID && PlayerLogged[i] != false) {
			PlayerInfo[i][xLevel] += kolicina;
			SetPlayerScore(i, PlayerInfo[i][xLevel]);
		}
	}
	SendInfoMessage(playerid, "Dali ste svim igracima Level UP.");
	format(varstring, sizeof(varstring), ""col_server"|:.Fusion Gaming:.| "col_white"Vlasnik %s je nagradio sve igrace sa %d levela.", ImeIgraca(playerid), kolicina);
	SCMA(-1, varstring);
	return true;}
else if(vrsta == 2) {
	if(kolicina > 200000) return SendErrorMessage(playerid, "Ne mozete dati vise od 200 000$.");
	foreach(new i : Player) {
		if(i != INVALID_PLAYER_ID && PlayerLogged[i] != false) {
			DajIgracuNovac(i, kolicina);
		}
	}
	SendInfoMessage(playerid, "Dali ste svim igracima novac.");
	format(varstring, sizeof(varstring), ""col_server"|:.Fusion Gaming:.| "col_white"Vlasnik %s je nagradio sve igrace sa %d$.", ImeIgraca(playerid), kolicina);
	SCMA(-1, varstring);
	return true;}
else if(vrsta == 3) {
	if(kolicina > 10) return SendErrorMessage(playerid, "Ne mozete dati vise 10 respekta.");
	foreach(new i : Player) {
		if(i != INVALID_PLAYER_ID && PlayerLogged[i] != false) {
			PlayerInfo[i][xRespekt] += kolicina;
		}
	}
	SendInfoMessage(playerid, "Dali ste svim igracima Respect UP.");
	format(varstring, sizeof(varstring), ""col_server"|:.Fusion Gaming:.| "col_white"Vlasnik %s je nagradio sve igrace sa %d respekta.", ImeIgraca(playerid), kolicina);
	SCMA(-1, varstring);
	return true;}
return true;}

CMD:vozilohelp(playerid, params[]) {
SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");
SCM(playerid, -1, ""col_server"VOZILO HELP | "col_white"/vozilo /vehicle /gepek /lock /upali /ugasi /windows");
SCM(playerid, -1, ""col_server"VOZILO HELP | "col_white"/eject /dajkljuc /oduzmikljuc /tune /neon /tempomat"); 
SCM(playerid, -1, ""col_server"OBIJANJE HELP | "col_white"/obijbravu /zica /prekiniobijanje");
SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");
return 1;}

CMD:pljackahelp(playerid, params[]) {
SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");
SCM(playerid, -1, ""col_server"PLJACKA HELP | "col_white"/knockout /kpu /tie /untie /rob");
SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");
return 1;}

CMD:garazahelp(playerid, params[]) {
SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");
SCM(playerid, -1, ""col_server"GARAZA HELP | "col_white"/kupigarazu /garaza /genter /gexit");
SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");
return 1;}

CMD:kupigarazu(playerid, params[]) {
new id = GetNearestGarage(playerid);

if(id == -1) return SendErrorMessage(playerid, "U blizini nema nijedne garaze.");
if(PlayerInfo[playerid][xGarageID] != -1) return SendErrorMessage(playerid, "Vec posedujete jednu garazu.");
if(PlayerInfo[playerid][xNovac] < garageInfo[id][garagePrice]) return SendErrorMessage(playerid, "Nemate dovoljno novca %d.", garageInfo[id][garagePrice]);
if(PlayerInfo[playerid][xLevel] < garageInfo[id][garageLevel]) return SendErrorMessage(playerid, "Morate biti %d level da bi kupili ovu garazu.", garageInfo[id][garageLevel]);

DajIgracuNovac(playerid, -garageInfo[id][garagePrice]);
PlayerInfo[playerid][xGarageID] = id;
SavePlayer(playerid);

garageInfo[id][garageOwned] = true;
strmid(garageInfo[id][garageOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), MAX_PLAYER_NAME);

Garage_Save(id);
Garage_Refresh(id);

SendInfoMessage(playerid, "Kupili ste garazu za %d.", garageInfo[id][garagePrice]);
return (true);}

CMD:garaza(playerid, params[]) {
if(PlayerInfo[playerid][xGarageID] == -1) return SendErrorMessage(playerid, "Nemate garazu.");
SPD(playerid, dialog_GARAZA, DSL, D_NASLOV, "Info\nZakljucaj/Otkljucaj\nProdaj Drzavi\nProdaj Igracu", D_ODABERI, D_ODUSTANI);
return true;}

CMD:gexit(playerid, params[]) {

if(EnteredGarage[playerid] == -1) return SendErrorMessage(playerid, "Niste u garazi.");
new id = EnteredGarage[playerid];

	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
		AntiSK(playerid);
	SetPlayerPos(playerid, garageInfo[id][garagePos][0], garageInfo[id][garagePos][1], garageInfo[id][garagePos][2]);
	GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
	SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, false);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	EnteredGarage[playerid] = -1;}
	else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		AntiSK(playerid);
	new vehicle = GetPlayerVehicleID(playerid);
	ac_LinkVehicleToInterior(vehicle, 0);
	SetVehicleVirtualWorld(vehicle, 0);
	SetVehiclePos(vehicle, garageInfo[id][garageVehiclePos][0], garageInfo[id][garageVehiclePos][1], garageInfo[id][garageVehiclePos][2]);
	SetVehicleZAngle(vehicle, garageInfo[id][garageVehiclePos][3]);
	GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
	SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, false);
	ac_SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	EnteredGarage[playerid] = -1;}
else return SendErrorMessage(playerid, "Komandu mozes koristiti samo ako si na nogama ili na vozacevom mestu.");

return true;}

CMD:genter(playerid, params[]) {

new id = GetNearestGarage(playerid);
if(id == -1) return SendErrorMessage(playerid, "Nema garaze u blizini.");
new gtype = garageInfo[id][garageType];
if(garageInfo[id][garageLocked] == true) return SendErrorMessage(playerid, "Ova garaza je zakljucana.");

if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
	AntiSK(playerid);
	SetPlayerPos(playerid, GarageInteriors[gtype][0], GarageInteriors[gtype][1], GarageInteriors[gtype][2]);
	GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
	SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, false);
	ac_SetPlayerInterior(playerid, floatround(GarageInteriors[gtype][4]));
	SetPlayerVirtualWorld(playerid, garageInfo[id][garageVW]);
	SetPlayerFacingAngle(playerid, GarageInteriors[gtype][3]);
	EnteredGarage[playerid] = id;
	SendInfoMessage(playerid, "Da izadjete iz garaze kucajte /gexit.");}
	else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
	AntiSK(playerid);
	new vehicle = GetPlayerVehicleID(playerid);
	ac_LinkVehicleToInterior(vehicle, floatround(GarageInteriors[gtype][4]));
	SetVehicleVirtualWorld(vehicle, garageInfo[id][garageVW]);
	SetVehiclePos(vehicle, GarageInteriors[gtype][0], GarageInteriors[gtype][1], GarageInteriors[gtype][2]);
	GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
	SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, false);
	ac_SetPlayerInterior(playerid, floatround(GarageInteriors[gtype][4]));
	SetPlayerVirtualWorld(playerid, garageInfo[id][garageVW]);
	SetVehicleZAngle(vehicle, GarageInteriors[gtype][3]);
	EnteredGarage[playerid] = id;
	SendInfoMessage(playerid, "Da izadjete iz garaze kucajte /gexit.");}
else return SendErrorMessage(playerid, "Komandu mozes koristiti samo ako si na nogama ili na vozacevom mestu.");
return true;}

CMD:imanjehelp(playerid, params[]) {
SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");
SCM(playerid, -1, ""col_server"IMANJE HELP | "col_white"/kupiimanje /imanje /oberibiljku /kupiseme /posadibiljku");
SCM(playerid, -1, ""col_server"IMANJE HELP | "col_white"/prodajvoce /prodajkupus /prodajruze /kupigajbicu /bacigajbicu");
SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");
return 1;}

CMD:kupiimanje(playerid, params[]) {
new id = GetNearestField(playerid);

if(id == -1) return SendErrorMessage(playerid, "U blizini nema nijednog imanja.");
if(fieldInfo[id][fieldOwned] == true) return SendErrorMessage(playerid, "Vec je kupljeno ovo imanje.");
if(PlayerInfo[playerid][xFieldID] != -1) return SendErrorMessage(playerid, "Vec posedujete jedno imanje.");
if(PlayerInfo[playerid][xNovac] < fieldInfo[id][fieldPrice]) return SendErrorMessage(playerid, "Nemate dovoljno novca %d.", fieldInfo[id][fieldPrice]);
if(PlayerInfo[playerid][xLevel] < fieldInfo[id][fieldLevel]) return SendErrorMessage(playerid, "Morate biti %d level da bi kupili ovo imanje.", fieldInfo[id][fieldLevel]);

DajIgracuNovac(playerid, -fieldInfo[id][fieldPrice]);
PlayerInfo[playerid][xFieldID] = id;
SavePlayer(playerid);

fieldInfo[id][fieldOwned] = true;
strmid(fieldInfo[id][fieldOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), MAX_PLAYER_NAME);

Field_Save(id);
Field_Refresh(id);

SendInfoMessage(playerid, "Kupili ste imanje za %d.", fieldInfo[id][fieldPrice]);
return (true);}

CMD:imanje(playerid, params[]) {
if(PlayerInfo[playerid][xFieldID] == -1) return SendErrorMessage(playerid, "Nemate imanje.");
SPD(playerid, dialog_IMANJE, DSL, D_NASLOV, "Info\nProdaj Drzavi\nProdaj Igracu", D_ODABERI, D_ODUSTANI);
return true;}

CMD:kupigajbicu(playerid, params[]) {
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 947.6482, -1653.0104, 13.5432)) return SendErrorMessage(playerid, "Morate biti na pijaci da bi kupili praznu gajbicu.");
if(PlayerInfo[playerid][xNovac] < 50) return SendErrorMessage(playerid, "Nemate dovoljno novca 50$.");
if(PraznaGajbica[playerid] == true && GajbicaBiljka[playerid] != 0) return SendErrorMessage(playerid, "Vec imate gajbicu u rukama.");
DajIgracuNovac(playerid, -50);
PraznaGajbica[playerid] = true;
SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 19639, 1, 0.10, 0.46, -0.01, 0.0, 89.0, 85.0, 1.04, 1.00, 1.00);
SendInfoMessage(playerid, "Uspesno ste kupili praznu gajbicu.");
ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1);
return (true);}

CMD:bacigajbicu(playerid, params[]) {
if(PraznaGajbica[playerid] == false) return SendErrorMessage(playerid, "Nemate praznu gajbicu u rukama.");
PraznaGajbica[playerid] = false;
if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
SendInfoMessage(playerid, "Uspesno ste bacili praznu gajbicu.");
ClearAnimations(playerid);
return (true);}

CMD:oberibiljku(playerid, params[]) {
new fid = PlayerInfo[playerid][xFieldID], id = GetNearestStalk(playerid), randbiljka = random(5)+4;
if(IsPlayerInDynamicArea(playerid, fieldInfo[fid][fieldRectAngle])) {
	if(id == -1) return SendErrorMessage(playerid, "Nema biljke u blizini.");
	if(stalkInfo[id][sHour] >= 0 && stalkInfo[id][sMinut] >= 1) return SendErrorMessage(playerid, "Ova biljka jos nije spremna za branje.");
	if(stalkInfo[id][sGrow] != true) return SendErrorMessage(playerid, "Ova biljka jos nije spremna za branje.");
	if(PraznaGajbica[playerid] != true) return SendErrorMessage(playerid, "Nemate praznu gajbicu u rukama.");

	PraznaGajbica[playerid] = false;
	if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);

	if(stalkInfo[id][sType] == BILJKA_SLJIVA) {
		GajbicaBiljka[playerid] = BILJKA_SLJIVA;
		PlayerInfo[playerid][xSljive] += randbiljka;
		SendInfoMessage(playerid, "Obrali ste sljive i dobili ste %d komada.Ukupno: %d.", randbiljka, PlayerInfo[playerid][xSljive]);
		stalkInfo[id][sMinut] = 0;
		stalkInfo[id][sHour] = 20;
	}
	else if(stalkInfo[id][sType] == BILJKA_KRUSKA) {
		GajbicaBiljka[playerid] = BILJKA_KRUSKA;
		PlayerInfo[playerid][xKruske] += randbiljka;
		SendInfoMessage(playerid, "Obrali ste kruske i dobili ste %d komada.Ukupno: %d.", randbiljka, PlayerInfo[playerid][xKruske]);
		stalkInfo[id][sMinut] = 0;
		stalkInfo[id][sHour] = 22;
	}
	else if(stalkInfo[id][sType] == BILJKA_JABUKA) {
		GajbicaBiljka[playerid] = BILJKA_JABUKA;
		PlayerInfo[playerid][xJabuke] += randbiljka;
		SendInfoMessage(playerid, "Obrali ste jabuke i dobili ste %d komada.Ukupno: %d.", randbiljka, PlayerInfo[playerid][xJabuke]);
		stalkInfo[id][sMinut] = 0;
		stalkInfo[id][sHour] = 24;
	}
	else if(stalkInfo[id][sType] == BILJKA_KUPUS) {
		GajbicaBiljka[playerid] = BILJKA_KUPUS;
		PlayerInfo[playerid][xKupus] += randbiljka;
		SendInfoMessage(playerid, "Obrali ste kupus i dobili ste %d komada.Ukupno: %d.", randbiljka, PlayerInfo[playerid][xKupus]);
		stalkInfo[id][sMinut] = 0;
		stalkInfo[id][sHour] = 18;
	}
	else if(stalkInfo[id][sType] == BILJKA_RUZE) {
		GajbicaBiljka[playerid] = BILJKA_RUZE;
		PlayerInfo[playerid][xRuze] += randbiljka;
		SendInfoMessage(playerid, "Obrali ste ruze i dobili ste %d komada.Ukupno: %d.", randbiljka, PlayerInfo[playerid][xRuze]);
		stalkInfo[id][sMinut] = 0;
		stalkInfo[id][sHour] = 15;
	}

	fieldInfo[fid][fieldStalkNumber]--;
	Field_Save(fid);

	stalkInfo[id][sGrow] = false;
	Stalk_Save(id);

	new string[180], vrsta[10];

	if(stalkInfo[id][sType] == BILJKA_SLJIVA) { vrsta = "Sljiva";}
	else if(stalkInfo[id][sType] == BILJKA_KRUSKA) { vrsta = "Kruska";}
		else if(stalkInfo[id][sType] == BILJKA_JABUKA) { vrsta = "Jabuka";}
	else if(stalkInfo[id][sType] == BILJKA_KUPUS) { vrsta = "Kupus";}
	else if(stalkInfo[id][sType] == BILJKA_RUZE) { vrsta = "Ruze";}

	format(string, sizeof(string), "Biljka jos nije izrasla!\nVreme do izrastanja: %d sati, %d minuta\nVrsta biljke: %s", stalkInfo[id][sHour], stalkInfo[id][sMinut], vrsta);
	UpdateDynamic3DTextLabelText(stalkInfo[id][s3D], BELA, string);

	SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 19636, 1, 0.10, 0.46, -0.01, 0.0, 89.0, 85.0, 1.04, 1.00, 1.00);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1);

} else return SendErrorMessage(playerid, "Morati biti na svom imanju.");
return (true);}
CMD:jedivoce(playerid, params[]) {
SendErrorMessage(playerid, "Trenutno nedostupno.");
return (true);}

CMD:prodajkupus(playerid, params[]) {
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 947.7814,-1658.5892,13.5466)) return SendErrorMessage(playerid, "Morate biti na pijaci da bi prodali kupus.");
new kolicina = PlayerInfo[playerid][xKupus];
if(GajbicaBiljka[playerid] != BILJKA_KUPUS) return SendErrorMessage(playerid, "Nemate gajbicu sa kupusom u rukama.");
if(kolicina == 0) return SendErrorMessage(playerid, "Nemate kupus.");

DajIgracuNovac(playerid, (kolicina*23));
PlayerInfo[playerid][xKupus] -= kolicina;

SendInfoMessage(playerid, "Prodali ste "col_white"%d"col_server" kupusa za "col_white"%d"col_server"$.", kolicina, (kolicina*23));

if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
ClearAnimations(playerid);
return (true);}

CMD:prodajruze(playerid, params[]) {
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 426.6609, -1791.3032, 5.6260)) return SendErrorMessage(playerid, "Morate biti u cvecari kod plaze.");
new kolicina = PlayerInfo[playerid][xRuze];
if(GajbicaBiljka[playerid] != BILJKA_RUZE) return SendErrorMessage(playerid, "Nemate gajbicu sa ruzama u rukama.");
if(kolicina == 0) return SendErrorMessage(playerid, "Nemate ruze.");

DajIgracuNovac(playerid, (kolicina*28));
PlayerInfo[playerid][xRuze] -= kolicina;

SendInfoMessage(playerid, "Prodali ste "col_white"%d"col_server" ruza za "col_white"%d"col_server"$.", kolicina, (kolicina*28));

if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
ClearAnimations(playerid);
return (true);}
CMD:prodajvoce(playerid, params[]) {
new IDFirme = GetNearestBusiness2(playerid);
if(IDFirme == -1) return SendErrorMessage(playerid, "Morate biti na ulazu marketa da bi ste prodali voce.");
if(BusinessInfo[IDFirme][bType] != VRSTA_MARKET) return SendErrorMessage(playerid, "Morate biti na ulazu marketa da bi ste prodali voce.");
new vrsta, cena, kolicina;
if(sscanf(params, "i", vrsta)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/prodajvoce [broj vrste]");
	SCM(playerid, BELA, "[Vrsta] 1. Sljiva(55$) | 2. Kruska(50$) | 3. Jabuka(45$)");
	//SendClientMessageEx(playerid, BELA, "[Imate] %d Sljiva | %d Krusaka | %d Jabuka", PlayerInfo[playerid][xSljive], PlayerInfo[playerid][xKruske], PlayerInfo[playerid][xJabuke]);
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(vrsta == 1) {
	if(GajbicaBiljka[playerid] != BILJKA_SLJIVA) return SendErrorMessage(playerid, "Nemate gajbicu sa sljivama u ruke.");
	cena = 55, kolicina = PlayerInfo[playerid][xSljive];
	if(kolicina == 0) return SendErrorMessage(playerid, "Nemate sljive.");
	//if(PlayerInfo[playerid][xSljive] < kolicina) return SendErrorMessage(playerid, "Nemate toliko sljiva kod sebe.");

	DajIgracuNovac(playerid, (kolicina*cena));
	PlayerInfo[playerid][xSljive] -= kolicina;

	SendInfoMessage(playerid, "Prodali ste "col_white"%d"col_server" sljiva za "col_white"%d"col_server"$.", kolicina, (kolicina*cena));

	if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
	ClearAnimations(playerid);}
else if(vrsta == 2) {
	if(GajbicaBiljka[playerid] != BILJKA_KRUSKA) return SendErrorMessage(playerid, "Nemate gajbicu sa kruskama u ruke.");
	cena = 50, kolicina = PlayerInfo[playerid][xKruske];
	if(kolicina == 0) return SendErrorMessage(playerid, "Nemate kruske.");
	//if(PlayerInfo[playerid][xKruske] < kolicina) return SendErrorMessage(playerid, "Nemate toliko krusaka kod sebe.");

	DajIgracuNovac(playerid, (kolicina*cena));
	PlayerInfo[playerid][xKruske] -= kolicina;

	SendInfoMessage(playerid, "Prodali ste "col_white"%d"col_server" krusaka za "col_white"%d"col_server"$.", kolicina, (kolicina*cena));

	if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
	ClearAnimations(playerid);}
else if(vrsta == 3) {
	if(GajbicaBiljka[playerid] != BILJKA_JABUKA) return SendErrorMessage(playerid, "Nemate gajbicu sa jabukama u ruke.");
	cena = 45, kolicina = PlayerInfo[playerid][xJabuke];
	if(kolicina == 0) return SendErrorMessage(playerid, "Nemate jabuke.");
	//if(PlayerInfo[playerid][xJabuke] < kolicina) return SendErrorMessage(playerid, "Nemate toliko jabuka kod sebe.");

	DajIgracuNovac(playerid, (kolicina*cena));
	PlayerInfo[playerid][xJabuke] -= kolicina;

	SendInfoMessage(playerid, "Prodali ste "col_white"%d"col_server" jabuka za "col_white"%d"col_server"$.", kolicina, (kolicina*cena));

	if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
	ClearAnimations(playerid);}
else return SendErrorMessage(playerid, "Pogresan broj vrste.");
return (true);}

CMD:kupiseme(playerid, params[]) {
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 300.1322, 1141.1545, 9.1374)) return SendErrorMessage(playerid, "Morate biti na pijaci da bi ste kupovali semena.");
new vrsta, kolicina, cena;
if(sscanf(params, "ii", vrsta, kolicina)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/kupiseme [broj vrste] [kolicina]");
	SCM(playerid, BELA, "[Vrsta] 1. Sljiva(250$) | 2. Kruska(220$) | 3. Jabuka(200$) | 4. Kupus(140$) | 5. Ruze(160$) INFO:VOCE PRODAJETE U MARKETU A KUPUS NA PIJACI!");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(vrsta == 1) {
	cena = 250;
	if((kolicina < 1 && vrsta == 1) || (kolicina > 20 && vrsta == 1)) return SendErrorMessage(playerid, "Kolicina ne moze ici ispod 1 i iznad 20.");
	if(PlayerInfo[playerid][xNovac] < cena) return SendErrorMessage(playerid, "Nemate dovoljno novca.");

	DajIgracuNovac(playerid, -(kolicina*cena));
	PlayerInfo[playerid][xSemeSljive] += kolicina;

	SendInfoMessage(playerid, "Kupili ste "col_white"%d"col_server" semena sljiva za "col_white"%d"col_server"$.", kolicina, (kolicina*cena));}
else if(vrsta == 2) {
	cena = 220;
	if((kolicina < 1 && vrsta == 2) || (kolicina > 20 && vrsta == 2)) return SendErrorMessage(playerid, "Kolicina ne moze ici ispod 1 i iznad 20.");
	if(PlayerInfo[playerid][xNovac] < cena) return SendErrorMessage(playerid, "Nemate dovoljno novca.");

	DajIgracuNovac(playerid, -(kolicina*cena));
	PlayerInfo[playerid][xSemeKruske] += kolicina;

	SendInfoMessage(playerid, "Kupili ste "col_white"%d"col_server" semena kruske za "col_white"%d"col_server"$.", kolicina, (kolicina*cena));}
else if(vrsta == 3) {
	cena = 200;
	if((kolicina < 1 && vrsta == 3) || (kolicina > 20 && vrsta == 3)) return SendErrorMessage(playerid, "Kolicina ne moze ici ispod 1 i iznad 20.");
	if(PlayerInfo[playerid][xNovac] < cena) return SendErrorMessage(playerid, "Nemate dovoljno novca.");

	DajIgracuNovac(playerid, -(kolicina*cena));
	PlayerInfo[playerid][xSemeJabuke] += kolicina;

	SendInfoMessage(playerid, "Kupili ste "col_white"%d"col_server" semena jabuke za "col_white"%d"col_server"$.", kolicina, (kolicina*cena));}
else if(vrsta == 4) {
	cena = 140;
	if((kolicina < 1 && vrsta == 4) || (kolicina > 20 && vrsta == 4)) return SendErrorMessage(playerid, "Kolicina ne moze ici ispod 1 i iznad 20.");
	if(PlayerInfo[playerid][xNovac] < cena) return SendErrorMessage(playerid, "Nemate dovoljno novca.");

	DajIgracuNovac(playerid, -(kolicina*cena));
	PlayerInfo[playerid][xSemeKupusa] += kolicina;

	SendInfoMessage(playerid, "Kupili ste "col_white"%d"col_server" semena kupusa za "col_white"%d"col_server"$.", kolicina, (kolicina*cena));}
else if(vrsta == 5) {
	cena = 160;
	if((kolicina < 1 && vrsta == 5) || (kolicina > 20 && vrsta == 5)) return SendErrorMessage(playerid, "Kolicina ne moze ici ispod 1 i iznad 20.");
	if(PlayerInfo[playerid][xNovac] < cena) return SendErrorMessage(playerid, "Nemate dovoljno novca.");

	DajIgracuNovac(playerid, -(kolicina*cena));
	PlayerInfo[playerid][xSemeRuze] += kolicina;

	SendInfoMessage(playerid, "Kupili ste "col_white"%d"col_server" semena ruza za "col_white"%d"col_server"$.", kolicina, (kolicina*cena));}
else return SendErrorMessage(playerid, "Pogresan broj vrste.");
return (true);}

CMD:posadibiljku(playerid, params[]) {
new fid = PlayerInfo[playerid][xFieldID], vrsta, Float:Pos[3], string[180];
if(IsPlayerInDynamicArea(playerid, fieldInfo[fid][fieldRectAngle])) {
	if(fieldInfo[fid][fieldStalkNumber] == 50) return SendErrorMessage(playerid, "Ovo imanje vec ima maksimalan broj posadjenih biljaka(50).");
	if(sscanf(params, "i", vrsta)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/posadibiljku [broj vrste]");
		SCM(playerid, BELA, "[Vrsta] 1. Sljiva | 2. Kruska | 3. Jabuka | 4. Kupus | 5. Ruze");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if(vrsta == 1) {
		if(PlayerInfo[playerid][xSemeSljive] == 0) return SendErrorMessage(playerid, "Nemas semena za posaditi ruze.");
		new id = NextStalkID(MAX_STALKS);

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		stalkInfo[id][sfieldID] = fid;
		stalkInfo[id][sObjectID] = 777;
		stalkInfo[id][sPlanted] = true;
		stalkInfo[id][sGrow] = false;
		stalkInfo[id][sType] = BILJKA_SLJIVA;
		stalkInfo[id][sMinut] = 0;
		stalkInfo[id][sHour] = 20;
		stalkInfo[id][sPos][0] = Pos[0];
		stalkInfo[id][sPos][1] = Pos[1];
		stalkInfo[id][sPos][2] = Pos[2];
		stalkInfo[id][sObject] = CreateDynamicObject(777, Pos[0]+1, Pos[1], Pos[2]-4, 0.0000000, 0.0000000, 0.0000000);
		format(string, sizeof(string), "Biljka jos nije izrasla!\nVreme do izrastanja: %d sati, %d minuta\nVrsta biljke: Sljiva", stalkInfo[id][sHour], stalkInfo[id][sMinut]);
		stalkInfo[id][s3D] = CreateDynamic3DTextLabel(string, -1, Pos[0]+1, Pos[1], Pos[2], 15);
		Stalk_Save(id);

		fieldInfo[fid][fieldStalkNumber]++;
		Field_Save(fid);
	}
	else if(vrsta == 2) {
		if(PlayerInfo[playerid][xSemeKruske] == 0) return SendErrorMessage(playerid, "Nemas semena za posaditi ruze.");
		new id = NextStalkID(MAX_STALKS);

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		stalkInfo[id][sfieldID] = fid;
		stalkInfo[id][sObjectID] = 673;
		stalkInfo[id][sPlanted] = true;
		stalkInfo[id][sGrow] = false;
		stalkInfo[id][sType] = BILJKA_KRUSKA;
		stalkInfo[id][sMinut] = 0;
		stalkInfo[id][sHour] = 22;
		stalkInfo[id][sPos][0] = Pos[0];
		stalkInfo[id][sPos][1] = Pos[1];
		stalkInfo[id][sPos][2] = Pos[2];
		stalkInfo[id][sObject] = CreateDynamicObject(673, Pos[0]+1, Pos[1], Pos[2]-4, 0.0000000, 0.0000000, 0.0000000);
		format(string, sizeof(string), "Biljka jos nije izrasla!\nVreme do izrastanja: %d sati, %d minuta\nVrsta biljke: Kruska", stalkInfo[id][sHour], stalkInfo[id][sMinut]);
		stalkInfo[id][s3D] = CreateDynamic3DTextLabel(string, -1, Pos[0]+1, Pos[1], Pos[2], 15);
		Stalk_Save(id);

		fieldInfo[fid][fieldStalkNumber]++;
		Field_Save(fid);
	}
	else if(vrsta == 3) {
		if(PlayerInfo[playerid][xSemeJabuke] == 0) return SendErrorMessage(playerid, "Nemas semena za posaditi ruze.");
		new id = NextStalkID(MAX_STALKS);

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		stalkInfo[id][sfieldID] = fid;
		stalkInfo[id][sObjectID] = 773;
		stalkInfo[id][sPlanted] = true;
		stalkInfo[id][sGrow] = false;
		stalkInfo[id][sType] = BILJKA_JABUKA;
		stalkInfo[id][sMinut] = 0;
		stalkInfo[id][sHour] = 24;
		stalkInfo[id][sPos][0] = Pos[0];
		stalkInfo[id][sPos][1] = Pos[1];
		stalkInfo[id][sPos][2] = Pos[2];
		stalkInfo[id][sObject] = CreateDynamicObject(773, Pos[0]+1, Pos[1], Pos[2]-4, 0.0000000, 0.0000000, 0.0000000);
		format(string, sizeof(string), "Biljka jos nije izrasla!\nVreme do izrastanja: %d sati, %d minuta\nVrsta biljke: Jabuka", stalkInfo[id][sHour], stalkInfo[id][sMinut]);
		stalkInfo[id][s3D] = CreateDynamic3DTextLabel(string, -1, Pos[0]+1, Pos[1], Pos[2], 15);
		Stalk_Save(id);

		fieldInfo[fid][fieldStalkNumber]++;
		Field_Save(fid);
	}
	else if(vrsta == 4) {
		if(PlayerInfo[playerid][xSemeKupusa] == 0) return SendErrorMessage(playerid, "Nemas semena za posaditi ruze.");
		new id = NextStalkID(MAX_STALKS);

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		stalkInfo[id][sfieldID] = fid;
		stalkInfo[id][sObjectID] = 804;
		stalkInfo[id][sPlanted] = true;
		stalkInfo[id][sGrow] = false;
		stalkInfo[id][sType] = BILJKA_KUPUS;
		stalkInfo[id][sMinut] = 0;
		stalkInfo[id][sHour] = 18;
		stalkInfo[id][sPos][0] = Pos[0];
		stalkInfo[id][sPos][1] = Pos[1];
		stalkInfo[id][sPos][2] = Pos[2];
		stalkInfo[id][sObject] = CreateDynamicObject(804, Pos[0]+1, Pos[1], Pos[2], 0.0000000, 0.0000000, 0.0000000);
		format(string, sizeof(string), "Biljka jos nije izrasla!\nVreme do izrastanja: %d sati, %d minuta\nVrsta biljke: Kupus", stalkInfo[id][sHour], stalkInfo[id][sMinut]);
		stalkInfo[id][s3D] = CreateDynamic3DTextLabel(string, -1, Pos[0]+1, Pos[1], Pos[2], 15);
		Stalk_Save(id);

		fieldInfo[fid][fieldStalkNumber]++;
		Field_Save(fid);
	}
	else if(vrsta == 5) {
		if(PlayerInfo[playerid][xSemeRuze] == 0) return SendErrorMessage(playerid, "Nemas semena za posaditi ruze.");
		new id = NextStalkID(MAX_STALKS);

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		stalkInfo[id][sfieldID] = fid;
		stalkInfo[id][sObjectID] = 870;
		stalkInfo[id][sPlanted] = true;
		stalkInfo[id][sGrow] = false;
		stalkInfo[id][sType] = BILJKA_RUZE;
		stalkInfo[id][sMinut] = 0;
		stalkInfo[id][sHour] = 15;
		stalkInfo[id][sPos][0] = Pos[0];
		stalkInfo[id][sPos][1] = Pos[1];
		stalkInfo[id][sPos][2] = Pos[2];
		stalkInfo[id][sObject] = CreateDynamicObject(870, Pos[0]+1, Pos[1], Pos[2]-0.8, 0.0000000, 0.0000000, 0.0000000);
		format(string, sizeof(string), "Biljka jos nije izrasla!\nVreme do izrastanja: %d sati, %d minuta\nVrsta biljke: Ruze", stalkInfo[id][sHour], stalkInfo[id][sMinut]);
		stalkInfo[id][s3D] = CreateDynamic3DTextLabel(string, -1, Pos[0]+1, Pos[1], Pos[2], 15);
		Stalk_Save(id);

		fieldInfo[fid][fieldStalkNumber]++;
		Field_Save(fid);
	} else return SendErrorMessage(playerid, "Pogresan broj vrste.");

} else return SendErrorMessage(playerid, "Morati biti na svom imanju.");
return (true);}

CMD:kupivozilo(playerid, params[]) {
if(ServerInfo[KupovinaVozila] == false) return SendErrorMessage(playerid, "Trenutno nije moguce kupovanje auta po salonima.");

if(PlayerInfo[playerid][xWanted] > 0) return SendErrorMessage(playerid, "Ne mozes kupovati kad imas Wanted Level.");

if(PlayerInfo[playerid][xVoziloID][0] == -1) {}
else if(PlayerInfo[playerid][xVoziloID][1] == -1) {}
else if(PlayerInfo[playerid][xVoziloID][2] == -1) {}
else if(PlayerInfo[playerid][xVoziloID][3] == -1) {
	if(PlayerInfo[playerid][xDonatorSlot] == true) {}
	else return SendErrorMessage(playerid, "Svi slotovi vozila su vam zauzeti.");}
else return SendErrorMessage(playerid, "Svi slotovi vozila su vam zauzeti.");

new as = GetNearestSalon(playerid);
if(GetNearestSalon(playerid) == -1) return SendErrorMessage(playerid, "Nisi na pickupu auto salona.");
if(AutoSalon[as][AlreadyBuying] == true) return SendErrorMessage(playerid, "Neko vec kupuje vozilo!");

if(PlayerInfo[playerid][xLevel] < 5) return SendErrorMessage(playerid, "Morate biti level 5+.");

new slotid = AutoSalon[as][aIzlogVeh];
AutoSalon[as][AlreadyBuying] = true;

PlayerBuyingAS[playerid] = as;
ModelCar[playerid] = 0;
ClearChat(playerid, 25);

BuyCarTDControl(playerid, true);

new string[128];
format(string, sizeof(string), "%s", ImeVozila[AutoSalon[as][aVehModel][0]-400]);
PlayerTextDrawSetString(playerid, BuyCar[playerid][3], string);

format(string, sizeof(string), "~w~%d$", VehPrice[AutoSalon[as][aVehModel][0]-400][1]);
PlayerTextDrawSetString(playerid, BuyCar[playerid][7], string);

format(string, sizeof(string), "~w~%dg", VehPrice[AutoSalon[as][aVehModel][ModelCar[playerid]]-400][2]);
PlayerTextDrawSetString(playerid, BuyCar[playerid][11], string);

PlayerTextDrawSetPreviewModel(playerid, BuyCar[playerid][5],AutoSalon[as][aVehModel][ModelCar[playerid]]);
PlayerTextDrawShow(playerid, BuyCar[playerid][5]);
PlayerTextDrawSetPreviewModel(playerid, BuyCar[playerid][12],AutoSalon[as][aVehModel][ModelCar[playerid]]);
PlayerTextDrawShow(playerid, BuyCar[playerid][12]);
PlayerTextDrawSetPreviewModel(playerid, BuyCar[playerid][9],AutoSalon[as][aVehModel][ModelCar[playerid]]);
PlayerTextDrawShow(playerid, BuyCar[playerid][9]);

SetPlayerCameraPos(playerid, AutoSalon[as][aCameraPos][0], AutoSalon[as][aCameraPos][1], AutoSalon[as][aCameraPos][2]);
SetPlayerCameraLookAt(playerid, AutoSalon[as][aCameraLookAt][0], AutoSalon[as][aCameraLookAt][1], AutoSalon[as][aCameraLookAt][2]);

TogglePlayerControllable(playerid, false);

Fusion_DestroyVehicle(VehicleInfo[slotid][vID]);
VehicleInfo[slotid][vID] = Fusion_CreateVehicle(slotid, VehicleInfo[slotid][vUsage], VehicleInfo[slotid][vOrganization], VehicleInfo[slotid][vJob], VehicleInfo[slotid][vFuelStation], AutoSalon[as][aVehModel][0], VehicleInfo[slotid][vLokacijaX], VehicleInfo[slotid][vLokacijaY], VehicleInfo[slotid][vLokacijaZ]+1.0, VehicleInfo[slotid][vLokacijaA], -1, -1, -1);
SetVehicleVirtualWorld(VehicleInfo[slotid][vID], AutoSalon[as][aVW]);
ac_LinkVehicleToInterior(VehicleInfo[slotid][vID], AutoSalon[as][aInt]);

SelectTextDraw(playerid, FUSIONGAMING);
return 1;}


CMD:asport(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
if(KreiranAutoSalon[playerid] == -1) return SendErrorMessage(playerid, "Ne kreiras nijedan auto salon.");
new as = KreiranAutoSalon[playerid];
ac_SetPlayerPos(playerid, AutoSalon[as][aPickupPos][0], AutoSalon[as][aPickupPos][1], AutoSalon[as][aPickupPos][2]);
SetCameraBehindPlayer(playerid);
ac_SetPlayerInterior(playerid, AutoSalon[as][aInt]);
SetPlayerVirtualWorld(playerid, AutoSalon[as][aVW]);
SCM(playerid, FUSIONGAMING, "Kada izadjes na cisti prostor kucaj '/veh 560 1 1' da spawnas vozilo.");
SCM(playerid, FUSIONGAMING, "Kada spawnas vozilo i nadjes lokaciju gde ce biti dostavljena kupljena vozila kucaj /asbvozilo.");
return 1;}

CMD:asbvozilo(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu!");
new as = KreiranAutoSalon[playerid], Float:Pos[4], vehicleid = GetPlayerVehicleID(playerid);
if(KreiranAutoSalon[playerid] == -1) return SendErrorMessage(playerid, "Ne kreiras nijedan auto salon.");
GetVehiclePos(vehicleid, Pos[0], Pos[1], Pos[2]);
GetVehicleZAngle(vehicleid, Pos[3]);
AutoSalon[as][aVehBuyedPos][0] = Pos[0];
AutoSalon[as][aVehBuyedPos][1] = Pos[1];
AutoSalon[as][aVehBuyedPos][2] = Pos[2];
AutoSalon[as][aVehBuyedPos][3] = Pos[3];
SaveSalon(as);
Fusion_DestroyVehicle(vehicleid);
AdminVozilo[playerid] = -1;
SendInfoMessage(playerid, "Uspesno si sacuvao poziciju za dostavljanje vozila.");

new coordsstring[64];
new DialogStrgEx[1024];
strcat(DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n");
strcat(DialogStrgEx, "__________________________________________________________________\n");
for(new i = 0; i < AutoSalon[as][aMaxVehModel]; i++) {
	format(coordsstring, sizeof(coordsstring), "Model %d - %s\n", (i+1), ImeVozila[(AutoSalon[as][aVehModel][i]- 400)]);
	strcat(DialogStrgEx, coordsstring);}
SPD(playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD);
strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

return true;}

CMD:garagesave(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu!");
new id = KreiraGarazu[playerid], Float:Pos[4], vehicleid = GetPlayerVehicleID(playerid);
if(KreiraGarazu[playerid] == -1) return SendErrorMessage(playerid, "Ne kreiras nijednu garazu.");

GetVehiclePos(vehicleid, Pos[0], Pos[1], Pos[2]);
GetVehicleZAngle(vehicleid, Pos[3]);

garageInfo[id][garageVehiclePos][0] = Pos[0];
garageInfo[id][garageVehiclePos][1] = Pos[1];
garageInfo[id][garageVehiclePos][2] = Pos[2];
garageInfo[id][garageVehiclePos][3] = Pos[3];

Garage_Save(id);

KreiraGarazu[playerid] = -1;
Fusion_DestroyVehicle(vehicleid);

SendInfoMessage(playerid, "Uspesno si sacuvao poziciju i zavrsio kreiranje garaze.");
return true;}

CMD:ascamera(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 7) {
	if(FlyMode[playerid] == true && flymodecamera[playerid][cameramode] == true) {
		new as = KreiranAutoSalon[playerid];
		new Float:fPX, Float:fPY, Float:fPZ,
			Float:fVX, Float:fVY, Float:fVZ,
			Float:object_x, Float:object_y, Float:object_z;

		const Float:fScale = 5.0;

		GetPlayerCameraPos(playerid, fPX, fPY, fPZ);
		GetPlayerCameraFrontVector(playerid, fVX, fVY, fVZ);

		object_x = fPX + floatmul(fVX, fScale);
		object_y = fPY + floatmul(fVY, fScale);
		object_z = fPZ + floatmul(fVZ, fScale);

		AutoSalon[as][aCameraPos][0]		= fPX;
		AutoSalon[as][aCameraPos][1]		= fPY;
		AutoSalon[as][aCameraPos][2]		= fPZ;
		AutoSalon[as][aCameraLookAt][0] 	= object_x;
		AutoSalon[as][aCameraLookAt][1] 	= object_y;
		AutoSalon[as][aCameraLookAt][2] 	= object_z;
		SaveSalon(as);
		CancelFlyMode(playerid);
		SendInfoMessage(playerid, "Uspesno si sacuvao pozicije.");
		SendInfoMessage(playerid, "Sada koristi /asport da se vratis do auto salona.");
	}
}
return true;}

CMD:asvozilo(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu!");
new as = KreiranAutoSalon[playerid], Float:Pos[4], vehicleid = GetPlayerVehicleID(playerid);
if(KreiranAutoSalon[playerid] == -1) return SendErrorMessage(playerid, "Ne kreiras nijedan auto salon.");
if(GetVehicleModel(AutoSalon[as][aIzlogVeh]) != 0) return SendErrorMessage(playerid, "Vec ste odradili ovaj korak.");

GetVehiclePos(vehicleid, Pos[0], Pos[1], Pos[2]);
GetVehicleZAngle(vehicleid, Pos[3]);

for(new i = 1; i < MAX_CARS; i++) {
	new fileauta[40];
	format(fileauta, sizeof(fileauta), V_FILE, i);
	if(!fexist(fileauta)) {
		VehicleInfo[i][vOwned] = 0;
		VehicleInfo[i][vNeaktivnost] = 0;
		VehicleInfo[i][vKilometri] = 0;
		VehicleInfo[i][vMetri] = 0;
		VehicleInfo[i][vPrice] = 0;
		strmid(VehicleInfo[i][vOwner], "Drzava", 0, strlen("Drzava"), 32);
		VehicleInfo[i][vLocked] = 1;
		VehicleInfo[i][vLokacijaX] = Pos[0];
		VehicleInfo[i][vLokacijaY] = Pos[1];
		VehicleInfo[i][vLokacijaZ] = Pos[2];
		VehicleInfo[i][vLokacijaA] = Pos[3];
		VehicleInfo[i][vVirtualWorld] = 0;
		VehicleInfo[i][vInterior] = 0;
		VehicleInfo[i][vUsage] = IZLOZBENO_VOZILO;
		VehicleInfo[i][vJob] = -1;
		VehicleInfo[i][vOrganization] = -1;
		VehicleInfo[i][vFuelStation] = -1;
		VehicleInfo[i][vColor1] = 0;
		VehicleInfo[i][vColor2] = 0;
		VehicleInfo[i][vModel] = AutoSalon[as][aVehModel][0];
		VehicleInfo[i][vReg] = 1;
		VehicleInfo[i][vRegVreme] = 0;
		VehicleInfo[i][vTeh] = 1;
		VehicleInfo[i][vGPS] = 0;
		VehicleInfo[i][vOsiguranje] = 5;
		VehicleInfo[i][vLock] = 5;
		VehicleInfo[i][vAlarm] = 4;
		VehicleInfo[i][vTuned] = 0;
		VehicleInfo[i][vNeon] = 0;
		VehicleInfo[i][vImobilizator] = 5;
		VehicleInfo[i][vSpoiler] = 0;
		VehicleInfo[i][vHood] = 0;
		VehicleInfo[i][vRoof] = 0;
		VehicleInfo[i][vSkirt] = 0;
		VehicleInfo[i][vLamps] = 0;
		VehicleInfo[i][vNitro] = 0;
		VehicleInfo[i][vExhaust] = 0;
		VehicleInfo[i][vWheels] = 0;
		VehicleInfo[i][vStereo] = 0;
		VehicleInfo[i][vHydraulics] = 0;
		VehicleInfo[i][vFrontBumper] = 0;
		VehicleInfo[i][vRearBumper] = 0;
		VehicleInfo[i][vVents] = 0;
		VehicleInfo[i][vPaintJob] = 255;
		VehicleInfo[i][vProvera] = i;
		VehicleInfo[i][vMaterijali] = 0;
		VehicleInfo[i][vDrug][0] = 0; VehicleInfo[i][vDrug][1] = 0; VehicleInfo[i][vDrug][2] = 0; VehicleInfo[i][vDrug][3] = 0; VehicleInfo[i][vDrug][4] = 0; VehicleInfo[i][vDrug][5] = 0;
		VehicleInfo[i][vDrugCode][0] = 0; VehicleInfo[i][vDrugCode][1] = 0; VehicleInfo[i][vDrugCode][2] = 0; VehicleInfo[i][vDrugCode][3] = 0; VehicleInfo[i][vDrugCode][4] = 0; VehicleInfo[i][vDrugCode][5] = 0;
		VehicleInfo[i][vMelee] = 0; VehicleInfo[i][vWeap1] = 0; VehicleInfo[i][vAmmo1] = 0; VehicleInfo[i][vWeap2] = 0; VehicleInfo[i][vAmmo2] = 0;

		Fusion_DestroyVehicle(vehicleid);
		AdminVozilo[playerid] = -1;

		VehicleInfo[i][vID] = Fusion_CreateVehicle(i, IZLOZBENO_VOZILO, -1, -1, -1, VehicleInfo[i][vModel], VehicleInfo[i][vLokacijaX], VehicleInfo[i][vLokacijaY], VehicleInfo[i][vLokacijaZ]+1.0, VehicleInfo[i][vLokacijaA], VehicleInfo[i][vColor1], VehicleInfo[i][vColor2], 300000);
			SetVehicleVirtualWorld(VehicleInfo[i][vID], AutoSalon[as][aVW]);
		ac_LinkVehicleToInterior(VehicleInfo[i][vID], AutoSalon[as][aInt]);

		if(Diesel(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 1;
		else if(Gasoline(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 2;
		else if(GasOil(VehicleInfo[i][vID])) VehicleInfo[i][vFuelType] = 3;

		VehicleInfo[i][vFuel] = getAmountFuel(VehicleInfo[i][vID]); vCanDrive[VehicleInfo[i][vID]] = 1; Fuel[VehicleInfo[i][vID]] = getAmountFuel(VehicleInfo[i][vID]);
		UnLockCar(VehicleInfo[i][vID]); ResetVehicleStatistics(VehicleInfo[i][vID]); SetTablice(VehicleInfo[i][vID]);
		SaveVehicle(i);
		carspawntimer = 1;
		SetTimer("AntiSpawnCrash", 3000, 0);

		ac_SetPlayerPos(playerid, AutoSalon[as][aPickupPos][0], AutoSalon[as][aPickupPos][1], AutoSalon[as][aPickupPos][2]);
		ac_SetPlayerInterior(playerid, AutoSalon[as][aInt]);
		SetPlayerVirtualWorld(playerid, AutoSalon[as][aVW]);

		AutoSalon[as][aIzlogVeh] = i;
		SaveSalon(as);

		break;
	}
}
SendInfoMessage(playerid, "Uspesno si sacuvao vozilo.");
SCM(playerid, FUSIONGAMING, "Sada trebas sacuvati poziciju kamere koja gleda ka vozilu u izlogu za listanje pri kupovini.");
SCM(playerid, FUSIONGAMING, "Sa "col_white"~k~~GO_FORWARD~, ~k~~GO_BACK~, ~k~~GO_LEFT~ "col_server"and "col_white"~k~~GO_RIGHT~"col_server" pomerate kameru.");
SCM(playerid, FUSIONGAMING, "Koristite "col_white"/ascamera"col_server" da sacuvate poziciju kamere kada nadjete odredjeni ugao.");
SetTimerEx("FlyMode1", 1000, false, "d", playerid);
return true;}

CMD:orgpolje(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
if(PoljeDroge[playerid] == -1) return SendErrorMessage(playerid, "Niste zapoceli proces kreiranja polja droge.");
new id = PoljeDroge[playerid], Float:Pos[3];

GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
OI[id][oDrugField][0] = Pos[0];
OI[id][oDrugField][1] = Pos[1];
OI[id][oDrugField][2] = Pos[2];


if(IsValidDynamic3DTextLabel(OrgField3d[id]))
	DestroyDynamic3DTextLabel(OrgField3d[id]);

if(IsValidDynamicPickup(OrgFieldPickup[id]))
	ac_DestroyDynamicPickup(OrgFieldPickup[id]);

new string[128];
format(string, sizeof(string), ""col_white"Poljana za sadjenje droge\n"col_server"%s", OI[id][oName]);
OrgField3d[id] = CreateDynamic3DTextLabel(string, -1, OI[id][oDrugField][0], OI[id][oDrugField][1], OI[id][oDrugField][2], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1, 50.0);
OrgFieldPickup[id] = acc_CreateDynamicPickup(1239, 1, OI[id][oDrugField][0], OI[id][oDrugField][1], OI[id][oDrugField][2], 0, 0, -1, 50.0);

SaveOrganization(id);
SendInfoMessage(playerid, "Uspesno ste zavrsili kreiranje poljanje droge.");

PoljeDroge[playerid] = -1;
return true;}

CMD:maintenancebreak(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
if(ServerInfo[Update] == false)
{
	for(new j; j < 128; j++) {
		SCMA(-1, "");
	}
	SCMA(SVETLOCRVENA, "Vlasnik je ukljucio fazu odrzavanja (Maintenance Break). Svi su kikovani sa servera.");
	SCMA(SVETLOCRVENA, "Za vise informacija, posetite forum ili pratite facebook stranicu. (www.fg-rpg.com)");
	SCM(playerid, SVETLOPLAVA, "Sifra za pristup serveru je 'fgrpg_fusioN121' bez navodnika.");
	SCM(playerid, SVETLOPLAVA, "Da iskljucite fazu odrzavanja, opet ukucajte ovu komandu nakon reloga.");
	SCM(playerid, SVETLOPLAVA, "Imajte na umu da se faza odrzavanja nece iskljuciti ni nakon restarta servera.");
	SCM(playerid, SVETLOPLAVA, "Morate je manuelno iskljuciti u igri ovom istom komandom.");
	foreach(new i : Player) {
		if(i != IPI) {
			SavePlayer(i);
			Fusion_Kick(i);
		}
	}
	ServerInfo[Update] = true;
	SaveServerStats();
	SendRconCommand("hostname Fusion Gaming - Maintenance Break");
	SendRconCommand("password fgrpg_fusioN121");}
else
{
	ServerInfo[Update] = false;
	SaveServerStats();
	SendRconCommand("hostname Fusion Gaming - Dobrodosli");
	SendRconCommand("password 0");
	SCM(playerid, SVETLOPLAVA, "Faza odrzavanja iskljucena. Server je otkljucan.");			
}
return true;}

CMD:unprisonall(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 7) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	foreach(new i : Player) {
		if(PlayerInfo[i][xZatvor] != 0) {
			new rand = random(sizeof(RandomCelije));
			ac_SetPlayerPos(i, RandomCelije[rand][0], RandomCelije[rand][1], RandomCelije[rand][2]);
			SetTimerEx("SlobodnoSada", 2000, false, "i", i);
			SetCameraBehindPlayer(i);
			TogglePlayerControllable(i, false);
			ac_SetPlayerInterior(i, 6);
			SetPlayerVirtualWorld(i, 1);
			PlayerInfo[i][xZatvor] = 0;
			PlayerInfo[i][xZatvorVreme] = 0;
			SetPlayerWorldBounds(i, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
		}
	}
	new varstring[60];
	format(varstring, sizeof(varstring), "UNPRISONALL | %s je unprisonovao sve igrace.", ImeIgraca(playerid));
	SCMA(NARACRVENA, varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:kickall(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 7) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	foreach(new i : Player) {
		if(i != IPI && PlayerInfo[i][xAdmin] < 6) {
			Fusion_Kick(i);
		}
	}
	new varstring[60];
	format(varstring, sizeof(varstring), "KICKALL | %s je kikovao sve igrace.", ImeIgraca(playerid));
	AdminPoruka(0x990000FF, varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}


CMD:helperstats(playerid, params[]) {
if(PlayerInfo[playerid][xHelper] >= 3 || PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xSkriptaRank] == 8) {
	new target;
	if(sscanf(params, "u", target)) {
		SendUsageMessage(playerid, "/helperstats [ID/Deo Imena]");
		return 1;
	}
	if(target == IPI) return SendErrorMessage(playerid, "Igrac je offline - /lastseen.");
	ShowHelperStats(playerid, target);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:lastseen(playerid, params[]) {
if(PlayerInfo[playerid][xHelper] >= 3 || PlayerInfo[playerid][xAdmin] >= 1) {
	new imeigraca[24], ifile[64];
	if(sscanf(params, "s[24]", imeigraca)) return SendUsageMessage(playerid, "/lastseen [Ime_Prezime]");
	format(ifile, sizeof(ifile), I_FILE, imeigraca);
	if(!fexist(ifile)) return SendErrorMessage(playerid, "Taj igrac ne postoji u bazi podataka!");
	if(IsPlayerConnected(GetPlayerIdFromName(imeigraca))) {
		SendInfoMessage(playerid, "Igrac %s je online.", imeigraca);
		return 1;
	}
	INI_ParseFile(ifile, "ShowOffStats");
	new varstring[128];
	format(varstring, sizeof(varstring), "{005b87] [ FG:RPG ] :{FFFFFF] Igrac %s je poslednji put ulogovan %s.", imeigraca, OfflineCheck[LastLogin]);
	SendClientMessage(playerid, -1, varstring);

}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:adminstats(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xSkriptaRank] == 7) {
	new target;
	if(sscanf(params, "u", target)) {
		SendUsageMessage(playerid, "/adminstats [ID/Deo Imena]");
		return 1;
	}
	if(target == IPI) return SendErrorMessage(playerid, "Pogresan ID.");
	ShowAdminStats(playerid, target);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:id(playerid, params[]) {
new target;
if(sscanf(params, "u", target)) {
	SendUsageMessage(playerid, "/id [ID/Deo Imena]");
	return 1;}
if(IsPlayerConnected(target)) {
		if(target != INVALID_PLAYER_ID) {
			new name[MAX_PLAYER_NAME];
		GetPlayerName(target, name, sizeof(name));
		new varstring[50];
		format(varstring, sizeof(varstring), "ID: (%d) %s", target, name);
		SendClientMessage(playerid, BELA, varstring);
	}
}
return 1;}

CMD:dopustipromenuimena(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

new id;
if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/dopustipromenuimena [ID/Deo Imena]");
if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID igraca.");

SetPVarInt(id, "PlayerCanChangeName", 1);
SendClientMessageEx(playerid, SVETLOPLAVA, "Dozvolili ste igracu %s promenu imena!", ImeIgraca(playerid));
SendClientMessageEx(id, SVETLOPLAVA, "Vlasnik %s Vam je dozvolio promenu imena - /changename (morate odmah promeniti ime)!", ImeIgraca(playerid));
new varstring[200];
format(varstring, sizeof(varstring), "{36AB00][DONACIJA]: "col_white"Vlasnik {36AB00]%s"col_white" je dozvolio igracu {36AB00]%s"col_white" promenu imena.", ImeIgraca(playerid), ImeIgraca(id));
SCMA(-1, varstring);
return 1;}
CMD:teritorije(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xSkriptaRank] == 4) {
	SPD(playerid, dialog_GANGZEDIT, DSL, D_NASLOV, "Daj vlasnistvo teritorije bandi\nDa li teritorija moze da se zauzima?\nOslobodi teritoriju\nPromeni boju teritorije\nPostavi pickup ovde", D_ODABERI, D_ODUSTANI);}
return 1;}
CMD:makeleader(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 5 || PlayerInfo[playerid][xSkriptaRank] == 4) {

	if(PlayerInfo[playerid][xAdmin] > 5) { if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti"); }
	new id, kolicina;
	if(sscanf(params, "ui", id, kolicina)) {
		SendUsageMessage(playerid, "/makeleader [ID/Deo imena][ID ORGe]");
		SCM(playerid, BELA, "Listu orgi gledate komandom /organizacije.");
		return 1;
	}
	new ImaFajl[40];
	format(ImaFajl, sizeof(ImaFajl), O_FILE, kolicina);
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina == 0) {
		if(PlayerInfo[id][xLider] == 0) return SendErrorMessage(playerid, "Taj igrac nije lider nijedne organizacije");
		new OrgID = PlayerInfo[id][xLider];

		if(strcmp(ImeIgraca(id), OI[OrgID][oLider1], true) == 0) { strmid(OI[OrgID][oLider1], "Niko", 0, strlen("Niko"), ORG_LIDER); }
		else if(strcmp(ImeIgraca(id), OI[OrgID][oLider2], true) == 0) { strmid(OI[OrgID][oLider2], "Niko", 0, strlen("Niko"), ORG_LIDER); }

		PlayerInfo[id][xLider] = 0;
		PlayerInfo[id][xRank] = 0;
		PlayerInfo[id][xClan] = 0;
		PlayerInfo[id][xOrgUgovor] = 0;
		PlayerInfo[id][xSkin] = SetSexSkin(id);
		PlayerInfo[id][xSpawn] = SetRandomSpawn(id);
		c_SetPlayerSkin(id, SetSexSkin(id));

		SaveOrganization(OrgID);

		SendClientMessageEx(id, SVETLOPLAVA, "Admin %s vam je skinuo lidera.",ImeIgraca(playerid));
		SendClientMessageEx(playerid, SVETLOPLAVA, "Skinuli ste igracu: %s lidera organizacije.",ImeIgraca(id));
		SavePlayer(id);

		new varstring[90];
		format(varstring, sizeof(varstring), "MAKE | %s je skinuo lidera igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
		AdminPoruka(NARACRVENA, varstring);
	}
	else {
		if(PlayerInfo[id][xClan] != 0) return SendErrorMessage(playerid, "Taj igrac je vec clan/lider neke organizacije");
		if(PlayerInfo[id][xLider] != 0) return SendErrorMessage(playerid, "Taj igrac je vec lider neke organizacije");
		if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta organizacija ne postoji.");

		if(OI[kolicina][oSuspended]) return SendErrorMessage(playerid, "Ova organizacija je zakljucana od strane vlasnika.");

		if(!strcmp(OI[kolicina][oLider1], "Niko", true)) { strmid(OI[kolicina][oLider1], ImeIgraca(id), 0, strlen(ImeIgraca(id)), ORG_LIDER); }
		else if(!strcmp(OI[kolicina][oLider2], "Niko", true)) { strmid(OI[kolicina][oLider2], ImeIgraca(id), 0, strlen(ImeIgraca(id)), ORG_LIDER); }
		else return SendErrorMessage(playerid, "Ova organizacija vec ima 2 lidera.");

		PlayerInfo[id][xLider] = kolicina;
		PlayerInfo[id][xClan] = kolicina;
		PlayerInfo[id][xOrgUgovor] = 0;
		PlayerInfo[id][xSpawn] = SPAWN_BAZA;
		PlayerInfo[id][xRank] = 6;

		if(PlayerInfo[id][xPol] == 1) {
			PlayerInfo[id][xSkin] = OI[kolicina][oSkin6]; c_SetPlayerSkin(id, OI[kolicina][oSkin6]);
		}
		else if(PlayerInfo[id][xPol] == 2) {
			PlayerInfo[id][xSkin] = OI[kolicina][oZSkin6]; c_SetPlayerSkin(id, OI[kolicina][oZSkin6]);
		}

		SaveOrganization(kolicina);
		SendClientMessageEx(id, SVETLOPLAVA, "Admin %s vam je postavio lidera organizacije/bande/mafije %s.",ImeIgraca(playerid), OI[kolicina][oName]);
		SendClientMessageEx(playerid, SVETLOPLAVA, "Postavili ste igracu: %s lidera organizacije/bande/mafije %s.",ImeIgraca(id), OI[kolicina][oName]);
		SavePlayer(id);

		new varstring[128];
		format(varstring, sizeof(varstring), "MAKE | %s je dao lidera %s igracu %s.", ImeIgraca(playerid), OI[kolicina][oName], ImeIgraca(id));
		AdminPoruka(NARACRVENA, varstring);
	}
} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:pport(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xPromoter] >= 1) {

	if(PlayerInfo[playerid][xPromoter] >= 1) {

		if(NaUtrci[playerid]) return SendErrorMessage(playerid, "Ne mozes dok si na trci.");
		if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristiti ovu komandu dok si u DM Zoni.");
		if(PoliceDuty[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si na duznosti.");
		if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla.");
		if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok imas wanted level.");
		if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si u jailu.");
		if(PljackaUToku || ZlataraUToku) return SendErrorMessage(playerid, "Ne mozes se portati dok je pljacka u toku.");
		if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete dok radite posao.");
		if(RibarOprema[playerid] == true) return SendErrorMessage(playerid, "Ne mozete ovo u opremi ribara.");
	}
	if(PromoterPort[playerid] != 0) return SendErrorMessage(playerid, "Jos %d sekundi do sledeceg porta.", PromoterPort[playerid]);

	//SPD(playerid, dialog_SELECTPPORT, DSL, D_NASLOV, "Promoter baza\nBanka\nBurg\nOpstina", D_ODABERI, D_ODUSTANI);
	new DialogStrgEx[1450];
	for(new i = 0; i < MAX_PPORTS; i++) {
		if(pportInfo[i][pportCreated] == 1) {
			format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, pportInfo[i][pportName]);
		}
	}
	SPD(playerid, dialog_SELECTPPORT, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}
CMD:settings(playerid, params[]) {

new trp[24], tog[24], tve[24], tfc[24], tte[24], thu[24];
if(PlayerInfo[playerid][xLevel] >= 10)
{
	if(PlayerInfo[playerid][xSPoruke] == 1)
	{ 
		trp = "{FF0000]Iskljuceno";
	}
	else
	{
		trp = "{FF0000]Iskljuceno";
	}
}
else if(PlayerInfo[playerid][xLevel] < 10)
{
	if(PlayerInfo[playerid][xSPoruke] == 1)
	{ 
		trp = "{1cb021]Ukljuceno";
	}
	else
	{
		trp = "{FF0000]Iskljuceno";
	}
}

if(PlayerInfo[playerid][xSOglasi] == 1) { tog = "{1cb021]Ukljuceno";} else { tog = "{FF0000]Iskljuceno";}
if(PlayerInfo[playerid][xSVesti] == 1) { tve = "{1cb021]Ukljuceno";} else { tve = "{FF0000]Iskljuceno";}
if(PlayerInfo[playerid][xSFChat] == 1) { tfc = "{1cb021]Ukljuceno";} else { tfc = "{FF0000]Iskljuceno";}
if(PlayerInfo[playerid][xSTelefon] == 1) { tte = "{1cb021]Ukljuceno";} else { tte = "{FF0000]Iskljuceno";}
if(PlayerInfo[playerid][xSHud] == 1) { thu = "{1cb021]Ukljuceno";} else { thu = "{FF0000]Iskljuceno";}

new varstring[256];
format(varstring, sizeof(varstring),
	"Podesavanje\tStatus\n\
	Random Poruke\t%s\n\
	Oglasi\t%s\n\
	Vesti\t%s\n\
	Family Chat\t%s\n\
	Telefon\t%s\n\
	Hud\t%s", trp, tog, tve, tfc, tte, thu);

SPD(playerid, dialog_SETTINGS, DSH, D_NASLOV, varstring, D_ODABERI, D_ODUSTANI);

ClearChat(playerid, 24);	
SendInfoMessage(playerid, "Odaberite zeljenu opciju da bi promenili njen status.");
SendInfoMessage(playerid, "Sve opcije kojima promenite status bice vracene na default nakon ponovnog ulaska.");
return true;}
CMD:vport(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xVIPLevel] >= 1 || PlayerInfo[playerid][xYouTuber] == 1) {
	if(PlayerInfo[playerid][xVIPLevel] >= 1) {
		if(NaUtrci[playerid]) return SendErrorMessage(playerid, "Ne mozes dok si na trci.");
		if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristiti ovu komandu dok si u DM Zoni.");
		if(PoliceDuty[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si na duznosti.");
		if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla.");
		if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok imas wanted level.");
		if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si u jailu.");
		if(PljackaUToku || ZlataraUToku) return SendErrorMessage(playerid, "Ne mozes se portati dok je pljacka u toku.");
	}
	if(VIPPort[playerid] != 0) return SendErrorMessage(playerid, "Jos %d sekundi do sledeceg porta.", VIPPort[playerid]);
	//SPD(playerid, dialog_SELECTVPORT, DSL, D_NASLOV, "Vip baza\nBeograd\nZagreb\nSarajevo\nBurg\nBanka\nBolnica\nLotto\nZlatara\nAuto salon\nSpawn 1\nSpawn 2\nMarket Lidl\nMarket Konzum\nPlaza\nAero\nLukoil pumpa", D_ODABERI, D_ODUSTANI);
	new DialogStrgEx[1950];
	for(new i = 0; i < MAX_VPORTS; i++) {
		if(vportInfo[i][vportCreated] == 1) {
			format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, vportInfo[i][vportName]);
		}
	}
	SPD(playerid, dialog_SELECTVPORT, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:tunecar(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xVIPLevel] >= 5 || PlayerInfo[playerid][xYouTuber] == 1) {
	if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Ne mozete ovo sa wanted levelom.");
	if(PlayerCP[playerid] > 0) return SendErrorMessage(playerid, "Ne mozes dok si na eventu.");
	PlayerTuningCar[playerid] = true;
	TuningTDControl(playerid, true);
	SPD(playerid, dialog_TUNING, DSL, D_NASLOV, "Paintjobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nWheels\nCar Stereo\nHydraulics\nNitro", D_ODABERI, D_ODUSTANI);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}
CMD:clearmychat(playerid, params[]) {
if(PlayerInfo[playerid][xVIPLevel] >= 2) {
	ClearChat(playerid, 128);
	SendInfoMessage(playerid, "Ocistili ste svoj chat.");}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:vipskin(playerid, params[])
{
if(PlayerInfo[playerid][xVIPLevel] >= 2) {
	if(PlayerInfo[playerid][xClan] != 0) return SendErrorMessage(playerid, "Ne mozete uzeti drugi skin jer ste u organizaciji.");
	ShowModelSelectionMenu(playerid, skinlist, "Select Skin");}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:vrtc(playerid, params[]) {
if(PlayerInfo[playerid][xVIPLevel] >= 2) {
	new slot;
	if(sscanf(params, "i", slot)) return SendUsageMessage(playerid, "/vrtc [slot]");
	if(slot < 1 || slot > 4) return SendErrorMessage(playerid, "Slot ne moze biti manji od 1 ili veci od 4.");
	if(vRTC[playerid] > 0) return SendErrorMessage(playerid, "Sacekajte malo pre upotrebe ove komande.");
	new vozilo = slot-1;
	SetVehicleToRespawn(PlayerInfo[playerid][xVoziloID][vozilo]);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	SendInfoMessage(playerid, "Respawnovali ste svoje vozilo na slotu %d - ID vozila %d", slot, PlayerInfo[playerid][xVoziloID][vozilo]);
	vRTC[playerid] = 180;}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:mark(playerid, params[]) {
if(PlayerInfo[playerid][xVIPLevel] >= 3) {
	if(NaUtrci[playerid]) return SendErrorMessage(playerid, "Ne mozete dok si na trci.");
	if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok si u DM Zoni.");
	if(PoliceDuty[playerid] == true) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok ste na PD duznosti.");
	if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok radite posao ili imate uniformu posla.");
	if(RibarOprema[playerid] == true) return SendErrorMessage(playerid, "Ne mozete ovo u opremi ribara.");
	if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok imate Wanted.");
	if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok ste u zatvoru.");
	if(PljackaUToku || ZlataraUToku) return SendErrorMessage(playerid, "Ne mozete se portati dok je pljacka u toku.");
	GetPlayerPos(playerid, PlayerInfo[playerid][xMarker][0], PlayerInfo[playerid][xMarker][1], PlayerInfo[playerid][xMarker][2]);
	SendInfoMessage(playerid, "Sacuvali ste poziciju za teleportovanje (/gotomark).");}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}
CMD:gotomark(playerid, params[]) {
if(PlayerInfo[playerid][xVIPLevel] >= 3) {
	if(NaUtrci[playerid]) return SendErrorMessage(playerid, "Ne mozete dok si na trci.");
	if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok si u DM Zoni.");
	if(PoliceDuty[playerid] == true) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok ste na PD duznosti.");
	if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok radite posao ili imate uniformu posla.");
	if(RibarOprema[playerid] == true) return SendErrorMessage(playerid, "Ne mozete ovo u opremi ribara.");
	if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok imate Wanted.");
	if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok ste u zatvoru.");
	if(PljackaUToku || ZlataraUToku) return SendErrorMessage(playerid, "Ne mozete se portati dok je pljacka u toku.");
	if(GetPlayerState(playerid) == 2) {
		ac_SetVehiclePos(GetPlayerVehicleID(playerid), PlayerInfo[playerid][xMarker][0], PlayerInfo[playerid][xMarker][1], PlayerInfo[playerid][xMarker][2]);
		SendInfoMessage(playerid, "Teleportirani ste na oznacenu poziciju.");
		ac_SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
	}
	else {
		ac_SetPlayerPos(playerid, PlayerInfo[playerid][xMarker][0], PlayerInfo[playerid][xMarker][1], PlayerInfo[playerid][xMarker][2]);
		SendInfoMessage(playerid, "Teleportirani ste na oznacenu poziciju.");
		ac_SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}
CMD:mytime(playerid, params[]) {
if(PlayerInfo[playerid][xVIPLevel] >= 3) {
	new vreme;
	if(sscanf(params, "i", vreme)) {
		SendUsageMessage(playerid, "/mytime [vreme(0-23)]");
		return 1;
	}
	SetPlayerTime(playerid, vreme, 0);
	SendInfoMessage(playerid, "Postavili ste svoje vreme na %dh.", vreme);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:myweather(playerid, params[]) {
if(PlayerInfo[playerid][xVIPLevel] >= 3) {
	new vreme;
	if(sscanf(params, "i", vreme)) {
		SendUsageMessage(playerid, "/myweather [broj]");
		SCM(playerid, FUSIONGAMING,"________________________________FG VIP VREMENSKI PANEL_______________________________");
		SCM(playerid, FUSIONGAMING, "| "col_white"0: Good | 1: Sunce | 2: Kisa  | 3: Oluja | 4: Magla  | 5: Pescana Oluja | 6: Toxic | 7: Draw Distance ");
		SCM(playerid, FUSIONGAMING,"_____________________________________________________________________________________");
	}
	if(vreme < 0 || vreme > 7) return SendErrorMessage(playerid, "Odabir mora biti od 0 do 7.");
	SetPlayerWeather(playerid, vreme);
	SendInfoMessage(playerid, "Postavili ste svoje vreme na %d.", vreme);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:vfill(playerid, params[]) {
if(PlayerInfo[playerid][xVIPLevel] >= 3) {
	new vehicleid, found;
	for(new i = 0; i < MAX_VEHICLES; i++) {

		new Float:X, Float:Y, Float:Z;
		GetVehiclePos(i, X, Y, Z);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z)) {
			vehicleid = i;
			found = 1;
			break;
		}
		else
			continue;
	}
	if(found == 0) return SendErrorMessage(playerid, "Niste blizu vozila.");

	new Float:vehPos[3];
	getPosBehindVehicle(vehicleid, vehPos[0], vehPos[1], vehPos[2], 0.0);
	if(!IsPlayerInRangeOfPoint(playerid, 2, vehPos[0], vehPos[1], vehPos[2])) return SendErrorMessage(playerid, "Morate biti iza vozila.");

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Morate biti na nogama da biste zatvorili/otvorili prtljaznik.");
	if(IsVehicleBajs(vehicleid)) {
		SendErrorMessage(playerid, "Nepoznata akcija.");
		return 1;
	}

	if((10 + Fuel[vehicleid]) > getAmountFuel(vehicleid)) {

		SendErrorMessage(playerid, "Rezervoar mora biti prazan bar 10L da bi ga napunili.");
		return 1;
	}

	if(PlayerInfo[playerid][xNovac] < 10000) return SendErrorMessage(playerid, "Nemate 10000$, toliko kosta koriscenje ove komande.");

	Fuel[vehicleid] += 30;
	FuelTime[vehicleid] = 0;
	SendInfoMessage(playerid, "Napunili ste vozilo sa 30 litara goriva za 10000$.");
	DajIgracuNovac(playerid, -10000);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:vnitro(playerid, params[]) {

if(PlayerInfo[playerid][xVIPLevel] >= 4) {
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu!");
	if(NaUtrci[playerid]) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si na trci.");
	if(PlayerCP[playerid] > 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si na eventu.");
	if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla.");
	if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Ne mozes koristiti ovo dok imas wanted level.");
	if(PoliceDuty[playerid] == true) return SendErrorMessage(playerid, "Na duznosti si kao policajac, ne mozes koristiti ovu komandu.");
	AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	SendInfoMessage(playerid, "Nitro je uspesno dodat u vozilo!");}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}
CMD:vcarcolor(playerid, params[])
{
if(PlayerInfo[playerid][xVIPLevel] >= 4) {
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu!");
	new color1, color2;
	if(sscanf(params, "ii", color1, color2)) return SendUsageMessage(playerid, "/vcarcolor [boja 1] [boja 2]");
	if(color1 < 0 || color1 > 255) return SendErrorMessage(playerid, "Pogresan unos boje 1 (0-255).");
	if(color2 < 0 || color2 > 255) return SendErrorMessage(playerid, "Pogresan unos boje 2 (0-255).");
	ChangeVehicleColor(GetPlayerVehicleID(playerid), color1, color2);
	SendInfoMessage(playerid, "Promenili ste boju vozila.");}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");	
return 1;}
CMD:vattach(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xVIPLevel] >= 5) {
	if(PlayerInfo[playerid][xVIPLevel] >= 5) {
		if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete u autu.");
	}
	SPD(playerid, dialog_SELECTVDODATAK, DSL, D_NASLOV, "Papagaj\nDollar\nQrac\nKanta\nNoz\nMaska\nNitro\nIncread\nVanzemaljac", D_ODABERI, D_ODUSTANI);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}
CMD:dodacioff(playerid)
{
if(PlayerInfo[playerid][xPosao] == POSAO_DRVOSECA && PosaoDrvoseca[playerid] != 0 && UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok radite posao - DRVOSECA.");
if(WARPInfo[playerid][WARIgrac] != -1) return SendErrorMessage(playerid, "Ne mozes ovo dok si u waru.");
if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes ovo dok si na dmu.");
if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes ovo dok si u zatvoru.");
if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla.");
if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes dok si u vozilu.");
	for(new i=0; i<MAX_PLAYER_ATTACHED_OBJECTS; i++)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, i)) RemovePlayerAttachedObject(playerid, i);}
SendInfoMessage(playerid, "Uspesno ste skinuli sve dodatke.");
return true;}

CMD:viphelp(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xVIPLevel] >= 1) {
	new DialogStrgEx[1228];
	strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
	strcat(DialogStrgEx, ""col_server"BRONZE VIP | "col_white"/goto /g /vport /vipmenu(shotgun,palica,cvece) /vipspawn\n");
	if(PlayerInfo[playerid][xVIPLevel] >= 2 || PlayerInfo[playerid][xAdmin] >= 6) {
		strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
		strcat(DialogStrgEx, ""col_server"SILVER VIP | "col_white"/vipmenu(deagle,9mm) /clearmychat /vipskin /vrtc\n");
	}
	if(PlayerInfo[playerid][xVIPLevel] >= 3 || PlayerInfo[playerid][xAdmin] >= 6) {
		strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
		strcat(DialogStrgEx, ""col_server"GOLDEN VIP | "col_white"/vipmenu(uzi,mp5) /mark /gotomark /mytime /myweather /vfill\n");
	}
	if(PlayerInfo[playerid][xVIPLevel] >= 4 || PlayerInfo[playerid][xAdmin] >= 6) {
		strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
		strcat(DialogStrgEx, ""col_server"PLATINUM VIP | "col_white"/vipmenu(m4, ak47) /fixveh /vnitro /vcarcolor\n");
		strcat(DialogStrgEx, ""col_server"PLATINUM VIP | "col_white"Imunitet na Anti-spam (Chat & Komande) & 2x Wanted Fall\n");
	}
	if(PlayerInfo[playerid][xVIPLevel] >= 5 || PlayerInfo[playerid][xAdmin] >= 6) {
		strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
		strcat(DialogStrgEx, ""col_server"SUPER VIP | "col_white"/vipmenu(pancir, sniper) /tunecar /vattach\n");
		strcat(DialogStrgEx, ""col_server"SUPER VIP | "col_white"Uvek dupli respekti na PayDayu & 100hp Health i Armor na Spawnu & 2500$ na PayDayu\n");
		strcat(DialogStrgEx, ""col_server"SUPER VIP | "col_white"3x Wanted Fall & 2x Aktivni Poeni na PayDayu & 2x Platni Poeni\n");
	}
	strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

	SPD(playerid, dialog_HELP, DSMSG, ""col_server"VIP Komande", DialogStrgEx, "Ok", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}
CMD:vipinfo(playerid, params[]) {
new DialogStrgEx[1332];
strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
strcat(DialogStrgEx, ""col_server"* Informacije o VIP sistemu\n\n");
strcat(DialogStrgEx, ""col_server"- "col_white"Na nasem serveru postoji 5 razlicitih VIP paketa, i to su:\n");
strcat(DialogStrgEx, ""col_server"- "col_white"Bronze, Silver, Golden, Platinum i Super VIP.\n");
strcat(DialogStrgEx, ""col_server"- "col_white"Svaki VIP ima razlicite pogodnosti, a sto je on veci, to su pogodnosti bolje.\n\n");
strcat(DialogStrgEx, ""col_server"* Istek VIP sistema\n\n");
strcat(DialogStrgEx, ""col_server"- "col_white"Na nasem serveru se malo razlikuje isticanje VIP statusa nego na ostalim serverima.\n");
strcat(DialogStrgEx, ""col_server"- "col_white"Kada donirate za VIPa, dobijate 30 dana (720h) VIP statusa.\n");
strcat(DialogStrgEx, ""col_server"- "col_white"Vase vreme van servera nece uticati na VIP status, vec samo vreme dok ste na serveru.\n");
strcat(DialogStrgEx, ""col_server"- "col_white"Sto znaci da kada navrsite tih 720 sati igre na serveru, tek tada ce Vam isteci VIP.\n");
strcat(DialogStrgEx, ""col_server"- "col_white"Ne morate brinuti o isticanju Vaseg VIPa dok ste Van igre.\n");
strcat(DialogStrgEx, ""col_server"- "col_white"Kada ste AFK na serveru, Vase vreme VIPa se smanjuje kao i kada igrate.\n");
strcat(DialogStrgEx, ""col_server"- "col_white"Tako da, sto ste manje AFK, to ce Vam VIP duze trajati. Preostalo vreme VIPa mozete videti na /stats.\n");
strcat(DialogStrgEx, ""col_server"- "col_white"Kada Vam istekne VIP, placate punu cenu ako zelite da nastavite Vasu VIP pretplatu.\n\n");
strcat(DialogStrgEx, ""col_server"* Pogodnosti VIP statusa\n\n");
strcat(DialogStrgEx, ""col_server"- "col_white"Sto se tice VIP pogodnosti, njih mozete pogledati na forumu - "col_server"www.fg-rpg.com\n");
strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

SPD(playerid, dialog_HELP, DSMSG, ""col_server"VIP Info", DialogStrgEx, "Ok", "");
strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
return true;}
CMD:ythelp(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xYouTuber] >= 1) {
	new DialogStrgEx[356];

	strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
	strcat(DialogStrgEx, ""col_server"YOUTUBER | "col_white"/goto /g /ytport /ytmenu /tunecar /fixveh /ytspawn\n");
	strcat(DialogStrgEx, ""col_server"YOUTUBER | "col_white"Trodupli respekt na paydayu, 100hp/100armor na spawnu, 5000$ na paydayu\n");
	strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

	SPD(playerid, dialog_HELP, DSMSG, ""col_server"YouTuber Komande", DialogStrgEx, "Ok", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:aktivnipoenihelp(playerid, params[]) {
	new DialogStrgEx[356];

	strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
	strcat(DialogStrgEx, ""col_white" Sistem aktivnih poena funkcionise tako sto na svaki payday dobijate jedan aktivan poen.\n");
	strcat(DialogStrgEx, ""col_white" Aktivne poene mozete da iskoristite da bi dobili Novac i Respecte.\n");
	strcat(DialogStrgEx, ""col_white" Da koristite aktivne poene: /ashop.\n");
	strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

	SPD(playerid, dialog_HELP, DSMSG, ""col_server"Aktivni Poeni", DialogStrgEx, "Ok", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
	return true;}

CMD:fgpoenihelp(playerid, params[]) {
	new DialogStrgEx[356];

	strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
	strcat(DialogStrgEx, ""col_white" FG Poen mozete dobiti na 500h igre ili 500 resenih reakcija.\n");
	strcat(DialogStrgEx, ""col_white" Sa njima mozete kupovati mnogo mocne stvari na serveru, poput VIP-a, Levela, Novca, boja u imenu....\n");
	strcat(DialogStrgEx, ""col_white" Da koristite aktivne poene: /fgshop.\n");
	strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

	SPD(playerid, dialog_HELP, DSMSG, ""col_server"FG Poeni", DialogStrgEx, "Ok", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
	return true;}

CMD:platnipoenihelp(playerid, params[]) {
	new DialogStrgEx[545];
	
	strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
	strcat(DialogStrgEx, ""col_white" Sistem platnih poena funkcinise tako da svaki put kada odradite jednu turu posla dobijete jedan poen.\n");
	strcat(DialogStrgEx, ""col_white" Sto vise poena imate, veca ce vam plata biti.\n");
	strcat(DialogStrgEx, ""col_white" Tako da ako je pocetna plata 10000$ nakon 100 odradjenih poslova imacete 20000$\n");
	strcat(DialogStrgEx, ""col_white" Svakim levelom dobijate mogucnost da imate dodatnih 5 platnih poena.\n");
	strcat(DialogStrgEx, ""col_white" Davanjem otkaza na poslu vasi poeni bice vraceni na 0.\n");
	strcat(DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

	SPD(playerid, dialog_HELP, DSMSG, ""col_server"Platni Poeni", DialogStrgEx, "Ok", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
	return true;}

CMD:novajlije(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6) {
	new DialogStrgEx[545];
	foreach(new i : Player)
	{
		if(PlayerInfo[i][xLevel] <= 2)
		{
			format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s ID - %d\n", DialogStrgEx, ImeIgraca(i), i);
		}
	}
	SPD(playerid, dialog_PRIKAZNOVAJLIJA, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}
CMD:promeniimefirme(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6) {
	new id, ime[64], ImaFajl[40];
	if(sscanf(params, "is[64]", id, ime)) return SendUsageMessage(playerid, "/promeniimefirme [ID] [IME]");
	format(ImaFajl, sizeof(ImaFajl), F_FILE, id);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta firma ne postoji.");
	strmid(BusinessInfo[id][bName], ime, 0, strlen(ime), 128);
	SaveBusiness(id) ; Business_Refresh(id);
	SendInfoMessage(playerid, "Promenili ste ime firme(ID: %d) u %s!", id, ime);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:fgshop(playerid, params[]) {

//if(PlayerInfo[playerid][xFGpoeni] >= 0) return SendErrorMessage(playerid, "Morate imati fg poene da bi ste koristili ovu komandu.");
SPD(playerid, dialog_FGPOENI, DSL, D_NASLOV, "VIP Level 1 14 Dana - 3 FGpoena\nVIP Level 2 14 Dana - 5 FGpoena\nVIP Level 3 14 Dana - 7 FGpoena\nLevel UP - 2 FGpoena\n1.000.000$ - 2 FGpoena\nDonatorske boje - 4 FGpoena", D_ODABERI, D_ODUSTANI);
return true;}

CMD:ashop(playerid, params[]) {

//if(PlayerInfo[playerid][xFGpoeni] >= 0) return SendErrorMessage(playerid, "Morate imati fg poene da bi ste koristili ovu komandu.");
SPD(playerid, dialog_AKTIVPOENI, DSL, D_NASLOV, "6000$ - 2 Aktivnih Poena\nRespect Up - 4 Aktivnih Poena", D_ODABERI, D_ODUSTANI);
return true;}

CMD:vipmenu(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xVIPLevel] >= 1 || PlayerInfo[playerid][xYouTuber] == 1) {
	if(PlayerInfo[playerid][xVIPLevel] >= 1) {
		if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes dok si u DM Zoni.");
		if(NaUtrci[playerid]) return SendErrorMessage(playerid, "Ne mozes dok si na trci.");
		if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes iz auta.");
		if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Ne mozes da uzmes oruzje dok imas wanted level.");
		if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes da uzmes oruzje dok si u zatvoru.");
	}
	SPD(playerid, dialog_SELECTVGUN, DSL, D_NASLOV, "Shotgun [9.500$]\nPalica [1.000$]\nCvece [1.000$]\nDeagle [7.000$]\n9mm Pistol [4.000$]\nUzi [9.000$]\nMP5 [9.500$]\nM4 [11.000$]\nAK47[11.500$]\nPancir [12.000$]\nSniper [20.000$]", D_ODABERI, D_ODUSTANI);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:makevip(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 7) {

	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

	new id, kolicina, vreme;
	if(sscanf(params, "uii", id, kolicina, vreme)) {
		SendUsageMessage(playerid, "/makevip [ID/Deo imena][Level 0-5] [Vreme u danima 1-30]");
		SendUsageMessage(playerid, "Ako skidate VIP status nekom, vreme je nebitno. Mozete staviti na 1.");
		return 1;
	}
	if(vreme > 30) return SendErrorMessage(playerid, "Ne mozete vise od 30 dana.");
	if(vreme < 1) return SendErrorMessage(playerid, "Ne mozete manje od 1 dana.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina == 0) {

		PlayerInfo[id][xVIPLevel] = 0;
		PlayerInfo[id][xVipTime] = 0;
		SetPlayerColor(id, 0xFFFFFF00);
		SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Administrator %s vam je skinuo vip status.", ImeIgraca(playerid));
		SendClientMessageEx(playerid, SVETLOPLAVA, " Skinuli ste igracu: %s vip status.", ImeIgraca(id));
		new string[128];
		format(string, sizeof(string), "Admin %s | Igrac: %s | Level vipa: %d", ImeIgraca(playerid), ImeIgraca(id), kolicina);
		LogSave("Ostalo/LogMakeVIP.log", string);
	}
	else if(kolicina == 1 || kolicina == 2 || kolicina == 3 || kolicina == 4 || kolicina == 5) {

		PlayerInfo[id][xVIPLevel] = kolicina;
		PlayerInfo[id][xVipTime] = vreme*24;
		SavePlayer(id);
		SendInfoMessage(id, "Vlasnik %s Vam je postavio VIP Level %d koji traje %d dana.", ImeIgraca(playerid), kolicina, PlayerInfo[id][xVipTime]/24);
		SendInfoMessage(id, "Koristite /vipinfo da pogledate kako funkcionise istek Vaseg VIP statusa.");
		SendInfoMessage(playerid, "Postavili ste igracu %s VIP Level %d koji traje %d dana.", ImeIgraca(id), kolicina, PlayerInfo[id][xVipTime]/24);
		new varstring[200];
		format(varstring, sizeof(varstring), "{36AB00][DONACIJA]: "col_white"Vlasnik {36AB00]%s"col_white" je postavio igracu {36AB00]%s"col_white" VIP Level %d na %d dana.", ImeIgraca(playerid), ImeIgraca(id), kolicina, PlayerInfo[id][xVipTime]/24);
		SCMA(-1, varstring);
		new string[128];
		format(string, sizeof(string), "Admin %s | Igrac: %s | Level vipa: %d | Trajanje: %d dana", ImeIgraca(playerid), ImeIgraca(id), kolicina, vreme*24);
		LogSave("Ostalo/LogMakeVIP.log", string);
	}
	else return SendErrorMessage(playerid, "Pogresan level vipa.(0, 1, 2, 3, 4, 5)");}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:donatorslot(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");

new id;
if(sscanf(params, "u", id)) {
	SendUsageMessage(playerid, "/donatorslot [ID/Deo imena]");
	return 1;}
if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");

if(PlayerInfo[id][xDonatorSlot] == true) {
	SendClientMessageEx(id, SVETLOPLAVA, "Admin %s vam je skinuo dozvolu za 4ti slot vozila.", ImeIgraca(playerid));
	SendClientMessageEx(playerid, SVETLOPLAVA, "Skinuli ste dozvolu igracu %s za 4ti slot vozila.", ImeIgraca(id));
	PlayerInfo[id][xDonatorSlot] = false;
	SavePlayer(playerid);}
else if(PlayerInfo[id][xDonatorSlot] == false) {
	SendClientMessageEx(id, SVETLOPLAVA, "Admin %s vam je dozvolio 4ti slot vozila %d$.", ImeIgraca(playerid));
	SendClientMessageEx(playerid, SVETLOPLAVA, "Dozvolili ste igracu %s 4ti slot vozila.", ImeIgraca(id));
	PlayerInfo[id][xDonatorSlot] = true;

	new varstring[200];
	format(varstring, sizeof(varstring), "{36AB00][DONACIJA]: "col_white"Vlasnik {36AB00]%s"col_white" je dozvolio igracu {36AB00]%s"col_white" donatorski slot.", ImeIgraca(playerid), ImeIgraca(id));
	SCMA(-1, varstring);
	
	SavePlayer(playerid);}
return 1;}

CMD:givemoney(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");

new id, kolicina;
if(sscanf(params, "ui", id, kolicina)) {
	SendUsageMessage(playerid, "/givemoney [ID/Deo imena][novac]");
	return 1;}
if(kolicina > 10000000) return SendErrorMessage(playerid, "Ne mozete vise od 10000000$.");
if(kolicina < 1) return SendErrorMessage(playerid, "Ne mozete manje od 1$.");
if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
DajIgracuNovac(id, kolicina);
SendClientMessageEx(id, SVETLOPLAVA, "Admin %s vam je dao %d$.",ImeIgraca(playerid), kolicina);
SendClientMessageEx(playerid, SVETLOPLAVA, "Dali ste igracu: %s %d$.",ImeIgraca(id), kolicina);

new string1[128];
format(string1, sizeof(string1), "Admin %s je dao %d$ igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));
LogSave("Ostalo/LogGiveMoneyAdmin.log", string1);

return 1;}

CMD:givefgrank(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id, kolicina, rankName[26];
	if(sscanf(params, "ui", id, kolicina)) {
		SendUsageMessage(playerid, "/givefgrank [ID/Deo imena][Broj Ranka]");
		SCM(playerid, BELA, "0 - SKIDANJE | 1 - SKRIPTER | 2 - Z.HEAD AFG | 3 - MAPPER");
		SCM(playerid, BELA, "4 - VODJA LIDERA | 5 - VODJA PROMOTERA | 6 - DEVELOPER/MAPPER");
		SCM(playerid, BELA, "7 - VODJA ADMINA (DAVATI SAMO DIREKTORIMA I VLASNICIMA) | 8 - NADREDJENI VODJI HELPERA");
		return 1;
	}
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina < 0 || kolicina > 8) return SendErrorMessage(playerid, "Pogresan broj ranka (0 do 8).");
	switch(kolicina) {
		case 0: rankName = "Nema";
		case 1: rankName = "Skripter";
		case 2: rankName = "Z.Head AFG";
		case 3: rankName = "Mapper";
		case 4: rankName = "Vodja Lidera";
		case 5: rankName = "Vodja Promotera";
		case 6: rankName = "Developer/Mapper";
		case 7: rankName = "Vodja Admina";
		case 8: rankName = "Nadredjeni Vodji Helpera";
	}
	PlayerInfo[id][xSkriptaRank] = kolicina;
	SavePlayer(id);
	SendInfoMessage(playerid, "Postavili ste rank igracu %s. (%s) ", ImeIgraca(id), rankName);
	SendInfoMessage(id, "%s vam je postavio rank: %s.", ImeIgraca(playerid), rankName);}
else
{
	SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");}
return 1;}
CMD:makehelper(playerid, params[]) {
	if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xHelper] >= 3 || PlayerInfo[playerid][xSkriptaRank] == 8) {
	new id, kolicina, slot;
	if(sscanf(params, "uii", id, kolicina, slot)) {
		SendUsageMessage(playerid, "/makehelper [ID/Deo imena][Level Helpera 0-3][Slot 1-30]");
		SendUsageMessage(playerid, "Kada postavite nekom helpera resetuje mu se helper stats.");
		SendUsageMessage(playerid, "Kada skidate helpera, koristite slot 0.");
		return 1;
	}
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(slot < 0 || slot > 30) return SendErrorMessage(playerid,"Slot ne moze biti manji od 0 ili veci od 30.");
	if(kolicina == 0) {
		if(slot != 0) return SendErrorMessage(playerid, "Koristite slot 0 da skinete nekom helpera.");
			
		if(PlayerInfo[id][xHelper] > 0) {
			new File:log,ldst[128],text[80];
			format(ldst,128,"Helperi/%d.txt",PlayerInfo[id][xHSlot]);
			format(text,64,"Niko");
			log = fopen(ldst,io_write);
			fwrite(log,text);
			fclose(log);
		}

		SetPlayerColor(id, 0xFFFFFF00);

		PlayerInfo[id][xHelper] = 0;
		PlayerInfo[id][xSkin] = SetSexSkin(id);
		PlayerInfo[id][xSpawn] = SetRandomSpawn(id);
		PlayerInfo[id][xHDutyTime] = 0;
		PlayerInfo[id][xHDutyTimeMin] = 0;
		PlayerInfo[id][xHAskq] = 0;
		PlayerInfo[id][xHSlot] = 0;

		c_SetPlayerSkin(id, SetSexSkin(id));
		SavePlayer(id);

		Fusion_SetPlayerArmour(id, 0);
		AdminDuty[id] = false;

		SendClientMessageEx(id, SVETLOPLAVA, " Vodja %s vam je skinuo Helper poziciju.",ImeIgraca(playerid));
		SendClientMessageEx(playerid, SVETLOPLAVA, " Skinuli ste igracu %s Helper poziciju.",ImeIgraca(id));

		new string[128];
		format(string, sizeof(string), "Admin %s | Igrac: %s | Level Helpera: %d", ImeIgraca(playerid), ImeIgraca(id), kolicina);
		LogSave("Ostalo/LogMakeHelper.log", string);

		new varstring[90];
		format(varstring, sizeof(varstring), "MAKE | %s je skinuo helpera igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
		AdminPoruka(NARACRVENA, varstring);
	}
	else if(kolicina == 1 || kolicina == 2) {

		if(slot == 0) return SendErrorMessage(playerid, "Ne mozete koristiti slot 0 da postavite helpera.");
		if(PlayerInfo[id][xHelper] > 0) {
			new File:log,ldst[128],text[80];
			format(ldst,128,"Helperi/%d.txt",PlayerInfo[id][xHSlot]);
			format(text,64,"Niko");
			log = fopen(ldst,io_write);
			fwrite(log,text);
			fclose(log);
		}
		PlayerInfo[id][xHSlot] = 0;

		new File:log,ldst[128],text[80],string[256];
		format(ldst,128,"Helperi/%d.txt",slot);
		format(text,64,"%s",ImeIgraca(id));
		log = fopen(ldst,io_write);
		fwrite(log,text);
		fclose(log);

		PlayerInfo[id][xHelper] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, "Admin %s vam je postavio Helper poziciju(level: %d).",ImeIgraca(playerid) , kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, "Postavili ste igracu %s Helper poziciju(level: %d).",ImeIgraca(id) , kolicina);

		PlayerInfo[id][xHDutyTime] = 0;
		PlayerInfo[id][xHDutyTimeMin] = 0;
		PlayerInfo[id][xHAskq] = 0;
		PlayerInfo[id][xHSlot] = slot;

		format(string, sizeof(string), "Admin %s | Igrac: %s | Level Helpera: %d | Slot: %d", ImeIgraca(playerid), ImeIgraca(id), kolicina, slot);
		LogSave("Ostalo/LogMakeHelper.log", string);

		new varstring[90];
		format(varstring, sizeof(varstring), "MAKE | %s je dao helpera level %d igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));
		AdminPoruka(NARACRVENA, varstring);
	}
	else if(kolicina == 3) {
		if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xSkriptaRank] == 8) {

			if(slot == 0) return SendErrorMessage(playerid, "Ne mozete koristiti slot 0 da postavite helpera.");
			if(PlayerInfo[id][xHelper] > 0) {
				new File:log,ldst[128],text[80];
				format(ldst,128,"Helperi/%d.txt",PlayerInfo[id][xHSlot]);
				format(text,64,"Niko");
				log = fopen(ldst,io_write);
				fwrite(log,text);
				fclose(log);
			}
			PlayerInfo[id][xHSlot] = 0;

			new File:log,ldst[128],text[80],string[256];
			format(ldst,128,"Helperi/%d.txt",slot);
			format(text,64,"%s",ImeIgraca(id));
			log = fopen(ldst,io_write);
			fwrite(log,text);
			fclose(log);

			PlayerInfo[id][xHelper] = kolicina; SavePlayer(id);
			SendClientMessageEx(id, SVETLOPLAVA, "Admin %s vam je postavio vodju helpera.", ImeIgraca(playerid));
			SendClientMessageEx(playerid, SVETLOPLAVA, "Postavili ste igracu %s vodju helpera na slotu %d.", ImeIgraca(id), slot);

			PlayerInfo[id][xHDutyTime] = 0;
			PlayerInfo[id][xHDutyTimeMin] = 0;
			PlayerInfo[id][xHAskq] = 0;
			PlayerInfo[id][xHSlot] = slot;

			format(string, sizeof(string), "Admin %s | Igrac: %s | Level Helpera: Vodja | Slot: %d", ImeIgraca(playerid), ImeIgraca(id), slot);
			LogSave("Ostalo/LogMakeHelper.log", string);

			new varstring[90];
			format(varstring, sizeof(varstring), "MAKE | %s je dao vodju helpera igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
			AdminPoruka(NARACRVENA, varstring);
		}
		else return SendErrorMessage(playerid, "Vodju helpera moze postaviti samo nadredjeni vodjama helpera.");
	}
	else return SendErrorMessage(playerid, "Pogresan level helpera.(0, 1, 2, 3)");}
else
{
	SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");}
return 1;}
CMD:makeadmin(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 7 || PlayerInfo[playerid][xSkriptaRank] == 7 || IsPlayerAdmin(playerid)) {
	//if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

	new id, kolicina, slot;
	if(sscanf(params, "uii", id, kolicina, slot)) {
		SendUsageMessage(playerid, "/makeadmin [ID/Deo imena][Level Admina 0-7][Slot 0-30]");
		SendUsageMessage(playerid, "Ako skidate admina, koristite slot 0. Obratite paznju da ne postavite admina na zauzet slot.");
		SendUsageMessage(playerid, "Svaki put kada postavite nekom admina resetuje mu se admin stats!");
		return 1;
	}
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(slot < 0 || slot > 30) return SendErrorMessage(playerid,"Slot ne moze biti manji od 0 ili veci od 30.");
	if(kolicina == 0) {

		if(slot != 0) return SendErrorMessage(playerid, "Koristite slot 0 da skinete nekom admina.");

		if(PlayerInfo[id][xAdmin] > 0) {
			new File:log,ldst[128],text[80];
			format(ldst,128,"Admini/%d.txt",PlayerInfo[id][xASlot]);
			format(text,64,"Niko");
			log = fopen(ldst,io_write);
			fwrite(log,text);
			fclose(log);
		}

		SetPlayerColor(id, 0xFFFFFF00);
		PlayerInfo[id][xAdmin] = 0;
		PlayerInfo[id][xTestAFG] = 0;
		PlayerInfo[id][xASlot] = 0;
		PlayerInfo[id][xSkriptaRank] = 0;
		PlayerInfo[id][xADutyTime] = 0;
		PlayerInfo[id][xADutyTimeMin] = 0;
		PlayerInfo[id][xSkin] = SetSexSkin(id);
		PlayerInfo[id][xSpawn] = SetRandomSpawn(id);
		c_SetPlayerSkin(id, SetSexSkin(id));
		ResetujAdmina(playerid); SavePlayer(id);

		Fusion_SetPlayerArmour(id, 0);
		AdminDuty[id] = false;

		for (new i = 0; i < MAX_LINES; i ++)
		{
			PlayerTextDrawHide(id, AltChatTD_Player[i]);
		}
		//PlayerTextDrawShow(id, FG_GPS[id]);

		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je skinuo Admin poziciju.",ImeIgraca(playerid));
		SendClientMessageEx(playerid, SVETLOPLAVA, " Skinuli ste igracu: %s Admin poziciju.",ImeIgraca(id));

		new string[128];
		format(string, sizeof(string), "Admin %s | Igrac: %s | Level Admina: %d | Slot: %d", ImeIgraca(playerid), ImeIgraca(id), kolicina, slot);
		LogSave("Ostalo/LogMakeAdmin.log", string);

		new varstring[90];
		format(varstring, sizeof(varstring), "MAKE | %s je skinuo admina igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
		AdminPoruka(NARACRVENA, varstring);
	}
	else if(kolicina == 1 || kolicina == 2 || kolicina == 3 || kolicina == 4 || kolicina == 5 || kolicina == 6 || kolicina == 7) {

		if(slot == 0) return SendErrorMessage(playerid, "Ne mozete koristiti slot 0 da postavite admina.");

		if(kolicina == 7)
		{
			SendErrorMessage(playerid, "Ne mozete postaviti ovu poziciju.");
			return true;
		}

		if(PlayerInfo[id][xAdmin] > 0) {
			new File:log,ldst[128],text[80];
			format(ldst,128,"Admini/%d.txt",PlayerInfo[id][xASlot]);
			format(text,64,"Niko");
			log = fopen(ldst,io_write);
			fwrite(log,text);
			fclose(log);
		}
		PlayerInfo[id][xASlot] = 0;

		new File:log,ldst[128],text[80],string[256];
		format(ldst,128,"Admini/%d.txt",slot);
		format(text,64,"%s",ImeIgraca(id));
		log = fopen(ldst,io_write);
		fwrite(log,text);
		fclose(log);

		new randkod = 10000 + random(89999);
		PlayerInfo[id][xAKod] = randkod;
		PlayerInfo[id][xAdmin] = kolicina;
		PlayerInfo[id][xASlot] = slot;
		PlayerInfo[id][xADutyTime] = 0;
		PlayerInfo[id][xADutyTimeMin] = 0;
		ResetujAdmina(playerid);

		SavePlayer(id);
		SacuvajAdmina(id);
		for (new i = 0; i < MAX_LINES; i ++)
		{
			PlayerTextDrawShow(id, AltChatTD_Player[i]);
		}

		//PlayerTextDrawHide(id, FG_GPS[id]);

		if(kolicina == 1) {
			SendClientMessageEx(id, SVETLOPLAVA, "Admin %s vam je postavio AFG 1 poziciju.",ImeIgraca(playerid) , kolicina);
			SendClientMessageEx(playerid, SVETLOPLAVA, "Postavili ste igracu %s Admin poziciju.",ImeIgraca(id) , kolicina);
		}
		else if(kolicina == 2) {
			SendClientMessageEx(id, SVETLOPLAVA, "Admin %s vam je postavio AFG 2 poziciju.",ImeIgraca(playerid) , kolicina);
			SendClientMessageEx(playerid, SVETLOPLAVA, "Postavili ste igracu %s Admin poziciju.",ImeIgraca(id) , kolicina);
		}
		else if(kolicina == 3) {
			SendClientMessageEx(id, SVETLOPLAVA, "Admin %s vam je postavio AFG 3 poziciju.",ImeIgraca(playerid) , kolicina);
			SendClientMessageEx(playerid, SVETLOPLAVA, "Postavili ste igracu %s Admin poziciju.",ImeIgraca(id) , kolicina);
		}
		else if(kolicina == 4) {
			SendClientMessageEx(id, SVETLOPLAVA, "Admin %s vam je postavio AFG 4 poziciju.",ImeIgraca(playerid) , kolicina);
			SendClientMessageEx(playerid, SVETLOPLAVA, "Postavili ste igracu %s Admin poziciju.",ImeIgraca(id) , kolicina);
		}
		else if(kolicina == 5) {
			SendClientMessageEx(id, SVETLOPLAVA, "Admin %s vam je postavio Head AFG poziciju.",ImeIgraca(playerid) , kolicina);
			SendClientMessageEx(playerid, SVETLOPLAVA, "Postavili ste igracu %s Head Admin poziciju.",ImeIgraca(id) , kolicina);
		}
		else if(kolicina == 6) {
			SendClientMessageEx(id, SVETLOPLAVA, "Admin %s vam je postavio Direktor poziciju.",ImeIgraca(playerid) , kolicina);
			SendClientMessageEx(playerid, SVETLOPLAVA, "Postavili ste igracu %s Direktor poziciju.",ImeIgraca(id) , kolicina);
		}
		else if(kolicina == 7) {
			SendClientMessageEx(id, SVETLOPLAVA, "Admin %s vam je postavio Vlasnik poziciju.",ImeIgraca(playerid) , kolicina);
			SendClientMessageEx(playerid, SVETLOPLAVA, "Postavili ste igracu %s Vlasnik poziciju.",ImeIgraca(id) , kolicina);
		}

		SendClientMessageEx(playerid, SVETLOPLAVA, "Admin %s je memorisan na slotu %d (/admini).", ImeIgraca(id), slot);
		SendClientMessageEx(id, SVETLOCRVENA, "Vas AFG kod je %d. ZAPISITE GA, potreban Vam je za duznost.", randkod);

		format(string, sizeof(string), "Admin %s | Igrac: %s | Level Admina: %d | Slot: %d", ImeIgraca(playerid), ImeIgraca(id), kolicina, slot);
		LogSave("Ostalo/LogMakeAdmin.log", string);

		new varstring[90];
		format(varstring, sizeof(varstring), "MAKE | %s je dao admina igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
		AdminPoruka(NARACRVENA, varstring);

	} else return SendErrorMessage(playerid, "Pogresan level Admina.(0, 1, 2, 3, 4, 5, 6, 7)");

} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:makepromoter(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] > 4 || PlayerInfo[playerid][xSkriptaRank] == 5) {

	new id, kolicina;
	if(sscanf(params, "ui", id, kolicina)) {
		SendUsageMessage(playerid, "/makepromoter [ID/Deo imena][0-1]");
		return 1;
	}
	new varstring[90];
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina == 0) {

		SetPlayerColor(id, 0xFFFFFF00);
		PlayerInfo[id][xPromoter] = 0; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je skinuo promoter poziciju.", ImeIgraca(playerid));
		SendClientMessageEx(playerid, SVETLOPLAVA, " Skinuli ste igracu: %s promoter poziciju.", ImeIgraca(id));

		format(varstring, sizeof(varstring), "MAKE | %s je skinuo promoter poziciju igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
		AdminPoruka(NARACRVENA, varstring);
	}
	else if(kolicina == 1) {

		PlayerInfo[id][xPromoter] = 1; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, "Admin %s vam je postavio promoter poziciju.",ImeIgraca(playerid));
		SendClientMessageEx(playerid, SVETLOPLAVA, "Postavili ste igracu: %s promoter poziciju",ImeIgraca(id));

		format(varstring, sizeof(varstring), "MAKE | %s je dao promoter poziciju igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
		AdminPoruka(NARACRVENA, varstring);
	}
	else return SendErrorMessage(playerid, "Pogresan level promotera.(0 - 1)");

} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:makeyoutuber(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 7) {

	new id, kolicina;
	if(sscanf(params, "ui", id, kolicina)) {
		SendUsageMessage(playerid, "/makeyoutuber [ID/Deo imena][0-1]");
		return 1;
	}
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	new varstring[90];
	if(kolicina == 0) {

		SetPlayerColor(id, 0xFFFFFF00);
		PlayerInfo[id][xYouTuber] = 0; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je skinuo YouTuber poziciju.", ImeIgraca(playerid));
		SendClientMessageEx(playerid, SVETLOPLAVA, " Skinuli ste igracu %s YouTuber poziciju.", ImeIgraca(id));

		format(varstring, sizeof(varstring), "MAKE | %s je skinuo YouTuber poziciju igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
		AdminPoruka(NARACRVENA, varstring);
	}
	else if(kolicina == 1) {

		PlayerInfo[id][xYouTuber] = 1; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, "Admin %s vam je postavio YouTuber poziciju.",ImeIgraca(playerid));
		SendClientMessageEx(playerid, SVETLOPLAVA, "Postavili ste igracu %s YouTuber poziciju",ImeIgraca(id));

		format(varstring, sizeof(varstring), "MAKE | %s je dao YouTuber poziciju igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
		AdminPoruka(NARACRVENA, varstring);
	}
	else return SendErrorMessage(playerid, "Ne mozete postaviti ispod 0 ili iznad 1.");

} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}


CMD:promenipol(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
new id, kolicina;
if(sscanf(params, "ui", id, kolicina)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/promenipol [ID/Deo imena] [pol]");
	SCM(playerid, BELA, "[Polovi] 1. Muski pol | 2. Zenski pol");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(kolicina == 1) {
	PlayerInfo[id][xPol] = 1;
	PlayerInfo[id][xSkin] = SetSexSkin(id);
	SendClientMessageEx(playerid, SVETLOPLAVA, "Promenili ste igracu %s spol na musko.", ImeIgraca(id));
	return 1;}
else if(kolicina == 2) {
	PlayerInfo[id][xPol] = 2;
	PlayerInfo[id][xSkin] = SetSexSkin(id);
	SendClientMessageEx(playerid, SVETLOPLAVA, "Promenili ste igracu %s spol na zensko.", ImeIgraca(id));
	return 1;}
else {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/promenipol [ID/Deo imena] [pol]");
	SCM(playerid, BELA, "[Polovi] 1. Muski pol | 2. Zenski pol");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");}
return 1;}
CMD:skinisveskole(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

new id;
if(sscanf(params, "u", id)) {
	SendUsageMessage(playerid, "/skinisveskole [ID/Deo imena]");
	return 1;}
if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");

PlayerInfo[id][xOsnovna] = 0;
PlayerInfo[id][xSrednja] = 0;
PlayerInfo[id][xFakultet] = 0;

SavePlayer(id);

SendInfoMessage(playerid, "Skinuli ste sve skole %s.", ImeIgraca(id));
SendInfoMessage(id, "Admin %s vam je skinuo sve skole.", ImeIgraca(playerid));
return 1;}
CMD:sveskole(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

new id;
if(sscanf(params, "u", id)) {
	SendUsageMessage(playerid, "/sveskole [ID/Deo imena]");
	return 1;}
if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");

PlayerInfo[id][xOsnovna] = 3;
PlayerInfo[id][xSrednja] = 6;
PlayerInfo[id][xFakultet] = 15;

SavePlayer(id);

SendInfoMessage(playerid, "Dali ste sve skole %s.", ImeIgraca(id));
SendInfoMessage(id, "Admin %s vam je postavio sve skole.", ImeIgraca(playerid));

new varstring[200];
format(varstring, sizeof(varstring), "{36AB00][DONACIJA]: "col_white"Vlasnik {36AB00]%s"col_white" je postavio igracu {36AB00]%s"col_white" sve skole.", ImeIgraca(playerid), ImeIgraca(id));
SCMA(-1, varstring);
return 1;}

CMD:rpplus(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

new id;
if(sscanf(params, "u", id)) {

	SendUsageMessage(playerid, "/rpplus [ID/Deo imena]");
	return 1;}
if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID.");

PlayerInfo[id][xRPPoen]++;
SavePlayer(id);

SendInfoMessage(playerid, "Dali ste RP Plus igracu %s.", ImeIgraca(id));
SendInfoMessage(id, "Admin %s vam je dao RP Plus.", ImeIgraca(playerid));

new varstring[90];
format(varstring, sizeof(varstring), "RPPLUS | %s je dao RP Plus igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
SCMA(NARACRVENA, varstring);

new string[128];
	format(string, sizeof(string), "Admin %s je dao RP Plus igracu %s", ImeIgraca(playerid), ImeIgraca(id));
LogSave("Ostalo/LogRPPlus.log", string);

return 1;}

CMD:rpminus(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

new id;
new varstring[90];
if(sscanf(params, "u", id)) {

	SendUsageMessage(playerid, "/rpminus [ID/Deo imena]");
	return 1;}
if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID.");

PlayerInfo[id][xRPPoen]--;
SavePlayer(id);

SendInfoMessage(playerid, "Dali ste RP Minus igracu %s.", ImeIgraca(id));
SendInfoMessage(id, "Admin %s vam je dao RP Minus.", ImeIgraca(playerid));

format(varstring, sizeof(varstring), "RPMINUS | %s je dao RP Minus igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
SCMA(NARACRVENA, varstring);

new string[128];
	format(string, sizeof(string), "Admin %s je dao RP Minus igracu %s", ImeIgraca(playerid), ImeIgraca(id));
LogSave("Ostalo/LogRPMinus.log", string);


if(PlayerInfo[id][xRPPoen] == -5) {

	format(varstring, sizeof(varstring), "RPMINUS | Igracu %s je zbog 5 RP minusa obrisan nalog.", ImeIgraca(id));
	SCMA(NARACRVENA, varstring);

	new namebre[MAX_PLAYER_NAME];
	format(namebre, sizeof(namebre), "%s", ImeIgraca(id));

	PlayerLogged[id] = false;

	CheckDeleteProperty(id);

	new stringbre[128];
	format(stringbre, sizeof(stringbre), "Igracu %s je obrisan nalog. | Razlog: 5 rp minusa", ImeIgraca(id));
	LogSave("Ostalo/LogBrisanjeAcc.log", stringbre);

	SCM(id, -1, ""col_white"Tvoj nalog je obrisan sa servera. Razlog: 5 rp minusa.");
	Fusion_Kick(id);

	new oldname[40];
	format(oldname, sizeof(oldname), "Korisnici/%s.ini", namebre);
	if(fexist(oldname)) fremove(oldname);

}

return 1;}

CMD:deleteacc(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

new imeigraca[24], ifile[64];
new varstring[90];
if(sscanf(params, "s[24]", imeigraca)) return SendUsageMessage(playerid, "/deleteacc [Ime_Prezime]");

format(ifile, 64, I_FILE, imeigraca);
if(!fexist(ifile)) return SendErrorMessage(playerid, "Taj igrac ne postoji u bazi podataka!");

if(IsPlayerConnected(GetPlayerIdFromName(imeigraca))) {

	new id = GetPlayerIdFromName(imeigraca);

	new namebre[MAX_PLAYER_NAME];
	format(namebre, sizeof(namebre), "%s", ImeIgraca(id));

	PlayerLogged[id] = false;

	CheckDeleteProperty(id);

	new stringbre[128];
	format(stringbre, sizeof(stringbre), "Igracu %s je obrisan nalog od admina %s", ImeIgraca(id), ImeIgraca(playerid));
	LogSave("Ostalo/LogDeleteAccCMD.log", stringbre);

	SCM(id, -1, ""col_white"Tvoj nalog je obrisan sa servera.");
	Fusion_Kick(id);

	new oldname[40];
	format(oldname, sizeof(oldname), "Korisnici/%s.ini", namebre);
	if(fexist(oldname)) fremove(oldname);

	format(varstring, sizeof(varstring), "DELETEACC | %s je obrisao account %s.", ImeIgraca(playerid), ImeIgraca(id));
	AdminPoruka(NARACRVENA, varstring);

}
else {

	new stringbre[128];
	format(stringbre, sizeof(stringbre), "Igracu %s je obrisan nalog od admina %s", imeigraca, ImeIgraca(playerid));
	LogSave("Ostalo/LogDeleteAccCMD.log", stringbre);

	if(fexist(ifile)) fremove(ifile);

	format(varstring, sizeof(varstring), "DELETEACC | %s je obrisao account %s.", ImeIgraca(playerid), imeigraca);
	AdminPoruka(NARACRVENA, varstring);

}
	return 1;}

CMD:dajdozvolu(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 5) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

new item[32], id;
if(sscanf(params, "s[32]u", item, id)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/dajdozvolu [kategorija] [ID/Deo imena]");
	SCM(playerid, BELA, "[Kategorije] A(motor), B(auto), C1(Kombi), C2(Kamion), C3(Kamion sa prikolicom)");
	SCM(playerid, BELA, "[Kategorije] D(brod), F(letelica), oruzje");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID.");
if(strcmp(item, "a", true) == 0) {
	PlayerInfo[id][xMotorska] = 1;
	SendInfoMessage(playerid, "Dali ste dozvolu za A kategoriju igracu %s.", ImeIgraca(id));
	SendInfoMessage(id, "Admin %s vam je dao dozvolu za A kategoriju.", ImeIgraca(playerid));}
else if(strcmp(item, "b", true) == 0) {
	PlayerInfo[id][xVozacka] = 1;
	SendInfoMessage(playerid, "Dali ste dozvolu za B kategoriju igracu %s.", ImeIgraca(id));
	SendInfoMessage(id, "Admin %s vam je dao dozvolu za B kategoriju.", ImeIgraca(playerid));}
else if(strcmp(item, "c1", true) == 0) {
	PlayerInfo[id][xKamionskaC1] = 1;
	SendInfoMessage(playerid, "Dali ste dozvolu za C1 kategoriju igracu %s.", ImeIgraca(id));
	SendInfoMessage(id, "Admin %s vam je dao dozvolu za C1 kategoriju.", ImeIgraca(playerid));}
else if(strcmp(item, "c2", true) == 0) {
	PlayerInfo[id][xKamionskaC2] = 1;
	SendInfoMessage(playerid, "Dali ste dozvolu za C2 kategoriju igracu %s.", ImeIgraca(id));
	SendInfoMessage(id, "Admin %s vam je dao dozvolu za C2 kategoriju.", ImeIgraca(playerid));}
else if(strcmp(item, "c3", true) == 0) {
	PlayerInfo[id][xKamionskaC3] = 1;
	SendInfoMessage(playerid, "Dali ste dozvolu za C3 kategoriju igracu %s.", ImeIgraca(id));
	SendInfoMessage(id, "Admin %s vam je dao dozvolu za C3 kategoriju.", ImeIgraca(playerid));}
else if(strcmp(item, "d", true) == 0) {
	PlayerInfo[id][xBrodska] = 1;
	SendInfoMessage(playerid, "Dali ste dozvolu za D kategoriju igracu %s.", ImeIgraca(id));
	SendInfoMessage(id, "Admin %s vam je dao dozvolu za D kategoriju.", ImeIgraca(playerid));}
else if(strcmp(item, "f", true) == 0) {
	PlayerInfo[id][xLetelica] = 1;
	SendInfoMessage(playerid, "Dali ste dozvolu za F kategoriju igracu %s.", ImeIgraca(id));
	SendInfoMessage(id, "Admin %s vam je dao dozvolu za F kategoriju.", ImeIgraca(playerid));}
else if(strcmp(item, "oruzje", true) == 0) {
	PlayerInfo[id][xGunLicense] = true;
	SendInfoMessage(playerid, "Dali ste dozvolu za oruzje igracu %s.", ImeIgraca(id));
	SendInfoMessage(id, "Admin %s vam je dao dozvolu za oruzje.", ImeIgraca(playerid));}
else {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/dajdozvolu [kategorija] [ID/Ime igraca]");
	SCM(playerid, BELA, "[Kategorije] A(motor), B(auto), C1(Kombi), C2(Kamion), C3(Kamion sa prikolicom)");
	SCM(playerid, BELA, "[Kategorije] D(brod), F(letelica), oruzje");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");}
return 1;}

CMD:proveriinv(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 4) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

new id;
if(sscanf(params, "u", id)) {
	SendUsageMessage(playerid, "/proveriinv [ID/Deo imena]");
	return 1;}
if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");

new varstring[128];
new DialogStrgEx[545];
strcat(DialogStrgEx, "__________________________________________________________________\n");
format(varstring, sizeof(varstring),"*** %s ***\n", ImeIgraca(id));
strcat(DialogStrgEx, varstring);
strcat(DialogStrgEx, "__________________________________________________________________\n");
strcat(DialogStrgEx, "Slot | Ime predmeta | Kolicina\n");
strcat(DialogStrgEx, "__________________________________________________________________\n");
for(new i = 0; i < 20; i++) {
	format(varstring, sizeof(varstring), "%d | %s | %d\n", i+1, inventoryInfo[id][i][invItem], inventoryInfo[id][i][invQuantity]);
	strcat(DialogStrgEx, varstring);}
strcat(DialogStrgEx, "__________________________________________________________________");
SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
return true;}

CMD:resetujinv(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 4) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

new id;
if(sscanf(params, "u", id)) {
	SendUsageMessage(playerid, "/resetujinv [ID/Deo imena]");
	return 1;}
if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");

Inventory_Clear(id);

SendInfoMessage(playerid, "Ocistili ste inventory osobe %s.", ImeIgraca(id));
SendInfoMessage(id, "%s vam je ocistio inventory.", ImeIgraca(playerid));

return true;}

CMD:setskin(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 2 || PlayerInfo[playerid][xSkriptaRank] == 2) {

	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id, kolicina;
	if(sscanf(params, "ui", id, kolicina)) {
		SendUsageMessage(playerid, "/setskin [ID/Deo imena] [Skin ID]");
		return 1;
	}
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina < 1 || kolicina > 311) return SendErrorMessage(playerid, "Broj skina ide od 1 do 311.");
	if(PlayerInfo[playerid][xAdmin] < 6 && PlayerInfo[id][xAdmin] >= 6) return SendErrorMessage(playerid, "Ne mozes to direktoru ili vlasniku.");
	PlayerInfo[id][xSkin] = kolicina; SavePlayer(id); c_SetPlayerSkin(id, kolicina);
	SendClientMessageEx(id, SVETLOPLAVA, "Admin %s vam je postavio skin ID: %d.",ImeIgraca(playerid), kolicina);
	SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s skin ID: %d.", ImeIgraca(id), kolicina);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:setstats(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
new odabir[20], id, kolicina, string1[128];
new varstring[200];
if(sscanf(params, "us[20]i", id, odabir, kolicina)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/setstats [ID/Deo imena] [opcija] [kolicina]");
	SCM(playerid, BELA, "[Opcije] level, novac, skin, pol, godine, posao, gradonacelnik, firma");
	SCM(playerid, BELA, "[Opcije] respekt, vozilo1, vozilo2, vozilo3, vozilo4, fgpoen");
	SCM(playerid, BELA, "[Opcije] imovina1, imovina2, imovina3, brojtelefona, garaza");
	SCM(playerid, CRVENA, "Da bi igrac bio bez vozila,imovine,firme kljuc trebate staviti na -1");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(strcmp(odabir,"gradonacelnik",true) == 0) {

	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina == 0) {

		PlayerInfo[id][xGradRank] = 0; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je skinuo poziciju gradonacelnika..",ImeIgraca(playerid));
		SendClientMessageEx(playerid, SVETLOPLAVA, " Skinuli ste igracu: %s poziciju gradonacelnika..",ImeIgraca(id));
		format(string1, sizeof(string1), "Admin %s je skinuo poziciju gradonacelnika igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	}
	else if(kolicina == GRAD_MAYOR) {

		PlayerInfo[id][xGradRank] = GRAD_MAYOR;  SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio poziciju gradonacelnika.",ImeIgraca(playerid));
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s poziciju gradonacelnika.",ImeIgraca(id));
		format(string1, sizeof(string1), "Admin %s je postavio poziciju gradonacelnika igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	}
	else return SendErrorMessage(playerid, "Pogresan level gradonacelnika.(0, 6)");}
else if(strcmp(odabir, "level", true) == 0) {

	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
		PlayerInfo[id][xLevel] = kolicina; SavePlayer(id); SetPlayerScore(id, kolicina);
	SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio level: %d.",ImeIgraca(playerid) , kolicina);
	SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s level: %d.",ImeIgraca(id) , kolicina);
	format(string1, sizeof(string1), "Admin %s je postavio level %d igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));}
else if(strcmp(odabir, "novac", true) == 0) {

	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
		PlayerInfo[id][xNovac] = kolicina; SavePlayer(id); SetIgracuNovac(id, kolicina);
	SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio novac: %d.",ImeIgraca(playerid) , kolicina);
	SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s novac: %d.",ImeIgraca(id) , kolicina);
	format(string1, sizeof(string1), "Admin %s je postavio novac na %d igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));}
else if(strcmp(odabir, "fgpoen", true) == 0) {

	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
		PlayerInfo[id][xFGpoeni] = kolicina; SavePlayer(id);
	SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio FGpoen: %d.",ImeIgraca(playerid) , kolicina);
	SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s FGpoen: %d.",ImeIgraca(id) , kolicina);
	format(string1, sizeof(string1), "Admin %s je postavio FGpoen %d igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));}
else if(strcmp(odabir, "brojtelefona", true) == 0) {

	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina < 100 || kolicina > 99999999) return SendErrorMessage(playerid, "Broj moze ici od 100 do 99999999(3-8 cifara)!");
	PlayerInfo[id][xBrojTelefona] = kolicina; SavePlayer(id);
	SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio broj telefona: %d.",ImeIgraca(playerid) , kolicina);
	SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s broj telefona: %d.",ImeIgraca(id) , kolicina);
	format(varstring, sizeof(varstring), "{36AB00][DONACIJA]: "col_white"Vlasnik {36AB00]%s"col_white" je postavio igracu {36AB00]%s"col_white" novi broj telefona: {36AB00]%d"col_white".", ImeIgraca(playerid), ImeIgraca(id), kolicina);
	SCMA(-1, varstring);}
else if(strcmp(odabir,"skin",true) == 0) {

	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina < 1 || kolicina > 311) return SendErrorMessage(playerid, "Broj skina ide od 1 do 311.");
	PlayerInfo[id][xSkin] = kolicina; SavePlayer(id); c_SetPlayerSkin(id, kolicina);
	SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio skin ID: %d.",ImeIgraca(playerid) , kolicina);
	SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s skind ID: %d.", ImeIgraca(id) , kolicina);
	format(string1, sizeof(string1), "Admin %s je postavio skin %d igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));}
else if(strcmp(odabir,"godine",true) == 0)
{
	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	PlayerInfo[id][xGodine] = kolicina; SavePlayer(id);
	SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio godine: %d.",ImeIgraca(playerid) , kolicina);
	SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s godine: %d.", ImeIgraca(id) , kolicina);
	format(string1, sizeof(string1), "Admin %s je postavio godine na %d igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));}
else if(strcmp(odabir,"pol",true) == 0)
{
	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina < 1 || kolicina > 2) return SendErrorMessage(playerid, "Pol 1-musko , 2-zensko.");
	if(kolicina == 1)
	{
		PlayerInfo[id][xPol] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio pol: musko.",ImeIgraca(playerid));
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s pol: musko.", ImeIgraca(id));
		format(string1, sizeof(string1), "Admin %s je postavio muski pol igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	}
	else if(kolicina == 2)
	{
		PlayerInfo[id][xPol] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio pol: zensko.",ImeIgraca(playerid));
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s pol: zensko.", ImeIgraca(id));
		format(string1, sizeof(string1), "Admin %s je postavio zenski pol igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	}
}
else if(strcmp(odabir,"posao",true) == 0)
{
	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	PlayerInfo[id][xPosao] = kolicina; PlayerInfo[id][xPlataPoen] = 0; PlayerInfo[id][xUgovor] = 0; SavePlayer(id);
	SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio posao: %d.",ImeIgraca(playerid) , kolicina);
	SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s posao: %d.", ImeIgraca(id) , kolicina);
	format(string1, sizeof(string1), "Admin %s je postavio posao %d igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));}
else if(strcmp(odabir,"respekt",true) == 0)
{
	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	PlayerInfo[id][xRespekt] = kolicina; SavePlayer(id);
	SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio respekte na: %d.",ImeIgraca(playerid) , kolicina);
	SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s respekte na: %d.", ImeIgraca(id) , kolicina);
	format(string1, sizeof(string1), "Admin %s je postavio respekte na %d igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));}
else if(strcmp(odabir,"vozilo1",true) == 0) {
	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina == -1) {
		PlayerInfo[id][xVoziloID][0] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc vozila1: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc vozila1: %d.", ImeIgraca(id), kolicina);
		format(string1, sizeof(string1), "Admin %s je skinuo kljuc vozila1 igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	}
	else {
		new ImaFajl[50],ImaSFajl[50];
		format(ImaFajl, sizeof(ImaFajl), V_FILE, kolicina);
		format(ImaSFajl, sizeof(ImaSFajl), V_FILE, PlayerInfo[id][xVoziloID][0]);
		if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "To vozilo ne postoji.");
		if(VehicleInfo[kolicina][vUsage] != PRIVATNO_VOZILO) return SendErrorMessage(playerid, "Mozete samo privatna vozila da menjate.");
		PlayerInfo[id][xVoziloID][0] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc vozila1: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc vozila1: %d.", ImeIgraca(id), kolicina);
		VehicleInfo[kolicina][vOwned] = 1; VehicleInfo[kolicina][vLocked] = 0;
		VehicleInfo[kolicina][vNeaktivnost] = 0; VehicleInfo[kolicina][vPrice] = VehPrice[VehicleInfo[kolicina][vModel]- 400][1];
		strmid(VehicleInfo[kolicina][vOwner], ImeIgraca(id), 0, strlen(ImeIgraca(id)), 32);  SaveVehicle(kolicina);


		format(string1, sizeof(string1), "Admin %s je postavio kljuc vozila1 na %d igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));
	}
}
else if(strcmp(odabir,"vozilo2",true) == 0) {
	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina == -1) {
		PlayerInfo[id][xVoziloID][1] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc vozila2: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc vozila2: %d.", ImeIgraca(id), kolicina);
		format(string1, sizeof(string1), "Admin %s je skinuo kljuc vozila2 igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	}
	else {
		new ImaFajl[50],ImaSFajl[50];
		format(ImaFajl, sizeof(ImaFajl), V_FILE, kolicina);
		format(ImaSFajl, sizeof(ImaSFajl), V_FILE, PlayerInfo[id][xVoziloID][1]);
		if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "To vozilo ne postoji.");
		if(VehicleInfo[kolicina][vUsage] != PRIVATNO_VOZILO) return SendErrorMessage(playerid, "Mozete samo privatna vozila da menjate.");
		PlayerInfo[id][xVoziloID][1] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc vozila2: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc vozila2: %d.", ImeIgraca(id), kolicina);
		VehicleInfo[kolicina][vOwned] = 1; VehicleInfo[kolicina][vLocked] = 0;
		VehicleInfo[kolicina][vNeaktivnost] = 0; VehicleInfo[kolicina][vPrice] = VehPrice[VehicleInfo[kolicina][vModel]- 400][1];
		strmid(VehicleInfo[kolicina][vOwner], ImeIgraca(id), 0, strlen(ImeIgraca(id)), 32);  SaveVehicle(kolicina);

		format(string1, sizeof(string1), "Admin %s je postavio kljuc vozila2 na %d igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));
	}
}
else if(strcmp(odabir,"vozilo3",true) == 0) {
	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina == -1) {
		PlayerInfo[id][xVoziloID][2] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc vozila3: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc vozila3: %d.", ImeIgraca(id), kolicina);
		format(string1, sizeof(string1), "Admin %s je skinuo kljuc vozila3 igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	}
	else {
		new ImaFajl[50],ImaSFajl[50];
		format(ImaFajl, sizeof(ImaFajl), V_FILE, kolicina);
		format(ImaSFajl, sizeof(ImaSFajl), V_FILE, PlayerInfo[id][xVoziloID][2]);
		if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "To vozilo ne postoji.");
		if(VehicleInfo[kolicina][vUsage] != PRIVATNO_VOZILO) return SendErrorMessage(playerid, "Mozete samo privatna vozila da menjate.");
		PlayerInfo[id][xVoziloID][2] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc vozila3: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc vozila3: %d.", ImeIgraca(id), kolicina);
		VehicleInfo[kolicina][vOwned] = 1; VehicleInfo[kolicina][vLocked] = 0;
		VehicleInfo[kolicina][vNeaktivnost] = 0; VehicleInfo[kolicina][vPrice] = VehPrice[VehicleInfo[kolicina][vModel]- 400][1];
		strmid(VehicleInfo[kolicina][vOwner], ImeIgraca(id), 0, strlen(ImeIgraca(id)), 32);  SaveVehicle(kolicina);

		format(string1, sizeof(string1), "Admin %s je postavio kljuc vozila3 na %d igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));
	}
}
else if(strcmp(odabir,"vozilo4",true) == 0) {
	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina == -1) {
		PlayerInfo[id][xVoziloID][3] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc vozila4: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc vozila4: %d.", ImeIgraca(id), kolicina);

		format(string1, sizeof(string1), "Admin %s je skinuo kljuc vozila4 igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	}
	else {
		new ImaFajl[50],ImaSFajl[50];
		format(ImaFajl, sizeof(ImaFajl), V_FILE, kolicina);
		format(ImaSFajl, sizeof(ImaSFajl), V_FILE, PlayerInfo[id][xVoziloID][3]);
		if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "To vozilo ne postoji.");
		if(VehicleInfo[kolicina][vUsage] != PRIVATNO_VOZILO) return SendErrorMessage(playerid, "Mozete samo privatna vozila da menjate.");
		PlayerInfo[id][xVoziloID][3] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc vozila4: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc vozila4: %d.", ImeIgraca(id), kolicina);
		VehicleInfo[kolicina][vOwned] = 1; VehicleInfo[kolicina][vLocked] = 0;
		VehicleInfo[kolicina][vNeaktivnost] = 0; VehicleInfo[kolicina][vPrice] = VehPrice[VehicleInfo[kolicina][vModel]- 400][1];
		strmid(VehicleInfo[kolicina][vOwner], ImeIgraca(id), 0, strlen(ImeIgraca(id)), 32);  SaveVehicle(kolicina);

		format(string1, sizeof(string1), "Admin %s je postavio kljuc vozila4 na %d igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));
	}
}
else if(strcmp(odabir,"firma",true) == 0) {
	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina == -1) {
		PlayerInfo[id][xFirmaID] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc firme: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc firme: %d.", ImeIgraca(id), kolicina);
		format(string1, sizeof(string1), "Admin %s je skinuo kljuc firme igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	}
	else {
		new ImaFajl[50],ImaSFajl[50];
		format(ImaFajl, sizeof(ImaFajl), F_FILE, kolicina);
		format(ImaSFajl, sizeof(ImaSFajl), F_FILE, PlayerInfo[id][xFirmaID]);
		if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta firma ne postoji.");
		PlayerInfo[id][xFirmaID] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc firme: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc firme: %d.", ImeIgraca(id), kolicina);
		BusinessInfo[kolicina][bOwned] = 1; BusinessInfo[kolicina][bLocked] = 0;
		BusinessInfo[kolicina][bNeaktivnost] = 0;
		BusinessInfo[kolicina][bFacture] = 100;
		strmid(BusinessInfo[kolicina][bOwner], ImeIgraca(id), 0, strlen(ImeIgraca(id)), 32);
		Business_Refresh(kolicina); SaveBusiness(kolicina);

		format(string1, sizeof(string1), "Admin %s je postavio kljuc firme na %d igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));
	}
}
else if(strcmp(odabir,"garaza",true) == 0) {
	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina == -1) {
		PlayerInfo[id][xGarageID] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc garaze: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc garaze: %d.", ImeIgraca(id), kolicina);
		format(string1, sizeof(string1), "Admin %s je skinuo kljuc garaze igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	}
	else {
		new ImaFajl[50],ImaSFajl[50];
		format(ImaFajl, sizeof(ImaFajl), F_GARAGE, kolicina);
		format(ImaSFajl, sizeof(ImaSFajl), F_GARAGE, PlayerInfo[id][xGarageID]);
		if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta garaza ne postoji.");
		PlayerInfo[id][xGarageID] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc garaze: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc garaze: %d.", ImeIgraca(id), kolicina);
		garageInfo[kolicina][garageOwned] = true; garageInfo[kolicina][garageLocked] = false;
		strmid(garageInfo[kolicina][garageOwner], ImeIgraca(id), 0, strlen(ImeIgraca(id)), 32);
		Garage_Refresh(kolicina); Garage_Save(kolicina);

		format(string1, sizeof(string1), "Admin %s je postavio kljuc garaze na %d igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));
	}
}
else if(strcmp(odabir,"imovina1",true) == 0) {
	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina == -1) {
		PlayerInfo[id][xProperty][0] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc imovine 1: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc imovine 1: %d.", ImeIgraca(id), kolicina);
		format(string1, sizeof(string1), "Admin %s je skinuo kljuc imovine1 igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	}
	else {
		new ImaFajl[50],ImaSFajl[50];
		format(ImaFajl, sizeof(ImaFajl), IM_FILE, kolicina);
		format(ImaSFajl, sizeof(ImaSFajl), IM_FILE, PlayerInfo[id][xProperty][0]);
		if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta imovina ne postoji.");
		PlayerInfo[id][xProperty][0] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc imovine 1: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc imovine 1: %d.", ImeIgraca(id), kolicina);
		II[kolicina][iOwned] = 1; II[kolicina][iLocked] = 0;
		II[kolicina][iNeaktivnost] = 0;
		strmid(II[kolicina][iOwner], ImeIgraca(id), 0, strlen(ImeIgraca(id)), 32);
		SaveProperty(kolicina); PropertyRefresh(kolicina);

		format(string1, sizeof(string1), "Admin %s je postavio kljuc imovine1 na %d igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));
	}
}
else if(strcmp(odabir,"imovina2",true) == 0) {
	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina == -1) {
		PlayerInfo[id][xProperty][1] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc imovine 2: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc imovine 2: %d.", ImeIgraca(id), kolicina);
		format(string1, sizeof(string1), "Admin %s je skinuo kljuc imovine2 igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	}
	else {
		new ImaFajl[50],ImaSFajl[50];
		format(ImaFajl, sizeof(ImaFajl), IM_FILE, kolicina);
		format(ImaSFajl, sizeof(ImaSFajl), IM_FILE, PlayerInfo[id][xProperty][1]);
		if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta imovina ne postoji.");
		PlayerInfo[id][xProperty][1] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc imovine 2: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc imovine 2: %d.", ImeIgraca(id), kolicina);
		II[kolicina][iOwned] = 1; II[kolicina][iLocked] = 0;
		II[kolicina][iNeaktivnost] = 0;
		strmid(II[kolicina][iOwner], ImeIgraca(id), 0, strlen(ImeIgraca(id)), 32);
		SaveProperty(kolicina); PropertyRefresh(kolicina);

		format(string1, sizeof(string1), "Admin %s je postavio kljuc imovine2 na %d igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));
	}
}
else if(strcmp(odabir,"imovina3",true) == 0) {
	if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(kolicina == -1) {
		PlayerInfo[id][xProperty][2] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc imovine 3: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc imovine 3: %d.", ImeIgraca(id), kolicina);
		format(string1, sizeof(string1), "Admin %s je skinuo kljuc imovine3 igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	}
	else {
		new ImaFajl[50],ImaSFajl[50];
		format(ImaFajl, sizeof(ImaFajl), IM_FILE, kolicina);
		format(ImaSFajl, sizeof(ImaSFajl), IM_FILE, PlayerInfo[id][xProperty][2]);
		if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta imovina ne postoji.");
		PlayerInfo[id][xProperty][2] = kolicina; SavePlayer(id);
		SendClientMessageEx(id, SVETLOPLAVA, " Admin %s vam je postavio kljuc imovine 3: %d.", ImeIgraca(playerid), kolicina);
		SendClientMessageEx(playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc imovine 3: %d.", ImeIgraca(id), kolicina);
		II[kolicina][iOwned] = 1; II[kolicina][iLocked] = 0;
		II[kolicina][iNeaktivnost] = 0;
		strmid(II[kolicina][iOwner], ImeIgraca(id), 0, strlen(ImeIgraca(id)), 32);
		SaveProperty(kolicina); PropertyRefresh(kolicina);

		format(string1, sizeof(string1), "Admin %s je postavio kljuc imovine3 na %d igracu %s.", ImeIgraca(playerid), kolicina, ImeIgraca(id));
	}
}
LogSave("Ostalo/LogSetStatAdmin.log", string1);
return true;}

CMD:hidenames(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
foreach(new i : Player) ShowPlayerNameTagForPlayer(playerid, i, false);
SCM(playerid, BELA, "Sklonili ste imena!");
return 1;}
CMD:hud(playerid, params[]) {
TogPlayerHud(playerid);
return 1;}
CMD:togtag(playerid, params[]) {
if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Vi ste novajlija, ne mozete koristiti ovu komandu.");
if(TogTag[playerid] == true) {
	TogTag[playerid] = false;
	SendInfoMessage(playerid, "Vratili ste Vas tag iznad imena.");}
else if(TogTag[playerid] == false) {
	TogTag[playerid] = true;
	SetPlayerChatBubble(playerid, " ", -1, 40.0, 10000);
	SendInfoMessage(playerid, "Sakrili ste Vas tag iznad imena.");}
return 1;}
CMD:shownames(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
foreach(new i : Player) ShowPlayerNameTagForPlayer(playerid, i, true);
SCM(playerid, BELA, "Sklonili ste imena!");
return 1;}

CMD:jetpack(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
new Float:Pos[3];
if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK) {
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]+2);
	SendInfoMessage(playerid, "Skinuo si jetpack te je unisten.");}
else {
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	SendInfoMessage(playerid, "Uzeo si JetPack.");
	}
return 1;}

CMD:nitro(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu!");

AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
SendInfoMessage(playerid, "Nitro je uspesno dodat u vozilo!");
return true;}

CMD:veh(playerid, params[]) {
if(ServerInfo[BrojKreiranihVozila] > MaxBrojKreiranih) return SCM(playerid, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
if(PlayerInfo[playerid][xAdmin] < 5) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 5) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

if(AdminVozilo[playerid] == -1) {
	new idv,b1,b2;
	if(sscanf(params ,"iii", idv, b1, b2)) return SendUsageMessage(playerid, "/veh [id] [boja 1] [boja 2]");
	if(idv < 400 || idv > 611) return SendErrorMessage(playerid, "ID vozila ne moze biti manji od 400 ili veci od 611!");
	if(b1 < 0 || b2 < 0 || b1 > 255 || b2 > 255) return SendErrorMessage(playerid, "ID boje ne moze biti manji od 0 ili veci od 255!");
	new Float:Poz[3];
	GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
	AdminVozilo[playerid] = Fusion_CreateVehicle(-1, -1, -1, -1, -1, idv, Poz[0], Poz[1], Poz[2], 0.0, b1, b2, -1);
	ac_LinkVehicleToInterior(AdminVozilo[playerid], GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(AdminVozilo[playerid], GetPlayerVirtualWorld(playerid));
	vCanDrive[AdminVozilo[playerid]] = 1;
	Fuel[AdminVozilo[playerid]] = getAmountFuel(AdminVozilo[playerid]);
	ac_PutPlayerInVehicle(playerid, AdminVozilo[playerid], 0);
	ResetVehicleStatistics(AdminVozilo[playerid]);
	new engine, lights, alarm, doors, bonnet, boot, objective;

	GetVehicleParamsEx(AdminVozilo[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
	ac_SetVehicleParamsEx(AdminVozilo[playerid], 1, 0, alarm, 0, 0, 0, objective);
	SendInfoMessage(playerid, "Vozilo ID: %d je stvoreno.", AdminVozilo[playerid]);}
else if(AdminVozilo[playerid] != -1) {
	SendInfoMessage(playerid, "Vozilo ID: %d je unisteno.", AdminVozilo[playerid]);
	Fusion_DestroyVehicle(AdminVozilo[playerid]);
	AdminVozilo[playerid] = -1;}
return true;}
CMD:randomid(playerid, params[])
{
if(PlayerInfo[playerid][xAdmin] >= 5) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti.");
	//SCMA(-1, "{36AB00][RANDOM ID]: "col_white"Pocelo je izvlacenje Random IDa, pobednik ce biti proglasen za 10 sekundi!");
	new randomid = random(onlinepl), varstring[156];
	format(varstring, sizeof(varstring), "{36AB00][RANDOM ID]: "col_white"Izvucen je ID {36AB00]%d"col_white" pod kojim se nalazi igrac {36AB00]%s"col_white" - CESTITKE!", randomid, ImeIgraca(randomid));
	SCMA(-1, varstring);}
else
{
	SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");}
return (true);}
CMD:fv(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 1) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti.");
	new id, Float:X, Float:Y, Float:Z, Float:A;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		GetPlayerPos(playerid, X, Y, Z);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), A);
		SetVehicleZAngle(GetPlayerVehicleID(playerid), A);
		ac_RepairVehicle(GetPlayerVehicleID(playerid));
		ac_SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
		antiCheatCS[playerid][VehRepairTime] = 3;
		vCanDrive[GetPlayerVehicleID(playerid)] = 1;
		return 1;
	}
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/fv [ID/Deo Imena]");
	if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID korisnika.");
	if(!IsPlayerInAnyVehicle(id)) return SendErrorMessage(playerid, "Igrac nije u vozilu.");
	if(GetPlayerState(id) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Igrac nije na mestu vozaca.");
	if(PlayerInfo[id][xWanted] != 0) return SendErrorMessage(playerid, "Taj igrac ima wanted level.");
	if(PoliceDuty[id] == true) return SendErrorMessage(playerid, "Taj igrac je policajac na duznosti.");
	if(NaUtrci[id]) return SendErrorMessage(playerid, "Taj igrac je na trci.");
	GetPlayerPos(id, X, Y, Z);
	GetVehicleZAngle(GetPlayerVehicleID(id), A);
	SetVehicleZAngle(GetPlayerVehicleID(id), A);
	Fusion_RepairVehicle(playerid, GetPlayerVehicleID(playerid));
	ac_SetVehicleHealth(GetPlayerVehicleID(id), 1000.0);
	antiCheatCS[id][VehRepairTime] = 3;
	vCanDrive[GetPlayerVehicleID(id)] = 1;
	SendInfoMessage(id, "%s vam je popravio vozilo.", ImeIgraca(playerid));
	new varstring[90];
	format(varstring, sizeof(varstring), "FV | %s je popravio vozilo igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	AdminPoruka(NARACRVENA, varstring);
	EnableAntiCheatForPlayer(playerid, 11, 1);}
return true;}
CMD:fixveh(playerid, params[]) {
if(PlayerInfo[playerid][xVIPLevel] >= 4 || PlayerInfo[playerid][xYouTuber] == 1) {
	if(NaUtrci[playerid]) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si na trci.");
	if(PlayerCP[playerid] > 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si na eventu.");
	if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla.");
	if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Ne mozes fixati vozilo dok imas wanted level.");
	if(PoliceDuty[playerid] == true) return SendErrorMessage(playerid, "Na duznosti si kao policajac, ne mozes koristiti ovu komandu.");
	if(FixVehGlobal[playerid] > 0) return SendErrorMessage(playerid, "Vozilo mozete popraviti svakih 60 sekundi.");
	new Float:X, Float:Y, Float:Z, Float:A;
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu!");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Niste na mestu vozaca!");
	GetPlayerPos(playerid, X, Y, Z);
	GetVehicleZAngle(GetPlayerVehicleID(playerid), A);
	SetVehicleZAngle(GetPlayerVehicleID(playerid), A);
	Fusion_RepairVehicle(playerid, GetPlayerVehicleID(playerid));
	ac_SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
	antiCheatCS[playerid][VehRepairTime] = 3;
	vCanDrive[GetPlayerVehicleID(playerid)] = 1;
	SendInfoMessage(playerid, "Okrenuli ste se sa vozilom i popravili vozilo.");
	new varstring[90];
	format(varstring, sizeof(varstring), "FIXVEH | %s je popravio svoje vozilo.", ImeIgraca(playerid));
	AdminPoruka(NARACRVENA, varstring);
	FixVehGlobal[playerid] = 60;
	EnableAntiCheatForPlayer(playerid, 11, 1);}
return true;}

CMD:ezavrsi(playerid, params[]) {
new dFile[32];
if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
if(!PlayerCreateEvent[playerid]) return SendErrorMessage(playerid, "Ti ne kreiras event!");
SCM(playerid, ZUTA, "Zavrsio si kreiranje eventa.");
PlayerCreateEvent[playerid] = false;
format(dFile, 32, EVENT_FILE, EventID[playerid]);

new
	INI:File = INI_Open(dFile);

	INI_WriteInt(File, "MaxCP", EventCP[playerid]-1);
	Event[EventID[playerid]][MaxCP] = EventCP[playerid]-1;

	INI_Close(File);
return 1;}

CMD:enapusti(playerid, params[]) {
if(EventInfo[eID] == 0) return SendErrorMessage(playerid, "Nijedan event nije upaljen");
if(PlayerCP[playerid] <= 0) return SendErrorMessage(playerid, "Niste na eventu.");
if(PlayerInfo[playerid][xZatvor] >= 1) return SendErrorMessage(playerid, "Ne mozete na event dok ste u zatvoru / ALKATRAZ.");
EventInfo[Drivers]--;
ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
TogglePlayerControllable(playerid, true);
SetPlayerVirtualWorld(playerid, 0);
PlayerCP[playerid] = 0;
PlayerEventVehID[playerid] = -1;
DisablePlayerRaceCheckpoint(playerid);

ac_SetPlayerPos(playerid, PlayerPos[playerid][0], PlayerPos[playerid][1],  PlayerPos[playerid][2]);
SetPlayerVirtualWorld(playerid, PlayerPosVW[playerid]);
ac_SetPlayerInterior(playerid, PlayerPosInt[playerid]);
SetTimerEx("SlobodnoSada", 4000, false, "i", playerid);
GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
TogglePlayerControllable(playerid, false);
return 1;}

CMD:join(playerid, params[]) {
if(EventInfo[eID] == 0) return SendErrorMessage(playerid, "Nijedan event nije upaljen");
if(PlayerCuffed[playerid] >= 1) return SendErrorMessage(playerid, "Ne mozes na event dok si cuffovan.");
if(IgracZavezan[playerid] == true) return SendErrorMessage(playerid, "Ne mozes na event dok si vezan.");
if(EventInfo[EventTime] <= 3) return SendErrorMessage(playerid, "Vreme za join je isteklo");
if(RibarOprema[playerid] == true) return SendErrorMessage(playerid, "Ne mozete ovo u opremi ribara.");
if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete ovo dok radite posao / imate uniformu.");
if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti na nogamo da bi otisli na event.");
if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Morate biti na nogama da bi otisli na event.");
if(GetPlayerInterior(playerid) != 0) return SendErrorMessage(playerid, "Ne mozete koristiti u interijeru.");
if(GetPlayerVirtualWorld(playerid) != 0) return SendErrorMessage(playerid, "Ne mozete koristiti u interijeru/vwu.");
if(PlayerInfo[playerid][xPosao] == POSAO_DRVOSECA && PosaoDrvoseca[playerid] != 0 && UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok radite posao - DRVOSECA.");
if(PlayerCP[playerid] > 0) return SendErrorMessage(playerid, "Vec ste u eventu.");
if(PlayerInfo[playerid][xWanted] >= 1) return SendErrorMessage(playerid, "Ne mozete na event dok imate wanted.");
if(PlayerInfo[playerid][xZatvor] >= 1) return SendErrorMessage(playerid, "Ne mozete na event dok ste u zatvoru / ALKATRAZ.");
if(ServerInfo[BrojKreiranihVozila] > MaxBrojKreiranih) return SCM(playerid, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Nemoguce je trenutno otici na event, limit vozila na serveru je dosegnut.");
if(EventInfo[Drivers] == 30) return SendErrorMessage(playerid, "Vec ima maksimalno igraca na eventu.");

if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 7) || PlayerInfo[playerid][xHelper] > 0) {
	new hour, minute, second;
	gettimeEx(hour, minute, second);
	FixHour(hour);
	hour = shifthour;

	new admini = 0;
	
	foreach(new i : Player) {
		if(AdminDuty[i] == true) admini++;
	}

	if((hour >= 00) && (hour <= 10)) {}
	else {
		if(admini < 3) return SendErrorMessage(playerid, "Da bi bili na eventu za vreme smene moraju biti bar 3 admina/helpera na duty.");
	}
}

EventInfo[Drivers]++;
PlayerCP[playerid] = 2;
PlayerEventVehID[playerid] = (EventInfo[Drivers]-1);
if(EventInfo[Vehicle][(EventInfo[Drivers]-1)] != INVALID_VEHICLE_ID) Fusion_DestroyVehicle(EventInfo[Vehicle][(EventInfo[Drivers]-1)]);
GetPlayerPos(playerid, PlayerPos[playerid][0], PlayerPos[playerid][1], PlayerPos[playerid][2]);
PlayerPosInt[playerid] = GetPlayerInterior(playerid);
PlayerPosVW[playerid] = GetPlayerVirtualWorld(playerid);
if(EventInfo[Drivers] % 2 == 0) {
	Event[EventInfo[eID]][PrivremeniX1] -= (6 * floatsin(-Event[EventInfo[eID]][TCPA], degrees));
	Event[EventInfo[eID]][PrivremeniY1] -= (6 * floatcos(-Event[EventInfo[eID]][TCPA], degrees));
	if(Event[EventInfo[eID]][VehID] != 0) { EventInfo[Vehicle][(EventInfo[Drivers]-1)] = Fusion_CreateVehicle(-1, -1, -1, -1, -1, Event[EventInfo[eID]][VehID], Event[EventInfo[eID]][PrivremeniX1], Event[EventInfo[eID]][PrivremeniY1], Event[EventInfo[eID]][TCPZ], Event[EventInfo[eID]][TCPA], random(128), random(128), 3600); }
	ac_SetPlayerPos(playerid, Event[EventInfo[eID]][PrivremeniX1], Event[EventInfo[eID]][PrivremeniY1], Event[EventInfo[eID]][TCPZ]);}
else {
	Event[EventInfo[eID]][PrivremeniX2] -= (6 * floatsin(-Event[EventInfo[eID]][TCPA2], degrees));
	Event[EventInfo[eID]][PrivremeniY2] -= (6 * floatcos(-Event[EventInfo[eID]][TCPA2], degrees));
	if(Event[EventInfo[eID]][VehID] != 0) { EventInfo[Vehicle][(EventInfo[Drivers]-1)] = Fusion_CreateVehicle(-1, -1, -1, -1, -1, Event[EventInfo[eID]][VehID], Event[EventInfo[eID]][PrivremeniX2], Event[EventInfo[eID]][PrivremeniY2], Event[EventInfo[eID]][TCPZ2], Event[EventInfo[eID]][TCPA2], random(128), random(128), 3600); }
	ac_SetPlayerPos(playerid, Event[EventInfo[eID]][PrivremeniX2], Event[EventInfo[eID]][PrivremeniY2], Event[EventInfo[eID]][TCPZ2]);}
ac_PutPlayerInVehicle(playerid, EventInfo[Vehicle][(EventInfo[Drivers]-1)], 0);
SetVehicleVirtualWorld(EventInfo[Vehicle][(EventInfo[Drivers]-1)], EventInfo[eID]);
SetPlayerVirtualWorld(playerid, EventInfo[eID]);
vCanDrive[EventInfo[Vehicle][(EventInfo[Drivers]-1)]] = 1;
Fuel[EventInfo[Vehicle][(EventInfo[Drivers]-1)]] = 100;
ac_PutPlayerInVehicle(playerid, EventInfo[Vehicle][(EventInfo[Drivers]-1)], 0);
ResetVehicleStatistics(EventInfo[Vehicle][(EventInfo[Drivers]-1)]);
ac_SetVehicleParamsEx(EventInfo[Vehicle][(EventInfo[Drivers]-1)], 1, 0, 0, 0, 0, 0, 0);
TogglePlayerControllable(playerid, false);
DisablePlayerRaceCheckpoint(playerid);
SendInfoMessage(playerid, "Pridruzili ste se eventu. Ako zelite da napustite - /enapusti.");
return 1;}

CMD:eucitaj(playerid, params[]) {
new DialogStrgEx[1024];
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 1) {

	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	if(EventInfo[eID] != 0) return SendErrorMessage(playerid, "Vec je ukljucen jedan event, koristite /eugasi.");

	EventStranica[playerid] = 10;
	for(new i = 1; i <= 10; i++) {

		format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, Event[i][Name]);
	}
	format(DialogStrgEx, sizeof(DialogStrgEx), "%sSledeca stranica ->", DialogStrgEx);
	SPD(playerid, dialog_EVENTSTART, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI);

} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:eugasi(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 1) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	if(EventInfo[eID] == 0) return SendErrorMessage(playerid, "Nijedan event nije ukljucen.");
	EventInfo[Position] = 0;
	EventInfo[Drivers] = 0;

	Event[EventInfo[eID]][PrivremeniX1] = Event[EventInfo[eID]][TCPX];
	Event[EventInfo[eID]][PrivremeniY1] = Event[EventInfo[eID]][TCPY];
	Event[EventInfo[eID]][PrivremeniX2] = Event[EventInfo[eID]][TCPX2];
	Event[EventInfo[eID]][PrivremeniY2] = Event[EventInfo[eID]][TCPY2];

	EventInfo[eID] = 0;

	for(new i = 0; i < 30; i++) {
		if(EventInfo[Vehicle][i] != INVALID_VEHICLE_ID) ac_SetVehicleToRespawn(EventInfo[Vehicle][i]);
	}

	foreach(new i : Player){
		if(PlayerCP[i] > 0) {
			PlayerCP[i] = 0;
			SetPlayerVirtualWorld(i, 0);
			TogglePlayerControllable(i, true);
			DisablePlayerRaceCheckpoint(i);
			PlayerEventVehID[i] = -1;

			ac_SetPlayerPos(i, PlayerPos[i][0], PlayerPos[i][1],  PlayerPos[i][2]);
			SetPlayerVirtualWorld(i, PlayerPosVW[i]);
			ac_SetPlayerInterior(i, PlayerPosInt[i]);

			SetTimerEx("SlobodnoSada", 4000, false, "i", i);
			GameTextForPlayer(i, "Ucitavanje ...", 1000, 4);
			TogglePlayerControllable(playerid, false);
		}
	}
	SendInfoMessage(playerid, "Zaustavili ste event. Sada mozete pokrenuti drugi.");
	new varstring[90];
	format(varstring, sizeof(varstring), "EVENT | %s je zaustavio event.", ImeIgraca(playerid));
	AdminPoruka(NARACRVENA, varstring);} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}


CMD:poklon(playerid, params[]) {
if(GetNearestPresent(playerid) == -1) return SendErrorMessage(playerid, "Morate biti pored poklona.");

new presentID = GetNearestPresent(playerid);

if(presentsInfo[presentID][presTaken]) return SendErrorMessage(playerid, "Poklon je vec otvoren.");
if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete uzeti poklon iz vozila!");

new cash = random(1000)+20000;
DajIgracuNovac(playerid, cash);
PlayerInfo[playerid][xPoklon]++;
new varstring[94];
format(varstring, 94, "~w~Otvorili ste poklon~n~i u njemu pronasli $%d!~n~Ukupno pronadjenih %d poklona!", cash, PlayerInfo[playerid][xPoklon]);
GameTextForPlayer(playerid, varstring, 5000, 3);
//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");

presentsInfo[presentID][presTaken] = true;
UpdateDynamic3DTextLabelText(presentsInfo[presentID][pres3d], -1, "{F3FF02][Poklon]\n\n{FFFFFF]Poklon je otvoren!");
SavePresent(presentID);
SavePlayer(playerid);

new textaa[300];
format(textaa, sizeof(textaa), "{2641FE]POKLON: {FFFFFF]%s je upravo pronasao i otvorio poklon, u njemu je pronasao $%d! (ukupno je otvorio %d poklona)", ImeIgraca(playerid), cash, PlayerInfo[playerid][xPoklon]);
SCMA(0x2641FEFF, textaa);

return true;}
CMD:slap(playerid, params[]) {
new igrac, Float:x, Float:y, Float:z;
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 1) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	if(sscanf(params,"u", igrac)) return SendUsageMessage(playerid, "/slap [ID/Deo imena]");
	if(!IsPlayerConnected(igrac)) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(PlayerInfo[playerid][xAdmin] < 6 && PlayerInfo[igrac][xAdmin] >= 6) return SendErrorMessage(playerid, "Ne mozes slapovati direktore i ownere!");
	if(PlayerInfo[playerid][xHelper] >= 1 && PlayerInfo[igrac][xAdmin] >= 1) return SendErrorMessage(playerid, "Ne mozes admine.");
	GetPlayerPos(igrac, x, y, z);
	ac_SetPlayerPos(igrac, x, y, z+5);
	SendInfoMessage(playerid, "Osamario si igraca: %s", ImeIgraca(igrac));
	SendInfoMessage(igrac, "Admin/Helper %s vas je osamario.", ImeIgraca(playerid));
	if(antiCheatCS[igrac][TakeVehicle] != INVALID_VEHICLE_ID) {
		BusyVehicle[antiCheatCS[igrac][TakeVehicle]] = -1;
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:xgoto(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new Float:Poz[3];
if(sscanf(params, "fff", Poz[0], Poz[1], Poz[2])) return SendUsageMessage(playerid, "/xgoto [x] [y] [z]");
if(IsPlayerInAnyVehicle(playerid)) { ac_SetVehiclePos(GetPlayerVehicleID(playerid), Poz[0], Poz[1], Poz[2]); }
else { ac_SetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]); }
SendInfoMessage(playerid, "Teleportovani ste na koordinate %f, %f, %f",Poz[0], Poz[1], Poz[2]);
return true;}

CMD:apark(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 1) {

	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

	new Float:Pos[4];

	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu!");
	if(ScriptIDVozila[GetPlayerVehicleID(playerid)] == -1) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti u privatnom vozilu.");
	if(TipVozila[GetPlayerVehicleID(playerid)] != PRIVATNO_VOZILO) return SendErrorMessage(playerid, "Mozete parkirati samo privatna vozila.");
	if(GetPlayerVehicleSeat(playerid) != 0) return SendErrorMessage(playerid, "Morate biti u vozilu na vozackom mestu!");

	new autoid = ScriptIDVozila[GetPlayerVehicleID(playerid)];

	GetVehiclePos(VehicleInfo[autoid][vID], Pos[0], Pos[1], Pos[2]);
	GetVehicleZAngle(VehicleInfo[autoid][vID], Pos[3]);

	VehicleInfo[autoid][vVirtualWorld] = GetPlayerVirtualWorld(playerid);
	VehicleInfo[autoid][vInterior] = GetPlayerInterior(playerid);

	VehicleInfo[autoid][vLokacijaX] = Pos[0];
	VehicleInfo[autoid][vLokacijaY] = Pos[1];
	VehicleInfo[autoid][vLokacijaZ] = Pos[2];
	VehicleInfo[autoid][vLokacijaA] = Pos[3];

	DestroyVehicle(VehicleInfo[autoid][vID]);
	VehicleInfo[autoid][vID] = Fusion_CreateVehicle(autoid, PRIVATNO_VOZILO, -1, -1, -1, VehicleInfo[autoid][vModel], VehicleInfo[autoid][vLokacijaX], VehicleInfo[autoid][vLokacijaY], VehicleInfo[autoid][vLokacijaZ]+1.0, VehicleInfo[autoid][vLokacijaA], VehicleInfo[autoid][vColor1], VehicleInfo[autoid][vColor2], 300000);
	ac_LinkVehicleToInterior(VehicleInfo[autoid][vID], VehicleInfo[autoid][vInterior]);
	SetVehicleVirtualWorld(VehicleInfo[autoid][vID], VehicleInfo[autoid][vVirtualWorld]);

	TuneVehicle(autoid);

	ac_SetVehicleParamsEx(VehicleInfo[autoid][vID], 0, 0, 0, VehicleInfo[autoid][vLocked], 0, 0, 0);
	if(IsVehicleBajs(VehicleInfo[autoid][vID])) {
		ac_SetVehicleParamsEx(VehicleInfo[autoid][vID], 1, 0, 0, VehicleInfo[autoid][vLocked], 0, 0, 0);
	}

	SaveVehicle(autoid);

	SendInfoMessage(playerid, "Uspesno ste parkirali vozilo ID %d!", ScriptIDVozila[GetPlayerVehicleID(playerid)]);

}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:aupali(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 1) {

		if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

		new vehicle = GetPlayerVehicleID(playerid),
			engine,lights,alarm,doors,bonnet,boot,objective;

		if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu da biste koristili ovu komandu!");
		if(vCanDrive[vehicle] == 0) return SendErrorMessage(playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");
		if(IsVehicleBajs(vehicle)) return SendErrorMessage(playerid, "Ne mozete upaliti bicikl.");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti vozac da bi ste mogli koristit ovu komandu.");
		if(Fuel[vehicle] == 0) return SendErrorMessage(playerid, "Vozilo nema goriva, ne mozete ga upaliti.");

		GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
		if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
		new varstring[60];
		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
		SetPVarInt(playerid, "StartingVehicle", 1);
		//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");

return 1;}

CMD:goto(playerid, params[], help) { 
new Float:pozp[3], igrac;
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 1 || PlayerInfo[playerid][xVIPLevel] >= 1 || PlayerInfo[playerid][xPromoter] >= 1 || PlayerInfo[playerid][xYouTuber] == 1) {
	if(sscanf(params, "u", igrac)) return SendUsageMessage(playerid, "/goto [ID/Deo imena]");
	if(igrac == IPI) return SendErrorMessage(playerid, "Pogresan ID.");
	if(igrac == playerid) return SendErrorMessage(playerid, "Ne mozete se portati sami do sebe.");
	if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 1) { if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti"); }
	if(SpecaLik[igrac] == 1) return SendErrorMessage(playerid, "Ne mozes da se portas do njega, u spec modu je.");
	if(PlayerInfo[playerid][xAdmin] >= 1) {
		if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes se portati dok radis posao ili imas uniformu posla.");
	}
	else if(PlayerInfo[playerid][xHelper] >= 1) {
		if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes dok si u DM Zoni.");
		if(NaUtrci[playerid]) return SendErrorMessage(playerid, "Ne mozes dok si na trci.");
		if(PlayerInfo[igrac][xAdmin] >= 1) return SendErrorMessage(playerid, "Ne mozes se portati kod Admina.");
		if(PoliceDuty[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si na duznosti.");
		if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes se portati dok radis posao ili imas uniformu posla.");
		//if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Ne mozes se portati dok imas wanted level.");
		//if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes se portati dok si u jailu.");
		//if(PljackaUToku || ZlataraUToku) return SendErrorMessage(playerid, "Ne mozes se portati dok je pljacka u toku.");
	}
	else if(PlayerInfo[playerid][xVIPLevel] >= 1) {
		if(PlayerInfo[igrac][xHelper] >= 1) return SendErrorMessage(playerid, "Ne mozes se portati do Helpera.");
		if(PlayerInfo[igrac][xWanted] > 0) return SendErrorMessage(playerid, "Ne mozes se portati do igraca koj ima WL.");
		if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes dok si u DM Zoni.");
		if(NaUtrci[playerid]) return SendErrorMessage(playerid, "Ne mozes dok si na trci.");
		if(PlayerInfo[igrac][xAdmin] >= 1) return SendErrorMessage(playerid, "Ne mozes se portati do Admina.");
		if(PoliceDuty[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si na duznosti.");
		if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes se portati dok radis posao ili imas uniformu posla.");
		if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Ne mozes se portati dok imas wanted level.");
		if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes se portati dok si u jailu.");
		if(PljackaUToku || ZlataraUToku) return SendErrorMessage(playerid, "Ne mozes se portati dok je pljacka u toku.");
		if(NaDmEventu[igrac] == true) return SendErrorMessage(playerid, "Ne mozes dok je igrac na DM eventu.");
		//if(uInterijeru[playerid] != -1) return SendErrorMessage(playerid, "Ne mozes da se portas dok si u interijeru.");
		//if(uInterijeru[igrac] != -1) return SendErrorMessage(playerid, "Ne mozes da se portas do igraca koji je u interijeru.");
		if(GotoCMD[playerid] > 0) return SendErrorMessage(playerid, "Morate cekati %d sekundi pre novog porta!", GotoCMD[playerid]);
	}
	else if(PlayerInfo[playerid][xYouTuber] >= 1) {
		if(PlayerInfo[igrac][xHelper] >= 1) return SendErrorMessage(playerid, "Ne mozes se portati do Helpera.");
		if(PlayerInfo[igrac][xWanted] > 0) return SendErrorMessage(playerid, "Ne mozes se portati do igraca koj ima WL.");
		if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes dok si u DM Zoni.");
		if(NaUtrci[playerid]) return SendErrorMessage(playerid, "Ne mozes dok si na trci.");
		if(PlayerInfo[igrac][xAdmin] >= 1) return SendErrorMessage(playerid, "Ne mozes se portati do Admina.");
		if(PoliceDuty[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si na duznosti.");
		if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes se portati dok radis posao ili imas uniformu posla.");
		if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Ne mozes se portati dok imas wanted level.");
		if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes se portati dok si u jailu.");
		if(PljackaUToku || ZlataraUToku) return SendErrorMessage(playerid, "Ne mozes se portati dok je pljacka u toku.");
		if(NaDmEventu[igrac] == true) return SendErrorMessage(playerid, "Ne mozes dok je igrac na DM eventu.");
		//if(uInterijeru[playerid] != -1) return SendErrorMessage(playerid, "Ne mozes da se portas dok si u interijeru.");
		//if(uInterijeru[igrac] != -1) return SendErrorMessage(playerid, "Ne mozes da se portas do igraca koji je u interijeru.");
		if(GotoCMD[playerid] > 0) return SendErrorMessage(playerid, "Morate cekati %d sekundi pre novog porta!", GotoCMD[playerid]);
	}
	else if(PlayerInfo[playerid][xPromoter] >= 1) {
		if(PlayerInfo[igrac][xHelper] >= 1) return SendErrorMessage(playerid, "Ne mozes se portati do Helpera.");
		if(PlayerInfo[igrac][xWanted] > 0) return SendErrorMessage(playerid, "Ne mozes se portati do igraca koj ima WL.");
		if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes dok si u DM Zoni.");
		if(NaUtrci[playerid]) return SendErrorMessage(playerid, "Ne mozes dok si na trci.");
		if(PlayerInfo[igrac][xAdmin] >= 1) return SendErrorMessage(playerid, "Ne mozes se portati do Admina.");
		if(PoliceDuty[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si na duznosti.");
		if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes se portati dok radis posao ili imas uniformu posla.");
		if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Ne mozes se portati dok imas wanted level.");
		if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes se portati dok si u jailu.");
		if(PljackaUToku || ZlataraUToku) return SendErrorMessage(playerid, "Ne mozes se portati dok je pljacka u toku.");
		if(NaDmEventu[igrac] == true) return SendErrorMessage(playerid, "Ne mozes dok je igrac na DM eventu.");
		//if(uInterijeru[playerid] != -1) return SendErrorMessage(playerid, "Ne mozes da se portas dok si u interijeru.");
		//if(uInterijeru[igrac] != -1) return SendErrorMessage(playerid, "Ne mozes da se portas do igraca koji je u interijeru.");
		if(GotoCMD[playerid] > 0) return SendErrorMessage(playerid, "Morate cekati %d sekundi pre novog porta!", GotoCMD[playerid]);
	}
	if(PlayerInfo[playerid][xAdmin] < 6 && PlayerInfo[igrac][xAdmin] >= 6) return SendErrorMessage(playerid, "Ne mozete se teleportovati do ownera i direktora!");
	if(PlayerInfo[playerid][xVIPLevel] >= 1 || PlayerInfo[playerid][xPromoter] >= 1 || PlayerInfo[playerid][xYouTuber] == 1) {
		if(TPZahtev[igrac] != -1) return SendErrorMessage(playerid,"Taj igrac vec ima zahtev za teleport na cekanju.");
		if(TPZahtev[playerid] != -1) return SendErrorMessage(playerid,"Vec ste poslali zahtev za teleport.");
		TPZahtev[playerid] = igrac;
		TPZahtev[igrac] = playerid;
		new str[200];
		format(str,sizeof(str),"{FFFFFF]Igrac {0077C7]%s {FFFFFF]Vam je poslao zahtev za teleport.\nDa prihvatite pritisnite 'Prihvati'.\nDa odbijete pritisnite 'Odbij'.",ImeIgraca(playerid));
		SPD(igrac,dialog_ZAHTEVTP,DSMSG,"{0077C7]Zahtev za teleport",str,"Prihvati","Odbij");
		SendInfoMessage(playerid,"Poslali ste zahtev za teleport igracu %s.", ImeIgraca(igrac));
		GotoTimer[playerid] = SetTimerEx("TimerGoto", 60000, false, "i", playerid);
		GotoTimer[igrac] = SetTimerEx("TimerGoto", 60000, false, "i", igrac);
		return (1);
	}

	EnableAntiCheatForPlayer(playerid, 2, 0);
	EnableAntiCheatForPlayer(playerid, 7, 0);
	EnableAntiCheatForPlayer(playerid, 9, 0);
	EnableAntiCheatForPlayer(playerid, 0, 0);

	GetPlayerPos(igrac, pozp[0], pozp[1], pozp[2]);
	if(GetPlayerState(playerid) == 2) {
		ac_SetVehiclePos(GetPlayerVehicleID(playerid), pozp[0]+1, pozp[1]+1, pozp[2]);
		ac_SetPlayerInterior(playerid, GetPlayerInterior(igrac));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(igrac));
	}
	else {
		ac_SetPlayerPos(playerid, pozp[0]+1, pozp[1]+1, pozp[2]);
		ac_SetPlayerInterior(playerid, GetPlayerInterior(igrac));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(igrac));
	}

	SendInfoMessage(playerid, "Teleportirani ste do igraca: %s", ImeIgraca(igrac));
	SendInfoMessage(igrac, "%s se teleportovao do vas.", ImeIgraca(playerid));

	if(inOrgInt[igrac] != -1) {
		inOrgInt[playerid] = inOrgInt[igrac];
	}

	if(uInterijeru[igrac] != -1) {
		uInterijeru[playerid] = uInterijeru[igrac];
	}

	if(PlayerInfo[playerid][xAdmin] < 6) {
		new varstring[90];
		format(varstring, sizeof(varstring), "GOTO | %s se portao do igraca: %s", ImeIgraca(playerid), ImeIgraca(igrac));
		RPTChat(NARACRVENA, varstring);
	}

	EnableAntiCheatForPlayer(playerid, 2, 1);
	EnableAntiCheatForPlayer(playerid, 7, 1);
	EnableAntiCheatForPlayer(playerid, 9, 1);
	EnableAntiCheatForPlayer(playerid, 0, 1);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:gethere(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 2) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new igrac, Float:x, Float:y, Float:z;
	if(sscanf(params, "u", igrac)) return SendUsageMessage(playerid, "/gethere [ID/Deo imena]");
	if(igrac == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");
	if(PlayerInfo[playerid][xAdmin] < 6 && PlayerInfo[igrac][xAdmin] >= 6) return SendErrorMessage(playerid, "Ne mozes teleportovati direktore i ownere!");
	if(PlayerInfo[playerid][xHelper] >= 1 && PlayerInfo[igrac][xAdmin] >= 1) return SendErrorMessage(playerid, "Ne mozes teleportovati admine!");
	if(PlayerInfo[igrac][xZatvor] != 0 && PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Ne mozes da teleportujes igraca iz jaila.");

	if(uFirmi[playerid] != -1) uFirmi[igrac] = uFirmi[playerid];

	if(uInterijeru[playerid] != -1) uInterijeru[igrac] = uInterijeru[playerid];

	GetPlayerPos(playerid, x, y, z);
	ac_SetPlayerPos(igrac, x+1, y+1, z);
	ac_SetPlayerInterior(igrac, GetPlayerInterior(playerid));
	SetPlayerVirtualWorld(igrac, GetPlayerVirtualWorld(playerid));
	SendInfoMessage(playerid, "Teleportirali ste igraca %s do sebe.", ImeIgraca(igrac));
	SendInfoMessage(igrac, "%s vas je teleportovao do sebe.", ImeIgraca(playerid));

	if(PlayerInfo[playerid][xAdmin] < 6) {
		new varstring[90];
		format(varstring, sizeof(varstring), "GETHERE | %s je portao do sebe igraca: %s", ImeIgraca(playerid), ImeIgraca(igrac));
		RPTChat(NARACRVENA, varstring);
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}
CMD:getsvepromotere(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xSkriptaRank] == 5) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new Float:x, Float:y, Float:z;
	foreach(new i : Player)
	{
			if(PlayerInfo[i][xPromoter] >= 1)
			{
				GetPlayerPos(playerid, x, y, z);
			ac_SetPlayerPos(i, x+1, y+1, z);
			ac_SetPlayerInterior(i, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
			SendInfoMessage(i, "%s vas je teleportovao do sebe.", ImeIgraca(playerid));
			}
		}
	SendInfoMessage(playerid, "Teleportirali ste sve promotere do sebe.");

	if(PlayerInfo[playerid][xAdmin] < 6) {
		new varstring[90];
		format(varstring, sizeof(varstring), "PROMOTER | %s je portao do sebe sve promotere", ImeIgraca(playerid));
		RPTChat(NARACRVENA, varstring);
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:getsvehelpere(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xHelper] >= 3 || PlayerInfo[playerid][xSkriptaRank] == 8) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new Float:x, Float:y, Float:z;
	foreach(new i : Player)
	{
			if(PlayerInfo[i][xHelper] >= 1)
			{
				GetPlayerPos(playerid, x, y, z);
			ac_SetPlayerPos(i, x+1, y+1, z);
			ac_SetPlayerInterior(i, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
			SendInfoMessage(i, "%s vas je teleportovao do sebe.", ImeIgraca(playerid));
			}
		}
	SendInfoMessage(playerid, "Teleportirali ste sve helpere do sebe.");

	if(PlayerInfo[playerid][xAdmin] < 6) {
		new varstring[90];
		format(varstring, sizeof(varstring), "HELPER | %s je portao do sebe sve helpere", ImeIgraca(playerid));
		RPTChat(NARACRVENA, varstring);
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:dajhelperima(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new iznos;
	if(sscanf(params, "i", iznos)) return SendUsageMessage(playerid, "/dajhelperima [iznos]");
	foreach(new i : Player)
	{
			if(PlayerInfo[i][xHelper] >= 1)
			{
				DajIgracuNovac(i, iznos);
			SendInfoMessage(i, "%s vam je dao $%d.", ImeIgraca(playerid), iznos);
			PlayAudioStreamForPlayer(i, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");
			}
		}
	SendInfoMessage(playerid, "Dali ste $%d svim online helperima.", iznos);

	if(PlayerInfo[playerid][xAdmin] < 6) {
		new varstring[90];
		format(varstring, sizeof(varstring), "PLATA | %s je dao svim online helperima $%d.", ImeIgraca(playerid), iznos);
		RPTChat(NARACRVENA, varstring);
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}
CMD:dajpromoterima(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new iznos;
	if(sscanf(params, "i", iznos)) return SendUsageMessage(playerid, "/dajpromoterima [iznos]");
	foreach(new i : Player)
	{
			if(PlayerInfo[i][xPromoter] >= 1)
			{
				DajIgracuNovac(i, iznos);
			SendInfoMessage(i, "%s vam je dao $%d.", ImeIgraca(playerid), iznos);
			PlayAudioStreamForPlayer(i, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");
			}
		}
	SendInfoMessage(playerid, "Dali ste $%d svim online promoterima.", iznos);

	if(PlayerInfo[playerid][xAdmin] < 6) {
		new varstring[90];
		format(varstring, sizeof(varstring), "PLATA | %s je dao svim online promoterima $%d.", ImeIgraca(playerid), iznos);
		RPTChat(NARACRVENA, varstring);
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}
CMD:pm(playerid, params[]) {
new id, apmtext[128], string1[234];
if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(sscanf(params, "us[128]", id, apmtext)) return SendUsageMessage(playerid, "/pm [ID/Deo imena] [Text]");
if(id == playerid) return SendErrorMessage(playerid, "Ne mozes sam sebi poslat poruku!");
if(id == IPI) return SendErrorMessage(playerid, "Igrac nije online!");
if(PlayerInfo[playerid][xAdmin] < 6 && PlayerInfo[id][xAdmin] >= 6) return SendErrorMessage(playerid, "Ne mozes pisati direktoru i owneru!");
AI[playerid][aTPM] ++;
SendClientMessageEx(playerid, -1, ""col_server"Poslao si odg igracu %s: "col_white"Postovani %s, %s", ImeIgraca(id), ImeIgraca(id), apmtext);
SendClientMessageEx(id, ZELENA, ""col_server"Admin kaze: "col_white"Postovani %s, %s", ImeIgraca(id), apmtext);
format(string1 , sizeof(string1), "{AE7C5B]|A| %s -> %s : %s.", ImeIgraca(playerid), ImeIgraca(id), apmtext);
AdminPoruka(1, string1);
SacuvajAdmina(playerid);
new string[128];
format(string, sizeof(string), "Admin %s -> Igrac: %s | Tekst: %s", ImeIgraca(playerid), ImeIgraca(id), apmtext);
LogSave("Ostalo/LogAODG.log", string);

apmtext[0] = (EOS);

return 1;}

CMD:hodg(playerid, params[]) {
new id, apmtext[128], string1[234];
if(PlayerInfo[playerid][xHelper] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(sscanf(params, "us[128]", id, apmtext)) return SendUsageMessage(playerid, "/hodg [ID/Deo imena] [Text]");
if(id == playerid) return SendErrorMessage(playerid, "Ne mozes sam sebi poslat poruku!");
if(id == IPI) return SendErrorMessage(playerid, "Igrac nije online!");
if(PlayerInfo[id][xAdmin] >= 6) return SendErrorMessage(playerid, "Ne mozes pisati direktoru i owneru!");
SendClientMessageEx(playerid, ZELENA, "{DABB3E]Poslao si odg igracu %s: "col_white"Postovani %s, %s", ImeIgraca(id), ImeIgraca(id), apmtext);
SendClientMessageEx(id, ZELENA, "{DABB3E]Helper kaze: "col_white"Postovani %s, %s", ImeIgraca(id),apmtext);
format(string1 , sizeof(string1), "{AE7C5B]|HODG| %s -> %s : %s.", ImeIgraca(playerid), ImeIgraca(id), apmtext);
RPTChatPlus(Helper, string1);
AI[playerid][aTPM] ++;
SacuvajAdmina(playerid);
new string[128];
format(string, sizeof(string), "Helper %s -> Igrac: %s | Tekst: %s", ImeIgraca(playerid), ImeIgraca(id), apmtext);
LogSave("Ostalo/LogGODG.log", string);

apmtext[0] = (EOS);

return 1;}

CMD:aclear(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 4) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

	new id;
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/aclear [ID/Deo imena] ");
	if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID Korisnika");

	PlayerInfo[id][xWanted] = 0;
	Fusion_SetPlayerWantedLevel(id, PlayerInfo[id][xWanted]);
	strmid(ZlocinInfo[id][zPrijavio], "Nema", 0, strlen("Nema"), 255);
	strmid(ZlocinInfo[id][zPocinio], "Nema", 0, strlen("Nema"), 255);
	strmid(ZlocinInfo[id][zZlocin], "Nema", 0, strlen("Nema"), 255);

	SendInfoMessage(id, "Admin %s vam je skinuo wanted level.", ImeIgraca(playerid));
	SendInfoMessage(playerid, "Skinuli ste igracu %s wanted level.", ImeIgraca(id));
	new varstring[90];
	format(varstring, sizeof(varstring), "WL | %s je skinuo wanted level igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	AdminPoruka(NARACRVENA, varstring);} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:skiniposao(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 4) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id; 
	new varstring[90];
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/skiniposao [ID/Deo imena]");
	if(id == IPI) return SendErrorMessage(playerid, "Igrac nije online!");
	if(PlayerInfo[id][xPosao] == 0) return SendErrorMessage(playerid, "Taj igrac nema posao!");
	PlayerInfo[id][xPosao] = 0;
	PlayerInfo[id][xPlataPoen] = 0;
	PlayerInfo[id][xUgovor] = -1;
	UzeoOpremu[id] = false;
	c_SetPlayerSkin(id, PlayerInfo[id][xSkin]);
	SendInfoMessage(id, "Admin %s vam je skinuo posao, sada ste nezaposleni.", ImeIgraca(playerid));
	SendInfoMessage(playerid, "Skinuli ste igracu %s posao, sada je nezaposlen.", ImeIgraca(id));
	format(varstring, sizeof(varstring), "JOB | %s je skinuo posao igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	AdminPoruka(NARACRVENA, varstring);
	}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:setint(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 4) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id, intid;
	new varstring[90];
	if(sscanf(params, "ui", id, intid)) return SendUsageMessage(playerid, "/setint [ID/Deo imena] [ID interiora] ");
	if(id == IPI) return SendErrorMessage(playerid, "Igrac nije online!");
	ac_SetPlayerInterior(id, intid);
	SendInfoMessage(id, "Admin %s vam je postavio interior na %d.", ImeIgraca(playerid), intid);
	SendInfoMessage(playerid, "Postavili ste igracu %s interior na %d.", ImeIgraca(id), intid);
	format(varstring, sizeof(varstring), "INT | %s je postavio interior igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	AdminPoruka(NARACRVENA, varstring);
	}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:setvw(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 4) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id, vwid;
	new varstring[90];
	if(sscanf(params, "ui", id, vwid)) return SendUsageMessage(playerid, "/setvw [ID/Deo imena] [ID VW-a]");
	if(id == IPI) return SendErrorMessage(playerid, "Igrac nije online!");
	SetPlayerVirtualWorld(id, vwid);
	SendInfoMessage(id, "Admin %s vam je postavio virtual world na %d.", ImeIgraca(playerid), vwid);
	SendInfoMessage(playerid, "Postavili ste igracu %s virtual world na %d.", ImeIgraca(id), vwid);
	format(varstring, sizeof(varstring), "VW | %s je postavio virtual world igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	AdminPoruka(NARACRVENA, varstring);
	}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:fine(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

	new id, novac;
	new varstring[144];
	if(sscanf(params, "ud", id, novac)) return SendUsageMessage(playerid, "/fine [ID/Deo imena] [novac] ");
	if(id == playerid) return SendErrorMessage(playerid, "Ne mozes sam sebe fine!");
	if(novac < 1) return SendErrorMessage(playerid, "Novac ne moze ici ispod 1 !");
	if(novac > 1000000) return SendErrorMessage(playerid, "Novac ne moze ici preko 1000000 !");
	if(id == IPI) return SendErrorMessage(playerid, "Igrac nije online!");
	if(PlayerInfo[playerid][xAdmin] < 6 && PlayerInfo[id][xAdmin] >= 6) return SendErrorMessage(playerid, "Ne mozes kickati direktore i ownere!");

	DajIgracuNovac(id, -novac);
	AI[playerid][aTCharge] += novac;
	SacuvajAdmina(playerid);
	format(varstring , sizeof(varstring), ""col_white"Fineovani ste! Admin: "col_crvena"%s "col_white"Novac: "col_crvena"-%d", ImeIgraca(playerid), novac);
	SCM(id, -1, varstring);
	////PlayAudioStreamForPlayer(id, "http://k003.kiwi6.com/hotlink/2iuesa4qnr/fine.mp3");
	SendClientMessageEx(playerid, -1, "Fineovali ste igraca "col_crvena"%s "col_white"Novac: "col_crvena"- %d",ImeIgraca(id), novac);
	format(varstring, sizeof(varstring), "FINE | %s je fineovao igraca: %s Novac: -%d$", ImeIgraca(playerid), ImeIgraca(id), novac);
	SCMA(0x990000FF, varstring);

	new string[128];
	format(string, sizeof(string), "Admin %s je fineovao igraca %s | Novac: -%d", ImeIgraca(playerid), ImeIgraca(id), novac);
	LogSave("Ostalo/LogFine.log", string);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:kick(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 2) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

	new id, reason[32];
	if(sscanf(params, "us[32]", id, reason)) return SendUsageMessage(playerid, "/kick [ID/Deo imena] [Razlog] ");
	if(id == playerid) return SendErrorMessage(playerid, "Ne mozes sam sebe kikovati!");
	if(strlen(reason) < 1 || strlen(reason) > 31) return SendErrorMessage(playerid, "Razlog ne moze biti duzi od 31 simbola!");
	if(id == IPI) return SendErrorMessage(playerid, "Igrac nije online!");
	if(PlayerInfo[playerid][xAdmin] < 6 && PlayerInfo[id][xAdmin] >= 6) return SendErrorMessage(playerid, "Ne mozes kickati direktore i ownere!");
	if(PlayerInfo[playerid][xHelper] >= 1 && PlayerInfo[id][xAdmin] >= 1) return SendErrorMessage(playerid, "Ne mozes kikovati admine!");

	AI[playerid][aTKick]++;
	SacuvajAdmina(playerid);
	ServerInfo[KikovanihKorisnika]++;

	new varstring[128];
	format(varstring , sizeof(varstring), ""col_white"Kickovani ste! Admin: "col_crvena"%s "col_white"Razlog: "col_crvena"%s", ImeIgraca(playerid), reason);
	SCM(id, -1, varstring);
	Fusion_Kick(id);
	SendClientMessageEx(playerid, -1, "Kikovali ste igraca "col_crvena"%s "col_white"| Razlog: "col_crvena"%s",ImeIgraca(id), reason);
	format(varstring, sizeof(varstring), "KICK | Admin je kickovao igraca: %s | Razlog: %s", ImeIgraca(id), reason);
	SCMA(0x990000FF, varstring);

	new string[128];
	format(string, sizeof(string), "Admin %s je kikovao igraca %s | Razlog: %s", ImeIgraca(playerid), ImeIgraca(id), reason);
	LogSave("Ostalo/LogKick.log", string);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:unjail(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 2) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id;
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/unjail [ID/Deo imena]");
	if(id == IPI) return SendUsageMessage(playerid, "Pogresan ID igraca.");
	if(PlayerInfo[id][xZatvor] != OBICAN_ZATVOR) return SendErrorMessage(playerid, "Igrac mora biti u obicnom zatvoru da koristite ovu komandu.");

	new rand = random(sizeof(RandomCelije));
	ac_SetPlayerPos(id, RandomCelije[rand][0], RandomCelije[rand][1], RandomCelije[rand][2]);
	SetTimerEx("SlobodnoSada", 2000, false, "i", id);
	SetCameraBehindPlayer(id);
	TogglePlayerControllable(id, false);
	ac_SetPlayerInterior(id, 0);
	SetPlayerVirtualWorld(id, 0);

	PlayerInfo[id][xZatvor] = 0;
	PlayerInfo[id][xZatvorVreme] = 0;
	GameTextForPlayer(id, "~g~Sloboda~n~~w~Pokusajte biti bolji gradjanin", 5000, 1);

	AI[playerid][aTUnjail]++;
	SacuvajAdmina(playerid);

	new varstring[90];
	SendClientMessageEx(id, SVETLOCRVENA, "Admin %s vas je oslobodio iz zatvora.", ImeIgraca(playerid));
	SendClientMessageEx(playerid, SVETLOCRVENA, "Oslobodili ste igraca %s iz zatvora.", ImeIgraca(id));
	format(varstring, sizeof(varstring), "UNJAIL | %s je oslobodio iz zatvora igraca %s.", ImeIgraca(playerid), ImeIgraca(id));
	AdminPoruka(0x990000FF, varstring);


	new string[128];
	format(string, sizeof(string), "Admin %s je unjailovao igraca %s", ImeIgraca(playerid), ImeIgraca(id));
	LogSave("Ostalo/LogUnJail.log", string);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:prison(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 3) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id, vreme, razlog[40];
	if(sscanf(params, "uis[40]", id, vreme, razlog)) {
		SendUsageMessage(playerid, "/prison [ID/Deo imena] [vreme u satima] [razlog]");
		return 1;
	}
	if(id != INVALID_PLAYER_ID) {
		if(IsPlayerConnected(id)) {
			if(PlayerInfo[playerid][xAdmin] < 6 && PlayerInfo[id][xAdmin] >= 1) return SendErrorMessage(playerid, "Ne mozes zatvoriti clana AFG tima!");
			if(vreme < 5) return SendErrorMessage(playerid, "Vreme u prisonu ne moze biti manje od 5 sati - /jail.");
			if(vreme > 25) return SendErrorMessage(playerid, "Vreme u prisonu ne moze biti vece od 25 sati - /alkatraz.");

			if(PlayerInfo[playerid][xHelper] >= 3) {
				if(PlayerInfo[id][xHelper] == 0) return SendErrorMessage(playerid, "Kao H-HEAD mozes prisonovati samo Helpere.");
			}

			if(PlayerInfo[id][xUbijen] == 1) return SendErrorMessage(playerid, "Sacekajte, igrac se leci.");

			ResetAllWeapons(id);
			PlayerInfo[id][xZatvor] = ALKATRAZ;
			PlayerInfo[id][xZatvorVreme] = vreme*60;
			ClearAnimations(id);
			if(IsPlayerAttachedObjectSlotUsed(id, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(id, OBJECT_SLOT_RHAND);
			SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
			PlayerCuffed[id] = 0;

			GameTextForPlayer(id, "~w~Dobrodosli u ~n~~r~PRISON", 5000, 3);

			new string[128];
			format(string, sizeof(string), "Admin %s je prisonovao igraca %s | Razlog: %s", ImeIgraca(playerid), ImeIgraca(id), razlog);
			LogSave("Ostalo/LogPrison.log", string);

			AI[playerid][aTJail]++;
			SacuvajAdmina(playerid);

			PlayerCP[id] = 0;

			ac_SetPlayerPos(id, 107.2300, 1920.6311, 18.5208);
			SetPlayerWorldBounds(id, 337.5694, 101.5826, 1940.9759, 1798.7453);
			PlayerInfo[id][xWanted] = 0;
			Fusion_SetPlayerWantedLevel(id, PlayerInfo[id][xWanted]);
			strmid(ZlocinInfo[id][zPrijavio], "Nema", 0, strlen("Nema"), 255);
			strmid(ZlocinInfo[id][zPocinio], "Nema", 0, strlen("Nema"), 255);
			strmid(ZlocinInfo[id][zZlocin], "Nema", 0, strlen("Nema"), 255);
			GameTextForPlayer(id, "Ucitavanje ...", 1000, 4);
			SetTimerEx("SlobodnoSada", 2000, false, "i", id);
			SetCameraBehindPlayer(id); ac_SetPlayerInterior(id, 0);
			SetPlayerVirtualWorld(id, 1);
			TogglePlayerControllable(id, 0);
			SavePlayer(id);

			SendClientMessageEx(id, SVETLOCRVENA, "AFG vas je stavio u prison na %d sati. Razlog: %s", vreme, razlog);
			//PlayAudioStreamForPlayer(id, "http://k003.kiwi6.com/hotlink/2iuesa4qnr/fine.mp3");
			SendClientMessageEx(playerid, SVETLOCRVENA, "Postavili ste igraca %s u prison na %d sati. Razlog: %s", ImeIgraca(id), vreme, razlog);
			new varstring[90];
			format(varstring, sizeof(varstring), "PRISON | Admin je postavio igraca %s u prison.", ImeIgraca(id));
			SCMA(0x990000FF, varstring);
			format(varstring, sizeof(varstring), "PRISON | Razlog: %s.", razlog);
			SCMA(0x990000FF, varstring);
		}
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:alkatraz(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 2) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id, razlog[40];
	if(sscanf(params, "us[40]", id, razlog)) {
		SendUsageMessage(playerid, "/alkatraz [ID/Deo imena] [razlog]");
		return 1;
	}
	if(id != INVALID_PLAYER_ID) {
		if(IsPlayerConnected(id)) {
			if(PlayerInfo[playerid][xAdmin] < 6 && PlayerInfo[id][xAdmin] >= 1) return SendErrorMessage(playerid, "Ne mozes zatvoriti clana AFG tima!");
			if(PlayerInfo[id][xUbijen] == 1) return SendErrorMessage(playerid, "Sacekajte igrac se leci.");

			ResetAllWeapons(id);
			PlayerInfo[id][xZatvor] = ALKATRAZ;
			PlayerInfo[id][xZatvorVreme] = 120*60;
			ClearAnimations(id);
			if(IsPlayerAttachedObjectSlotUsed(id, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(id, OBJECT_SLOT_RHAND);
			SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
			PlayerCuffed[id] = 0;

			GameTextForPlayer(id, "~w~Dobrodosli u ~n~~r~ALKATRAZ", 5000, 3);

			new string[128];
			format(string, sizeof(string), "Admin %s je ALKATRAZOVAO igraca %s | Razlog: %s", ImeIgraca(playerid), ImeIgraca(id), razlog);
			LogSave("Ostalo/LogPrison.log", string);

			AI[playerid][aTJail]++;
			SacuvajAdmina(playerid);

			PlayerCP[id] = 0;
			spawnose[id] = 0;
			SetTimerEx("Resetspawnvar", 8000, false, "i", id);
			ac_SetPlayerPos(id, 107.2300, 1920.6311, 18.5208);
			SetPlayerWorldBounds(id, 337.5694, 101.5826, 1940.9759, 1798.7453);
			PlayerInfo[id][xWanted] = 0;
			Fusion_SetPlayerWantedLevel(id, PlayerInfo[id][xWanted]);
			strmid(ZlocinInfo[id][zPrijavio], "Nema", 0, strlen("Nema"), 255);
			strmid(ZlocinInfo[id][zPocinio], "Nema", 0, strlen("Nema"), 255);
			strmid(ZlocinInfo[id][zZlocin], "Nema", 0, strlen("Nema"), 255);
			GameTextForPlayer(id, "Ucitavanje ...", 1000, 4);
			SetTimerEx("SlobodnoSada", 2000, false, "i", id);
			SetCameraBehindPlayer(id); ac_SetPlayerInterior(id, 0);
			SetPlayerVirtualWorld(id, 1);
			TogglePlayerControllable(id, 0);
			SavePlayer(id);

			SendClientMessageEx(id, SVETLOCRVENA, "Admin vas je stavio u ALKATRAZ na 5 dana(120h). Razlog: %s", razlog);
			////PlayAudioStreamForPlayer(id, "http://k003.kiwi6.com/hotlink/2iuesa4qnr/fine.mp3");
			SendClientMessageEx(playerid, SVETLOCRVENA, "Postavili ste igraca %s u ALKATRAZ na 5 dana(120h). Razlog: %s", ImeIgraca(id), razlog);
			new varstring[90];
			format(varstring, sizeof(varstring), "ALKATRAZ | Admin je postavio igraca %s u ALKATRAZ.", ImeIgraca(id));
			SCMA(0x990000FF, varstring);
			format(varstring, sizeof(varstring), "ALKATRAZ | Razlog: %s.", razlog);
			SCMA(0x990000FF, varstring);
		}
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:offsetstats(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new vrsta, imeigraca[24], ifile[64];
	if(sscanf(params, "s[24]i", imeigraca, vrsta)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/offsetstats [Ime_Prezime] [Vrsta]");
		SCM(playerid, BELA, "[Vrste]: 1. Imovina I  || 2. Imovina II || 3. Imovina III");
		SCM(playerid, BELA, "[Vrste]: 4. Vozilo I || 5. Vozilo II || 6. Vozilo III");
		SCM(playerid, BELA, "[Vrste]: 7. Vozilo IV || 8. Firma || 9. Hotel || 10. Novac ");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	format(ifile, sizeof(ifile), I_FILE, imeigraca);
	if(!fexist(ifile)) return SendErrorMessage(playerid, "Taj igrac ne postoji u bazi podataka!");
	if(IsPlayerConnected(GetPlayerIdFromName(imeigraca))) {
		SendErrorMessage(playerid, "Taj igrac je online - /setstats.");
		return 1;
	}
	if(vrsta == 1) {
		SendInfoMessage(playerid, "/server -> Izmeni -> Imovina -> Prodaj imovinu");
	}
	else if(vrsta == 2) {
		SendInfoMessage(playerid, "/server -> Izmeni -> Imovina -> Prodaj imovinu");
	}
	else if(vrsta == 3) {
		SendInfoMessage(playerid, "/server -> Izmeni -> Imovina -> Prodaj imovinu");
	}
	else if(vrsta == 4) {
		new INI:File = INI_Open(ifile);
		INI_SetTag(File, "Informacije");
		INI_WriteInt(File, "VoziloID1", -1);
		INI_WriteInt(File, "offVozilo1Check", 1);
		INI_Close(File);
		SendClientMessageEx(playerid, SVETLOCRVENA, "Skinuli ste offline korisniku %s vozilo 1 sa statsa.", imeigraca);

		new string1[128];
		format(string1, sizeof(string1), "Admin %s je skinuo sa statsa vozilo 1 igracu %s", ImeIgraca(playerid), imeigraca);
		LogSave("Ostalo/LogOffSetStats.log", string1);
	}
	else if(vrsta == 5) {
		new INI:File = INI_Open(ifile);
		INI_SetTag(File, "Informacije");
		INI_WriteInt(File, "VoziloID2", -1);
		INI_WriteInt(File, "offVozilo2Check", 1);
		INI_Close(File);
		SendClientMessageEx(playerid, SVETLOCRVENA, "Skinuli ste offline korisniku %s vozilo 2 sa statsa.", imeigraca);

		new string1[128];
		format(string1, sizeof(string1), "Admin %s je skinuo sa statsa vozilo 2 igracu %s", ImeIgraca(playerid), imeigraca);
		LogSave("Ostalo/LogOffSetStats.log", string1);
	}
	else if(vrsta == 6) {
		new INI:File = INI_Open(ifile);
		INI_SetTag(File, "Informacije");
		INI_WriteInt(File, "VoziloID3", -1);
		INI_WriteInt(File, "offVozilo3Check", 1);
		INI_Close(File);
		SendClientMessageEx(playerid, SVETLOCRVENA, "Skinuli ste offline korisniku %s vozilo 3 sa statsa.", imeigraca);

		new string1[128];
		format(string1, sizeof(string1), "Admin %s je skinuo sa statsa vozilo 3 igracu %s", ImeIgraca(playerid), imeigraca);
		LogSave("Ostalo/LogOffSetStats.log", string1);
	}
	else if(vrsta == 7) {
		new INI:File = INI_Open(ifile);
		INI_SetTag(File, "Informacije");
		INI_WriteInt(File, "VoziloID4", -1);
		INI_WriteInt(File, "offVozilo4Check", 1);
		INI_Close(File);
		SendClientMessageEx(playerid, SVETLOCRVENA, "Skinuli ste offline korisniku %s vozilo 4 sa statsa.", imeigraca);

		new string1[128];
		format(string1, sizeof(string1), "Admin %s je skinuo sa statsa vozilo 4 igracu %s", ImeIgraca(playerid), imeigraca);
		LogSave("Ostalo/LogOffSetStats.log", string1);
	}
	else if(vrsta == 8) {
		SendInfoMessage(playerid, "/server -> Izmeni -> Firma -> Prodaj firmu");
	}
	else if(vrsta == 9) {
		new INI:File = INI_Open(ifile);
		INI_SetTag(File, "Informacije");
		//INI_WriteInt(File, "HotelID", -1);
		INI_WriteInt(File, "offHotelCheck", 1);
		INI_Close(File);
		SendClientMessageEx(playerid, SVETLOCRVENA, "Skinuli ste offline korisniku %s hotel sa statsa.", imeigraca);

		new string1[128];
		format(string1, sizeof(string1), "Admin %s je skinuo sa statsa hotel igracu %s", ImeIgraca(playerid), imeigraca);
		LogSave("Ostalo/LogOffSetStats.log", string1);
	}
	else if(vrsta == 10) {
		SendInfoMessage(playerid, "Zbog sigurnosti servera, koristite /offfine.");
	}
	else return SendErrorMessage(playerid, "Vrsta moze od 1 do 11.");}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:offprison(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 2) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new vreme, razlog[40], imeigraca[24], ifile[64];
	if(sscanf(params, "s[24]is[40]", imeigraca, vreme, razlog)) {
		SendUsageMessage(playerid, "/offprison [Ime_Prezime] [vreme(sati)] [razlog]");
		SendUsageMessage(playerid, "Razlog mora biti MINIMALNO 3 karaktera ili igraca nece postaviti u prison.");
		return 1;
	}
	format(ifile, sizeof(ifile), I_FILE, imeigraca);
	if(!fexist(ifile)) return SendErrorMessage(playerid, "Taj igrac ne postoji u bazi podataka!");
	if(IsPlayerConnected(GetPlayerIdFromName(imeigraca))) {
		SendErrorMessage(playerid, "Taj igrac je online tako da izbaci ga online.");
		return 1;
	}
	if(vreme < 1) return SendErrorMessage(playerid, "Vreme u arei ne moze biti manje od 1 sata.Stavite ga u jail onda!");

	new INI:File = INI_Open(ifile);
	INI_SetTag(File, "Informacije");
	INI_WriteInt(File, "Zatvor", ALKATRAZ);
	INI_WriteInt(File, "ZatvorVreme", vreme*60);
	INI_WriteString(File, "OffPPrison", razlog);
	INI_Close(File);

	AI[playerid][aTJail]++;
	SacuvajAdmina(playerid);

	SendClientMessageEx(playerid, SVETLOCRVENA, "Postavili ste offline igraca %s u ALKATRAZ na %d sati. Razlog: %s", imeigraca, vreme, razlog);

	new string[128];
	format(string, sizeof(string), "Admin %s je offprisonao igraca %s | Razlog: %s", ImeIgraca(playerid), imeigraca, razlog);
	LogSave("Ostalo/LogOffPrison.log", string);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:offjail(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 2) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new vreme, razlog[40], imeigraca[24], ifile[64];
	if(sscanf(params, "s[24]is[40]", imeigraca, vreme, razlog)) {
		SendUsageMessage(playerid, "/offjail [Ime_Prezime] [vreme(minuti)] [razlog]");
		SendUsageMessage(playerid, "Razlog mora biti MINIMALNO 3 karaktera ili igraca nece postaviti u jail.");
		return 1;
	}
	format(ifile, sizeof(ifile), I_FILE, imeigraca);
	if(!fexist(ifile)) return SendErrorMessage(playerid, "Taj igrac ne postoji u bazi podataka!");
	if(IsPlayerConnected(GetPlayerIdFromName(imeigraca))) {
		SendErrorMessage(playerid, "Taj igrac je online tako da izbaci ga online.");
		return 1;
	}
	if(vreme < 1) return SendErrorMessage(playerid, "Vreme u jailu ne moze biti manje od 1 minut.");

	new INI:File = INI_Open(ifile);
	INI_SetTag(File, "Informacije");
	INI_WriteInt(File, "Zatvor", OBICAN_ZATVOR);
	INI_WriteInt(File, "ZatvorVreme", vreme);
	INI_WriteString(File, "OffPJail", razlog);
	INI_Close(File);

	AI[playerid][aTJail]++;
	SacuvajAdmina(playerid);

	SendClientMessageEx(playerid, SVETLOCRVENA, "Postavili ste offline igraca %s u zatvor na %d minuta. Razlog: %s", imeigraca, vreme, razlog);

	new string[128];
	format(string, sizeof(string), "Admin %s je offjailovao igraca %s | Razlog: %s", ImeIgraca(playerid), imeigraca, razlog);
	LogSave("Ostalo/LogOffJail.log", string);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:unprison(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 3) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id;
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/unprison [ID/Deo imena]");
	if(PlayerInfo[id][xZatvor] != ALKATRAZ) return SendErrorMessage(playerid, "Igrac mora biti u prisonu/alkatrazu da koristite ovu komandu.");

	ac_SetPlayerInterior(id, 0);
	ac_SetPlayerPos(id, 91.9112, 1920.7303, 17.9953);
	SetPlayerWorldBounds(id, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	SetPlayerVirtualWorld(id, 0);
	PlayerInfo[id][xZatvor] = 0;
	PlayerInfo[id][xZatvorVreme] = 0;
	GameTextForPlayer(id, "~g~Sloboda~n~~w~Pokusajte biti bolji gradjanin", 5000, 1);

	AI[playerid][aTUnjail]++;
	SacuvajAdmina(playerid);

	new varstring[90];
	SendClientMessageEx(id, SVETLOCRVENA, "Admin %s vas je oslobodio iz ALKATRAZA.", ImeIgraca(playerid));
	SendClientMessageEx(playerid, SVETLOCRVENA, "Oslobodili ste igraca %s iz ALKATRAZA.", ImeIgraca(id));
	format(varstring, sizeof(varstring), "UNPRISON | %s je oslobodio iz alkatraza igraca %s.", ImeIgraca(playerid), ImeIgraca(id));
	AdminPoruka(NARACRVENA, varstring);

	new string[128];
		format(string, sizeof(string), "Admin %s je unprisonovao igraca %s", ImeIgraca(playerid), ImeIgraca(id));
	LogSave("Ostalo/LogUnPrison.log", string);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:jail(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 2) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id, time, razlog[40];
	if(sscanf(params, "uis[40]", id, time, razlog)) return SendUsageMessage(playerid, "/jail [ID/Deo imena] [minute] [razlog]");
	if(IsPlayerConnected(id)) {
		if(id != INVALID_PLAYER_ID) {
			if(PlayerInfo[playerid][xAdmin] < 6 && PlayerInfo[id][xAdmin] >= 1) return SendErrorMessage(playerid, "Ne mozes zatvoriti clana AFG tima!");
			if(PlayerInfo[playerid][xHelper] >= 1 && PlayerInfo[id][xAdmin] >= 1) return SendErrorMessage(playerid, "Ne mozes zatvoriti clana AFG tima!");
			if(PlayerInfo[id][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes zatvoriti igraca koji je vec u zatvoru!");
			if(time < 1 || time > 360) return SendErrorMessage(playerid, "Ne mozete manje od 5 minuta i vise od 360 minuta - koristite /prison.");
			if(id == playerid) return SendErrorMessage(playerid, "Ne mozete jailovati sami sebe.");
			if(PlayerInfo[id][xUbijen] == 1) return SendErrorMessage(playerid, "Sacekajte, igrac se leci.");
			ResetAllWeapons(id);
			PlayerInfo[id][xZatvor] = OBICAN_ZATVOR;
			PlayerInfo[id][xZatvorVreme] = time;
			ClearAnimations(id);
			PlayerCP[id] = 0;
			if(IsPlayerAttachedObjectSlotUsed(id, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(id, OBJECT_SLOT_RHAND);
			SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
			PlayerCuffed[id] = 0;

			new string[128];
			format(string, sizeof(string), "Admin %s je jailovao igraca %s | Razlog: %s", ImeIgraca(playerid), ImeIgraca(id), razlog);
			LogSave("Ostalo/LogJail.log", string);
			spawnose[id] = 0;
			SetTimerEx("Resetspawnvar", 8000, false, "i", id);
			new rand = random(sizeof(RandomZatvor));
			ac_SetPlayerPos(id, RandomZatvor[rand][0], RandomZatvor[rand][1],RandomZatvor[rand][2]);
			PlayerInfo[id][xWanted] = 0;
			Fusion_SetPlayerWantedLevel(id, PlayerInfo[id][xWanted]);
			strmid(ZlocinInfo[id][zPrijavio], "Nema", 0, strlen("Nema"), 255);
			strmid(ZlocinInfo[id][zPocinio], "Nema", 0, strlen("Nema"), 255);
			strmid(ZlocinInfo[id][zZlocin], "Nema", 0, strlen("Nema"), 255);
			GameTextForPlayer(id, "Ucitavanje ...", 1000, 4);
			SetTimerEx("SlobodnoSada", 2000, false, "i", id);
			SetCameraBehindPlayer(id); ac_SetPlayerInterior(id, 0);
			SetPlayerVirtualWorld(id, 0);
			TogglePlayerControllable(id, 0);
			SavePlayer(id);

			AI[playerid][aTJail]++;
			SacuvajAdmina(playerid);

			SendClientMessageEx(id, SVETLOCRVENA, "Admin vas je stavio u zatvor na %d minuta. Razlog: %s", time, razlog);
			////PlayAudioStreamForPlayer(id, "http://k003.kiwi6.com/hotlink/2iuesa4qnr/fine.mp3");
			SendClientMessageEx(playerid, SVETLOCRVENA, "Postavili ste igraca %s u zatvor na %d minuta. Razlog: %s", ImeIgraca(id), time, razlog);

			new varstring[90];
			format(varstring, sizeof(varstring), "JAIL | Admin je postavio igraca %s u zatvor.", ImeIgraca(id));
			SCMA(0x990000FF, varstring);
			format(varstring, sizeof(varstring), "JAIL | Razlog: %s.", razlog);
			SCMA(0x990000FF, varstring);

			return 1;
		}
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:tod(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 4) {
	//if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new vreme;
	if(sscanf(params, "i", vreme)) {
		SendUsageMessage(playerid, "/tod [vreme(0-23)]");
		return 1;
	}
	SetWorldTime(vreme);
	ServerInfo[VremeInGame] = vreme;
	new varstring[60];
	format(varstring, sizeof(varstring), "SAT | %s je stavio sat na %d.", ImeIgraca(playerid), vreme);
	SCMA(ZELENA, varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:vreme(playerid, params[]) {
new vreme;
if(PlayerInfo[playerid][xAdmin] < 4)  return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
//if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
if(sscanf(params, "i", vreme)) {
	SendUsageMessage(playerid, "/vreme [broj]");
	SCM(playerid, FUSIONGAMING,"_________________________________________________________Fusion Gaming Vremesnki Panel____");
	SCM(playerid, FUSIONGAMING, "| "col_white"0:Good | 1: Sunce | 2: Kisa  | 3: Oluja | 4: Magla  | 5: Pjescana Oluja | 6: Toxic | 7: Draw Distance ");
	SCM(playerid, FUSIONGAMING,"_____________________________________________________________________________________");
	return 1;}
new varstring[60];
if(vreme < 0 || vreme > 7) return SendErrorMessage(playerid, "Odabir mora biti od 0 do 7.");
	switch(vreme) {
		case 0: {
		format(varstring, sizeof(varstring), "VREME | %s je stavio vreme id %d.", ImeIgraca(playerid), vreme);
		AdminPoruka(NARACRVENA, varstring);
		SetWeather(0); 
	}
	case 1: {
		format(varstring, sizeof(varstring), "VREME | %s je stavio vreme id %d.", ImeIgraca(playerid), vreme);
		AdminPoruka(NARACRVENA, varstring);
		SetWeather(6); 
	}
	case 2: {
		format(varstring, sizeof(varstring), "VREME | %s je stavio vreme id %d.", ImeIgraca(playerid), vreme);
		AdminPoruka(NARACRVENA, varstring);
		SetWeather(16); 
	}
	case 3: {
		format(varstring, sizeof(varstring), "VREME | %s je stavio vreme id %d.", ImeIgraca(playerid), vreme);
		AdminPoruka(NARACRVENA, varstring);
		SetWeather(8); 
	}
	case 4: {
		format(varstring, sizeof(varstring), "VREME | %s je stavio vreme id %d.", ImeIgraca(playerid), vreme);
		AdminPoruka(NARACRVENA, varstring);
		SetWeather(9);
	}
	case 5: {
		format(varstring, sizeof(varstring), "VREME | %s je stavio vreme id %d.", ImeIgraca(playerid), vreme);
		AdminPoruka(NARACRVENA, varstring);
		SetWeather(19);
	}
	case 6: {
		format(varstring, sizeof(varstring), "VREME | %s je stavio vreme id %d.", ImeIgraca(playerid), vreme);
		AdminPoruka(NARACRVENA, varstring);
		SetWeather(20);
	}
	case 7: {
		format(varstring, sizeof(varstring), "VREME | %s je stavio vreme id %d.", ImeIgraca(playerid), vreme);
		AdminPoruka(NARACRVENA, varstring);
		SetWeather(-1337);
	}
}
return 1;}

CMD:freeze(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id;
	new varstring[80];
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/freeze [ID/Deo imena]");
	if(IsPlayerConnected(id)) {
		if(id != INVALID_PLAYER_ID) {
			TogglePlayerControllable(id, 0);
			SendInfoMessage(id, "Admin %s vas je zaledio.", ImeIgraca(playerid));
			SendInfoMessage(playerid, "Zaledili ste igraca %s.", ImeIgraca(id));
			format(varstring, sizeof(varstring), "FREEZE | %s je zaledio igraca %s.", ImeIgraca(playerid), ImeIgraca(id));
			AdminPoruka(NARACRVENA, varstring);
		}
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:unfreeze(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id;
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/unfreeze [ID/Deo imena]");
	if(IsPlayerConnected(id)) {
		if(id != INVALID_PLAYER_ID) {
			new varstring[80];
			TogglePlayerControllable(id, 1);
			SendInfoMessage(id, "Admin %s vas je odledio.", ImeIgraca(playerid));
			SendInfoMessage(playerid, "Odledili ste igraca %s.", ImeIgraca(id));
			format(varstring, sizeof(varstring), "UNFREEZE | %s je odledio igraca %s.", ImeIgraca(playerid), ImeIgraca(id));
			AdminPoruka(NARACRVENA, varstring);
		}
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:unbanip(playerid, params[]) {
if(PlayerInfo[playerid][xTestAFG] == 1) return SendErrorMessage(playerid, "Vi ste Test AFG i nemate pristup ovoj komandi");
if(PlayerInfo[playerid][xAdmin] >= 3) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new playersip[100];
	if(sscanf(params, "s[100]", playersip)) {
		SendUsageMessage(playerid, "/unbanip [Igracev IP]");
		return 1;
	}
	AI[playerid][aTUnban]++;
	SacuvajAdmina(playerid);
	ServerInfo[BanovanihKorisnika]--;
	new varstring[67];
	format(varstring, sizeof(varstring), "unbanip %s", playersip);
	SendRconCommand(varstring);
	SendRconCommand("reloadbans");
	format(varstring, 128, "UNBAN | %s je unbanovao IP %s", ImeIgraca(playerid), playersip);
	AdminPoruka(NARACRVENA, varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:pustimuziku(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 3) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

	new url[256];
	new varstring[128];
	if(sscanf(params, "s[256]", url)) {
		SendUsageMessage(playerid, "/pustimuziku [hotlink pesme]");
		return 1;
	}
	foreach(new i : Player) {

		StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, url);
	}
	format(varstring, sizeof(varstring), ""col_server"MUZIKA | {FFFFFF]Admin %s je pustio pesmu svim igracima na serveru! (/musicoff)", ImeIgraca(playerid));
	SCMA(-1, varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:musicoff(playerid, params[]) {
StopAudioStreamForPlayer(playerid);
SendInfoMessage(playerid, "Ugasili ste muziku.");
return 1;}
CMD:entercar(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 3) {
	if(!AdminDuty[playerid]) return SendErrorMessage(playerid, "Zbog AntiCheat provere morate biti na duznosti kako bi koristili ovu komandu.");

	new vehicleid;
	if(sscanf(params, "i", vehicleid)) {
		SendUsageMessage(playerid, "/entercar [ID vozila]");
		return 1;
	}
	ac_PutPlayerInVehicle(playerid, vehicleid, 0);
	SendInfoMessage(playerid, "Usli ste u vozilo ID: %d.", vehicleid);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:banip(playerid, params[]) {
if(PlayerInfo[playerid][xTestAFG] == 1) return SendErrorMessage(playerid, "Vi ste Test AFG i nemate pristup ovoj komandi");
if(PlayerInfo[playerid][xAdmin] >= 1) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new playersip[100];
	if(sscanf(params, "s[100]", playersip)) {
		SendUsageMessage(playerid, "/banip [Igracev IP]");
		return 1;
	}
	AI[playerid][aTBan]++;
	SacuvajAdmina(playerid);
	ServerInfo[BanovanihKorisnika]++;
	new varstring[90];
	format(varstring, sizeof(varstring), "banip %s", playersip);
	SendRconCommand(varstring);
	SendRconCommand("reloadbans");
	format(varstring, 128, "BAN | %s je banovao IP %s", ImeIgraca(playerid), playersip);
	AdminPoruka(NARACRVENA, varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:gotocar(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 4) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

	new id;
	if(sscanf(params, "i", id)) return SendUsageMessage(playerid, "/gotocar [carid(/dl)]");
	new Float:cwx2, Float:cwy2, Float:cwz2;
	GetVehiclePos(id, cwx2, cwy2, cwz2);
	if(GetPlayerState(playerid) == 2) {
		new tmpcar = GetPlayerVehicleID(playerid);
		ac_SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
	}
	else
		ac_SetPlayerPos(playerid, cwx2, cwy2, cwz2);
	ac_SetPlayerInterior(playerid, 0);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:getcar(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1) {

	new id;
	if(sscanf(params, "i", id)) {
		SendUsageMessage(playerid, "/getcar [carid(/dl)]");
		return 1;
	}
	new Float:plocx, Float:plocy, Float:plocz;
	GetPlayerPos(playerid, plocx, plocy, plocz);
	ac_SetVehiclePos(id, plocx, plocy+4, plocz);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:zatvoreni(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1) {
	SCM(playerid, SVETLOPLAVA, "Online igraci u zatvoru/alkatrazu:");
	foreach(new i : Player) {
		if(IsPlayerConnected(i)) {
			if(PlayerInfo[i][xZatvor] >= 1) {
				new varstring[90];
				format(varstring, sizeof(varstring), "%s (%d) - Zatvorsko vreme: %d minuta", ImeIgraca(i), i, PlayerInfo[i][xZatvorVreme]);
				SCM(playerid, SIVA, varstring);
			}
		}
	}
} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:vpnlist(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1) {
	new DialogStrgEx[545];
	new spn[85];
	foreach(new i : Player)  {
		if(imaVPN[i] != 0) {
			format(spn, sizeof(spn), ""col_server"Ime Igraca: "col_white"%s\n", ImeIgraca(i));
			strcat(DialogStrgEx, spn);
		}
	}
	if(strlen(DialogStrgEx) == 0) return SendErrorMessage(playerid, "Nema igraca koji nisu sa nasih prostora.");
	SPD(playerid, dialog_VPNLIST, DSMSG, "IGRACI VAN BALKANA", DialogStrgEx, "Ok", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:trazeni(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1) {
	SCM(playerid, SVETLOPLAVA, "Online igraci sa wanted levelom:");
	foreach(new i : Player) {
		if(IsPlayerConnected(i)) {
			if(PlayerInfo[i][xWanted] >= 1) {
				new varstring[90];
				format(varstring, sizeof(varstring), "%s (%d) - Wanted: %d", ImeIgraca(i), i, PlayerInfo[i][xWanted]);
				SCM(playerid, SIVA, varstring);
			}
		}
	}
} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:utisani(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1) {
	SCM(playerid, SVETLOPLAVA, "Online utisani igraci:");
	foreach(new i : Player) {
		if(IsPlayerConnected(i)) {
			if(PlayerInfo[i][xMute] != 0) {
				new varstring[90];
				format(varstring, sizeof(varstring), "%s (%d)", ImeIgraca(i), i);
				SCM(playerid, SIVA, varstring);
			}
		}
	}
} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:pweapons(playerid, params[]) {
new id;
if(sscanf(params, "u", id)) {
	SendUsageMessage(playerid, "/pweapons [ID/Deo imena]");
	return 1;}
if(IsPlayerConnected(id)) {
	if(id != INVALID_PLAYER_ID) {
		if(PlayerInfo[playerid][xAdmin] >= 1) {
			new weapon[13],
				bullets[13];
			new varstring[90];
			format(varstring, sizeof(varstring), "%s", ImeIgraca(id));
			SCM(playerid, ZELENA, varstring);

			for(new slot = 0; slot < 13; slot++)
			{
				GetPlayerWeaponData(id, slot, weapon[slot], bullets[slot]);

				format(varstring, sizeof(varstring), "    SLOT: %d, ORUZJE: %s, METAKA: %d.", slot, WeapNames[weapon[slot}}, bullets[slot]);
				SCM(playerid, BELA, varstring);
			}
		} else {
			SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
			return 1;
		}
	}
}
return 1;}

CMD:maskirani(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1) {
	SCM(playerid, SVETLOPLAVA, "Igraci s maskama:");
	foreach(new i : Player) {
		if(Maskuse[i] == true) {
			new varstring[90];
			format(varstring, sizeof(varstring), "** ID maske: Maska_%d ** - %s(%d)", PlayerInfo[i][xMaskID], ImeIgraca(i), i);
			SCM(playerid, BELA, varstring);
		}
	}
} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:napunivozila(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 4) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	for(new i = 1; i < MAX_VEHICLES; i++) {
		//if(TipVozila[i] != PRIVATNO_VOZILO) {
			Fuel[i] = getAmountFuel(i);
			FuelTime[i] = 0;
		//]
	}
	new varstring[94];
	format(varstring, sizeof(varstring), "GORIVO | %s je napunio sva vozila gorivom.", ImeIgraca(playerid));
	AdminPoruka(NARACRVENA, varstring);
	format(varstring, sizeof(varstring), "[FG] Vesti | "col_white"%s je napunio gorivom sva vozila na serveru.", ImeIgraca(playerid));
	OOCNews(0xFFA500AA, varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:napunipumpe(playerid, params[])
{
if(PlayerInfo[playerid][xAdmin] >= 5) {
	for(new i = 0; i < MAX_FSTATION; i++) 
	{
		FuelStation[i][fsGasolineL] += 999;
		FuelStation[i][fsDieselL] += 999;
		FuelStation[i][fsGasL] += 999;
		FuelStation[i][fsGasOilL] += 999;
	}
	new varstring[94];
	format(varstring, sizeof(varstring), "PUMPE | %s je dopunio sve pumpe gorivom (+999L).", ImeIgraca(playerid));
	AdminPoruka(NARACRVENA, varstring);
	format(varstring, sizeof(varstring), "[FG] Vesti | "col_white"%s je dopunio gorivom sve pumpe na serveru.", ImeIgraca(playerid));
	OOCNews(0xFFA500AA, varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:count(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 3) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new seconds,
		string[64];

	if(sscanf(params, "i", seconds)) {
		SendErrorMessage(playerid, "Morate uneti vrednost u sekundama (1-20).");
		SendErrorMessage(playerid, "* Ovo vide svi igraci na serveru.");
		return 1;
	}
	if(seconds > 20) return SendErrorMessage(playerid, "Sekunde ne mogu biti manje od 1 i vece od 20!");
	if(cseconds) return SendErrorMessage(playerid, "Vec je aktivirano odbrojavanje.");
	if(seconds > 0) {
		format(string, 40, "Zapoceli ste odbrojavanje od %d sekundi.", seconds);
		SCM(playerid, SVETLOPLAVA, string);
		cseconds = seconds+1;
		format(string, sizeof(string), "COUNT | %s je iskoristio komandu /count.", ImeIgraca(playerid));
		AdminPoruka(NARACRVENA, string);
	} else return SendErrorMessage(playerid, "Sekunde moraju biti vece od i 1 manje od 20!");
	}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:nstan(playerid, params[]) {

				if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
				if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

				new im = SledeciIDImovine(MAX_IMOVINA), Float:PozX, Float:PozY, Float:PozZ, string[256], iimovine[40];
				GetPlayerPos(playerid, PozX, PozY, PozZ);
				format(iimovine, sizeof(iimovine), IM_FILE, im);
				if(fexist(iimovine)) return SendErrorMessage(playerid, "ID te imovine vec postoji!");
				II[im][iUsage] = IMOVINA_STAN;
				II[im][iExit][0] = STAN_X;
				II[im][iExit][1] = STAN_Y;
				II[im][iExit][2] = STAN_Z;
				II[im][iPrice] = STAN_PRICE;
				II[im][iInterior] = STAN_INT;
				II[im][iVrsta] = 0;
				II[im][iOwned] = 0;
				II[im][iNeaktivnost] = 0;
				strmid(II[im][iOwner], "Drzava", 0, strlen("Drzava"), 32);
				II[im][iEnter][0] = PozX;
				II[im][iEnter][1] = PozY;
				II[im][iEnter][2] = PozZ;
				II[im][iLocked] = 0;
				II[im][iVW] = im;
				II[im][iLevel] = 3;
				strmid(II[im][iAdress], UlicaImovine(im), 0, strlen(UlicaImovine(im)), 32);
				II[im][iOrmar] = 0;
				II[im][iSkin][0] = 0;
				II[im][iSkin][1] = 0;
				II[im][iSkin][2] = 0;
				II[im][iMats] = 0;
				II[im][iSafeStatus] = 0; II[im][iSafePass] = 0;
				II[im][iOruzje][0] = 0; II[im][iOruzje][1] = 0; II[im][iOruzje][2] = 0; II[im][iOruzje][3] = 0;
				II[im][iMunicija][0] = 0; II[im][iMunicija][1] = 0; II[im][iMunicija][2] = 0; II[im][iMunicija][3] = 0;
				II[im][iDrug][0] = 0; II[im][iDrug][1] = 0; II[im][iDrug][2] = 0; II[im][iDrug][3] = 0; II[im][iDrug][4] = 0;
				II[im][iDrug][5] = 0; II[im][iDrug][6] = 0; II[im][iDrug][7] = 0; II[im][iDrug][8] = 0; II[im][iDrug][9] = 0;
				II[im][iDrugCode][0] = 0; II[im][iDrugCode][1] = 0; II[im][iDrugCode][2] = 0; II[im][iDrugCode][3] = 0; II[im][iDrugCode][4] = 0;
				II[im][iDrugCode][5] = 0; II[im][iDrugCode][6] = 0; II[im][iDrugCode][7] = 0; II[im][iDrugCode][8] = 0; II[im][iDrugCode][9] = 0;
				II[im][iDoorLevel] = 0; II[im][iAlarm] = 0; II[im][iLockLevel] = 0; II[im][iTime] = 0; II[im][iPizzaTime] = 0;
				SaveProperty(im);
				format(string, sizeof(string),""col_crvena"Stan na Prodaju"col_white"[ID %d]"col_crvena"\nCena: "col_white"%d$\n"col_crvena"Potreban level: "col_white"%d\n"col_crvena"Adresa: "col_white"%s\n"col_crvena"Za kupovinu "col_white"/kupiimovinu", im, II[im][iPrice], II[im][iLevel], II[im][iAdress]);
				ImovinaLabel[im] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
				ImovinaPickup[im] = acc_CreateDynamicPickup(19134, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2]);
				SendInfoMessage(playerid, "Uspesno si kreirao stan.");
				return 1;}

CMD:nkuca(playerid, params[]) {

		if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
		new vrsta;
		if(sscanf(params, "i", vrsta)) return SendUsageMessage(playerid, "/nkuca [1(mala), 2(srednja), 3(velika), 4(vila)]");

		new im = SledeciIDImovine(MAX_IMOVINA), Float:PozX, Float:PozY, Float:PozZ, string[256], iimovine[40];
		if(vrsta < 1 || vrsta > 4) return SendErrorMessage(playerid, "Pogresna vrsta!");
		GetPlayerPos(playerid, PozX, PozY, PozZ);
		format(iimovine, sizeof(iimovine), IM_FILE, im);
		if(fexist(iimovine)) return SendErrorMessage(playerid, "ID te imovine vec postoji!");
			if(vrsta == MALA_KUCA) {
			II[im][iUsage] = IMOVINA_KUCA;
			II[im][iExit][0] = MALA_KUCA_X;
			II[im][iExit][1] = MALA_KUCA_Y;
			II[im][iExit][2] = MALA_KUCA_Z;
			II[im][iPrice] = MALA_KUCA_PRICE;
			II[im][iInterior] = MALA_KUCA_INT;
			II[im][iVrsta] = MALA_KUCA;
		}
		else if(vrsta == SREDNJA_KUCA) {
			II[im][iUsage] = IMOVINA_KUCA;
			II[im][iExit][0] = SREDNJA_KUCA_X;
			II[im][iExit][1] = SREDNJA_KUCA_Y;
			II[im][iExit][2] = SREDNJA_KUCA_Z;
			II[im][iPrice] = SREDNJA_KUCA_PRICE;
			II[im][iInterior] = SREDNJA_KUCA_INT;
			II[im][iVrsta] = SREDNJA_KUCA;
		}
		else if(vrsta == VELIKA_KUCA) {
			II[im][iUsage] = IMOVINA_KUCA;
			II[im][iExit][0] = VELIKA_KUCA_X;
			II[im][iExit][1] = VELIKA_KUCA_Y;
			II[im][iExit][2] = VELIKA_KUCA_Z;
			II[im][iPrice] = VELIKA_KUCA_PRICE;
			II[im][iInterior] = VELIKA_KUCA_INT;
			II[im][iVrsta] = VELIKA_KUCA;
		}
		else if(vrsta == VILA_KUCA) {
			II[im][iUsage] = IMOVINA_KUCA;
			II[im][iExit][0] = VILA_KUCA_X;
			II[im][iExit][1] = VILA_KUCA_Y;
			II[im][iExit][2] = VILA_KUCA_Z;
			II[im][iPrice] = VILA_KUCA_PRICE;
			II[im][iInterior] = VILA_KUCA_INT;
			II[im][iVrsta] = VILA_KUCA;
		}
		II[im][iOwned] = 0;
		II[im][iNeaktivnost] = 0;
		strmid(II[im][iOwner], "Drzava", 0, strlen("Drzava"), 32);
		II[im][iEnter][0] = PozX;
		II[im][iEnter][1] = PozY;
		II[im][iEnter][2] = PozZ;
		II[im][iLocked] = 0;
		II[im][iVW] = im;
		II[im][iOrmar] = 0;
		II[im][iLevel] = 5;
		strmid(II[im][iAdress], UlicaImovine(im), 0, strlen(UlicaImovine(im)), 32);
		II[im][iSkin][0] = 0;
		II[im][iSkin][1] = 0;
		II[im][iSkin][2] = 0;
		II[im][iMats] = 0;
		II[im][iSafeStatus] = 0; II[im][iSafePass] = 0;
		II[im][iOruzje][0] = 0; II[im][iOruzje][1] = 0; II[im][iOruzje][2] = 0; II[im][iOruzje][3] = 0;
		II[im][iMunicija][0] = 0; II[im][iMunicija][1] = 0; II[im][iMunicija][2] = 0; II[im][iMunicija][3] = 0;
		II[im][iDrug][0] = 0; II[im][iDrug][1] = 0; II[im][iDrug][2] = 0; II[im][iDrug][3] = 0; II[im][iDrug][4] = 0;
		II[im][iDrug][5] = 0; II[im][iDrug][6] = 0; II[im][iDrug][7] = 0; II[im][iDrug][8] = 0; II[im][iDrug][9] = 0;
		II[im][iDrugCode][0] = 0; II[im][iDrugCode][1] = 0; II[im][iDrugCode][2] = 0; II[im][iDrugCode][3] = 0; II[im][iDrugCode][4] = 0;
		II[im][iDrugCode][5] = 0; II[im][iDrugCode][6] = 0; II[im][iDrugCode][7] = 0; II[im][iDrugCode][8] = 0; II[im][iDrugCode][9] = 0;
		II[im][iDoorLevel] = 0; II[im][iAlarm] = 0; II[im][iLockLevel] = 0; II[im][iTime] = 0; II[im][iPizzaTime] = 0;
		SaveProperty(im);
		format(string, sizeof(string),"{F53D00]Kuca na Prodaju"col_white"[ID %d]{F53D00]\nVrsta: "col_white"%s{F53D00]\nCena: "col_white"%d$\n{F53D00]Potreban level: "col_white"%d\n{F53D00]Adresa: "col_white"%s\n{F53D00]Za kupovinu "col_white"/kupiimovinu", im, getTypePName(II[im][iVrsta]), II[im][iPrice], II[im][iLevel], II[im][iAdress]);
		ImovinaLabel[im] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
		ImovinaPickup[im] = acc_CreateDynamicPickup(1273, 1, II[im][iEnter][0], II[im][iEnter][1], II[im][iEnter][2]);
		SendInfoMessage(playerid, "Uspesno si kreirao kucu.");
		return 1;}

CMD:obrisikontejner(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

if(GetNearestContainer(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu kontejnera.");
new i = GetNearestContainer(playerid);

if(IsValidDynamicObject(KontInfo[i][koObjID]))
	DestroyDynamicObject(KontInfo[i][koObjID]);

KontInfo[i][koObjPos][0] = 0;
KontInfo[i][koObjPos][1] = 0;
KontInfo[i][koObjPos][2] = 0;
KontInfo[i][koObjRot][0] = 0;
KontInfo[i][koObjRot][1] = 0;
KontInfo[i][koObjRot][2] = 0;

new fstring[64];
format(fstring, sizeof(fstring), KO_FILE, i);
if(fexist(fstring)) { fremove(fstring); }

SendInfoMessage(playerid, "Obrisao si kontejner. ID = %d.", i);
return 1;}

CMD:obrisibrzuhranu(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

if(GetNearestBrzaHrana(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu brze hrane.");
new i = GetNearestBrzaHrana(playerid);

if(IsValidDynamicObject(BrzaHranaInfo[i][bhObjID]))
	DestroyDynamicObject(BrzaHranaInfo[i][bhObjID]);

BrzaHranaInfo[i][bhObjPos][0] = 0;
BrzaHranaInfo[i][bhObjPos][1] = 0;
BrzaHranaInfo[i][bhObjPos][2] = 0;
BrzaHranaInfo[i][bhObjRot][0] = 0;
BrzaHranaInfo[i][bhObjRot][1] = 0;
BrzaHranaInfo[i][bhObjRot][2] = 0;

new fstring[64];
format(fstring, sizeof(fstring), BRZAHRANA_FILE, i);
if(fexist(fstring)) { fremove(fstring); }

SendInfoMessage(playerid, "Obrisao si brzu hranu. ID = %d.", i);
return 1;}

CMD:obrisigovornicu(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

if(GetNearestGovornica(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu govornice.");
new i = GetNearestGovornica(playerid);

if(IsValidDynamicObject(GovornicaInfo[i][gObjID]))
	DestroyDynamicObject(GovornicaInfo[i][gObjID]);

GovornicaInfo[i][gObjPos][0] = 0;
GovornicaInfo[i][gObjPos][1] = 0;
GovornicaInfo[i][gObjPos][2] = 0;
GovornicaInfo[i][gObjRot][0] = 0;
GovornicaInfo[i][gObjRot][1] = 0;
GovornicaInfo[i][gObjRot][2] = 0;

new fstring[64];
format(fstring, sizeof(fstring), GOVORNICA_FILE, i);
if(fexist(fstring)) { fremove(fstring); }

SendInfoMessage(playerid, "Obrisao si govornicu. ID = %d.", i);
return 1;}

CMD:ogetcar(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 5) {

	new id, File[50];
	if(sscanf(params, "i", id)) {
		SendUsageMessage(playerid, "/ogetcar [SciptID vozila]");
		return 1;
	}

	format(File, sizeof(File), V_FILE, id);
	if(!fexist(File)) return SendErrorMessage(playerid, "To vozilo(ID) ne postoji u bazi podataka!");

	new Float:plocx, Float:plocy, Float:plocz;
	GetPlayerPos(playerid, plocx, plocy, plocz);
	ac_SetVehiclePos(VehicleInfo[id][vID], plocx, plocy+4, plocz);
	ac_LinkVehicleToInterior(VehicleInfo[id][vID], GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(VehicleInfo[id][vID], GetPlayerVirtualWorld(playerid));

	SendClientMessageEx(playerid, BELA, "Teleportovali ste vozilo ScriptID %d do sebe.", id);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:pomerilokaciju(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
new Float:Pos[3], izbor, ID, File[50];

if(sscanf(params, "ii", izbor, ID)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/pomerilokaciju [izbor] [id]");
	SCM(playerid, BELA, "[Izbor] 1. imovina | 2. firma | 3. organizacija");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(izbor == 1) {
	format(File, sizeof(File), IM_FILE, ID);
	if(!fexist(File)) return SendErrorMessage(playerid, "Ta imovina(ID) ne postoji u bazi podataka!");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	II[ID][iEnter][0] = Pos[0];
	II[ID][iEnter][1] = Pos[1];
	II[ID][iEnter][2] = Pos[2];
	PropertyRefresh(ID);
	SaveProperty(ID);
	SendInfoMessage(playerid, "Uspesno ste prebacili lokaciju imovine ID: %d.", ID);}
else if(izbor == 2) {
	format(File, sizeof(File), F_FILE, ID);
	if(!fexist(File)) return SendErrorMessage(playerid, "Ta firma(ID) ne postoji u bazi podataka!");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	BusinessInfo[ID][bEnterX] = Pos[0];
	BusinessInfo[ID][bEnterY] = Pos[1];
	BusinessInfo[ID][bEnterZ] = Pos[2];
	Business_Refresh(ID);
	SaveBusiness(ID);
	SendInfoMessage(playerid, "Uspesno ste prebacili lokaciju firme ID: %d.", ID);}
else if(izbor == 3) {
	format(File, sizeof(File), O_FILE, ID);
	if(!fexist(File)) return SendErrorMessage(playerid, "Ta organizacija(ID) ne postoji u bazi podataka!");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	OI[ID][oPozExtX] = Pos[0];
	OI[ID][oPozExtY] = Pos[1];
	OI[ID][oPozExtZ] = Pos[2];
	Orge3D(ID);
	SaveOrganization(ID);
	SendInfoMessage(playerid, "Uspesno ste prebacili lokaciju organizacije ID: %d.", ID);}
else return SendErrorMessage(playerid, "Pogresan broj izabrane vrste.");
return true;}

CMD:proverifirmu(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

new id, File[50];
if(sscanf(params, "i",id)) return SendUsageMessage(playerid, "/proverifirmu [ID firme]");

format(File, sizeof(File), F_FILE, id);
if(!fexist(File)) return SendErrorMessage(playerid, "Ta firma(ID) ne postoji u bazi podataka!");

new DialogStrgEx[545];

new varstring[50];
format(varstring, sizeof(varstring), ""col_white"Ime firme: %s\n\n", BusinessInfo[id][bName]);
strcat(DialogStrgEx, varstring);

format(varstring, sizeof(varstring), ""col_white"Novac: %d$\n\n", BusinessInfo[id][bMoney]);
strcat(DialogStrgEx, varstring);

format(varstring, sizeof(varstring), ""col_white"Fakture: %d\n\n", BusinessInfo[id][bFacture]);
strcat(DialogStrgEx, varstring);

format(varstring, sizeof(varstring), "ID: %d | Vlasnik %s", id, BusinessInfo[id][bOwner]);

SPD(playerid, dialog_EMPTY, DSMSG, varstring, DialogStrgEx, "Ok", "");
strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

return true;}

CMD:proveriimovinu(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

new id, File[50];
if(sscanf(params, "i",id)) return SendUsageMessage(playerid, "/proveriimovinu [ID imovine]");

format(File, sizeof(File), IM_FILE, id);
if(!fexist(File)) return SendErrorMessage(playerid, "Ta imovina(ID) ne postoji u bazi podataka!");

new wepname1[32], wepname2[32], wepname3[32], wepname4[32];

new drug1 = II[id][iDrugCode][0],
drug2 = II[id][iDrugCode][1],
drug3 = II[id][iDrugCode][2],
drug4 = II[id][iDrugCode][3],
drug5 = II[id][iDrugCode][4],
drug6 = II[id][iDrugCode][5],
drug7 = II[id][iDrugCode][6],
drug8 = II[id][iDrugCode][7],
drug9 = II[id][iDrugCode][8],
drug10 = II[id][iDrugCode][9];

if(II[id][iOruzje][0] != 0)
	format(wepname1, sizeof(wepname1), "%s", WeapNames[II[id][iOruzje][0]]);
else
	strmid(wepname1, "None", 0, 5);

if(II[id][iOruzje][1] != 0)
	format(wepname2, sizeof(wepname2), "%s", WeapNames[II[id][iOruzje][1]]);
else
	strmid(wepname2, "None", 0, 5);

if(II[id][iOruzje][2] != 0)
	format(wepname3, sizeof(wepname3), "%s", WeapNames[II[id][iOruzje][2]]);
else
	strmid(wepname3, "None", 0, 5);

if(II[id][iOruzje][3] != 0)
	format(wepname4, sizeof(wepname4), "%s", WeapNames[II[id][iOruzje][3]]);
else
	strmid(wepname4, "None", 0, 5);


new DialogStrgEx[1024];

new varstring[128];
format(varstring, sizeof(varstring), ""col_white"Novac: %d$\n\n", II[id][iMoney]);
strcat(DialogStrgEx, varstring);

format(varstring, sizeof(varstring), "Materijali: %d\n", II[id][iMats]);
strcat(DialogStrgEx, varstring);

strcat(DialogStrgEx, ""col_red"______________ORUZJE______________\n");

format(varstring, sizeof(varstring), ""col_white"Slot 1: %s(%d g) | Slot 2: %s(%d g)\n", GetDrugNameByDrugID(drug1), II[id][iDrug][0], GetDrugNameByDrugID(drug2), II[id][iDrug][1]);
strcat(DialogStrgEx, varstring);

format(varstring, sizeof(varstring), "Slot 3: %s(%d g) | Slot 4: %s(%d g)\n", GetDrugNameByDrugID(drug3), II[id][iDrug][2], GetDrugNameByDrugID(drug4), II[id][iDrug][3]);
strcat(DialogStrgEx, varstring);

format(varstring, sizeof(varstring), "Slot 5: %s(%d g) | Slot 6: %s(%d g)\n", GetDrugNameByDrugID(drug5), II[id][iDrug][4], GetDrugNameByDrugID(drug6), II[id][iDrug][5]);
strcat(DialogStrgEx, varstring);

format(varstring, sizeof(varstring), "Slot 7: %s(%d g) | Slot 8: %s(%d g)\n", GetDrugNameByDrugID(drug7), II[id][iDrug][6], GetDrugNameByDrugID(drug8), II[id][iDrug][7]);
strcat(DialogStrgEx, varstring);

format(varstring, sizeof(varstring), "Slot 9: %s(%d g) | Slot 10: %s(%d g)\n\n", GetDrugNameByDrugID(drug9), II[id][iDrug][8], GetDrugNameByDrugID(drug10), II[id][iDrug][9]);
strcat(DialogStrgEx, varstring);

strcat(DialogStrgEx, ""col_red"______________DROGA______________\n");

format(varstring, sizeof(varstring), ""col_white"Slot 1:[%s]    |    Metaka: %d\n", wepname1, II[id][iMunicija][0]);
strcat(DialogStrgEx, varstring);

format(varstring, sizeof(varstring), "Slot 2:[%s]    |    Metaka: %d\n", wepname2, II[id][iMunicija][1]);
strcat(DialogStrgEx, varstring);

format(varstring, sizeof(varstring), "Slot 3:[%s]    |    Metaka: %d\n", wepname3, II[id][iMunicija][2]);
strcat(DialogStrgEx, varstring);

format(varstring, sizeof(varstring), "Slot 4:[%s]    |    Metaka: %d", wepname4, II[id][iMunicija][3]);
strcat(DialogStrgEx, varstring);

format(varstring, sizeof(varstring), "ID: %d | Vlasnik %s", id, II[id][iOwner]);

SPD(playerid, dialog_EMPTY, DSMSG, varstring, DialogStrgEx, "Ok", "");
strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
return 1;}

CMD:oport(playerid, params[]) {


if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xSkriptaRank] == 4) {

	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

	new Float:Pos[3],odabir[20], id, File[50];
	if(sscanf(params, "s[20]i", odabir, id)) {
		SendUsageMessage(playerid, "/oport [ime] [ID]");
		SCM(playerid, BELA, "Dostupno: imovina, firma, vozilo, organizacija, hotel, imanje, garaza");
		SCM(playerid, BELA, "Dostupno: kontejner, posao");
		return true;
	}
	else {
		if(strcmp(odabir,"imovina",true) == 0) {
			format(File, sizeof(File), IM_FILE, id);
			if(!fexist(File)) return SendErrorMessage(playerid, "Ta imovina(ID) ne postoji u bazi podataka!");
			ac_SetPlayerPos(playerid, II[id][iEnter][0], II[id][iEnter][1], II[id][iEnter][2]);
			ac_SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			SendClientMessageEx(playerid, BELA, "Teleportovali ste se do kuce ID %d",id);
		}
		if(strcmp(odabir,"firma",true) == 0) {
			format(File, sizeof(File), F_FILE, id);
			if(!fexist(File)) return SendErrorMessage(playerid, "Ta firma(ID) ne postoji u bazi podataka!");
			ac_SetPlayerPos(playerid, BusinessInfo[id][bEnterX], BusinessInfo[id][bEnterY], BusinessInfo[id][bEnterZ]);
			ac_SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			SendClientMessageEx(playerid, BELA, "Teleportovali ste se do firme ID %d", id);
		}
		if(strcmp(odabir,"vozilo",true) == 0) {
			format(File, sizeof(File), V_FILE, id);
			if(!fexist(File)) return SendErrorMessage(playerid, "To vozilo(ID) ne postoji u bazi podataka!");
			GetVehiclePos(VehicleInfo[id][vID], Pos[0], Pos[1], Pos[2]);
			ac_SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]+3);
			ac_SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SendClientMessageEx(playerid, BELA, "Teleportovali ste se do vozila ID %d", id);
		}
		if(strcmp(odabir,"organizacija",true) == 0) {
			format(File, sizeof(File), O_FILE, id);
			if(!fexist(File)) return SendErrorMessage(playerid, "Ta organizacija(ID) ne postoji u bazi podataka!");
			ac_SetPlayerPos(playerid, OI[id][oPozExtX], OI[id][oPozExtY], OI[id][oPozExtZ]);
			ac_SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			SendClientMessageEx(playerid, BELA, "Teleportovali ste se do organizacije ID %d", id);
		}
		if(strcmp(odabir,"hotel",true) == 0) {
			format(File, sizeof(File), HOTEL_FILE, id);
			if(!fexist(File)) return SendErrorMessage(playerid, "Taj hotel(ID) ne postoji u bazi podataka!");
			ac_SetPlayerPos(playerid, hotelInfo[id][hEnter][0], hotelInfo[id][hEnter][1], hotelInfo[id][hEnter][2]);
			ac_SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SendClientMessageEx(playerid, BELA, "Teleportovali ste se do hotela ID %d", id);
		}
		if(strcmp(odabir,"imanje",true) == 0) {
			format(File, sizeof(File), F_FIELD, id);
			if(!fexist(File)) return SendErrorMessage(playerid, "To imanje(ID) ne postoji u bazi podataka!");
			ac_SetPlayerPos(playerid, fieldInfo[id][fieldObjectPos][0], fieldInfo[id][fieldObjectPos][1], fieldInfo[id][fieldObjectPos][2]);
			ac_SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SendClientMessageEx(playerid, BELA, "Teleportovali ste se do imanja ID %d", id);
		}
		if(strcmp(odabir,"garaza",true) == 0) {
			format(File, sizeof(File), F_GARAGE, id);
			if(!fexist(File)) return SendErrorMessage(playerid, "Ta garaza(ID) ne postoji u bazi podataka!");
			ac_SetPlayerPos(playerid, garageInfo[id][garagePos][0], garageInfo[id][garagePos][1], garageInfo[id][garagePos][2]);
			ac_SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SendClientMessageEx(playerid, BELA, "Teleportovali ste se do garaze ID %d", id);
		}
		if(strcmp(odabir,"kontejner",true) == 0) {
			format(File, sizeof(File), KO_FILE, id);
			if(!fexist(File)) return SendErrorMessage(playerid, "Taj kontejner(ID) ne postoji u bazi podataka!");
			ac_SetPlayerPos(playerid, KontInfo[id][koObjPos][0]+2, KontInfo[id][koObjPos][1], KontInfo[id][koObjPos][2]);
			ac_SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SendClientMessageEx(playerid, BELA, "Teleportovali ste se do kontejnera ID %d", id);
		}
		if(strcmp(odabir,"posao",true) == 0) {
			if(id < 1 || id > MAX_JOBS) return SendErrorMessage(playerid, "Taj posao(ID) ne postoji u bazi podataka(1-12)!");
			id--;
			ac_SetPlayerPos(playerid, jobsInfos[id][jPos][0], jobsInfos[id][jPos][1], jobsInfos[id][jPos][2]);
			ac_SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SendClientMessageEx(playerid, BELA, "Teleportovali ste se do posla %s.", jobsInfos[id][jName]);
		}
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}
CMD:lp(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 1) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti.");

	new DialogStrgEx[2400];
	for(new i = 1; i < MAX_ASKQS; i++) {
		format(DialogStrgEx, sizeof(DialogStrgEx), "%sPitanje %d - %s(%d)\n", DialogStrgEx, i, askqList[i][askqOwner], askqList[i][askqID]);
	}
	SPD(playerid, dialog_ASKLISTA, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:aport(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti.");
	if(PlayerInfo[playerid][xAdmin] < 7) {
		if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla.");
		if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok imas wanted level.");
		if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si u jailu.");
		//if(PljackaUToku || ZlataraUToku) return SendErrorMessage(playerid, "Ne mozes se portati dok je pljacka u toku.");
	}
	new DialogStrgEx[1950];
	for(new i = 0; i < MAX_APORTS; i++) {
		if(aportInfo[i][aportCreated] == 1) {
			format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, aportInfo[i][aportName]);
		}
	}
	SPD(playerid, dialog_SELECTAPORT, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:hport(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 7 || PlayerInfo[playerid][xHelper] >= 1) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Helper na duznosti.");
	if(PlayerInfo[playerid][xHelper] >= 1) {
		if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristiti ovu komandu dok si u DM Zoni.");
		if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla.");
		if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok imas wanted level.");
		if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si u jailu.");
		//if(PljackaUToku || ZlataraUToku) return SendErrorMessage(playerid, "Ne mozes se portati dok je pljacka u toku.");
	}
	new DialogStrgEx[1950];
	for(new i = 0; i < MAX_SPORTS; i++) {
		if(supportInfo[i][supportCreated] == 1) {
			format(DialogStrgEx, sizeof(DialogStrgEx), "%s%s\n", DialogStrgEx, supportInfo[i][supportName]);
		}
	}
	SPD(playerid, dialog_SELECTSPORT, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:check(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1) {
	new id;
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/check [ID/Deo imena]");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac je offline!");
	if(PlayerInfo[playerid][xAdmin] < 6 && PlayerInfo[id][xAdmin] >= 6) return SendErrorMessage(playerid, "Ne mozete to direktoru i vlasniku!");
	ShowStats(playerid, id);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:offcheck(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6) {

	new imeigraca[24], ifile[64];
	if(sscanf(params, "s[24]", imeigraca)) return SendUsageMessage(playerid, "/offcheck [Ime_Prezime]");
	format(ifile, sizeof(ifile), I_FILE, imeigraca);
	if(!fexist(ifile)) return SendErrorMessage(playerid, "Taj igrac ne postoji u bazi podataka!");
	if(IsPlayerConnected(GetPlayerIdFromName(imeigraca))) {
		SendErrorMessage(playerid, "Taj igrac je online tako da proveri ga online - /check.");
		return 1;
	}
	INI_ParseFile(ifile, "ShowOffStats");

	new banfile[100]; new razlogbana[128] = "Nepoznat";
	new banan[10] = "Ne";
	format(banfile, sizeof(banfile), FILE_BAN, imeigraca);
	if(fexist(banfile)) {
		format(banan, sizeof(banan), "Da");
		new File: UserFile = fopen(banfile, io_read);
		new key[256];
		new Data[256];
		while (fread(UserFile , Data, sizeof(Data))) {
			key = ini_GetKey(Data);
			if(strcmp(key , "Razlog" , true) == 0) {
				format(razlogbana, strlen(ini_GetValue (Data)), "%s", ini_GetValue(Data));
			}
		}
		fclose(UserFile);
	}
	else {
		format(banan, sizeof(banan), "Ne");
	}


	new pol[7];
	if(PlayerInfo[playerid][xPol] == 1) pol = "musko";
	else if(PlayerInfo[playerid][xPol] == 2) pol = "zensko";

	new nxtlevel = OfflineCheck[Level]+1,
		expamount = nxtlevel*levelexp,
		warns = OfflineCheck[Upozorenja],
		level = OfflineCheck[Level],
		exp = OfflineCheck[Respekt];

	new varstring[144];
	SendClientMessage(playerid, 0x5BD3FFAA,"_________________________________________________");
	format(varstring, sizeof(varstring),"*** %s ***", imeigraca);
	SendClientMessage(playerid, FUSIONGAMING,varstring);
	format(varstring, sizeof(varstring), "Pol [%s] | Level:[%d] | Sati Igranja:[%d]", pol, level, OfflineCheck[OnlineSati]);
	SendClientMessage(playerid, 0xFFFFFFAA,varstring);
	format(varstring, sizeof(varstring), "Respekt:[%d/%d] | Novac: [%d$] | Banka: [%d$]", exp, expamount, OfflineCheck[Novac], OfflineCheck[Banka]);
	SendClientMessage(playerid, 0xFFFFFFAA,varstring);
	format(varstring, sizeof(varstring), "Upozorenja: [%d/3] | Posao: [%s] | Posao ugovor: [%d/5]", warns, getJobName(OfflineCheck[Posao]), OfflineCheck[Posaougovor]);
	SendClientMessage(playerid, 0xFFFFFFAA,varstring);
	format(varstring, sizeof(varstring), "Godine: [%d] | Organizacija: [%s] | Rank: [%d]", OfflineCheck[Godine], getOrgName(OfflineCheck[Organizacija]), OfflineCheck[Rank]);
	SendClientMessage(playerid, 0xFFFFFFAA,varstring);
	format(varstring, sizeof(varstring), "Kljuc Imovine1 [%d] | Kljuc Imovine2 [%d] | Kljuc Imovine3 [%d]", OfflineCheck[Imovina1], OfflineCheck[Imovina2], OfflineCheck[Imovina3]);
	SendClientMessage(playerid, 0xF0F0F0FF,varstring);
	format(varstring, sizeof(varstring), "Kljuc Firme [%d] | Kljuc Vozila1 [%d] | Kljuc Vozila2 [%d]", OfflineCheck[Firma], OfflineCheck[Vozilo1], OfflineCheck[Vozilo2]);
	SendClientMessage(playerid, 0xF0F0F0FF,varstring);
	format(varstring, sizeof(varstring), "Kljuc Vozila3 [%d] | Kljuc Vozila4 [%d]", OfflineCheck[Vozilo3], OfflineCheck[Vozilo4]);
	SendClientMessage(playerid, 0xF0F0F0FF,varstring);
	format(varstring, sizeof(varstring), "Kljuc hotela [%d] | Admin [%d] | Helper [%d]", OfflineCheck[Hotel], OfflineCheck[Admin], OfflineCheck[GameSage]);
	SendClientMessage(playerid, 0xF0F0F0FF,varstring);
	//format(varstring, sizeof(varstring), "Aktivnost igraca u staff timu: %d minuta", OfflineCheck[StaffMin]);
	//SendClientMessage(playerid, 0xF0F0F0FF,varstring);
	format(varstring, sizeof(varstring), "Banovan: %s | Razlog: %s", banan, razlogbana);
	SendClientMessage(playerid, 0xF0F0F0FF,varstring);
	format(varstring, sizeof(varstring), "Poslednji put ulogovan: %s", OfflineCheck[LastLogin]);
	SendClientMessage(playerid, 0xF0F0F0FF,varstring);
	SendClientMessage(playerid, 0x5BD3FFAA,"_________________________________________________");

}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:ubij(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 2) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id;
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/ubij [ID/Deo imena]");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac je offline!");
	if(PlayerInfo[playerid][xHelper] >= 1) {
		if(PlayerInfo[id][xAdmin] > 0) return SendErrorMessage(playerid, "Ne mozes admine.");
	}
	if(PlayerInfo[playerid][xAdmin] < 6 && PlayerInfo[id][xAdmin] >= 6) return SendErrorMessage(playerid, "Ne mozete to direktoru i vlasniku!");
	Fusion_SetPlayerHealth(id, 0);
	new varstring[90];
	format(varstring, sizeof(varstring), "|A| %s ubijen si od Admina %s", ImeIgraca(id), ImeIgraca(playerid));
	SCM(id, ANTICHEAT, varstring);
	format(varstring, sizeof(varstring), "|A|Ubijen| %s je ubijen od Admina %s", ImeIgraca(id), ImeIgraca(playerid));
	AdminPoruka(0x9ACD32AA, varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:spavnuj(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id;
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/spavnuj [ID/Deo imena]");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac je offline!");
	if(PlayerInfo[playerid][xHelper] >= 1) {
		if(PlayerInfo[id][xAdmin] > 0) return SendErrorMessage(playerid, "Ne mozes admine.");
	}
	if(PlayerInfo[playerid][xAdmin] < 6 && PlayerInfo[id][xAdmin] >= 6) return SendErrorMessage(playerid, "Ne mozete to direktoru i vlasniku!");
	Fusion_SetSpawnInfo(id);
	ac_SpawnPlayer(id);
	new varstring[90];
	format(varstring, sizeof(varstring), "|A| %s spavnan si ponovno od Admina %s", ImeIgraca(id), ImeIgraca(playerid));
	SCM(id, ANTICHEAT, varstring);
	format(varstring, sizeof(varstring), "| SPAVNUJ | %s je spavnan ponovno od Admina %s", ImeIgraca(id), ImeIgraca(playerid));
	AdminPoruka(0x9ACD32AA, varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:healall(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 5) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	foreach(new i : Player) {
		if(i != IPI) {
			Fusion_SetPlayerHealth(i, 100);
		}
	}
	new varstring[90];
	format(varstring, sizeof(varstring), "HEALALL | %s je svim igracim napunio helte.", ImeIgraca(playerid));
	AdminPoruka(NARACRVENA, varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:armorall(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 5) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	foreach(new i : Player) {
		if(i != IPI) {
			Fusion_SetPlayerArmour(i, 100);
		}
	}
	new varstring[90];
	format(varstring, sizeof(varstring), "ARMORALL | %s je svim igracim napunio armor.", ImeIgraca(playerid));
	AdminPoruka(NARACRVENA, varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:muteall(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	foreach(new i : Player) {
		if(i != IPI) {
			PlayerInfo[i][xMute] = 100;
		}
	}
	new varstring[90];
	format(varstring, sizeof(varstring), "MUTEALL | %s je mutirao sve igrace.", ImeIgraca(playerid));
	SCMA(NARACRVENA, varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:gethereall(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	foreach(new i : Player) {
		if(i != IPI) {
			new rand = random(10);
			ac_SetPlayerPos(i, x+rand, y+rand, z);
			ac_SetPlayerInterior(i, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
		}
	}
	new varstring[90];
	format(varstring, sizeof(varstring), "GETHEREALL | %s je teleportovao sve igrace do sebe.", ImeIgraca(playerid));
	SCMA(NARACRVENA, varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:unmuteall(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	foreach(new i : Player) {
		if(i != IPI) {
			PlayerInfo[i][xMute] = 0;
		}
	}
	new varstring[90];
	format(varstring, sizeof(varstring), "UNMUTEALL | %s je odmutirao sve igrace.", ImeIgraca(playerid));
	SCMA(NARACRVENA, varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:sethp(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 4) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id, zivot;
	if(sscanf(params, "ui", id, zivot)) return SendUsageMessage(playerid, "/sethp [ID/Deo imena] [Helti]");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac je offline!");
	if(PlayerInfo[playerid][xAdmin] < 6 && PlayerInfo[id][xAdmin] >= 6) return SendErrorMessage(playerid, "Ne mozete to direktoru i vlasniku!");
	Fusion_SetPlayerHealth(id, zivot);
	SendInfoMessage(playerid, "Postavili ste igracu %s helte na %d.", ImeIgraca(id), zivot);
	new varstring[90];
	format(varstring, sizeof(varstring), "~r~(AC) - ~w~%s je postavio health igracu %s na %d.", ImeIgraca(playerid), ImeIgraca(id), zivot);
	SendAltChatMessage(varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:izbaciclana(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 5 || PlayerInfo[playerid][xSkriptaRank] == 4) {

	if(PlayerInfo[playerid][xAdmin] >= 5) { if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti"); }
	new igrac;
	if(sscanf(params, "u", igrac)) return SendUsageMessage(playerid, "/izbaciclana [ID/Deo imena]");
	if(igrac == IPI) return SendErrorMessage(playerid, "Taj igrac je offline!");
	if(PlayerInfo[igrac][xClan] == 0) return SendErrorMessage(playerid, "Taj igrac nije u organizaciji.");
	if(PlayerInfo[igrac][xLider] != 0) return SendErrorMessage(playerid, "Taj igrac je lider.");
	new OrgID = PlayerInfo[igrac][xClan], name[MAX_PLAYER_NAME];
	GetPlayerName(igrac, name, sizeof(name));
	if(OI[OrgID][oSuspended]) return SendErrorMessage(playerid, "Ova organizacija je zakljucana od strane vlasnika.");
	if(strcmp(name, OI[OrgID][oClan1], true) == 0) { strmid(OI[OrgID][oClan1], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan2], true) == 0) { strmid(OI[OrgID][oClan2], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan3], true) == 0) { strmid(OI[OrgID][oClan3], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan4], true) == 0) { strmid(OI[OrgID][oClan4], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan5], true) == 0) { strmid(OI[OrgID][oClan5], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan6], true) == 0) { strmid(OI[OrgID][oClan6], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan7], true) == 0) { strmid(OI[OrgID][oClan7], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan8], true) == 0) { strmid(OI[OrgID][oClan8], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan9], true) == 0) { strmid(OI[OrgID][oClan9], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan10], true) == 0) { strmid(OI[OrgID][oClan10], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan11], true) == 0) { strmid(OI[OrgID][oClan11], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan12], true) == 0) { strmid(OI[OrgID][oClan12], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan13], true) == 0) { strmid(OI[OrgID][oClan13], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan14], true) == 0) { strmid(OI[OrgID][oClan14], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan15], true) == 0) { strmid(OI[OrgID][oClan15], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan16], true) == 0) { strmid(OI[OrgID][oClan16], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan17], true) == 0) { strmid(OI[OrgID][oClan17], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan18], true) == 0) { strmid(OI[OrgID][oClan18], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan19], true) == 0) { strmid(OI[OrgID][oClan19], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan20], true) == 0) { strmid(OI[OrgID][oClan20], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan21], true) == 0) { strmid(OI[OrgID][oClan21], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan22], true) == 0) { strmid(OI[OrgID][oClan22], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan23], true) == 0) { strmid(OI[OrgID][oClan23], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan24], true) == 0) { strmid(OI[OrgID][oClan24], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan25], true) == 0) { strmid(OI[OrgID][oClan25], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan26], true) == 0) { strmid(OI[OrgID][oClan26], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan27], true) == 0) { strmid(OI[OrgID][oClan27], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan28], true) == 0) { strmid(OI[OrgID][oClan28], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan29], true) == 0) { strmid(OI[OrgID][oClan29], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(name, OI[OrgID][oClan30], true) == 0) { strmid(OI[OrgID][oClan30], "Niko", 0, strlen("Niko"), ORG_CLAN); }

	OI[OrgID][oUbacenihClanova]--;

	ResetAllWeapons(igrac);
	PlayerInfo[igrac][xClan] = 0; PlayerInfo[igrac][xRank] = 0; PlayerInfo[igrac][xSpawn] = SetRandomSpawn(igrac); SaveOrganization(OrgID);
	PlayerInfo[igrac][xOrgUgovor] = 0; SavePlayer(igrac); PlayerInfo[igrac][xSkin] = SetSexSkin(igrac); c_SetPlayerSkin(igrac, SetSexSkin(igrac));
	SendClientMessageEx(igrac, CRVENA, "Izbacen si iz organizacije od Admina %s", ImeIgraca(playerid));
	SendClientMessageEx(playerid, CRVENA, "Izbacili ste igraca %s iz organizacije", ImeIgraca(igrac));}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:smenipromotera(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xSkriptaRank] == 5) {

	new imeigraca[24], ifile[64];
	if(sscanf(params, "s[24]", imeigraca)) return SendUsageMessage(playerid, "/smenipromotera [Ime_Prezime]");
	format(ifile, sizeof(ifile), I_FILE, imeigraca);
	if(!fexist(ifile)) return SendErrorMessage(playerid, "Taj igrac ne postoji u bazi podataka!");
	if(IsPlayerConnected(GetPlayerIdFromName(imeigraca))) {
		SendErrorMessage(playerid, "Taj igrac je online tako da smeni ga online.");
		return 1;
	}

	new INI:File = INI_Open(ifile);
	INI_SetTag(File, "Informacije");
	INI_WriteInt(File, "Promoter", 0);
	INI_WriteInt(File, "Skin", MaleSkinIDs[0][0]);
	INI_WriteInt(File, "Spawn", 0);
	INI_Close(File);

	SendClientMessageEx(playerid, CRVENA, "Smenili ste offline promotera %s", imeigraca);

}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:smeniadmina(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xSkriptaRank] == 8) {
	new id,text[256],ldst[128],aslot[64];
	if(sscanf(params,"i",id)) return SendUsageMessage(playerid, "/smeniadmina [slot]");
	if(id < 1 || id > 30) return SendErrorMessage(playerid, "Slot ne mozete biti manji od 1 i veci od 30.");
	
	new adminName[128];
	format(adminName, sizeof(adminName), "Admini/%d.txt", id);
	new File:lider30 = fopen(adminName ,io_read);
	while(fread(lider30,text)) {
	strmid(aslot,text,0,strlen(text),255); }
	fclose(lider30);

	format(ldst,128,"Admini/%d.txt",id);
	format(text,64,"Niko");
	new File:log;
	log = fopen(ldst,io_write);
	fwrite(log,text);
	fclose(log);

	new varstring[128];
	SendInfoMessage(playerid, "Skinuli ste admina igracu %s koji je bio na slotu %d.", aslot, id);
	format(varstring, sizeof(varstring), "MAKE | %s je skinuo admina igracu %s koji je bio na slotu %d.", ImeIgraca(playerid), aslot, id);
	AdminPoruka(NARACRVENA, varstring);}
return true;}
CMD:smenihelpera(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xHelper] >= 3) {
	new id,text[256],ldst[128],aslot[64];
	if(sscanf(params,"i",id)) return SendUsageMessage(playerid, "/smenihelpera [slot]");
	if(id < 1 || id > 30) return SendErrorMessage(playerid, "Slot ne mozete biti manji od 1 i veci od 30.");
	
	new adminName[128];
	format(adminName, sizeof(adminName), "Helperi/%d.txt", id);
	new File:lider30 = fopen(adminName ,io_read);
	while(fread(lider30,text)) {
	strmid(aslot,text,0,strlen(text),255); }
	fclose(lider30);

	format(ldst,128,"Helperi/%d.txt",id);
	format(text,64,"Niko");
	new File:log;
	log = fopen(ldst,io_write);
	fwrite(log,text);
	fclose(log);

	new varstring[128];
	SendInfoMessage(playerid, "Skinuli ste helpera igracu %s koji je bio na slotu %d.", aslot, id);
	format(varstring, sizeof(varstring), "MAKE | %s je skinuo helpera igracu %s koji je bio na slotu %d.", ImeIgraca(playerid), aslot, id);
	AdminPoruka(NARACRVENA, varstring);}
return true;}
CMD:ubaciclana(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 5 || PlayerInfo[playerid][xSkriptaRank] == 4) {

	if(PlayerInfo[playerid][xAdmin] >= 5) { if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti"); }
	new igrac, OrgID;
	if(sscanf(params, "iu", OrgID, igrac)) return SendUsageMessage(playerid, "/ubaciclana [ID orge] [ID igraca]");
	if(igrac == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Igrac nije online ili si ukucao pogresan ID!");
	if(PlayerInfo[igrac][xClan] != 0) return SendErrorMessage(playerid, "Igrac je vec clan organizacije!");
	if(PlayerInfo[igrac][xLider] != 0) return SendErrorMessage(playerid, "Igrac je vec clan organizacije!");
	new ImaFajl[40];
	format(ImaFajl, sizeof(ImaFajl), O_FILE, OrgID);
	if(!fexist(ImaFajl)) return SendErrorMessage(playerid, "Ta organizacija ne postoji u bazi.");

	if(OI[OrgID][oSuspended]) return SendErrorMessage(playerid, "Ova organizacija je zakljucana od strane vlasnika.");
	if(OI[OrgID][oUbacenihClanova] >= OI[OrgID][oMaxClanova]) return SendErrorMessage(playerid, "Ova organizacija vec ima ubacenih maksimalnih %d clanova.", OI[OrgID][oMaxClanova]);

	if(!strcmp(OI[OrgID][oClan1], "Niko", true)) { strmid(OI[OrgID][oClan1], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
		else if(!strcmp(OI[OrgID][oClan2], "Niko", true)) { strmid(OI[OrgID][oClan2], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan3], "Niko", true)) { strmid(OI[OrgID][oClan3], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan4], "Niko", true)) { strmid(OI[OrgID][oClan4], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan5], "Niko", true)) { strmid(OI[OrgID][oClan5], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan6], "Niko", true)) { strmid(OI[OrgID][oClan6], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan7], "Niko", true)) { strmid(OI[OrgID][oClan7], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan8], "Niko", true)) { strmid(OI[OrgID][oClan8], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan9], "Niko", true)) { strmid(OI[OrgID][oClan9], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan10], "Niko", true)) { strmid(OI[OrgID][oClan10], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan11], "Niko", true)) { strmid(OI[OrgID][oClan11], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan12], "Niko", true)) { strmid(OI[OrgID][oClan12], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan13], "Niko", true)) { strmid(OI[OrgID][oClan13], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan14], "Niko", true)) { strmid(OI[OrgID][oClan14], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan15], "Niko", true)) { strmid(OI[OrgID][oClan15], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan16], "Niko", true)) { strmid(OI[OrgID][oClan16], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan17], "Niko", true)) { strmid(OI[OrgID][oClan17], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan18], "Niko", true)) { strmid(OI[OrgID][oClan18], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan19], "Niko", true)) { strmid(OI[OrgID][oClan19], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan20], "Niko", true)) { strmid(OI[OrgID][oClan20], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan21], "Niko", true)) { strmid(OI[OrgID][oClan21], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan22], "Niko", true)) { strmid(OI[OrgID][oClan22], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan23], "Niko", true)) { strmid(OI[OrgID][oClan23], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan24], "Niko", true)) { strmid(OI[OrgID][oClan24], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan25], "Niko", true)) { strmid(OI[OrgID][oClan25], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan26], "Niko", true)) { strmid(OI[OrgID][oClan26], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan27], "Niko", true)) { strmid(OI[OrgID][oClan27], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan28], "Niko", true)) { strmid(OI[OrgID][oClan28], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan29], "Niko", true)) { strmid(OI[OrgID][oClan29], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else if(!strcmp(OI[OrgID][oClan30], "Niko", true)) { strmid(OI[OrgID][oClan30], ImeIgraca(igrac), 0, strlen(ImeIgraca(igrac)), ORG_CLAN); }
	else return SendErrorMessage(playerid, "Ta orga maksimalna broj clanova!");

	OI[OrgID][oUbacenihClanova]++;
	PlayerInfo[igrac][xClan] = OrgID; PlayerInfo[igrac][xRank] = 1; PlayerInfo[igrac][xSpawn] = SPAWN_BAZA;
	if(PlayerInfo[igrac][xPol] == 1) {
		PlayerInfo[igrac][xSkin] = OI[OrgID][oSkin1]; c_SetPlayerSkin(igrac, OI[OrgID][oSkin1]);
	}
	else if(PlayerInfo[igrac][xPol] == 2) {
		PlayerInfo[igrac][xSkin] = OI[OrgID][oZSkin1]; c_SetPlayerSkin(igrac, OI[OrgID][oZSkin1]);
	}

	PlayerInfo[igrac][xOrgUgovor] = 0; SavePlayer(igrac); SaveOrganization(OrgID);
	SendInfoMessage(igrac, "Cestitamo, ubaceni ste od AFG tima u organizaciju %s.", getOrgName(OrgID));
	SendInfoMessage(playerid, "Ubacili ste igraca %s u organizaciju %s", ImeIgraca(igrac), OI[OrgID][oName]);}
return 1;}

CMD:smenilidera(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 5 || PlayerInfo[playerid][xSkriptaRank] == 4) {

	if(PlayerInfo[playerid][xAdmin] > 5) { if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti"); }
	new imeigraca[24], ifile[64], OrgID, oFile[40];
	if(sscanf(params, "ds[24]", OrgID, imeigraca)) return SendUsageMessage(playerid, "/smenilidera [ID organizacije] [Ime_Prezime]");
	format(ifile, sizeof(ifile), I_FILE, imeigraca); format(oFile, sizeof(oFile), O_FILE, OrgID);
	if(!fexist(oFile)) return SendErrorMessage(playerid, "Ova organizacija ne postoji.");
	if(!fexist(ifile)) return SendErrorMessage(playerid, "Taj igrac ne postoji u bazi podataka!");
	if(IsPlayerConnected(GetPlayerIdFromName(imeigraca))) {
		SendErrorMessage(playerid, "Taj igrac je online tako da smeni ga online.");
		return 1;
	}

	if(strcmp(imeigraca, OI[OrgID][oLider1], true) == 0) { strmid(OI[OrgID][oLider1], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oLider2], true) == 0) { strmid(OI[OrgID][oLider2], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else return SendErrorMessage(playerid, "Taj lider nije u izabranoj organizaciji!");

	new INI:File = INI_Open(ifile);
	INI_SetTag(File, "Informacije");
	INI_WriteInt(File, "Lider", 0);
	INI_WriteInt(File, "Clan", 0);
	INI_WriteInt(File, "Rank", 0);
	INI_WriteInt(File, "Skin", MaleSkinIDs[0][0]);
	INI_WriteInt(File, "Spawn", 0);
	INI_Close(File);
	SaveOrganization(OrgID);
	SendClientMessageEx(playerid, CRVENA, "Izbacili ste lidera %s iz organizacije %s", imeigraca, OI[OrgID][oName]);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:spisakclanova(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 5 || PlayerInfo[playerid][xSkriptaRank] == 4) {

	if(PlayerInfo[playerid][xAdmin] > 5) { if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti"); }
	new OrgID, string[64], oFile[40];
	if(sscanf(params, "i", OrgID)) return SendUsageMessage(playerid, "/spisakclanova [ID organizacije]");
	format(oFile, sizeof(oFile), O_FILE, OrgID);
	if(!fexist(oFile)) return SendErrorMessage(playerid, "Ova organizacija ne postoji.");
	new DialogStrgEx[1600];
	format(DialogStrgEx, sizeof(DialogStrgEx), "Lider 1: %s\nLider 2: %s\nClan 1: %s\nClan 2: %s\nClan 3: %s\nClan 4: %s\nClan 5: %s\nClan 6: %s\nClan 7: %s\nClan 8: %s\nClan 9: %s\nClan 10: %s\nClan 11: %s\nClan 12: %s\nClan 13: %s\nClan 14: %s\nClan 15: %s\nClan 16: %s\nClan 17: %s\nClan 18: %s\nClan 19: %s\nClan 20: %s\nClan 21: %s\nClan 22: %s\nClan 23: %s\nClan 24: %s\nClan 25: %s\nClan 26: %s\nClan 27: %s\nClan 28: %s\nClan 29: %s\nClan 30: %s" ,
		OI[OrgID][oLider1],
		OI[OrgID][oLider2],
		OI[OrgID][oClan1],
		OI[OrgID][oClan2],
		OI[OrgID][oClan3],
		OI[OrgID][oClan4],
		OI[OrgID][oClan5],
		OI[OrgID][oClan6],
		OI[OrgID][oClan7],
		OI[OrgID][oClan8],
		OI[OrgID][oClan9],
		OI[OrgID][oClan10],
		OI[OrgID][oClan11],
		OI[OrgID][oClan12],
		OI[OrgID][oClan13],
		OI[OrgID][oClan14],
		OI[OrgID][oClan15],
		OI[OrgID][oClan16],
		OI[OrgID][oClan17],
		OI[OrgID][oClan18],
		OI[OrgID][oClan19],
		OI[OrgID][oClan20],
		OI[OrgID][oClan21],
		OI[OrgID][oClan22],
		OI[OrgID][oClan23],
		OI[OrgID][oClan24],
		OI[OrgID][oClan25],
		OI[OrgID][oClan26],
		OI[OrgID][oClan27],
		OI[OrgID][oClan28],
		OI[OrgID][oClan29],
		OI[OrgID][oClan30]);
	format(string, sizeof(string), ""col_white"%s", OI[OrgID][oName]) ;
	SPD(playerid, dialog_EMPTY, DSMSG, string, DialogStrgEx, "U redu", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:offizbaciclana(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 5 || PlayerInfo[playerid][xSkriptaRank] == 4) {
	if(PlayerInfo[playerid][xAdmin] > 5) { if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti"); }
	new imeigraca[24], ifile[64], OrgID, oFile[40];
	if(sscanf(params, "ds[24]", OrgID, imeigraca)) return SendUsageMessage(playerid, "/offizbaciclana [ID organizacije] [Ime_Prezime]");
	format(ifile, sizeof(ifile), I_FILE, imeigraca); format(oFile, sizeof(oFile), O_FILE, OrgID);
	if(!fexist(oFile)) return SendErrorMessage(playerid, "Ova organizacija ne postoji.");
	if(!fexist(ifile)) return SendErrorMessage(playerid, "Taj igrac ne postoji u bazi podataka!");
	if(IsPlayerConnected(GetPlayerIdFromName(imeigraca))) {
		SendErrorMessage(playerid, "Taj igrac je online tako da izbaci ga online.");
		return 1;
	}

	if(strcmp(imeigraca, OI[OrgID][oClan1], true) == 0) { strmid(OI[OrgID][oClan1], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan2], true) == 0) { strmid(OI[OrgID][oClan2], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan3], true) == 0) { strmid(OI[OrgID][oClan3], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan4], true) == 0) { strmid(OI[OrgID][oClan4], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan5], true) == 0) { strmid(OI[OrgID][oClan5], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan6], true) == 0) { strmid(OI[OrgID][oClan6], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan7], true) == 0) { strmid(OI[OrgID][oClan7], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan8], true) == 0) { strmid(OI[OrgID][oClan8], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan9], true) == 0) { strmid(OI[OrgID][oClan9], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan10], true) == 0) { strmid(OI[OrgID][oClan10], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan11], true) == 0) { strmid(OI[OrgID][oClan11], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan12], true) == 0) { strmid(OI[OrgID][oClan12], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan13], true) == 0) { strmid(OI[OrgID][oClan13], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan14], true) == 0) { strmid(OI[OrgID][oClan14], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan15], true) == 0) { strmid(OI[OrgID][oClan15], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan16], true) == 0) { strmid(OI[OrgID][oClan16], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan17], true) == 0) { strmid(OI[OrgID][oClan17], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan18], true) == 0) { strmid(OI[OrgID][oClan18], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan19], true) == 0) { strmid(OI[OrgID][oClan19], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan20], true) == 0) { strmid(OI[OrgID][oClan20], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan21], true) == 0) { strmid(OI[OrgID][oClan21], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan22], true) == 0) { strmid(OI[OrgID][oClan22], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan23], true) == 0) { strmid(OI[OrgID][oClan23], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan24], true) == 0) { strmid(OI[OrgID][oClan24], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan25], true) == 0) { strmid(OI[OrgID][oClan25], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan26], true) == 0) { strmid(OI[OrgID][oClan26], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan27], true) == 0) { strmid(OI[OrgID][oClan27], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan28], true) == 0) { strmid(OI[OrgID][oClan28], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan29], true) == 0) { strmid(OI[OrgID][oClan29], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else if(strcmp(imeigraca, OI[OrgID][oClan30], true) == 0) { strmid(OI[OrgID][oClan30], "Niko", 0, strlen("Niko"), ORG_CLAN); }
	else return SendErrorMessage(playerid, "Taj igrac nije u izabranoj organizaciji!");

	OI[OrgID][oUbacenihClanova]--;

	new INI:File = INI_Open(ifile);
	INI_SetTag(File, "Informacije");
	INI_WriteInt(File, "Clan", 0);
	INI_WriteInt(File, "Rank", 0);
	INI_WriteInt(File, "OrgUgovor", 0);
	INI_WriteInt(File, "Skin", MaleSkinIDs[0][0]);
	INI_WriteInt(File, "Spawn", 0);
	INI_Close(File);
	SaveOrganization(OrgID);
	SendClientMessageEx(playerid, CRVENA, "Izbacili ste igraca %s iz organizacije %s", imeigraca, OI[OrgID][oName]);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:setarmor(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 3) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id;
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/setarmor [ID/Deo imena]");
	if(id == IPI) return SendErrorMessage(playerid, "Taj igrac je offline!");
	if(PlayerInfo[playerid][xAdmin] < 6 && PlayerInfo[id][xAdmin] >= 6) return SendErrorMessage(playerid, "Ne mozete to direktorima i vlasnicima!");
	Fusion_SetPlayerArmour(id, 100);
	SendInfoMessage(id, "Admin %s vam je postavio armor.", ImeIgraca(playerid));
	SendInfoMessage(playerid, "Postavili ste igracu %s armor.", ImeIgraca(id));
	new varstring[90];
	format(varstring, sizeof(varstring), "~r~(AC) - ~w~%s je postavio armor igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	SendAltChatMessage(varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:cc(playerid, params[], help) {
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 2) {

	for(new j; j < 128; j++) {
		SCMA(-1, "");
	}
	new string[128];
	if(PlayerInfo[playerid][xAdmin] == 7) { format(string, sizeof(string), ""col_server"Vlasnik "col_white"%s "col_server"je ocistio chat.", ImeIgraca(playerid)); }
	else if(PlayerInfo[playerid][xAdmin] == 6) { format(string, sizeof(string), ""col_server"Direktor "col_white"%s "col_server"je ocistio chat.", ImeIgraca(playerid)); }
	else if(PlayerInfo[playerid][xAdmin] == 5) { format(string, sizeof(string), ""col_server"Head AFG "col_white"%s "col_server"je ocistio chat.", ImeIgraca(playerid)); }
	else if(PlayerInfo[playerid][xAdmin] >= 1 && PlayerInfo[playerid][xAdmin] <= 4) { format(string, sizeof(string), ""col_server"AFG "col_white"%s "col_server"je ocistio chat.", ImeIgraca(playerid)); }
	else if(PlayerInfo[playerid][xHelper] >= 1) { format(string, sizeof(string), ""col_server"Helper "col_white"%s "col_server"je ocistio chat.", ImeIgraca(playerid)); }
	SCMA(-1, string);
	SCMA(-1, ""col_server"=== www.fg-rpg.com ===");

	string[0] = (EOS);

}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:inv(playerid, params[]) {

if(gZone_Time[playerid] != 0 && gZone_InvMax1[playerid] >= 1) return SendErrorMessage(playerid, "Dok zauzimate teritoriju inv mozete koristiti samo jednom.");
if(PlayerInfo[playerid][xPosao] == POSAO_DRVOSECA && PosaoDrvoseca[playerid] != 0 && UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok radite posao - DRVOSECA.");
if(WARPInfo[playerid][WARIgrac] != -1) return SendErrorMessage(playerid, "Ne mozes ovo dok si u waru.");
if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes ovo dok si na dmu.");
if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes ovo dok si u zatvoru.");
if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes dok si u vozilu.");
if(PlayerInfo[playerid][xRanac] != 1) return SendErrorMessage(playerid, "Nemate ranac na sebi, kupite ga u rodi.");

OpenInventory(playerid);
return true;}


CMD:invhelp(playerid, params[]) {
SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");
SCM(playerid, -1, ""col_server"INV HELP | "col_white"/inv /ubaciuinv");
SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");
return true;}

CMD:exitduel(playerid, params[]) {
if(PozvanDuel[playerid] == 1)
{
	new id = PozvaoGa[playerid]; 
	ac_SetPlayerPos(id, 1466.3201, 1416.2100, -5.0676);
	TogglePlayerControllable(id, false);
	SetPlayerFacingAngle(id, 360.000);
	SetCameraBehindPlayer(id);
	ac_SetPlayerInterior(id, 1);
	SetPlayerVirtualWorld(id, 1);
	ResetAllWeapons(id);
	Fusion_SetPlayerHealth(id, 70);
	Fusion_SetPlayerArmour(id, 0);
	GameTextForPlayer(id, "Ucitavanje ...", 2000, 4);
	SetTimerEx("SlobodnoSada", 2000, false, "i", id);
	PozvanDuel[id] = 0;
	DuelCount[id] = 0;
	DuelHP[id] = 0;
	DuelArmor[id] = 0;
	DuelOruzje[id] = 0;  
		PozvaoGa[id] = -1;

	ac_SetPlayerPos(playerid, 1466.3201, 1416.2100, -5.0676);
	TogglePlayerControllable(playerid, false);
	SetPlayerFacingAngle(playerid, 360.000);
	SetCameraBehindPlayer(playerid);
	ac_SetPlayerInterior(playerid, 1);
	SetPlayerVirtualWorld(playerid, 1);
	ResetAllWeapons(playerid);
	Fusion_SetPlayerHealth(playerid, 70);
	Fusion_SetPlayerArmour(playerid, 0);
	GameTextForPlayer(playerid, "Ucitavanje ...", 2000, 4);
	SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
	PozvanDuel[playerid] = 0;
	DuelCount[playerid] = 0;
	DuelHP[playerid] = 0;
	DuelArmor[playerid] = 0;
	DuelOruzje[playerid] = 0; 
	PozvaoGa[playerid] = -1;

	SendInfoMessage(playerid, "Napustili ste duel.");
	SendInfoMessage(id, "Igrac sa kojim ste bili u duelu je napustio.");}
else return SendErrorMessage(playerid, "Morate biti u duelu sa nekim.");
return 1;}
CMD:ubaciuinv(playerid, params[]) {
new broj;
if(TreniranjeProvera[playerid] == 1) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok ste u streljani.");
if(PlayerInfo[playerid][xPosao] == POSAO_DRVOSECA && PosaoDrvoseca[playerid] != 0 && UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Trenutno ne mozete koristiti ovu komandu jer radite posao.");
if(PlayerInfo[playerid][xRanac] != 1) return SendErrorMessage(playerid, "Nemate ranac na sebi, kupite u rodi.");
if(NaDustu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok ste u igraonici.");
if(NaInferno[playerid] == true) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok ste u igraonici.");
if(NaAssault[playerid] == true) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok ste u igraonici.");
if(NaSnow[playerid] == true) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok ste u igraonici.");
if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete ovo dok ste u DM zoni.");
if(PozvanDuel[playerid] == 1) return SendErrorMessage(playerid, "Ne mozete ovo dok ste na duelu.");
if(sscanf(params, "d", broj)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/ubaciuinv [broj predmeta]");
	SCM(playerid, BELA, "[Broj predmeta]: 1. Laptop 2. Dinamit 3. Oruzje 4. Kanticu");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(broj == 1) {

		if(!LaptopRuke[playerid]) return SendErrorMessage(playerid, "Nemate laptop u rukama.");
		new id;

		id = Inventory_Add(playerid, "Laptop", 19893);

		if(id != -1) {
			SendInfoMessage(playerid, "Stavio si laptop u inventory.");
			LaptopRuke[playerid] = false;
			if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
		}
		else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");

}
else if(broj == 2) {

		if(!Dinamit[playerid]) return SendErrorMessage(playerid, "Nemate dinamit u rukama.");
		new id;

		id = Inventory_Add(playerid, "Dinamit", 1654);

		if(id != -1) {
			SendInfoMessage(playerid, "Stavio si dinamit u inventory.");
			Dinamit[playerid] = false;
			if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
		}
		else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");

}
else if(broj == 3) {

		if(PlayerInfo[playerid][xSpawned] == 0) return 1;

		new Float:H; GetPlayerHealth(playerid, H);
		if(H < 10.0) return SendErrorMessage(playerid, "Ne mozete ubaciti oruzje, ako imate manje od 10HP.");

		if(GetFactionType(playerid) == ORG_TIP_PD || GetFactionType(playerid) == ORG_TIP_HITM) {
			SendErrorMessage(playerid, "Drzavne organizacije nemaju razlog ubacivati oruzja!");
			return 1;
		}
		if(WARPInfo[playerid][WARIgrac] != -1) return SendErrorMessage(playerid, "Ne mozes ovo dok si u waru.");
		if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete ostaviti oruzje, imate zabranu - /disarmtime.");
		if(NaDustu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok ste u igraonici.");
		if(NaInferno[playerid] == true) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok ste u igraonici.");
		if(NaAssault[playerid] == true) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok ste u igraonici.");
		if(NaSnow[playerid] == true) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok ste u igraonici.");
		if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes ovo dok si u DM zoni.");
		if(PozvanDuel[playerid] == 1) return SendErrorMessage(playerid, "Ne mozete ovo dok ste na duelu.");
		if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes dok si u vozilu.");
		if(OruzjeUInventoriju[playerid] >= 6) return SendErrorMessage(playerid, "Mozes imati samo 6 oruzja u inventoriju.");
		if(ForbiddenWeap(playerid)) return SendErrorMessage(playerid, "Ne mozete ubaciti zabranjena oruzja u inventory.");

		new gunid = GetWeapon(playerid);
		new gunammo = GetPlayerAmmo(playerid);

		if(gunid >= 35 && gunid <= 40) {
			SendErrorMessage(playerid, "Ne mozes u inventory ubaciti %s.", WeaponInfos[gunid][wName]);
			return 1;
		}

		if(gunid < 1) {
			SendErrorMessage(playerid, "Nemas oruzje u ruci koje bi ubacio.");
			return 1;
		}

		if(gunammo > 10000) {
			SendErrorMessage(playerid, "Ne mozete ubaciti vise od 10000 metkova u inv.");
			return 1;
		}

		new id = Inventory_Add(playerid, WeaponInfos[gunid][wName], WeaponInfos[gunid][wModel], GetPlayerAmmo(playerid));

		if(id == -1)
			return SendErrorMessage(playerid, "Nemas mesta vise u inventoriju.");

		OruzjeUInventoriju[playerid]++;

		new varstring[90];
		format(varstring, sizeof(varstring), "* %s ubacuje %s u inventory.", ImeIgraca(playerid), WeapNames[GetWeapon(playerid)]);
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);

		RemovePlayerWeapon(playerid, GetWeapon(playerid));

		SendInfoMessage(playerid, "Uspesno ste spremili u inventory %s.", WeaponInfos[gunid][wName]);}
else if(broj == 4) {

		if(!ImaKanticu[playerid]) return SendErrorMessage(playerid, "Nemate kanticu u rukama.");
		new id;

		id = Inventory_Add(playerid, "Kantica", 1650);

		if(id != -1) {
			SendInfoMessage(playerid, "Stavio si kanticu u inventory.");
			ImaKanticu[playerid] = false;
			if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
		}
		else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");

}
else return SendErrorMessage(playerid, "Pogresan broj.");
return true;}

CMD:givegun(playerid, params[]) {
new playa, gun, ammo;
if(PlayerInfo[playerid][xAdmin] >= 6) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	if(IsPlayerConnected(playa)) {
		if(sscanf(params, "uii", playa, gun, ammo)) {
			SendUsageMessage(playerid, "/givegun [ID/Deo imena] [weaponid(eg. 46 = Parachute)] [ammo]");
			SCM(playerid, 0xAFAFAFAA, "1(Brass Knuckles) 2(Golf Club) 3(Nite Stick) 4(Knife) 5(Baseball Bat) 6(Shovel) 7(Pool Cue) 10-13(Dildo) 14(Flowers) 15(Cane) 22(Pistol) 23(Silence Pistol)");
			SCM(playerid, 0xAFAFAFAA, "24(Desert Eagle) 25(Shot Gun) 29(MP5) 30(AK47) 31(M4) 33(Country Rifle) 34(Sniper Rifle) 41(Spray Can) 42(Fire Extinguisher) 43(Camera) 46(Parachute)");
			return 1;
		}
		if(gun < 1 || gun > 46)
		{ SendErrorMessage(playerid, "Taj Weapon ID ne postoji."); return 1; }
		if(ammo <1 || ammo > 999)
		{ SendErrorMessage(playerid, "Ne mozete dati manje od 1 i vise od 999 metaka."); return 1; }
		if(playa != INVALID_PLAYER_ID) {
			if(PlayerInfo[playa][xLevel] < 3) {
				SendErrorMessage(playerid, "Taj igrac nije Level 3.");
				return 1;
			}
			if(PlayerInfo[playa][xDisarm] != 0) return SendErrorMessage(playerid, "Taj igrac ima zabranu koriscenja oruzja.");
			GiveWeaponToPlayer(playa, gun, ammo);
			SendInfoMessage(playa, "Admin %s ti je dao oruzje %s.", ImeIgraca(playerid), WeaponInfos[gun][wName]);
			SendInfoMessage(playerid, "Dao si oruzje %s igracu %s.", WeaponInfos[gun][wName], ImeIgraca(playa));
		}
	}
} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:promeniadminkod(playerid, params[]) {
new igrac, novikod;
if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
if(sscanf(params, "ui", igrac, novikod)) return SendUsageMessage(playerid, "/promeniadminkod [ID/Deo Imena] [novi kod(Brojevi)] ");
if(igrac == IPI) return SendErrorMessage(playerid, "Pogresan ID");
if(novikod == 0) return SendErrorMessage(playerid, "Novi kod ne moze biti 0!");
PlayerInfo[igrac][xAKod] = novikod; SavePlayer(igrac);
SendClientMessageEx(igrac, FUSIONGAMING, "Vas novi admin kod je "col_white"%d || ZAPISITE GA!", novikod);
SendClientMessageEx(playerid, FUSIONGAMING, "Promenili ste igracu %s kod na "col_white"%d", ImeIgraca(igrac), novikod);
return 1;}

CMD:aduty(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
//if(PlayerInfo[playerid][xAdmin] > 7) return SendErrorMessage(playerid, "Admini 7+ ne trebaju na duty.");
if(PlayerInfo[playerid][xAKod] == 0) return SendErrorMessage(playerid, "Trazite od vlasnika da vam postavi kod!");
if(AdminAfk[playerid] == true) return SendErrorMessage(playerid, "Ukljucen vam je AFK rezim - /afk.");
if(AdminDuty[playerid]) return SendErrorMessage(playerid, "Vec si na duznosti!");
new kod;
if(sscanf(params, "i", kod)) return SendUsageMessage(playerid, "/aduty [kod] ");
if(PlayerInfo[playerid][xAKod] == kod) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 8) {
		Fusion_SetPlayerHealth(playerid, 100);
		Fusion_SetPlayerArmour(playerid, 99);
		SetPlayerSkin(playerid, 294);
		if(PlayerInfo[playerid][xAdmin] < 5 && PlayerInfo[playerid][xPol] == 1) {
			c_SetPlayerSkin(playerid, 294);
		}
		SendInfoMessage(playerid, "Sada si AFG na duznosti.");
		SetPlayerColor(playerid, FUSIONGAMING);
		AdminDuty[playerid] = true;
		if(PlayerInfo[playerid][xAdmin] < 8) {
			new varstring[70];
			format(varstring, sizeof(varstring), "AFG %s "col_white"je na duznosti.", ImeIgraca(playerid));
			AdminPoruka(FUSIONGAMING, varstring);
		}
	}
}
else return SendErrorMessage(playerid, "Niste uneli ispravan kod!");
return true;}

CMD:afk(playerid, params[]) {
if(AdminDuty[playerid]) return SendErrorMessage(playerid, "Skinite duznost pre nego sto odete AFK!");
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 1)
	{
	new afkstring[84];
	if(AdminAfk[playerid] == false)
	{
		format(afkstring, sizeof(afkstring), ""col_orange" AFK | "col_white"Staff %s je sada {A6A6A6]AFK.", ImeIgraca(playerid));
		AdminAfk[playerid] = true;
		SCMA(-1, afkstring);
	}
	else
	{
		format(afkstring, sizeof(afkstring), ""col_orange" AFK | "col_white"Staff %s vise nije {A6A6A6]AFK.", ImeIgraca(playerid));
		AdminAfk[playerid] = false;
		SCMA(-1, afkstring);
	}
	}
return true;}

CMD:dajkljuckapije(playerid, params[]) {

if(NearestGate(playerid) == -1) return SendErrorMessage(playerid, "Niste blizu nijedne kapije.");

if(strcmp(ImeIgraca(playerid), GateData[NearestGate(playerid)][gateOwner], true) == 0) {

	new ID;
	if(sscanf(params, "u", ID)) return SendUsageMessage(playerid, "/dajkljuckapije [ID/Deo imena]");

	strmid(PlayerInfo[ID][xKljucKapije], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), MAX_PLAYER_NAME);
	SavePlayer(ID);

	SendInfoMessage(playerid, "Dali ste kljuc kapije %s.", ImeIgraca(ID));
	SendInfoMessage(ID, "%s vam je dao kljuc svoje kapije.", ImeIgraca(playerid));

}
else return SendErrorMessage(playerid, "Ovo nije vasa kapija.");
return true;}

CMD:hduty(playerid, params[]) {
if(PlayerInfo[playerid][xHelper] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(AdminAfk[playerid] == true) return SendErrorMessage(playerid, "Ukljucen vam je AFK rezim - /afk.");
if(!AdminDuty[playerid]  && PlayerInfo[playerid] [xAdmin] < 6) {
	SetPlayerColor(playerid, Helper);
	Fusion_SetPlayerHealth(playerid, 100);
	Fusion_SetPlayerArmour(playerid, 99);
	SetPlayerSkin(playerid, 188);
	if(PlayerInfo[playerid][xPol] == 2) c_SetPlayerSkin(playerid, 214);
	SendInfoMessage(playerid, "Sada si helper na duznosti.");
	AdminDuty[playerid] = true;
	new varstring[70];
	format(varstring, sizeof(varstring), "Helper %s "col_white"je sada na duznosti.", ImeIgraca(playerid));
	RPTChat(Helper, varstring);}
else return SendErrorMessage(playerid, "Vec si na duznosti - /hoff da skinete.");
return true;}

CMD:aoff(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	//if(PlayerInfo[playerid][xAdmin] > 6) return SendErrorMessage(playerid, "Admini 6+ ne trebaju na duty.");
if(AdminDuty[playerid]) {
	Fusion_SetPlayerHealth(playerid, 40);
	Fusion_SetPlayerArmour(playerid, 0);
	c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
	SCM(playerid, CRVENA, "Vise nisi AFG na duznosti.");
	if(PlayerInfo[playerid][xAdmin] < 8) {
		new varstring[80];
		format(varstring, sizeof(varstring), "AFG %s "col_white"vise nije na duznosti.", ImeIgraca(playerid));
		AdminPoruka(FUSIONGAMING, varstring);
		SetPlayerColor(playerid, 0xFFFFFFFF);
		}
	AdminDuty[playerid] = false;}
else return SendErrorMessage(playerid, "Nisi AFG na duznosti.");
return true;}

CMD:hoff(playerid, params[]) {
if(PlayerInfo[playerid][xHelper] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(AdminDuty[playerid]) {
	SetPlayerColor(playerid, 0xFFFFFF00);
	Fusion_SetPlayerHealth(playerid, 40);
	Fusion_SetPlayerArmour(playerid, 0);
	c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
	SCM(playerid, CRVENA, "Vise nisi helper na duznosti.");
	AdminDuty[playerid] = false;
	new sati = PlayerInfo[playerid][xHDutyTime]/60;
	new varstring[120];
	format(varstring, sizeof(varstring), "Helper %s "col_white"vise nije na duznosti. Ukupno vreme na duznosti: %dh:%dmin.", ImeIgraca(playerid), sati, PlayerInfo[playerid][xHDutyTimeMin]);
	RPTChat(Helper, varstring);}
else return SendErrorMessage(playerid, "Nisi helper na duznosti.");
return true;}


CMD:ao(playerid, params[], help) {
	if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
new aotext[128], string1[234];
if(sscanf(params, "s[128]", aotext)) return SendUsageMessage(playerid, "/ao [tekst]");

if(PlayerInfo[playerid][xSkriptaRank] == 1) {
	format(string1, sizeof(string1), ""col_crvena"(( DEVELOPER %s: "col_white"%s "col_crvena"))", ImeIgraca(playerid), aotext);}
else if(PlayerInfo[playerid][xSkriptaRank] == 2) {
	format(string1, sizeof(string1), ""col_crvena"(( Z.HEAD AFG %s: "col_white"%s "col_crvena"))", ImeIgraca(playerid), aotext);}
else if(PlayerInfo[playerid][xSkriptaRank] == 3) {
	format(string1, sizeof(string1), ""col_crvena"(( MAPPING TEAM %s: "col_white"%s "col_crvena"))", ImeIgraca(playerid), aotext);}
else if(PlayerInfo[playerid][xSkriptaRank] == 6) {
	format(string1, sizeof(string1), ""col_crvena"(( DEVELOPER/MAPPER %s: "col_white"%s "col_crvena"))", ImeIgraca(playerid), aotext);}
else if(PlayerInfo[playerid][xAdmin] == 7) {
	format(string1, sizeof(string1), ""col_crvena"(( VLASNIK %s: "col_white"%s "col_crvena"))", ImeIgraca(playerid), aotext);}
else if(PlayerInfo[playerid][xAdmin] == 6) {
	format(string1, sizeof(string1), ""col_crvena"(( DIREKTOR %s: "col_white"%s "col_crvena"))", ImeIgraca(playerid), aotext);}
else if(PlayerInfo[playerid][xAdmin] == 5) {
	format(string1, sizeof(string1), ""col_crvena"(( HEAD AFG %s: "col_white"%s "col_crvena"))", ImeIgraca(playerid), aotext);}
else {
	format(string1, sizeof(string1), ""col_crvena"(( AFG %s: "col_white"%s "col_crvena"))", ImeIgraca(playerid), aotext);}


SCMA(-1, string1);
new string[128];
format(string, sizeof(string), "Admin %s: %s", ImeIgraca(playerid), aotext);
LogSave("Ostalo/LogOChat.log", string);

string[0] = (EOS);

return 1;}

CMD:ho(playerid, params[], help) {
	if(PlayerInfo[playerid][xHelper] < 3) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new aotext[128], string1[144];
if(sscanf(params, "s[128]", aotext)) return SendUsageMessage(playerid, "/ho [tekst]");

if(PlayerInfo[playerid][xHelper] == 3) {
	format(string1, sizeof(string1), "(( HELPER-HEAD %s: %s ))", ImeIgraca(playerid), aotext);}
else if(PlayerInfo[playerid][xHelper] >= 1 && PlayerInfo[playerid][xHelper] <= 2) {
	format(string1, sizeof(string1), "(( Helper %s: %s ))", ImeIgraca(playerid), aotext);}
SCMA(Helper, string1);

new string[128];
format(string, sizeof(string), "Helper %s: %s", ImeIgraca(playerid), aotext);
LogSave("Ostalo/LogHOChat.log", string);

aotext[0] = (EOS);
string1[0] = (EOS);

return 1;}

CMD:a(playerid, params[]) {

if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
new text[128], string1[180];
if(sscanf(params, "s[128]", text)) return SendUsageMessage(playerid, "/a [tekst]");
if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");

if(PlayerInfo[playerid][xSkriptaRank] == 1) {
	format(string1, sizeof(string1), "DEVELOPER %s: "col_white"%s", ImeIgraca(playerid), text);}
else if(PlayerInfo[playerid][xSkriptaRank] == 2) {
	format(string1, sizeof(string1), "Z.HEAD AFG %s: "col_white"%s", ImeIgraca(playerid), text);}
else if(PlayerInfo[playerid][xSkriptaRank] == 3) {
	format(string1, sizeof(string1), "MAPPING TEAM %s: "col_white"%s", ImeIgraca(playerid), text);}
else if(PlayerInfo[playerid][xSkriptaRank] == 6) {
	format(string1, sizeof(string1), "DEVELOPER/MAPPER %s: "col_white"%s", ImeIgraca(playerid), text);}
else if(PlayerInfo[playerid][xAdmin] == 7) {
	format(string1, sizeof(string1), "Vlasnik %s: "col_white"%s", ImeIgraca(playerid), text);}
else if(PlayerInfo[playerid][xAdmin] == 6) {
	format(string1, sizeof(string1), "Direktor %s: "col_white"%s", ImeIgraca(playerid), text);}
else if(PlayerInfo[playerid][xAdmin] == 5) {
	format(string1, sizeof(string1), "Head AFG %s: "col_white"%s", ImeIgraca(playerid), text);}
else {
	format(string1, sizeof(string1), "AFG-%d %s: "col_white"%s", PlayerInfo[playerid][xAdmin], ImeIgraca(playerid), text);}

AdminPoruka(0x00ccffFF, string1);
new string[128];
format(string, sizeof(string), "AFG %s: %s", ImeIgraca(playerid), text);
LogSave("Ostalo/LogAdminChat.log", string);
return true;}
CMD:lc(playerid, params[]) {
if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si u jailu.");
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
new text[128], string1[200];
if(sscanf(params, "s[128]", text)) return SendUsageMessage(playerid, "/lc [tekst]");
if(PlayerInfo[playerid][xLider] >= 1 || PlayerInfo[playerid][xAdmin] >= 1) {

	if(PlayerInfo[playerid][xLider] >= 1) {
		format(string1, sizeof(string1), "{4f1333]%s Lider %s: "col_white"%s", getOrgName(PlayerInfo[playerid][xClan]), ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xAdmin] == 7) {
		format(string1, sizeof(string1), "{4f1333]Vlasnik %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xAdmin] == 6) {
		format(string1, sizeof(string1), "{4f1333]Direktor %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xAdmin] == 5) {
		format(string1, sizeof(string1), "{4f1333]Head AFG %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xAdmin] >= 1 && PlayerInfo[playerid][xAdmin] <= 4) {
		format(string1, sizeof(string1), "{4f1333]AFG %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	LiderPoruka(-1, string1);
	new string[128];
	format(string, sizeof(string), "Lider/Admin %s: %s", ImeIgraca(playerid), text);
	LogSave("Ostalo/LogLEADERChat.log", string);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}
CMD:hc(playerid, params[]) {
if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si u jailu.");
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
new text[128], string1[180];
if(sscanf(params, "s[128]", text)) return SendUsageMessage(playerid, "/hc [tekst]");
if(PlayerInfo[playerid][xHelper] >= 1 || PlayerInfo[playerid][xAdmin] >= 1) {

	if(PlayerInfo[playerid][xSkriptaRank] == 1) {
		format(string1, sizeof(string1), "DEVELOPER %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xSkriptaRank] == 2) {
		format(string1, sizeof(string1), "Z.HEAD AFG %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xSkriptaRank] == 3) {
		format(string1, sizeof(string1), "MAPPING TEAM %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xSkriptaRank] == 6) {
		format(string1, sizeof(string1), "DEVELOPER/MAPPER %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xAdmin] == 7) {
		format(string1, sizeof(string1), "Vlasnik %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xAdmin] == 6) {
		format(string1, sizeof(string1), "Direktor %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xAdmin] == 5) {
		format(string1, sizeof(string1), "Head Admin %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xAdmin] >= 1 && PlayerInfo[playerid][xAdmin] <= 4) {
		format(string1, sizeof(string1), "Admin %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xHelper] == 3) {
		format(string1, sizeof(string1), "H-HEAD %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xHelper] >= 1 && PlayerInfo[playerid][xHelper] <= 2) {
		format(string1, sizeof(string1), "Helper %d: %s: "col_white"%s", PlayerInfo[playerid][xHelper], ImeIgraca(playerid), text);
	}
	RPTChat(Helper, string1);
	new string[128];
	format(string, sizeof(string), "Admin/Helper %s: %s", ImeIgraca(playerid), text);
	LogSave("Ostalo/LogAGSChat.log", string);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:pc(playerid, params[]) {

if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si u jailu.");
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
new text[128], string1[180];
if(sscanf(params, "s[128]", text)) return SendUsageMessage(playerid, "/pc [tekst]");
if(PlayerInfo[playerid][xPromoter] >= 1 || PlayerInfo[playerid][xAdmin] >= 1) {

	if(PlayerInfo[playerid][xSkriptaRank] == 1) {
		format(string1, sizeof(string1), "DEVELOPER %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xSkriptaRank] == 2) {
		format(string1, sizeof(string1), "Z.HEAD AFG %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xSkriptaRank] == 3) {
		format(string1, sizeof(string1), "MAPPING TEAM %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xSkriptaRank] == 6) {
		format(string1, sizeof(string1), "DEVELOPER/MAPPER %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xAdmin] == 7) {
		format(string1, sizeof(string1), "Vlasnik %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xAdmin] == 6) {
		format(string1, sizeof(string1), "Direktor %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xAdmin] == 5) {
		format(string1, sizeof(string1), "Head AFG %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xAdmin] >= 1 && PlayerInfo[playerid][xAdmin] <= 4) {
		format(string1, sizeof(string1), "AFG %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xPromoter] >= 1) {
		format(string1, sizeof(string1), "Promoter %s: "col_white"%s", ImeIgraca(playerid), text);
	}

	PromoteriAdminChat(0xe28e3bFF, string1);

	new string[128];
	format(string, sizeof(string), "Admin/Promoter %s: %s", ImeIgraca(playerid), text);
	LogSave("Ostalo/LogPROMIADMChat.log", string);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:g(playerid, params[]) {
if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes da koristis ovu komandu dok si u zatvoru.");
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
new text[128], string1[180];
if(sscanf(params, "s[128]", text)) return SendUsageMessage(playerid, "/g [tekst]");
if(ToggedG == false) return SendErrorMessage(playerid, "G chat je trenutno iskljucen od strane Admina.");
if(PlayerInfo[playerid][xHelper] >= 1 || PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xVIPLevel] >= 1 || PlayerInfo[playerid][xYouTuber] == 1) {

	if(PlayerInfo[playerid][xSkriptaRank] == 1) {
		format(string1, sizeof(string1), "DEVELOPER %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xSkriptaRank] == 2) {
		format(string1, sizeof(string1), "Z.HEAD AFG %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xSkriptaRank] == 3) {
		format(string1, sizeof(string1), "MAPPING TEAM %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xAdmin] == 7) {
		format(string1, sizeof(string1), "Vlasnik %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xSkriptaRank] == 6) {
		format(string1, sizeof(string1), "DEVELOPER/MAPPER %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xAdmin] == 6) {
		format(string1, sizeof(string1), "Direktor %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xAdmin] == 5) {
		format(string1, sizeof(string1), "Head AFG %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xAdmin] >= 1 && PlayerInfo[playerid][xAdmin] <= 4) {
		format(string1, sizeof(string1), "AFG %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xHelper] == 3) {
		format(string1, sizeof(string1), "H-HEAD %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xHelper] >= 1 && PlayerInfo[playerid][xHelper] <= 2) {
		format(string1, sizeof(string1), "Helper %d : %s: "col_white"%s", PlayerInfo[playerid][xHelper], ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xVIPLevel] >= 1) {
		format(string1, sizeof(string1), "VIP LEVEL %d %s: "col_white"%s", PlayerInfo[playerid][xVIPLevel], ImeIgraca(playerid), text);
	}
	else if(PlayerInfo[playerid][xYouTuber] >= 1) {
		format(string1, sizeof(string1), "YouTuber %s: "col_white"%s", ImeIgraca(playerid), text);
	}
	PROMChat(0x289E00FF, string1); //bilo 40FF00
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:admini(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
SPD(playerid,dialog_ADMINI,DSL,D_NASLOV,"Lista online admina\nLista svih admina",D_ODABERI,D_ODUSTANI);
return true;}
CMD:vips(playerid, params[]) {
new string[128];
if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new DialogStrgEx[545];
foreach(new i : Player) {
	if(PlayerInfo[i][xVIPLevel] >= 1 && PlayerInfo[i][xVIPLevel] <= 5) {
		format(string, sizeof(string), ""col_server"VIP LVL %d | %s [%d]\n", PlayerInfo[i][xVIPLevel], ImeIgraca(i), i);
		strcat(DialogStrgEx, string);
	}
}
SPD(playerid, dialog_EMPTY, DSMSG, ""col_server"Vipovi online", DialogStrgEx, "Ok", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
return 1;}

CMD:youtubers(playerid, params[]) {
new string[128];
if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new DialogStrgEx[545];
foreach(new i : Player) {
	if(PlayerInfo[i][xYouTuber] == 1) {
		format(string, sizeof(string), "{b042f4]YouTuber | %s [%d]\n", ImeIgraca(i), i);
		strcat(DialogStrgEx, string);
	}
}
SPD(playerid, dialog_EMPTY, DSMSG, ""col_server"YouTubers online", DialogStrgEx, "Ok", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
return 1;}

CMD:promoteri(playerid, params[]) {
new string[128];
if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new DialogStrgEx[645];
foreach(new i : Player) {
	if(PlayerInfo[i][xPromoter] >= 1) {
		format(string, sizeof(string), ""col_server"Promoter | %s [%d]\n", ImeIgraca(i), i);
		strcat(DialogStrgEx, string);
	}
}
SPD(playerid, dialog_EMPTY, DSMSG, ""col_server"Promoteri online", DialogStrgEx, "Ok", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
return 1;}

CMD:helperi(playerid, params[]) {
if(PlayerInfo[playerid][xHelper] >= 1 || PlayerInfo[playerid][xAdmin] >= 1) {
	SPD(playerid,dialog_HELPERI,DSL,D_NASLOV,"Lista online helpera\nLista svih helpera",D_ODABERI,D_ODUSTANI);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:lideri(playerid, params[]) {
new string[256];
new DialogStrgEx[1024];
foreach(new i : Player) {

	if(PlayerInfo[i][xLider] >= 1 && !OI[PlayerInfo[playerid][xLider]][oSuspended]) {

		format(string, sizeof(string), ""col_white"[ID %d] "col_server"%s"col_white" | "col_server"Organizacija: "col_white"%s\n", i, ImeIgraca(i), OI[PlayerInfo[i][xLider]][oName]);
		strcat(DialogStrgEx, string);
	}
}
SPD(playerid, dialog_EMPTY, DSMSG, ""col_server"Lideri online", DialogStrgEx, "Ok", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
return 1;}

CMD:organizacije(playerid, params[]) {
//if(PlayerInfo[playerid][xAdmin] < 5) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new DialogStrgEx[565];
for(new i = 1; i < MAX_ORG; i++) {

	new oFile[40];
	format(oFile, sizeof(oFile), O_FILE, i);
	if(fexist(oFile)) {

		if(!OI[i][oSuspended]) {
			new varstring[60];
			format(varstring, sizeof(varstring), ""col_white"[ID %d]: "col_server"%s\n", OI[i][oID], OI[i][oName]);
			strcat(DialogStrgEx, varstring);
		}
	}
}
SPD(playerid, dialog_EMPTY, DSMSG, ""col_server"Spisak organizacija", DialogStrgEx, "U redu", "");
strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
return 1;}


CMD:1(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new text[128], string1[180];
if(sscanf(params, "s[128]", text)) return SendUsageMessage(playerid, "/1 [tekst]");
foreach(new i : Player) {
	if(PlayerInfo[i][xAdmin] == 7) {
		format(string1, sizeof(string1), "[OWNER-CHAT] %s: "col_white"%s", ImeIgraca(playerid), text);
		SCM(i, 0xFF6347AA, string1);
	}
}
new string[128];
format(string, sizeof(string), "Vlasnik %s: %s", ImeIgraca(playerid), text);
LogSave("Ostalo/LogHeadChat.log", string);
return true;}

CMD:owneri(playerid, params[]) {
new string[128];
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new DialogStrgEx[128];
foreach(new i : Player) {
	if(PlayerInfo[i][xAdmin] == 7) {
		format(string, sizeof(string), ""col_crvena"VLASNIK | %s [%d]\n", ImeIgraca(i), i);
		strcat(DialogStrgEx, string);
	}
}

SPD(playerid, dialog_EMPTY, DSMSG, ""col_server"Owneri online", DialogStrgEx, "Ok", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
return 1;}

CMD:vremenskiban(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 5) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id, time, razlog[40], banfile[80];
	if(sscanf(params,"uis[40]", id, time, razlog)) return SendUsageMessage(playerid, "/vremenskiban [ID/Deo Imena] [Broj dana] [Razlog]");
	if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");
	if(PlayerInfo[playerid][xAdmin] < 6 && PlayerInfo[id][xAdmin] >= 6) return SendErrorMessage(playerid, "Ne mozete banovati vlasnike i direktore!");
	format(banfile, sizeof(banfile), FILE_BAN, ImeIgraca(id));
	if(fexist(banfile)) return SendErrorMessage(playerid, "Igrac je vec banovan permanentno!");
	if(time > 25 || time < 0) return SendErrorMessage(playerid, "Ne mozes preko 25 ili ispod 0 dana.");

	new day, year, month;
	getdate(year, month, day);

	if(day+time > 30) {
		if(month+1 > 12) {
			PlayerInfo[id][xBDays] = (day+time)-30;
			PlayerInfo[id][xBMonths] = (month+1)-12;
			PlayerInfo[id][xBYears] = year+1;
		}
		else if(month+1 <= 12) {
			PlayerInfo[id][xBDays] = (day+time)-30;
			PlayerInfo[id][xBMonths] = month+1;
			PlayerInfo[id][xBYears] = year;
		}
	}
	else if(day+time <= 30) {
		PlayerInfo[id][xBDays] = day+time;
		PlayerInfo[id][xBMonths] = month;
		PlayerInfo[id][xBYears] = year;
	}

	SavePlayer(id);

	new varstring[145];
	format(varstring, sizeof(varstring), "BAN | %s je dobio ban od Admina %s, razlog: %s, datum unbana: %d/%d/%d", ImeIgraca(id), ImeIgraca(playerid), razlog, day+time, month, year);
	AdminPoruka(0x990000FF, varstring);

	AI[playerid][aTBan]++;
	SacuvajAdmina(playerid);
	ServerInfo[BanovanihKorisnika]++;

	SCM(id, CRVENA, "________________________BAN___________________________________");
	SendClientMessageEx(id, BELA, ""col_white"Dobio si privremeni ban od Admina "col_server"%s"col_white".", ImeIgraca(playerid));
	SendClientMessageEx(id, BELA, ""col_white"Razlog bana "col_server"%s"col_white".", razlog);
	SendClientMessageEx(id, BELA, ""col_white"Datum unbana: "col_server"%d.%d.%d"col_white".", day+time, month, year);
	SCM(id, BELA, ""col_white"Ukoliko mislis da je ovo greska "col_server"slikaj "col_white"i postavi na "col_server"forum.");
	SCM(id, BELA, ""col_white"Forum "col_server"www.fg-rpg.com");
	SCM(id, CRVENA, "______________________________________________________________");

	Kickovanje(id, ""col_white"Ti si banovan sa servera. Unban zatrazi na forumu: www.fg-rpg.com");}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:ban(playerid, params[]) {
if(PlayerInfo[playerid][xTestAFG] == 1) return SendErrorMessage(playerid, "Vi ste Test AFG i nemate pristup ovoj komandi");
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xSkriptaRank] == 2) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id, razlog[40], banfile[80];
	if(sscanf(params,"us[40]", id, razlog)) return SendUsageMessage(playerid, "/ban [ID/Deo Imena] [Razlog]");
	if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");
	if(PlayerInfo[playerid][xAdmin] < 5 && PlayerInfo[id][xAdmin] > 1) return SendErrorMessage(playerid, "Ne mozete banovati druge clanove AFG tima!");
	format(banfile, sizeof(banfile), FILE_BAN, ImeIgraca(id));
	if(fexist(banfile)) return SendErrorMessage(playerid, "Igrac je vec banovan!");

	new varstring[120];
	format(varstring, sizeof(varstring), "BAN | %s je dobio ban od Admina %s, razlog: %s", ImeIgraca(id), ImeIgraca(playerid), razlog);
	AdminPoruka(0x990000FF, varstring);

	AI[playerid][aTBan]++;
	SacuvajAdmina(playerid);

	ServerInfo[BanovanihKorisnika]++;

	new year, month,day;
	getdate(year, month, day);
	new playersip[128];
	GetPlayerIp(id, playersip, sizeof(playersip));
	SendClientMessage(id, 0xFF4500AA, "  ");
		SendClientMessage(id, 0xFF4500AA, "  ");
		SendClientMessage(id, 0xFF4500AA, "  ");
		SendClientMessage(id, 0xFF4500AA, "  ");
		SendClientMessage(id, 0xFF4500AA, "  ");
		SendClientMessage(id, 0xFF4500AA, "  ");
		SendClientMessage(id, ANTICHEAT, "______________________________________________________________________________________");
	SendClientMessage(id, ANTICHEAT, "______________________________________________________________________________________");
	SendClientMessage(id, 0xFF6347AA, "ISKLJUCENI STE SA SERVERA(Banovani)! Pazljivo procitajte tekst!");
	format(varstring, sizeof(varstring), "%s(ID:%d) iskljucen(Banovan) si sa servera od %s", ImeIgraca(id), id, ImeIgraca(playerid));
	SendClientMessage(id, 0xF0F8FFAA, varstring);
	format(varstring, sizeof(varstring), "Razlog iskljucenja: %s", (razlog));
	SendClientMessage(id, 0xF0F8FFAA, varstring);
	format(varstring, sizeof(varstring), "Datum bana: %d-%d-%d | Vasa ip adresa je: %s", month, day, year, playersip);
	SendClientMessage(id, 0xF0F8FFAA, varstring);
		SendClientMessage(id, 0xF0F8FFAA, "Sa ovim banom, vas korisnicki racun je suspendiran na neodredjeno!");
	SendClientMessage(id, ZUTA, "Ukoliko mislis da je doslo do greske slikaj ovo(f8) i zatrazi unban na forumu!");
	format(varstring, sizeof(varstring), "IP Adresa Banovanog igraca: %s. Adresa sa banom nije banovana!", playersip);
	SendClientMessage(playerid, 0xFF6347AA, varstring);
	SendClientMessage(playerid, ZUTA, "Ukoliko zelis banati i ip, pisi /banip [ip koji pise iznad ove poruke]");


	format(varstring, sizeof(varstring), "BAN | Igrac %s je banovan sa servera. Razlog: %s", ImeIgraca(id), razlog);
	SCMA(0x990000FF, varstring);

	new File:ban = fopen(banfile, io_write);
	new var[64];
	format(var, 64, "Admin=%s\n", ImeIgraca(playerid));
	fwrite(ban, var);
	new var1[128];
	format(var1, 128,"Razlog=%s\n", razlog);
	fwrite(ban, var1);
	fclose(ban);

	new string[128];
	format(string, sizeof(string), "Admin %s je banovao igraca %s | Razlog: %s", ImeIgraca(playerid), ImeIgraca(id), razlog);
	LogSave("Ostalo/LogBan.log", string);

	SCM(id, -1, ""col_white"Ti si banovan sa servera. Unban zatrazi na forumu: www.fg-rpg.com");
	Fusion_Kick(id);

}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:offban(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 5) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new imeigraca[40], razlog[40], banfile[80], ifile[64];
	if(sscanf(params, "s[40]s[40]", imeigraca, razlog)) return SendUsageMessage(playerid, "/offban [Ime_Prezime] [Razlog]");
	format(banfile, sizeof(banfile), FILE_BAN, imeigraca);
	if(fexist(banfile)) return SendErrorMessage(playerid, "Igrac je vec banovan!");
	format(ifile, sizeof(ifile), I_FILE, imeigraca);
	if(!fexist(ifile)) return SendErrorMessage(playerid, "Taj igrac ne postoji u bazi podataka!");
	if(IsPlayerConnected(GetPlayerIdFromName(imeigraca))) {
		SendErrorMessage(playerid, "Taj igrac je online tako da banuj ga online.");
		return 1;
	}

	AI[playerid][aTBan]++;
	SacuvajAdmina(playerid);
	ServerInfo[BanovanihKorisnika]++;

	new varstring[128];
	format(varstring, sizeof(varstring), "BAN | %s je offbanovao igraca %s, razlog: %s.", ImeIgraca(playerid), imeigraca, razlog);
	AdminPoruka(0x990000FF, varstring);

	new File:ban = fopen(banfile, io_write);
	new var[64];
	format(var, 64, "Admin=%s\n", ImeIgraca(playerid));
	fwrite(ban, var);
	new var1[128];
	format(var1, 128,"Razlog=%s\n", razlog);
	fwrite(ban, var1);
	fclose(ban);

	new string[128];
	format(string, sizeof(string), "Admin %s je offbanovao igraca %s | Razlog: %s", ImeIgraca(playerid), imeigraca, razlog);
	LogSave("Ostalo/LogOffBan.log", string);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:unban(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 3) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new imeigraca[24], banfile[64];
	if(sscanf(params,"s[40]", imeigraca)) return SendUsageMessage(playerid, "/unban [Ime_Prezime]");
	format(banfile, 64, FILE_BAN, imeigraca);
	if(!fexist(banfile)) return SendErrorMessage(playerid, "Taj igrac nije banovan (Nema ga u bazi)!");

	AI[playerid][aTUnban]++;
	SacuvajAdmina(playerid);
	ServerInfo[BanovanihKorisnika]--;

	new varstring[90];
	format(varstring, sizeof(varstring), "UNBAN | %s je unbanovao igraca %s.", ImeIgraca(playerid), imeigraca);
	AdminPoruka(0x990000FF, varstring);
	format(varstring, sizeof(varstring), "Unbanovali ste igraca %s!", imeigraca);
	SCM(playerid, BELA, varstring);

	fremove(banfile);
	new string[128];
	format(string, sizeof(string), "Admin %s je unbanovao igraca %s", ImeIgraca(playerid), imeigraca);
	LogSave("Ostalo/LogUnban.log", string);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:vremenskiunban(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 6) {

	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

	new imeigraca[24], ifile[64];
	if(sscanf(params,"s[40]", imeigraca)) return SendUsageMessage(playerid, "/vremenskiunban [Ime_Prezime]");
	format(ifile, 64, I_FILE, imeigraca);
	if(!fexist(ifile)) return SendErrorMessage(playerid, "Taj igrac ne postoji u bazi podataka!");

	AI[playerid][aTUnban]++;
	SacuvajAdmina(playerid);
	ServerInfo[BanovanihKorisnika]--;

	new INI:File = INI_Open(ifile);
	INI_SetTag(File, "Informacije");
	INI_WriteInt(File, "BanDays", 0);
	INI_WriteInt(File, "BanMonths", 0);
	INI_WriteInt(File, "BanYear", 0);
	INI_Close(File);

	new varstring[144];
	format(varstring, sizeof(varstring), "UNBAN | %s je unbanovao igraca %s koji je imao vremenski ban.", ImeIgraca(playerid), imeigraca);
	AdminPoruka(0x990000FF, varstring);
	format(varstring, sizeof(varstring), "Unbanovali ste igraca %s koji je imao vremenski ban!", imeigraca);
	SCM(playerid, BELA, varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:warn(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 2) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

	new id, reason[48];
	if(sscanf(params, "us[48]", id, reason)) return SendUsageMessage(playerid, "/warn [ID/Deo imena] [Razlog]");
	if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");
	PlayerInfo[id][xWarn] += 1; SavePlayer(id);
	AI[playerid][aTWarn]++;
	SacuvajAdmina(playerid);

	SendInfoMessage(id, "Admin %s vam je dao warn(%d po redu). Razlog: %s", ImeIgraca(playerid), PlayerInfo[id][xWarn], reason);

	SendInfoMessage(playerid, "Dali ste warn igracu %s. Razlog: %s", ImeIgraca(id), reason);

	new varstring[100];
	format(varstring, sizeof(varstring),"WARN | %s je dao warn igracu %s | Razlog: %s", ImeIgraca(playerid), ImeIgraca(id), reason);
	AdminPoruka(0x990000FF, varstring);

	new string[128];
	format(string, sizeof(string), "Admin %s je dao warn igracu %s | Razlog: %s", ImeIgraca(playerid), ImeIgraca(id), reason);
	LogSave("Ostalo/LogWarn.log", string);

	ServerInfo[BrojWarnova]++;

	if(PlayerInfo[id][xWarn] >= 5) {
		format(varstring, sizeof(varstring), "BAN | %s je dobio ban od Admina %s, razlog: 5 upozorenja.", ImeIgraca(id), ImeIgraca(playerid));
		AdminPoruka(NARACRVENA, varstring);

		new banfile[64];
		format(banfile, 64, FILE_BAN, ImeIgraca(id));
		new File:ban = fopen(banfile, io_write);
		new var[64];
		format(var, 64, "Admin=%s\n", ImeIgraca(playerid));
		fwrite(ban, var);
		new var1[128];
		format(var1, 128,"Razlog=5/5 Warnova\n");
		fwrite(ban, var1);
		fclose(ban);

		ServerInfo[BanovanihKorisnika]++;

		Kickovanje(id, ""col_white"Ti si banovan sa servera. Unban zatrazi na forumu: www.fg-rpg.com");
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:unwarn(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id;
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/unwarn [ID/Deo imena]");
	if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");
	if(PlayerInfo[id][xWarn] <= 0) return SendErrorMessage(playerid, "Igrac nema warnova koje bi skinuli.");

	SendInfoMessage(playerid, "Skinuli ste warn igracu %s | Warn: %d/3!", ImeIgraca(id), PlayerInfo[id][xWarn]);
	SendInfoMessage(id, "Admin %s vam je skinuo warn | Warn: %d/3!", ImeIgraca(playerid), PlayerInfo[id][xWarn]);

	new varstring[90];
	format(varstring , sizeof(varstring),"UNWARN | %s je skinuo warn igracu %s!", ImeIgraca(playerid), ImeIgraca(id));
	AdminPoruka(0x990000FF, varstring);

	AI[playerid][aTUnwarn]++;
	SacuvajAdmina(playerid);
	ServerInfo[BrojWarnova]--;

	PlayerInfo[id][xWarn] -= 1; SavePlayer(id);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:rac(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 3) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	//if(PljackaUToku || ZlataraUToku) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu u toku pljacke!");
	SPD(playerid, dialog_RESETIRAJ, DSL, D_NASLOV, "Privatna vozila\nVozila za poslove\nVozila organizacija i bandi\nRent vozila\nSva prazna vozila\nSve cisterne\nVagon na spawnu", D_ODABERI, D_ODUSTANI);
	}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:respawnmycar(playerid, params[])
{
new slot;
if(!IsPlayerInRangeOfPoint(playerid, 3,1495.2062,-1801.6985,-20.2832)) return SendErrorMessage(playerid, "Niste u opstini!");
if(PlayerInfo[playerid][xNovac] < 15000) return SendErrorMessage(playerid, "Nemate dovoljno novca. Respawn privatnog vozila kosta 15000$.");
if(sscanf(params, "i", slot)) return SendUsageMessage(playerid, "/respawnmycar [slot]");
if(slot < 1 || slot > 4) return SendErrorMessage(playerid, "Slot ne moze biti manji od 1 ili veci od 4.");
new vozilo = slot-1;
SetVehicleToRespawn(PlayerInfo[playerid][xVoziloID][vozilo]);
PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
SendInfoMessage(playerid, "Respawnovali ste svoje vozilo na slotu %d - ID vozila %d", slot, PlayerInfo[playerid][xVoziloID][vozilo]);
DajIgracuNovac(playerid, -15000);
return 1;}
CMD:rtcveh(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

	new car;
	if(sscanf(params, "d", car)) return SendUsageMessage(playerid, "/rtcveh [car id]");

	if(car != INVALID_VEHICLE_ID) {
		new varstring[60];
		format(varstring, sizeof(varstring), "RTC | %s je respawnao vozilo id %d.", ImeIgraca(playerid), car);
		AdminPoruka(NARACRVENA, varstring);
		VehicleObjectCheck(car);
		ac_SetVehicleToRespawn(car);
		ac_LinkVehicleToInterior(car, 0);
		ac_RemovePlayerFromVehicle(playerid);
		SCM(playerid, ZUTA, "** Vozilo respawnano !");
	}
	else return SendErrorMessage(playerid, "Pogresan id vozila.");}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:rtc(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 1) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new car = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid)) {
		new varstring[60];
		format(varstring, sizeof(varstring), "RTC | %s je respawnao vozilo id %d.", ImeIgraca(playerid), car);
		AdminPoruka(NARACRVENA, varstring);
		VehicleObjectCheck(car);
		ac_SetVehicleToRespawn(car);
		ac_LinkVehicleToInterior(car, 0);
		ac_RemovePlayerFromVehicle(playerid);
		SCM(playerid, ZUTA, "* Vozilo respawnano !");
	}
	else return SendErrorMessage(playerid, "Morate biti u vozilu. ");}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:nick(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id;
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/nick [ID/Deo Imena]");
	if(id == IPI) return SendUsageMessage(playerid, "Pogresan ID igraca.");

	SendClientMessage(id, 0x33AA33AA,"__________________________________________________________");
	SendClientMessage(id, ZUTA,"Vase ime nije u RolePlay formatu. Zbog toga ste kikovani sa servera.");
	SendClientMessage(id, ZUTA,"Vase ime se mora sastojati od imena i prezimena u formatu Ime_Prezime (Primer: Vasic_Cappone).");
	SendClientMessage(id, ZUTA,"Vase ime ne sme sadrzati specijalne simbole, brojeve i velika slova (sem pocetnih).");
	SendClientMessage(id, ZUTA,"Udjite ponovo na server sa pravilno formatiranim imenom, Vas FG Staff Team.");
	SendClientMessage(id, 0x33AA33AA,"__________________________________________________________");

	new varstring[128];
	format(varstring, sizeof(varstring), "NICK | %s je kickovan zbog nepravilnog imena od strane %s", ImeIgraca(id), ImeIgraca(playerid));
	AdminPoruka(0x990000FF, varstring);

	format(varstring, sizeof(varstring), ""col_crvena"Kikovani ste zbog nepravilnog imena.", ImeIgraca(playerid));
	Kickovanje(id, varstring);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:ukloniradio(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 4) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

	if(Boombox_Nearest(playerid) == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Niste pored radia.");

	Boombox_Destroy(Boombox_Nearest(playerid));
	SendInfoMessage(playerid, "Sklonili ste radio sa zemlje.");}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

cmd:disarm(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 2) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id, vreme, razlog[40];
	if(sscanf(params, "uds[40]", id, vreme, razlog)) return SendUsageMessage(playerid, "/disarm [ID/Deo Imena] [minuti] [razlog]");
	if(id != INVALID_PLAYER_ID && PlayerLogged[id] != false) {

		if(PlayerInfo[id][xDisarm] != 0) return SendErrorMessage(playerid, "Igrac vec ima zabranu oruzja - /undisarm.");
		if(vreme < 5) return SendErrorMessage(playerid, "Ne mozete ispod 5 minuta.");
		if(vreme > 4320) return SendErrorMessage(playerid, "Ne mozete vise od 72h (4320 minuta).");

		PlayerInfo[id][xDisarm] = vreme*60;
		SavePlayer(id);

		new varstring[175];
		format(varstring, sizeof(varstring), "DISARM | %s je dobio privremenu zabranu koriscenja oruzja od strane %s", ImeIgraca(id), ImeIgraca(playerid));
		SCMA(NARACRVENA, varstring);
		SendInfoMessage(playerid, "Disarmovali ste igraca %s na %d minuta. Razlog: %s.", ImeIgraca(id), vreme, razlog);
		SendInfoMessage(id, "AFG %s vas je disarmovao na %d minuta. Razlog: %s.", ImeIgraca(playerid), vreme, razlog);

		ResetAllWeapons(id);

		format(varstring, sizeof(varstring), ""col_crvena"[DISARM]: "col_white"%s je dobio zabranu koriscenja oruzja na %d minuta, razlog: "col_crvena"%s"col_white".", ImeIgraca(id), vreme, razlog);
		SCMA(-1, varstring);

		new string[128];
		format(string, sizeof(string), "AFG %s je disarmovao igraca %s | Razlog: %s", ImeIgraca(playerid), ImeIgraca(id), razlog);
		LogSave("Ostalo/LogDisarm.log", string);
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:disarmtime(playerid, params[]) {
if(PlayerInfo[playerid][xDisarm] == 0) return SendErrorMessage(playerid, "Nemate zabranu oruzja.");
SendInfoMessage(playerid, "Vasa zabrana oruzja istice za %d minuta.", PlayerInfo[playerid][xDisarm]/60);
return 1;}
CMD:undisarm(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 2) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id;
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/undisarm [ID/Deo Imena]");
	if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID korisnika.");
	if(PlayerInfo[id][xDisarm] == 0) return SendErrorMessage(playerid, "Igrac nema zabranu oruzja.");

	PlayerInfo[id][xDisarm] = 0;
	SavePlayer(id);

	new varstring[90];
	format(varstring, sizeof(varstring), "UNDISARM | %s je undisarmovao igraca %s.", ImeIgraca(playerid), ImeIgraca(id));
	AdminPoruka(NARACRVENA, varstring);

	SendInfoMessage(playerid, "Undisarmovali ste igraca %s.", ImeIgraca(id));
	SendInfoMessage(id, "AFG %s vas je undisarmovao, sada mozete koristiti oruzje.", ImeIgraca(playerid));

}
return 1;}
CMD:mutead(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id, vreme, razlog[40];
	if(sscanf(params, "uds[40]", id, vreme, razlog)) return SendUsageMessage(playerid, "/mutead [ID/Deo Imena] [minuti] [razlog]");
	if(id != INVALID_PLAYER_ID && PlayerLogged[id] != false) {
		if(PlayerInfo[id][xMuteAd] != 0) return SendErrorMessage(playerid, "Igrac vec ima zabranu postavljanja oglasa - /unmutead.");
		if(vreme < 5) return SendErrorMessage(playerid, "Ne mozete ispod 5 minuta.");
		if(vreme > 4320) return SendErrorMessage(playerid, "Ne mozete vise od 72h (4320 minuta).");
		
		PlayerInfo[id][xMuteAd] = vreme*60;
		SavePlayer(id);

		new varstring[165];
		format(varstring, sizeof(varstring), "MUTEAD | %s je dobio privremenu zabranu postavljanja oglasa od strane %s.", ImeIgraca(id), ImeIgraca(playerid));
		SCMA(NARACRVENA, varstring);
		SendInfoMessage(playerid, "Mutirali ste igracu %s oglase na %d minuta. Razlog: %s.", ImeIgraca(id), vreme, razlog);
		SendInfoMessage(id, "AFG %s vam je mutirao postavljanje oglasa na %d minuta. Razlog: %s.", ImeIgraca(playerid), vreme, razlog);

		format(varstring, sizeof(varstring), ""col_crvena"[MUTEAD]: "col_white"%s je dobio zabranu postavljanja oglasa na %d minuta, razlog: "col_crvena"%s"col_white".", ImeIgraca(id), vreme, razlog);
		SCMA(-1, varstring);

		new string[128];
		format(string, sizeof(string), "AFG %s je mutirao oglase igracu %s | Razlog: %s", ImeIgraca(playerid), ImeIgraca(id), razlog);
		LogSave("Ostalo/LogMuteAd.log", string);
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:unmutead(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 2) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id;
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/unmutead [ID/Deo Imena]");
	if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID korisnika.");
	if(PlayerInfo[id][xMuteAd] == 0) return SendErrorMessage(playerid, "Igrac nema zabranu postavljanja oglasa.");

	PlayerInfo[id][xMuteAd] = 0;
	SavePlayer(id);

	new varstring[90];
	format(varstring, sizeof(varstring), "UNMUTEAD | %s je unmutirao oglase igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
	AdminPoruka(NARACRVENA, varstring);

	SendInfoMessage(playerid, "Unmutirali ste oglase igracu %s.", ImeIgraca(id));
	SendInfoMessage(id, "AFG %s vam je unmutirao oglase.", ImeIgraca(playerid));

}
return 1;}
CMD:mute(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new id, vreme, razlog[40];
	if(sscanf(params, "uds[40]", id, vreme, razlog)) return SendUsageMessage(playerid, "/mute [ID/Deo Imena] [minuti] [razlog]");
	if(id != INVALID_PLAYER_ID && PlayerLogged[id] != false) {
		PlayerInfo[id][xMute] = vreme*60;
		SavePlayer(id);

		new varstring[100];
		format(varstring, sizeof(varstring), "MUTE | %s je mutiran od strane %s: %s.", ImeIgraca(id), ImeIgraca(playerid), razlog);
		SCMA(NARACRVENA, varstring);
		SendInfoMessage(playerid, "Mutirali ste igraca na %s minuta %d. Razlog %s.", ImeIgraca(id), vreme, razlog);
		SendInfoMessage(id, "Admin %s vas je mutirao na %d minuta. Razlog: %s!", ImeIgraca(playerid), vreme, razlog);

		new string[128];
		format(string, sizeof(string), "Admin %s je mutirao igraca %s | Razlog: %s", ImeIgraca(playerid), ImeIgraca(id), razlog);
		LogSave("Ostalo/LogMute.log", string);
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:offfine(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 6) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new novac, razlog[60], imeigraca[24], ifile[64];
	if(sscanf(params, "s[24]ds[60]", imeigraca, novac, razlog)) {
		SendUsageMessage( playerid, "/offfine [Ime_Prezime] [novac] [razlog]");
		SendUsageMessage(playerid, "Razlog mora biti MINIMALNO 3 karaktera ili igraca nece fine-ovati.");
		return 1;
	}
	format(ifile, sizeof(ifile), I_FILE, imeigraca);
	if(!fexist(ifile)) return SendErrorMessage(playerid, "Taj igrac ne postoji u bazi podataka!");
	if(IsPlayerConnected(GetPlayerIdFromName(imeigraca))) {
		SendErrorMessage(playerid, "Taj igrac je online - /fine.");
		return 1;
	}
	if(novac < 1) return SendErrorMessage(playerid, "Novac za fine ne moze biti manji od 1$.");
	if(novac > 50000000) return SendErrorMessage(playerid, "Novac za fine ne moze biti veci od 50000000$.");

	new INI:File = INI_Open(ifile);
	INI_SetTag(File, "Informacije");
	INI_WriteInt(File, "OffFine", novac);
	INI_WriteString(File, "OffPFine", razlog);
	INI_Close(File);

	AI[playerid][aTCharge] += novac;
	SacuvajAdmina(playerid); 

	SendClientMessageEx(playerid, SVETLOCRVENA, "Oduzeli ste %d$ novca offline igracu %s | Razlog: %s.", novac, imeigraca, razlog);
	new string[156];
	format(string, sizeof(string), "Admin %s je offFine igraca %s (%d$) | Razlog: %s", ImeIgraca(playerid), imeigraca, novac, razlog);
	LogSave("Ostalo/LogOffFine.log", string);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:offmute(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 2) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new vreme, razlog[40], imeigraca[24], ifile[64];
	if(sscanf(params, "s[24]is[40]", imeigraca, vreme, razlog)) {
		SendUsageMessage(playerid, "/offmute [Ime_Prezime] [vreme(minuti)] [razlog]");
		SendUsageMessage(playerid, "Razlog mora biti MINIMALNO 3 karaktera ili igraca nece mute-ovati.");
		return 1;
	}
	format(ifile, sizeof(ifile), I_FILE, imeigraca);
	if(!fexist(ifile)) return SendErrorMessage(playerid, "Taj igrac ne postoji u bazi podataka!");
	if(IsPlayerConnected(GetPlayerIdFromName(imeigraca))) {
		SendErrorMessage(playerid, "Taj igrac je online - /mute.");
		return 1;
	}
	if(vreme < 1) return SendErrorMessage(playerid, "Vreme za mute ne moze biti manje od 1 minut.");

	new INI:File = INI_Open(ifile);
	INI_SetTag(File, "Informacije");
	INI_WriteInt(File, "Mute", vreme*60);
	INI_WriteString(File, "OffPMute", razlog);
	INI_Close(File);

	SendClientMessageEx(playerid, SVETLOCRVENA, "Postavili ste offline igracu %s mute na %d minuta. Razlog: %s", imeigraca, vreme, razlog);
	new string[128];
	format(string, sizeof(string), "Admin %s je offmute igraca %s | Razlog: %s", ImeIgraca(playerid), imeigraca, razlog);
	LogSave("Ostalo/LogOffMute.log", string);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:offwarn(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 2) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new razlog[40], imeigraca[24], ifile[64];
	if(sscanf(params, "s[24]s[40]", imeigraca, razlog)) {
		SendUsageMessage(playerid, "/offwarn [Ime_Prezime] [razlog]");
		SendUsageMessage(playerid, "Razlog mora biti MINIMALNO 3 karaktera ili igraca nece warnovati.");
		return 1;
	}
	format(ifile, sizeof(ifile), I_FILE, imeigraca);
	if(!fexist(ifile)) return SendErrorMessage(playerid, "Taj igrac ne postoji u bazi podataka!");
	if(IsPlayerConnected(GetPlayerIdFromName(imeigraca))) {
		SendErrorMessage(playerid, "Taj igrac je online - /warn.");
		return 1;
	}

	new INI:File = INI_Open(ifile);
	INI_SetTag(File, "Informacije");
	INI_WriteInt(File, "OffWarn", 1);
	INI_WriteString(File, "OffPWarn", razlog);
	INI_Close(File);

	AI[playerid][aTWarn]++;
	SacuvajAdmina(playerid);

	SendClientMessageEx(playerid, SVETLOCRVENA, "Postavili ste offline igracu %s warn. Razlog: %s", imeigraca, razlog);
	new string[128];
	format(string, sizeof(string), "Admin %s je offwarn igraca %s | Razlog: %s", ImeIgraca(playerid), imeigraca, razlog);
	LogSave("Ostalo/LogOffWarn.log", string);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:unmute(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 2) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

	new id;
	if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/unmute [ID/Deo Imena]");
	if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID korisnika.");
	PlayerInfo[id][xMute] = 0;
	SavePlayer(id);

	new varstring[80];
	format(varstring, sizeof(varstring), "UNMUTE | %s je unmutiran od strane %s.", ImeIgraca(id), ImeIgraca(playerid));
	AdminPoruka(NARACRVENA, varstring);

	SendInfoMessage(playerid, "Unmutirali ste igraca %s!", ImeIgraca(id));
	SendInfoMessage(id, "Admin %s vas je unmutirao!", ImeIgraca(playerid));

}
return 1;}
CMD:toganimchat(playerid, params[]) {
if(GetPVarInt(playerid, "ToggedAnim") == 0) {
	SetPVarInt(playerid, "ToggedAnim", 1);
	SCM(playerid, BELA, "Chat animacije iskljucene !");}
else if(GetPVarInt(playerid, "ToggedAnim") == 1) {
	SetPVarInt(playerid, "ToggedAnim", 0);
	SCM(playerid, BELA, "Chat animacije ukljucene !");}
return 1;}

CMD:togg(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	new varstring[50];
if(ToggedG == true) {
	ToggedG = false;
	SCM(playerid, BELA, "G chat je iskljucen !");
	format(varstring, sizeof(varstring), "TOGG | %s je ugasio G Chat.", ImeIgraca(playerid));
	AdminPoruka(NARACRVENA, varstring);}
else if(ToggedG == false) {
	ToggedG = true;
	SCM(playerid, BELA, "G chat je ukljucen !");

	format(varstring, sizeof(varstring), "TOGG | %s je ukljucio G Chat.", ImeIgraca(playerid));
	AdminPoruka(NARACRVENA, varstring);}
return 1;}

CMD:nosms(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(GetPVarInt(playerid, "ToggedPM") == 0) {
	SetPVarInt(playerid, "ToggedPM", 1);
	SCM(playerid, BELA, "SMS dostava iskljucena !");}
else if(GetPVarInt(playerid, "ToggedPM") == 1) {
	SetPVarInt(playerid, "ToggedPM", 0);
	SCM(playerid, BELA, "SMS dostava ukljucena !");}
return 1;}

CMD:togw(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(GetPVarInt(playerid, "ToggedWISP") == 0) {
	SetPVarInt(playerid, "ToggedWISP", 1);
	SCM(playerid, BELA, "WHISPER dostava iskljucena !");}
else if(GetPVarInt(playerid, "ToggedWISP") == 1) {
	SetPVarInt(playerid, "ToggedWISP", 0);
	SCM(playerid, BELA, "WHISPER dostava ukljucena !");}
return 1;}

CMD:spec(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 2) {

	if(WatchingTV{ playerid } == 0) {

		new id;
		if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/spec [ID/Deo imena]");
		if(id == IPI) return SendErrorMessage(playerid, "Nepostojeci ID.");
		if(id == playerid) return SendErrorMessage(playerid, "Nepostojeci ID.");

		if(PlayerInfo[playerid][xHelper] >= 2) {
			if(PlayerInfo[id][xHelper] == 0) return SendErrorMessage(playerid, "Kao vodja helpera mozes specati samo helpere.");
		}
		if(PlayerInfo[playerid][xAdmin] < 7 && PlayerInfo[id][xAdmin] >= 6) return SendErrorMessage(playerid, "Ne mozes da specas direktore i vlasnike.");
		SpecaLik[playerid] = 1;
		Spectate[playerid] = id;
		new Float:health;
		GetPlayerHealth(Spectate[playerid], health);

		GetPlayerPos(playerid, SpecPos[playerid][0], SpecPos[playerid][1],  SpecPos[playerid][2]);
		SpecVW[playerid] = GetPlayerVirtualWorld(playerid);
		SpecInt[playerid] = GetPlayerInterior(playerid);

		new cash = PlayerInfo[Spectate[playerid]][xNovac];
		new specstring[180];
		format(specstring, sizeof(specstring), "~y~ID: ~w~%d ~n~~y~Ime: ~w~%s ~n~~y~Novac: ~w~%d$ ~n~~y~Health: ~w~%1.f~n~~y~Oruzje: ~w~%s(%d m)", id, ImeIgraca(id), cash, health, WeaponInfos[GetPlayerWeapon(id)][wName], GetPlayerAmmo(id));
		PlayerTextDrawSetString(playerid, SpecTextDraw[playerid], specstring);
		PlayerTextDrawShow(playerid, SpecTextDraw[playerid]);

		SendInfoMessage(playerid, "Ukoliko zelis da refresujes spec nad istim igracem ukucaj /spec.");

		ac_TogglePlayerSpectating(playerid, true);

		WatchingTV{ playerid } = 1;
		new string[128];
		format(string, sizeof(string), "Admin %s je poceo spec nad igracom %s", ImeIgraca(playerid), ImeIgraca(id));
		LogSave("Ostalo/LogSPEC.log", string);

		GetPlayerHealth(id, health);
		if(IsPlayerInAnyVehicle(id)) {
			new carid = GetPlayerVehicleID(id);
			PlayerSpectateVehicle(playerid, carid);
		}
		else {
			PlayerSpectatePlayer(playerid, id);
		}
		ac_SetPlayerInterior(playerid, GetPlayerInterior(id));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
	}
	else {

		if(Spectate[playerid] != IPI && IsPlayerConnected(Spectate[playerid])) {
			ac_TogglePlayerSpectating(playerid, true);
			new id = Spectate[playerid];

			new Float:health;
			GetPlayerHealth(id, health);
			if(IsPlayerInAnyVehicle(id)) {
				new carid = GetPlayerVehicleID(id);
				PlayerSpectateVehicle(playerid, carid);
			}
			else {
				PlayerSpectatePlayer(playerid, id);
			}
			ac_SetPlayerInterior(playerid, GetPlayerInterior(id));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
		}
		else {
			WatchingTV{ playerid } = 0;
			PlayerTextDrawHide(playerid, SpecTextDraw[playerid]);
			ac_TogglePlayerSpectating(playerid, false);
			TogglePlayerControllable(playerid, true);
			Spectate[playerid] = -1;
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~w~              Spec~n~~r~                Iskljucen", 5000, 6);
		}
	}
} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:specoff(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 2) {
	if(WatchingTV{ playerid } == 1) {
		WatchingTV{ playerid } = 0;
		PlayerTextDrawHide(playerid, SpecTextDraw[playerid]);
		ac_TogglePlayerSpectating(playerid, false);
		TogglePlayerControllable(playerid, true);
		Spectate[playerid] = -1;
		SpecaLik[playerid] = -1;
		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		GameTextForPlayer(playerid, "~w~              Spec~n~~r~                Iskljucen", 5000, 6);
		if(PlayerInfo[playerid][xAdmin] < 6) {
			new varstring[60];
			format(varstring, sizeof(varstring), "SPEC | %s je prestao sa specom.", ImeIgraca(playerid));
			AdminPoruka(NARACRVENA, varstring);
		}
	}
	else {
		SendErrorMessage(playerid, "Nemas spectator ukljucen!");
	}
} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

// Org System
CMD:lider(playerid, params[]) {
if(PlayerInfo[playerid][xLider] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu. ");
if(OI[PlayerInfo[playerid][xLider]][oSuspended]) return SendErrorMessage(playerid, "Vasa organizacija je zakljucana od strane vlasnika.");
SPD(playerid, dialog_LIDER, DSL, D_NASLOV, "Informacije\nUbaci clana\nIzbaci clana - ONLINE\nIzbaci clana - OFFLINE\nDaj rank clanu\nSpisak svih clanova\nWar\nLokacije organizacije", D_ODABERI, D_ODUSTANI);
return true;}
CMD:liderrac(playerid, params[]) {

if(PlayerInfo[playerid][xLider] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu. ");
	if(OI[PlayerInfo[playerid][xLider]][oSuspended]) return SendErrorMessage(playerid, "Vasa organizacija je zakljucana od strane vlasnika.");
if(ServerInfo[RRVehicle] == true) return SendErrorMessage(playerid, "Vec je pokrenut jedan RAC.");
new str[128];
format(str,128,"[RESPAWN] Lider %s je aktivirao respawn vozila vase organizacije.",ImeIgraca(playerid));
OrgPoruka(PlayerInfo[playerid][xClan],0x95b4a2FF,str);
SetTimerEx("RespawnCall",5000,false,"dd",playerid,6);
return 1;}

CMD:orgsef(playerid, params[]) {
if(PlayerInfo[playerid][xClan] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu. ");
if(PlayerInfo[playerid][xLevel] < 4) return SendErrorMessage(playerid, "Morate biti level 4+ da bi ste koristili ovu komandu!");
new id = PlayerInfo[playerid][xClan];
if(!IsPlayerInRangeOfPoint(playerid, 3.0, OI[id][oSafePos][0], OI[id][oSafePos][1], OI[id][oSafePos][2])) return SendErrorMessage(playerid, "Morate biti pored sefa.");

SPD(playerid, dialog_ORGSAFE, DSL, D_NASLOV,  "Stanje u sefu\nOstavi u sef\nIzvadi iz sefa\nUzmi oruzje", D_ODABERI, D_ODUSTANI);
return true;}

CMD:gradonacelnik(playerid, params[]) {
new item[32];
if(PlayerInfo[playerid][xGradRank] < GRAD_MAYOR) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu. ");
if(sscanf(params, "s[32] ", item)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/gradonacelnik [opcija]");
	SCM(playerid, BELA, "[Opcije] zaposli, otpusti, radnici");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return true;}
if(strcmp(item, "zaposli",true) == 0) {
	new id, tip[20];
	if(sscanf(params, "s[32]us[20]", item, id, tip)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/gradonacelnik zaposli [ID/Deo imena] [tip posla]");
		SCM(playerid, BELA, "[Opcije] telohranitelj, vozac, sefvozaca, seftelohranitelja, zamenikgrad");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		return true;
	}
	if(strcmp("telohranitelj", tip, true, 13) == 0) {
		if(id == playerid)return SendErrorMessage(playerid, "Ne mozes sam sebe zaposliti!");
		if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Taj igrac je offline!");
		if(PlayerInfo[id][xGradRank] >= 1) return SendErrorMessage(playerid, "Taj igrac je vec u sluzbi gradonacelnika!");
		PlayerInfo[id][xGradRank] = GRAD_BODYGUARD;
		SendInfoMessage(playerid, "Zaposlili ste %s.", ImeIgraca(id));
		SendInfoMessage(id, "Gradonacelik %s vas je zaposlio u svoju sluzbu kao telohranitelja.", ImeIgraca(playerid));
		return true;
	}
	else if(strcmp("vozac", tip, true, 5) == 0) {
		if(id == playerid)return SendErrorMessage(playerid, "Ne mozes sam sebe zaposliti!");
		if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Taj igrac je offline!");
		if(PlayerInfo[id][xGradRank] >= 1) return SendErrorMessage(playerid, "Taj igrac je vec u sluzbi gradonacelnika!");
		PlayerInfo[id][xGradRank] = GRAD_DRIVER;
		SendInfoMessage(playerid, "Zaposlili ste %s.", ImeIgraca(id));
		SendInfoMessage(id, "Gradonacelik %s vas je zaposlio u svoju sluzbu kao vozaca.", ImeIgraca(playerid));
		return true;
	}
	else if(strcmp("sefvozaca", tip, true, 9) == 0) {
		if(id == playerid)return SendErrorMessage(playerid, "Ne mozes sam sebe zaposliti!");
		if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Taj igrac je offline!");
		if(PlayerInfo[id][xGradRank] >= 1) return SendErrorMessage(playerid, "Taj igrac je vec u sluzbi gradonacelnika!");
		PlayerInfo[id][xGradRank] = GRAD_LDRIVER;
		SendInfoMessage(playerid, "Zaposlili ste %s.", ImeIgraca(id));
		SendInfoMessage(id, "Gradonacelik %s vas je zaposlio u svoju sluzbu kao vodju vozaca.", ImeIgraca(playerid));
		return true;
	}
	else if(strcmp("seftelohranitelja", tip, true, 17) == 0) {
		if(id == playerid)return SendErrorMessage(playerid, "Ne mozes sam sebe zaposliti!");
		if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Taj igrac je offline!");
		if(PlayerInfo[id][xGradRank] >= 1) return SendErrorMessage(playerid, "Taj igrac je vec u sluzbi gradonacelnika!");
		PlayerInfo[id][xGradRank] = GRAD_LBODYGUARD;
		SendInfoMessage(playerid, "Zaposlili ste %s.", ImeIgraca(id));
		SendInfoMessage(id, "Gradonacelik %s vas je zaposlio u svoju sluzbu kao vodju telohranitelja.", ImeIgraca(playerid));
		return true;
	}
	else if(strcmp("zamenikgrad", tip, true, 11) == 0) {
		if(id == playerid)return SendErrorMessage(playerid, "Ne mozes sam sebe zaposliti!");
		if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Taj igrac je offline!");
		if(PlayerInfo[id][xGradRank] >= 1) return SendErrorMessage(playerid, "Taj igrac je vec u sluzbi gradonacelnika!");
		PlayerInfo[id][xGradRank] = GRAD_VMAYOR;
		SendInfoMessage(playerid, "Zaposlili ste %s.", ImeIgraca(id));
		SendInfoMessage(id, "Gradonacelik %s vas je zaposlio u svoju sluzbu kao zamenika gradonacelnika.", ImeIgraca(playerid));
		return true;
	}
	return true;}
else if(strcmp(item, "otpusti",true) == 0) {
	new id;
	if(sscanf(params, "s[32]u", item, id)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/gradonacelnik otpusti [ID/Deo imena]");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		return true;
	}
	if(id == playerid)return SendErrorMessage(playerid, "Ne mozes sam sebe otpustiti!");
	if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Taj igrac je offline!");
	if(PlayerInfo[id][xGradRank] < 1) return SendErrorMessage(playerid, "Taj igrac je nije u sluzbi gradonacelnika!");
	PlayerInfo[id][xGradRank] = 0;
	SendInfoMessage(playerid, "Otpustili ste %s.", ImeIgraca(id));
	SendInfoMessage(id, "Gradonacelik %s vas je otpustio iz svoje sluzbe.", ImeIgraca(playerid));
	return true;}
else if(strcmp(item, "radnici",true) == 0) {
	SCM(playerid, 0xF5DEB3AA, "|----------------Zaposleni Online----------------|");
	foreach(new i : Player) {
		if(IsPlayerConnected(i)) {
			new string[50];
			if(PlayerInfo[i][xGradRank] == GRAD_MAYOR) format(string, sizeof(string), "Gradonacelnik - %s", ImeIgraca(i));
			else if(PlayerInfo[i][xGradRank] == GRAD_VMAYOR) format(string, sizeof(string), "Zamjenik Grad. - %s", ImeIgraca(i));
			else if(PlayerInfo[i][xGradRank] == GRAD_LBODYGUARD) format(string, sizeof(string), "Vodja Tjelohranitelja - %s", ImeIgraca(i));
			else if(PlayerInfo[i][xGradRank] == GRAD_LDRIVER) format(string, sizeof(string), "Vodja Vozaca - %s", ImeIgraca(i));
			else if(PlayerInfo[i][xGradRank] == GRAD_DRIVER) format(string, sizeof(string), "Vozac - %s", ImeIgraca(i));
			else if(PlayerInfo[i][xGradRank] == GRAD_BODYGUARD) format(string, sizeof(string), "Tjelohranitelj - %s", ImeIgraca(i));
			if(strlen(string) > 1) SCM(playerid, 0xF5DEB3AA, string);
		}
	}
	return true;}
return true;}

CMD:uniformbodyguard(playerid, params[]) {
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1271.9607, -814.5180, 1089.9375)) return SendErrorMessage(playerid, "Niste na mjestu uzimanja uniforme!");
if(PlayerInfo[playerid][xGradRank] == GRAD_BODYGUARD || PlayerInfo[playerid][xGradRank] == GRAD_LBODYGUARD) {
	if(!TelohraniteljUniforma[playerid]) {
		c_SetPlayerSkin(playerid, 24);
		TelohraniteljUniforma[playerid] = true;
		SCM(playerid, ZUTA, "Obukao si uniformu tjelohranitelja(Da vratis svoju garderobu ukucaj isto)!");
	}
	else if(TelohraniteljUniforma[playerid]) {
		c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
		TelohraniteljUniforma[playerid] = false;
		SCM(playerid, ZUTA, "Obukao si svoju garderobu!");
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu. ");
return 1;}

CMD:uniformdriver(playerid, params[]) {
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1271.9609, -812.2278, 1089.9375)) return SendErrorMessage(playerid, "Niste na mjestu uzimanja uniforme!");
if(PlayerInfo[playerid][xGradRank] == GRAD_DRIVER || PlayerInfo[playerid][xGradRank] == GRAD_LDRIVER) {
	if(!VozacUniforma[playerid]) {
		c_SetPlayerSkin(playerid, 255);
		VozacUniforma[playerid] = true;
		SCM(playerid, ZUTA, "Obukao si uniformu vozaca(Da vratis svoju garderobu ukucaj isto)!");
	}
	else if(VozacUniforma[playerid]) {
		c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
		VozacUniforma[playerid] = false;
		SCM(playerid, ZUTA, "Obukao si svoju garderobu!");
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu. ");
return 1;}

CMD:workers(playerid, params[]) {
if(PlayerInfo[playerid][xGradRank] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu. ");
SCM(playerid, 0xF5DEB3AA, "|----------------Zaposleni Online----------------|");
foreach(new i : Player) {
	if(IsPlayerConnected(i)) {
		new string[50];
		if(PlayerInfo[i][xGradRank] == GRAD_MAYOR) format(string, sizeof(string), "Gradonacelnik - %s", ImeIgraca(i));
		else if(PlayerInfo[i][xGradRank] == GRAD_VMAYOR) format(string, sizeof(string), "Zamjenik Grad. - %s", ImeIgraca(i));
		else if(PlayerInfo[i][xGradRank] == GRAD_LBODYGUARD) format(string, sizeof(string), "Vodja Tjelohranitelja - %s", ImeIgraca(i));
		else if(PlayerInfo[i][xGradRank] == GRAD_LDRIVER) format(string, sizeof(string), "Vodja Vozaca - %s", ImeIgraca(i));
		else if(PlayerInfo[i][xGradRank] == GRAD_DRIVER) format(string, sizeof(string), "Vozac - %s", ImeIgraca(i));
		else if(PlayerInfo[i][xGradRank] == GRAD_BODYGUARD) format(string, sizeof(string), "Tjelohranitelj - %s", ImeIgraca(i));
		if(strlen(string) > 1) SCM(playerid, 0xF5DEB3AA, string);
	}
}
return true;}

CMD:mr(playerid, params[]) {
if(PlayerInfo[playerid][xGradRank] >= 1) {
	new poruka[64];
	if(sscanf(params, "s[64]", poruka)) return SendUsageMessage(playerid, "/mr [Text]");
	new varstring[128];
	if(PlayerInfo[playerid][xGradRank] == GRAD_BODYGUARD) format(varstring, sizeof(varstring), "** Telohranitelj %s: %s, prijem. **", ImeIgraca(playerid), poruka);
	else if(PlayerInfo[playerid][xGradRank] == GRAD_DRIVER) format(varstring, sizeof(varstring), "** Vozac %s: %s, prijem. **", ImeIgraca(playerid), poruka);
	else if(PlayerInfo[playerid][xGradRank] == GRAD_LDRIVER) format(varstring, sizeof(varstring), "** Vodja Vozaca %s: %s, prijem. **", ImeIgraca(playerid), poruka);
	else if(PlayerInfo[playerid][xGradRank] == GRAD_LBODYGUARD) format(varstring, sizeof(varstring), "** Vodja Telohranitelja %s: %s, prijem. **", ImeIgraca(playerid), poruka);
	else if(PlayerInfo[playerid][xGradRank] == GRAD_VMAYOR) format(varstring, sizeof(varstring), "** Zamenik Grad. %s: %s, prijem. **", ImeIgraca(playerid), poruka);
	else if(PlayerInfo[playerid][xGradRank] ==  GRAD_MAYOR) format(varstring, sizeof(varstring), "** Gradonacelnik %s: %s, prijem. **", ImeIgraca(playerid), poruka);
	foreach(new i : Player) {
		if(PlayerInfo[i][xGradRank] >= 1) {
			SCM(i, 0x83BFBFFF, varstring);
		}
	}
}
else return SendErrorMessage(playerid, "Samo zaposlenici kod gradonacelnika!");
return 1;}

CMD:napustiorg(playerid, params[]) {
if(PlayerInfo[playerid][xLider] != 0) return SendErrorMessage(playerid, "Ne mozes koristiti ovu komandu.");
if(PlayerInfo[playerid][xClan] != 0) {

	if(PlayerInfo[playerid][xOrgUgovor] < 10) {

		new OrgID = PlayerInfo[playerid][xClan], name[MAX_PLAYER_NAME];
		GetPlayerName(playerid, name, sizeof(name));

		if(strcmp(name, OI[OrgID][oClan1], true) == 0) { strmid(OI[OrgID][oClan1], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan2], true) == 0) { strmid(OI[OrgID][oClan2], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan3], true) == 0) { strmid(OI[OrgID][oClan3], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan4], true) == 0) { strmid(OI[OrgID][oClan4], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan5], true) == 0) { strmid(OI[OrgID][oClan5], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan6], true) == 0) { strmid(OI[OrgID][oClan6], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan7], true) == 0) { strmid(OI[OrgID][oClan7], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan8], true) == 0) { strmid(OI[OrgID][oClan8], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan9], true) == 0) { strmid(OI[OrgID][oClan9], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan10], true) == 0) { strmid(OI[OrgID][oClan10], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan11], true) == 0) { strmid(OI[OrgID][oClan11], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan12], true) == 0) { strmid(OI[OrgID][oClan12], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan13], true) == 0) { strmid(OI[OrgID][oClan13], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan14], true) == 0) { strmid(OI[OrgID][oClan14], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan15], true) == 0) { strmid(OI[OrgID][oClan15], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan16], true) == 0) { strmid(OI[OrgID][oClan16], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan17], true) == 0) { strmid(OI[OrgID][oClan17], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan18], true) == 0) { strmid(OI[OrgID][oClan18], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan19], true) == 0) { strmid(OI[OrgID][oClan19], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan20], true) == 0) { strmid(OI[OrgID][oClan20], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan21], true) == 0) { strmid(OI[OrgID][oClan21], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan22], true) == 0) { strmid(OI[OrgID][oClan22], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan23], true) == 0) { strmid(OI[OrgID][oClan23], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan24], true) == 0) { strmid(OI[OrgID][oClan24], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan25], true) == 0) { strmid(OI[OrgID][oClan25], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan26], true) == 0) { strmid(OI[OrgID][oClan26], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan27], true) == 0) { strmid(OI[OrgID][oClan27], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan28], true) == 0) { strmid(OI[OrgID][oClan28], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan29], true) == 0) { strmid(OI[OrgID][oClan29], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan30], true) == 0) { strmid(OI[OrgID][oClan30], "Niko", 0, strlen("Niko"), ORG_CLAN); }

		OI[OrgID][oUbacenihClanova]--;

		PlayerInfo[playerid][xSkin] = SetSexSkin(playerid); c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
		PlayerInfo[playerid][xClan] = 0;
		PlayerInfo[playerid][xLider] = 0;
		PlayerInfo[playerid][xOrgUgovor] = 0;
		PlayerInfo[playerid][xSpawn] = SetRandomSpawn(playerid);
		ResetAllWeapons(playerid);
		SaveOrganization(OrgID);

		SavePlayer(playerid);
	}
	else if(PlayerInfo[playerid][xOrgUgovor] >= 10) {
		new OrgID = PlayerInfo[playerid][xClan], name[MAX_PLAYER_NAME];
		GetPlayerName(playerid, name, sizeof(name));

		if(strcmp(name, OI[OrgID][oClan1], true) == 0) { strmid(OI[OrgID][oClan1], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan2], true) == 0) { strmid(OI[OrgID][oClan2], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan3], true) == 0) { strmid(OI[OrgID][oClan3], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan4], true) == 0) { strmid(OI[OrgID][oClan4], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan5], true) == 0) { strmid(OI[OrgID][oClan5], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan6], true) == 0) { strmid(OI[OrgID][oClan6], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan7], true) == 0) { strmid(OI[OrgID][oClan7], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan8], true) == 0) { strmid(OI[OrgID][oClan8], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan9], true) == 0) { strmid(OI[OrgID][oClan9], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan10], true) == 0) { strmid(OI[OrgID][oClan10], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan11], true) == 0) { strmid(OI[OrgID][oClan11], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan12], true) == 0) { strmid(OI[OrgID][oClan12], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan13], true) == 0) { strmid(OI[OrgID][oClan13], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan14], true) == 0) { strmid(OI[OrgID][oClan14], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan15], true) == 0) { strmid(OI[OrgID][oClan15], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan16], true) == 0) { strmid(OI[OrgID][oClan16], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan17], true) == 0) { strmid(OI[OrgID][oClan17], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan18], true) == 0) { strmid(OI[OrgID][oClan18], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan19], true) == 0) { strmid(OI[OrgID][oClan19], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan20], true) == 0) { strmid(OI[OrgID][oClan20], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan21], true) == 0) { strmid(OI[OrgID][oClan21], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan22], true) == 0) { strmid(OI[OrgID][oClan22], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan23], true) == 0) { strmid(OI[OrgID][oClan23], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan24], true) == 0) { strmid(OI[OrgID][oClan24], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan25], true) == 0) { strmid(OI[OrgID][oClan25], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan26], true) == 0) { strmid(OI[OrgID][oClan26], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan27], true) == 0) { strmid(OI[OrgID][oClan27], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan28], true) == 0) { strmid(OI[OrgID][oClan28], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan29], true) == 0) { strmid(OI[OrgID][oClan29], "Niko", 0, strlen("Niko"), ORG_CLAN); }
		if(strcmp(name, OI[OrgID][oClan30], true) == 0) { strmid(OI[OrgID][oClan30], "Niko", 0, strlen("Niko"), ORG_CLAN); }

		OI[OrgID][oUbacenihClanova]--;

		PlayerInfo[playerid][xSkin] = SetSexSkin(playerid); c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
		PlayerInfo[playerid][xClan] = 0;
		PlayerInfo[playerid][xLider] = 0;
		PlayerInfo[playerid][xSpawn] = SetRandomSpawn(playerid);
		PlayerInfo[playerid][xOrgUgovor] = 0;
		SCM(playerid, -1, "Napustili ste vasu organizaciju!");
		ResetAllWeapons(playerid); SaveOrganization(OrgID);
		SavePlayer(playerid);
	}
}
else return SendErrorMessage(playerid, "Nisi clan nijedne organizacije");
return true;}

CMD:kupidozvoluzaoruzje(playerid, params[]) {

if(!IsPlayerInRangeOfPoint(playerid, 3.0, 697.2818, 1973.1436, -22.3034)) return SendErrorMessage(playerid, "Morate biti u policijskoj stanici.");
if(PlayerInfo[playerid][xNovac] < 25000) return SendErrorMessage(playerid, "Nemate kod sebe 25000$.");
if(PlayerInfo[playerid][xGunLicense] == true) return SendErrorMessage(playerid, "Vec imate dozvolu za oruzje. ");

PlayerInfo[playerid][xGunLicense] = true;
DajIgracuNovac(playerid, -25000);
PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
SendInfoMessage(playerid, "Kupili ste dozvolu za oruzje za 25000$.");
SavePlayer(playerid);

new string1[128];
format(string1, sizeof(string1), "Igrac %s je kupio dozvolu za oruzje", ImeIgraca(playerid));
LogSave("Ostalo/LogGiveGunLicense.log", string1);
return true;}
CMD:dozvolazapecanje(playerid, params[]) {

if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1496.0886,-1797.7242,-20.2832)) return SendErrorMessage(playerid, "Niste u opstini kod saltera.");
if(PlayerInfo[playerid][xNovac] < 30000) return SendErrorMessage(playerid, "Nemate kod sebe 30000$");
if(PlayerInfo[playerid][xRibarska] > 0) return SendErrorMessage(playerid, "Vec imate dozvolu za pecanje.");
PlayerInfo[playerid][xRibarska] = 1;
DajIgracuNovac(playerid, -30000);
PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
SendInfoMessage(playerid, "Kupili ste dozvolu za pecanje za 30000$.");
SavePlayer(playerid);
return true;}
CMD:kupidozvoluzaavion(playerid, params[]) {

if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2063.5569,-1887.2379,14.1737)) return SendErrorMessage(playerid, "Morate biti u auto skoli.");
if(PlayerInfo[playerid][xNovac] < 50000) return SendErrorMessage(playerid, "Nemate kod sebe 10.000$.");
if(PlayerInfo[playerid][xLetelica] > 0) return SendErrorMessage(playerid, "Vec imas dozvolu za avion. ");

PlayerInfo[playerid][xLetelica] = 1;
DajIgracuNovac(playerid, -50000);
PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
SendInfoMessage(playerid, "Kupili ste dozvolu za avion za 50000$.");
SavePlayer(playerid);
return true;}

CMD:kupidozvoluzabrod(playerid, params[]) {

if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2063.5569,-1887.2379,14.1737)) return SendErrorMessage(playerid, "Morate biti u auto skoli.");
if(PlayerInfo[playerid][xNovac] < 40000) return SendErrorMessage(playerid, "Nemate kod sebe 10000$.");
if(PlayerInfo[playerid][xBrodska] > 0) return SendErrorMessage(playerid, "Vec imas dozvolu za brod. ");

PlayerInfo[playerid][xBrodska] = 1;
DajIgracuNovac(playerid, -40000);
PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
SendInfoMessage(playerid, "Kupili ste dozvolu za brod za 40000$.");
SavePlayer(playerid);
return true;}

CMD:alcotest(playerid, params[], help) {
new igrac;
if(GetFactionType(playerid)  != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
if(sscanf(params, "u", igrac)) return SendUsageMessage(playerid, "/alcotest [ID/Deo imena]");
if(!IsPlayerConnected(igrac) || igrac == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Krivi ID!");
if(igrac == playerid) return SendErrorMessage(playerid, "Ne mozete sami sebi dati test alkoholiziranost!");
if(!IsPlayerNearPlayer(5.0, playerid, igrac)) return SendErrorMessage(playerid, "Niste blizu igraca kojem zelite dati alcotest!");
new alcohol = GetPlayerDrunkLevel(igrac),
	Float:promils = alcohol / 1000.0;

SendClientMessageEx(playerid, BELA, "%s je naduvao %.2f promila.", ImeIgraca(igrac), promils);

SendClientMessageEx(igrac, BELA, "Naduvali ste %.2f promila.", promils);

new varstring[84];
format(varstring, sizeof(varstring), "* Policajac %s daje test alkoholizma %s.", ImeIgraca(playerid), ImeIgraca(igrac));
PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
return true;}

CMD:narcotest(playerid, params[], help) {
new igrac;
if(GetFactionType(playerid)  != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
if(sscanf(params, "u", igrac)) {
	SendUsageMessage(playerid, "/narcotest [ID/Deo Imena]");
	return 1;}
new varstring[120];
if(IsPlayerConnected(igrac)) {
	if(igrac != INVALID_PLAYER_ID) {
		if(igrac == playerid) return SendErrorMessage(playerid, "Ne mozete sami sebi dati narco test!");
		if(IsPlayerNearPlayer(5.0, playerid, igrac)) {
			if(PlayerStoned[igrac] == true) {
				SetPVarInt(igrac, "NarkoTest", 1);
				SetPVarInt(playerid, "PlayerHasTest", igrac);
				format(varstring, sizeof(varstring), "Izvrsili ste narkotest nad %s, odnesite uzorak u bolnicu na proveru.", ImeIgraca(igrac));
				SCM(playerid, BELA, varstring);
			} else {
				SetPVarInt(igrac, "NarkoTest", 0);
				SetPVarInt(playerid, "PlayerHasTest", igrac);
				format(varstring, sizeof(varstring), "Izvrsili ste narkotest nad %s, odnesite uzorak u bolnicu na proveru.", ImeIgraca(igrac));
				SCM(playerid, BELA, varstring);
			}
		} else return SendErrorMessage(playerid, "Taj igrac nije dovoljno blizu vas.");
	}
}
return 1;}

CMD:narcoresults(playerid, params[], help) {
new igrac;
if(GetFactionType(playerid)  != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu(SAMO PD/SWAT/FBI)");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
if(sscanf(params, "u", igrac)) {
	SendUsageMessage(playerid, "/narcoresults [ID/Deo Imena]");
	return 1;}
if(IsPlayerConnected(igrac)) {
	if(igrac != INVALID_PLAYER_ID) {
		if(IsPlayerInRangeOfPoint(playerid, 3.0, -2292.2214, 104.6003, -5.3468)) {
			if(GetPVarInt(playerid, "PlayerHasTest")  != 999) {
				if(GetPVarInt(playerid, "PlayerHasTest")  == igrac) {
					if(GetPVarInt(igrac, "NarkoTest") == 1) {
						SendInfoMessage(playerid, "Narkotest izvrsen nad %s je pozitivan.", ImeIgraca(igrac));
					} else {
						SendInfoMessage(playerid, "Narkotest izvrsen nad %s je negativan.", ImeIgraca(igrac));
					}
					SetPVarInt(playerid, "PlayerHasTest", 999);
					SetPVarInt(igrac, "NarkoTest", 0);
				} else return SendErrorMessage(playerid, "Nemate uzorak od tog igraca kod sebe.");
			} else return SendErrorMessage(playerid, "Nemate nijedan uzorak kod sebe.");
		} else return SendErrorMessage(playerid, "Morate biti kod bolnice da bi ste mogli uzeti uzorak narkotesta.");
	}
}
return 1;}

CMD:zatvorenici(playerid, params[]) {
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
SCM(playerid, BELA, "|_______-=Popis svih zatvorenika=-________|");
foreach(new i : Player)
{
	if(IsPlayerConnected(i))
	{
			if(PlayerInfo[i][xZatvor] == OBICAN_ZATVOR)
		{
			new varstring[24];
			format(varstring, sizeof(varstring), "%s", ImeIgraca(i));
			SCM(playerid, SVETLOPLAVA, varstring);
		}
	}
}
return 1;}
CMD:tazer(playerid, params[]) {
new weapon, ammo;
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu trenutno.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
if(ImaTazer[playerid] == false) {
	if(TazerMetkovi[playerid] == 0) return SendErrorMessage(playerid, "Nemate vise metkova tazera.");
	antiCheatCS[playerid][WeaponDetect] = 3;
	GetPlayerWeaponData(playerid, 2, weapon, ammo);
	lastweapon[playerid][0] = weapon;
	lastweapon[playerid][1] = ammo;
	GiveWeaponToPlayer(playerid, 23, TazerMetkovi[playerid]);
	ImaTazer[playerid] = true;
	SCM(playerid, BELA, "Izvadio si tazer iz futrole.");}
else if(ImaTazer[playerid] == true) {
	GetPlayerWeaponData(playerid, 2, weapon, ammo);
	TazerMetkovi[playerid] = ammo;
	antiCheatCS[playerid][WeaponDetect] = 3;
	RemovePlayerWeapon(playerid, 23);
	GiveWeaponToPlayer(playerid, lastweapon[playerid][0], lastweapon[playerid][1]);
	ImaTazer[playerid] = false;
	SCM(playerid, BELA, "Vratio si tazer u futrolu.");}
return true;}

CMD:cuff(playerid, params[]) {
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new igrac;
if(BrojLisica[playerid] == 0) return SendErrorMessage(playerid, "Nemate nijedan par lisica.");
if(sscanf(params, "u", igrac)) return SendUsageMessage(playerid, "/cuff [ID/Deo imena]");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
if(IsPlayerConnected(igrac)) {
	if(igrac != INVALID_PLAYER_ID) {
		if(OI[PlayerInfo[igrac][xClan]][oTip] == ORG_TIP_PD) return SendErrorMessage(playerid, "Ne mozes staviti lisice na policajca !");
		if(IsPlayerNearPlayer(5.0, playerid, igrac)  && !IsPlayerInAnyVehicle(playerid) && !IsPlayerInAnyVehicle(igrac)) {
			if(igrac == playerid) return SendErrorMessage(playerid, "Ne mozes sam sebi stavit lisice!");
			if(PlayerCuffed[igrac] == 1) {
				SendClientMessageEx(igrac, SVETLOPLAVA, "* Stavio vam je lisice %s.", ImeIgraca(playerid));
				SendClientMessageEx(playerid, SVETLOPLAVA, "* Stavio si lisice na %s.", ImeIgraca(igrac));
				new varstring[90];
				format(varstring, sizeof(varstring), "* %s stavlja lisice na %s, tako da mu ne bi pobegao.", ImeIgraca(playerid), ImeIgraca(igrac));
				PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
				GameTextForPlayer(igrac, "~r~Uhapsen", 2500, 3);
				TogglePlayerControllable(igrac, 0);
				SetPlayerAttachedObject(igrac, OBJECT_SLOT_RHAND, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
				SetPlayerSpecialAction(igrac, SPECIAL_ACTION_CUFFED);
				PlayerCuffed[igrac] = 2;
				BrojLisica[playerid]--;

			} else return SendErrorMessage(playerid, "Taj igrac nije sokiran !");
		} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
	}
} else return SendErrorMessage(playerid, "Taj igrac nije online !");
return 1;}

CMD:uncuff(playerid, params[]) {
if(GetFactionType(playerid)  != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new igrac;
if(sscanf(params, "u", igrac)) return SendUsageMessage(playerid, "/uncuff [ID/Deo imena]");
if(IsPlayerConnected(igrac)) {
	if(igrac != INVALID_PLAYER_ID) {
		if(IsPlayerNearPlayer(5.0, playerid, igrac)) {
			if(igrac == playerid) return SendErrorMessage(playerid, "Ne mozes skiniti lisice sam sebi!");
			if(PlayerCuffed[igrac] == 2) {
				SendClientMessageEx(igrac, SVETLOPLAVA, "* Skinio vam je lisice  %s.", ImeIgraca(playerid));
				SendClientMessageEx(playerid, SVETLOPLAVA, "* Skinili ste lisice sa %s.", ImeIgraca(igrac));
				GameTextForPlayer(igrac, "~g~Slobodan", 2500, 3);
				TogglePlayerControllable(igrac, 1);
				ClearAnimations(igrac);
				if(IsPlayerAttachedObjectSlotUsed(igrac, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(igrac, OBJECT_SLOT_RHAND);
				SetPlayerSpecialAction(igrac, SPECIAL_ACTION_NONE);
				PlayerCuffed[igrac] = 0;
				if(GetPVarInt(igrac, "CuffTimerCalled") == 1) {
					Fusion_KillTimer(TazerTimer[playerid]);
					SetPVarInt(igrac, "CuffTimerCalled", 0);
				}
			} else return SendErrorMessage(playerid, "Taj igrac nije zavezan !");
		} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
	}
} else return SendErrorMessage(playerid, "Taj igrac nije online !");
return 1;}

CMD:kpu(playerid, params[]) {
new igrac, sediste;
if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u autu !");
if(sscanf(params, "ui", igrac, sediste)) return SendUsageMessage(playerid, "/kpu [ID/Deo imena] [ID sedista]");
if(IsPlayerConnected(igrac)) {
	if(igrac != INVALID_PLAYER_ID) {
		if(KnockedDown[igrac] != true) return SendErrorMessage(playerid, "Moras prvo da oboris igraca.(/knockout).");
			if(sediste < 1 || sediste > 3) return SendErrorMessage(playerid, "ID sedista ne moze biti veci od 3 ili manji od 1.");
		if(OI[PlayerInfo[igrac][xClan]][oTip] == ORG_TIP_PD) return SendErrorMessage(playerid, "Ne mozes staviti policajca u auto !");
		if(IsPlayerInAnyVehicle(igrac)) return SendErrorMessage(playerid, "Osumnjiceni je u vozilu, izbaci ga iz vozila prvo !");
		if(IsPlayerNearPlayer(8.0, playerid, igrac)) {
			if(igrac == playerid) return SendErrorMessage(playerid, "Ne mozes ubaciti sam sebe!");
			new carid = GetPlayerVehicleID(playerid);
			new Float:pos[6];
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			GetPlayerPos(igrac, pos[3], pos[4], pos[5]);
			GetVehiclePos(carid, pos[0], pos[1], pos[2]);
			if(floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
			floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
			floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
			SendClientMessageEx(igrac, SVETLOPLAVA, "* Ubacen si u vozilo od strane %s .", ImeIgraca(playerid));
			SendClientMessageEx(playerid, SVETLOPLAVA, "* Ubacio si u vozilo %s .", ImeIgraca(igrac));
			new varstring[70];
			format(varstring, sizeof(varstring), "* %s ubacuje %s u vozilo.", ImeIgraca(playerid), ImeIgraca(igrac));
			PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
			ClearAnimations(igrac);
			TogglePlayerControllable(igrac, 0);
			ac_PutPlayerInVehicle(igrac, carid, sediste);
		} else return SendErrorMessage(playerid, "Predaleko si od osumnjicenog!");
	}
} else return SendErrorMessage(playerid, "Taj igrac nije online !");
return 1;}

CMD:pu(playerid, params[]) {
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new igrac, sediste;
if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u autu !");
if(sscanf(params, "ui", igrac, sediste)) return SendUsageMessage(playerid, "/pu [ID/Deo imena] [ID sedista]");
if(IsPlayerConnected(igrac)) {
	if(igrac != INVALID_PLAYER_ID) {
			if(sediste < 1 || sediste > 3) return SendErrorMessage(playerid, "ID sedista ne moze biti veci od 3 ili manji od 1.");
		if(OI[PlayerInfo[igrac][xClan]][oTip] == ORG_TIP_PD) return SendErrorMessage(playerid, "Ne mozes staviti policajca u auto !");
		if(IsPlayerInAnyVehicle(igrac)) return SendErrorMessage(playerid, "Osumnjiceni je u vozilu, izbaci ga iz vozila prvo !");
		if(IsPlayerNearPlayer(8.0, playerid, igrac)) {
			if(igrac == playerid) return SendErrorMessage(playerid, "Ne mozes ubaciti sam sebe!");
			if(PlayerCuffed[igrac] == 2) {
				new carid = GetPlayerVehicleID(playerid);
				new Float:pos[6];
				GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
				GetPlayerPos(igrac, pos[3], pos[4], pos[5]);
				GetVehiclePos(carid, pos[0], pos[1], pos[2]);
				if(floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
				floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
				floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
				SendClientMessageEx(igrac, SVETLOPLAVA, "* Ubacen si u vozilo od strane %s .", ImeIgraca(playerid));
				SendClientMessageEx(playerid, SVETLOPLAVA, "* Ubacio si u vozilo %s .", ImeIgraca(igrac));
				new varstring[70];
				format(varstring, sizeof(varstring), "* %s ubacuje %s u vozilo.", ImeIgraca(playerid), ImeIgraca(igrac));
				PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
				ClearAnimations(igrac);
				TogglePlayerControllable(igrac, 0);
				ac_PutPlayerInVehicle(igrac, carid, sediste);
			} else return SendErrorMessage(playerid, "Taj igrac nije uhapsen !");
		} else return SCM(playerid, CRVENA, "Predaleko si od osumnjicenog!");
	}
} else return SendErrorMessage(playerid, "Taj igrac nije online !");
return 1;}

CMD:m(playerid, params[]) {
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
if(isnull(params)) return SendUsageMessage(playerid, "(/m)egaphone [megaphone chat] ");
if(GetFactionType(playerid)  != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");

new varstring[128];
if(Maskuse[playerid] == false)
	format(varstring, sizeof(varstring), "[Policajac %s:o< %s]", ImeIgraca(playerid), params);
else
	format(varstring, sizeof(varstring), "[Policajac Maska_%d:o< %s]", PlayerInfo[playerid][xMaskID], params);

foreach(new i : Player) {
	if(IsPlayerNearPlayer(60.0, playerid, i)) {
		SCM(i, ZUTA, varstring);
	}
}
return 1;}

CMD:wanted(playerid, params[]) {
if(GetFactionType(playerid)  != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
new DialogStrgEx[545];
strcat(DialogStrgEx, "|_______-=Popis svih osumnjicenih=-________|\n");
foreach(new i : Player)
{
	if(IsPlayerConnected(i))
	{
		if(PlayerInfo[i][xWanted] > 0)
		{
			new varstring[90];
			format(varstring, sizeof(varstring), "- %s | Wanted Level: %d\n", ImeIgraca(i), PlayerInfo[i][xWanted]);
			strcat(DialogStrgEx, varstring);
		}
	}
}
SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
return 1;}

CMD:su(playerid, params[]) {
new id, tekst[64], wanted;
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
if(sscanf(params, "uis[64]", id, wanted, tekst)) return SendUsageMessage(playerid, "/su [ID/Deo imena] [Broj Wanteda] [Razlog]");
if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Taj igrac je offline!");
if(id == playerid) return SendErrorMessage(playerid, "Ne mozete sebi dati wanted level!");
if(wanted > 10) return SendErrorMessage(playerid, "Ne mozete vise od 10 wanted levela.");
if(wanted < 1) return SendErrorMessage(playerid, "Ne mozete manje od 1 wanted levela.");
if(GetFactionType(id) == ORG_TIP_PD) return SendErrorMessage(playerid, "Ne mozete dati wanted pripadniku policije.");
PostaviWanted(id, tekst, ImeIgraca(playerid), wanted);
new varstring[128];
format(varstring, sizeof(varstring), "WANTED | %s je dao %d wanteda igracu %s Razlog: %s", ImeIgraca(playerid), wanted, ImeIgraca(id), tekst);
AdminPoruka(NARACRVENA, varstring);
return true;}

CMD:rb(playerid, params[]) {
new Float:plocx,Float:plocy,Float:plocz,Float:ploca, rb, varstring[128];
if(GetFactionType(playerid) == ORG_TIP_PD && PlayerInfo[playerid][xRank] >= 3 || PlayerInfo[playerid][xAdmin] >= 1) {
	if(sscanf(params, "i", rb))
	{
		SendUsageMessage(playerid, "/roadblock(/rb) [Roadblock ID]");
		SCM(playerid, SVETLOPLAVA, "Dostupne blokade:");
		SCM(playerid, 0xB4B5B7FF, "| 1: Mala blokada");
		SCM(playerid, 0xB4B5B7FF, "| 2: Velika blokada");
		SCM(playerid, 0xB4B5B7FF, "| 3: Cunj");
		SCM(playerid, 0xB4B5B7FF, "| 4: Znak usmeravanja");
		SCM(playerid, 0xB4B5B7FF, "| 5: Znak upozorenja");
		SCM(playerid, 0xB4B5B7FF, "| 6: Blokada usmeravanja");
		SCM(playerid, 0xB4B5B7FF, "| 7: Mala Spike za busenje guma");
		SCM(playerid, 0xB4B5B7FF, "| 8: Velika Spike za busenje guma");
		return 1;
	}
	if(rb == 1)
	{
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid,ploca);
		CreateRoadblock(1459,plocx,plocy,plocz,ploca);
		GameTextForPlayer(playerid,"~w~Mala blokada ~b~postavljena!",3000,1);

		for(new id = 1; id < MAX_ORG; id++) {
			if(OI[id][oTip] == ORG_TIP_PD) {
				format(varstring,sizeof(varstring),"HQ: Officer %s je postavio malu blokadu, over.", ImeIgraca(playerid));
				OrgPoruka(id, 0x2641FEAA, varstring);
			}
		}
		return 1;
	}
	else if(rb == 2)
	{
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid,ploca);
		CreateRoadblock(978,plocx,plocy,plocz+0.6,ploca);
		GameTextForPlayer(playerid,"~w~Velika blokada ~b~postavljena!",3000,1);

		for(new id = 1; id < MAX_ORG; id++) {
			if(OI[id][oTip] == ORG_TIP_PD) {
				format(varstring,sizeof(varstring),"HQ: Officer %s je postavio veliku blokadu, over.", ImeIgraca(playerid));
				OrgPoruka(id, 0x2641FEAA, varstring);
			}
		}
		return 1;
	}
	else if(rb == 3)
	{
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid,ploca);
		CreateRoadblock(1238,plocx,plocy,plocz+0.2,ploca);
		GameTextForPlayer(playerid,"~w~Cunj ~g~postavljen!",3000,1);

		for(new id = 1; id < MAX_ORG; id++) {
			if(OI[id][oTip] == ORG_TIP_PD) {
				format(varstring,sizeof(varstring),"HQ: Officer %s je postavio cunj, over.", ImeIgraca(playerid));
				OrgPoruka(id, 0x2641FEAA, varstring);
			}
		}
		return 1;
	}
	else if(rb == 4)
	{
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid,ploca);
		CreateRoadblock(1425,plocx,plocy,plocz+0.6,ploca);
		GameTextForPlayer(playerid,"~w~Znak usmeravanja ~g~postavljen!",3000,1);

		for(new id = 1; id < MAX_ORG; id++) {
			if(OI[id][oTip] == ORG_TIP_PD) {
				format(varstring,sizeof(varstring),"HQ: Officer %s je postavio znak usmeravanja, over.", ImeIgraca(playerid));
				OrgPoruka(id, 0x2641FEAA, varstring);
			}
		}
		return 1;
	}
	else if(rb == 5)
	{
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid,ploca);
		CreateRoadblock(3265,plocx,plocy,plocz-0.5,ploca);
		GameTextForPlayer(playerid,"~w~Znak upozorenja ~g~postavljen!",3000,1);

		for(new id = 1; id < MAX_ORG; id++) {
			if(OI[id][oTip] == ORG_TIP_PD) {
				format(varstring,sizeof(varstring),"HQ: Officer %s je postavio znak upozorenja, over.", ImeIgraca(playerid));
				OrgPoruka(id, 0x2641FEAA, varstring);
			}
		}
		return 1;
	}
	else if(rb == 6)
	{
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid,ploca);
		CreateRoadblock(3091,plocx,plocy,plocz+0.5,ploca+180);
		GameTextForPlayer(playerid,"~w~Blokada usmeravanja ~g~postavljena!",3000,1);

		for(new id = 1; id < MAX_ORG; id++) {
			if(OI[id][oTip] == ORG_TIP_PD) {
				format(varstring,sizeof(varstring),"HQ: Officer %s je postavio blokadu usmeravanja, over.", ImeIgraca(playerid));
				OrgPoruka(id, 0x2641FEAA, varstring);
			}
		}
		return 1;
	}
	else if(rb == 7)
	{
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid,ploca);
		CreateSpike(2899,plocx,plocy,plocz+0.2,ploca+180);
		GameTextForPlayer(playerid,"~w~Mala Spike za busenje guma ~g~postavljen!",3000,1);

		for(new id = 1; id < MAX_ORG; id++) {
			if(OI[id][oTip] == ORG_TIP_PD) {
				format(varstring,sizeof(varstring),"HQ: Officer %s je postavio malu spike, over.", ImeIgraca(playerid));
				OrgPoruka(id, 0x2641FEAA, varstring);
			}
		}
		return 1;
	}
	else if(rb == 8)
	{
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid,ploca);
		CreateSpike(2892,plocx,plocy,plocz,ploca+180);
		GameTextForPlayer(playerid,"~w~Velika Spike za busenje guma ~g~postavljen!",3000,1);

		for(new id = 1; id < MAX_ORG; id++) {
			if(OI[id][oTip] == ORG_TIP_PD) {
				format(varstring,sizeof(varstring),"HQ: Officer %s je postavio veliku spike, over.", ImeIgraca(playerid));
				OrgPoruka(id, 0x2641FEAA, varstring);
			}
		}
		return 1;
	}
} else SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu");
return 1;}

CMD:rrb(playerid, params[]) {
if(GetFactionType(playerid) == ORG_TIP_PD && PlayerInfo[playerid][xRank] >= 3 || PlayerInfo[playerid][xAdmin] >= 1) {
		DeleteClosestRoadblock(playerid);
	GameTextForPlayer(playerid, "~w~Roadblock ~r~Removed!", 3000, 1);}
else
		SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu");
return 1;}

CMD:rrball(playerid, params[]) {
if(GetFactionType(playerid) == ORG_TIP_PD && PlayerInfo[playerid][xRank] >= 4 || PlayerInfo[playerid][xAdmin] >= 1) {
	new varstring[120];
	DeleteAllRoadblocks(playerid);
	for(new id = 1; id < MAX_ORG; id++) {
		if(OI[id][oTip] == ORG_TIP_PD) {
			format(varstring,sizeof(varstring),"HQ: Officer %s je sklonio sve blokade u ovom podrucju, over.", ImeIgraca(playerid));
			OrgPoruka(id, 0x2641FEAA, varstring);
		}
	}
	GameTextForPlayer(playerid, "~b~All ~w~Roadblocks ~r~Removed!", 3000, 1);} else return SendErrorMessage(playerid, "Morate biti rank 4+.");
return 1;}

CMD:bk(playerid, params[]) {
if(GetFactionType(playerid)  != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
if(GetPVarInt(playerid, "RequestingBackup") != 1) {

	new varstring[120];
	format(varstring, sizeof(varstring), "SVE JEDINICE: %s trazi pojacanje i oznacen je na GPSu (crveno).", ImeIgraca(playerid));
	SetPVarInt(playerid, "RequestingBackup", 1);

	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	foreach(new i : Player) {
		if(IsPlayerConnected(i)) {
			if(OI[PlayerInfo[i][xClan]][oTip] == ORG_TIP_PD) {
				Fusion_SetPlayerCheckpoint(i, Pos[0], Pos[1], Pos[2], 5.0);
				CheckpointStatus[i] = 15;
				SCM(i, 0x8D8DFF00, varstring);
			}
		}
	}
	SCM(playerid, 0x8D8DFF00, "Ukucajte /bkc da bi ste izbrisali pojacanje.");
	backuptimer[playerid] = SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);} else return SCM(playerid, CRVENA, "Vec imate aktivan zahtev za pojacanje!");
return 1;}

CMD:bkc(playerid, params[]) {
if(GetFactionType(playerid)  != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
BackupClear(playerid, 0);
return 1;}

CMD:govrepair(playerid, params[]) {

new vehicleid = GetPlayerVehicleID(playerid);
if(GetPVarInt(playerid, "Kladjenje") == 1) return SendErrorMessage(playerid, "Ne mozete spamati sa ovom komandom!");
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu!");
if(TipVozila[vehicleid] == ORGANIZACIJSKO_VOZILO && OrgaVozila[vehicleid] == PlayerInfo[playerid][xClan]) {
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 1529.141479, -1677.842773, 5.890625) || IsPlayerInRangeOfPoint(playerid, 5.0, 1558.5233,-1627.2285,13.3828)) {
		Fusion_RepairVehicle(playerid, vehicleid);
		ac_SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
		vCanDrive[GetPlayerVehicleID(playerid)] = 1;
		antiCheatCS[playerid][VehRepairTime] = 3;
		Fuel[vehicleid] = 100;
		FuelTime[vehicleid] = 0;
		SCM(playerid, SVETLOPLAVA, "Vase vozilo je popravljeno i napunjeno gorivom.");
		SetPVarInt(playerid, "Kladjenje", 1);
		SetTimerEx("KSpam", 30000, 0, "d", playerid);
		EnableAntiCheatForPlayer(playerid, 11, 1);

	} else return SendErrorMessage(playerid, "Niste na mestu za popravku vozila!");} else return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti u vozilu policije.");
return 1;}

CMD:undercover(playerid, params[]) {
new id = PlayerInfo[playerid][xClan];
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!IsPlayerInRangeOfPoint(playerid, 2.0, OI[id][oDutyPoint][0], OI[id][oDutyPoint][1], OI[id][oDutyPoint][2])) return SendErrorMessage(playerid, "Morate biti na pickupu za koriscenje ove komande.");
if(PlayerInfo[playerid][xRank] < 3) return SendErrorMessage(playerid, "Morate biti rank 3+.");
new opcija[12],item;
new varstring[90];
if(sscanf(params, "s[12]i", opcija, item)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/undercover skin [skin id(1-6)]");
	SCM(playerid, BELA, "ILI /undercover oruzje [weapon set(1-3)]");
	SCM(playerid, BELA, "SET 1: Silence Gun, Spraycan, Parachute");
	SCM(playerid, BELA, "SET 2: Desert Deagle, MP5, Country Rifle");
	SCM(playerid, BELA, "SET 3: Silence Gun, Sniper Rifle, Parachute, Knife");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(strcmp(opcija, "skin", true) == 0) {
	if(item == 1) {
		c_SetPlayerSkin(playerid, 21);
		SCM(playerid, SVETLOPLAVA, "* Presvukli ste se i sada vas nitko nece moci prepoznati.");
		format(varstring, sizeof(varstring), "* %s skida svoju uniformu i presvlaci se.", ImeIgraca(playerid));
		PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
	}
	if(item == 2) {
		c_SetPlayerSkin(playerid, 211);
		SCM(playerid, SVETLOPLAVA, "* Presvukli ste se i sada vas nitko nece moci prepoznati.");
		format(varstring, sizeof(varstring), "* %s skida svoju uniformu i presvlaci se.", ImeIgraca(playerid));
		PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
	}
	if(item == 3) {
		c_SetPlayerSkin(playerid, 101);
		SCM(playerid, SVETLOPLAVA, "* Presvukli ste se i sada vas nitko nece moci prepoznati.");
		format(varstring, sizeof(varstring), "* %s skida svoju uniformu i presvlaci se.", ImeIgraca(playerid));
		PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
	}
	if(item == 4) {
		c_SetPlayerSkin(playerid, 183);
		SCM(playerid, SVETLOPLAVA, "* Presvukli ste se i sada vas nitko nece moci prepoznati.");
		format(varstring, sizeof(varstring), "* %s skida svoju uniformu i presvlaci se.", ImeIgraca(playerid));
		PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
	}
	if(item == 5) {
		c_SetPlayerSkin(playerid, 185);
		SCM(playerid, SVETLOPLAVA, "* Presvukli ste se i sada vas nitko nece moci prepoznati.");
		format(varstring, sizeof(varstring), "* %s skida svoju uniformu i presvlaci se.", ImeIgraca(playerid));
		PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
	}
	if(item == 6) {
		c_SetPlayerSkin(playerid, 217);
		SCM(playerid, SVETLOPLAVA, "* Presvukli ste se i sada vas nitko nece moci prepoznati.");
		format(varstring, sizeof(varstring), "* %s skida svoju uniformu i presvlaci se.", ImeIgraca(playerid));
		PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
	}
}
else if(strcmp(opcija, "oruzje", true) == 0) {
	if(item == 1) {
		GiveWeaponToPlayer(playerid, 23,100);
		GiveWeaponToPlayer(playerid, 41,500);
		GiveWeaponToPlayer(playerid, 46,1);
	}
	if(item == 2) {
		GiveWeaponToPlayer(playerid, 24,100);
		GiveWeaponToPlayer(playerid, 29,200);
		GiveWeaponToPlayer(playerid, 33,50);
	}
	if(item == 3) {
		GiveWeaponToPlayer(playerid, 23, 100);
		GiveWeaponToPlayer(playerid, 34, 100);
		GiveWeaponToPlayer(playerid, 46, 1);
		GiveWeaponToPlayer(playerid, 4, 1);
	}
}
SetPVarInt(playerid, "OfficerUndercover", 1);
SetPlayerColor(playerid, 0xFFFFFF00);
return 1;}

CMD:ram(playerid, params[]) {
if(GetFactionType(playerid)  != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
for(new i = 1; i < MAX_IMOVINA; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 2.0, II[i][iEnter][0], II[i][iEnter][1], II[i][iEnter][2])) {
		ac_SetPlayerPos(playerid, II[i][iExit][0], II[i][iExit][1], II[i][iExit][2]);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, false);
		ac_SetPlayerInterior(playerid, II[i][iInterior]);
		SetPlayerVirtualWorld(playerid, II[i][iVW]);
		inProperty[playerid] = i;
	}
}
for(new i= 1; i < MAX_ORG; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 2.0, OI[i][oPozExtX], OI[i][oPozExtY], OI[i][oPozExtZ])) {
		ac_SetPlayerPos(playerid, OI[i][oPozIntX], OI[i][oPozIntY], OI[i][oPozIntZ]);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, false);
		ac_SetPlayerInterior(playerid, OI[i][oInt]);
		SetPlayerVirtualWorld(playerid, OI[i][oVw]);
		inOrgInt[playerid] = i;
	}
}
return true;}

CMD:take(playerid, params[]) {
new opcija[20], igrac; 
new varstring[90];
if(GetFactionType(playerid) == ORG_TIP_PD) {
	if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
	if(sscanf(params, "s[20]u", opcija, igrac)) {
		SCM(playerid, SVETLOPLAVA, "|________________________________________________________|");
		SendUsageMessage(playerid, "/take [opcija] [ID/Deo imena]");
		SCM(playerid, BELA, "Ponudjene opcije: carlicense, bikelicense, c1license, c2license, planelicense");
		SCM(playerid, BELA, "Ponudjene opcije: c3license, boatlicense, gunlicense, fishlicense, drugs, weapons");
		SCM(playerid, SVETLOPLAVA, "|________________________________________________________|");
		return 1;
	}
	if(strcmp(opcija, "carlicense", true) == 0) {
		if(IsPlayerConnected(igrac)) {
			if(igrac != INVALID_PLAYER_ID) {
				if(IsPlayerNearPlayer(5.0, playerid, igrac)) {
					format(varstring, sizeof(varstring), "* Oduzeli ste %s's vozacku dozvolu B kategorije.", ImeIgraca(igrac));
					SCM(playerid, SVETLOPLAVA, varstring);
					format(varstring, sizeof(varstring), "* Policajac %s vam je oduzeo vozacku dozvolu B kategorije.", ImeIgraca(playerid));
					SCM(igrac, SVETLOPLAVA, varstring);
					PlayerInfo[igrac][xVozacka] = 0;
				} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
			}
		} else return SendErrorMessage(playerid, "Taj igrac nije online !");
	}
	else if(strcmp(opcija,"bikelicense",true) == 0) {
		if(IsPlayerConnected(igrac)) {
			if(igrac != INVALID_PLAYER_ID) {
				if(IsPlayerNearPlayer(5.0, playerid, igrac)) {
					format(varstring, sizeof(varstring), "* Oduzeli ste %s vozacku dozvolu A kategorije.", ImeIgraca(igrac));
					SCM(playerid, SVETLOPLAVA, varstring);
					format(varstring, sizeof(varstring), "* Policajac %s vam je oduzeo vozacku dozvolu A kategorije.", ImeIgraca(playerid));
					SCM(igrac, SVETLOPLAVA, varstring);
					PlayerInfo[igrac][xMotorska] = 0;
				} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
			}
		} else return SendErrorMessage(playerid, "Taj igrac nije online !");
	}
	else if(strcmp(opcija,"c1license",true) == 0) {
		if(IsPlayerConnected(igrac)) {
			if(igrac != INVALID_PLAYER_ID) {
				if(IsPlayerNearPlayer(5.0, playerid, igrac)) {
					format(varstring, sizeof(varstring), "* Oduzeli ste %s's vozacku dozvolu C1 kategorije.", ImeIgraca(igrac));
					SCM(playerid, SVETLOPLAVA, varstring);
					format(varstring, sizeof(varstring), "* Policajac %s vam je oduzeo vozacku dozvolu C1 kategorije.", ImeIgraca(playerid));
					SCM(igrac, SVETLOPLAVA, varstring);
					PlayerInfo[igrac][xKamionskaC1] = 0;
				} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
			}
		} else return SendErrorMessage(playerid, "Taj igrac nije online !");
	}
	else if(strcmp(opcija,"c2license",true) == 0) {
		if(IsPlayerConnected(igrac)) {
			if(igrac != INVALID_PLAYER_ID) {
				if(IsPlayerNearPlayer(5.0, playerid, igrac)) {
					format(varstring, sizeof(varstring), "* Oduzeli ste %s's vozacku dozvolu C2 kategorije.", ImeIgraca(igrac));
					SCM(playerid, SVETLOPLAVA, varstring);
					format(varstring, sizeof(varstring), "* Policajac %s vam je oduzeo vozacku dozvolu C2 kategorije.", ImeIgraca(playerid));
					SCM(igrac, SVETLOPLAVA, varstring);
					PlayerInfo[igrac][xKamionskaC2] = 0;
				} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
			}
		} else return SendErrorMessage(playerid, "Taj igrac nije online !");
	}
	else if(strcmp(opcija,"c3license",true) == 0) {
		if(IsPlayerConnected(igrac)) {
			if(igrac != INVALID_PLAYER_ID) {
				if(IsPlayerNearPlayer(5.0, playerid, igrac)) {
					format(varstring, sizeof(varstring), "* Oduzeli ste %s's vozacku dozvolu C3 kategorije.", ImeIgraca(igrac));
					SCM(playerid, SVETLOPLAVA, varstring);
					format(varstring, sizeof(varstring), "* Policajac %s vam je oduzeo vozacku dozvolu C3 kategorije.", ImeIgraca(playerid));
					SCM(igrac, SVETLOPLAVA, varstring);
					PlayerInfo[igrac][xKamionskaC3] = 0;
				} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
			}
		} else return SendErrorMessage(playerid, "Taj igrac nije online !");
	}
	else if(strcmp(opcija,"gunlicense",true) == 0) {
		if(IsPlayerConnected(igrac)) {
			if(igrac != INVALID_PLAYER_ID) {
				if(IsPlayerNearPlayer(5.0, playerid, igrac)) {
					format(varstring, sizeof(varstring), "* Oduzeli ste %s's dozvolu za oruzje.", ImeIgraca(igrac));
					SCM(playerid, SVETLOPLAVA, varstring);
					format(varstring, sizeof(varstring), "* Policajac %s vam je oduzeo dozvolu za oruzje.", ImeIgraca(playerid));
					SCM(igrac, SVETLOPLAVA, varstring);
					PlayerInfo[igrac][xGunLicense] = false;
				} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
			}
		} else return SendErrorMessage(playerid, "Taj igrac nije online !");
	}
	else if(strcmp(opcija,"boatlicense",true) == 0) {
		if(IsPlayerConnected(igrac)) {
			if(igrac != INVALID_PLAYER_ID) {
				if(IsPlayerNearPlayer(5.0, playerid, igrac)) {
					format(varstring, sizeof(varstring), "* Oduzeli ste %s's dozvolu za plovidbu.", ImeIgraca(igrac));
					SCM(playerid, SVETLOPLAVA, varstring);
					format(varstring, sizeof(varstring), "* Policajac %s vam je oduzeo dozvolu za plovidbu.", ImeIgraca(playerid));
					SCM(igrac, SVETLOPLAVA, varstring);
					PlayerInfo[igrac][xBrodska] = 0;
				} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
			}
		} else return SendErrorMessage(playerid, "Taj igrac nije online !");
	}
	else if(strcmp(opcija,"planelicense",true) == 0) {
		if(IsPlayerConnected(igrac)) {
			if(igrac != INVALID_PLAYER_ID) {
				if(IsPlayerNearPlayer(5.0, playerid, igrac)) {
					format(varstring, sizeof(varstring), "* Oduzeli ste %s's dozvolu za letenje.", ImeIgraca(igrac));
					SCM(playerid, SVETLOPLAVA, varstring);
					format(varstring, sizeof(varstring), "* Policajac %s vam je oduzeo dozvolu za letenje.", ImeIgraca(playerid));
					SCM(igrac, SVETLOPLAVA, varstring);
					PlayerInfo[igrac][xLetelica] = 0;
				} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
			}
		} else return SendErrorMessage(playerid, "Taj igrac nije online !");
	}
	else if(strcmp(opcija,"fishlicense",true) == 0) {
		if(IsPlayerConnected(igrac)) {
			if(igrac != INVALID_PLAYER_ID) {
				if(IsPlayerNearPlayer(5.0, playerid, igrac)) {
					format(varstring, sizeof(varstring), "* Oduzeli ste %s's dozvolu za pecanje.", ImeIgraca(igrac));
					SCM(playerid, SVETLOPLAVA, varstring);
					format(varstring, sizeof(varstring), "* Policajac %s vam je oduzeo dozvolu za pecanje.", ImeIgraca(playerid));
					SCM(igrac, SVETLOPLAVA, varstring);
					PlayerInfo[igrac][xRibarska] = 0;
				} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
			}
		} else return SendErrorMessage(playerid, "Taj igrac nije online !");
	}
	else if(strcmp(opcija,"weapons",true) == 0) {
		new oruzje = 0, w, a;
		if(IsPlayerConnected(igrac)) {
			if(igrac != INVALID_PLAYER_ID) {
				if(IsPlayerNearPlayer(4.0, playerid, igrac)) {

					for(new i = 0; i < 13; i++) {
						GetPlayerWeaponData(playerid, i, w, a);

						if(w) {
							oruzje++;
						}
					}

					SendClientMessageEx(playerid, SVETLOPLAVA, "* Oduzeli ste %s's oruzje.", ImeIgraca(igrac));
					SendClientMessageEx(igrac, SVETLOPLAVA, "* Policajac %s vam je oduzeo oruzje", ImeIgraca(playerid));
					ResetAllWeapons(igrac);
					PlayerInfo[playerid][xTakenWeps] += oruzje;
				} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
			}
		} else return SendErrorMessage(playerid, "Taj igrac nije online !");
	}
	else if(strcmp(opcija,"drugs",true) == 0) {
		new svedroge = 0;
		if(IsPlayerConnected(igrac)) {
			if(igrac != INVALID_PLAYER_ID) {
				if(IsPlayerNearPlayer(5.0, playerid, igrac)) {
					svedroge = PlayerInfo[igrac][xDrug][0] + PlayerInfo[igrac][xDrug][1] + PlayerInfo[igrac][xDrug][2] + PlayerInfo[igrac][xDrug][3] + PlayerInfo[igrac][xDrug][4];
					SendClientMessageEx(playerid, SVETLOPLAVA, "* Oduzeli ste %s's svu drogu.", ImeIgraca(igrac));
					SendClientMessageEx(igrac, SVETLOPLAVA, "* Policajac %s vam je oduzeo svu drogu.", ImeIgraca(playerid));
					PlayerInfo[playerid][xTakenDrugs] += svedroge;
					PlayerInfo[igrac][xDrug][0] = 0;
					PlayerInfo[igrac][xDrug][1] = 0;
					PlayerInfo[igrac][xDrug][2] = 0;
					PlayerInfo[igrac][xDrug][3] = 0;
					PlayerInfo[igrac][xDrug][4] = 0;
					PlayerInfo[igrac][xDrugCode][0] = 0;
					PlayerInfo[igrac][xDrugCode][1] = 0;
					PlayerInfo[igrac][xDrugCode][2] = 0;
					PlayerInfo[igrac][xDrugCode][3] = 0;
					PlayerInfo[igrac][xDrugCode][4] = 0;
				} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
			}
		} else return SendErrorMessage(playerid, "Taj igrac nije online !");
	} else return SendErrorMessage(playerid, "Nepoznato ime za oduzimanje !");} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:ticket(playerid, params[]) {
if(GetFactionType(playerid)  != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
new igrac, moneys, reason[128];
if(sscanf(params, "uis[128]", igrac, moneys, reason)) return SendUsageMessage(playerid, "/ticket [ID/Deo imena] [Cena] [razlog]");
if(moneys < 5000 || moneys > 30000) return SendErrorMessage(playerid, "Cena tiketa ne moze biti manja od 5000 i veca od 30000 !");
if(IsPlayerConnected(igrac)) {
	if(igrac != INVALID_PLAYER_ID) {
		if(IsPlayerNearPlayer(5.0, playerid, igrac)) {
			if(PlayerInfo[igrac][xNovac] < moneys) return SendErrorMessage(playerid, "Taj igrac nema toliko novaca !");
			SendClientMessageEx(playerid, SVETLOPLAVA, "* Dali ste %s tiket od $%d, razlog: %s", ImeIgraca(igrac), moneys, reason);
			SendClientMessageEx(igrac, SVETLOPLAVA, "* Policajac %s vam je dao tiket od $%d, razlog: %s", ImeIgraca(playerid), moneys, reason);
			SCM(igrac, SVETLOPLAVA, "* Ukucajte /prihvati ticket, da bi ste prihvatili tiket.");
			SetPVarInt(igrac, "TicketOffer", playerid);
			SetPVarInt(igrac, "TicketMoney", moneys);
		} else return SendErrorMessage(playerid, "Taj igrac nije dovoljno blizu vas !");
	}
} else return SendErrorMessage(playerid, "Taj igrac je Offline !");
return 1;}

CMD:carsign(playerid,params[], help) {

new tekst[10], carsignstring[15], Float:x, Float:y, Float:z;
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
if(sscanf(params, "s[10]", tekst)) return SendUsageMessage(playerid, "/carsign [Text]");
if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu!");
new vehicleid = GetPlayerVehicleID(playerid);
if(TipVozila[vehicleid] == ORGANIZACIJSKO_VOZILO && OrgaVozila[vehicleid] == PlayerInfo[playerid][xClan]) {
	GetVehiclePos(vehicleid, x, y, z);
	if(CarSign[vehicleid] == 0) {
		SCM(playerid, ZUTA, "Stavio si oznaku na svoje vozilu!");
		CarSign[vehicleid] = 1;
		format(carsignstring, sizeof(carsignstring), "%s", tekst);
		vehicle3Dtext[vehicleid] = Create3DTextLabel(carsignstring, 0xFFFFFFC8, x, y, z, 10.0, 0, 1);
		Attach3DTextLabelToVehicle(vehicle3Dtext[vehicleid] , vehicleid, -0.800000, -2.899999, 0.000000);
	}
	else if(CarSign[vehicleid] == 1) {
		SCM(playerid, ZUTA, "Skinuo si oznaku sa svog vozila!");
		Delete3DTextLabel(vehicle3Dtext[vehicleid]);
		CarSign[vehicleid] = 0;
	}
} else return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti u vozilu policije.");
return 1;}

CMD:orgstats(playerid, params[]) {
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
ShowPDStats(playerid, playerid);
return 1;}

CMD:siren(playerid, params[]) {
if(GetFactionType(playerid) == ORG_TIP_PD) {
	new type;
	new varstring[90];
	new VID = GetPlayerVehicleID(playerid);
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu!");
	if(IsVehicleBajs(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Ne moze sirena na biciklu!");
	if(IsVehicleMotor(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Ne moze sirena na motor!");
	if(sscanf(params, "d", type))
	{
		SendUsageMessage(playerid, "/siren [Tip]");
		SCM(playerid, BELA, "Tipovi: 1 = unutrasnjost, 2 = krov, 3 = ugasi.");
		return 1;
	}
	switch(type)
	{
		case 1:
		{
			if(Siren[VID] == 1) return SendErrorMessage(playerid, "Na ovom vozilu je vec postavljena sirena!");
			Siren[VID] = 1;
			SirenObject[VID] = CreateDynamicObject(18646, 10.0, 10.0, 1500.0, 0, 0, 0);
			AttachDynamicObjectToVehicle(SirenObject[VID], VID, 0.0, 0.75, 0.275, 0.0, 0.1, 0.0);

			if(Maskuse[playerid] == false)
				format(varstring, sizeof(varstring), "* %s stavlja sirenu na plocu s instrumentima.", ImeIgraca(playerid));
			else
				format(varstring, sizeof(varstring), "* Maska_%d stavlja sirenu na plocu s instrumentima.", PlayerInfo[playerid][xMaskID]);

			format(varstring, sizeof(varstring), "* %s stavlja sirenu na plocu s instrumentima.", ImeIgraca(playerid));
			PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
			return 1;
		}
		case 2:
		{
			if(Siren[VID] == 1) return SendErrorMessage(playerid, "Na ovom vozilu vec' je postavljena sirena!");
			Siren[VID] = 1;
			SirenObject[VID] = CreateDynamicObject(18646, 10.0, 10.0, 1500.0, 0, 0, 0);
			AttachDynamicObjectToVehicle(SirenObject[VID], VID, -0.43, 0.0, 0.785, 0.0, 0.1, 0.0);

			if(Maskuse[playerid] == false)
				format(varstring, sizeof(varstring), "* %s stavlja sirenu na krov.", ImeIgraca(playerid));
			else
				format(varstring, sizeof(varstring), "* Maska_%d stavlja sirenu na krov.", PlayerInfo[playerid][xMaskID]);

			PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
			return 1;
		}
		case 3:
		{
			if(Siren[VID] == 0) return SendErrorMessage(playerid, "Nema ugradjene sirene u ovom vozilu!");
			Siren[VID] = 0;
			DestroyDynamicObject(SirenObject[VID]);

			if(Maskuse[playerid] == false)
				format(varstring, sizeof(varstring), "* %s gasi i mice sirenu.", ImeIgraca(playerid));
			else
				format(varstring, sizeof(varstring), "* Maska_%d gasi i mice sirenu.", PlayerInfo[playerid][xMaskID]);

			PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
			return 1;
		}
		default:
		{
			SCM(playerid, CRVENA, "Pogresan tip sirene! /siren [Tip]");
			SCM(playerid, CRVENA, "Tipovi: 1 = Unutrasnjost, 2 = Krov, 3 = Ugasi.");
		}
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:suspend(playerid, params[]) {

if(PlayerInfo[playerid][xRank] < 5) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");

new id;
if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/suspend [ID/Deo imena] ");
if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID Korisnika");
if(PlayerInfo[playerid][xRank] < 6 && PlayerInfo[id][xRank] >= 5) return SendErrorMessage(playerid, "Ne mozes suspendovati rank 5+.");

PlayerInfo[id][xRank] = 0;
SavePlayer(id);

SendInfoMessage(playerid, "Suspendovali ste igraca %s.", ImeIgraca(id));
SendInfoMessage(playerid, "Da skines suspend igracu, samo mu daj rank 1+.");
SendInfoMessage(id, "%s vas je suspendovao.", ImeIgraca(playerid));

return 1;}

CMD:gov(playerid, params[]) {
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
if(PlayerInfo[playerid][xRank] < 5) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(GetFactionType(playerid) != ORG_TIP_PD && GetFactionType(playerid) != ORG_TIP_MD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new tekst[90], string[128];
if(sscanf(params, "s[90]", tekst)) return SendUsageMessage(playerid, "/gov [tekst]");
SCMA(-1, "{0049FF]|-----------------------------{C0C0C0]Najava iz Uprave{0049FF]-----------------------------|");
format(string, sizeof(string), "{0049FF][%s] "col_white"%s %s: {0049FF]%s", OI[PlayerInfo[playerid][xClan]][oPreFix], getOrgRank(playerid, PlayerInfo[playerid][xClan]), ImeIgraca(playerid), tekst);
SCMA(-1, string);
SCMA(-1, "{0049FF]|--------------------------------------------------------------------------------|");
return true;}

CMD:mandescription(playerid, params[]) {

new ime[24], text[64], text2[64];
if(GetFactionType(playerid)  != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
if(sscanf(params, "s[24]s[64]s[64]", ime, text, text2)) return SendUsageMessage(playerid, "/mandescription [Ime] [Opis] [Zlocin]");
foreach(new i : Player) {
	if(OI[PlayerInfo[i][xClan]][oTip] == ORG_TIP_PD) {
		SCM(i, -1, "{0049FF]|----------------------OPIS LIKA-----------------------|");
		SendClientMessageEx(i, BELA, "- Ime: %s", ime);
		SendClientMessageEx(i, BELA, "- Zlocin: %s", text2);
		SendClientMessageEx(i, BELA, "- Opis: %s", text);
		SCM(i, -1, "{0049FF]|------------------------------------------------------|"); } ]
return 1;}

CMD:equipment(playerid, params[]) {
new id = PlayerInfo[playerid][xClan];
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
if(!IsPlayerInRangeOfPoint(playerid, 3.0, OI[id][oEquipPoint][0], OI[id][oEquipPoint][1], OI[id][oEquipPoint][2])) return SendErrorMessage(playerid, "Nisi kod Armory-ja.");
SPD(playerid, dialog_OPREMA, DSL, D_NASLOV,  "Patrolska oprema\nStandardna oprema\nSpecijalna oprema\nProfesionalna oprema\nSnajperska oprema\nPancir\nHealth\nRiot Shield\nSWAT uniforma\nLisice\nTazer metkovi", D_ODABERI, D_ODUSTANI);
return true;}

CMD:removearm(playerid, params[]) {
if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_LHAND) && RiotShield[playerid] == true) {
	RiotShield[playerid] = false;
	new varstring[50];
	RemovePlayerAttachedObject(playerid, OBJECT_SLOT_LHAND);
	format(varstring, sizeof(varstring), "* %s odbacuje Riot Shield.", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);}
else return SendErrorMessage(playerid,  "Nemas Riot Shield u ruci!");
return true;}

CMD:frisk(playerid, params[]) {
new igrac, weapon[13], bullets[13];
if(GetFactionType(playerid)  != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
if(sscanf(params, "u", igrac)) return SCM(playerid, BELA, "BELA: /frisk [ID/Deo imena]");
if(IsPlayerConnected(igrac)) {
	if(igrac != INVALID_PLAYER_ID) {
		if(IsPlayerNearPlayer(5.0, playerid, igrac) && !IsPlayerInAnyVehicle(playerid) && !IsPlayerInAnyVehicle(igrac)) {
			if(igrac == playerid) return SendErrorMessage(playerid, "Ne mozes pretrest sam sebe!");

			new varstring[128];
			format(varstring, sizeof(varstring), "Materijali: %d", PlayerInfo[igrac][xMaterijali]);
			SCM(playerid, BELA, varstring);
			format(varstring, sizeof(varstring), "[_________________________ %s DROGE _________________________=]", ImeIgraca(igrac));
			SCM(playerid, SVETLOPLAVA, varstring);
			format(varstring, sizeof(varstring), "Slot 1: [%s(%d g)]", GetDrugNameByDrugID(PlayerInfo[igrac][xDrugCode][0]), PlayerInfo[igrac][xDrug][0]);
			SCM(playerid, BELA, varstring);
			format(varstring, sizeof(varstring), "Slot 2: [%s(%d g)]", GetDrugNameByDrugID(PlayerInfo[igrac][xDrugCode][1]), PlayerInfo[igrac][xDrug][1]);
			SCM(playerid, BELA, varstring);
			format(varstring, sizeof(varstring), "Slot 3: [%s(%d g)]", GetDrugNameByDrugID(PlayerInfo[igrac][xDrugCode][2]), PlayerInfo[igrac][xDrug][2]);
			SCM(playerid, BELA, varstring);
			format(varstring, sizeof(varstring), "Slot 4: [%s(%d g)]", GetDrugNameByDrugID(PlayerInfo[igrac][xDrugCode][3]), PlayerInfo[igrac][xDrug][3]);
			SCM(playerid, BELA, varstring);
			format(varstring, sizeof(varstring), "Slot 5: [%s(%d g)]", GetDrugNameByDrugID(PlayerInfo[igrac][xDrugCode][4]), PlayerInfo[igrac][xDrug][4]);
			SCM(playerid, BELA, varstring);
			format(varstring, sizeof(varstring), "* %s je pretrazio %s za ilegalne predmete.", ImeIgraca(playerid), ImeIgraca(igrac));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			format(varstring, sizeof(varstring), "[_________________________ %s ORUZJE ________________________=]", ImeIgraca(igrac));
			SCM(playerid, SVETLOPLAVA, varstring);
			for(new slot = 0; slot < 13; slot++) {
				GetPlayerWeaponData(igrac, slot, weapon[slot], bullets[slot]);

				if(weapon[slot] > 0 && bullets[slot] > 0) {
					format(varstring, sizeof(varstring), "ORUZJE: %s, METAKA: %d.", WeapNames[weapon[slot}}, bullets[slot]);
					SCM(playerid, BELA, varstring);
				}
			}
		} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
	}
} else return SendErrorMessage(playerid, "Taj igrac nije online !");
return 1;}

CMD:proveriidvozila(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 4) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

new ID;
if(sscanf(params, "d", ID)) return SendUsageMessage(playerid, "/proveriidvozila [ID/Deo imena]");
if(!IsPlayerConnected(ID)) return SendErrorMessage(playerid, "Nepravilni ID");

SendClientMessageEx(playerid, 0xF0F0F0FF, "%s - VOZILA", ImeIgraca(ID));

new varstring[25];
if(PlayerInfo[ID][xVoziloID][0] != -1) {
	format(varstring, sizeof(varstring), "ID Vozila1 [%d]", VehicleInfo[PlayerInfo[ID][xVoziloID][0]][vID]);
	SendClientMessage(playerid, 0xF0F0F0FF,varstring);}
if(PlayerInfo[ID][xVoziloID][1] != -1) {
	format(varstring, sizeof(varstring), "ID Vozila2 [%d]", VehicleInfo[PlayerInfo[ID][xVoziloID][1]][vID]);
	SendClientMessage(playerid, 0xF0F0F0FF,varstring);}
if(PlayerInfo[ID][xVoziloID][2] != -1) {
	format(varstring, sizeof(varstring), "ID Vozila3 [%d]", VehicleInfo[PlayerInfo[ID][xVoziloID][2]][vID]);
	SendClientMessage(playerid, 0xF0F0F0FF,varstring);}
if(PlayerInfo[ID][xVoziloID][3] != -1) {
	format(varstring, sizeof(varstring), "ID Vozila4 [%d]", VehicleInfo[PlayerInfo[ID][xVoziloID][3]][vID]);
	SendClientMessage(playerid, 0xF0F0F0FF,varstring);}

return 1;}

CMD:proveripojas(playerid, params[]) {

new ID;
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
if(sscanf(params, "d", ID)) return SendUsageMessage(playerid, "/proveripojas [ID/Deo imena]");
if(!IsPlayerConnected(ID)) return SendErrorMessage(playerid, "Nepravilni ID");
if(!IsPlayerNearPlayer(3.0, playerid, ID)) return SendErrorMessage(playerid, "Taj igrac nije pored vas.");
if(!IsPlayerInAnyVehicle(ID)) return SendErrorMessage(playerid, "Igrac nije u vozilu.");
if(Pojas[ID] == true) return SCM(playerid, SVETLOPLAVA, "* Igrac je vezan.");
else return SCM(playerid, SVETLOPLAVA, "* Igrac nije vezan.");}

CMD:arrest(playerid, params[]) {
if(GetFactionType(playerid) == ORG_TIP_PD) {
	if(IsPlayerInRangeOfPoint(playerid, 10, 1579.6222,-1631.8275,13.3828) || IsPlayerInRangeOfPoint(playerid, 10, 1568.8879,-1693.3973,5.8906)) {
		new id;
		if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/arrest [ID/Deo imena]");
		if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
		if(IsPlayerConnected(id)) {
			if(id != INVALID_PLAYER_ID) {
				if(id == playerid) return SendErrorMessage(playerid, "Ne mozete uhapsiti sami sebe!");
				if(OI[PlayerInfo[id][xClan]][oTip] == ORG_TIP_PD) return SendErrorMessage(playerid, "Ne mozes uhapsiti policajca.");
				if(PlayerInfo[id][xZatvor] != 0) return SendErrorMessage(playerid, "Igrac je vec u zatvoru.");
				if(!IsPlayerNearPlayer(5.0, playerid, id)) return SendErrorMessage(playerid, "Taj igrac nije dovoljno blizu vas.");
				if(PlayerInfo[id][xWanted] < 1) return SendErrorMessage(playerid, "Igrac nije osumnjicen.");
				new time = PlayerInfo[id][xWanted]*6;
				new bailprice = PlayerInfo[id][xWanted]*250000;

				new varstring[90];
				format(varstring, sizeof(varstring), "* Priveli ste %s i dobili %d$!", ImeIgraca(id), PlayerInfo[id][xWanted]*2000);
				SCM(playerid, SVETLOCRVENA, varstring);

				for(new i = 1; i < MAX_ORG; i++) {
					if(OI[i][oTip] == ORG_TIP_PD) {
						format(varstring, sizeof(varstring), "< Policajac %s je uhapsio osumnjicenog %s. >", ImeIgraca(playerid), ImeIgraca(id));
						OrgPoruka(i, SVETLOCRVENA, varstring);
					}
				}
				format(varstring, sizeof(varstring), "Uhapsio vas je %s", ImeIgraca(playerid));
				GameTextForPlayer(id, varstring, 5000, 5);
				ResetAllWeapons(id);
				PlayerInfo[id][xZatvor] = OBICAN_ZATVOR;
				PlayerInfo[id][xZatvorVreme] = time;
				spawnose[id] = 0;
				SetTimerEx("Resetspawnvar", 8000, false, "i", id);

				PlayerInfo[id][xBailPrice] = bailprice;
				SendClientMessageEx(id, SVETLOPLAVA, "Pritvoreni ste na %d minuta. Kaucija: $%d", PlayerInfo[id][xZatvorVreme], PlayerInfo[id][xBailPrice]);

				DajIgracuNovac(playerid, PlayerInfo[id][xWanted]*2000);
				DragedPlayerID[playerid] = -1;
				Draged[id] = -1;
				PlayerInfo[id][xUhapsen] += 1;
				PlayerInfo[playerid][xPDUhapsio] += 1;
				ClearAnimations(id);
				if(IsPlayerAttachedObjectSlotUsed(id, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(id, OBJECT_SLOT_RHAND);
				SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
				PlayerCuffed[id] = 0;

				new rand = random(sizeof(RandomZatvor));
				ac_SetPlayerPos(id, RandomZatvor[rand][0], RandomZatvor[rand][1],RandomZatvor[rand][2]);
				PlayerInfo[id][xWanted] = 0;
				Fusion_SetPlayerWantedLevel(id, PlayerInfo[id][xWanted]);
				strmid(ZlocinInfo[id][zPrijavio], "Nema", 0, strlen("Nema"), 255);
				strmid(ZlocinInfo[id][zPocinio], "Nema", 0, strlen("Nema"), 255);
				strmid(ZlocinInfo[id][zZlocin], "Nema", 0, strlen("Nema"), 255);
				GameTextForPlayer(id, "Ucitavanje ...", 1000, 4);
				SetTimerEx("SlobodnoSada", 2000, false, "i", id);
				SetCameraBehindPlayer(id); ac_SetPlayerInterior(id, 0);
				SetPlayerVirtualWorld(id, 0);
				TogglePlayerControllable(id, 0);
				SavePlayer(id);

				format(varstring, sizeof(varstring), "[FG] Vesti | "col_white"%s je upravo uhapsen od strane policajca %s.", ImeIgraca(id), OI[PlayerInfo[playerid][xClan]][oPreFix]);
				OOCNews(0xFFA500AA, varstring);

				format(varstring, sizeof(varstring), "ARREST | %s je uhapsio igraca %s | Vreme: %dmin", ImeIgraca(playerid), ImeIgraca(id), time);
				AdminPoruka(NARACRVENA, varstring);
				return 1;
			}
		}
	} else return SendErrorMessage(playerid, "Morate biti kod arrest pointa.");} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:live(playerid, params[]) {
if(!IsPlayerInRangeOfPoint(playerid, 10.0, 925.0778, -957.3702, -48.7380)) return SendErrorMessage(playerid, "Niste na mestu za koriscenje /live!");
if(GetFactionType(playerid)   != ORG_TIP_CNN) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PlayerInfo[playerid][xRank] < 3) return SendErrorMessage(playerid, "Morate biti rank 3 da biste koristili /live!");
if(GetPVarInt(playerid, "TalkingLive") != 255) {
	SCM(playerid, 0x33CCFFAA, "* Razgovor uzivo zavrsio.");
	SCM(GetPVarInt(playerid, "TalkingLive"), 0x33CCFFAA, "* Razgovor uzivo zavrsio.");
	TogglePlayerControllable(playerid, true);
	TogglePlayerControllable(GetPVarInt(playerid, "TalkingLive"), 1);
	SetPVarInt(GetPVarInt(playerid, "TalkingLive"), "TalkingLive", 255);
	SetPVarInt(playerid, "TalkingLive", 255);
	return 1;}
new id;
if(sscanf(params, "u", id)) {
	SendUsageMessage(playerid, "/live [ID/Deo imena]");
	return 1;}
if(id == playerid) return SendErrorMessage(playerid, "Ne mozes sam sebi /live!");
if(!IsPlayerNearPlayer(3.0, playerid, id)) return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
SendClientMessageEx(playerid, 0x33CCFFAA, "* Ponudili ste %s razgovor uzivo.", ImeIgraca(id));
SendClientMessageEx(id, 0x33CCFFAA, "* %s vam je ponudio razgovor uzivo, ukucajte /prihvati live ako zelite prihvatit.", ImeIgraca(playerid));
SetPVarInt(id, "LiveOffer", playerid);
return 1;}

CMD:vesti(playerid, params[]) {

new text[128], string[234];
if(GetFactionType(playerid) != ORG_TIP_CNN) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu!");
new vehicleid = GetPlayerVehicleID(playerid);
if(TipVozila[vehicleid] == ORGANIZACIJSKO_VOZILO && OrgaVozila[vehicleid] == PlayerInfo[playerid][xClan]) {
	if(!newsbre) {
		SendErrorMessage(playerid, "Mora proci %d sekundi izmedju slanja novosti !",  (newstimer/1000));
		return 1;
	}
	if(sscanf(params, "s[128]", text)) return SendUsageMessage(playerid, "/vesti [Text]");
	if(strfind(text, "~", true) != -1) {
		SendErrorMessage(playerid, "Nedopusten znak u novostima (~)!");
		return 1;
	}
	SetTimer("NewsOn", newstimer, 0);
	newsbre = 0;
	PlayerInfo[playerid][xBrojNews]++;
	format(string, sizeof(string), "[FG] Vesti | %s: "col_white"%s", ImeIgraca(playerid), text);
	OOCNews(0xFFA500AA, string);} else return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti u vozilu novinara");
return 1;}

CMD:newsstats(playerid, params[]) {
if(GetFactionType(playerid)   != ORG_TIP_CNN) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
SendClientMessage(playerid, 0x33CCFFAA, "__________CNN STATS_________");
SendClientMessageEx(playerid, BELA, "Broj objavljenih newsa: [%d]", PlayerInfo[playerid][xBrojNews]);
SendClientMessage(playerid, 0x33CCFFAA, "____________________________");
return 1;}

CMD:mduty(playerid, params[]) {
if(GetFactionType(playerid)  != ORG_TIP_MD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2287.8516, 88.6287, -5.3042)) return SendErrorMessage(playerid, "Morate biti pored ormarica da bi koristili ovu komandu.");
if(MedicDuty[playerid] == false) {
	SCM(playerid, SVETLOPLAVA, "* Sada ste na duznosti doktora i primati cete pozive.");
	MedicDuty[playerid] = true;
	Medics += 1;}
else if(MedicDuty[playerid] == true) {
	SCM(playerid, SVETLOPLAVA, "* Vise niste na duznosti doktora i necete primati vise pozive.");
	MedicDuty[playerid] = false;
	Medics -= 1;}
return true;}

CMD:muniform(playerid, params[]) {
if(GetFactionType(playerid)  != ORG_TIP_MD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(IsPlayerInRangeOfPoint(playerid, 2.0, -2287.8516, 88.6287, -5.3042)) {
	SPD(playerid, dialog_MUNifORM, DSL, D_NASLOV, "Skin 1\nSkin 2\nSkin 3\nSkin 4", D_ODABERI, D_ODUSTANI);
	Fusion_SetPlayerHealth(playerid, 100);}
return 1;}

CMD:medicine(playerid, params[]) {
new igrac, money, vehicleid = GetPlayerVehicleID(playerid);
if(GetFactionType(playerid) == ORG_TIP_MD) {
	if(TipVozila[vehicleid] == ORGANIZACIJSKO_VOZILO && OrgaVozila[vehicleid] == PlayerInfo[playerid][xClan]) {
		if(sscanf(params, "ui", igrac, money)) {
			SendUsageMessage(playerid, "/medicine [ID/Deo Imena] [Cena]");
			return 1;
		}
		if(money < 1 || money > 100) return SendErrorMessage(playerid, "Cena leka ne moze biti manja od 1 i veca od 100$!");
		if(PlayerInfo[igrac][xLevel] < 3) return SendErrorMessage(playerid, "Ne mozes leciti igraca manjeg levela od 3.");
		if(PlayerInfo[igrac][xNovac] < money) return SendErrorMessage(playerid, "Samo probaj !");
		if(IsPlayerConnected(igrac)) {
			if(igrac != INVALID_PLAYER_ID) {
				if(IsPlayerNearPlayer(5.0, playerid, igrac)) {
					if(igrac == playerid) return SendErrorMessage(playerid, "Ne mozete sami sebi prodati lek !");
						SendClientMessageEx(playerid, SVETLOPLAVA, "* Ponudili ste lek %s za $%d.", ImeIgraca(igrac), money);
						SendClientMessageEx(igrac, SVETLOPLAVA, "* Doktor %s vam je ponudio lek za $%d. Upisite /prihvati medicine ako zelite uzeti lek da vam obnovi energiju.", ImeIgraca(playerid), money);
					SetPVarInt(igrac, "MedicineOffer", playerid);
					SetPVarInt(igrac, "MedicineMoney", money);
					} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas!");
				}
		}
		return 1;
	}
	else return SendErrorMessage(playerid, "Niste u autu hitne pomoci!");}
return 1;}

CMD:lek(playerid, params[]) {
if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2322.9973, 110.1389, -5.3942)) return SendErrorMessage(playerid, "Morate biti u bolnici.");
Fusion_SetPlayerHealth(playerid, 100);
TogglePlayerControllable(playerid, true);
PlayerInfo[playerid][xUbijen] = 0;
SendClientMessage(playerid, -1, ""col_green"[DOKTOR]: {FFFFFF]Izleceni ste i Vase zdravlje je sada na 100 posto.");
return 1;}

CMD:izlecizavisnost(playerid, params[]) {

if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2323.0134, 113.0339, -5.3942)) return SendErrorMessage(playerid, "Morate biti u bolnici.");
if(PlayerInfo[playerid][xNovac] < 25000) return SendErrorMessage(playerid, "Nemas dovoljno novca (25000$).");

DajIgracuNovac(playerid, -25000);

PlayerInfo[playerid][xHeroinAddict] = false;
PlayerInfo[playerid][xHeroinUsed] = 0;
PlayerInfo[playerid][xHeroinIndicator] = 0;
PlayerInfo[playerid][xCokeCrackAddict] = false;
PlayerInfo[playerid][xCokeCrackUsed] = 0;
PlayerInfo[playerid][xCokeCrackIndicator] = 0;
PlayerInfo[playerid][xMethAddict] = false;
PlayerInfo[playerid][xMethIndicator] = 0;
PlayerInfo[playerid][xMethUsed] = 0;
SavePlayer(playerid);

TogglePlayerControllable(playerid, false);

Fusion_SetPlayerHealth(playerid, 80.0);
ac_SetPlayerInterior(playerid, playerid+1);
SetPlayerVirtualWorld(playerid, playerid+1);

ac_SetPlayerPos(playerid, -2291.1831,119.9234,-4.4141);
SetPlayerFacingAngle(playerid, 270.4962);
LoopingAnim(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);

SendClientMessage(playerid, -1, ""col_green"[DOKTOR]: {FFFFFF]Bicete izleceni za 180 sekundi, sacekajte malo...");

InterpolateCameraPos(playerid, -2287.646484, 123.272109, -3.711278, -2293.113037, 123.070518, -4.156746, 10000, CAMERA_MOVE);
InterpolateCameraLookAt(playerid, -2291.025146, 119.771987, -4.866029, -2290.749023, 118.772224, -5.124464, 10000, CAMERA_MOVE);

Odbrojavanje[playerid] = 180;
VremeTDControl(playerid, true);

BolnicaTimer[playerid] = SetTimerEx("IzlecenOdZavisnosti", 180000, false, "i", playerid);
return 1;}

CMD:dajinekciju(playerid, params[]) {
new vehicleid = GetPlayerVehicleID(playerid), igrac;
if(GetFactionType(playerid) == ORG_TIP_MD) {
	if((TipVozila[vehicleid] == ORGANIZACIJSKO_VOZILO && OrgaVozila[vehicleid] == PlayerInfo[playerid][xClan]) || InAmbu[playerid] != -1) {
		if(sscanf(params, "u", igrac)) {
			SendUsageMessage(playerid, "/dajinekciju [ID/Deo imena]");
			return 1;
		}
		if(IsPlayerConnected(igrac)) {
			if(igrac != INVALID_PLAYER_ID) {
				if(IsPlayerNearPlayer(4.0, playerid, igrac)) {
					//if(PovredjenIgrac[igrac] == true) {
						if(igrac == playerid) return SendErrorMessage(playerid, "Ne mozete sami sebi dati injekciju !");
						SendClientMessageEx(playerid, SVETLOPLAVA, "* Dali ste %s injekciju protiv bolova,sada ce se ta osoba moci kretati i uci u bolnicu.", ImeIgraca(igrac));
						SendClientMessageEx(igrac, SVETLOPLAVA, "* Doktor %s vam je dao injekciju,sada cete moci uci u bolnicu i izlijeciti se do kraja(/lek)", ImeIgraca(playerid));
						TogglePlayerControllable(igrac, 1);
						new varstring[90];
						format(varstring, sizeof(varstring), "* %s uzima injekciju i pika u ruku osobu %s.", ImeIgraca(playerid), ImeIgraca(igrac));
						PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
						return 1;
					//] else return SendErrorMessage(playerid, "Taj igrac nije ozlijedjen!");
					} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas!");
				}
		}
		return 1;
	} else return SendErrorMessage(playerid, "Niste u autu hitne pomoci!");}
return 1;}

CMD:recover(playerid, params[]) {
new moneys, igrac;
if(GetFactionType(playerid) == ORG_TIP_MD) {
	if(sscanf(params, "ui", igrac, moneys)) {
		SendUsageMessage(playerid, "/recover [ID/Deo Imena] [Cena]");
		return 1;
	}
	if(moneys < 1 || moneys > 50) return SendErrorMessage(playerid, "Cena lecenja ne moze biti manja od 1 i veca od 50$!");
	if(IsPlayerConnected(igrac)) {
		if(igrac != INVALID_PLAYER_ID) {
			if(IsPlayerNearPlayer(3.0, playerid, igrac)) {
				if(PlayerInfo[igrac][xLevel] < 3) return SendErrorMessage(playerid, "Ne mozes leciti igraca manjeg levela od 3.");
				if(igrac == playerid) return SendErrorMessage(playerid, "Ne mozes ozdraviti sam sebe!");
				if(PlayerInfo[igrac][xNovac] < moneys) return SendErrorMessage(playerid, "Samo probaj !");
				SendClientMessageEx(playerid, SVETLOPLAVA, "* Ponudio si %s lecenje u cijeni od $%d", ImeIgraca(igrac), moneys);
				SendClientMessageEx(igrac, SVETLOPLAVA, "* Doktor %s ti je ponudio lecenje u cijeni od $%d", ImeIgraca(playerid), moneys);
				SCM(igrac, SVETLOPLAVA, "* Ukucaj /prihvati recover da prihvatis lecenje.");
				SetPVarInt(igrac, "RecoverOffer", playerid);
				SetPVarInt(igrac, "RecoverMoney", moneys);
			} else return SendErrorMessage(playerid, "Taj igrac nije blizu tebe !");
		}
	}
} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
forward TimerGoto(playerid);
public TimerGoto(playerid) {
KillTimer(GotoTimer[playerid]);
TPZahtev[playerid] = -1;
return 1;}
forward Vuci(playerid);
public Vuci(playerid) {
if(IsPlayerConnected(playerid)) {
	if(IsPlayerConnected(DragedPlayerID[playerid])) {

		if(!IsPlayerInAnyVehicle(playerid) && (!IsPlayerInAnyVehicle(DragedPlayerID[playerid]) || IsPlayerInAnyVehicle(DragedPlayerID[playerid]))) {

			new Float:Pos[3];
			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			SetPlayerPos(DragedPlayerID[playerid], Pos[0],  Pos[1]+0.4, Pos[2]);
			ac_SetPlayerInterior(DragedPlayerID[playerid], GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(DragedPlayerID[playerid], GetPlayerVirtualWorld(playerid));
		}
		else if(IsPlayerInAnyVehicle(playerid) && !IsPlayerInAnyVehicle(DragedPlayerID[playerid])) {

			new vehicle = GetPlayerVehicleID(playerid);
			if(IsSeatAvailable(vehicle, 1)) {
				ac_PutPlayerInVehicle(DragedPlayerID[playerid], vehicle, 1);
			}
			else if(IsSeatAvailable(vehicle, 2)) {
				ac_PutPlayerInVehicle(DragedPlayerID[playerid], vehicle, 2);
			}
			else if(IsSeatAvailable(vehicle, 3)) {
				ac_PutPlayerInVehicle(DragedPlayerID[playerid], vehicle, 3);
			}
		}
	}
	else {
		DragedPlayerID[playerid] = -1;
		//SendInfoMessage(playerid, "Igrac kog ste vukli je napustio server.");
		Fusion_KillTimer(DragTimer[playerid]);
	}
}
return 1;}

CMD:pdslap(playerid, params[]) {
new igrac, Float:x, Float:y, Float:z;
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(sscanf(params, "u", igrac)) {
	SendUsageMessage(playerid, "/pdslap [ID/Deo Imena]");
	return 1;}
if(igrac != INVALID_PLAYER_ID) {
	if(IsPlayerConnected(igrac)) {
		//if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Izadjite iz vozila prvo.");
		if(!IsPlayerInAnyVehicle(igrac)) return SendErrorMessage(playerid, "Igrac mora biti u vozilu.");
		if(igrac == playerid) return SendErrorMessage(playerid, "Ne mozete vuci sami sebe.");
		if(IsPlayerNearPlayer(5.0, playerid, igrac)) {

			new varstring[89];
			format(varstring, sizeof(varstring), "* %s vas je izbacio iz vozila.", ImeIgraca(playerid));
			SCM(igrac, SVETLOPLAVA, varstring);
			format(varstring, sizeof(varstring), "* Izbacili ste %s iz vozila.", ImeIgraca(igrac));
			SCM(playerid, SVETLOPLAVA, varstring);
			format(varstring, sizeof(varstring), "* %s je izbacio %s iz vozila.", ImeIgraca(playerid) ,ImeIgraca(igrac));
			PorukaRadius(30.0, playerid, varstring, LJUBICASTA);

			GetPlayerPos(igrac, x, y, z);
			ac_SetPlayerPos(igrac, x, y, z+5);
			if(antiCheatCS[igrac][TakeVehicle] != INVALID_VEHICLE_ID) {
				BusyVehicle[antiCheatCS[igrac][TakeVehicle]] = -1;
			}
		} else return SendErrorMessage(playerid, "Igrac nije pored vas.");
	}
} else return SendErrorMessage(playerid, "Pogresan ID igraca.");
return true;}

CMD:vuci(playerid, params[]) {
new igrac;
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(sscanf(params, "u", igrac)) {
	SendUsageMessage(playerid, "/vuci [ID/Deo Imena]");
	return 1;}
if(igrac != INVALID_PLAYER_ID) {
	if(IsPlayerConnected(igrac)) {
		//if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Izadjite iz vozila prvo.");
		//if(IsPlayerInAnyVehicle(igrac)) return SendErrorMessage(playerid, "Morate prvo izbaciti igraca iz vozila.");
		if(DragedPlayerID[playerid] != -1) return SendErrorMessage(playerid, "Ne mozete vuci vise od jednog igraca u isto vreme");
		if(igrac == playerid) return SendErrorMessage(playerid, "Ne mozete vuci sami sebe.");
		if(PlayerCuffed[igrac] != 2) return SendErrorMessage(playerid, "Igracu prvo morate staviti lisice.");
		if(IsPlayerNearPlayer(5.0, playerid, igrac)) {

			new varstring[60];
			format(varstring, sizeof(varstring), "* %s vas vuce.", ImeIgraca(playerid));
			SCM(igrac, SVETLOPLAVA, varstring);
			format(varstring, sizeof(varstring), "* Vucete %s.", ImeIgraca(igrac));
			SCM(playerid, SVETLOPLAVA, varstring);
			format(varstring, sizeof(varstring), "* %s vuce %s.", ImeIgraca(playerid) ,ImeIgraca(igrac));
			PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
			DragedPlayerID[playerid] = igrac;
			Draged[igrac] = playerid;
			DragTimer[playerid] = SetTimerEx("Vuci", 800, true, "i", playerid, 1);
		} else return SendErrorMessage(playerid, "Igrac nije pored vas.");
	}
} else return SendErrorMessage(playerid, "Pogresan ID igraca.");
return true;}

CMD:pusti(playerid, params[]) {
new igrac;
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(sscanf(params, "u", igrac)) {
	SendUsageMessage(playerid, "/pusti [ID/Deo Imena]");
	return 1;}
if(igrac != INVALID_PLAYER_ID) {
	if(IsPlayerConnected(igrac)) {
		if(igrac == playerid) return SendErrorMessage(playerid, "Ne mozete vuci sami sebe.");
		if(IsPlayerNearPlayer(5.0, playerid, igrac)) {
			if(igrac == DragedPlayerID[playerid]) {
				new varstring[89];
				format(varstring, sizeof(varstring), "%s vas je pustio.", ImeIgraca(playerid));
				SCM(igrac, -1, varstring);
				format(varstring, sizeof(varstring), "Pustili ste %s.", ImeIgraca(igrac));
				SCM(playerid, -1, varstring);
				Fusion_KillTimer(DragTimer[playerid]);
				DragedPlayerID[playerid] = -1;
				Draged[igrac] = -1;
			} else return SendErrorMessage(playerid, "Ne vucete tog igraca.");
		} else return SendErrorMessage(playerid, "Igrac nije pored vas.");
	}
} else return SendErrorMessage(playerid, "Pogresan ID igraca.");
return true;}
CMD:lift(playerid, params[])
{
if(GetFactionType(playerid)  != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(IsPlayerInRangeOfPoint(playerid, 3,691.1639, 2005.1420, -22.3034))//iz PD-a
{
	SPD(playerid, dialog_PD_ENT, DSL, "PD LifT", "Krov\nGaraza", "Odaberi", "Izadji");}
else if(IsPlayerInRangeOfPoint(playerid, 3,1571.845703, -1675.535034, 28.395463))//sa krova
{
	SPD(playerid, dialog_PD_KROV, DSL, "PD LifT", "Enterijer\nGaraza", "Odaberi", "Izadji");}
else if(IsPlayerInRangeOfPoint(playerid, 3,1524.483032, -1677.824707, 6.218750))//iz garaze
{
	SPD(playerid, dialog_PD_GARAZA, DSL, "PD LifT", "Enterijer\nKrov", "Odaberi", "Izadji");}
return true;}
CMD:lansirajvatromet(playerid, params[])
{
#pragma unused params
if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Nisi ovlascen!");
	if(FireworkTotal == 0)
	{
	SendErrorMessage(playerid, "Nemas nijedan vatromet!");
		return true;
	}
	if(Fired == 1)
	{
	SendErrorMessage(playerid, "Vec si ispalio!");
	return true;}
for(new i = 0; i < FireworkTotal; i++)
{
	CreateExplosion(rx6[i] ,ry6[i], rz6[i], 12, 5);
	new time = MoveDynamicObject(Rocket[i], rx6[i] ,ry6[i], rz6[i] + RocketHeight, 10);
	MoveDynamicObject(RocketLight[i], rx6[i] ,ry6[i], rz6[i] + 2 + RocketHeight, 10);
	MoveDynamicObject(RocketSmoke[i], rx6[i] ,ry6[i], rz6[i] + RocketHeight, 10);
	SetTimerEx("Firework", time, 0, "i", i);}
SendInfoMessage(playerid, "%s je ispalio vatromet!",ImeIgraca(playerid));
Fired = 1;
return true;}

CMD:postavivatromet(playerid, params[])
{
#pragma unused params
if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Nisi ovlascen!");
	if(FireworkTotal == MAX_LAUNCH)
	{
		SendErrorMessage(playerid, "Predjen je maksimum!");
	return true;
	}
if(Fired == 1)
{
	SendErrorMessage(playerid, "Prvo sacekaj da se ispali vatromet!");
	return true;}
new Float:x, Float:y, Float:z, Float:a;
GetPlayerPos(playerid, x, y, z);
GetPlayerFacingAngle(playerid, a);
x += (2 * floatsin(-a, degrees));
y += (2 * floatcos(-a, degrees));
Rocket[FireworkTotal] = CreateDynamicObject(3786, x, y, z, 0, 90, 0);
RocketLight[FireworkTotal] = CreateDynamicObject(354, x, y, z + 1, 0, 90, 0);
RocketSmoke[FireworkTotal] = CreateDynamicObject(18716, x, y, z - 4, 0, 0, 0);
rx6[FireworkTotal] = x;
ry6[FireworkTotal] = y;
rz6[FireworkTotal] = z;
RocketExplosions[FireworkTotal] = 0;
FireworkTotal++;
return true;}
CMD:refresh(playerid,params[])
{
if(IsPlayerConnected(playerid))
{
	if(PlayerInfo[playerid][xZatvorVreme] > 1) return SendErrorMessage(playerid, "Sluzite kaznu, ne mozete to koristiti");
	if(GetPlayerInterior(playerid) > 0) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu u interioru !");
	if(GetPlayerVirtualWorld(playerid) > 0) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu u drugom VirtualWorld-u !");
	if(GetPlayerWantedLevel(playerid) > 0)
		{SendErrorMessage(playerid, "Imate Wanted Level.");return 1;}
	if(PljackaVreme[playerid] > 0) return SendErrorMessage(playerid, "Pljackate banku, ne mozete koristiti /refresh");
	if(ZlatoVreme[playerid] > 0) return SendErrorMessage(playerid, "Pljackate zlataru, ne mozete koristiti /refresh");
	SetPlayerVirtualWorld(playerid, 0);
	ac_SetPlayerInterior(playerid,0);
	SendInfoMessage(playerid, "Refreshovani ste, ako budete imali jos problema, kontaktirajte admina!");
	return 1;}
return 1;}
CMD:pokaziznacku(playerid, params[]) {
new id = PlayerInfo[playerid][xClan], igrac;
if(GetFactionType(playerid)  != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false)  return SendErrorMessage(playerid, "Niste na duznosti tako da nemate znacku kod sebe.");
if(sscanf(params, "u", igrac)) {
	SendUsageMessage(playerid, "/pokaziznacku [ID/Deo Imena]");
	return 1;}
if(igrac != INVALID_PLAYER_ID) {
	if(IsPlayerConnected(igrac)) {
		if(IsPlayerNearPlayer(3.0, playerid, igrac)) {
			new varstring[89];

			format(varstring, sizeof(varstring), "* %s je %s %s.", ImeIgraca(playerid), OI[id][oPreFix], getOrgRank(playerid, id));
			SCM(igrac, 0x00D900C8, varstring);

			format(varstring, sizeof(varstring), "* %s podize ruku i pokazuje svoju znacku %s.", ImeIgraca(playerid), ImeIgraca(igrac));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);

			SetPlayerAttachedObject(playerid, OBJECT_SLOT_BADGE, 1247, 6, 0.1, 0.05, 0, 0, 0, 0, 0.5, 0.5, 0.5);
			SetTimerEx("RemoveBadge", 3000, 0, "i", playerid);
			ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);

		} else return SendErrorMessage(playerid, "Taj igrac nije blizu tebe !");
	}
}
return true;}

CMD:duty(playerid, params[]) {
new id = PlayerInfo[playerid][xClan];
if(GetFactionType(playerid)  != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!IsPlayerInRangeOfPoint(playerid, 3.0, OI[id][oDutyPoint][0], OI[id][oDutyPoint][1], OI[id][oDutyPoint][2])) return SendErrorMessage(playerid, "Morate biti na pickupu za koriscenje ove komande.");
if(PlayerInfo[playerid][xRank] == 0) return SendErrorMessage(playerid, "Suspendovani ste.");
new varstring[89];
if(PoliceDuty[playerid] == false) {
	PoliceDuty[playerid] = true;
	format(varstring, sizeof(varstring), "HQ: %s je sada na duznosti.", ImeIgraca(playerid));
	OrgPoruka(id, 0x2641FEAA, varstring);
	format(varstring, sizeof(varstring), "* %s %s uzima znacku i opremu iz ormarica.", getOrgRank(playerid, PlayerInfo[playerid][xClan]), ImeIgraca(playerid));
	PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
	SetPlayerColor(playerid, 0xA191FF00);}
else if(PoliceDuty[playerid] == true) {
	PoliceDuty[playerid] = false;
	ResetAllWeapons(playerid);
	Fusion_SetPlayerArmour(playerid, 0);
	BrojLisica[playerid] = 0;
	Fusion_SetPlayerArmour(playerid, 0);
	Fusion_SetPlayerHealth(playerid, 75);
	c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
	format(varstring, sizeof(varstring), "* %s vraca znacku i opremu u ormaric.", ImeIgraca(playerid));
	PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
	SetPlayerColor(playerid, 0xFFFFFF00);}
return true;}

CMD:computer(playerid, params[]) {
new vehicleid = GetPlayerVehicleID(playerid), string[128];
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
if(IsPlayerInRangeOfPoint(playerid, 2, 693.5520, 1990.0642, -22.3034)) {
	if(GetPVarInt(playerid, "Computer") == 0) {

		Police_TVTDControl(playerid, true);

		SelectTextDraw(playerid, 0x5D9FCEFF);

		SetPVarInt(playerid, "Computer", 1);
		SCM(playerid, BELA, "Koristite /computer da bi ugasili racunalo.");

		format(string, sizeof string, "%s se logovao na %s laptop.", ImeIgraca(playerid), OI[PlayerInfo[playerid][xClan]][oPreFix]);
		OrgPorukaLeader(PlayerInfo[playerid][xClan], 0xD2CFCFFF, string);
		return true;
	}
	if(GetPVarInt(playerid, "Computer") == 1) {

		Police_TVTDControl(playerid, false);

		CancelSelectTextDraw(playerid);
		SetPVarInt(playerid, "Computer", 0);
		format(string, sizeof string, "%s se izlogovao na %s laptop.", ImeIgraca(playerid), OI[PlayerInfo[playerid][xClan]][oPreFix]);
		OrgPorukaLeader(PlayerInfo[playerid][xClan], 0xD2CFCFFF, string);
		return true;
	}
}
else {
	if(TipVozila[vehicleid] == ORGANIZACIJSKO_VOZILO && OrgaVozila[vehicleid] == PlayerInfo[playerid][xClan]) {
		if(GetPVarInt(playerid, "Computer") == 0) {

			Police_TVTDControl(playerid, true);

			SelectTextDraw(playerid, 0x5D9FCEFF);

			SetPVarInt(playerid, "Computer", 1);
			SCM(playerid, BELA, "Koristite /computer da bi ugasili racunalo.");
			return true;
		}
		if(GetPVarInt(playerid, "Computer") == 1) {

			Police_TVTDControl(playerid, false);

			CancelSelectTextDraw(playerid);
			SetPVarInt(playerid, "Computer", 0);
			return true;
		}
	} else return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti u vozilu policije/racunar u stanici");}
return true;}

CMD:d(playerid, params[]) {
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
if(PlayerInfo[playerid][xZatvor] >= 1) return SendErrorMessage(playerid, "Ne mozete pisati dok ste u zatvoru / ALKATRAZ.");
new poruka[128], string[234];
if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(sscanf(params, "s[128]", poruka)) return SendUsageMessage(playerid, "/d [Text]");
if(GetFactionType(playerid)  != ORG_TIP_PD && GetFactionType(playerid)  != ORG_TIP_MD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
for(new id = 1; id < MAX_ORG; id++) {
	if(OI[id][oTip] == ORG_TIP_PD || OI[id][oTip] == ORG_TIP_MD) {
		if(PlayerInfo[playerid][xRank] == 1) format(string, sizeof string, "** [%s]%s %s: %s, prijem. **", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank1], ImeIgraca(playerid), poruka);
		else if(PlayerInfo[playerid][xRank] == 2) format(string, sizeof string, "** [%s]%s %s: %s, prijem. **", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank2], ImeIgraca(playerid), poruka);
		else if(PlayerInfo[playerid][xRank] == 3) format(string, sizeof string, "** [%s]%s %s: %s, prijem. **", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank3], ImeIgraca(playerid), poruka);
		else if(PlayerInfo[playerid][xRank] == 4) format(string, sizeof string, "** [%s]%s %s: %s, prijem. **", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank4], ImeIgraca(playerid), poruka);
		else if(PlayerInfo[playerid][xRank] == 5) format(string, sizeof string, "** [%s]%s %s: %s, prijem. **", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank5], ImeIgraca(playerid), poruka);
		else if(PlayerInfo[playerid][xRank] == 6) format(string, sizeof string, "** [%s]%s %s: %s, prijem. **", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank6], ImeIgraca(playerid), poruka);
		OrgPoruka1(id, 0xB3ADADFF, string);
	}
}
return true;}

CMD:r(playerid, params[]) {
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
if(PlayerInfo[playerid][xZatvor] >= 1) return SendErrorMessage(playerid, "Ne mozete pisati dok ste u zatvoru / ALKATRAZ.");
new poruka[128], string[234];
if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(sscanf(params, "s[128]", poruka)) return SendUsageMessage(playerid, "/r [Text]");
if(GetFactionType(playerid)  != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");

if(PlayerInfo[playerid][xRank] == 1) format(string, sizeof string, "** %s %s %s: "col_white"%s, prijem. **", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank1], ImeIgraca(playerid), poruka);
else if(PlayerInfo[playerid][xRank] == 2) format(string, sizeof string, "** %s %s %s: "col_white"%s, prijem. **", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank2], ImeIgraca(playerid), poruka);
else if(PlayerInfo[playerid][xRank] == 3) format(string, sizeof string, "** %s %s %s: "col_white"%s, prijem. **", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank3], ImeIgraca(playerid), poruka);
else if(PlayerInfo[playerid][xRank] == 4) format(string, sizeof string, "** %s %s %s: "col_white"%s, prijem. **", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank4], ImeIgraca(playerid), poruka);
else if(PlayerInfo[playerid][xRank] == 5) format(string, sizeof string, "** %s %s %s: "col_white"%s, prijem. **", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank5], ImeIgraca(playerid), poruka);
else if(PlayerInfo[playerid][xRank] == 6) format(string, sizeof string, "** %s %s %s: "col_white"%s, prijem. **", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank6], ImeIgraca(playerid), poruka);
OrgPoruka(PlayerInfo[playerid][xClan], 0xD2CFCFFF, string);

for(new b = 0; b < sizeof(ZabranjeneReci); b++) {
	if(strfind(poruka, ZabranjeneReci[b], true) != -1) {
		new varstring[144];
		format(varstring, sizeof(varstring), "[PD-CHAT]%s[%d]: %s", ImeIgraca(playerid), playerid, poruka);
		AdminPoruka(0x808000AA, varstring);
		return 1;
	}
}
return true;}

CMD:portable(playerid, params[]) {
if(IsPlayerConnected(playerid)) {
	if(GetFactionType(playerid)  != ORG_TIP_HITM) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	SPD(playerid, dialog_PORTABLE, DSL, D_NASLOV, "Kontrakti\nDaj metu\nRankovi\nNaruci", D_ODABERI, D_ODUSTANI);}
return 1;}

CMD:nadji(playerid, params[]) {

if(CheckpointStatus[playerid] != 0) return SendErrorMessage(playerid, "Vec imas aktiviran marker tako da ne mozes ovo koristiti.");
if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla.");
if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok imas wanted level.");
if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si u jailu.");

if(IsPlayerConnected(playerid)) {

	if(GetFactionType(playerid) == ORG_TIP_PD || GetFactionType(playerid) == ORG_TIP_MD) {

		if(CheckpointStatus[playerid] != 0) return SendErrorMessage(playerid, "Vec imas jedan upaljen CP, prvo ga ugasi /gpsoff.");

		if(SearchNadji[playerid] != -1) {
			SearchNadji[playerid] = -1;
			Fusion_DisablePlayerCheckpoint(playerid);
		}
		else if(SearchNadji[playerid] == -1) {

			new ID;
			if(sscanf(params, "u", ID)) return SendUsageMessage(playerid, "/nadji [ID Igraca/Deo Imena]");
			if(ID == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Pogresan ID!");
			if(PlayerInfo[ID][xAdmin] > 0) return SendErrorMessage(playerid, "Ne mozes naci Admina.");
			if(PlayerInfo[ID][xHelper] > 0) return SendErrorMessage(playerid, "Ne mozes naci Helpera.");

			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(ID, X, Y, Z);
			Fusion_SetPlayerCheckpoint(playerid, X, Y, Z, 6);
			SearchNadji[playerid] = ID;

		}

	}
	else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");}
return true;}

CMD:contract(playerid, params[]) {
if(IsPlayerConnected(playerid)) {
	new ID, amount;
	if(sscanf(params,"ui", ID, amount)) return SendUsageMessage(playerid, "/naruciubistvo [ID Igraca/Deo Imena] [novac]");
	if(ID == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Pogresan ID!");
	if(amount < 1000 || amount > 200000) return SendErrorMessage(playerid, "Cena mete mora biti minimum $1000, ili maksimum $200000!");
	if(amount > PlayerInfo[playerid][xNovac]) return SendErrorMessage(playerid, "Nemate toliko novca sa sobom.");
	if(PlayerInfo[playerid][xLevel] < 5) return SendErrorMessage(playerid, "Morate biti level 5.");
	if(PlayerInfo[ID][xLevel] < 5) return SendErrorMessage(playerid, "Igrac mora biti level 5.");
	if(PlayerInfo[ID][xAdmin] >= 1) return SendErrorMessage(playerid, "Ne mozete to uraditi na Admin TEAM.");
	if(PlayerInfo[ID][xHelper] >= 1) return SendErrorMessage(playerid, "Ne mozete na Helpera.");
	if(IsPlayerConnected(ID)){
		if(ID != INVALID_PLAYER_ID) {
			if(OI[PlayerInfo[ID][xClan]][oTip] == ORG_TIP_HITM) return SendErrorMessage(playerid, "* Ne mozete naruciti ubistvo clanova agencije !");
			if(ID == playerid) return SendErrorMessage(playerid, "* Ne mozete naruciti svoje ubistvo!");

			if(amount > 0 && PlayerInfo[playerid][xNovac] >= amount) {
				DajIgracuNovac(playerid, -amount);
				PlayerInfo[ID][xHitmenCena] += amount;
				new varstring[90];
				format(varstring, sizeof(varstring), "* Narucili ste ubistvo %s-a, za "col_white"$%d.",ImeIgraca(ID), amount);
				SCM(playerid, BELA, varstring);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				for(new id = 1; id < MAX_ORG; id++) {
					if(OI[id][oTip] == ORG_TIP_HITM) {
						format(varstring, sizeof(varstring), "%s je narucio ubistvo %s-a, za $%d.", ImeIgraca(playerid), ImeIgraca(ID), amount);
						OrgPoruka(id, ZUTA, varstring);
					}
				}
			}
			else {
				SendErrorMessage(playerid, "Nepravilan iznos transakcije.");
			}
		}
	}
	else {
		SendErrorMessage(playerid, "Pogresan ID");
	}
}
return 1;}

CMD:clanovi(playerid, params[]) {
new string[128], OrgID;
if(PlayerInfo[playerid][xClan] != 0) OrgID = PlayerInfo[playerid][xClan];
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu!");
SCM(playerid, FUSIONGAMING, "|----------------Clanovi Online----------------|");
foreach(new i : Player) {
	if(IsPlayerConnected(i) && PlayerLogged[i] == true && PlayerInfo[i][xClan] == OrgID) {
		format(string, sizeof(string), "%s[%d] |"col_white" %s", getOrgRank(i, PlayerInfo[i][xClan]), PlayerInfo[i][xRank], ImeIgraca(i));
		SCM(playerid, FUSIONGAMING, string);
	}
}
return true;}

CMD:f(playerid, params[]) {

if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si u jailu.");
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
if(PlayerCuffed[playerid] >= 1) return SendErrorMessage(playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
if(PlayerInfo[playerid][xSFChat] == 0) return SendErrorMessage(playerid, "Iskljucen Vam je Family Chat - /settings.");
new poruka[128], string[234];
if(sscanf(params, "s[128]", poruka)) return SendUsageMessage(playerid, "/f [Text]");
if(PlayerInfo[playerid][xLider] > 0 || PlayerInfo[playerid][xClan] > 0) {
	if(PlayerInfo[playerid][xRank] == 1) format(string, sizeof string, "(%s) %s %s: "col_white"%s", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank1], ImeIgraca(playerid), poruka);
	else if(PlayerInfo[playerid][xRank] == 2) format(string, sizeof string, "(%s) %s %s: "col_white"%s", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank2], ImeIgraca(playerid), poruka);
	else if(PlayerInfo[playerid][xRank] == 3) format(string, sizeof string, "(%s) %s %s: "col_white"%s", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank3], ImeIgraca(playerid), poruka);
	else if(PlayerInfo[playerid][xRank] == 4) format(string, sizeof string, "(%s) %s %s: "col_white"%s", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank4], ImeIgraca(playerid), poruka);
	else if(PlayerInfo[playerid][xRank] == 5) format(string, sizeof string, "(%s) %s %s: "col_white"%s", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank5], ImeIgraca(playerid), poruka);
	else if(PlayerInfo[playerid][xRank] == 6) format(string, sizeof string, "(%s) %s %s: "col_white"%s", OI[PlayerInfo[playerid][xClan]][oPreFix], OI[PlayerInfo[playerid][xClan]][oRank6], ImeIgraca(playerid), poruka);
	OrgPoruka(PlayerInfo[playerid][xClan], 0x95b4a2FF, string); 
}
else { SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu."); return true;}
return true;}

// Firma System

CMD:kupifirmu(playerid, params[]) {
new id = GetNearestBusiness(playerid);
if(id == -1 || id == 0) return SendErrorMessage(playerid, "Niste blizu firme!");
if(BusinessInfo[id][bOwned] != 0 || BusinessInfo[id][bPrice] == 0) return SendErrorMessage(playerid, "Ova firma se ne prodaje!");
if(PlayerInfo[playerid][xFirmaID] != -1) return SendErrorMessage(playerid, "Vec posedujes firmu!");
if(PlayerInfo[playerid][xNovac] < BusinessInfo[id][bPrice]) return SendErrorMessage(playerid, "Nemate dovoljno novca za kupovinu Firme!");
if(PlayerInfo[playerid][xLevel] < BusinessInfo[id][bLevel]) return SendClientMessageEx(playerid, CRVENA, "Morate biti level %d+ da bi ste kupili firmu.", BusinessInfo[id][bLevel]);
PlayerInfo[playerid][xFirmaID] = id;
DajIgracuNovac(playerid, -BusinessInfo[id][bPrice]);
BusinessInfo[id][bLocked] = 0;
BusinessInfo[id][bNeaktivnost] = 0;
BusinessInfo[id][bFacture] = 100;
BusinessInfo[id][bOwned] = 1;
strmid(BusinessInfo[id][bOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 255);
Business_Refresh(id);
SaveBusiness(id);
SavePlayer(playerid);
SendInfoMessage(playerid, "Kupili ste firmu, cestitamo!");
SCM(playerid, NARACRVENA, "UKOLIKO VAM FAKTURE DODJU NA 0, FIRMA CE SE PRODATI AUTOMATSKI!");
return true;}


CMD:firma(playerid, params[]) {

if(PlayerInfo[playerid][xFirmaID] == -1) return SendErrorMessage(playerid, "Ne posedujete firmu!");
if(strcmp(ImeIgraca(playerid), BusinessInfo[PlayerInfo[playerid][xFirmaID]][bOwner], true) == 0) {

	SPD(playerid, dialog_FIRMA, DSL, D_NASLOV, "Informacije\nZakljucaj/Otkljucaj Firmu\nPodigni Novac\nOstavi Novac\n{F81414]Prodaj Drzavi\n{F81414]Prodaj Igracu\nUbaci fakture", D_ODABERI, D_ODUSTANI);} else {

	SCM(playerid, ANTICHEAT, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Ova firma nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska.");}
return true;}
CMD:namestaj(playerid, params[]) {

if(PlayerInfo[playerid][xProperty][0] != -1) {}
else if(PlayerInfo[playerid][xProperty][1] != -1) {}
else if(PlayerInfo[playerid][xProperty][2] != -1) {}
else return SendErrorMessage(playerid, "Ne mozes koristiti ovu komandu jer nemas nijednu imovinu.");

new item[32];
if(sscanf(params, "s[32] ", item)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/namestaj [opcija]");
	SCM(playerid, BELA, "[Opcije] kupi, postavi, izmeni, izbrisi");
	SCM(playerid, BELA, "[Brisanje] Brisanjem ne dobijate nikakvu naknadu i brise najblizi objekt.");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(strcmp(item, "kupi",true) == 0) {
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2375.2371,-1917.0723,13.9742)) return SendErrorMessage(playerid, "Morate biti u prodavnici namestaja da bi koristili ovu komandu.");
	if(nekokupujenamestaj > 0) return SendErrorMessage(playerid, "Neko vec kupuje namestaj!");

	if(PlayerInfo[playerid][xWanted] > 0) return SendErrorMessage(playerid, "Ne mozes kupovati kad imas Wanted Level.");

	nekokupujenamestaj = 1;
	KupujeNamestaj[playerid] = 1;
	TogglePlayerControllable(playerid, false);
	ObjektTDControl(playerid, true);
	ListaoObjekte[playerid] = 0;
	new i = ListaoObjekte[playerid];
	DestroyDynamicObject(glavniobjekt);
	glavniobjekt = CreateDynamicObject(OBPR[i][0], OBPR1[i][0], OBPR1[i][1], OBPR1[i][2],  OBPR1[i][3], OBPR1[i][4], OBPR1[i][5]);
	Streamer_Update(playerid);
	new varstring[30];
	format(varstring, sizeof(varstring), "cena: ~w~%d$", OBPR[i][1]);
	PlayerTextDrawSetString(playerid, ObjektTD[playerid][1], varstring);
	SetPlayerCameraPos(playerid, 2378.5710, -1902.7750, 16.9675);
	SetPlayerCameraLookAt(playerid, 2377.5757, -1902.7889, 16.3725);
	SelectTextDraw(playerid, 0x5D9FCEFF);
	return 1;}
else if(strcmp(item, "postavi",true) == 0) {
	if(inProperty[playerid] == -1) return SendErrorMessage(playerid, "Niste u vasoj kuci/stanu/vikendici.");
	if(strcmp(ImeIgraca(playerid), II[inProperty[playerid]][iOwner], true) == 0)
	{
		new bandanas[10];
		bandanas[0] = PlayerInfo[playerid][xObject][0];
		bandanas[1] = PlayerInfo[playerid][xObject][1];
		bandanas[2] = PlayerInfo[playerid][xObject][2];
		bandanas[3] = PlayerInfo[playerid][xObject][3];
		bandanas[4] = PlayerInfo[playerid][xObject][4];
		bandanas[5] = PlayerInfo[playerid][xObject][5];
		bandanas[6] = PlayerInfo[playerid][xObject][6];
		bandanas[7] = PlayerInfo[playerid][xObject][7];
		bandanas[8] = PlayerInfo[playerid][xObject][8];
		bandanas[9] = PlayerInfo[playerid][xObject][9];
		ShowModelSelectionMenuEx(playerid, bandanas, 10, "Namestaj", 6, 0.0, 0.0, 0.0);
	} else return SendErrorMessage(playerid, "Ova imovina nije vasa..");
	return 1;}
else if(strcmp(item, "izmeni",true) == 0) {
	if(inProperty[playerid] == -1) return SendErrorMessage(playerid, "Niste u vasoj kuci/stanu/vikendici.");
	if(strcmp(ImeIgraca(playerid), II[inProperty[playerid]][iOwner], true) == 0)
	{
		new hid = inProperty[playerid];
		if(GetNearestFurniture(playerid, inProperty[playerid]) == -1) return SendErrorMessage(playerid, "Nema objekta u blizini.");
		new i = GetNearestFurniture(playerid, inProperty[playerid]);
		//DestroyDynamicObject(Furniture[hid][i][f_Object]);
		//Furniture[hid][i][f_Object] = CreateDynamicObject(Furniture[hid][i][f_Model], Furniture[hid][i][f_X], Furniture[hid][i][f_Y], Furniture[hid][i][f_Z], Furniture[hid][i][f_rX], Furniture[hid][i][f_rY], Furniture[hid][i][f_rZ], II[hid][iVW], II[hid][iInterior], -1, 200.0);
		EditDynamicObject(playerid, Furniture[hid][i][f_Object]);
		SCM(playerid, FUSIONGAMING, "Pozicioniraj namestaj.");
		SCM(playerid, BELA, "Koristite ~k~~PED_SPRINT~ da bi pomerali kameru.");
		ObjectEdition_TYPE[playerid] = i;

	} else return SendErrorMessage(playerid, "Ova imovina nije vasa..");
	return 1;}
else if(strcmp(item, "izbrisi",true) == 0) {
	if(inProperty[playerid] == -1) return SendErrorMessage(playerid, "Niste u vasoj kuci/stanu/vikendici.");
	if(strcmp(ImeIgraca(playerid), II[inProperty[playerid]][iOwner], true) == 0)
	{
		if(GetNearestFurniture(playerid, inProperty[playerid]) == -1) return SendErrorMessage(playerid, "Nema objekta u blizini.");
		new hid = inProperty[playerid]; new i = GetNearestFurniture(playerid, inProperty[playerid]);
		Furniture[hid][i][f_Model] = 0;
		DestroyDynamicObject(Furniture[hid][i][f_Object]);
		SaveFurniture(hid);
		SCM(playerid, FUSIONGAMING, "Namestaj obrisan");

	} else return SendErrorMessage(playerid, "Ova imovina nije vasa..");
	return 1;}
else {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/namestaj [opcija]");
	SCM(playerid, BELA, "[Opcije] kupi, postavi, izmeni, izbrisi");
	SCM(playerid, BELA, "[Brisanje] Brisanjem ne dobijate nikakvu naknadu i brise najbliziji objekt.");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");}
return 1;}

CMD:imovina(playerid, params[]) {
if(PlayerInfo[playerid][xProperty][0] == -1 && PlayerInfo[playerid][xProperty][1] == -1 && PlayerInfo[playerid][xProperty][2] == -1) return SendErrorMessage(playerid, "Nemate nista od imovine!");
SPD(playerid, dialog_PROPERTYLIST, DSL, D_NASLOV, "Imovina 1\nImovina 2\nImovina 3", D_ODABERI, D_ODUSTANI);
return 1;}

CMD:kupiimovinu(playerid, params[]) {
if(GetNearestProperty(playerid) == -1) return SendErrorMessage(playerid, "Nema imovine u vasoj blizini!");
if(PlayerInfo[playerid][xProperty][0] != -1 && PlayerInfo[playerid][xProperty][1] != -1 && PlayerInfo[playerid][xProperty][2] != -1) return SendErrorMessage(playerid, "Vec posedujes 3 kuce/stana/vikendice!");
	if(PlayerInfo[playerid][xNovac] < II[GetNearestProperty(playerid)][iPrice]) return SendErrorMessage(playerid, "Nemate dovoljno novca!");
if(II[GetNearestProperty(playerid)][iOwned] != 0) return SendClientMessage(playerid, CRVENA, "Ova imovina nije na prodaju.");

if(PlayerInfo[playerid][xLevel] < II[GetNearestProperty(playerid)][iLevel]) return SendClientMessageEx(playerid, CRVENA, "Da bi ste kupili ovu imovinu morate biti level %d+.", II[GetNearestProperty(playerid)][iLevel]);

if(PlayerInfo[playerid][xProperty][0] == -1) { PlayerInfo[playerid][xProperty][0] = GetNearestProperty(playerid);}
else if(PlayerInfo[playerid][xProperty][1] == -1) { PlayerInfo[playerid][xProperty][1] = GetNearestProperty(playerid); }
else if(PlayerInfo[playerid][xProperty][2] == -1) { PlayerInfo[playerid][xProperty][2] = GetNearestProperty(playerid); }

DajIgracuNovac(playerid, -II[GetNearestProperty(playerid)][iPrice]);
II[GetNearestProperty(playerid)][iOwned] = 1;
II[GetNearestProperty(playerid)][iNeaktivnost] = 0;
strmid(II[GetNearestProperty(playerid)][iOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 255);
PlayerPlaySound(playerid, 1058, 0, 0, 0);
SendClientMessageEx(playerid, FUSIONGAMING, "Kupili ste %s.", GetPropertyName(GetNearestProperty(playerid)));
SavePlayer(playerid); PropertyRefresh(GetNearestProperty(playerid)); SaveProperty(GetNearestProperty(playerid));
return 1;}

CMD:kupihotel(playerid, params[]) {
if(GetNearestHotel(playerid) == -1) return SendErrorMessage(playerid, "Nema hotela u vasoj blizini!");
if(PlayerInfo[playerid][xHotelID] != -1) return SendErrorMessage(playerid, "Vec posedujes hotel!");
	if(PlayerInfo[playerid][xNovac] < hotelInfo[GetNearestHotel(playerid)][hPrice]) return SendErrorMessage(playerid, "Nemate dovoljno novca!");
if(hotelInfo[GetNearestHotel(playerid)][hOwned] != 0) return SendErrorMessage(playerid, "Ovaj hotel nije na prodaju.");
if(PlayerInfo[playerid][xLevel] < hotelInfo[GetNearestHotel(playerid)][hLevel]) return SendClientMessageEx(playerid, CRVENA, "Da bi ste kupili ovaj hotel morate biti level %d+.", hotelInfo[GetNearestHotel(playerid)][hLevel]);

PlayerInfo[playerid][xHotelID] = GetNearestHotel(playerid);
DajIgracuNovac(playerid, -hotelInfo[GetNearestHotel(playerid)][hPrice]);
hotelInfo[GetNearestHotel(playerid)][hPorez] = 0; hotelInfo[GetNearestHotel(playerid)][hVrednostPoreza] = 0;
hotelInfo[GetNearestHotel(playerid)][hOwned] = 1;
strmid(hotelInfo[GetNearestHotel(playerid)][hOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 255);
PlayerPlaySound(playerid, 1058, 0, 0, 0);
SCM(playerid, FUSIONGAMING, "Kupili ste hotel.");
SavePlayer(playerid); HotelRefresh(GetNearestHotel(playerid)); SaveHotel(GetNearestHotel(playerid));
return 1;}

CMD:hotel(playerid, params[]) {
if(PlayerInfo[playerid][xHotelID] == -1) return SendErrorMessage(playerid, "Ne posedujete hotel!");
if(strcmp(ImeIgraca(playerid), hotelInfo[PlayerInfo[playerid][xHotelID]][hOwner], true) == 0) {
	SPD(playerid, dialog_HOTEL, DSL, D_NASLOV, "Informacije\nNajam\nIzbaci gosta\nPodigni Novac\nOstavi Novac\nOtkljucaj/Zakljucaj\n{F81414]Prodaj Drzavi\n{F81414]Prodaj Igracu", D_ODABERI, D_ODUSTANI);} else return SendErrorMessage(playerid, "Ovo nije vas hotel..");
return true;}

CMD:iznajmisobu(playerid, params[]) {
if(PlayerInfo[playerid][xHotelRoom] != -1) return SendErrorMessage(playerid, "Vec imate iznajmljenu sobu.");
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2217.3083, -1146.4053, 1025.7969)) return SendErrorMessage(playerid, "Niste na salteru u hotelu.");
if(inHotel[playerid] == -1) return SendErrorMessage(playerid, "Niste na salteru u hotelu.");
if(PlayerInfo[playerid][xNovac] < hotelInfo[inHotel[playerid]][hRoomPrice]) return SendClientMessageEx(playerid, -1, ""col_green"[RECEPCIONARKA]: "col_white"Nemate dovoljno novca (%d$) za najam.", hotelInfo[inHotel[playerid]][hRoomPrice]);
if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Da bi iznajmili sobu morate biti level 3+.");

new hid = inHotel[playerid];
if(!strcmp(hotelInfo[hid][hGuest_1], "Niko", true)) {
	strmid(hotelInfo[hid][hGuest_1], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), MAX_PLAYER_NAME);}
	else if(!strcmp(hotelInfo[hid][hGuest_2], "Niko", true)) {
	strmid(hotelInfo[hid][hGuest_2], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), MAX_PLAYER_NAME);}
else if(!strcmp(hotelInfo[hid][hGuest_3], "Niko", true)) {
	strmid(hotelInfo[hid][hGuest_3], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), MAX_PLAYER_NAME);}
else if(!strcmp(hotelInfo[hid][hGuest_4], "Niko", true)) {
	strmid(hotelInfo[hid][hGuest_4], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), MAX_PLAYER_NAME);}
else if(!strcmp(hotelInfo[hid][hGuest_5], "Niko", true)) {
	strmid(hotelInfo[hid][hGuest_5], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), MAX_PLAYER_NAME);}
else if(!strcmp(hotelInfo[hid][hGuest_6], "Niko", true)) {
	strmid(hotelInfo[hid][hGuest_6], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), MAX_PLAYER_NAME);}
else if(!strcmp(hotelInfo[hid][hGuest_7], "Niko", true)) {
	strmid(hotelInfo[hid][hGuest_7], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), MAX_PLAYER_NAME);}
else if(!strcmp(hotelInfo[hid][hGuest_8], "Niko", true)) {
	strmid(hotelInfo[hid][hGuest_8], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), MAX_PLAYER_NAME);}
else if(!strcmp(hotelInfo[hid][hGuest_9], "Niko", true)) {
	strmid(hotelInfo[hid][hGuest_9], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), MAX_PLAYER_NAME);}
else if(!strcmp(hotelInfo[hid][hGuest_10], "Niko", true)) {
	strmid(hotelInfo[hid][hGuest_10], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), MAX_PLAYER_NAME);}
else return SCM(playerid, -1, ""col_green"[RECEPCIONARKA]: "col_white"Zao nam je ali sve su sobe iznajmljene.");

PlayerInfo[playerid][xHotelRoom] = hid;
DajIgracuNovac(playerid, -hotelInfo[hid][hRoomPrice]);
hotelInfo[hid][hMoney] += hotelInfo[hid][hRoomPrice];
SCM(playerid, -1, ""col_green"[RECEPCIONARKA]: "col_white"Postovani, izvolite Vas kljuc od sobe.");

return true;}

CMD:odjavisobu(playerid, params[]) {
if(PlayerInfo[playerid][xHotelRoom] == -1) return SendErrorMessage(playerid, "Nemate iznajmljenu sobu.");
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2217.3083, -1146.4053, 1025.7969)) return SendErrorMessage(playerid, "Niste na salteru u hotelu.");
if(inHotel[playerid] == -1) return SendErrorMessage(playerid, "Niste na salteru u hotelu.");

new hid = inHotel[playerid];

if(strcmp(ImeIgraca(playerid), hotelInfo[hid][hGuest_1], true) == 0) {
	strmid(hotelInfo[hid][hGuest_1], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);}
else if(strcmp(ImeIgraca(playerid), hotelInfo[hid][hGuest_2], true) == 0) {
	strmid(hotelInfo[hid][hGuest_2], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);}
else if(strcmp(ImeIgraca(playerid), hotelInfo[hid][hGuest_3], true) == 0) {
	strmid(hotelInfo[hid][hGuest_3], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);}
else if(strcmp(ImeIgraca(playerid), hotelInfo[hid][hGuest_4], true) == 0) {
	strmid(hotelInfo[hid][hGuest_4], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);}
else if(strcmp(ImeIgraca(playerid), hotelInfo[hid][hGuest_5], true) == 0) {
	strmid(hotelInfo[hid][hGuest_5], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);}
else if(strcmp(ImeIgraca(playerid), hotelInfo[hid][hGuest_6], true) == 0) {
	strmid(hotelInfo[hid][hGuest_6], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);}
else if(strcmp(ImeIgraca(playerid), hotelInfo[hid][hGuest_7], true) == 0) {
	strmid(hotelInfo[hid][hGuest_7], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);}
else if(strcmp(ImeIgraca(playerid), hotelInfo[hid][hGuest_8], true) == 0) {
	strmid(hotelInfo[hid][hGuest_8], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);}
else if(strcmp(ImeIgraca(playerid), hotelInfo[hid][hGuest_9], true) == 0) {
	strmid(hotelInfo[hid][hGuest_9], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);}
else if(strcmp(ImeIgraca(playerid), hotelInfo[hid][hGuest_10], true) == 0) {
	strmid(hotelInfo[hid][hGuest_10], "Niko", 0, strlen("Niko"), MAX_PLAYER_NAME);}
else return SCM(playerid, -1, ""col_green"[RECEPCIONARKA]: "col_white"Niste iznajmili sobu u ovom hotelu.");

PlayerInfo[playerid][xHotelRoom] = -1;
SCM(playerid, -1, ""col_green"[RECEPCIONARKA]: "col_white"Uspesno ste odjavili sobu, dodjite nam opet.");
SaveHotel(hid);
SavePlayer(playerid);
return true;}

CMD:prekiniobijanje(playerid, params[]) {
if(GetPVarInt(playerid, "BreakingLock") == 1) {
	TogglePlayerControllable(playerid, true);

	Fusion_KillTimer(GetPVarInt(playerid, "BreakLockTimer"));
	Fusion_KillTimer(GetPVarInt(playerid, "breakcounttimer"));
	SetPVarInt(playerid, "BreakLockTimerCalled", 0);
	SetPVarInt(playerid, "BreakingLock", 0);}
else if(GetPVarInt(playerid, "StartingVehicle") == 1) {
	TogglePlayerControllable(playerid, true);
	ac_RemovePlayerFromVehicle(playerid);

	Fusion_KillTimer(GetPVarInt(playerid, "EngineStartTimer"));
	Fusion_KillTimer(GetPVarInt(playerid, "immobcounttimer"));

	SetPVarInt(playerid, "ImmobTimerCalled", 0);
	SetPVarInt(playerid, "StartingVehicle", 0);}
else if(GetPVarInt(playerid, "Pokusaj") == 1) {
		TogglePlayerControllable(playerid, true);
	SetPVarInt(playerid, "Pokusaj", 0);
	Odbrojavanje[playerid] = 0;
	VremeTDControl(playerid, false);} else return SendErrorMessage(playerid, "Ova komanda sluzi da prekines provaljivanje!");
return 1;}

CMD:smashdoor(playerid, params[]) {
new varstring[60];
for(new i = 1; i < MAX_IMOVINA; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 2, II[i][iEnter][0], II[i][iEnter][1], II[i][iEnter][2])) {
		if(strcmp(II[i][iOwner], ImeIgraca(playerid), false)) {
			if(GetPVarInt(playerid, "Pokusaj") != 0) {
				SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu dok ste u procesu provaljivanja!");
				return 1;
			}
			if(II[i][iLocked] == 1) {
				if(II[i][iDoorLevel] == 0) {
					if(PlayerInfo[playerid][xSnaga] < 4) {
						SCM(playerid, CRVENA, "Vrata su precvrsta - /upgrade snaga.");
						return 1;
					}
					SendInfoMessage(playerid, "Uspeli ste razbiti vrata na snagu. Vrata su se otvorila.");
					II[i][iLocked] = 0;
				}
				else if(II[i][iDoorLevel] == 1) {
					if(PlayerInfo[playerid][xSnaga] < 7) {
						SCM(playerid, CRVENA, "Vrata su precvrsta - /upgrade snaga.");
						return 1;
					}
					SendInfoMessage(playerid, "Uspeli ste razbiti vrata na snagu. Vrata su se otvorila.");
					II[i][iLocked] = 0;
				}
				else if(II[i][iDoorLevel] == 2) {
					if(PlayerInfo[playerid][xSnaga] < 10) {
						SCM(playerid, CRVENA, "Vrata su precvrsta - /upgrade snaga.");
						return 1;
					}
					SendInfoMessage(playerid, "Uspeli ste razbiti vrata na snagu. Vrata su se otvorila.");
					II[i][iLocked] = 0;
				}
				else if(II[i][iDoorLevel] == 3) {
					if(PlayerInfo[playerid][xSnaga] < 15) {
						SCM(playerid, CRVENA, "Vrata su precvrsta - /upgrade snaga.");
						return 1;
					}
					SendInfoMessage(playerid, "Uspeli ste razbiti vrata na snagu. Vrata su se otvorila.");
					II[i][iLocked] = 0;
				}
				else if(II[i][iDoorLevel] == 4) {
					if(PlayerInfo[playerid][xSnaga] < 20) {
						SCM(playerid, CRVENA, "Vrata su precvrsta - /upgrade snaga.");
						return 1;
					}
					SendInfoMessage(playerid, "Uspeli ste razbiti vrata na snagu. Vrata su se otvorila.");
					II[i][iLocked] = 0;
				}
				else if(II[i][iDoorLevel] == 5) {
					SCM(playerid, CRVENA, "Vrata su precvrsta da bi ih obican covek razbio!");
					return 1;
				}
				if(II[i][iAlarm] > 0)
				{
					if(II[i][iAlarm] >= 2)
					{
						foreach(new h : Player)
						{
							if(IsPlayerConnected(h))
							{
								if(strcmp(ImeIgraca(h), II[i][iOwner], true) == 0)
								{
									SCM(h, ZUTA, "[ALARM]: Neko vam je provalio u kucu - pozovite policiju!");
								}
							}
						}
					}
					if(II[i][iAlarm] >= 3)
					{
						for(new id = 1; id < MAX_ORG; id++) {
							if(OI[id][oTip] == ORG_TIP_PD) {
								OrgPoruka(id, 0x2641FEAA, "HQ: Svim jedinicama: Prijavio: Alarm");
								OrgPoruka(id, 0x2641FEAA, "HQ: Zlocin: Provala u kucu || Osumnjiceni: Nepoznat");
								format(varstring, sizeof(varstring), "HQ: Adresa kuce: %s", II[i][iAdress]);
								OrgPoruka(id, 0x2641FEAA, varstring);
							}
						}
					}
					format(varstring, sizeof(varstring), "[%s ALARM] BEEP BEEP BEEP!!", II[i][iAdress]);
					PorukaRadius(60.0, playerid, varstring, LJUBICASTA);
				}
				format(varstring, sizeof(varstring), "* %s se zalece i udara nogom u vrata.", ImeIgraca(playerid));
				PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
				ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0, 1);
				return 1;
			}
			else {
				SCM(playerid, CRVENA, "Vrata su otkljucana!");
				return 1;
			}
		}
		else {
			SendErrorMessage(playerid, "Ne mozes sam sebi razvaliti vrata!");
			return 1;
		}
	}
}
return 1;}

// Veh System

CMD:hauba(playerid, params[]) {
new engine,lights,alarm,doors,bonnet,boot,objective,
	vehicle = GetPlayerVehicleID(playerid);
if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) {
	SCM(playerid, CRVENA, "Morate biti vozac da bi ste mogli koristit ovu komandu.");
	return 1;}
if(IsVehicleBajs(vehicle) || IsVehicleMotor(vehicle) || IsVehicleBrod(vehicle)) {
	SendErrorMessage(playerid, "Nepoznata akcija.");
	return 1;}
GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
if(bonnet == 0) {
	ac_SetVehicleParamsEx(vehicle,engine,lights,alarm,doors,1,boot,objective);} else {
	ac_SetVehicleParamsEx(vehicle,engine,lights,alarm,doors,0,boot,objective);}
return 1;}

CMD:svetla(playerid, params[]) {
new engine,lights,alarm,doors,bonnet,boot,objective,
	vehicle = GetPlayerVehicleID(playerid);
if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) {
	SCM(playerid, CRVENA, "Morate biti vozac da bi ste mogli koristit ovu komandu.");
	return 1;}
if(IsVehicleBajs(vehicle) || IsVehicleBrod(vehicle)) {
	SendErrorMessage(playerid, "Nepoznata akcija.");
	return 1;}
GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
if(lights == 0) {
	ac_SetVehicleParamsEx(vehicle,engine,1,alarm,doors,bonnet,boot,objective);} else {
	ac_SetVehicleParamsEx(vehicle,engine,0,alarm,doors,bonnet,boot,objective);}
return 1;}

CMD:gepek(playerid, params[]) {
	new vehicleid, found;
for(new i = 0; i < MAX_VEHICLES; i++)
{
	new Float:X, Float:Y, Float:Z;
	GetVehiclePos(i, X, Y, Z);
	if(IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z)) {
		vehicleid = i;
		found = 1;
		break;
	}
	else
		continue;}
if(found == 0) return SendErrorMessage(playerid, "Niste blizu vozila.");

new Float:vehPos[3];
getPosBehindVehicle(vehicleid, vehPos[0], vehPos[1], vehPos[2], 0.0);
if(!IsPlayerInRangeOfPoint(playerid, 2, vehPos[0], vehPos[1], vehPos[2])) return SendErrorMessage(playerid, "Morate biti pored prtljaznika.");

if(IsANoTrunkVehicle(vehicleid)) return SendErrorMessage(playerid, "Ovo vozilo nema prtljaznik!");
if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Morate biti na nogama da biste zatvorili/otvorili prtljaznik.");
if(IsVehicleBajs(vehicleid) || IsVehicleMotor(vehicleid) || IsVehicleBrod(vehicleid)) {
	SendErrorMessage(playerid, "Nepoznata akcija.");
	return 1;}

if(ScriptIDVozila[vehicleid] == -1) return SendErrorMessage(playerid, "Ovo vozilo nije ispravno kreirano, ako mislis da je greska obrati se Admin timu.");

SPD(playerid, dialog_GEPEK, DSL, D_NASLOV, "Otvori/Zatvori gepek\nInformacije\nOstavi\nIzvadi", D_ODABERI, D_NAZAD);
return 1;}

CMD:zica(playerid, params[]) {
if(IsPlayerConnected(playerid)) {
	new vehicle = GetPlayerVehicleID(playerid);

	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu da biste koristili ovu komandu!");
	if(vCanDrive[vehicle] == 0) return SendErrorMessage(playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");
	if(IsVehicleBajs(vehicle)) return SendErrorMessage(playerid, "Ne mozete upaliti bicikl.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti vozac da bi ste mogli koristit ovu komandu.");
	if(Fuel[vehicle] == 0) return SendErrorMessage(playerid, "Vozilo nema goriva ne mozete ga upaliti.");

	if(TipVozila[vehicle] != PRIVATNO_VOZILO) return SendErrorMessage(playerid, "Nisi ni u jednom privatnom vozilu.");

	new autoid = ScriptIDVozila[vehicle];

	if(VehicleInfo[autoid][vOwned] == 1) {
		if(strcmp(ImeIgraca(playerid), VehicleInfo[autoid][vOwner], true) == 0) {
			SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu na Vasem vozilu.");
			return 1;
		}
		else {
		   // if(PlayerInfo[playerid][xToolkit] == true) {
				new time;
				switch(VehicleInfo[autoid][vImobilizator]) {
					case 0:
						time = 30000;
					case 1:
						time = 60000;
					case 2:
						time = 120000;
					case 3:
						time = 240000;
					case 4:
						time = 360000;
					case 5:
						time = 480000;
				}
				new varstring[96];
				format(varstring, sizeof(varstring), "* %s vadi alat za obijanje i pokusava upaliti vozilo pomocu alata.", ImeIgraca(playerid));
				PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
				PostaviWanted(playerid, "Paljenje vozila zicom", "Alarm", 10);

				SCM(playerid, BELA, "Da prekinete paljenje vozila, ukucajte /prekiniobijanje");
				TogglePlayerControllable(playerid, false);

				SetPVarInt(playerid, "EngineStartTimer", SetTimerEx("VehicleEngineStart",time,0,"i",playerid));

				SetPVarInt(playerid, "immobsecounds", (time/1000)+1);
				SetPVarInt(playerid, "immobcounttimer", SetTimerEx("ImmobCountForPlayer",1000,1,"i",playerid));
				SetPVarInt(playerid, "ImmobTimerCalled", 1);
				SetPVarInt(playerid, "StartingVehicle", 1);
				//PlayerInfo[playerid][xToolkit] = false;
			//] else return SendErrorMessage(playerid, "Nemas alat za obijanje!");
				return 1;
		}
	}
	else {
		SendErrorMessage(playerid, "Ovo vozilo nije moguce obiti.");
		return 1;
	}
}
return 1;}

CMD:obijbravu(playerid, params[]) {
new vehicleid, found;
for(new i = 0; i < MAX_VEHICLES; i++) {
	new Float:X, Float:Y, Float:Z;
	GetVehiclePos(i, X, Y, Z);
	if(IsPlayerInRangeOfPoint(playerid, 3.0, X, Y, Z)) {
		vehicleid = i;
		found = 1;
		break;
	}
	else
		continue;}
if(found == 0) {
	SendErrorMessage(playerid, "Niste blizu vozila.");
	return 1;}
new i = ScriptIDVozila[vehicleid];
if(TipVozila[vehicleid] == PRIVATNO_VOZILO) {
	if(strcmp(ImeIgraca(playerid), VehicleInfo[i][vOwner], true) == 0) {
		SendErrorMessage(playerid, "Ne mozete obiti svoje vozilo.");
		return 1;
	}
	else {
		if(PlayerInfo[playerid][xLevel] < 5 || PlayerInfo[playerid][xToolkit] == false) return SendErrorMessage(playerid, "Moras biti najmanje level 5/Nemas Alat za obijanje!");
		if(GetPVarInt(playerid, "BreakingLock") != 0) return SendErrorMessage(playerid, "Vec si u procesu provaljivanja brave!");
		if(VehicleInfo[i][vLocked] == 0) return SendErrorMessage(playerid, "Auto je otkljucan!");
		new time;
		switch(VehicleInfo[i][vLock]) {
			case 0:
				time = 30000;
			case 1:
				time = 60000;
			case 2:
				time = 120000;
			case 3:
				time = 240000;
			case 4:
				time = 360000;
			case 5:
				time = 480000;
		}
		new varstring[96];
		format(varstring, sizeof(varstring), "* %s vadi alat za obijanje i pokusava provaliti bravu na vozilu.", ImeIgraca(playerid));
		PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
		SCM(playerid, BELA, "Da prekinete proces obijanja brave ukucajte /prekiniobijanje");

		SetPVarInt(playerid, "BreakLockTimer", SetTimerEx("VehicleBreakLock", time, 0, "iii", playerid, vehicleid, i));
		TogglePlayerControllable(playerid, 0);

		SetPVarInt(playerid, "breaksecounds", (time/1000)-1);
		SetPVarInt(playerid, "breakcounttimer", SetTimerEx("BreakLockCountForPlayer", 1000, 1, "i", playerid));
		SetPVarInt(playerid, "BreakLockTimerCalled", 1);
		SetPVarInt(playerid, "BreakingVehicle", vehicleid);

		SetPVarInt(playerid, "BreakingLock", 1);
		PlayerInfo[playerid][xToolkit] = false;
	}
}
return 1;}

CMD:lock(playerid, params[]) {
new vehicleid, found, autoid,
	engine, lights, alarm, doors, bonnet, boot, objective;
new varstring[89];
for(new i = 0; i < MAX_VEHICLES; i++) {
	new Float:X, Float:Y, Float:Z;
	GetVehiclePos(i, X, Y, Z);
	if(IsPlayerInRangeOfPoint(playerid, 2.5, X, Y, Z)) {
		vehicleid = i;
		found = 1;
		break;
	}
	else
		continue;}
if(found == 0) {
	SendErrorMessage(playerid, "Niste blizu vozila.");
	return 1;}
if(TipVozila[vehicleid] == PRIVATNO_VOZILO) {

	if(PlayerInfo[playerid][xVoziloID][0] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][0]][vID] == vehicleid) { autoid = PlayerInfo[playerid][xVoziloID][0];}
	else if(PlayerInfo[playerid][xVoziloID][1] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][1]][vID] == vehicleid) { autoid = PlayerInfo[playerid][xVoziloID][1];}
	else if(PlayerInfo[playerid][xVoziloID][2] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][2]][vID] == vehicleid) { autoid = PlayerInfo[playerid][xVoziloID][2];}
	else if(PlayerInfo[playerid][xVoziloID][3] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][3]][vID] == vehicleid) { autoid = PlayerInfo[playerid][xVoziloID][3];}
	else if(PlayerInfo[playerid][xRezervniKljucevi] == ScriptIDVozila[vehicleid]) {}
	else if(PlayerInfo[playerid][xAdmin] >= 1) {}
	else return SendErrorMessage(playerid, "Ovo nije vase vozilo.");
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(doors == 0) {
		VehicleInfo[autoid][vLocked] = 1;
		ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
		format(varstring, sizeof(varstring), "* %s zakljucava svoje vozilo marke %s.", ImeIgraca(playerid), GetVehicleNameEx(GetVehicleModel(vehicleid)));
		PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		SaveVehicle(autoid);
	}
	else if(doors == 1) {
		VehicleInfo[autoid][vLocked] = 0;
		ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
		format(varstring, sizeof(varstring), "* %s otkljucava svoje vozilo marke %s.", ImeIgraca(playerid), GetVehicleNameEx(GetVehicleModel(vehicleid)));
		PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		SaveVehicle(autoid);
	}
}
else if(TipVozila[vehicleid] == ORGANIZACIJSKO_VOZILO) {
	if(OrgaVozila[vehicleid] == PlayerInfo[playerid][xClan] || PlayerInfo[playerid][xAdmin] >= 1) {
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(doors == 0) {
			ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
			format(varstring, sizeof(varstring), "* %s zakljucava svoje vozilo marke %s.", ImeIgraca(playerid), GetVehicleNameEx(GetVehicleModel(vehicleid)));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		}
		else if(doors == 1) {
			ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
			format(varstring, sizeof(varstring), "* %s otkljucava svoje vozilo marke %s.", ImeIgraca(playerid), GetVehicleNameEx(GetVehicleModel(vehicleid)));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		}
	}
	else {
		SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
		return 1;
	}
}
else if(TipVozila[vehicleid] == RENTANO_VOZILO) {
	if(PlayerInfo[playerid][xAdmin] >= 1) {
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(doors == 0) {
			ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
			format(varstring, sizeof(varstring), "* %s zakljucava svoje vozilo marke %s.", ImeIgraca(playerid), GetVehicleNameEx(GetVehicleModel(vehicleid)));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		}
		else if(doors == 1) {
			ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
			format(varstring, sizeof(varstring), "* %s otkljucava svoje vozilo marke %s.", ImeIgraca(playerid), GetVehicleNameEx(GetVehicleModel(vehicleid)));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		}
	}
	else {
		SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
		return 1;
	}
}
else if(TipVozila[vehicleid] == GRADONACELNIKOVO_VOZILO) {
	if(PlayerInfo[playerid][xGradRank] == GRAD_DRIVER || PlayerInfo[playerid][xGradRank] == GRAD_LDRIVER || PlayerInfo[playerid][xAdmin] >= 1) {
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(doors == 0) {
			ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
			format(varstring, sizeof(varstring), "* %s zakljucava svoje vozilo marke %s.", ImeIgraca(playerid), GetVehicleNameEx(GetVehicleModel(vehicleid)));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		}
		else if(doors == 1) {
			ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
			format(varstring, sizeof(varstring), "* %s otkljucava svoje vozilo marke %s.", ImeIgraca(playerid), GetVehicleNameEx(GetVehicleModel(vehicleid)));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		}
	}
	else {
		SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
		return 1;
	}
}
else if(TipVozila[vehicleid] == PROMOTER_VOZILO) {
	if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xPromoter] >= 1 || PlayerInfo[playerid][xAdmin] >= 1) {
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(doors == 0) {
			ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
			format(varstring, sizeof(varstring), "* %s zakljucava svoje vozilo marke %s.", ImeIgraca(playerid), GetVehicleNameEx(GetVehicleModel(vehicleid)));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		}
		else if(doors == 1) {
			ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
			format(varstring, sizeof(varstring), "* %s otkljucava svoje vozilo marke %s.", ImeIgraca(playerid), GetVehicleNameEx(GetVehicleModel(vehicleid)));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		}
	}
	else {
		SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
		return 1;
	}
}
else if(TipVozila[vehicleid] == VIP_VOZILO) {
	if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xVIPLevel] >= 1 || PlayerInfo[playerid][xAdmin] >= 1) {
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(doors == 0) {
			ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
			format(varstring, sizeof(varstring), "* %s zakljucava svoje vozilo marke %s.", ImeIgraca(playerid), GetVehicleNameEx(GetVehicleModel(vehicleid)));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		}
		else if(doors == 1) {
			ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
			format(varstring, sizeof(varstring), "* %s otkljucava svoje vozilo marke %s.", ImeIgraca(playerid), GetVehicleNameEx(GetVehicleModel(vehicleid)));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		}
	}
	else {
		SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
		return 1;
	}
}
else if(TipVozila[vehicleid] == POLAGANJE_VOZILO) {
	if(PlayerInfo[playerid][xAdmin] >= 4 || Polaganje[playerid] >= 1 || PlayerInfo[playerid][xAdmin] >= 1) {
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(doors == 0) {
			ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
			format(varstring, sizeof(varstring), "* %s zakljucava vozilo marke %s.", ImeIgraca(playerid), GetVehicleNameEx(GetVehicleModel(vehicleid)));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		}
		else if(doors == 1) {
			ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
			format(varstring, sizeof(varstring), "* %s otkljucava vozilo marke %s.", ImeIgraca(playerid), GetVehicleNameEx(GetVehicleModel(vehicleid)));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		}
	}
	else {
		SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
		return 1;
	}
}
else if(TipVozila[vehicleid] == PUMPA_VOZILO) {

	if(PumpaVozilo[vehicleid] == PlayerInfo[playerid][xFirmaID] || PlayerInfo[playerid][xAdmin] >= 5) {

		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(doors == 0) {
			ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
			format(varstring, sizeof(varstring), "* %s zakljucava vozilo marke %s.", ImeIgraca(playerid), GetVehicleNameEx(GetVehicleModel(vehicleid)));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		}
		else if(doors == 1) {
			ac_SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
			format(varstring, sizeof(varstring), "* %s otkljucava vozilo marke %s.", ImeIgraca(playerid), GetVehicleNameEx(GetVehicleModel(vehicleid)));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
		}

	}
	else {
		SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
	}
}
else {
	SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
	return 1;}
return 1;}

CMD:platikaznu(playerid, params[]) {

if(!IsPlayerInRangeOfPoint(playerid, 3.0, 693.7112, 1973.1046, -22.3034)) return SendErrorMessage(playerid, "Morate biti u policijskoj stanici.");

if(PlayerInfo[playerid][xRadarBodovi] == 0) return SendErrorMessage(playerid, "Nemate radar bodove.");
if(PlayerInfo[playerid][xNovac] < (PlayerInfo[playerid][xRadarBodovi]*600)) return SendErrorMessage(playerid, "Nemate %d$ za placanje %d radar poena.", (PlayerInfo[playerid][xRadarBodovi]*600), PlayerInfo[playerid][xRadarBodovi]);

DajIgracuNovac(playerid, -(PlayerInfo[playerid][xRadarBodovi]*600));
SendInfoMessage(playerid, "Platili ste %d$ i otplatili %d radar bodova.", (PlayerInfo[playerid][xRadarBodovi]*600), PlayerInfo[playerid][xRadarBodovi]);
PlayerInfo[playerid][xRadarBodovi] = 0;
SavePlayer(playerid);

return 1;}

CMD:vozilo(playerid, params[]) {
new string[128];
format(string, sizeof(string),"%s\n%s\n%s\n%s", getVehicleName(PlayerInfo[playerid][xVoziloID][0]), getVehicleName(PlayerInfo[playerid][xVoziloID][1]), getVehicleName(PlayerInfo[playerid][xVoziloID][2]), getVehicleName(PlayerInfo[playerid][xVoziloID][3]));
SPD(playerid, dialog_VEHLIST, DSL, D_NASLOV, string, "Odaberi", "Izlaz");
return true;}

CMD:engine(playerid, params[]) {
if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
	new vehicle = GetPlayerVehicleID(playerid),
	engine,lights,alarm,doors,bonnet,boot,objective;
	new varstring[70];

	if(vCanDrive[vehicle] == 0) return SendErrorMessage(playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");
	if(IsVehicleBajs(vehicle)) return SendErrorMessage(playerid, "Stvarno mislis upaliti biciklu? ");
	if(Fuel[vehicle] == 0) return SendErrorMessage(playerid, "Vozilo nema goriva ne mozete ga upaliti.");

	if(TipVozila[vehicle] == PRIVATNO_VOZILO) {

		if(PlayerInfo[playerid][xAdmin] >= 5) {}
		else {
			if(PlayerInfo[playerid][xVoziloID][0] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][0]][vID] == vehicle) {}
			else if(PlayerInfo[playerid][xVoziloID][1] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][1]][vID] == vehicle) {}
			else if(PlayerInfo[playerid][xVoziloID][2] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][2]][vID] == vehicle) {}
			else if(PlayerInfo[playerid][xVoziloID][3] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][3]][vID] == vehicle) {}
			else if(PlayerInfo[playerid][xRezervniKljucevi] == ScriptIDVozila[vehicle]) {}
			else return SendErrorMessage(playerid, "Ovo nije vase vozilo.");
		}

		GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
		if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
		SetPVarInt(playerid, "StartingVehicle", 1);
		//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
	}
	else if(TipVozila[vehicle] == ORGANIZACIJSKO_VOZILO) {
		if(OrgaVozila[vehicle] == PlayerInfo[playerid][xClan] || PlayerInfo[playerid][xAdmin] > 0) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
		}
		}
	else if(TipVozila[vehicle] == POSLOVNO_VOZILO) {

		if(PosaoVozila[vehicle] == PlayerInfo[playerid][xPosao] || PlayerInfo[playerid][xAdmin] > 0) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");

		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
		}
	}
	else if(TipVozila[vehicle] == GRADONACELNIKOVO_VOZILO) {
		if(PlayerInfo[playerid][xGradRank] == GRAD_DRIVER || PlayerInfo[playerid][xGradRank] == GRAD_LDRIVER || PlayerInfo[playerid][xAdmin] >= 5) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");

		}
		else {
			SendErrorMessage(playerid, "Nemate kljuceve od ovog vozila ili uniformu vozaca gradonacelnika!");
		}
	}
	else if(TipVozila[vehicle] == IZLOZBENO_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] == 7) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
		}
	}
	else if(TipVozila[vehicle] == ADMIN_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 1) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
			return 1;
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
		}
	}
	else if(TipVozila[vehicle] == HELPER_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 1) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
			return 1;
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
		}
	}
	else if(TipVozila[vehicle] == PROMOTER_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 5 || PlayerInfo[playerid][xPromoter] >= 1) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
			return 1;
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
		}
	}
	else if(TipVozila[vehicle] == VIP_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 5 || PlayerInfo[playerid][xVIPLevel] >= 1 || PlayerInfo[playerid][xYouTuber] >= 1) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
			return 1;
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
		}
	}
	else if(TipVozila[vehicle] == POLAGANJE_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 5 || Polaganje[playerid] >= 1) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
			return 1;
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
		}
	}
	else if(TipVozila[vehicle] == PUMPA_VOZILO) {
		if(PumpaVozilo[vehicle] == PlayerInfo[playerid][xFirmaID] || PlayerInfo[playerid][xAdmin] >= 5) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
					format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
				else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
		}
	}
	else {
		GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
		if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
		SetPVarInt(playerid, "StartingVehicle", 1);
		//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
	}
}
return true;}

CMD:vehicle(playerid, params[]) {
new item[32], izbor;
if(sscanf(params, "s[32] ", item)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/vehicle [opcija]");
	SCM(playerid, BELA, "[Opcije] list, registruj, postavitable");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(strcmp(item, "registruj", true) == 0) {
	if(sscanf(params, "s[32]d", item, izbor)) {
		SendUsageMessage(playerid, "/vehicle registruj [broj vozila]");
		SCM(playerid, BELA, "Listu vozila pogledajte pod /vehicle list.");
		return 1;
	}
	if(izbor == -1 || izbor == 0 || izbor > MAX_CARS) return SendErrorMessage(playerid, "Pogresan broj vozila.");

	if(PlayerInfo[playerid][xVoziloID][0] == izbor) {}
	else if(PlayerInfo[playerid][xVoziloID][1] == izbor) {}
	else if(PlayerInfo[playerid][xVoziloID][2] == izbor) {}
	else if(PlayerInfo[playerid][xVoziloID][3] == izbor) {}
	else return SendErrorMessage(playerid, "Ne posedujete vozilo ciji ste broj uneli.");

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1470.9427,-1784.1099,-20.2831)) return SendErrorMessage(playerid, "Da biste koristili ovu komandu morati biti u opstini.");
	if(VehicleInfo[izbor][vTeh] != 1) return SendErrorMessage(playerid, "Vozilo nije proslo tehnicki pregled(kod mehanicara)!");
	if(PlayerInfo[playerid][xNovac] < 10000) return SendErrorMessage(playerid, "Nemas dovoljno novca(10000$).");
	DajIgracuNovac(playerid, -10000);
	VehicleInfo[izbor][vTeh] = 2; SaveVehicle(izbor);
	SCM(playerid, SVETLOPLAVA, "Overio si papire vozila, idi u policijsku stanicu da uzmes tablice.");
	return 1;}
else if(strcmp(item, "uzmitablice",true) == 0)
{
	if(sscanf(params, "s[32]d", item, izbor)) {
		SendUsageMessage(playerid, "/vehicle uzmitablice [broj vozila]");
		SCM(playerid, BELA, "Listu vozila pogledajte pod /vehicle list.");
		return 1;
	}
	if(izbor == -1 || izbor == 0) return SendErrorMessage(playerid, "Pogresan broj vozila.");

	if(PlayerInfo[playerid][xVoziloID][0] == izbor) {}
	else if(PlayerInfo[playerid][xVoziloID][1] == izbor) {}
	else if(PlayerInfo[playerid][xVoziloID][2] == izbor) {}
	else if(PlayerInfo[playerid][xVoziloID][3] == izbor) {}
	else return SendErrorMessage(playerid, "Ne posedujete vozilo ciji ste broj uneli.");

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 699.9731, 1977.0692, -22.3034)) return SendErrorMessage(playerid, "Morate biti u policijskoj stanici.");
	if(VehicleInfo[izbor][vTeh] != 2) return SendErrorMessage(playerid, "Nisi overio papire u opstini!");
	if(PlayerInfo[playerid][xNovac] < 25000) return SendErrorMessage(playerid, "Nemas dovoljno novca(100$).");
	DajIgracuNovac(playerid, -25000);

	SPD(playerid, dialog_IZABERITABLICE, DSL, D_NASLOV, "Brojevne tablice\nTablice po zelji", "Izaberi", "Odustani");
	PonudioIgrac[playerid] = izbor;
	return 1;}
else if(strcmp(item, "postavitable",true) == 0) {
	if(sscanf(params, "s[32]d", item, izbor)) {
		SendUsageMessage(playerid, "/vehicle postavitable [broj vozila]");
		SCM(playerid, BELA, "Listu vozila pogledajte pod /vehicle list.");
		return 1;
	}
	if(izbor == -1 || izbor == 0) return SendErrorMessage(playerid, "Pogresan broj vozila.");

	if(PlayerInfo[playerid][xVoziloID][0] == izbor) {}
	else if(PlayerInfo[playerid][xVoziloID][1] == izbor) {}
	else if(PlayerInfo[playerid][xVoziloID][2] == izbor) {}
	else if(PlayerInfo[playerid][xVoziloID][3] == izbor) {}
	else return SendErrorMessage(playerid, "Ne posedujete vozilo ciji ste broj uneli.");

	new Float:x, Float:y, Float:z;
	GetVehiclePos(VehicleInfo[izbor][vID], x, y, z);
	if(!IsPlayerInRangeOfPoint(playerid, 7.0, x, y, z))
	{
		SendErrorMessage(playerid, "Nisi u blizini auta.");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Moras biti van auta!");
	if(VehicleInfo[izbor][vTeh] < 3) return SendErrorMessage(playerid, "Nisi uzeo tablice iz policijske stanice!");

	if(VehicleInfo[izbor][vTeh] == 3) VehicleInfo[izbor][vReg] = 1;
	else if(VehicleInfo[izbor][vTeh] == 4) VehicleInfo[izbor][vReg] = 2;

	VehicleInfo[izbor][vTeh] = 0; VehicleInfo[izbor][vRegVreme] = 720;
	SaveVehicle(izbor);
	SendInfoMessage(playerid, "Vase vozilo je registrovano 30 dana(720 sati).");
	SetTimerEx("Postaviotable", 5000, false, "ii", playerid, izbor);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0,5000, 0);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0,5000, 0);
	return 1;}
else if(strcmp(item, "list",true) == 0) {
	new varstring[70];
	new DialogStrgEx[545];
	if(PlayerInfo[playerid][xVoziloID][0] == -1 && PlayerInfo[playerid][xVoziloID][1] == -1 && PlayerInfo[playerid][xVoziloID][2] == -1 && PlayerInfo[playerid][xVoziloID][3] == -1) return SendErrorMessage(playerid, "Nemate nijedno vozilo!");
	if(PlayerInfo[playerid][xVoziloID][0] != -1)
	{
		format(varstring, sizeof(varstring), "Vozilo: 1 || Broj: %d || Ime: %s\n", PlayerInfo[playerid][xVoziloID][0], getVehicleName(PlayerInfo[playerid][xVoziloID][0]));
		strcat(DialogStrgEx, varstring);
	}
	if(PlayerInfo[playerid][xVoziloID][1] != -1)
	{
		format(varstring, sizeof(varstring), "Vozilo: 2 || Broj: %d || Ime: %s\n", PlayerInfo[playerid][xVoziloID][1], getVehicleName(PlayerInfo[playerid][xVoziloID][1]));
		strcat(DialogStrgEx, varstring);
	}
	if(PlayerInfo[playerid][xVoziloID][2] != -1)
	{
		format(varstring, sizeof(varstring), "Vozilo: 3 || Broj: %d || Ime: %s\n", PlayerInfo[playerid][xVoziloID][2], getVehicleName(PlayerInfo[playerid][xVoziloID][2]));
		strcat(DialogStrgEx, varstring);
	}
	if(PlayerInfo[playerid][xVoziloID][3] != -1)
	{
		format(varstring, sizeof(varstring), "Vozilo: 4 || Broj: %d || Ime: %s\n", PlayerInfo[playerid][xVoziloID][3], getVehicleName(PlayerInfo[playerid][xVoziloID][3]));
		strcat(DialogStrgEx, varstring);
	}
	SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
	return 1;}
else {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/vehicle [opcija]");
	SCM(playerid, BELA, "[Opcije] list, registruj, postavitable");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	}
return true;}

CMD:daj(playerid, params[]) {
new x_nr[32],
	giveplayerid;

if(sscanf(params, "s[32] ", x_nr)) {
	SendUsageMessage(playerid, "/daj [Opcija] [ID/Deo Imena] [kolicina]");
	SCM(playerid, BELA, "OPCIJE: oruzje, sat, telefon, cigare, upaljac, materijale");
	return 1;}
new varstring[128];
if(strcmp(x_nr,"oruzje",true) == 0) {
	new kolicina;
	if(sscanf(params, "s[32]ud", x_nr, giveplayerid, kolicina)) return SendUsageMessage(playerid, "/daj oruzje [ID/Deo Imena] [kolicina]");
	new Float:H; GetPlayerHealth(playerid, H);
	if(H < 15.0) return SendErrorMessage(playerid, "Ne mozete dati oruzje, ako imate manje od 15HP.");
	if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete ovo, imate zabranu - /disarmtime.");
	if(PlayerInfo[giveplayerid][xDisarm] != 0) return SendErrorMessage(playerid, "Taj igrac ima zabranu koriscenja oruzja.");
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti van vozila.");
	if(IsPlayerInAnyVehicle(giveplayerid)) return SendErrorMessage(playerid, "Igrac mora biti van vozila.");
	if(giveplayerid != INVALID_PLAYER_ID) {
			if(PlayerLogged[giveplayerid] == true) {
			if(IsPlayerNearPlayer(3.0, playerid, giveplayerid)) {
				new weapon = GetWeapon(playerid);

				if(GetFactionType(playerid) == ORG_TIP_PD || GetFactionType(playerid) == ORG_TIP_HITM) {
					SendErrorMessage(playerid, "Vi ste u drzavnoj organizaciji, ne mozete davati oruzje!");
					return 1;
				}
				if(WARPInfo[playerid][WARIgrac] != -1) return SendErrorMessage(playerid, "Ne mozes ovo dok si u waru.");
				if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes ovo dok si na dmu.");
				if(PozvanDuel[playerid] == 1) return SendErrorMessage(playerid, "Ne mozete ovo dok ste na duelu.");
				if(giveplayerid == playerid) return SendErrorMessage(playerid, "Ne mozete sami sebi davati oruzje!");
				if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti najmanje level 3 da bi ste mogli koristit ovu komandu!");
				if(PlayerInfo[giveplayerid][xLevel] < 3) return SendErrorMessage(playerid, "Igrac nije level 3!");
				if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete dok radite posao");
				if(RibarOprema[playerid] == true) return SendErrorMessage(playerid, "Ne mozete ovo u opremi ribara.");
				if(weapon == 0) return SendErrorMessage(playerid, "Nemate nijedno oruzje u ruci!");
				if(IsMeleeWeapon(weapon)) {
					antiCheatCS[playerid][WeaponDetect] = 3;
					RemovePlayerWeapon(playerid, weapon);

					SendInfoMessage(playerid, "Dali ste %s %s .", ImeIgraca(giveplayerid), WeapNames[weapon]);
					SendInfoMessage(giveplayerid, "%s vam je dao %s .", ImeIgraca(playerid), WeapNames[weapon]);
				}
				else {
					if(kolicina < 1) return SendErrorMessage(playerid, "Kolicina ne moze u minus.");
					if(kolicina > GetPlayerAmmo(playerid)) return SendErrorMessage(playerid, "Nemas toliko municije za dati.");

					new mplayerid = GetPlayerAmmo(playerid), mnova = mplayerid - kolicina;

					if(kolicina == GetPlayerAmmo(playerid)) {
						RemovePlayerWeapon(playerid, weapon);
					}
					else {
						if(GetWeapon(giveplayerid) != GetWeapon(playerid)) return SendErrorMessage(playerid, "Igrac nema to oruzje u ruci(ako zelis ceo gun kucaj tacno metkova).");
						SetWeaponAmmo(playerid, weapon, mnova);
					}
					antiCheatCS[playerid][WeaponDetect] = 3;

					SendInfoMessage(playerid, "Dali ste %s %s sa %d metaka .", ImeIgraca(giveplayerid), WeapNames[weapon], kolicina);
					SendInfoMessage(giveplayerid, "%s vam je dao %s sa %d metaka.", ImeIgraca(playerid), WeapNames[weapon], kolicina);
				}
				antiCheatCS[giveplayerid][WeaponDetect] = 3;
				GiveWeaponToPlayer(giveplayerid, weapon, kolicina);
				SetPlayerArmedWeapon(giveplayerid, weapon);

				format(varstring, sizeof(varstring), "* %s daje oruzje %s.", ImeIgraca(playerid), ImeIgraca(giveplayerid));
				PorukaRadius(5.0, playerid, varstring, LJUBICASTA);
			} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
		}
	} else return SendErrorMessage(playerid, "Taj igrac nije online !");
	return 1;}
else if(strcmp(x_nr,"cigare",true) == 0) {
	new moneys;
	if(sscanf(params, "s[32]ui", x_nr, giveplayerid, moneys)) return SendUsageMessage(playerid, "/daj cigare [ID/Deo Imena] [kolicina]");
	if(PlayerLogged[giveplayerid] == true) {
			if(giveplayerid != INVALID_PLAYER_ID) {
			if(IsPlayerNearPlayer(3.0, playerid, giveplayerid)) {
				if(giveplayerid == playerid) return SendErrorMessage(playerid, "Ne mozete sami sebi davati cigarete!");
				if((PlayerInfo[giveplayerid][xCigare] + moneys) > 100) return SendErrorMessage(playerid, "Osoba moze najvise nositi 100 cigareta kod sebe");
				if(moneys > 0 && PlayerInfo[playerid][xCigare] >= moneys) {
					PlayerInfo[giveplayerid][xCigare] += moneys;
						PlayerInfo[playerid][xCigare] -= moneys;
					PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);

					SendInfoMessage(playerid, "Poslali ste %s (ID: %d), %d cigareta.", ImeIgraca(giveplayerid), giveplayerid, moneys);
					SendInfoMessage(giveplayerid, "Primili ste %d cigareta od %s (ID: %d).", moneys, ImeIgraca(playerid), playerid);

					format(varstring, sizeof(varstring), "* %s vadi kutiju cigareta i daje cigaretu %s.", ImeIgraca(playerid), ImeIgraca(giveplayerid));
					PorukaRadius(3.0, playerid, varstring, LJUBICASTA);
				} else return SendErrorMessage(playerid, "Nemate toliko cigareta kod sebe !");
			} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
			}
	} else return SendErrorMessage(playerid, "Taj igrac nije online !");
	return 1;}
else if(strcmp(x_nr,"upaljac",true) == 0) {
	if(sscanf(params, "s[32]u", x_nr, giveplayerid)) {
		SendUsageMessage(playerid, "/daj upaljac [ID/Deo Imena]");
		return 1;
	}
		if(giveplayerid != INVALID_PLAYER_ID) {
			if(PlayerLogged[giveplayerid] == true) {
			if(IsPlayerNearPlayer(3.0, playerid, giveplayerid)) {
				if(giveplayerid == playerid) return SendErrorMessage(playerid, "Ne mozete sami sebi davati upaljac!");
				if(PlayerInfo[giveplayerid][xUpaljac] == 1) return SendErrorMessage(playerid, "Osoba vec ima upaljac");
				if(PlayerInfo[playerid][xUpaljac] == 1) {
					PlayerInfo[playerid][xUpaljac] = 0;
					PlayerInfo[giveplayerid][xUpaljac] = 1;
					PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
					format(varstring, sizeof(varstring), "* %s vadi upaljac iz dzepa i daje ga %s.", ImeIgraca(playerid), ImeIgraca(giveplayerid));
					PorukaRadius(5.0, playerid, varstring, LJUBICASTA);
				} else return SendErrorMessage(playerid, "Nemas upaljac !");
			} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
			}
	} else return SendErrorMessage(playerid, "Taj igrac nije online !");
	return 1;}
else if(strcmp(x_nr,"telefon",true) == 0) {
	if(sscanf(params, "s[32]u", x_nr, giveplayerid)) return SendUsageMessage(playerid, "/daj telefon [ID/Deo Imena]");
	if(PlayerLogged[giveplayerid] == true) {
			if(giveplayerid != INVALID_PLAYER_ID) {
			if(IsPlayerNearPlayer(3.0, playerid, giveplayerid)) {
				if(giveplayerid == playerid) return SendErrorMessage(playerid, "Ne mozete sami sebi davati mobilni telefon!");
				if(PlayerInfo[giveplayerid][xBrojTelefona] != 0) return SendErrorMessage(playerid, "Osoba vec ima mobilni!");
				if(PlayerInfo[playerid][xBrojTelefona] != 0) {
					PlayerInfo[giveplayerid][xBrojTelefona] = PlayerInfo[playerid][xBrojTelefona];
					PlayerInfo[giveplayerid][xModelTelefona] = PlayerInfo[playerid][xModelTelefona];
					PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
					format(varstring, sizeof(varstring), "* %s daje mobilni telefon %s.", ImeIgraca(playerid), ImeIgraca(giveplayerid));
					PorukaRadius(5.0, playerid, varstring, LJUBICASTA);
					PlayerInfo[playerid][xBrojTelefona] = 0;
					PlayerInfo[playerid][xModelTelefona] = 0;
				} else return SendErrorMessage(playerid, "Nemas mobilni !");
			} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
			}
	} else return SendErrorMessage(playerid, "Taj igrac nije online !");
	return 1;}
else if(strcmp(x_nr,"sat",true) == 0) {
	if(sscanf(params, "s[32]u", x_nr, giveplayerid)) return SendUsageMessage(playerid, "/daj sat [ID/Deo Imena]");
		if(giveplayerid != INVALID_PLAYER_ID) {
			if(PlayerLogged[giveplayerid] == true) {
			if(IsPlayerNearPlayer(3.0, playerid, giveplayerid)) {
				if(giveplayerid == playerid) return SendErrorMessage(playerid, "Ne mozete sami sebi davati sat!");
				if(PlayerInfo[giveplayerid][xSat] != 0) return SendErrorMessage(playerid, "Osoba vec ima sat!");
				if(PlayerInfo[playerid][xSat] != 0) {
					PlayerInfo[giveplayerid][xSat] = PlayerInfo[playerid][xSat];
					PlayerInfo[playerid][xSat] = 0;
					PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
					format(varstring, sizeof(varstring), "* %s skida sat sa ruke i daje ga %s.", ImeIgraca(playerid), ImeIgraca(giveplayerid));
					PorukaRadius(5.0, playerid, varstring, LJUBICASTA);
				} else return SendErrorMessage(playerid, "Nemas sat !");
			} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
			}
	} else return SendErrorMessage(playerid, "Taj igrac nije online !");
	return 1;}
else if(strcmp(x_nr,"materijale",true) == 0) {
	new moneys;
	if(sscanf(params, "s[32]ui", x_nr, giveplayerid, moneys)) return SendUsageMessage(playerid, "/daj materijale [ID/Deo Imena] [kolicina]");
	if(PlayerLogged[giveplayerid] == true) {
			if(giveplayerid != INVALID_PLAYER_ID) {
			if(IsPlayerNearPlayer(3.0, playerid, giveplayerid)) {
				if(giveplayerid == playerid) return SendErrorMessage(playerid, "Ne mozete sami sebi davati materijale!");
				if(moneys > 0 && PlayerInfo[playerid][xMaterijali] >= moneys) {
					PlayerInfo[giveplayerid][xMaterijali] += moneys;
						PlayerInfo[playerid][xMaterijali] -= moneys;
					PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);

					SendInfoMessage(playerid, "Poslali ste %s (ID: %d), %d materijala.", ImeIgraca(giveplayerid), giveplayerid, moneys);
					SendInfoMessage(giveplayerid, "Primili ste %d materijala od %s (ID: %d).", moneys, ImeIgraca(playerid), playerid);

					format(varstring, sizeof(varstring), "* %s vadi materijala i daje ih %s.", ImeIgraca(playerid), ImeIgraca(giveplayerid));
					PorukaRadius(3.0, playerid, varstring, LJUBICASTA);
				} else return SendErrorMessage(playerid, "Nemate toliko materijala kod sebe !");
			} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
			}
	} else return SendErrorMessage(playerid, "Taj igrac nije online !");
	return 1;}
return 1;}

// 24/7 System
CMD:uzmicigaretu(playerid, params[]) {
if(PlayerInfo[playerid][xCigare] < 1) return SendErrorMessage(playerid, "  Nemate cigareta!");
new varstring[55];
if(PlayerInfo[playerid][xUpaljac] == 1) {
		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 3.0, 0, 0, 0, 0, 0, 1);
		SetPlayerSpecialAction(playerid, 21);
		SCM(playerid, FUSIONGAMING, "Stisni lijevu tipku misa da pocnes pusiti.");
		SCM(playerid, FUSIONGAMING, "Koristi tipku ENTER da bacis cigaretu.");
		if(Maskuse[playerid] == false)
		format(varstring, sizeof(varstring), "** %s pali cigaretu i pusi.", ImeIgraca(playerid));
	else
		format(varstring, sizeof(varstring), "** Maska_%d pali cigaretu i pusi.", PlayerInfo[playerid][xMaskID]);
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	SetPVarInt(playerid, "gSmoking", 1);
	PlayerInfo[playerid][xCigare] -= 1;
	SavePlayer(playerid);} else return SendErrorMessage(playerid, "Nemas upaljac!");
return 1;}

CMD:izbaci(playerid, params[]) {
new item[32];
new varstring[80];
if(sscanf(params, "s[32] ", item)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/izbaci [opcija]");
	SCM(playerid, BELA, "[Opcije] pizza, uze, maska, sok, pivo, hamburger, piletina, cigare, upaljac");
	SCM(playerid, BELA, "[Opcije] sodab, desvoda");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(strcmp(item, "pizza",true) == 0) {
	if(UzeoIzMarketa[playerid][0] == 0) return SendErrorMessage(playerid, "Nemate picu u korpi za kupovinu.");
	UkupnaCena[playerid] -= 1000;
	format(varstring, sizeof(varstring), "%s levom rukom izbacuje picu iz korpe za kupovinu.", ImeIgraca(playerid));
	PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
	UzeoIzMarketa[playerid][0]--;
	return 1;}
else if(strcmp(item, "uze",true) == 0)
{
	if(UzeoIzMarketa[playerid][1] == 0) return SendErrorMessage(playerid, "Nemate uze u korpi za kupovinu.");
	UkupnaCena[playerid] -= 2000;
	format(varstring, sizeof(varstring), "%s levom rukom izbacuje uze iz korpe za kupovinu.", ImeIgraca(playerid));
	PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
	UzeoIzMarketa[playerid][1] = 0;
	return 1;}
else if(strcmp(item, "maska",true) == 0)
{
	if(UzeoIzMarketa[playerid][2] == 0) return SendErrorMessage(playerid, "Nemate masku u korpi za kupovinu.");
	UkupnaCena[playerid] -= 80000;
	format(varstring, sizeof(varstring), "%s levom rukom izbacuje masku iz korpe za kupovinu.", ImeIgraca(playerid));
	PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
	UzeoIzMarketa[playerid][2] = 0;
	return 1;}
else if(strcmp(item, "sok",true) == 0)
{
	if(UzeoIzMarketa[playerid][3] == 0) return SendErrorMessage(playerid, "Nemate sok u korpi za kupovinu.");
	UkupnaCena[playerid] -= 400;
	format(varstring, sizeof(varstring), "%s levom rukom izbacuje sok iz korpe za kupovinu.", ImeIgraca(playerid));
	PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
	UzeoIzMarketa[playerid][3] -= 1;
	return 1;}
else if(strcmp(item, "pivo",true) == 0)
{
	if(UzeoIzMarketa[playerid][4] == 0) return SendErrorMessage(playerid, "Nemate pivo u korpi za kupovinu.");
	UkupnaCena[playerid] -= 550;
	format(varstring, sizeof(varstring), "%s levom rukom izbacuje pivo iz korpe za kupovinu.", ImeIgraca(playerid));
	PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
	UzeoIzMarketa[playerid][4] -= 1;
	return 1;}
else if(strcmp(item, "hamburger",true) == 0)
{
	if(UzeoIzMarketa[playerid][5] == 0) return SendErrorMessage(playerid, "Nemate hamburger u korpi za kupovinu.");
	UkupnaCena[playerid] -= 650;
	format(varstring, sizeof(varstring), "%s levom rukom izbacuje hamburger iz korpe za kupovinu.", ImeIgraca(playerid));
	PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
	UzeoIzMarketa[playerid][5]--;
	return 1;}
else if(strcmp(item, "piletina",true) == 0)
{
	if(UzeoIzMarketa[playerid][6] == 0) return SendErrorMessage(playerid, "Nemate kokosku u korpi za kupovinu.");
	UkupnaCena[playerid] -= 2500;
	format(varstring, sizeof(varstring), "%s levom rukom izbacuje piletinu iz korpe za kupovinu.", ImeIgraca(playerid));
	PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
	UzeoIzMarketa[playerid][6]--;
	return 1;}
else if(strcmp(item, "cigare",true) == 0)
{
	if(UzeoIzMarketa[playerid][7] == 0) return SendErrorMessage(playerid, "Nemate cigare u korpi za kupovinu.");
	UkupnaCena[playerid] -= 6000;
	format(varstring, sizeof(varstring), "%s levom rukom izbacuje cigare iz korpe za kupovinu.", ImeIgraca(playerid));
	PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
	UzeoIzMarketa[playerid][7] = 0;
	return 1;}
else if(strcmp(item, "upaljac",true) == 0)
{
	if(UzeoIzMarketa[playerid][8] == 0) return SendErrorMessage(playerid, "Nemate upaljac u korpi za kupovinu.");
	UkupnaCena[playerid] -= 4000;
	format(varstring, sizeof(varstring), "%s levom rukom izbacuje upaljac iz korpe za kupovinu.", ImeIgraca(playerid));
	PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
	UzeoIzMarketa[playerid][8] = 0;
	return 1;}
else if(strcmp(item, "sodab",true) == 0)
{
	if(UzeoIzMarketa[playerid][9] == 0) return SendErrorMessage(playerid, "Nemate sodu bikarbonu u korpi za kupovinu.");
	UkupnaCena[playerid] -= 800;
	format(varstring, sizeof(varstring), "%s levom rukom izbacuje sodu bikarbonu iz korpe za kupovinu.", ImeIgraca(playerid));
	PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
	UzeoIzMarketa[playerid][9] -= 1;
	return 1;}
else if(strcmp(item, "desvoda",true) == 0)
{
	if(UzeoIzMarketa[playerid][10] == 0) return SendErrorMessage(playerid, "Nemate sodu destilovanu vodu u korpi za kupovinu.");
	UkupnaCena[playerid] -= 400;
	format(varstring, sizeof(varstring), "%s levom rukom izbacuje destilovanu vodu iz korpe za kupovinu.", ImeIgraca(playerid));
	PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
	UzeoIzMarketa[playerid][10] -= 1;
	return 1;}
else {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/izbaci [opcija]");
	SCM(playerid, BELA, "[Opcije] pizza, uze, maska, sok, pivo, hamburger, piletina, cigare, upaljac");
	SCM(playerid, BELA, "[Opcije] sodab, desvoda ");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	}
return true;}

CMD:ubaci(playerid, params[]) {

new businessId = GetPlayerBusinessId(playerid, VRSTA_MARKET);

if(businessId == -1) {
	SendErrorMessage(playerid, "Morate biti u marketu da bi koristili ovu komandu.");} else if(businessId == -2) {
	SendErrorMessage(playerid, "Nemamo vise proizvoda!");} else {

	new item[32], varstring[80];
	if(sscanf(params, "s[32] ", item)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/ubaci [opcija]");
		SCM(playerid, BELA, "[Opcije] pizza, uze, maska, sok, pivo, hamburger, piletina, cigare, upaljac");
		SCM(playerid, BELA, "[Opcije] sodab, desvoda, sat");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if(strcmp(item, "pizza",true) == 0) {
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, -14.8936,-85.8825,1003.5469)) return SendErrorMessage(playerid, "Da biste koristili ovu komandu morate biti do standa sa picama.");
		UkupnaCena[playerid] += 1000;
		format(varstring, sizeof(varstring), "%s levom rukom ubacuje picu u korpu za kupovinu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		UzeoIzMarketa[playerid][0] += 1;
		return 1;
	}
	else if(strcmp(item, "uze",true) == 0) {
		if(UzeoIzMarketa[playerid][1] == 1) return SendErrorMessage(playerid, "Vec si ubacio uze.");
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, -19.8782,-81.7753,1003.5469)) return SendErrorMessage(playerid, "Da biste koristili ovu komandu morate biti do standa sa uzetom.");
		UkupnaCena[playerid] += 2000;
		format(varstring, sizeof(varstring), "%s levom rukom ubacuje uze u korpu za kupovinu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		UzeoIzMarketa[playerid][1] = 1;
		return 1;
	}
	else if(strcmp(item, "maska",true) == 0)
	{
		if(UzeoIzMarketa[playerid][2] == 1) return SendErrorMessage(playerid, "Vec si ubacio masku.");
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, -19.8783,-77.0707,1003.5542)) return SendErrorMessage(playerid, "Da biste koristili ovu komandu morate biti do standa sa maskama.");
		UkupnaCena[playerid] += 80000;
		format(varstring, sizeof(varstring), "%s levom rukom ubacuje masku u korpu za kupovinu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		UzeoIzMarketa[playerid][2] = 1;
		return 1;
	}
	else if(strcmp(item, "sok",true) == 0) {
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, -25.0427,-74.3232,1003.5469)) return SendErrorMessage(playerid, "Da biste koristili ovu komandu morate biti do standa sa sokovima.");
		UkupnaCena[playerid] += 400;
		format(varstring, sizeof(varstring), "%s levom rukom ubacuje sok u korpu za kupovinu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		UzeoIzMarketa[playerid][3] += 1;
		return 1;
	}
	else if(strcmp(item, "pivo",true) == 0) {
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, -17.9551,-74.3143,1003.5542)) return SendErrorMessage(playerid, "Da biste koristili ovu komandu morate biti do standa sa pivom.");
		UkupnaCena[playerid] += 550;
		format(varstring, sizeof(varstring), "%s levom rukom ubacuje pivo u korpu za kupovinu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		UzeoIzMarketa[playerid][4] += 1;
		return 1;
	}
	else if(strcmp(item, "hamburger",true) == 0) {
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, -31.8768,-77.5130,1003.5469)) return SendErrorMessage(playerid, "Da biste koristili ovu komandu morate biti do standa sa hamburgerima.");
		UkupnaCena[playerid] += 650;
		format(varstring, sizeof(varstring), "%s levom rukom ubacuje hamburger u korpu za kupovinu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		UzeoIzMarketa[playerid][5] += 1;
		return 1;
	}
	else if(strcmp(item, "piletina",true) == 0) {
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, -17.2291,-81.3823,1003.5469)) return SendErrorMessage(playerid, "Da biste koristili ovu komandu morate biti do standa sa kokoskama.");
		UkupnaCena[playerid] += 2500;
		format(varstring, sizeof(varstring), "%s levom rukom ubacuje piletinu u korpu za kupovinu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		UzeoIzMarketa[playerid][6] += 1;
		return 1;
	}
	else if(strcmp(item, "cigare",true) == 0) {
		if(UzeoIzMarketa[playerid][7] == 1) return SendErrorMessage(playerid, "Vec si ubacio cigare.");
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, -37.3030,-76.5274,1003.5469)) return SendErrorMessage(playerid, "Da biste koristili ovu komandu morate biti do standa sa cigaretama.");
		UkupnaCena[playerid] += 6000;
		format(varstring, sizeof(varstring), "%s levom rukom ubacuje cigare u korpu za kupovinu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		UzeoIzMarketa[playerid][7] = 1;
		return 1;
	}
	else if(strcmp(item, "upaljac",true) == 0) {
		if(UzeoIzMarketa[playerid][8] == 1) return SendErrorMessage(playerid, "Vec si ubacio upaljac.");
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, -34.9580,-74.3164,1003.5469)) return SendErrorMessage(playerid, "Da biste koristili ovu komandu morate biti do standa sa upaljacima.");
		UkupnaCena[playerid] += 4000;
		format(varstring, sizeof(varstring), "%s levom rukom ubacuje upaljac u korpu za kupovinu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		UzeoIzMarketa[playerid][8] = 1;
		return 1;
	}
	else if(strcmp(item, "sodab",true) == 0) {
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, -37.3028,-84.8486,1003.5469)) return SendErrorMessage(playerid, "Da biste koristili ovu komandu morate biti do standa sa sodom bikarbonom.");
		UkupnaCena[playerid] += 800;
		format(varstring, sizeof(varstring), "%s levom rukom ubacuje sodu bikarbonu u korpu za kupovinu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		UzeoIzMarketa[playerid][9] += 1;
		return 1;
	}
	else if(strcmp(item, "desvoda",true) == 0) {
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, -37.2162,-80.3907,1003.5469)) return SendErrorMessage(playerid, "Da biste koristili ovu komandu morate biti do standa sa destilovanom vodom.");
		UkupnaCena[playerid] += 400;
		format(varstring, sizeof(varstring), "%s levom rukom ubacuje destilovanu vodu u korpu za kupovinu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		UzeoIzMarketa[playerid][10] += 1;
		return 1;
	}
	else {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/ubaci [opcija]");
		SCM(playerid, BELA, "[Opcije] pizza, uze, maska, sok, pivo, hamburger, piletina, cigare, upaljac");
		SCM(playerid, BELA, "[Opcije] sodab, desvoda, sat");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	}
}
return true;}

CMD:apoteka(playerid, params[]) {
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1681.9349,-1177.7379,23.9859)) return SendErrorMessage(playerid, "Da biste koristili ovu komandu morate biti u apoteci. (/gps)");
SPD(playerid, dialog_PHARMACY, DSL, D_NASLOV, "Solna Kiselina 500$\nPseudo 850$\nCrveni Fosfor 650$\nLysergic acid 350$\nKalcijum 250$\nAmonijum Hlorid 450$", D_ODABERI, D_ODUSTANI);
return true;}

CMD:roda(playerid, params[]) {

if(IsPlayerInRangeOfPoint(playerid, 3.0, -1376.177368, 2047.896728, 29.861936)) {

	new item[32], kolicina;

	static id = -1;

	if(sscanf(params, "s[32] ", item)) {

		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/roda [IZBOR]");
		SCM(playerid, BELA, "[IZBOR] pizza(1000$), uze(2000$), maska(80000$), sok(400$), pivo(550$)");
		SCM(playerid, BELA, "[IZBOR] hamburger(650$), piletina(1200$), cigare(6000$), upaljac(4000$)");
		SCM(playerid, BELA, "[IZBOR] sodab(800$), desvoda(400$), ranac(5000$), sprej(950$)");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	new varstring[128];
	if(strcmp(item, "pizza", true) == 0) {

		if(sscanf(params, "s[32]d", item, kolicina)) {
			SendUsageMessage(playerid, "/roda pizza [kolicina]");
			return 1;
		}
		if(kolicina < 1 || kolicina > 20) return SendErrorMessage(playerid, "Ne mozes uzeti odjednom vise od 20 stavki.");
		if(PlayerInfo[playerid][xNovac] < kolicina*100) return SendErrorMessage(playerid, "Nemate %d$ kod sebe.", kolicina*1000);
		id = Inventory_Add(playerid, "Pizza", 2702, kolicina);

		if(id != -1) {

			DajIgracuNovac(playerid, -kolicina*1000);
			BusinessRodaMoney(kolicina*800, playerid);

			SendInfoMessage(playerid, "Kupili ste %d pica za %d$.", kolicina, kolicina*1000);

			format(varstring, sizeof(varstring), "%s kupuje stvari u marketu.", ImeIgraca(playerid));
			PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		}
		else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");

		return 1;
	}
	else if(strcmp(item, "sprej",true) == 0) {

		if(PlayerInfo[playerid][xNovac] < 950) return SendErrorMessage(playerid, "Nemate 950$ kod sebe.");

		DajIgracuNovac(playerid, -950);
		GiveWeaponToPlayer(playerid, 41, 450);
		BusinessRodaMoney(600, playerid);

		SendInfoMessage(playerid, "Kupili ste sprej za 950$.");

		format(varstring, sizeof(varstring), "%s kupuje stvari u marketu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		return 1;
	}
	else if(strcmp(item, "uze",true) == 0) {

		if(PlayerInfo[playerid][xNovac] < 2000) return SendErrorMessage(playerid, "Nemate 2000$ kod sebe.");

		DajIgracuNovac(playerid, -2000);
		Uze[playerid] = true;
		BusinessRodaMoney(1600, playerid);

		SendInfoMessage(playerid, "Kupili ste uze za 2000$.");

		format(varstring, sizeof(varstring), "%s kupuje stvari u marketu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		return 1;
	}
	else if(strcmp(item, "ranac",true) == 0) {

		if(PlayerInfo[playerid][xNovac] < 5000) return SendErrorMessage(playerid, "Nemate 5000$ kod sebe.");
		if(PlayerInfo[playerid][xRanac] != 0) return SendErrorMessage(playerid, "Vec imate ranac na sebi.");

		DajIgracuNovac(playerid, -5000);
		PlayerInfo[playerid][xRanac] = 1;
		if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_WINTERCAP)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_WINTERCAP);
		SetPlayerAttachedObject(playerid, OBJECT_SLOT_WINTERCAP, 3026, 1, -0.125, -0.046, -0.004, -1.299, -0.5, -6.297, 1.0, 1.0, 1.0);
		BusinessRodaMoney(2500, playerid);

		SendInfoMessage(playerid, "Kupili ste ranac za 5000$ (/skiniranac /staviranac).");

		format(varstring, sizeof(varstring), "%s kupuje stvari u marketu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		return 1;
	}

		else if(strcmp(item, "maska", true) == 0) {

		if(Inventory_HasItem(playerid, "Maska")) {

			SendErrorMessage(playerid, "Vec imate masku.");
		}
		else if(!Inventory_HasItem(playerid, "Maska")) {

			if(PlayerInfo[playerid][xNovac] < 80000) return SendErrorMessage(playerid, "Nemate 80000$ kod sebe.");

			id = Inventory_Add(playerid, "Maska", 19036);

			if(id != -1) {

				DajIgracuNovac(playerid, -80000);
				new rand = 100000 + random(899999);
				PlayerInfo[playerid][xMaskID] = rand;
				BusinessRodaMoney(18400, playerid);

				SendInfoMessage(playerid, "Kupili ste masku za 80000$.");

				format(varstring, sizeof(varstring), "%s kupuje stvari u marketu.", ImeIgraca(playerid));
				PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
			}
			else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");
		}
		return 1;
	}
	else if(strcmp(item, "sok",true) == 0) {

		if(sscanf(params, "s[32]d", item, kolicina)) {
			SendUsageMessage(playerid, "/roda sok [kolicina]");
			return 1;
		}
		if(kolicina < 1 || kolicina > 20) return SendErrorMessage(playerid, "Ne mozes uzeti odjednom vise od 20 stavki.");
		if(PlayerInfo[playerid][xNovac] < kolicina*400) return SendErrorMessage(playerid, "Nemate %d$ kod sebe.", kolicina*400);
		id = Inventory_Add(playerid, "Sok", 2647, kolicina);

		if(id != -1) {

			DajIgracuNovac(playerid, -kolicina*400);

			SendInfoMessage(playerid, "Kupili ste %d flasa soka za %d$.", kolicina, kolicina*400);

			format(varstring, sizeof(varstring), "%s kupuje stvari u marketu.", ImeIgraca(playerid));
			PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);

			BusinessRodaMoney(kolicina*300, playerid);
		}
		else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");
		return 1;
	}
	else if(strcmp(item, "pivo",true) == 0) {

		if(sscanf(params, "s[32]d", item, kolicina)) {
			SendUsageMessage(playerid, "/roda pivo [kolicina]");
			return 1;
		}
		if(kolicina < 1 || kolicina > 20) return SendErrorMessage(playerid, "Ne mozes uzeti odjednom vise od 20 stavki.");
		if(PlayerInfo[playerid][xNovac] < kolicina*550) return SendErrorMessage(playerid, "Nemate %d$ kod sebe.", kolicina*550);
		id = Inventory_Add(playerid, "Pivo", 1543, kolicina);

		if(id != -1) {

			SendInfoMessage(playerid, "Kupili ste %d flasa piva za %d$.", kolicina, kolicina*550);

			DajIgracuNovac(playerid, -kolicina*550);
			BusinessRodaMoney(kolicina*400, playerid);

			format(varstring, sizeof(varstring), "%s kupuje stvari u marketu.", ImeIgraca(playerid));
			PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		}
		else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");

		return 1;
	}
	else if(strcmp(item, "hamburger",true) == 0) {

		if(sscanf(params, "s[32]d", item, kolicina)) {
			SendUsageMessage(playerid, "/roda hamburger [kolicina]");
			return 1;
		}
		if(kolicina < 1 || kolicina > 20) return SendErrorMessage(playerid, "Ne mozes uzeti odjednom vise od 20 stavki.");
		if(PlayerInfo[playerid][xNovac] < kolicina*650) return SendErrorMessage(playerid, "Nemate %d$ kod sebe.", kolicina*650);
		id = Inventory_Add(playerid, "Hamburger", 2703, kolicina);

		if(id != -1) {

			SendInfoMessage(playerid, "Kupili ste %d hamburgera za %d$.", kolicina, kolicina*650);

			DajIgracuNovac(playerid, -kolicina*650);
			BusinessRodaMoney(kolicina*400, playerid);

			format(varstring, sizeof(varstring), "%s kupuje stvari u marketu.", ImeIgraca(playerid));
			PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		}
		else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");
		return 1;
	}
	else if(strcmp(item, "piletina",true) == 0) {

		if(sscanf(params, "s[32]d", item, kolicina)) {
			SendUsageMessage(playerid, "/roda piletina [kolicina]");
			return 1;
		}
		if(kolicina < 1 || kolicina > 20) return SendErrorMessage(playerid, "Ne mozes uzeti odjednom vise od 20 stavki.");
		if(PlayerInfo[playerid][xNovac] < kolicina*1200) return SendErrorMessage(playerid, "Nemate %d$ kod sebe.", kolicina*1200);
		id = Inventory_Add(playerid, "Piletina", 2663, kolicina);

		if(id != -1) {

			SendInfoMessage(playerid, "Kupili ste %d pileta za %d$.", kolicina, kolicina*1200);

			DajIgracuNovac(playerid, -kolicina*1200);
			BusinessRodaMoney(kolicina*1000, playerid);

			format(varstring, sizeof(varstring), "%s kupuje stvari u marketu.", ImeIgraca(playerid));
			PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		}
		else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");

		return 1;
	}
	else if(strcmp(item, "cigare",true) == 0) {

		if(PlayerInfo[playerid][xNovac] < 6000) return SendErrorMessage(playerid, "Nemate 6000$ kod sebe.");

		DajIgracuNovac(playerid, -6000);
		PlayerInfo[playerid][xCigare] += 20;
		BusinessRodaMoney(6000, playerid);

		SendInfoMessage(playerid, "Kupili ste kutiju cigareta za 6000$.");

		format(varstring, sizeof(varstring), "%s kupuje stvari u marketu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		return 1;
	}
	else if(strcmp(item, "upaljac",true) == 0) {

		if(PlayerInfo[playerid][xNovac] < 4000) return SendErrorMessage(playerid, "Nemate 4000$ kod sebe.");

		DajIgracuNovac(playerid, -4000);
		PlayerInfo[playerid][xUpaljac] = 1;
		BusinessRodaMoney(4000, playerid);

		SendInfoMessage(playerid, "Kupili ste upaljac za 4000$.");

		format(varstring, sizeof(varstring), "%s kupuje stvari u marketu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		return 1;
	}
	else if(strcmp(item, "sodab",true) == 0) {

		if(sscanf(params, "s[32]d", item, kolicina)) {
			SendUsageMessage(playerid, "/roda sodab [kolicina]");
			return 1;
		}
		if(kolicina < 1 || kolicina > 20) return SendErrorMessage(playerid, "Ne mozes uzeti odjednom vise od 20 stavki.");
		if(PlayerInfo[playerid][xNovac] < kolicina*800) return SendErrorMessage(playerid, "Nemate %d$ kod sebe.", kolicina*800);
		SendInfoMessage(playerid, "Kupili ste %d kesica sode bikarbone za %d$.", kolicina, kolicina*800);

		DajIgracuNovac(playerid, -kolicina*800);
		PlayerInfo[playerid][xSodaB] += kolicina;
		BusinessRodaMoney(kolicina*600, playerid);

		format(varstring, sizeof(varstring), "%s kupuje stvari u marketu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		return 1;
	}
	else if(strcmp(item, "desvoda",true) == 0) {

		if(sscanf(params, "s[32]d", item, kolicina)) {
			SendUsageMessage(playerid, "/roda desvoda [kolicina]");
			return 1;
		}
		if(kolicina < 1 || kolicina > 20) return SendErrorMessage(playerid, "Ne mozes uzeti odjednom vise od 20 stavki.");
		if(PlayerInfo[playerid][xNovac] < kolicina*400) return SendErrorMessage(playerid, "Nemate %d$ kod sebe.", kolicina*400);
		SendInfoMessage(playerid, "Kupili ste %d flasa destilovane vode za %d$.", kolicina, kolicina*400);

		DajIgracuNovac(playerid, -kolicina*400);
			PlayerInfo[playerid][xDesVoda] += kolicina;
		BusinessRodaMoney(kolicina*300, playerid);

		format(varstring, sizeof(varstring), "%s kupuje stvari u marketu.", ImeIgraca(playerid));
		PorukaRadius(20.0 , playerid, varstring, LJUBICASTA);
		return 1;
	}
	else {

		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/roda [IZBOR]");
		SCM(playerid, BELA, "[IZBOR] pizza(1000$), uze(2000$), maska(80000$), sok(400$), pivo(550$)");
		SCM(playerid, BELA, "[IZBOR] hamburger(650$), piletina(1200$), cigare(6000$), upaljac(4000$)");
		SCM(playerid, BELA, "[IZBOR] sodab(800$), desvoda(400$) ranac(5000$)");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	}
}
else return SendErrorMessage(playerid, "Morate biti u RODA marketu.");

return true;}


CMD:buy(playerid, params[]) {
new businessId = GetPlayerBusinessId(playerid, VRSTA_MARKET);

if(businessId == -1) {
	SendErrorMessage(playerid, "Morate biti kod kase u marketu da bi koristili ovu komandu.");} else if(businessId == -2) {
	SendErrorMessage(playerid, "Nemamo vise proizvoda!");} else {

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -28.0849,-89.9528,1003.5469)) return SendErrorMessage(playerid, "Da biste koristili ovu komandu morate biti do kase za naplacivanje.");
	if(UkupnaCena[playerid] == 0) return SendErrorMessage(playerid, "Nemas stvari u korpi koje bi kupio.");
	new varstring[128];
	format(varstring, sizeof(varstring), "Ukupna cena: %d$. Da li ste sigurni da zelite da kupite sve stvari iz korpe?", UkupnaCena[playerid]);
	SPD(playerid, dialog_MARKETBUY, DSMSG, D_NASLOV, varstring, "Kupi", "Odustani");}
return true;}

CMD:trafika(playerid, params[]) {

if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Moras biti van vozila.");

if(PoredTrafike(playerid)) {
	EnableAntiCheatForPlayer(playerid, 39, 0);
	SPD(playerid, dialog_KIOSK, DSL, D_NASLOV,"1.Dopuna (2000$)\n2.Dopuna (5000$)\n3.Dopuna (10000$)\n4.Dopuna (50000$)\n5.Sprite (3000$)\n6.Cokoladica (70$)\n7.Pivo (1700$)\n8.Coca Cola (1200$)\n9.Cigare (10000$)\n10.Upaljac (7000$)\n11.Sprej (1500$)", D_ODABERI, D_ODUSTANI);}
else return SendErrorMessage(playerid, "Morate biti kod trafike.");

return true;}

CMD:kupimobilni(playerid, params[]) {
for(new i = 1; i < MAX_Business; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 35.0, BusinessInfo[i][bExitX], BusinessInfo[i][bExitY], BusinessInfo[i][bExitZ]) && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bInVW]) {
		
		if(BusinessInfo[i][bType] == VRSTA_ELEKTRONIK) {
			SPD(playerid, dialog_BUY_MOBILEPHONE, DSL, D_NASLOV, "1.Samsung Galaxy S8 - 6.985$\n2.Samsung Galaxy A8 - 5.351$\n3.Sony Xperia XZ Premium - 6.101$\n4.Apple iPhone X - 4.568$\n5.LG G6 - 3.657$\n6.Huawei Honor 9 - 2.657$\n7.Nokia 8 - 1.245$\n8.Huawei P10 - 1.278$\n9.LG Q6 - 5.975$\n10.Blackberry Z30 LTE - 3.422$", D_ODABERI, D_ODUSTANI);
		}
		else return SendErrorMessage(playerid, "Morate biti u elektronik shopu da bi koristili ovu komandu.");
	}
}
return true;}

CMD:kupikarticu(playerid, params[]) {

for(new i = 1; i < MAX_Business; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 35.0, BusinessInfo[i][bExitX], BusinessInfo[i][bExitY], BusinessInfo[i][bExitZ]) && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bInVW]) {
		if(BusinessInfo[i][bType] == VRSTA_ELEKTRONIK) {
			if(PlayerInfo[playerid][xModelTelefona] == 0) return SendErrorMessage(playerid, "Nemate mobilni telefon.");
			SPD(playerid, dialog_KUPIKARTICU, DSL, D_NASLOV, "MTS\nA1\nYettel", D_ODABERI, D_ODUSTANI);
		}
		else return SendErrorMessage(playerid, "Morate biti u elektronik shopu da bi koristili ovu komandu.");
	}
}
return true;}

CMD:kupikacigu(playerid, params[]) {
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1978.6816,-2062.4297,14.0780)) return SendErrorMessage(playerid, "Morate biti u prodavnici za kacige kod spawna.");
if(PlayerInfo[playerid][xNovac] < 10000) return SendErrorMessage(playerid, "Nemate dovoljno novca(10000$)");
if(PlayerInfo[playerid][xHelmet] != 0) return SendErrorMessage(playerid, "Vec imate kupljenu kacigu.");
new helmet[6];
helmet[0] = 18936;
helmet[1] = 18937;
helmet[2] = 18938;
helmet[3] = 18977;
helmet[4] = 18978;
helmet[5] = 18979;
ShowModelSelectionMenuEx(playerid, helmet, 6, "Helmets", 7, 90.0, 90.0, 90.0);
return true;}

CMD:igrice(playerid) {

if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete dok radite posao / imate uniformu.");
if(RibarOprema[playerid] == true) return SendErrorMessage(playerid, "Ne mozete ovo u opremi ribara.");
if(PlayerInfo[playerid][xLevel] < 5) return SendErrorMessage(playerid, "Ne mozete ako nisi level 5+.");
if(!IsPlayerInRangeOfPoint(playerid, 50, 1466.3201, 1416.2100, -5.0676)) return SendErrorMessage(playerid, "Morate biti u igraonici.");
//	if(tdm_player_info[playerid][tdm_Team] != 0) return SendErrorMessage(playerid, "Vec si u jednoj igri, prvo izadji iz nje.");
SPD(playerid, dialog_CHOSEGAME, DSL, "Izaberite igricu", "Counter Strike 1.6\nNeed For Speed 1 vs 1\nDuel 1 vs 1", "U redu", "Izadji");
return 1;}

CMD:gps(playerid, params[]) {
if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete dok radite posao / imate uniformu.");
if(RibarOprema[playerid] == true) return SendErrorMessage(playerid, "Ne mozete ovo u opremi ribara.");
if(PlayerCP[playerid] > 0) return SendErrorMessage(playerid, "Ne mozes da ugasis vozilo dok si na eventu.");
SPD(playerid, dialog_GPS_FIND, DSL, "Izaberite tip:", "Vazne Lokacije\nImovina\nFirma\nPosao", D_ODABERI, D_ODUSTANI);
return true;}

CMD:gpsoff(playerid, params[]) {
//if(GetPVarInt(playerid, "gPlayerCheckpointStatus") == 0) return SendErrorMessage(playerid, "Nemas ni jedan upaljen checkpoint.");
if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete dok radite posao / imate uniformu.");
if(RibarOprema[playerid] == true) return SendErrorMessage(playerid, "Ne mozete ovo u opremi ribara.");
if(PlayerCP[playerid] > 0) return SendErrorMessage(playerid, "Ne mozes da ugasis vozilo dok si na eventu.");
CheckpointStatus[playerid] = 0;
Fusion_DisablePlayerCheckpoint(playerid);
SendInfoMessage(playerid, "Ugasili ste checkpoint.");
PlayerTextDrawHide(playerid, PlayerGpsRadarText[playerid]);
if(IsValidDynamicMapIcon(PlayerGpsRadar[playerid][_pgrIconId])) {
	DestroyDynamicMapIcon(PlayerGpsRadar[playerid][_pgrIconId]);}
PlayerGpsRadar[playerid][_pgrIconId] = -1;
if(IsValidDynamicObject(PlayerGpsRadar[playerid][_pgrObject])) {
	DestroyDynamicObject(PlayerGpsRadar[playerid][_pgrObject]);}
PlayerGpsRadar[playerid][_pgrObject] = -1;
return true;}

CMD:kupielectronic(playerid, params[]) {
new businessId = GetPlayerBusinessId(playerid, VRSTA_ELEKTRONIK), broj;

if(businessId == -1) {
	SendErrorMessage(playerid, "Morate biti u elektronik shopu da bi koristili ovu komandu.");} else if(businessId == -2) {
	SendErrorMessage(playerid, "Nemamo vise proizvoda!");} else {
	if(sscanf(params, "d", broj)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/kupielectronic [Broj-opcije]");
		SCM(playerid, BELA, "[Opcije] 1. GPS za lokaciju auta | 2. GPS za gradske lokacije | 3. Radio");
		SCM(playerid, BELA, "[Opcije] 4. Laptop");
		SCM(playerid, BELA, "[Cene] 1. 700$ | 2. 500-1000$ | 3. 550$ 4. 20000$");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if(broj == 1) {
		if(PlayerInfo[playerid][xNovac] < 700) return SendErrorMessage(playerid, "Nemate dovoljno novca(700$)");
		if(KupljenGPS[playerid] == 1) return SendErrorMessage(playerid, "Vec ste kupili GPS uredjaj.");
		DajIgracuNovac(playerid, -700);
		BusinessMoney(uFirmi[playerid], 70, playerid);
		KupljenGPS[playerid] = 1;
		SendInfoMessage(playerid, "Kupili ste GPS uredjaj po ceni od 700 dolara, ugradite ga u auto.");
		return 1;
	}
	else if(broj == 2) {
		//SPD(playerid, dialog_BUY_GPS, DSL, "Tip GPS-a?", "Osnovni\nSrednji\nNapredni", D_ODABERI, D_ODUSTANI);
		SendInfoMessage(playerid, "Vi vec imate Napredni GPS kog ste dobili pri registraciji.");
		return 1;
	}
	else if(broj == 3) {
		if(PlayerInfo[playerid][xNovac] < 550) return SendErrorMessage(playerid, "Nemate dovoljno novca(550$)");
		if(PlayerInfo[playerid][xBoombox] == true) return SendErrorMessage(playerid, "Vec imate kupljen Boombox.");
		DajIgracuNovac(playerid, -550);
		BusinessMoney(uFirmi[playerid], 55, playerid);
		PlayerInfo[playerid][xBoombox] = true;
		SendInfoMessage(playerid, "Kupili ste Boombox(radio) koristite '/radio' .");
		return 1;
	}
	else if(broj == 4) {
		if(PlayerInfo[playerid][xNovac] < 20000) return SendErrorMessage(playerid, "Nemas dovoljno novca.");
		new id;
		if(Inventory_HasItem(playerid, "Laptop")) {
			SendErrorMessage(playerid, "Vec imate laptop u inventoriju.");
		}
		else if(!Inventory_HasItem(playerid, "Laptop")) {

				id = Inventory_Add(playerid, "Laptop", 19893);

				if(id != -1) {
					SendInfoMessage(playerid, "Kupio si laptop za 20.000$.");
					DajIgracuNovac(playerid, -20000);
					BusinessMoney(uFirmi[playerid], 10000, playerid);
				}
				else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");

		}
		return 1;
	}
	else return SendErrorMessage(playerid, "Pogresan broj.");}
return true;}

// CLOTHING SYSTEM
CMD:kupiodecu(playerid, params[]) {

if(PlayerInfo[playerid][xNovac] < 30000) return SendErrorMessage(playerid, "Nemate dovoljno novca(30000$).");
if(PlayerInfo[playerid][xClan] != 0) return SendErrorMessage(playerid, "Ne mozete kupiti skin jer ste u organizaciji.");
if(RibarOprema[playerid] == true) return SendErrorMessage(playerid, "Ne mozete ovo u opremi ribara.");
if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Imate uniformu posla!");
for(new i = 1; i < MAX_Business; i++) {
		if(IsPlayerInRangeOfPoint(playerid, 60.0, BusinessInfo[i][bExitX], BusinessInfo[i][bExitY], BusinessInfo[i][bExitZ]) && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bInVW]) {
			if(BusinessInfo[i][bType] == VRSTA_BINCO || BusinessInfo[i][bType] == VRSTA_NIKE || BusinessInfo[i][bType] == VRSTA_SUBURBAN || BusinessInfo[i][bType] == VRSTA_VICTIM || BusinessInfo[i][bType] == VRSTA_ZIP)
			{

				ShowModelSelectionMenu(playerid, skinlist, "Odaberite odelo:");
			}
			else return SendErrorMessage(playerid, "Morate biti u butiku da bi koristili ovu komandu.");
		}
}
return true;}
CMD:buyglasses(playerid, params[]) {
for(new i = 1; i < MAX_Business; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 35.0, BusinessInfo[i][bExitX], BusinessInfo[i][bExitY], BusinessInfo[i][bExitZ]) && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bInVW]) {
		if(BusinessInfo[i][bType] == VRSTA_BINCO || BusinessInfo[i][bType] == VRSTA_NIKE || BusinessInfo[i][bType] == VRSTA_SUBURBAN || BusinessInfo[i][bType] == VRSTA_VICTIM || BusinessInfo[i][bType] == VRSTA_ZIP)
		{
			if(PlayerInfo[playerid][xNovac] < 400) return SendErrorMessage(playerid, "Nemate dovoljno novca (400$).");
			if(PlayerInfo[playerid][xSungMask] != 0) return SendErrorMessage(playerid, "Vec imate kupljene naocare ili masku.");
			new bandanas[13];
			bandanas[0] = 19138;
			bandanas[1] = 19022;
			bandanas[2] = 19028;
			bandanas[3] = 19033;
			bandanas[4] = 19012;
			bandanas[5] = 19006;
			bandanas[6] = 19009;
			bandanas[7] = 19008;
			bandanas[8] = 19034;
			bandanas[9] = 19035;
			bandanas[10] = 19029;
			bandanas[11] = 19139;
			bandanas[12] = 19140;
			ShowModelSelectionMenuEx(playerid, bandanas, 13, "Glasses", 1, 0.0, 0.0, 90.0);
			SendInfoMessage(playerid, "Kontrola dodataka - /izmeni & /baci & /dodacioff(privremeno)");
		}
		else return SendErrorMessage(playerid, "Morate biti u butiku da bi koristili ovu komandu.");
	}
}
return true;}

CMD:buyfbandanas(playerid, params[]) {
for(new i = 1; i < MAX_Business; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 35.0, BusinessInfo[i][bExitX], BusinessInfo[i][bExitY], BusinessInfo[i][bExitZ]) && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bInVW]) {
		if(BusinessInfo[i][bType] == VRSTA_BINCO || BusinessInfo[i][bType] == VRSTA_NIKE || BusinessInfo[i][bType] == VRSTA_SUBURBAN || BusinessInfo[i][bType] == VRSTA_VICTIM || BusinessInfo[i][bType] == VRSTA_ZIP)
		{
			if(PlayerInfo[playerid][xNovac] < 500) return SendErrorMessage(playerid, "Nemate dovoljno novca(500$).");
			if(PlayerInfo[playerid][xFace] != 0) return SendErrorMessage(playerid, "Vec imate kupljenu maramu.");
			new bandanas[9];
			bandanas[0] = 18912;
			bandanas[1] = 18913;
			bandanas[2] = 18914;
			bandanas[3] = 18915;
			bandanas[4] = 18916;
			bandanas[5] = 18917;
			bandanas[6] = 18918;
			bandanas[7] = 18919;
			bandanas[8] = 18920;
			ShowModelSelectionMenuEx(playerid, bandanas, 9, "Bandanas", 2, 90.0, 90.0, 0.0);
			SendInfoMessage(playerid, "Kontrola dodataka - /izmeni & /baci & /dodacioff(privremeno)");
		}
		else return SendErrorMessage(playerid, "Morate biti u butiku da bi koristili ovu komandu.");
	}
}
return true;}

CMD:buyhbandanas(playerid, params[]) {
	for(new i = 1; i < MAX_Business; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 35.0, BusinessInfo[i][bExitX], BusinessInfo[i][bExitY], BusinessInfo[i][bExitZ]) && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bInVW]) {
		if(BusinessInfo[i][bType] == VRSTA_BINCO || BusinessInfo[i][bType] == VRSTA_NIKE || BusinessInfo[i][bType] == VRSTA_SUBURBAN || BusinessInfo[i][bType] == VRSTA_VICTIM || BusinessInfo[i][bType] == VRSTA_ZIP)
		{
			if(PlayerInfo[playerid][xNovac] < 500) return SendErrorMessage(playerid, "Nemate dovoljno novca(500$).");
			if(PlayerInfo[playerid][xHead] != 0) return SendErrorMessage(playerid, "Vec imate kupljenu kapu/bandanu/sesir.");
			new bandanas[19];
			bandanas[0] = 18891;
			bandanas[1] = 18892;
			bandanas[2] = 18893;
			bandanas[3] = 18894;
			bandanas[4] = 18895;
			bandanas[5] = 18896;
			bandanas[6] = 18897;
			bandanas[7] = 18898;
			bandanas[8] = 18899;
			bandanas[9] = 18900;
			bandanas[10] = 18901;
			bandanas[11] = 18902;
			bandanas[12] = 18903;
			bandanas[13] = 18904;
			bandanas[14] = 18905;
			bandanas[15] = 18906;
			bandanas[16] = 18907;
			bandanas[17] = 18908;
			bandanas[18] = 18910;
			ShowModelSelectionMenuEx(playerid, bandanas, 19, "Bandanas", 3, 90.0, 90.0, 0.0);
			SendInfoMessage(playerid, "Kontrola dodataka - /izmeni & /baci & /dodacioff(privremeno)");
		}
		else return SendErrorMessage(playerid, "Morate biti u butiku da bi koristili ovu komandu.");
	}
}
return true;}
CMD:buycaps(playerid, params[]) {
	for(new i = 1; i < MAX_Business; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 35.0, BusinessInfo[i][bExitX], BusinessInfo[i][bExitY], BusinessInfo[i][bExitZ]) && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bInVW]) {
		if(BusinessInfo[i][bType] == VRSTA_BINCO || BusinessInfo[i][bType] == VRSTA_NIKE || BusinessInfo[i][bType] == VRSTA_SUBURBAN || BusinessInfo[i][bType] == VRSTA_VICTIM || BusinessInfo[i][bType] == VRSTA_ZIP)
		{
			if(PlayerInfo[playerid][xNovac] < 700) return SendErrorMessage(playerid, "Nemate dovoljno novca(700$).");
			if(PlayerInfo[playerid][xHead] != 0) return SendErrorMessage(playerid, "Vec imate kupljenu kapu/bandanu/sesir.");
			new bandanas[5];
			bandanas[0] = 18939;
			bandanas[1] = 18940;
			bandanas[2] = 18941;
			bandanas[3] = 18942;
			bandanas[4] = 18943;
			ShowModelSelectionMenuEx(playerid, bandanas, 5, "Caps", 4, 0.0, -90.0, 0.0);
			SendInfoMessage(playerid, "Kontrola dodataka - /izmeni & /baci & /dodacioff(privremeno)");
		}
		else return SendErrorMessage(playerid, "Morate biti u butiku da bi koristili ovu komandu.");
	}
}
return true;}
///////////////////////////
CMD:trazi(playerid, params[]) {
if(GetNearestContainer(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu kontejnera.");
if(TrashSearch[playerid] == 1) return SendErrorMessage(playerid, "Vec trazite po kontejneru!");
if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes da trazis dok si u vozilu.");
if(TrashLimit[playerid] != 0) return SendErrorMessage(playerid, "Morate sacekati 30 minuta pre nego sto trazite ponovo!");
new varstring[74];
if(Maskuse[playerid] == true)
	format(varstring, sizeof(varstring), "Maska_%d otvara kontejner, naginje se i pocinje traziti.", PlayerInfo[playerid][xMaskID]);
else
	format(varstring, sizeof(varstring), "%s otvara kontejner, naginje se i pocinje traziti.", ImeIgraca(playerid));
PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
TogglePlayerControllable(playerid, false);
	Odbrojavanje[playerid] = 25;
VremeTDControl(playerid, true);
	TrashLimit[playerid] = 1800;
	TrashSearch[playerid] = 1;
TrashTimer[playerid] = SetTimerEx("TrashLimitOff", 25000, false, "i", playerid);
ApplyAnimation(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
return true;}

CMD:jedi(playerid, params[]) {
if(GetNearestBrzaHrana(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu brze hrane.");
if(JediSearch[playerid] == 1) return SendErrorMessage(playerid, "Vec jedete hamburger!");
if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes da trazis dok si u vozilu.");
if(JediLimit[playerid] != 0) return SendErrorMessage(playerid, "Morate sacekati 5 minuta pre nego sto jedete ponovo!");
if(PlayerInfo[playerid][xNovac] < 800) return SendErrorMessage(playerid, "Nemate dovoljno novca(600$).");
new varstring[60];
if(Maskuse[playerid] == true)
	format(varstring, sizeof(varstring), "Maska_%d kupuje hamburger i jede ga.", PlayerInfo[playerid][xMaskID]);
else
	format(varstring, sizeof(varstring), "%s kupuje hamburger i jede ga.", ImeIgraca(playerid));
PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
TogglePlayerControllable(playerid, false);
	Odbrojavanje[playerid] = 5;
VremeTDControl(playerid, true);
	JediLimit[playerid] = 300;
	JediSearch[playerid] = 1;
JediTimer[playerid] = SetTimerEx("JediTimerOff", 5000, false, "i", playerid);
ApplyAnimation(playerid, "FOOD", "EAT_Burger",4.1,0,1,1,0,0);
DajIgracuNovac(playerid, -800);
return true;}

CMD:nargila(playerid, params[]) {
if(GetNearestNargila(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu nargile.");
if(PusiNargilu[playerid] == 1) return SendErrorMessage(playerid, "Vec pusite nargilu!");
if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete dok ste u vozilu.");
if(RibarOprema[playerid] == true) return SendErrorMessage(playerid, "Ne mozete ovo u opremi ribara.");
if(NargilaLimit[playerid] != 0) return SendErrorMessage(playerid, "Morate sacekati 10 sekundi pre nego sto palite opet!");
//if(PlayerInfo[playerid][xNovac] < 800) return SendErrorMessage(playerid, "Nemate dovoljno novca(800$).");
new varstring[60];
if(Maskuse[playerid] == true)
	format(varstring, sizeof(varstring), "Maska_%d pali nargilu i vuce dim.", PlayerInfo[playerid][xMaskID]);
else
	format(varstring, sizeof(varstring), "%s pali nargilu i vuce dim.", ImeIgraca(playerid));
PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
TogglePlayerControllable(playerid, false);
	Odbrojavanje[playerid] = 5;
VremeTDControl(playerid, true);
	PusiNargilu[playerid] = 1;
NargilaTimer[playerid] = SetTimerEx("NargilaTimerOff", 5000, false, "i", playerid);
ApplyAnimation(playerid, "FOOD", "EAT_Burger",4.1,0,1,1,0,0);
//DajIgracuNovac(playerid, -800);
return true;}

CMD:robatm(playerid, params[]) {

if(GetFactionType(playerid) == ORG_TIP_PD) {
	SendErrorMessage(playerid, "PD/FBI/CIA nema razloga koristiti ovo!");
	return 1;}
EnableAntiCheatForPlayer(playerid, 49, 0);
if(PlayerInfo[playerid][xLider] > 0 || PlayerInfo[playerid][xClan] > 0) {
	if(!ShowedAtmTD[playerid]) {
		if(PlayerInfo[playerid][xLevel] < 5) return SendErrorMessage(playerid, "Tek sa levelom 5+ mozes da opljackas bankomat.");
		if(GetNearestAtm(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu bankomata.");
		new atmid = GetNearestAtm(playerid);
		if(PlayerInfo[playerid][xPljackaVreme] != 0) return SendErrorMessage(playerid, "Vec si pljackao, do sledece pljacke sacekaj %d minuta.", PlayerInfo[playerid][xPljackaVreme]);
		if(atmInfo[atmid][atmVremeDoRoba] != 0) return SendErrorMessage(playerid, "Ovaj bankomat je vec opljackan.");
		atmTDControl(playerid, true);
		SelectTextDraw(playerid, FUSIONGAMING);
		SendInfoMessage(playerid, "Da ugasis menu za pljackanje bankomata ukucaj ponovo '/robatm'.");
	}
	else if(ShowedAtmTD[playerid]) {
		atmTDControl(playerid, false);
		SendInfoMessage(playerid, "Ugasili ste meni za pljackanje bankomata.");
	}
}
else return SendErrorMessage(playerid, "Morate biti clan mafije/bande."); 
return true;}

CMD:atm(playerid, params[]) {
if(!PlayerInfo[playerid][xImaBRacun]) return SendErrorMessage(playerid, "Prvo moras da otvoris racun u banci i uzmes karticu za bankomat.");
if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes koristiti ovu komandu dok si u vozilu.");
if(GetNearestAtm(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu bankomata.");
new item[32];
if(sscanf(params, "s[32] ", item)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/atm [opcija]");
	SCM(playerid, BELA, "[Opcije] status, withdraw");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
new varstring[70];
if(strcmp(item, "status",true) == 0) {
	format(varstring, sizeof(varstring), "Imate $%d na vasem bankovnom racunu.", PlayerInfo[playerid][xBRacun]);
	SendClientMessage(playerid, ZUTA, varstring);
	return 1;}
else if(strcmp(item, "withdraw",true) == 0) {
	new cashdeposit;
	if(sscanf(params, "s[32]i", item, cashdeposit)) {
		SendUsageMessage(playerid, "/atm withdraw [iznos]");
		return 1;
	}
	if(cashdeposit > PlayerInfo[playerid][xBRacun] || cashdeposit < 1) return SendErrorMessage(playerid, "Nemate toliko novca !");
	DajIgracuNovac(playerid, cashdeposit);
	PlayerInfo[playerid][xBRacun] -= cashdeposit ;
	format(varstring, sizeof(varstring), "Podigli ste $%d sa vaseg racuna. Na racunu ima: $%d ", cashdeposit, PlayerInfo[playerid][xBRacun]);
	SCM(playerid, ZUTA, varstring); update_fg_info_tds(playerid);
	//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");
	return 1;}
else {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/atm [opcija]");
	SCM(playerid, BELA, "[Opcije] status, withdraw");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");}
return 1;}
CMD:baci(playerid, params[]) {
new item[32];
if(sscanf(params, "s[32] ", item)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/baci [opcija]");
	SCM(playerid, BELA, "[Opcije] ranac, face, head, naocare, kaciga, sat");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(strcmp(item, "ranac",true) == 0) {
	if(PlayerInfo[playerid][xRanac] == 0) return SendErrorMessage(playerid, "Nemate ranac.");
	if(GetNearestContainer(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu kontejnera.");

	PlayerInfo[playerid][xRanac] = 0;
	SavePlayer(playerid);

	for(new i = 0; i < MAX_INVENTORY; i ++) {
		if(inventoryInfo[playerid][i][invExists]) {
			inventoryInfo[playerid][i][invExists] = false;
			inventoryInfo[playerid][i][invModel] = 0;
			inventoryInfo[playerid][i][invQuantity] = 0;
		}
	}

	new filename[64];
	format(filename, sizeof(filename), INV_FILE, ImeIgraca(playerid));
	if(fexist(filename)) { fremove(filename); }

		SendInfoMessage(playerid, "Bacio si ranac, bez mogucnosti povratka istog.");

	if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_WINTERCAP)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_WINTERCAP);
	return 1;}
if(strcmp(item, "face",true) == 0) {
	if(GetNearestContainer(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu kontejnera.");
	if(PlayerInfo[playerid][xFace] == 0) return SendErrorMessage(playerid, "Ne posedujes maramu(bandanu).");
	if(FaceOn[playerid]) return SendErrorMessage(playerid, "Prvo moras da skines maramu sa glave(/face).");
	PlayerInfo[playerid][xFace] = 0;
	PlayerInfo[playerid][xFacePos][0] = 0;
	PlayerInfo[playerid][xFacePos][1] = 0;
	PlayerInfo[playerid][xFacePos][2] = 0;
	PlayerInfo[playerid][xFacePos][3] = 0;
	PlayerInfo[playerid][xFacePos][4] = 0;
	PlayerInfo[playerid][xFacePos][5] = 0;
	PlayerInfo[playerid][xFacePos][6] = 0;
	PlayerInfo[playerid][xFacePos][7] = 0;
	PlayerInfo[playerid][xFacePos][8] = 0;
	SCM(playerid, FUSIONGAMING, "Bacio si maramu(bandanu) u kontejner(nemas je vise u statsima). ");
	return 1;}
else if(strcmp(item, "head",true) == 0) {
	if(GetNearestContainer(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu kontejnera.");
	if(PlayerInfo[playerid][xHead] == 0) return SendErrorMessage(playerid, "Ne posedujes kapu/sesir/maramu(bandanu).");
	if(HeadOn[playerid]) return SendErrorMessage(playerid, "Prvo moras da skines kapu/sesir/maramu sa glave(/head).");
	PlayerInfo[playerid][xHead] = 0;
	PlayerInfo[playerid][xHeadPos][0] = 0;
	PlayerInfo[playerid][xHeadPos][1] = 0;
	PlayerInfo[playerid][xHeadPos][2] = 0;
	PlayerInfo[playerid][xHeadPos][3] = 0;
	PlayerInfo[playerid][xHeadPos][4] = 0;
	PlayerInfo[playerid][xHeadPos][5] = 0;
	PlayerInfo[playerid][xHeadPos][6] = 0;
	PlayerInfo[playerid][xHeadPos][7] = 0;
	PlayerInfo[playerid][xHeadPos][8] = 0;
	SCM(playerid, FUSIONGAMING, "Bacio si kapu/sesir/maramu(bandanu) u kontejner(nemas je vise u statsima). ");
	return 1;}
else if(strcmp(item, "naocare",true) == 0) {
	if(GetNearestContainer(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu kontejnera.");
	if(PlayerInfo[playerid][xSungMask] == 0) return SendErrorMessage(playerid, "Ne posedujes naocare.");
	if(SungOn[playerid]) return SendErrorMessage(playerid, "Prvo moras da skines naocare sa glave(/naocare).");
	PlayerInfo[playerid][xSungMask] = 0;
	PlayerInfo[playerid][xSungMaskPos][0] = 0;
	PlayerInfo[playerid][xSungMaskPos][1] = 0;
	PlayerInfo[playerid][xSungMaskPos][2] = 0;
	PlayerInfo[playerid][xSungMaskPos][3] = 0;
	PlayerInfo[playerid][xSungMaskPos][4] = 0;
	PlayerInfo[playerid][xSungMaskPos][5] = 0;
	PlayerInfo[playerid][xSungMaskPos][6] = 0;
	PlayerInfo[playerid][xSungMaskPos][7] = 0;
	PlayerInfo[playerid][xSungMaskPos][8] = 0;
	SCM(playerid, FUSIONGAMING, "Bacio si naocare u kontejner(nemas je vise u statsima). ");
	return 1;}
else if(strcmp(item, "kaciga",true) == 0) {
	if(GetNearestContainer(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu kontejnera.");
	if(PlayerInfo[playerid][xHelmet] == 0) return SendErrorMessage(playerid, "Ne posedujes kacigu.");
	if(HelmetOn[playerid]) return SendErrorMessage(playerid, "Prvo moras da skines kacigu sa glave(/kaciga).");
	PlayerInfo[playerid][xHelmet] = 0;
	PlayerInfo[playerid][xHelmetPos][0] = 0;
	PlayerInfo[playerid][xHelmetPos][1] = 0;
	PlayerInfo[playerid][xHelmetPos][2] = 0;
	PlayerInfo[playerid][xHelmetPos][3] = 0;
	PlayerInfo[playerid][xHelmetPos][4] = 0;
	PlayerInfo[playerid][xHelmetPos][5] = 0;
	PlayerInfo[playerid][xHelmetPos][6] = 0;
	PlayerInfo[playerid][xHelmetPos][7] = 0;
	PlayerInfo[playerid][xHelmetPos][8] = 0;
	SCM(playerid, FUSIONGAMING, "Bacio si kacigu u kontejner(nemas je vise u statsima). ");
	return 1;}
else if(strcmp(item, "sat",true) == 0) {
	if(GetNearestContainer(playerid) == -1) return SendErrorMessage(playerid, "Moras biti blizu kontejnera.");
	if(PlayerInfo[playerid][xSat] == 0) return SendErrorMessage(playerid, "Ne posedujes sat.");
	PlayerInfo[playerid][xSat] = 0;
	SCM(playerid, FUSIONGAMING, "Bacio si sat u kontejner(nemas ga vise u statsima).");
	return 1;}
else {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/baci [opcija]");
	SCM(playerid, BELA, "[Opcije] face, head, naocare, kaciga, sat");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");}
return 1;}
CMD:izmeni(playerid, params[]) {
new item[32];
if(sscanf(params, "s[32] ", item)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/izmeni [opcija]");
	SCM(playerid, BELA, "[Opcije] face, head, naocare, kaciga");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(strcmp(item, "face",true) == 0) {
	if(PlayerInfo[playerid][xFace] == 0) return SendErrorMessage(playerid, "Ne posedujes maramu(bandanu).");
	if(!FaceOn[playerid]) return SendErrorMessage(playerid, "Prvo moras da stavis maramu na glavu(/face).");
	EditAttachedObject(playerid, OBJECT_SLOT_BANDANA); EditingBody[playerid] = 2;
	return 1;}
else if(strcmp(item, "head",true) == 0) {
	if(PlayerInfo[playerid][xHead] == 0) return SendErrorMessage(playerid, "Ne posedujes kapu/sesir/maramu(bandanu).");
	if(!HeadOn[playerid]) return SendErrorMessage(playerid, "Prvo moras da stavis kapu/sesir/maramu na glavu(/head).");
	EditAttachedObject(playerid, OBJECT_SLOT_HEAD); EditingBody[playerid] = 3;
	return 1;}
else if(strcmp(item, "naocare",true) == 0) {
	if(PlayerInfo[playerid][xSungMask] == 0) return SendErrorMessage(playerid, "Ne posedujes naocare.");
	if(!SungOn[playerid]) return SendErrorMessage(playerid, "Prvo moras da stavis naocare na glavu(/naocare).");
	EditAttachedObject(playerid, OBJECT_SLOT_MASKSUNGL); EditingBody[playerid] = 1;
	return 1;}
else if(strcmp(item, "kaciga",true) == 0) {
	if(PlayerInfo[playerid][xHelmet] == 0) return SendErrorMessage(playerid, "Ne posedujes kacigu.");
	if(!HelmetOn[playerid]) return SendErrorMessage(playerid, "Prvo moras da stavis kacigu na glavu(/kaciga).");
	EditAttachedObject(playerid, OBJECT_SLOT_HELMET); EditingBody[playerid] = 6;
	return 1;}
else {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/izmeni [opcija]");
	SCM(playerid, BELA, "[Opcije] face, head, naocare, kaciga");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");}
return 1;}
CMD:face(playerid, params[]) {
if(PlayerInfo[playerid][xFace] == 0) return SendErrorMessage(playerid, "Ne posedujes maramu(bandanu).");
if(!FaceOn[playerid]) {

	SetPlayerAttachedObject(playerid, OBJECT_SLOT_BANDANA, PlayerInfo[playerid][xFace],2,PlayerInfo[playerid][xFacePos][0],PlayerInfo[playerid][xFacePos][1],PlayerInfo[playerid][xFacePos][2],PlayerInfo[playerid][xFacePos][3],PlayerInfo[playerid][xFacePos][4],PlayerInfo[playerid][xFacePos][5],PlayerInfo[playerid][xFacePos][6],PlayerInfo[playerid][xFacePos][7],PlayerInfo[playerid][xFacePos][8], 0, 0);
	FaceOn[playerid] = true;

	if(PlayerInfo[playerid][xFacePos][6] > 2.0 || PlayerInfo[playerid][xFacePos][7] > 2.0 || PlayerInfo[playerid][xFacePos][8] > 2.0) {
		SendErrorMessage(playerid, "Losa pozicija marame odradi je ponovo.");
		EditAttachedObject(playerid, OBJECT_SLOT_BANDANA); EditingBody[playerid] = 2;
		return true;
	}

	SendInfoMessage(playerid, "Stavio si maramu na glavu.");}
else if(FaceOn[playerid]) {
	RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BANDANA);
	FaceOn[playerid] = false;
	SendInfoMessage(playerid, "Skinuo si maramu sa glave.");}
return true;}
CMD:kaciga(playerid, params[]) {
if(PlayerInfo[playerid][xHelmet] == 0) return SendErrorMessage(playerid, "Nemate kacigu.");
if(!HelmetOn[playerid]) {

	if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_HELMET)) return SendErrorMessage(playerid, "Vec imate objekt na glavi.");
	SetPlayerAttachedObject(playerid, OBJECT_SLOT_HELMET, PlayerInfo[playerid][xHelmet],2,PlayerInfo[playerid][xHelmetPos][0],PlayerInfo[playerid][xHelmetPos][1],PlayerInfo[playerid][xHelmetPos][2],PlayerInfo[playerid][xHelmetPos][3],PlayerInfo[playerid][xHelmetPos][4],PlayerInfo[playerid][xHelmetPos][5],PlayerInfo[playerid][xHelmetPos][6],PlayerInfo[playerid][xHelmetPos][7],PlayerInfo[playerid][xHelmetPos][8], 0, 0);
	HelmetOn[playerid] = true;

	if(PlayerInfo[playerid][xHelmetPos][6] > 2.0 || PlayerInfo[playerid][xHelmetPos][7] > 2.0 || PlayerInfo[playerid][xHelmetPos][8] > 2.0) {
		SendErrorMessage(playerid, "Losa pozicija kacige odradi je ponovo.");
		EditAttachedObject(playerid, OBJECT_SLOT_HELMET); EditingBody[playerid] = 6;
		return true;
	}

	SendInfoMessage(playerid, "Stavio si kacigu na glavu.");}
else if(HelmetOn[playerid]) {
	RemovePlayerAttachedObject(playerid, OBJECT_SLOT_HELMET);
	HelmetOn[playerid] = false;
	SendInfoMessage(playerid, "Skinuo si kacigu sa glave.");}
return true;}
CMD:head(playerid, params[]) {
if(PlayerInfo[playerid][xHead] == 0) return SendErrorMessage(playerid, "Ne posedujes kapu/sesir/maramu(bandanu).");
if(!HeadOn[playerid]) {

	if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_HEAD)) return SendErrorMessage(playerid, "Vec imate objekt na glavi.");
	SetPlayerAttachedObject(playerid, OBJECT_SLOT_HEAD, PlayerInfo[playerid][xHead],2,PlayerInfo[playerid][xHeadPos][0],PlayerInfo[playerid][xHeadPos][1],PlayerInfo[playerid][xHeadPos][2],PlayerInfo[playerid][xHeadPos][3],PlayerInfo[playerid][xHeadPos][4],PlayerInfo[playerid][xHeadPos][5],PlayerInfo[playerid][xHeadPos][6],PlayerInfo[playerid][xHeadPos][7],PlayerInfo[playerid][xHeadPos][8], 0, 0);
	HeadOn[playerid] = true;

	if(PlayerInfo[playerid][xHeadPos][6] > 2.0 || PlayerInfo[playerid][xHeadPos][7] > 2.0 || PlayerInfo[playerid][xHeadPos][8] > 2.0) {
		SendErrorMessage(playerid, "Losa pozicija kape/sesira/marame odradi je ponovo.");
		EditAttachedObject(playerid, OBJECT_SLOT_HEAD); EditingBody[playerid] = 3;
		return true;
	}

	SendInfoMessage(playerid, "Stavio si kapu/sesir/maramu na glavu.");}
else if(HeadOn[playerid]) {
	RemovePlayerAttachedObject(playerid, OBJECT_SLOT_HEAD);
	HeadOn[playerid] = false;
	SendInfoMessage(playerid, "Skinuo si kapu/sesir/maramu sa glave.");}
return true;}
CMD:naocare(playerid, params[]) {
if(PlayerInfo[playerid][xSungMask] == 0) return SendErrorMessage(playerid, "Ne posedujes naocare.");
if(!SungOn[playerid]) {

	SetPlayerAttachedObject(playerid, OBJECT_SLOT_MASKSUNGL, PlayerInfo[playerid][xSungMask],2,PlayerInfo[playerid][xSungMaskPos][0],PlayerInfo[playerid][xSungMaskPos][1],PlayerInfo[playerid][xSungMaskPos][2],PlayerInfo[playerid][xSungMaskPos][3],PlayerInfo[playerid][xSungMaskPos][4],PlayerInfo[playerid][xSungMaskPos][5],PlayerInfo[playerid][xSungMaskPos][6],PlayerInfo[playerid][xSungMaskPos][7],PlayerInfo[playerid][xSungMaskPos][8], 0, 0);
	SungOn[playerid] = true;

	if(PlayerInfo[playerid][xSungMaskPos][6] > 2.0 || PlayerInfo[playerid][xSungMaskPos][7] > 2.0 || PlayerInfo[playerid][xSungMaskPos][8] > 2.0) {
		SendErrorMessage(playerid, "Losa pozicija naocara odradi je ponovo.");
		EditAttachedObject(playerid, OBJECT_SLOT_MASKSUNGL); EditingBody[playerid] = 1;
		return true;
	}

	SendInfoMessage(playerid, "Stavio si naocare na glavu.");}
else if(SungOn[playerid]) {
	RemovePlayerAttachedObject(playerid, OBJECT_SLOT_MASKSUNGL);
	SungOn[playerid] = false;
	SendInfoMessage(playerid, "Skinuo si naocare sa glave.");}
return true;}

CMD:tie(playerid, params[]) {
if(GetFactionType(playerid) == ORG_TIP_TAXI) return SendErrorMessage(playerid, "Ovu komandu ne moze koristiti samo Taksista.");
if(Uze[playerid] != true) {
	SendErrorMessage(playerid, "Nemas uze!");
	return 1;}
if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 438 ||
	GetVehicleModel(GetPlayerVehicleID(playerid)) == 420 ||
	GetVehicleModel(GetPlayerVehicleID(playerid)) == 431 ||
	GetVehicleModel(GetPlayerVehicleID(playerid)) == 437 ||
	GetVehicleModel(GetPlayerVehicleID(playerid)) == 416)
{
	SendErrorMessage(playerid, "Ne mozete svezati nekoga dok ste u taxi-u / autobusu / kolima hitne pomoci.");
	return 1;}
new giveplayerid;
if(sscanf(params, "u", giveplayerid)) {
	SendUsageMessage(playerid, "/tie [ID/Deo imena]");
	return 1;}
new varstring[70];
if(IsPlayerConnected(giveplayerid)) {
	if(giveplayerid != INVALID_PLAYER_ID) {
		if(IgracZavezan[giveplayerid] == true) {
			SendErrorMessage(playerid, "Igrac je vec zavezan !");
			return 1;
		}
		if(KnockedDown[giveplayerid] != true) return SendErrorMessage(playerid, "Moras prvo da oboris igraca.(/knockout).");
		if(PlayerInfo[giveplayerid][xLevel] <= 2) return SendErrorMessage(playerid, "Ne mozete ovo raditi novajlijama.");
		if(IsPlayerNearPlayer(8.0, playerid, giveplayerid)) {
			new car = GetPlayerVehicleID(playerid);
			if(giveplayerid == playerid) return SendErrorMessage(playerid, "Ne mozes zavezati sam sebe!");
			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car)) {
				format(varstring, sizeof(varstring), "* Zavezan si od strane %s ", ImeIgraca(playerid));
				SCM(giveplayerid, SVETLOPLAVA, varstring);
				format(varstring, sizeof(varstring), "* Zavezaoao si %s ", ImeIgraca(giveplayerid));
				SCM(playerid, SVETLOPLAVA, varstring);

				if(Maskuse[playerid] == false)
					format(varstring, sizeof(varstring), "* %s je svezao %s, da mu nebi pobjegao.", ImeIgraca(playerid) ,ImeIgraca(giveplayerid));
				else
					format(varstring, sizeof(varstring), "* Maska_%d je svezao %s, da mu nebi pobjegao.", PlayerInfo[playerid][xMaskID] ,ImeIgraca(giveplayerid));

				PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
				GameTextForPlayer(giveplayerid, "~r~Zavezan", 2500, 3);
				Uze[playerid] = false;
				TogglePlayerControllable(giveplayerid, 0);
				IgracZavezan[giveplayerid] = true;
			} else return SendErrorMessage(playerid, "Igrac nije autu ili vi niste vozac !");
		} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
	}
} else return SendErrorMessage(playerid, "Taj igrac nije online !");
return 1;}

CMD:untie(playerid, params[]) {
new giveplayerid;
if(sscanf(params, "u", giveplayerid)) {
	SendUsageMessage(playerid, "/untie [ID/Deo imena]");
	return 1;}
new varstring[60];
if(IsPlayerConnected(giveplayerid)) {
	if(giveplayerid != INVALID_PLAYER_ID) {
		if(IsPlayerNearPlayer(5.0, playerid, giveplayerid)) {
			if(giveplayerid == playerid) return SendErrorMessage(playerid, "Ne mozes odvezati samog sebe");
			if(IgracZavezan[giveplayerid] == true) {
				format(varstring, sizeof(varstring), "* Odvezan si od strane %s.", ImeIgraca(playerid));
				SCM(giveplayerid, SVETLOPLAVA, varstring);
				format(varstring, sizeof(varstring), "* Odvezao si %s.", ImeIgraca(giveplayerid));
				SCM(playerid, SVETLOPLAVA, varstring);
				GameTextForPlayer(giveplayerid, "~g~Odvezan", 2500, 3);
				TogglePlayerControllable(giveplayerid, 1);
				IgracZavezan[giveplayerid] = false;
			} else return SendErrorMessage(playerid, "Taj igrac nije vezan !");
		} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
	}
} else return SendErrorMessage(playerid, "Taj igrac nije online !");
return 1;}

CMD:eject(playerid, params[]) {
if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu da bi ste koristili ovu komandu !");
if(GetPlayerState(playerid)!= PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Niste vozac !");
new ID, string[75];
if(sscanf(params, "u", ID)) {
	SendUsageMessage(playerid, "/eject [ID/Deo Imena]");
	return 1;}
if(IsPlayerConnected(ID)) {
	if(ID != INVALID_PLAYER_ID) {
		if(ID == playerid) return SendErrorMessage(playerid, "ne mozete izbaciti sami sebe!");
		if(IsPlayerInVehicle(ID, GetPlayerVehicleID(playerid))) {
			format(string, sizeof(string), "* Izbacili ste %s izvan auta!", ImeIgraca(ID));
			SCM(playerid, SVETLOPLAVA, string);
			format(string, sizeof(string), "* Izbacio vas je iz auta %s !", ImeIgraca(playerid));
			SCM(ID, SVETLOPLAVA, string);
			new Float:vehPos[3];
			getPosBehindVehicle(GetPlayerVehicleID(playerid), vehPos[0], vehPos[1], vehPos[2], 0.0);
			ac_SetPlayerPos(ID, vehPos[0], vehPos[1], vehPos[2]);
		}
		else return SendErrorMessage(playerid, "Taj igrac nije u vasem autu !");
	}
}
else return SendErrorMessage(playerid, "Igrac nije na serveru.");
return 1;}

CMD:rukovanje(playerid, params[]) {
new igrac, vrsta;
if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes se rukovati ako si u vozilu!");
if(sscanf(params, "ui", igrac, vrsta)) return SendUsageMessage(playerid, "/rukovanje [ID/Deo Imena] [vrsta rukovanja(1-9)]");
new varstring[60];
if(IsPlayerConnected(igrac)) {
		if(igrac != INVALID_PLAYER_ID) {
		if(IsPlayerNearPlayer(3.0, playerid, igrac)) {
			if(IsPlayerInAnyVehicle(igrac)) return SendErrorMessage(playerid, "Ne mozes se rukovati sa osobom koja je u vozilu!");
			if(igrac == playerid) return SendErrorMessage(playerid, "Ne mozes se rukovati sam sa sobom!");
			format(varstring, sizeof(varstring), "* Ponudio si rukovanje %s.", ImeIgraca(igrac));
			SCM(playerid, 0x33CCFFAA, varstring);
			format(varstring, sizeof(varstring), "* %s ti je ponudio rukovanje.", ImeIgraca(playerid));
			SCM(igrac, 0x33CCFFAA, varstring);
			SCM(igrac, 0xFF6347AA, "* Ako se zelis rukovati, prihvati rukovanje koristeci /prihvati rukovanje.");
			SetPVarInt(playerid, "ShakeOffer", igrac);
			SetPVarInt(igrac, "ShakeOffer", playerid);
			SetPVarInt(igrac, "ShakeStyle", vrsta);
		} else return SendErrorMessage(playerid, "Taj igrac nije blizu tebe !");
	}
} else return SendErrorMessage(playerid, "Taj igrac nije na serveru!");
return 1;}

CMD:knockout(playerid, params[]) {
new giveplayerid;
if(sscanf(params, "u", giveplayerid)) {
	SendUsageMessage(playerid, "/knockout [ID/Deo imena]");
	return 1;}
if(PlayerInfo[playerid][xLevel] < 5) return SendErrorMessage(playerid, "Moras biti najmanje Level 5 da koristis ovu komandu.");
	if(KnockedDown[playerid] == true) return SendErrorMessage(playerid, "Ne mozes koristiti ovu komandu dok si nokautiran.");
	if(!IsMeleeWeapon(GetWeapon(playerid))) return SendErrorMessage(playerid, "Nemas nijedno melee oruzje u ruci da bi koristio ovu komandu!");
	if(giveplayerid == IPI) return SendErrorMessage(playerid, "Igrac nije online!");
	if(PlayerInfo[giveplayerid][xLevel] <= 3) return SendErrorMessage(playerid, "Ne mozes ovo raditi novajlijama.");
new varstring[70];
if(IsPlayerConnected(giveplayerid)) {
		if(giveplayerid != INVALID_PLAYER_ID) {
		if(IsPlayerNearPlayer(1.0, playerid, giveplayerid)) {
				if(KnockedDown[giveplayerid] != true) {
					if(giveplayerid == playerid) return SendErrorMessage(playerid, "Ne mozes sam sebe nokautirati.");
				if(IsPlayerInAnyVehicle(giveplayerid) || IsPlayerInAnyVehicle(playerid)) return 1;
				new rands = random(2)+1;
				format(varstring, sizeof(varstring), "* %s udara %s i pokusava ga oboriti na pod.", ImeIgraca(playerid), ImeIgraca(giveplayerid));
				PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
				ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0, 1);
				if(rands == 1) {
					TogglePlayerControllable(giveplayerid, 0);
					ApplyAnimation(giveplayerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
					SetTimerEx("ClearKnock", 20000, false, "i", giveplayerid);
					KnockedDown[giveplayerid] = true;
					format(varstring, sizeof(varstring), "* %s ga je uspeo oboriti na pod.", ImeIgraca(playerid));
					PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
				}
				else {
					format(varstring, sizeof(varstring), "* %s nije uspeo oboriti coveka na pod.", ImeIgraca(playerid));
					PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
				}
				return 1;
			} else return SendErrorMessage(playerid, "Igrac je vec nokautiran.");
		} else return SendErrorMessage(playerid, "Taj igrac nije blizu tebe !");
	}
}
return 1;}

CMD:rob(playerid, params[]) {
if(PlayerInfo[playerid][xLevel] < 5) return SendErrorMessage(playerid, "Morate biti level 5+.");
new ID, varstring[80];
if(sscanf(params, "u", ID)) {
	SendUsageMessage(playerid, "/rob [ID/Deo imena]");
	return 1;}
if(IsPlayerConnected(ID)) {
	if(ID != INVALID_PLAYER_ID) {

		if(IgracZavezan[ID] != true) return SendErrorMessage(playerid, "Igrac mora biti zavezan da biste mu mogli pregledati novcanik!");
		if(IgracOpljackan[ID] == true) return SendErrorMessage(playerid, "Igrac je vec opljackan.");

		if(IsPlayerNearPlayer(4.0, playerid, ID)) {

			new novac = (PlayerInfo[ID][xNovac]/10);
			if(novac > 20000) novac = 20000;

			DajIgracuNovac(playerid, novac);
			DajIgracuNovac(ID, -novac);

			IgracOpljackan[ID] = true;
			SetTimerEx("ClearPlayerRob", 240000, false, "i", ID);

			SendInfoMessage(playerid, "Opljackao si igraca %s i uzeo %d$.", ImeIgraca(ID), novac);
			SendInfoMessage(ID, "%s vas je opljackao i uzeo vam %d$.", ImeIgraca(playerid), novac);
			format(varstring, sizeof(varstring), "* %s je izvadio novcanik %s i uzeo novac.", ImeIgraca(playerid), ImeIgraca(ID));
			PorukaRadius(30.0, playerid, varstring, LJUBICASTA);

			new string[128];
			format(string, sizeof(string), "Igrac %s -> Igrac: %s | Novac: %d", ImeIgraca(playerid), ImeIgraca(ID), novac);
			LogSave("Ostalo/LogRobIgraca.log", string);
		} else return SendErrorMessage(playerid, "Igrac nije dovoljno blizu tebe!");
	}
} else return SendErrorMessage(playerid, "Taj igrac nije na serveru!");
return 1;}

CMD:pojas(playerid, params[]) {
if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u autu!");
if(IsVehicleBrod(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Ne mozete koristiti ovo, na brodu !");
if(IsVehicleBajs(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Ne mozete koristiti ovo, na bicikli !");
if(IsVehicleMotor(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Ne mozete koristiti ovo, na motoru !");
new varstring[80];
if(Pojas[playerid] != true) {
	format(varstring, sizeof(varstring), "* %s se hvata za pojas, te se vezuje njime.", ImeIgraca(playerid));
	PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
	Pojas[playerid] = true;}
else {
	format(varstring, sizeof(varstring), "* %s se hvata za pojas, te ga skida.", ImeIgraca(playerid));
	PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
	Pojas[playerid] = false;}
return 1;}

CMD:upali(playerid, params[]) {
if(IsPlayerConnected(playerid)) {
	new vehicle = GetPlayerVehicleID(playerid),
		engine,lights,alarm,doors,bonnet,boot,objective, varstring[80];

	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu da biste koristili ovu komandu!");
	if(vCanDrive[vehicle] == 0) return SendErrorMessage(playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");
	if(IsVehicleBajs(vehicle)) return SendErrorMessage(playerid, "Stvarno mislis upaliti biciklu? ");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti vozac da bi ste mogli koristit ovu komandu.");
	if(Fuel[vehicle] == 0) return SendErrorMessage(playerid, "Vozilo nema goriva ne mozete ga upaliti.");

	if(TipVozila[vehicle] == PRIVATNO_VOZILO) {

		if(PlayerInfo[playerid][xVoziloID][0] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][0]][vID] == vehicle) {}
		else if(PlayerInfo[playerid][xVoziloID][1] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][1]][vID] == vehicle) {}
		else if(PlayerInfo[playerid][xVoziloID][2] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][2]][vID] == vehicle) {}
		else if(PlayerInfo[playerid][xVoziloID][3] != -1 && VehicleInfo[PlayerInfo[playerid][xVoziloID][3]][vID] == vehicle) {}
		else if(PlayerInfo[playerid][xRezervniKljucevi] == ScriptIDVozila[vehicle]) {}
		else return SendErrorMessage(playerid, "Nemate kljuceve ovog vozila.");

		GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
		if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
		SetPVarInt(playerid, "StartingVehicle", 1);
		//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
		return 1;
	}
	else if(TipVozila[vehicle] == ORGANIZACIJSKO_VOZILO) {
		if(OrgaVozila[vehicle] == PlayerInfo[playerid][xClan]) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
			return 1;
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
			return 1;
		}
	}
	else if(TipVozila[vehicle] == POSLOVNO_VOZILO) {

		if(PosaoVozila[vehicle] == PlayerInfo[playerid][xPosao]) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
			return 1;
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
			return 1;
		}
	}
	else if(TipVozila[vehicle] == GRADONACELNIKOVO_VOZILO) {
		if(PlayerInfo[playerid][xGradRank] == GRAD_DRIVER || PlayerInfo[playerid][xGradRank] == GRAD_LDRIVER) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
			return 1;
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuceve od ovog vozila ili uniformu vozaca gradonacelnika!");
			return 1;
		}
	}
	else if(TipVozila[vehicle] == IZLOZBENO_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] == 7) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
			return 1;
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
			return 1;
		}
	}
	else if(TipVozila[vehicle] == ADMIN_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 1) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
			return 1;
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
			return 1;
		}
	}
	else if(TipVozila[vehicle] == HELPER_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 1) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
			return 1;
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
			return 1;
		}
	}
	else if(TipVozila[vehicle] == PROMOTER_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xPromoter] >= 1) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
			return 1;
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
			return 1;
		}
	}
	else if(TipVozila[vehicle] == VIP_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xVIPLevel] >= 1) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
			return 1;
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
			return 1;
		}
	}
	else if(TipVozila[vehicle] == POLAGANJE_VOZILO) {
		if(PlayerInfo[playerid][xAdmin] >= 4 || Polaganje[playerid] >= 1) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
			return 1;
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
			return 1;
		}
	}
	else if(TipVozila[vehicle] == PUMPA_VOZILO) {
		if(PumpaVozilo[vehicle] == PlayerInfo[playerid][xFirmaID] || PlayerInfo[playerid][xAdmin] >= 4) {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
			if(Maskuse[playerid] == true)
				format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
			else
				format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
			SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
			SetPVarInt(playerid, "StartingVehicle", 1);
			//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
			return 1;
		}
		else {
			SendErrorMessage(playerid, "Nemate kljuc ovog vozila.");
			return 1;
		}
	}
	else {
		GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
		if(engine == 1) return SendErrorMessage(playerid, "Motor vozila je vec upaljen.");
		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "* %s pokusava pokrenuti motor.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		SetTimerEx("VehicleEngineStart", 1000, 0, "i", playerid);
		SetPVarInt(playerid, "StartingVehicle", 1);
		//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/q1ipv5ruu4/auto.mp3");
		return 1;
	}
}
return true;}

CMD:ugasi(playerid, params[]) {
new vehicle = GetPlayerVehicleID(playerid),
	engine,lights,alarm,doors,bonnet,boot,objective, varstring[50];

if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu da biste koristili ovu komandu!");
	if(vCanDrive[vehicle] == 0) return SendErrorMessage(playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");
if(IsVehicleBajs(vehicle)) return SendErrorMessage(playerid, "Stvarno mislis upaliti biciklu? ");
if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti vozac da bi ste mogli koristit ovu komandu.");
if(PlayerCP[playerid] > 0) return SendErrorMessage(playerid, "Ne mozes da ugasis vozilo dok si na eventu.");

GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective);
if(engine == 0) return SendErrorMessage(playerid, "Motor vozila je vec ugasen.");
ac_SetVehicleParamsEx(vehicle,0,lights,alarm,doors,bonnet,boot,objective);
if(Maskuse[playerid] == true)
	format(varstring, sizeof(varstring), "* Maska_%d gasi motor.", PlayerInfo[playerid][xMaskID]);
	else
	format(varstring, sizeof(varstring), "* %s gasi motor.", ImeIgraca(playerid));
PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
return 1;}

CMD:drink(playerid, params[]) {

if(IsPlayerInRangeOfPoint(playerid, 10.0, 1325.7372, -875.4626, 39.5781) || IsPlayerInRangeOfPoint(playerid, 10.0, 1757.189575, -1774.16549, 14.514637) || IsPlayerInRangeOfPoint(playerid, 10.0, 1122.439697, -50.820243, 994.33331)) {
	SPD(playerid, dialog_DRINK, DSL, D_NASLOV, "Whisky 200$\nVodka 170$\nPivo 85$\nKonjak 120$\nTequila 150$\nJack Daniels 290$\nMineralna voda 60$\nCedevita 80$\nCoca Cola 50$", D_ODABERI, D_ODUSTANI);}
else {

	for(new i = 1; i < MAX_Business; i++) {
		if(IsPlayerInRangeOfPoint(playerid, 25.0, BusinessInfo[i][bExitX], BusinessInfo[i][bExitY], BusinessInfo[i][bExitZ]) && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bInVW]) {
			if(BusinessInfo[i][bType] == VRSTA_BAR || BusinessInfo[i][bType] == VRSTA_DISCO || BusinessInfo[i][bType] == VRSTA_NKLUB || BusinessInfo[i][bType] == VRSTA_JAVNAK) {

				SPD(playerid, dialog_DRINK, DSL, D_NASLOV, "Whisky 200$\nVodka 170$\nPivo 85$\nKonjak 120$\nTequila 150$\nJack Daniels 290$\nMineralna voda 60$\nCedevita 80$\nCoca Cola 50$", D_ODABERI, D_ODUSTANI);
				break;
			}
		}
	}
}
return 1;}

CMD:menu(playerid, params[]) {
for(new i = 1; i < MAX_Business; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 25.0, BusinessInfo[i][bExitX], BusinessInfo[i][bExitY], BusinessInfo[i][bExitZ]) && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bInVW]) {
		if(BusinessInfo[i][bType] == VRSTA_RESTORAN) {

			uFirmi[playerid] = i;
			SPD(playerid, dialog_RESTORAN, DSL, D_NASLOV, "Juha 150$\nPiletina 220$\nMorski pas 350$\nSpageti 410$\nKolac 630$\nCoca Cola 50$\nVoda 25$", D_ODABERI, D_ODUSTANI);
			break;
		}
		else if(BusinessInfo[i][bType] == VRSTA_CLUCK) {

			uFirmi[playerid] = i;
			SPD(playerid, dialog_CLUCKIN, DSL, D_NASLOV, "Topli sendvic 100$\nCevapi 150$\nFileti 100$\nVocna salata 100$\nKebab 120$\nSprite 50$\nVoda 25$", D_ODABERI, D_ODUSTANI);
			break;
		}
		else if(BusinessInfo[i][bType] == VRSTA_PIZZA) {

			uFirmi[playerid] = i;
			PizzaMenuTDControl(playerid, true);
			SelectTextDraw(playerid, FUSIONGAMING);
			//SPD(playerid, dialog_PIZZA, DSL, D_NASLOV, "Pizzeta 100$\nVelika Pizza 150$\nTopli Sendvic 45$\nSalata 40$\nJumbo Pizza 250$\nSprite 50$\nVoda 25$", "Jedi", "Izlaz");
			break;
		}
		else if(BusinessInfo[i][bType] == VRSTA_BURG) {

			uFirmi[playerid] = i;
			SPD(playerid, dialog_BURG, DSL, D_NASLOV, "Hamburger 100$\nCheeseburger 150$\nMcFlurry 100$\nBig Mac 100$\nMcWRAP 120$\nCoca Cola 50$\nMilkshake 70$", D_ODABERI, D_ODUSTANI);
			break;
		}
	}
}
return 1;}

CMD:kupisat(playerid, params[]) {
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1022.057495, 2304.277587, -19.779993)) return SendErrorMessage(playerid, "Morate biti u zlatari.");
if(PlayerInfo[playerid][xSat] != 0) return SendErrorMessage(playerid, "Vec imas sat, ako zelis drugi prvo ga baci komandom /baci.");
WatchModel[playerid] = 19039;
buyWatchTDControl(playerid, true);
return 1;}

CMD:fillcar(playerid, params[]) {

new vehicleid, found;
for(new i = 0; i < MAX_VEHICLES; i++) {

	new Float:X, Float:Y, Float:Z;
	GetVehiclePos(i, X, Y, Z);
	if(IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z)) {
		vehicleid = i;
		found = 1;
		break;
	}
	else
		continue;}
if(found == 0) return SendErrorMessage(playerid, "Niste blizu vozila.");

new Float:vehPos[3];
getPosBehindVehicle(vehicleid, vehPos[0], vehPos[1], vehPos[2], 0.0);
if(!IsPlayerInRangeOfPoint(playerid, 2, vehPos[0], vehPos[1], vehPos[2])) return SendErrorMessage(playerid, "Morate biti iza vozila.");

if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Morate biti na nogama da biste zatvorili/otvorili prtljaznik.");
if(IsVehicleBajs(vehicleid)) {
	SendErrorMessage(playerid, "Nepoznata akcija.");
	return 1;}
if(!ImaKanticu[playerid]) return SendErrorMessage(playerid, "Nemate kanticu u rukama.");

if((10 + Fuel[vehicleid]) > getAmountFuel(vehicleid)) {

		SendErrorMessage(playerid, "Rezervoar mora biti prazan bar 10L da bi ga napunili.");
	return 1;}

Fuel[vehicleid] += 10;
FuelTime[vehicleid] = 0;
SendInfoMessage(playerid, "Napunili ste vozilo sa 10 litara goriva.");
ImaKanticu[playerid] = false;
if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
return 1;}

CMD:kupikanticu(playerid, params[]) {

new businessId = GetPlayerBusinessId(playerid, VRSTA_PUMPA), id = -1;
if(PlayerInfo[playerid][xNovac] < 6500) return SendErrorMessage(playerid, "Nemate 6500$ kod sebe.");

if(businessId == -1) {
	SendErrorMessage(playerid, "Morate biti u marketu pumpe.");} else if(businessId == -2) {
	SendErrorMessage(playerid, "Nemamo vise proizvoda!");} else {

	id = Inventory_Add(playerid, "Kantica", 1650);

	if(id != -1) {
		DajIgracuNovac(playerid, -6500);
		SCM(playerid, ZUTA, "Kupili ste kanticu za 6500$ i dodana vam je u inventory.");
		BusinessMoney(uFirmi[playerid], 1500, playerid);
	}
	else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");}
return true;}
CMD:treniraj(playerid, params[]) {
if(!IsPlayerInRangeOfPoint(playerid, 25.0, 771.0096,13.4834,1000.6988)) return SendErrorMessage(playerid, "Da biste koristili ovu komandu morate biti u teretani.");
new item[32], varstring[60];
if(sscanf(params, "s[32] ", item)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/treniraj [opcija]");
	SCM(playerid, BELA, "[Opcije] Boxing ($20000), KungFu($24000), Grab'n'Kick ($28000), KneeHead ($30000)");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(strcmp(item, "boxing",true) == 0) {
	if(PlayerInfo[playerid][xNovac] < 20000) return SendErrorMessage(playerid, "Nemate dovoljno novca(20000$).");
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
	SetTimerEx("BoxTrain", 1000, false, "i", playerid);
	format(varstring, sizeof(varstring), "* %s zapocinje Box trening.", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	DajIgracuNovac(playerid, -20000);
	return 1;}
else if(strcmp(item, "kungfu",true) == 0) {
	if(PlayerInfo[playerid][xNovac] < 24000) return SendErrorMessage(playerid, "Nemate dovoljno novca(24000$).");
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
	SetTimerEx("KungTrain", 1000, false, "i", playerid);
	format(varstring, sizeof(varstring), "* %s zapocinje KungFu trening.", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	DajIgracuNovac(playerid, -24000);
	return 1;}
else if(strcmp(item, "grab'n'kick",true) == 0) {
	if(PlayerInfo[playerid][xNovac] < 28000) return SendErrorMessage(playerid, "Nemate dovoljno novca(28000$).");
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
	SetTimerEx("GrabTrain", 1000, false, "i", playerid);
	format(varstring, sizeof(varstring), "* %s zapocinje Grab and Kick trening.", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	DajIgracuNovac(playerid, -28000);
	return 1;}
else if(strcmp(item, "kneehead",true) == 0) {
	if(PlayerInfo[playerid][xNovac] < 30000) return SendErrorMessage(playerid, "Nemate dovoljno novca(30000$).");
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
	SetTimerEx("KneeTrain", 1000, false, "i", playerid);
	format(varstring, sizeof(varstring), "* %s zapocinje Kneehead trening.", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	DajIgracuNovac(playerid, -30000);
	return 1;}
else {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/treniraj [opcija]");
	SCM(playerid, BELA, "[Opcije] Boxing ($20000), KungFu($24000), Grab'n'Kick ($28000), KneeHead ($30000)");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	}
return 1;}
CMD:lesson(playerid, params[]) {
if(PlayerInfo[playerid][xSkolaLimit] == 1) return SendErrorMessage(playerid, "Vec ste imali cas, dodjite sledeci PayDay (/stats).");
if(Uciskolu[playerid] == true) return SendErrorMessage(playerid, "Vec imate cas.");
new varstring[80];
if(IsPlayerInRangeOfPoint(playerid, 3, 1664.8800,-1367.4441,-48.9541)) {
	if(GetPlayerVirtualWorld(playerid) != 2) return SendErrorMessage(playerid, "Moras biti u osnovnoj skoli.");
		if(oSkolaLimit == 4) return SendErrorMessage(playerid, "Ucionica moze imati maksimalno 4 ucenika istovremeno.");
		new Float:RandomPozicija[4][4] = {
		{1667.6226,-1358.8826,-48.9541, 180.0000],
		{1663.8583,-1359.0941,-48.9541, 180.0000],
		{1664.1572,-1362.5344,-48.9541, 180.0000],
		{1667.7842,-1362.2119,-48.9541, 180.0000]
	};
	if(PlayerInfo[playerid][xOsnovna] == 3) return SendErrorMessage(playerid, "Vec si zavrsio osnovnu skolu. ");
	new poz = random(sizeof(RandomPozicija));
	Odbrojavanje[playerid] = 180;
	VremeTDControl(playerid, true);
	ac_SetPlayerPos(playerid, RandomPozicija[poz][0], RandomPozicija[poz][1], RandomPozicija[poz][2]);
	SetPlayerFacingAngle(playerid, RandomPozicija[poz][3]);
		GameTextForPlayer(playerid, "~w~Casovi osnovne skole", 5000, 1);
		TogglePlayerControllable(playerid, false);
		ApplyAnimation(playerid,"PED","SEAT_IDLE",4,0,0,0, 1,0,1);
	Uciskolu[playerid] = true;
	oSkolaLimit++;
	SkolaTimer[playerid] = SetTimerEx("OsnovnaCasovi", 180000, 0, "ii", playerid, (PlayerInfo[playerid][xOsnovna]+1));
	format(varstring, sizeof(varstring), "* %s seda na stolicu i slusa lekciju od nastavnika.", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);}
else if(IsPlayerInRangeOfPoint(playerid, 3, 1667.8092,-1379.7235,-48.9541)) {
	if(GetPlayerVirtualWorld(playerid) != 1) return SendErrorMessage(playerid, "Moras biti u srednjoj soli.");
	if(PlayerInfo[playerid][xOsnovna] != 3) return SendErrorMessage(playerid, "Da bi zavrsio srednju moras prvo zavrsiti osnovnu. ");
	if(sSkolaLimit == 4) return SendErrorMessage(playerid, "Ucionica moze imati maksimalno 4 ucenika istovremeno.");
	new Float:RandomPozicija1[4][4] =
	{
		{1667.7314,-1373.4442,-48.9541, 180.0000],
		{1664.3392,-1373.3768,-48.9541, 180.0000],
		{1664.2988,-1377.2484,-48.9541, 180.0000],
		{1667.7661,-1377.1738,-48.9541, 180.0000]
	};
	if(PlayerInfo[playerid][xSrednja] == 6) return SendErrorMessage(playerid, "Vec si zavrsio srednju skolu. ");
	new poz = random(sizeof(RandomPozicija1));
	Odbrojavanje[playerid] = 180;
	VremeTDControl(playerid, true);
	ac_SetPlayerPos(playerid, RandomPozicija1[poz][0], RandomPozicija1[poz][1], RandomPozicija1[poz][2]);
	SetPlayerFacingAngle(playerid, RandomPozicija1[poz][3]);
	GameTextForPlayer(playerid, "~w~Casovi srednje skole", 5000, 1);
	TogglePlayerControllable(playerid, false);
	ApplyAnimation(playerid,"PED","SEAT_IDLE",4,0,0,0, 1,0,1);
	Uciskolu[playerid] = true;
	sSkolaLimit++;
	SkolaTimer[playerid] = SetTimerEx("SrednjaCasovi", 180000, 0, "ii", playerid, (PlayerInfo[playerid][xSrednja]+1));
	format(varstring, sizeof(varstring), "* %s seda na stolicu i slusa lekciju od profesora.", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);}
else if(IsPlayerInRangeOfPoint(playerid, 3, 1665.9690,-1392.0660,-48.95411)) {
	if(GetPlayerVirtualWorld(playerid) != 3) return SendErrorMessage(playerid, "Moras biti na mestu za ispite.");
	if(FakultetLimit == 4) return SendErrorMessage(playerid, "Ucionica moze imati maksimalno 4 studenta istovremeno.");
	new Float:RandomPozicija2[4][4] =
	{
		{1667.9868,-1389.2526,-48.9541, 180.0000],
		{1663.9470,-1389.3354,-48.9541, 180.0000],
		{1663.7031,-1385.6427,-48.9541, 180.0000],
		{1667.6373,-1385.7008,-48.9541, 180.0000]
	};
	if(PlayerInfo[playerid][xSrednja] != 6) return SendErrorMessage(playerid, "Da bi zavrsio fakultet, moras prvo zavrsiti srednju. ");
	if(PlayerInfo[playerid][xFakultet] == 15) return SendErrorMessage(playerid, "Vec si zavrsio fakultet. ");
	new poz = random(sizeof(RandomPozicija2));
	Odbrojavanje[playerid] = 180;
	VremeTDControl(playerid, true);
	ac_SetPlayerPos(playerid, RandomPozicija2[poz][0], RandomPozicija2[poz][1], RandomPozicija2[poz][2]);
	SetPlayerFacingAngle(playerid, RandomPozicija2[poz][3]);
	GameTextForPlayer(playerid, "~w~Casovi fakulteta", 5000, 1);
	TogglePlayerControllable(playerid, false);
	ApplyAnimation(playerid,"PED","SEAT_IDLE",4,0,0,0, 1,0,1);
	Uciskolu[playerid] = true;
	FakultetLimit++;
	SkolaTimer[playerid] = SetTimerEx("FakultetCasovi", 180000, 0, "ii", playerid, (PlayerInfo[playerid][xFakultet]+1));
	format(varstring, sizeof(varstring), "* %s seda na stolicu i slusa lekciju od profesora.", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);}
else {
	SendErrorMessage(playerid, "Morate biti u ucionici.");
	return 1;}
return 1;}

CMD:kupidozvolu(playerid, params[]) {
new item[32];
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2067.0439,-1887.2560,14.1737)) return SendErrorMessage(playerid, "Nisi u auto skoli!");
if(sscanf(params, "s[32]", item)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/kupidozvolu [kategorija]");
	SCM(playerid, BELA, "[Kategorije] A(motor), B(auto), C1(Kombi), C2(Kamion), C3(Kamion sa prikolicom)");
	SCM(playerid, BELA, "[Cene] A(5000$), B(30000$), C1(45000$), C2(60000$), C3(80000$)");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(strcmp(item, "a",true) == 0) {
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2067.0439,-1887.2560,14.1737)) return SendErrorMessage(playerid, "Moras biti u LS Auto Skoli.");
	if(PlayerInfo[playerid][xMotorska] > 0) return SendErrorMessage(playerid, "Vec imate dozvolu!");
	if(PlayerInfo[playerid][xNovac] < 5000) return SendErrorMessage(playerid, "Nemate dovoljno novaca!");
	DajIgracuNovac(playerid, -5000);
	PlayerInfo[playerid][xMotorska] = 1;
	SavePlayer(playerid);}
else if(strcmp(item, "b",true) == 0) {
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2067.0439,-1887.2560,14.1737)) return SendErrorMessage(playerid, "Moras biti u LS Auto Skoli.");
	if(PlayerInfo[playerid][xVozacka] > 0) return SendErrorMessage(playerid, "Vec imas dozvolu za voznju auta!");
	if(PlayerInfo[playerid][xNovac] < 30000) return SendErrorMessage(playerid, "Nemate dovoljno novaca!");
	DajIgracuNovac(playerid, -30000); 
	Polaganje[playerid] = 1; CheckpointStatus[playerid] = 13; GreskaVoznja[playerid] = 0;
	Fusion_SetPlayerCheckpoint(playerid, 2075.6414, -1879.5465, 13.1864, 5.0);
	SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"Izadjite napolje i sedite u jedno od vozila!");
	SCM(playerid, -1, ""col_orange"[Instruktor]: "col_white"PAZITE DA NE PREDJETE 100KM/H IMATE PRAVO NA 3 GRESKE.");}
else if(strcmp(item, "c1",true) == 0) {
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2067.0439,-1887.2560,14.1737)) return SendErrorMessage(playerid, "Moras biti u LS Auto Skoli.");
	if(PlayerInfo[playerid][xKamionskaC1] > 0) return SendErrorMessage(playerid, "Vec imate dozvolu!");
	if(PlayerInfo[playerid][xNovac] < 45000) return SendErrorMessage(playerid, "Nemate dovoljno novaca!");
	DajIgracuNovac(playerid, -45000); 
	PlayerInfo[playerid][xKamionskaC1] = 1;
	SavePlayer(playerid);}
else if(strcmp(item, "c2",true) == 0) {
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2067.0439,-1887.2560,14.1737)) return SendErrorMessage(playerid, "Moras biti u LS Auto Skoli.");
	if(PlayerInfo[playerid][xKamionskaC2] > 0) return SendErrorMessage(playerid, "Vec imate dozvolu!");
	if(PlayerInfo[playerid][xNovac] < 60000) return SendErrorMessage(playerid, "Nemate dovoljno novaca!");
	DajIgracuNovac(playerid, -60000);
	PlayerInfo[playerid][xKamionskaC2] = 1;
	SavePlayer(playerid);}
else if(strcmp(item, "c3",true) == 0) {
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2067.0439,-1887.2560,14.1737)) return SendErrorMessage(playerid, "Moras biti u LS Auto Skoli.");
	if(PlayerInfo[playerid][xKamionskaC3] > 0) return SendErrorMessage(playerid, "Vec imate dozvolu!");
	if(PlayerInfo[playerid][xNovac] < 80000) return SendErrorMessage(playerid, "Nemate dovoljno novaca!");
	DajIgracuNovac(playerid, -80000);
	PlayerInfo[playerid][xKamionskaC3] = 1;
	SavePlayer(playerid);}
else {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/kupidozvolu [kategorija]");
	SCM(playerid, BELA, "[Kategorije] A(motor), B(auto), C1(Kombi), C2(Kamion), C3(Kamion sa prikolicom)");
	SCM(playerid, BELA, "[Cene] A(5000$), B(30000$), C1(45000$), C2(60000$), C3(80000$)");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");}
return 1;}

CMD:tow(playerid, params[]) {
if(IsPlayerInAnyVehicle(playerid)) {
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525) {
			if(GetPlayerState(playerid) == 2) {
			new Float:pX,Float:pY,Float:pZ;
			GetPlayerPos(playerid,pX,pY,pZ);
			new Float:vX,Float:vY,Float:vZ;
			new Found = 0;
			new vid = 0;
			while((vid<MAX_VEHICLES)&&(!Found)) {
				vid++;
				GetVehiclePos(vid,vX,vY,vZ);
				if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid))) {
					Found=1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					else
						AttachTrailerToVehicle(vid, GetPlayerVehicleID(playerid));
				}
			}
			if(!Found)
					SendErrorMessage(playerid, "Nema automobila okolo.");
		} else return SCM(playerid, CRVENA, "Moras biti vozac!");
	} else return SCM(playerid, CRVENA, "Moras biti u Tow Trucku da bi koristio ovo!");} else return SCM(playerid, CRVENA, "Moras biti u vozilu da bi koristio ovo!");
return 1;}

CMD:postavidinamit(playerid, params[]) {

if(!Dinamit[playerid]) return SendErrorMessage(playerid, "Nemate dinamit u rukama.");
if(VrataBankeSrusena) return SendErrorMessage(playerid, "Vrata su vec srusena.");
if(!IsPlayerInRangeOfPoint(playerid, 5, -150.0243, 924.6457, -15.4609)) return SendErrorMessage(playerid, "Morate biti pored vrata banke.");
if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
if(BankaOpljackana) return SendErrorMessage(playerid, "Banka je vec opljackana.");

new hour, minute, second;
gettimeEx(hour, minute, second);
FixHour(hour);
hour = shifthour;

//if((hour >= 09) && (hour <= 23)) {

DinamitObjekt = CreateObject(1654, -150.02428, 924.64569, -15.46087,   0.00000, 90.00000, 0.00000);
SekundDinamita = 30;
SetTimer("PukoDinamit", 1000, false);
Dinamit[playerid] = false;
new string[128];
format(string, sizeof(string), ""col_red"Eksplozija dinamita\nPomerite se od dinamita\n"col_white"%d", SekundDinamita);
Dinamit3D = Create3DTextLabel(string, BELA, -150.0243, 924.6457, -15.4609, 30.0, -1, 0);

PostaviWanted(playerid, "Pokusaj obijanja sefa", "Nepoznati", 3);
//] else return SendErrorMessage(playerid, "Mozete pljackati samo od 9h do 23h.");
return true;}
CMD:postavibusilicu(playerid, params[]) {

if(PlayerInfo[playerid][xBusilica] == 0) return SendErrorMessage(playerid, "Nemate busilicu.");
if(SefBankeOtvoren) return SendErrorMessage(playerid, "Sef je vec otvoren.");
if(!IsPlayerInRangeOfPoint(playerid, 5, -146.3472,904.9218,-28.0536)) return SendErrorMessage(playerid, "Morate biti pored sefa banke.");
if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
if(BankaOpljackana) return SendErrorMessage(playerid, "Banka je vec opljackana.");

new hour, minute, second;
gettimeEx(hour, minute, second);
FixHour(hour);
hour = shifthour;

//if((hour >= 09) && (hour <= 23)) {
SekundBusenja = 60;
SetTimer("BusenjeSefa", 1000, false);
busilicam[0] = CreateDynamicObject(1367, -146.44455, 904.43976, -28.54049,   0.00000, 0.00000, -89.70000);
SetDynamicObjectMaterial(busilicam[0], 0, 18646, "matcolours", "grey-90-percent", 0x00000000);
busilicam[1] = CreateDynamicObject(19422, -146.16890, 904.68719, -28.71070,   0.00000, 0.00000, 0.00000);
SetDynamicObjectMaterial(busilicam[1], 0, 18646, "matcolours", "grey-90-percent", 0x00000000);
busilicam[2] = CreateDynamicObject(19422, -146.71021, 904.69562, -28.71070,   0.00000, 0.00000, 0.00000);
SetDynamicObjectMaterial(busilicam[2], 0, 18646, "matcolours", "grey-90-percent", 0x00000000);
busilicam[3] = CreateDynamicObject(2985, -146.40085, 903.28229, -28.22792,   180.00000, 270.00000, -90.00000);
SetDynamicObjectMaterial(busilicam[3], 0, 18646, "matcolours", "grey-90-percent", 0x00000000);
busilica[0] = CreateDynamicObject(2902, -146.79660, 904.81073, -28.71420,   0.00000, 0.00000, -91.14010);
busilica[1] = CreateDynamicObject(2902, -146.09114, 904.80450, -28.71415,   0.00000, 0.00000, -89.88006);
busilica[2] = CreateDynamicObject(2690, -146.44420, 904.69305, -28.54212,   270.00000, 0.00000, 0.00000);
busilica[3] = CreateDynamicObject(19305, -146.43011, 904.67230, -28.20877,   0.00000, 0.00000, 180.00018);
busilica[4] = CreateDynamicObject(18716, -146.50267, 904.52826, -28.96877,   0.00000, 0.00000, 0.00000);
busilica[5] = CreateDynamicObject(2902, -146.54855, 904.06592, -28.07430,   0.00000, 0.00000, -270.00000);
busilica[6] = CreateDynamicObject(2902, -146.28856, 904.06934, -28.07430,   0.00000, 0.00000, -270.00000);
PlayerInfo[playerid][xBusilica] = 0;
new string[128];
format(string, sizeof(string), ""col_red"Busenje zida\nPreostalo jos\n"col_white"%d", SekundBusenja);
Busenje3D = Create3DTextLabel(string, BELA, -146.44455, 904.43976, -28.54049, 30.0, -1, 0);
PostaviWanted(playerid, "Pokusaj obijanja sefa", "Nepoznati", 3);
//] else return SendErrorMessage(playerid, "Mozete pljackati samo od 9h do 23h.");
return true;}

CMD:provalilozinku(playerid, params[]) {

if(!IsPlayerInRangeOfPoint(playerid, 5, -147.9282,923.9067,-28.1735)) return SendErrorMessage(playerid, "Morate biti pored sefa banke.");
if(!LaptopRuke[playerid]) return SendErrorMessage(playerid, "Nemate laptop u rukama.");
if(SruseniLaseri) return SendErrorMessage(playerid, "Laseri su vec sklonjeni.");
if(BankaOpljackana) return SendErrorMessage(playerid, "Banka je vec opljackana.");

new hour, minute, second;
gettimeEx(hour, minute, second);
FixHour(hour);
hour = shifthour;

//if((hour >= 09) && (hour <= 23)) {
PokusajiHakedovanja[playerid] = 0;
HakovanjeTimer[playerid] = SetTimerEx("hakedovanje", 500, false, "d", playerid);
ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1);
SendInfoMessage(playerid, "Krenuli ste sa hakovanjem lozinke.");

PostaviWanted(playerid, "Pokusaj obijanja sefa", "Nepoznati", 3);
//] else return SendErrorMessage(playerid, "Mozete pljackati samo od 9h do 23h.");
return true;}

CMD:pljackajzlataru(playerid, params[]) {

if(!IsPlayerInDynamicArea(playerid, ZlataraSef)) return SendErrorMessage(playerid, "Morate biti kod sefa zlatare.");

if(GetFactionType(playerid) == ORG_TIP_PD || GetFactionType(playerid) == ORG_TIP_HITM) {
	SendErrorMessage(playerid, "Vi ste u drzavnoj organizaciji, ne mozete pljackati zlataru!");
	return 1;}

if(PljackaUToku) return SendErrorMessage(playerid, "Sacekajte da se zavrsi trenutna pljacka banke!");
if(ServerInfo[Zlato] == 0) return SendErrorMessage(playerid, "U zlatari nema zlata za pljackanje.");
if(PljackaZlato[playerid] > 0) return SendErrorMessage(playerid, "Moras bezati 5 minuta od policije da bi dobio zlato.");
if(ZlataraOpljackana) return SendErrorMessage(playerid, "Zlatara je vec opljackana.");

new policajci = 0, igraci = 0, hour, minute, seconds;
gettimeEx(hour, minute, seconds);
FixHour(hour);
hour = shifthour;

foreach(new i : Player) {
	if(GetFactionType(i) == ORG_TIP_PD && PoliceDuty[i]) policajci++;

		if(PlayerInfo[i][xClan] == PlayerInfo[playerid][xClan]) {
		igraci++;
	}
}
//if((hour >= 23) && (hour <= 09)) return SendErrorMessage(playerid, "Pljackati mozete samo izmedju 09h i 23h.");
if(policajci < 2) return SendErrorMessage(playerid, "Ne mozete pljackati zlataru ako nema 2 policajca online na duty.");
if(igraci < 2)  return SendErrorMessage(playerid, "Moras imati bar dvoje ljudi iz organizacije online.");
if(GetWeapon(playerid) >= 22 && GetWeapon(playerid) <= 40) {
	//if((hour >= 09) && (hour <= 23)) {
		ZlatoVreme[playerid] = 360;
		PljackaZlato[playerid] = 0;
		ZlataraOpljackana = true;
		ZlataraUToku = true;
		PljackanjeZlatareTimer[playerid] = SetTimerEx("PljackanjeZlatarice", 1000, true, "d", playerid);
		SCM(playerid, NARACRVENA, "Zapoceli ste pljacku zlatare.");
		SCM(playerid, NARACRVENA, "Pljacka zlatare traje 360 sekundi.");
		SCM(playerid, NARACRVENA, "Svake sekunde koju pljackate dobijate 1-2g zlata.");
		PostaviWanted(playerid, "Pljacka Zlatare", "Nepoznati", 6);
		TimerZlatareVracanje = SetTimer("SkiniRobZlatare", 2400000, false);

		new string[128];
		format(string, sizeof(string), "Igrac %s je zapoceo pljackanje zlatare", ImeIgraca(playerid));
		LogSave("Ostalo/LogPljackaZlatare.log", string);

		OOCNews(0xFFA500AA, "[FG] Vesti | "col_white"Neko pokusava da opljacka Fusion Gaming zlataru.");
		OOCNews(0xFFA500AA, "[FG] Vesti | "col_white"Molimo policiju da zaustavi pljacku.");

		new varstring[80];
		format(varstring, sizeof(varstring), "PLJACKA | %s[%d] je poceo da pljacka zlataru.", ImeIgraca(playerid), playerid);
		AdminPoruka(NARACRVENA, varstring);
	//] else return SendErrorMessage(playerid, "Mozete pljackati samo od 9h do 23h.");}
else return SendErrorMessage(playerid, "Nemate oruzje za pljackanje zlatare!");
return true;}

CMD:pljackajbanku(playerid, params[]) {

if(!IsPlayerInDynamicArea(playerid, bankSafe)) return SendErrorMessage(playerid, "Morate biti kod sefa banke.");

if(GetFactionType(playerid) == ORG_TIP_PD || GetFactionType(playerid) == ORG_TIP_HITM) {
	SendErrorMessage(playerid, "Vi ste u drzavnoj organizaciji, ne mozete pljackati banku!");
	return 1;}
if(ZlataraUToku) return SendErrorMessage(playerid, "Sacekajte da se zavrsi trenutna pljacka zlatare!");
if(ServerInfo[NovacBanka] == 0) return SendErrorMessage(playerid, "U banci nema novca kojeg bi ste opljackali.");
if(PljackaNovac[playerid] > 0) return SendErrorMessage(playerid, "Moras bezati 5 minuta od policije da bi dobio novac.");
if(BankaOpljackana) return SendErrorMessage(playerid, "Banka je vec opljackana.");
if(!VrataBankeSrusena) return SendErrorMessage(playerid, "Morate prvo srusiti vrata da bi ste robali.");
new policajci = 0, igraci = 0, hour, minute, seconds;
gettimeEx(hour, minute, seconds);
FixHour(hour);
hour = shifthour;
foreach(new i : Player) {
	if(GetFactionType(i) == ORG_TIP_PD) policajci++;

		if(PlayerInfo[i][xClan] == PlayerInfo[playerid][xClan]) {
		igraci++;
	}
}
//if((hour >= 23) && (hour <= 09)) return SendErrorMessage(playerid, "Ne moze koristit ovu komandu od 02 do 19h. !");
if(policajci < 2) return SendErrorMessage(playerid, "Ne mozete pljackati banku ako nema 2 policajca online na duty.");
if(igraci < 2)  return SendErrorMessage(playerid, "Moras imati bar dvoje ljudi iz organizacije online.");
if(GetWeapon(playerid) >= 22 && GetWeapon(playerid) <= 40) {
	//if((hour >= 09) && (hour <= 23)) {
		PljackaVreme[playerid] = 600;
		PljackaNovac[playerid] = 0;
		BankaOpljackana = true;
		PljackaUToku = true;
		PljackanjeBankeTimer[playerid] = SetTimerEx("PljackanjeBankice", 1000, true, "d", playerid);
		SCM(playerid, NARACRVENA, "Zapoceli ste pljacku banke.");
		SCM(playerid, NARACRVENA, "Pljacka banke traje 600 sekundi.");
		SCM(playerid, NARACRVENA, "Svake sekunde koju pljackate dobijate 800-820 dolara.");
		PostaviWanted(playerid, "Pljacka Banke", "Nepoznati", 6);
		TimerBankeVracanje = SetTimer("SkiniRobBanke", 3600000, false);

		new string[128];
		format(string, sizeof(string), "Igrac %s je zapoceo pljackanje banke", ImeIgraca(playerid));
		LogSave("Ostalo/LogPljackaBanke.log", string);

		OOCNews(0xFFA500AA, "[FG] Vesti | "col_white"Neko pokusava da opljacka Addiko Banku.");
		OOCNews(0xFFA500AA, "[FG] Vesti | "col_white"Molimo policiju da zaustavi pljacku.");

		new varstring[80];
		format(varstring, sizeof(varstring), "PLJACKA | %s[%d] je poceo da pljacka banku.", ImeIgraca(playerid), playerid);
		AdminPoruka(NARACRVENA, varstring);
	//] else return SendErrorMessage(playerid, "Mozete pljackati samo od 9h do 23h.");}
else return SendErrorMessage(playerid, "Nemate oruzje za pljackanje banke!");
return true;}



CMD:unesilozinku(playerid, params[]) {

if(!IsPlayerInRangeOfPoint(playerid, 5, -147.9282,923.9067,-28.1735)) return SendErrorMessage(playerid, "Morate biti pored sefa banke.");
if(SruseniLaseri) return SendErrorMessage(playerid, "Laseri su vec sklonjeni.");
new lozinka[32], hour, minute, second;
gettimeEx(hour, minute, second);
FixHour(hour);
hour = shifthour;
if(PokusajiHakedovanja[playerid] != 15) return SendErrorMessage(playerid, "Vas proces hakovanja nije jos otkrio lozinku.");
if(sscanf(params, "s[32]", lozinka)) {
	SendUsageMessage(playerid, "/unesilozinku [lozinka]");
	return 1;}
//if((hour >= 09) && (hour <= 23)) {
if(strcmp(LozinkaBanke, lozinka, true) == 0)
{
	for(new i = 0; i < 4; i++) {
		DestroyDynamicObject(LaseriBanka[i]);
	}
	SruseniLaseri = true;
	SetCameraBehindPlayer(playerid);
	Fusion_KillTimer(HakovanjeTimer[playerid]);
	VrataBankeHakovana = true;
	DestroyDynamicObject(VrataSefaBankeZaHack);
	VrataSefaBankeZaHack = CreateDynamicObject(19303, -145.8705, 922.6596, -27.9343,   0.00000, 0.00000, 77.2200);
	SendInfoMessage(playerid, "Uspesno ste provalili lozinku i skloni bezbedonosne lasere.");
	SendInfoMessage(playerid, "Sada mozete sigurno uci u sef banke.");}
else {
	SendErrorMessage(playerid, "Uneli ste pogresnu lozinku te oglasili alarm.");
	PostaviWanted(playerid, "Pokusaj pljacke banke", "Nepoznati", 3);
	SetCameraBehindPlayer(playerid);}
//] else return SendErrorMessage(playerid, "Mozete pljackati samo od 9h do 23h.");
return true;}

CMD:crnotrziste(playerid, params[]) {

new broj;
if(!IsPlayerInRangeOfPoint(playerid, 3.0, -66.4305,-1136.8323,2.2530)) return SendErrorMessage(playerid, "Morate biti kod crnog trzista.");
if(sscanf(params, "d", broj)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/crnotrziste [broj predmeta]");
	SCM(playerid, BELA, "[Broj predmeta]: 1. Inekcija 2. Alat za obijanje 3. Dinamit 4. Busilica.");
	SCM(playerid, BELA, "[Cena]: Inekcija(1000$) Alat za obijanje(8000$) Dinamit(2000$) Busilica(15000$).");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(broj == 1) {

	if(PlayerInfo[playerid][xInekcija] == false) {
		if(PlayerInfo[playerid][xNovac] < 1000) return SendErrorMessage(playerid, "Nemas dovoljno novca.");
		SendInfoMessage(playerid, "Kupio si inekciju za 1000$.");
		PlayerInfo[playerid][xInekcija] = true;
		DajIgracuNovac(playerid, -1000);
	}
	else return SendErrorMessage(playerid, "Vec imas spric i iglu!");}
else if(broj == 2) {

	if(PlayerInfo[playerid][xToolkit] == false) {
		if(PlayerInfo[playerid][xNovac] < 8000) return SendErrorMessage(playerid, "Nemas dovoljno novca.");
		SendInfoMessage(playerid, "Kupio si alat za obijanje za 8000$.");
		PlayerInfo[playerid][xToolkit] = true;
		DajIgracuNovac(playerid, -8000);
	}
	else return SendErrorMessage(playerid, "Vec imas alat za obijanje!");}
else if(broj == 3) {

	if(PlayerInfo[playerid][xNovac] < 2000) return SendErrorMessage(playerid, "Nemas dovoljno novca.");
	new id;
	if(Inventory_HasItem(playerid, "Dinamit")) {
		SendErrorMessage(playerid, "Vec imate dinamit u inventoriju.");
	}
	else if(!Inventory_HasItem(playerid, "Dinamit")) {

		id = Inventory_Add(playerid, "Dinamit", 1654);

		if(id != -1) {
			SendInfoMessage(playerid, "Kupio si dinamit za 2000$.");
			DajIgracuNovac(playerid, -2000);
		}
		else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");
	}
}
else if(broj == 4) {

	if(PlayerInfo[playerid][xBusilica] == 0) {
		if(PlayerInfo[playerid][xNovac] < 15000) return SendErrorMessage(playerid, "Nemas dovoljno novca.");
		SendInfoMessage(playerid, "Kupio si busilicu za 15000$.");
		PlayerInfo[playerid][xBusilica] = 1;
		DajIgracuNovac(playerid, -15000);
	}
	else return SendErrorMessage(playerid, "Vec imas alat za obijanje!");}
else return SendErrorMessage(playerid, "Pogresan broj 1-5.");
return 1;}

CMD:electric(playerid, params[]) {
if(GetFactionType(playerid)  != ORG_TIP_ELEK) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new item[32];
if(sscanf(params, "s[32] ", item)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/electric [opcija]");
	SCM(playerid, BELA, "[Opcije] oprema, start, stop, popravi");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(strcmp(item, "oprema", true) == 0) {
	if(!ElectricOprema[playerid]) {
		if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_LHAND)) {
			SendErrorMessage(playerid, "Vec imas neki objekt u lijevoj ruci!");
			return 1;
		}
		SetPlayerAttachedObject(playerid, OBJECT_SLOT_LHAND, 18644, 5, 0.082183, 0.021501, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		SendJobMessage(playerid, "Uzeli ste potreban alat sada mozete krenuti sa poslom.");
		ElectricOprema[playerid] = true;
	}
	else if(ElectricOprema[playerid]) {
		if(!IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_LHAND)) return SendErrorMessage(playerid, "Nemas nijedan objekt u levoj ruci!");
		RemovePlayerAttachedObject(playerid, OBJECT_SLOT_LHAND);
		SendJobMessage(playerid, "Ostavili ste poslovni alat.");
		ElectricOprema[playerid] = false;
	}
	return 1;}
else if(strcmp(item, "start", true) == 0) {
	new kolicina, autoid = -1;
	for(new i = 1; i < MAX_CARS; i++) {
		if(VehicleInfo[i][vID] == GetPlayerVehicleID(playerid)) {
			if(VehicleInfo[i][vUsage] == ORGANIZACIJSKO_VOZILO) {
				if(VehicleInfo[i][vOrganization] == PlayerInfo[playerid][xClan]) {
					autoid = i;
					break;
				}
			}
		}
	}
	if(autoid == -1) return SendErrorMessage(playerid, "Morate biti u vozilu za posao.");
	if(!ElectricOprema[playerid]) return SendErrorMessage(playerid, "Nemate alat za posao.");
	if(sscanf(params, "s[32]d", item, kolicina)) {
		SendUsageMessage(playerid, "/electric start [1.stupovi | 2.brojila]");
		return 1;
	}
	if(kolicina == 1) {
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 552) return SendErrorMessage(playerid, "Morate biti u vozilu za posao.");
		Fusion_SetPlayerCheckpoint(playerid, BanderaPos[0][0], BanderaPos[0][1], BanderaPos[0][2], 5.0);
		CheckpointStatus[playerid] = 18;
		electricNACP[playerid] = false;
		SendJobMessage(playerid, "Bandera za popravku vam je oznacena CPom na mapi.");
		ElectricPosao[playerid] = 1;
	}
	else if(kolicina == 2) {
		new rRandom = (random(ServerInfo[BrojImovina]) + 1);
		Fusion_SetPlayerCheckpoint(playerid, II[rRandom][iEnter][0], II[rRandom][iEnter][1], II[rRandom][iEnter][2], 2.5);
		CheckpointStatus[playerid] = 19;
		ElectricPosao[playerid] = 2;
		EIDK[playerid] = rRandom;
		BrojilaKuca[playerid] = 0;
		SendJobMessage(playerid, "Kuca za ocitavanje brojila vam je oznacena CPom na mapi.");
	}
	else return SendErrorMessage(playerid, "Pogresan broj(1-2).");
	return 1;}
else if(strcmp(item, "stop", true) == 0) {
	if(ElectricPosao[playerid] == 1) {
		if(Bandera[playerid] >= 10) {
			DajIgracuNovac(playerid, 1000);
			ElectricPosao[playerid] = 0;
			SendJobMessage(playerid, "Zavrsili ste posao i zaradili "col_white"1000$.");
		}
		else if(Bandera[playerid] < 10) {
			ElectricPosao[playerid] = 0;
			SendJobMessage(playerid, "Zavrsili ste posao i niste nista zaradili..");
		}
	}
	return 1;}
else if(strcmp(item, "popravi", true) == 0) {
	if(ElectricPosao[playerid] == 1) {
		if(!ElectricOprema[playerid]) return SendErrorMessage(playerid, "Nemate alat za posao.");
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, BanderaPosGore[Bandera[playerid]][0], BanderaPosGore[Bandera[playerid]][1], BanderaPosGore[Bandera[playerid]][2])) return SendErrorMessage(playerid, "Niste na merdevinama.");
		if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti na nogama.");
		if(electricNACP[playerid] != true) return SendErrorMessage(playerid, "Morate prvo proci kroz zadnji cp.");
		electricNACP[playerid] = false;
		SendJobMessage(playerid, "Poceli se sa popravkom bandere, pricekajte "col_white"5s.");
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 5000, 0);
		SetTimerEx("BanderaGotova", 5000, false, "d", playerid);
		Bandera[playerid]++;
	}
	return 1;}
else {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/electric [opcija]");
	SCM(playerid, BELA, "[Opcije] oprema, start, stop, popravi");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");}
return 1;}

forward BanderaGotova(playerid);
public BanderaGotova(playerid) {
if(ElectricOprema[playerid] && Bandera[playerid] >= 1 && ElectricPosao[playerid] == 1) {
	ClearAnimations(playerid);
	if(IsPlayerInRangeOfPoint(playerid, 3.0, BanderaPosGore[(Bandera[playerid]-1)][0], BanderaPosGore[(Bandera[playerid]-1)][1], BanderaPosGore[(Bandera[playerid]-1)][2])) {
		if(Bandera[playerid] == 20) {
			PlayerInfo[playerid][xPlatniRacun] += 1900;
			SavePlayer(playerid); update_fg_info_tds(playerid);
			ElectricPosao[playerid] = 0;
			Bandera[playerid] = 0;
			SendJobMessage(playerid, "Zavrsili ste posao i zaradili "col_white"1900$.");
			return 1;
		}
			Fusion_SetPlayerCheckpoint(playerid, BanderaPos[Bandera[playerid]][0], BanderaPos[Bandera[playerid]][1], BanderaPos[Bandera[playerid]][2], 5.0);
		CheckpointStatus[playerid] = 18;
		SendJobMessage(playerid, "Bandera za popravku vam je oznacena CPom na mapi.");
	}
	else {
		ElectricPosao[playerid] = 0;
		Bandera[playerid] = 0;
		SendJobMessage(playerid, "Niste bili na merdevinama kad ste zavrsavali popravku i vas posao je prekinut.");
	}
}
return 1;}

forward BrojiloGotovo(playerid);
public BrojiloGotovo(playerid) {
if(ElectricOprema[playerid] && BrojilaKuca[playerid] >= 1 && ElectricPosao[playerid] == 2) {
	ClearAnimations(playerid);
	if(IsPlayerInRangeOfPoint(playerid, 3.0, II[EIDK[playerid]][iEnter][0], II[EIDK[playerid]][iEnter][1], II[EIDK[playerid]][iEnter][2])) {
		if(BrojilaKuca[playerid] == 3) {
			PlayerInfo[playerid][xPlatniRacun] += 1600;
			SavePlayer(playerid); update_fg_info_tds(playerid);
			ElectricPosao[playerid] = 0;
			BrojilaKuca[playerid] = 0;
			EIDK[playerid] = -1;
			SendJobMessage(playerid, "Zavrsili ste poslom i zaradili "col_white"1600$. (Dodato na platni racun - /stats)");
			return 1;
		}
		new rRandom = (random(ServerInfo[BrojImovina]) + 1);
		Fusion_SetPlayerCheckpoint(playerid, II[rRandom][iEnter][0], II[rRandom][iEnter][1], II[rRandom][iEnter][2], 2.5);
		CheckpointStatus[playerid] = 19;
		EIDK[playerid] = rRandom;
		SendJobMessage(playerid, "Kuca za ocitavanje brojila vam je oznacena CPom na mapi.");
	}
	else {
		ElectricPosao[playerid] = 0;
		BrojilaKuca[playerid] = 0;
		EIDK[playerid] = -1;
		SendJobMessage(playerid, "Niste bili kod kuce kad ste zavrsavali ocitavanje i vas posao je prekinut.");
	}
}
return 1;}

forward offAdminNeaktivnost(playerid);
public offAdminNeaktivnost(playerid)
{
if(PlayerInfo[playerid][xAdmin] > 0)
{
	new text[64],lol[64];
	new File:lider;
	if(PlayerInfo[playerid][xASlot] == 1)
	{
		lider = fopen("Admini/1.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 2)
	{
		lider = fopen("Admini/2.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 3)
	{
		lider = fopen("Admini/3.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 4)
	{
		lider = fopen("Admini/4.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 5)
	{
		lider = fopen("Admini/5.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 6)
	{
		lider = fopen("Admini/6.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 7)
	{
		lider = fopen("Admini/7.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 8)
	{
		lider = fopen("Admini/8.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 9)
	{
		lider = fopen("Admini/9.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 10)
	{
		lider = fopen("Admini/10.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 11)
	{
		lider = fopen("Admini/11.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 12)
	{
		lider = fopen("Admini/12.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 13)
	{
		lider = fopen("Admini/13.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 14)
	{
		lider = fopen("Admini/14.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 15)
	{
		lider = fopen("Admini/15.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 16)
	{
		lider = fopen("Admini/16.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 17)
	{
		lider = fopen("Admini/17.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 18)
	{
		lider = fopen("Admini/18.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 19)
	{
		lider = fopen("Admini/19.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 20)
	{
		lider = fopen("Admini/20.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 21)
	{
		lider = fopen("Admini/21.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 22)
	{
		lider = fopen("Admini/22.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 23)
	{
		lider = fopen("Admini/23.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 24)
	{
		lider = fopen("Admini/24.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 25)
	{
		lider = fopen("Admini/25.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 26)
	{
		lider = fopen("Admini/26.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 27)
	{
		lider = fopen("Admini/27.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 28)
	{
		lider = fopen("Admini/28.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 29)
	{
		lider = fopen("Admini/29.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xASlot] == 30)
	{
		lider = fopen("Admini/30.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	if(strcmp(ImeIgraca(playerid),lol,false))
	{
		SetPlayerColor(playerid, 0xFFFFFF00);
		PlayerInfo[playerid][xAdmin] = 0;
		PlayerInfo[playerid][xTestAFG] = 0;
		PlayerInfo[playerid][xASlot] = 0;
		PlayerInfo[playerid][xSkriptaRank] = 0;
		PlayerInfo[playerid][xADutyTime] = 0;
		PlayerInfo[playerid][xADutyTimeMin] = 0;
		PlayerInfo[playerid][xSkin] = SetSexSkin(playerid);
		PlayerInfo[playerid][xSpawn] = SetRandomSpawn(playerid);
		c_SetPlayerSkin(playerid, SetSexSkin(playerid));
		SavePlayer(playerid); ResetujAdmina(playerid);

		Fusion_SetPlayerArmour(playerid, 0);
		AdminDuty[playerid] = false;

		for (new i = 0; i < MAX_LINES; i ++)
		{
			PlayerTextDrawHide(playerid, AltChatTD_Player[i]);
		}

		SendClientMessage(playerid, SVETLOCRVENA, "Smenjeni ste sa AFG pozicije. Ukoliko mislite da je greska, obratite se vlasniku.");
	}
}
}

forward offHelperNeaktivnost(playerid);
public offHelperNeaktivnost(playerid)
{
if(PlayerInfo[playerid][xHelper] > 0)
{
	new text[64],lol[64];
	new File:lider;
	if(PlayerInfo[playerid][xHSlot] == 1)
	{
		lider = fopen("Helperi/1.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 2)
	{
		lider = fopen("Helperi/2.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 3)
	{
		lider = fopen("Helperi/3.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 4)
	{
		lider = fopen("Helperi/4.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 5)
	{
		lider = fopen("Helperi/5.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 6)
	{
		lider = fopen("Helperi/6.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 7)
	{
		lider = fopen("Helperi/7.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 8)
	{
		lider = fopen("Helperi/8.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 9)
	{
		lider = fopen("Helperi/9.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 10)
	{
		lider = fopen("Helperi/10.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 11)
	{
		lider = fopen("Helperi/11.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 12)
	{
		lider = fopen("Helperi/12.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 13)
	{
		lider = fopen("Helperi/13.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 14)
	{
		lider = fopen("Helperi/14.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 15)
	{
		lider = fopen("Helperi/15.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 16)
	{
		lider = fopen("Helperi/16.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 17)
	{
		lider = fopen("Helperi/17.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 18)
	{
		lider = fopen("Helperi/18.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 19)
	{
		lider = fopen("Helperi/19.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 20)
	{
		lider = fopen("Helperi/20.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 21)
	{
		lider = fopen("Helperi/21.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 22)
	{
		lider = fopen("Helperi/22.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 23)
	{
		lider = fopen("Helperi/23.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 24)
	{
		lider = fopen("Helperi/24.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 25)
	{
		lider = fopen("Helperi/25.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 26)
	{
		lider = fopen("Helperi/26.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 27)
	{
		lider = fopen("Helperi/27.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 28)
	{
		lider = fopen("Helperi/28.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 29)
	{
		lider = fopen("Helperi/29.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	else if(PlayerInfo[playerid][xHSlot] == 30)
	{
		lider = fopen("Helperi/30.txt",io_read);
		while(fread(lider,text)) {
		strmid(lol,text,0,strlen(text),255); }
		fclose(lider);
	}
	if(strcmp(ImeIgraca(playerid),lol,false))
	{
		SetPlayerColor(playerid, 0xFFFFFF00);
		PlayerInfo[playerid][xHelper] = 0;
		PlayerInfo[playerid][xSkin] = SetSexSkin(playerid);
		PlayerInfo[playerid][xSpawn] = SetRandomSpawn(playerid);
		PlayerInfo[playerid][xHDutyTime] = 0;
		PlayerInfo[playerid][xHDutyTimeMin] = 0;
		PlayerInfo[playerid][xHAskq] = 0;
		PlayerInfo[playerid][xHSlot] = 0;
		c_SetPlayerSkin(playerid, SetSexSkin(playerid));
		SavePlayer(playerid);
		Fusion_SetPlayerArmour(playerid, 0);
		AdminDuty[playerid] = false;
		SendClientMessage(playerid, SVETLOCRVENA, "Smenjeni ste sa Helper pozicije. Ukoliko mislite da je greska, obratite se vodji.");
	}
}
}

forward TehnickiPregled(playerid);
public TehnickiPregled(playerid) {

new vehicleid = GetPlayerVehicleID(playerid), Float:Health;
new engine, lights, alarm, doors, bonnet, boot, objective;

if(vehicleid != INVALID_VEHICLE_ID) {

	GetVehicleHealth(vehicleid, Health);
	if(Health > 980) {

		VehicleInfo[ScriptIDVozila[vehicleid]][vTeh] = 1;
		TogglePlayerControllable(playerid, true);
		GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
		ac_SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, 0, 0, boot, objective);
			SCM(playerid, -1, ""col_red"[Mehanicar] "col_white"Prosli ste Tehnicki pregled, sada mozete da registrujete vozilo.");
		return true;
	}
	else {

		TogglePlayerControllable(playerid, true);
		GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
		ac_SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, 0, 0, boot, objective);
		SCM(playerid, -1, ""col_red"[Mehanicar] "col_white"Ne mozete preci tehnicki sa pokvarenim vozilom!");
		return true;
	}
}
return true;}
CMD:tehnickipregled(playerid, params[]) {


if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Moras biti u autu!");
if(TipVozila[GetPlayerVehicleID(playerid)] != PRIVATNO_VOZILO) return SendErrorMessage(playerid, "Mozete samo na privatnim vozilima raditi tehnicki pregled.");
if(PlayerInfo[playerid][xNovac] < 15000) return SendErrorMessage(playerid, "Nemate 15000$ u dzepu.");

new Float:health;
GetVehicleHealth(GetPlayerVehicleID(playerid), health);
if(health < 950) return SendErrorMessage(playerid, "Auto je suvise ostecen!");

if(strcmp(ImeIgraca(playerid), VehicleInfo[ScriptIDVozila[GetPlayerVehicleID(playerid)]][vOwner], true) == 0) {}
else return SendErrorMessage(playerid, "Ovo vozilo nije u vasem vlasnistvu.");

if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1990.5493,-1598.7896,14.8649)) return SendErrorMessage(playerid, "Morate biti u garazi za tehnicki pregled kod mehanicara.");
if(VehicleInfo[ScriptIDVozila[GetPlayerVehicleID(playerid)]][vTeh] != 0) return SendErrorMessage(playerid, "Vozilo je vec proslo tehnicki pregled.");
if(VehicleInfo[ScriptIDVozila[GetPlayerVehicleID(playerid)]][vReg] != 0) return SendErrorMessage(playerid, "Vozilo je vec registrovano.");

DajIgracuNovac(playerid, -15000);

SetTimerEx("TehnickiPregled", 14000, 0, "i", playerid);

SetCameraBehindPlayer(playerid);
TogglePlayerControllable(playerid, false);
new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
ac_SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, 1, 1, boot, objective);
SCM(playerid, SVETLOPLAVA, "Tehnicki pregled u toku, molimo sacekajte...");
return true;}

CMD:neon(playerid, params[]) {

if(IsPlayerInRangeOfPoint(playerid, 2.5, 699.1390, -1183.1641, 16.0707)) {

	if(IsVehicleBrod(GetPlayerVehicleID(playerid)) ||
		IsVehicleMotor(GetPlayerVehicleID(playerid)) ||
		IsVehicleBajs(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Ne moze na ovom vozilu!");

	if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Ne mozete ovo sa wanted levelom.");
	SPD(playerid, dialog_NEONSHOP, DSH, D_NASLOV,
		"Boja\tCena\n\
		Plava\t{0ECF42]10000$\n\
		Crvena\t{0ECF42]10000$\n\
		Zelena\t{0ECF42]10000$\n\
		Bela\t{0ECF42]10000$\n\
		Pinky\t{0ECF42]10000$\n\
		Zuta\t{0ECF42]10000$\n\
		Obrisi\t{0ECF42]300$", "Napred", "Izadji");}
else return SendErrorMessage(playerid, "Niste u tuning shopu (/gps).");
	return true;}
CMD:tune(playerid, params[]) {
if(IsPlayerInRangeOfPoint(playerid, 2.5, 695.6638, -1189.9620, 16.0697)) {
	if(PlayerInfo[playerid][xWanted] != 0) return SendErrorMessage(playerid, "Ne mozete ovo sa wanted levelom.");
	if(PlayerCP[playerid] > 0) return SendErrorMessage(playerid, "Ne mozes dok si na eventu.");
	PlayerTuningCar[playerid] = true;
	TuningTDControl(playerid, true);
	SPD(playerid, dialog_TUNING, DSL, D_NASLOV, "Paintjobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nWheels\nCar Stereo\nHydraulics\nNitro", D_ODABERI, D_ODUSTANI);
	DajIgracuNovac(playerid, 4500);
	SendInfoMessage(playerid, "Platili ste 4500$ da bi se parkirali i otvorili meni u tuning shopu.");}
else return SendErrorMessage(playerid, "Niste u tuning shopu (/gps).");
return true;}

CMD:natocicisternu(playerid, params[]) {

new fsID = IsThatFuelStationMy(playerid), trailerid = GetVehicleTrailer(GetPlayerVehicleID(playerid));
if(fsID == -1) return SendErrorMessage(playerid, "Nemate u vlasnistvu nijednu pumpu.");

if(!IsPlayerInVehicle(playerid, VehicleInfo[FuelStation[fsID][fsTruckID]][vID])) return SendErrorMessage(playerid, "Morate biti u kamionu koji je parkiran pored pumpe!");
if(!IsPlayerInRangeOfPoint(playerid, 5.0, 269.1654, 1465.2311, 10.5859)) return SendErrorMessage(playerid, "Ne nalazite se u naftnoj industriji!");
if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Vi nemate zakacenu cisternu!");
if(trailerid != (VehicleInfo[FuelStation[fsID][fsCisternID]][vID])) return SendErrorMessage(playerid, "To nije vasa cisterna!");
new litara, vrsta[10], cisternID = VehicleInfo[FuelStation[fsID][fsCisternID]][vID];
if(sscanf(params, "is[10]", litara, vrsta)) return SendUsageMessage(playerid,  "/natocicisternu [Broj litara] [Vrsta goriva (Dizel-Benzin-Gasno)]");
if(Putovara[playerid]) return SendErrorMessage(playerid, "Gorivo se vec utovara!");
if(litara < 1 || litara > 300) return SendErrorMessage(playerid, "Ne mozete manje od 1 litre i vise od 300 litara!");

if(CisternFuel[cisternID][0] == 300 || CisternFuel[cisternID][1] == 300 || CisternFuel[cisternID][2] == 300) return SendErrorMessage(playerid, "Vasa citerna je puna!");
if(!strcmp(vrsta, "dizel", true)) {

	if(PlayerInfo[playerid][xNovac] < (litara*12)) return SendErrorMessage(playerid, "Potrebno vam je 10$ po litru.");
	if(CisternFuel[cisternID][1] != 0) return SendErrorMessage(playerid, "U vasoj cisterni ima benzina, prvo je ispraznite!");
	if(CisternFuel[cisternID][2] != 0) return SendErrorMessage(playerid, "U vasoj cisterni ima gasnog ulja, prvo je ispraznite!");
	if((litara + CisternFuel[cisternID][0]) > 300) return SendErrorMessage(playerid, "Zapremnina vase cisterne je 300 litara!");

	DajIgracuNovac(playerid, -(litara*52));
	Putovara[playerid] = true;
	CisternFuel[cisternID][0] += litara;
	TogglePlayerControllable(playerid, false);
	GameTextForPlayer(playerid, "~w~UTOVAR..", 5000, 1);
	Putovar[playerid] = SetTimerEx("PumpaUtovar", 10000, false, "i", playerid);}
else if(!strcmp(vrsta, "benzin", true)) {

	if(PlayerInfo[playerid][xNovac] < (litara*11)) return SendErrorMessage(playerid, "Potrebno vam je 10$ po litru.");
	if(CisternFuel[cisternID][0] != 0) return SendErrorMessage(playerid, "U vasoj cisterni ima dizela, prvo je ispraznite!");
	if(CisternFuel[cisternID][2] != 0) return SendErrorMessage(playerid, "U vasoj cisterni ima gasnog ulja, prvo je ispraznite!");
	if((litara + CisternFuel[cisternID][1]) > 300) return SendErrorMessage(playerid, "Zapremnina vase cisterne je 300 litara!");

	DajIgracuNovac(playerid, -(litara*50));
	Putovara[playerid] = true;
	CisternFuel[cisternID][1] += litara;
	TogglePlayerControllable(playerid, false);
	GameTextForPlayer(playerid, "~w~UTOVAR..", 5000, 1);
	Putovar[playerid] = SetTimerEx("PumpaUtovar", 10000, false, "i", playerid);}
else if(!strcmp(vrsta, "gasno", true)) {

	if(PlayerInfo[playerid][xNovac] < (litara*10)) return SendErrorMessage(playerid, "Potrebno vam je 10$ po litru.");
	if(CisternFuel[cisternID][1] != 0) return SendErrorMessage(playerid, "U vasoj cisterni ima benzina, prvo je ispraznite!");
	if(CisternFuel[cisternID][0] != 0) return SendErrorMessage(playerid, "U vasoj cisterni ima dizela, prvo je ispraznite!");
	if((litara + CisternFuel[cisternID][2]) > 300) return SendErrorMessage(playerid, "Zapremnina vase cisterne je 300 litara!");

	DajIgracuNovac(playerid, -(litara*55));
	Putovara[playerid] = true;
	CisternFuel[cisternID][2] += litara;
	TogglePlayerControllable(playerid, false);
	GameTextForPlayer(playerid, "~w~UTOVAR..", 5000, 1);
	Putovar[playerid] = SetTimerEx("PumpaUtovar", 10000, false, "i", playerid);}
else return SendErrorMessage(playerid, "Pogresna vrsta goriva.");
return 1;}

CMD:ispraznicisternu(playerid, params[]) {

new fsID = IsThatFuelStationMy(playerid), trailerid = GetVehicleTrailer(GetPlayerVehicleID(playerid));
if(fsID == -1) return SendErrorMessage(playerid, "Nemate u vlasnistvu nijednu pumpu.");

if(IsPlayerInRangeOfPoint(playerid, 20.0, FuelStation[fsID][fsPos][0], FuelStation[fsID][fsPos] [1], FuelStation[fsID][fsPos][2])) {

	if(!IsPlayerInVehicle(playerid, VehicleInfo[FuelStation[fsID][fsTruckID]][vID])) return SendErrorMessage(playerid, "Morate biti u kamionu, koji je parkiran pored pumpe!");

	if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Vi nemate zakacenu cisternu!");
	if(trailerid != (VehicleInfo[FuelStation[fsID][fsCisternID]][vID])) return SendErrorMessage(playerid, "To nije vasa cisterna!");

	new litara, vrsta[10], cisternID = VehicleInfo[FuelStation[fsID][fsCisternID]][vID];
	if(sscanf(params, "is[10]", litara, vrsta)) return SendUsageMessage(playerid, "/ispraznicisternu [Broj litara] [Vrsta goriva (Dizel-Benzin-Gasno)]");

	if(Pistovara[playerid]) return SendErrorMessage(playerid, "Gorivo se vec istovara!");
	if(litara < 1 || litara > 300) return SendErrorMessage(playerid, "Ne mozete manje od 1 litre i vise od 300 litara!");
		if(!strcmp(vrsta, "dizel", true)) {

		if(FuelStation[fsID][fsDieselL] == 10000) return SendErrorMessage(playerid, "Vase odlagaliste za dizel je puno!");
		if((litara+FuelStation[fsID][fsDieselL]) > 10000) return SendErrorMessage(playerid, "Vase odlagaliste za dizel ne moze da primi toliko litara!");
		if(litara > CisternFuel[cisternID][0]) return SendErrorMessage(playerid, "Nemate toliko litara dizela u cisterni!");


		Pistovara[playerid] = true;
		CisternFuel[cisternID][0] -= litara;
		FuelStation[fsID][fsDieselL] += litara;
		TogglePlayerControllable(playerid, false);
		GameTextForPlayer(playerid, "~w~ISTOVAR..", 5000, 1);
		Pistovar[playerid] = SetTimerEx("PumpaIstovar", 10000, false, "i", playerid);
	}
	else if(!strcmp(vrsta, "benzin", true)) {

		if(FuelStation[fsID][fsGasolineL] == 10000) return SendErrorMessage(playerid, "Vase odlagaliste za benzin je puno!");
		if((litara+FuelStation[fsID][fsGasolineL]) > 10000) return SendErrorMessage(playerid, "Vase odlagaliste za benzin ne moze da primi toliko litara!");
		if(litara > CisternFuel[cisternID][1]) return SendErrorMessage(playerid, "Nemate toliko litara benzina u cisterni!");


		Pistovara[playerid] = true;
		CisternFuel[cisternID][1] -= litara;
		FuelStation[fsID][fsGasolineL] += litara;
		TogglePlayerControllable(playerid, false);
		GameTextForPlayer(playerid, "~w~ISTOVAR..", 5000, 1);
		Pistovar[playerid] = SetTimerEx("PumpaIstovar", 10000, false, "i", playerid);
	}
	else if(!strcmp(vrsta, "gasno", true)) {

		if(FuelStation[fsID][fsGasOilL] == 10000) return SendErrorMessage(playerid, "Vase odlagaliste za gasno ulje je puno!");
		if((litara+FuelStation[fsID][fsGasOilL]) > 10000) return SendErrorMessage(playerid, "Vase odlagaliste za gasno ulje ne moze da primi toliko litara!");
		if(litara > CisternFuel[cisternID][2]) return SendErrorMessage(playerid, "Nemate toliko litara gasnog ulja u cisterni!");

		Pistovara[playerid] = true;
		CisternFuel[cisternID][2] -= litara;
		FuelStation[fsID][fsGasOilL] += litara;
		TogglePlayerControllable(playerid, false);
		GameTextForPlayer(playerid, "~w~ISTOVAR..", 5000, 1);
		Pistovar[playerid] = SetTimerEx("PumpaIstovar", 10000, false, "i", playerid);
	}
	else return SendErrorMessage(playerid, "Pogresna vrsta goriva.");
	FStation_Save(fsID);}
return 1;}

CMD:pumpa(playerid, params[]) {

new fsID = IsThatFuelStationMy(playerid);
if(fsID == -1) return SendErrorMessage(playerid, "Nemate u vlasnistvu nijednu pumpu.");

SPD(playerid, dialog_PUMPA, DSL, D_NASLOV, "Ime Pumpe\nCena Dizela\nCena Benzina\nCena Gasnog ulja\nProvera zaliha\nLokacija naftne rafinerije\nKomande\nRespawnuj kamion i cisternu", "Odabir", "Izlaz");

return 1;}

CMD:fill(playerid, params[]) {
new fuel;
new vehicleid = GetPlayerVehicleID(playerid);
new fsID = GetNearestFuelStation(playerid);

if(fsID == -1) {
		SendErrorMessage(playerid, "Niste na benzinskoj stanici!");
	return 1;}
if(IsVehicleBajs(vehicleid)) {
	SendErrorMessage(playerid, "Ne mozete bicikl napuniti gorivom.");
	return 1;}
if(sscanf(params, "i", fuel)) {
	SendUsageMessage(playerid, "/fill [litara(1-100)]");
	return 1;}
if((fuel+Fuel[vehicleid]) > getAmountFuel(vehicleid)) {
		SendErrorMessage(playerid, "Ne moze toliko goriva stati u vas automobil.");
	return 1;}
if(fuel < 1) {
		SendUsageMessage(playerid, "/fill [litara(1-100)]");
	return 1;}
if(ScriptIDVozila[vehicleid] == -1) return SendErrorMessage(playerid, "Ne mozes puniti gorivom vozila koja nisu server-side.");
if(PuniGorivo[playerid] == true) return SendErrorMessage(playerid, "Vec punis gorivo.");

if(VehicleInfo[ScriptIDVozila[vehicleid]][vFuelType] == 1) {

	if(FuelStation[fsID][fsDieselL] == 0) return SendErrorMessage(playerid, "Zao nam je, nema vise zaliha dizela!");
	if(fuel > FuelStation[fsID][fsDieselL]) return SendErrorMessage(playerid, "Zao nam je, nema toliko zaliha dizela.");
	if(PlayerInfo[playerid][xNovac] < fuel*FuelStation[fsID][fsDieselPrice]) return SendErrorMessage(playerid, "Nemate dovoljno novca, 1 litar benzina kosta %d$.", FuelStation[fsID][fsDieselPrice]);}
else if(VehicleInfo[ScriptIDVozila[vehicleid]][vFuelType] == 2) {

	if(FuelStation[fsID][fsGasolineL] == 0) return SendErrorMessage(playerid, "Zao nam je, nema vise zaliha benzina!");
	if(fuel > FuelStation[fsID][fsGasolineL]) return SendErrorMessage(playerid, "Zao nam je, nema toliko zaliha benzina.");
	if(PlayerInfo[playerid][xNovac] < fuel*FuelStation[fsID][fsGasolinePrice]) return SendErrorMessage(playerid, "Nemate dovoljno novca, 1 litar dizela kosta %d$.", FuelStation[fsID][fsGasolinePrice]);}
else if(VehicleInfo[ScriptIDVozila[vehicleid]][vFuelType] == 3) {

	if(FuelStation[fsID][fsGasOilL] == 0) return SendErrorMessage(playerid, "Zao nam je, nema vise zaliha gasnog ulja!");
	if(fuel > FuelStation[fsID][fsGasOilL]) return SendErrorMessage(playerid, "Zao nam je, nema toliko zaliha gasnog ulja.");
	if(PlayerInfo[playerid][xNovac] < fuel*FuelStation[fsID][fsGasOilPrice]) return SendErrorMessage(playerid, "Nemate dovoljno novca, 1 litar gasnog ulja kosta %d$.", FuelStation[fsID][fsGasOilPrice]);}

GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Nadopunjujem gorivo, molim sacekajte",2000,3);
SetTimerEx("Fillup", 10000, 0, "ii", playerid, fuel);
TogglePlayerControllable(playerid, false);
PuniGorivo[playerid] = true;
return 1;}
CMD:odustani(playerid, params[]) {
new x_job[32];
sscanf(params, "s[32]", x_job);
if(!strlen(x_job)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/odustani [opcija]");
	SCM(playerid, BELA, "[Opcije] popravimotor, popraviokvir, popravigume, alarm, immob, brava, neon");
	SCM(playerid, BELA, "[Opcije] color, refill, ticket");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(strcmp(x_job,"popravimotor",true) == 0) { SetPVarInt(playerid, "RepairEOffer", 999); SetPVarInt(playerid, "RepairEPrice", 0); }
else if(strcmp(x_job,"popraviokvir",true) == 0) { SetPVarInt(playerid, "RepairBKOffer", 999); SetPVarInt(playerid, "RepairBKPrice", 0);}
else if(strcmp(x_job,"popravigume",true) == 0) { SetPVarInt(playerid, "RepairTOffer", 999); SetPVarInt(playerid, "RepairTPrice", 0); }
else if(strcmp(x_job,"alarm",true) == 0) { SetPVarInt(playerid, "RepairAOffer", 999); SetPVarInt(playerid, "RepairAPrice", 0); SetPVarInt(playerid, "RepairAvID", -1); SetPVarInt(playerid, "RepairADelovi", 0); }
else if(strcmp(x_job,"immob",true) == 0) { SetPVarInt(playerid, "RepairIOffer", 999); SetPVarInt(playerid, "RepairIPrice", 0); SetPVarInt(playerid, "RepairIvID", -1); SetPVarInt(playerid, "RepairIDelovi", 0); }
else if(strcmp(x_job,"brava",true) == 0) { SetPVarInt(playerid, "RepairLOffer", 999); SetPVarInt(playerid, "RepairLPrice", 0); SetPVarInt(playerid, "RepairLvID", -1); SetPVarInt(playerid, "RepairLDelovi", 0); }
else if(strcmp(x_job,"neon",true) == 0) { SetPVarInt(playerid, "RepairNOffer", 999); SetPVarInt(playerid, "RepairNPrice", 0); SetPVarInt(playerid, "RepairNvID", -1); SetPVarInt(playerid, "RepairNNeon", 0); }
else if(strcmp(x_job,"color",true) == 0) { SetPVarInt(playerid, "ResprayOffer", 999); SetPVarInt(playerid, "ResprayPrice", 0); SetPVarInt(playerid, "ResprayvID", -1); }
else if(strcmp(x_job,"refill",true) == 0) { SetPVarInt(playerid, "RefillOffer", 999); SetPVarInt(playerid, "RefillPrice", 0); SetPVarInt(playerid, "RefillAmount", 0); }
else if(strcmp(x_job,"ticket",true) == 0) { SetPVarInt(playerid, "TicketOffer", 999); SetPVarInt(playerid, "TicketMoney", 0); }
else if(strcmp(x_job,"medicine",true) == 0) { SetPVarInt(playerid, "MedicineOffer", 999); SetPVarInt(playerid, "MedicineMoney", 0); }
else if(strcmp(x_job,"recover",true) == 0) { SetPVarInt(playerid, "RecoverOffer", 999); SetPVarInt(playerid, "RecoverMoney", 0); }
else { return 1; }
SendClientMessageEx(playerid, SVETLOPLAVA, "* Otkazali ste uslugu: %s.", x_job);
return 1;}
CMD:prihvati(playerid, params[]) {
new item[32];
if(sscanf(params, "s[32] ", item)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/prihvati [opcija]");
	SCM(playerid, BELA, "[Opcije] popravimotor, popraviokvir, popravigume, alarm, immob, brava, neon");
	SCM(playerid, BELA, "[Opcije] color, refill, recover, medicine");
	SCM(playerid, BELA, "[Opcije] live, rukovanje, frisk");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
new varstring[200];
if(strcmp(item, "popravimotor",true) == 0) {
	new repairman = GetPVarInt(playerid, "RepairEOffer");
	if(GetPVarInt(playerid, "RepairEOffer")  < 999) {
		if(PlayerInfo[playerid][xNovac] >= GetPVarInt(playerid, "RepairEPrice")) {
			if(IsPlayerInAnyVehicle(playerid)) {
				if(IsPlayerConnected(repairman)) {
					if(PlayerInfo[repairman][xMDelovi] < 3) {
						SCM(repairman, CRVENA, "Nemate delova.");
						SCM(playerid, CRVENA, "Mehanicar nema delova!");
						return 1;
					} else {
						if(IsPlayerInRangeOfPoint(playerid, 30.0, 1965.9033, -1558.8748, 14.7136)) {
							if(IsPlayerNearPlayer(8.0, playerid, repairman)) {
								ac_SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
								antiCheatCS[playerid][VehRepairTime] = 3;
								SendClientMessageEx(playerid, SVETLOPLAVA, "* Vas motor vozila je popravljeno za $%d od strane AutoMehanicara %s.", GetPVarInt(playerid, "RepairEPrice"), ImeIgraca(repairman));
								SendClientMessageEx(repairman, SVETLOPLAVA, "* Popravili ste %s motor vozila. Zaradili ste $%d.", ImeIgraca(playerid), GetPVarInt(playerid, "RepairEPrice"));
								PlayAudioStreamForPlayer(repairman, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");
								if(vCanDrive[GetPlayerVehicleID(playerid)] == 0) {
									vCanDrive[GetPlayerVehicleID(playerid)] = 1;
									TogglePlayerControllable(playerid, true);
								}
								PlayerInfo[repairman][xMehSkill] += 1;
								if(PlayerInfo[repairman][xMehSkill] == 50)
								{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 2, sada imate vise opcija u svom poslu."); }
								else if(PlayerInfo[repairman][xMehSkill] == 100)
								{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 3, sada imate vise opcija u svom poslu."); }
								else if(PlayerInfo[repairman][xMehSkill] == 200)
								{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 4, sada imate vise opcija u svom poslu."); }
								else if(PlayerInfo[repairman][xMehSkill] == 400)
								{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 5, sada imate vise opcija u svom poslu."); }

								DajIgracuNovac(repairman, GetPVarInt(playerid, "RepairEPrice"));
								DajIgracuNovac(playerid, -GetPVarInt(playerid, "RepairEPrice"));
								//BusinessJobMoney(POSAO_MEHANICAR, (GetPVarInt(playerid, "RepairEPrice")/10));
								SetPVarInt(playerid, "RepairEOffer", 999);
								SetPVarInt(playerid, "RepairEPrice", 0);
								PlayerInfo[repairman][xMDelovi] -= 3;
							} else return SendErrorMessage(playerid, "Nisi blizu igraca koji ti je ponudio popravku motora vozila!");
						} else return SCM(playerid, CRVENA, "Auto mozete popravljati samo u mehanicarskoj garazi!");
					}
				}
				return 1;
			}
			return 1;
		} else return SendErrorMessage(playerid, "Nemate dovoljno novca !");
	}
	return 1;}
else if(strcmp(item, "popraviokvir",true) == 0) {
	new repairman = GetPVarInt(playerid, "RepairBKOffer");
	if(GetPVarInt(playerid, "RepairBKOffer")  < 999) {
		if(PlayerInfo[playerid][xNovac] >= GetPVarInt(playerid, "RepairBKPrice")) {
			if(IsPlayerInAnyVehicle(playerid)) {
				if(IsPlayerConnected(repairman)) {
					if(PlayerInfo[repairman][xMDelovi] < 2) {
						SCM(repairman, CRVENA, "Nemate delova.");
						SCM(playerid, CRVENA, "Mehanicar nema delova!");
						return 1;
					} else {
						if(IsPlayerInRangeOfPoint(playerid, 30.0, 1995.5165, -1573.4133, 13.4754)) {
							if(IsPlayerNearPlayer(8.0, playerid, repairman)) {
								new panels, doors, lights, tires, panels1, doors1, lights1;
								GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
								panels1 = encode_panels(0, 0, 0, 0, 0, 0, 0); // fix all panels
								doors1 = encode_doors(0, 0, 0, 0, 0, 0); // fix all doors
								lights1 = encode_lights(0, 0, 0, 0); // fix all lights
								ac_UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels1, doors1, lights1, tires);
								SendClientMessageEx(playerid, SVETLOPLAVA, "* Vas okvir vozila je popravljeno za $%d od strane AutoMehanicara %s.", GetPVarInt(playerid, "RepairBKPrice"), ImeIgraca(repairman));
								SendClientMessageEx(repairman, SVETLOPLAVA, "* Popravili ste %s okvir vozila. Zaradili ste $%d.", ImeIgraca(playerid), GetPVarInt(playerid, "RepairBKPrice"));
								PlayAudioStreamForPlayer(repairman, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");
								PlayerInfo[repairman][xMehSkill] += 1;
								if(PlayerInfo[repairman][xMehSkill] == 50)
								{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 2, sada imate vise opcija u svom poslu."); }
								else if(PlayerInfo[repairman][xMehSkill] == 100)
								{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 3, sada imate vise opcija u svom poslu."); }
								else if(PlayerInfo[repairman][xMehSkill] == 200)
								{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 4, sada imate vise opcija u svom poslu."); }
								else if(PlayerInfo[repairman][xMehSkill] == 400)
								{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 5, sada imate vise opcija u svom poslu."); }

								DajIgracuNovac(repairman, GetPVarInt(playerid, "RepairBKPrice"));
								DajIgracuNovac(playerid, -GetPVarInt(playerid, "RepairBKPrice"));
								//BusinessJobMoney(POSAO_MEHANICAR, (GetPVarInt(playerid, "RepairBKPrice")/10));
								SetPVarInt(playerid, "RepairBKOffer", 999);
								SetPVarInt(playerid, "RepairBKPrice", 0);
								PlayerInfo[repairman][xMDelovi] -= 2;
							} else return SendErrorMessage(playerid, "Nisi blizu igraca koji ti je ponudio popravku okvira vozila!");
						} else return SCM(playerid, CRVENA, "Auto mozete popravljati samo u mehanicarskoj garazi!");
					}
				}
				return 1;
			}
			return 1;
		} else return SendErrorMessage(playerid, "Nemate dovoljno novca !");
	}
	return 1;}
else if(strcmp(item, "popravigume",true) == 0) {
	new repairman = GetPVarInt(playerid, "RepairTOffer");
	if(GetPVarInt(playerid, "RepairTOffer")  < 999) {
		if(PlayerInfo[playerid][xNovac] >= GetPVarInt(playerid, "RepairTPrice")) {
			if(IsPlayerInAnyVehicle(playerid)) {
				if(IsPlayerConnected(repairman)) {
					if(PlayerInfo[repairman][xMDelovi] < 1) {
						SCM(repairman, CRVENA, "Nemate delova.");
						SCM(playerid, CRVENA, "Mehanicar nema delova!");
						return 1;
					} else {
						if(IsPlayerInRangeOfPoint(playerid, 30.0, 1978.4115, -1607.9307, 14.4022)) {
							if(IsPlayerNearPlayer(8.0, playerid, repairman)) {
								new panels, doors, lights, tires, tires1;
								GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
								tires1 = encode_tires(0, 0, 0, 0); // fix all tires
								ac_UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires1);
								SendClientMessageEx(playerid, SVETLOPLAVA, "* Vase gume vozila su popravljene za $%d od strane AutoMehanicara %s.", GetPVarInt(playerid, "RepairTPrice"), ImeIgraca(repairman));
								SendClientMessageEx(repairman, SVETLOPLAVA, "* Popravili ste %s gume vozila. Zaradili ste $%d.", ImeIgraca(playerid), GetPVarInt(playerid, "RepairTPrice"));
								PlayAudioStreamForPlayer(repairman, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");
								PlayerInfo[repairman][xMehSkill] += 1;
								if(PlayerInfo[repairman][xMehSkill] == 50)
								{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 2, sada imate vise opcija u svom poslu."); }
								else if(PlayerInfo[repairman][xMehSkill] == 100)
								{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 3, sada imate vise opcija u svom poslu."); }
								else if(PlayerInfo[repairman][xMehSkill] == 200)
								{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 4, sada imate vise opcija u svom poslu."); }
								else if(PlayerInfo[repairman][xMehSkill] == 400)
								{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 5, sada imate vise opcija u svom poslu."); }

								DajIgracuNovac(repairman, GetPVarInt(playerid, "RepairTPrice"));
								DajIgracuNovac(playerid, -GetPVarInt(playerid, "RepairTPrice"));
								//BusinessJobMoney(POSAO_MEHANICAR, (GetPVarInt(playerid, "RepairTPrice")/10));
								SetPVarInt(playerid, "RepairTOffer", 999);
								SetPVarInt(playerid, "RepairTPrice", 0);
								PlayerInfo[repairman][xMDelovi] -= 1;
							} else return SendErrorMessage(playerid, "Nisi blizu igraca koji ti je ponudio popravku guma vozila!");
						} else return SCM(playerid, CRVENA, "Auto mozete popravljati samo u mehanicarskoj garazi!");
					}
				}
				return 1;
			}
			return 1;
		} else return SendErrorMessage(playerid, "Nemate dovoljno novca !");
	}
	return 1;}
else if(strcmp(item, "alarm",true) == 0) {
	new autoid = GetPVarInt(playerid, "RepairAvID");
	if(!IsPlayerInVehicle(playerid, VehicleInfo[autoid][vID])) return SendErrorMessage(playerid, "Morate biti u svom vozilu!");
	new repairman = GetPVarInt(playerid, "RepairAOffer");
	if(GetPVarInt(playerid, "RepairAOffer")  < 999) {
		if(PlayerInfo[playerid][xNovac] >= GetPVarInt(playerid, "RepairAPrice")) {
			if(IsPlayerInAnyVehicle(playerid)) {
				if(IsPlayerConnected(repairman)) {
					if(PlayerInfo[repairman][xMDelovi] < GetPVarInt(playerid, "RepairADelovi")) {
						SCM(repairman, CRVENA, "Nemate delova.");
						SCM(playerid, CRVENA, "Mehanicar nema delova!");
						return 1;
					} else {
						if(IsPlayerInRangeOfPoint(playerid, 8.0, 1965.9033, -1558.8748, 14.7136)) {
							if(IsPlayerNearPlayer(8.0, playerid, repairman)) {
								if(VehicleInfo[autoid][vUsage] != PRIVATNO_VOZILO) return SendErrorMessage(playerid, "Mozete ugradjivati alarm samo na privatnim vozilima.");
								if(strcmp(ImeIgraca(playerid), VehicleInfo[autoid][vOwner], true) == 0)
								{
									VehicleInfo[autoid][vAlarm] ++;
									SaveVehicle(autoid);

									SendClientMessageEx(playerid, SVETLOPLAVA, "* Vas alarm je unapredjen na visi level za $%d od strane AutoMehanicara %s.", GetPVarInt(playerid, "RepairAPrice"), ImeIgraca(repairman));
									SendClientMessageEx(repairman, SVETLOPLAVA, "* Unapredili ste %s alarm vozila. Zaradili ste $%d.", ImeIgraca(playerid), GetPVarInt(playerid, "RepairAPrice"));
									PlayAudioStreamForPlayer(repairman, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");

									PlayerInfo[repairman][xMehSkill] += 1;
									if(PlayerInfo[repairman][xMehSkill] == 50)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 2, sada imate vise opcija u svom poslu."); }
									else if(PlayerInfo[repairman][xMehSkill] == 100)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 3, sada imate vise opcija u svom poslu."); }
									else if(PlayerInfo[repairman][xMehSkill] == 200)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 4, sada imate vise opcija u svom poslu."); }
									else if(PlayerInfo[repairman][xMehSkill] == 400)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 5, sada imate vise opcija u svom poslu."); }

									PlayerInfo[repairman][xMDelovi] -= GetPVarInt(playerid, "RepairADelovi");
									DajIgracuNovac(repairman, GetPVarInt(playerid, "RepairAPrice"));
									DajIgracuNovac(playerid, -GetPVarInt(playerid, "RepairAPrice"));
									//BusinessJobMoney(POSAO_MEHANICAR, (GetPVarInt(playerid, "RepairAPrice")/10));
									SetPVarInt(playerid, "RepairAOffer", 999);
									SetPVarInt(playerid, "RepairAPrice", 0);
									SetPVarInt(playerid, "RepairAvID", -1);
									SetPVarInt(playerid, "RepairADelovi", 0);
								}
								else return SendErrorMessage(playerid, "Nisi vlasnik ovog vozila!");
							} else return SendErrorMessage(playerid, "Nisi blizu igraca koji ti je ponudio popravku guma vozila!");
						} else return SCM(playerid, CRVENA, "Auto mozete popravljati samo u mehanicarskoj garazi!");
					}
				}
				return 1;
			}
			return 1;
		} else return SendErrorMessage(playerid, "Nemate dovoljno novca !");
	}
	return 1;}
else if(strcmp(item, "immob",true) == 0) {
	new autoid = GetPVarInt(playerid, "RepairIvID");
	if(!IsPlayerInVehicle(playerid, VehicleInfo[autoid][vID])) return SendErrorMessage(playerid, "Morate biti u svom vozilu!");
	new repairman = GetPVarInt(playerid, "RepairIOffer");
	if(GetPVarInt(playerid, "RepairIOffer")  < 999) {
		if(PlayerInfo[playerid][xNovac] >= GetPVarInt(playerid, "RepairIPrice")) {
			if(IsPlayerInAnyVehicle(playerid)) {
				if(IsPlayerConnected(repairman)) {
					if(PlayerInfo[repairman][xMDelovi] < GetPVarInt(playerid, "RepairIDelovi")) {
						SCM(repairman, CRVENA, "Nemate delova.");
						SCM(playerid, CRVENA, "Mehanicar nema delova!");
						return 1;
					} else {
						if(IsPlayerInRangeOfPoint(playerid, 8.0, 1965.9033, -1558.8748, 14.7136)) {
							if(IsPlayerNearPlayer(8.0, playerid, repairman)) {
								if(VehicleInfo[autoid][vUsage] != PRIVATNO_VOZILO) return SendErrorMessage(playerid, "Mozete ugradjivati alarm samo na privatnim vozilima.");
								if(strcmp(ImeIgraca(playerid), VehicleInfo[autoid][vOwner], true) == 0)
								{
									VehicleInfo[autoid][vImobilizator] ++;
									SaveVehicle(autoid);

									SendClientMessageEx(playerid, SVETLOPLAVA, "* Vas imobilizator je unapredjen na visi level za $%d od strane AutoMehanicara %s.", GetPVarInt(playerid, "RepairIPrice"), ImeIgraca(repairman));
									SendClientMessageEx(repairman, SVETLOPLAVA, "* Unapredili ste %s imobilizator vozila. Zaradili ste $%d.", ImeIgraca(playerid), GetPVarInt(playerid, "RepairIPrice"));
									PlayAudioStreamForPlayer(repairman, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");

									PlayerInfo[repairman][xMehSkill] += 1;
									if(PlayerInfo[repairman][xMehSkill] == 50)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 2, sada imate vise opcija u svom poslu."); }
									else if(PlayerInfo[repairman][xMehSkill] == 100)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 3, sada imate vise opcija u svom poslu."); }
									else if(PlayerInfo[repairman][xMehSkill] == 200)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 4, sada imate vise opcija u svom poslu."); }
									else if(PlayerInfo[repairman][xMehSkill] == 400)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 5, sada imate vise opcija u svom poslu."); }

									PlayerInfo[repairman][xMDelovi] -= GetPVarInt(playerid, "RepairIDelovi");
									DajIgracuNovac(repairman, GetPVarInt(playerid, "RepairIPrice"));
									DajIgracuNovac(playerid, -GetPVarInt(playerid, "RepairIPrice"));
									//BusinessJobMoney(POSAO_MEHANICAR, (GetPVarInt(playerid, "RepairIPrice")/10));
									SetPVarInt(playerid, "RepairIOffer", 999);
									SetPVarInt(playerid, "RepairIPrice", 0);
									SetPVarInt(playerid, "RepairIvID", -1);
									SetPVarInt(playerid, "RepairIDelovi", 0);
								}
								else return SendErrorMessage(playerid, "Nisi vlasnik ovog vozila!");
							} else return SendErrorMessage(playerid, "Nisi blizu igraca koji ti je ponudio popravku guma vozila!");
						} else return SCM(playerid, CRVENA, "Auto mozete popravljati samo u mehanicarskoj garazi!");
					}
				}
				return 1;
			}
			return 1;
		} else return SendErrorMessage(playerid, "Nemate dovoljno novca !");
	}
	return 1;}
else if(strcmp(item, "brava",true) == 0) {
	new autoid = GetPVarInt(playerid, "RepairLvID");
	if(!IsPlayerInVehicle(playerid, VehicleInfo[autoid][vID])) return SendErrorMessage(playerid, "Morate biti u svom vozilu!");
	new repairman = GetPVarInt(playerid, "RepairLOffer");
	if(GetPVarInt(playerid, "RepairLOffer")  < 999) {
		if(PlayerInfo[playerid][xNovac] >= GetPVarInt(playerid, "RepairLPrice")) {
			if(IsPlayerInAnyVehicle(playerid)) {
				if(IsPlayerConnected(repairman)) {
					if(PlayerInfo[repairman][xMDelovi] < GetPVarInt(playerid, "RepairLDelovi")) {
						SCM(repairman, CRVENA, "Nemate delova.");
						SCM(playerid, CRVENA, "Mehanicar nema delova!");
						return 1;
					} else {
						if(IsPlayerInRangeOfPoint(playerid, 8.0, 1965.9033, -1558.8748, 14.7136)) {
							if(IsPlayerNearPlayer(8.0, playerid, repairman)) {
								if(VehicleInfo[autoid][vUsage] != PRIVATNO_VOZILO) return SendErrorMessage(playerid, "Mozete ugradjivati bravu samo na privatnim vozilima.");
								if(strcmp(ImeIgraca(playerid), VehicleInfo[autoid][vOwner], true) == 0)
								{
									VehicleInfo[autoid][vLock] ++;
									SaveVehicle(autoid);

									SendClientMessageEx(playerid, SVETLOPLAVA, "* Vasa brava je unapredjena na visi level za $%d od strane AutoMehanicara %s.", GetPVarInt(playerid, "RepairLPrice"), ImeIgraca(repairman));
									SendClientMessageEx(repairman, SVETLOPLAVA, "* Unapredili ste %s bravu vozila. Zaradili ste $%d.", ImeIgraca(playerid), GetPVarInt(playerid, "RepairLPrice"));
									PlayAudioStreamForPlayer(repairman, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");

									PlayerInfo[repairman][xMehSkill] += 1;
									if(PlayerInfo[repairman][xMehSkill] == 50)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 2, sada imate vise opcija u svom poslu."); }
									else if(PlayerInfo[repairman][xMehSkill] == 100)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 3, sada imate vise opcija u svom poslu."); }
									else if(PlayerInfo[repairman][xMehSkill] == 200)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 4, sada imate vise opcija u svom poslu."); }
									else if(PlayerInfo[repairman][xMehSkill] == 400)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 5, sada imate vise opcija u svom poslu."); }

									PlayerInfo[repairman][xMDelovi] -= GetPVarInt(playerid, "RepairLDelovi");
									DajIgracuNovac(repairman, GetPVarInt(playerid, "RepairLPrice"));
									DajIgracuNovac(playerid, -GetPVarInt(playerid, "RepairLPrice"));
									//BusinessJobMoney(POSAO_MEHANICAR, (GetPVarInt(playerid, "RepairLPrice")/10));
									SetPVarInt(playerid, "RepairLOffer", 999);
									SetPVarInt(playerid, "RepairLPrice", 0);
									SetPVarInt(playerid, "RepairLvID", -1);
									SetPVarInt(playerid, "RepairLDelovi", 0);
								}
								else return SendErrorMessage(playerid, "Nisi vlasnik ovog vozila!");
							} else return SendErrorMessage(playerid, "Nisi blizu igraca koji ti je ponudio popravku guma vozila!");
						} else return SCM(playerid, CRVENA, "Auto mozete popravljati samo u mehanicarskoj garazi!");
					}
				}
				return 1;
			}
			return 1;
		} else return SendErrorMessage(playerid, "Nemate dovoljno novca !");
	}
	return 1;}
else if(strcmp(item, "color",true) == 0) {
	new autoid = GetPVarInt(playerid, "ResprayvID");
	if(!IsPlayerInVehicle(playerid, VehicleInfo[autoid][vID])) return SendErrorMessage(playerid, "Morate biti u svom vozilu!");
	new repairman = GetPVarInt(playerid, "ResprayOffer");
	if(GetPVarInt(playerid, "ResprayOffer")  < 999) {
		if(PlayerInfo[playerid][xNovac] >= GetPVarInt(playerid, "ResprayPrice")) {
			if(IsPlayerInAnyVehicle(playerid)) {
				if(IsPlayerConnected(repairman)) {
					if(PlayerInfo[repairman][xMDelovi] < 5) {
						SCM(repairman, CRVENA, "Nemate delova.");
						SCM(playerid, CRVENA, "Mehanicar nema delova!");
						return 1;
					} else {
						if(IsPlayerInRangeOfPoint(playerid, 15.0, 1978.9244, -1585.0405, 13.3126)) {
							if(IsPlayerNearPlayer(8.0, playerid, repairman)) {
								if(VehicleInfo[autoid][vUsage] != PRIVATNO_VOZILO) return SendErrorMessage(playerid, "Mozete farbati samo privatna vozila.");
								if(strcmp(ImeIgraca(playerid), VehicleInfo[autoid][vOwner], true) == 0)
								{
									SetPVarInt(repairman, "ResprayDozvola", playerid);
									SendClientMessageEx(playerid, SVETLOPLAVA, "* Prihvatili ste farbanje vozila $%d od strane AutoMehanicara %s.", GetPVarInt(playerid, "ResprayPrice"), ImeIgraca(repairman));
									SendClientMessageEx(repairman, SVETLOPLAVA, "* Prihvatio je %s farbanje vozila. Mozes poceti sprajati vozilo.", ImeIgraca(playerid));
								}
								else return SendErrorMessage(playerid, "Nisi vlasnik ovog vozila!");
							} else return SendErrorMessage(playerid, "Nisi blizu igraca koji ti je ponudio popravku guma vozila!");
						} else return SCM(playerid, CRVENA, "Auto mozete popravljati samo u mehanicarskoj garazi!");
					}
				}
				return 1;
			}
			return 1;
		} else return SendErrorMessage(playerid, "Nemate dovoljno novca !");
	}
	return 1;}
else if(strcmp(item, "neon",true) == 0) {
	new autoid = GetPVarInt(playerid, "RepairNvID");
	if(!IsPlayerInVehicle(playerid, VehicleInfo[autoid][vID])) return SendErrorMessage(playerid, "Morate biti u svom vozilu!");
	new repairman = GetPVarInt(playerid, "RepairNOffer");
	if(GetPVarInt(playerid, "RepairNOffer")  < 999) {
		if(PlayerInfo[playerid][xNovac] >= GetPVarInt(playerid, "RepairNPrice")) {
			if(IsPlayerInAnyVehicle(playerid)) {
				if(IsPlayerConnected(repairman)) {
					if(PlayerInfo[repairman][xMDelovi] < 40) {
						SCM(repairman, CRVENA, "Nemate delova.");
						SCM(playerid, CRVENA, "Mehanicar nema delova!");
						return 1;
					} else {
						if(IsPlayerInRangeOfPoint(playerid, 8.0, 1995.5165, -1573.4133, 13.4754)) {
							if(IsPlayerNearPlayer(8.0, playerid, repairman)) {
								if(VehicleInfo[autoid][vUsage] != PRIVATNO_VOZILO) return SendErrorMessage(playerid, "Mozete ugradjivati neonku samo na privatnim vozilima.");
								if(strcmp(ImeIgraca(playerid), VehicleInfo[autoid][vOwner], true) == 0)
								{
									if(GetPVarInt(playerid, "RepairNNeon") == 1)
									{
										VehicleInfo[autoid][vNeon] = 18648;
									}
									else if(GetPVarInt(playerid, "RepairNNeon") == 2)
									{
										VehicleInfo[autoid][vNeon] = 18647;
									}
									else if(GetPVarInt(playerid, "RepairNNeon") == 3)
									{
										VehicleInfo[autoid][vNeon] = 18649;
									}
									else if(GetPVarInt(playerid, "RepairNNeon") == 4)
									{
										VehicleInfo[autoid][vNeon] = 18652;
									}
									else if(GetPVarInt(playerid, "RepairNNeon") == 5)
									{
										VehicleInfo[autoid][vNeon] = 18651;
									}
									else if(GetPVarInt(playerid, "RepairNNeon") == 6)
									{
										VehicleInfo[autoid][vNeon] = 18650;
									}
									NeonObject1[GetPlayerVehicleID(playerid)] = CreateDynamicObject(VehicleInfo[autoid][vNeon], 0, 0, 1500, 0, 0, 0);
									NeonObject2[GetPlayerVehicleID(playerid)] = CreateDynamicObject(VehicleInfo[autoid][vNeon], 0, 0, 1500, 0, 0, 0);
									AttachDynamicObjectToVehicle(NeonObject1[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
									AttachDynamicObjectToVehicle(NeonObject2[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
									Neon[GetPlayerVehicleID(playerid)] = 1;
									SaveVehicle(autoid);

									SendClientMessageEx(playerid, SVETLOPLAVA, "* Neonka vam je ugradjena za $%d od strane AutoMehanicara %s.", GetPVarInt(playerid, "RepairNPrice"), ImeIgraca(repairman));
									SendClientMessageEx(repairman, SVETLOPLAVA, "* Ugradili ste %s neonku vozila. Zaradili ste $%d.", ImeIgraca(playerid), GetPVarInt(playerid, "RepairNPrice"));
									PlayAudioStreamForPlayer(repairman, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");

									PlayerInfo[repairman][xMehSkill] += 1;
									if(PlayerInfo[repairman][xMehSkill] == 50)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 2, sada imate vise opcija u svom poslu."); }
									else if(PlayerInfo[repairman][xMehSkill] == 100)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 3, sada imate vise opcija u svom poslu."); }
									else if(PlayerInfo[repairman][xMehSkill] == 200)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 4, sada imate vise opcija u svom poslu."); }
									else if(PlayerInfo[repairman][xMehSkill] == 400)
									{ SCM(repairman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 5, sada imate vise opcija u svom poslu."); }

									PlayerInfo[repairman][xMDelovi] -= 40;
									DajIgracuNovac(repairman, GetPVarInt(playerid, "RepairNPrice"));
									DajIgracuNovac(playerid, -GetPVarInt(playerid, "RepairNPrice"));
									//BusinessJobMoney(POSAO_MEHANICAR, (GetPVarInt(playerid, "RepairNPrice")/10));
									SetPVarInt(playerid, "RepairNOffer", 999);
									SetPVarInt(playerid, "RepairNPrice", 0);
									SetPVarInt(playerid, "RepairNvID", -1);
									SetPVarInt(playerid, "RepairNNeon", 0);
								}
								else return SendErrorMessage(playerid, "Nisi vlasnik ovog vozila!");
							} else return SendErrorMessage(playerid, "Nisi blizu igraca koji ti je ponudio popravku guma vozila!");
						} else return SCM(playerid, CRVENA, "Auto mozete popravljati samo u mehanicarskoj garazi!");
					}
				}
				return 1;
			}
			return 1;
		} else return SendErrorMessage(playerid, "Nemate dovoljno novca !");
	}
	return 1;}
else if(strcmp(item, "refill",true) == 0) {
	new refillman = GetPVarInt(playerid, "RefillOffer");
	if(GetPVarInt(playerid, "RefillOffer")  < 999) {
		if(IsPlayerConnected(refillman)) {
			if(PlayerInfo[playerid][xNovac] >= GetPVarInt(playerid, "RefillPrice")) {
				new car = GetPlayerVehicleID(playerid);
				new fuel = GetPVarInt(playerid, "RefillAmount");

				PlayerInfo[refillman][xMehSkill] += 1;
				if(PlayerInfo[refillman][xMehSkill] == 50)
				{ SCM(refillman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 2, sada imate vise opcija u svom poslu."); }
				else if(PlayerInfo[refillman][xMehSkill] == 100)
				{ SCM(refillman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 3, sada imate vise opcija u svom poslu."); }
				else if(PlayerInfo[refillman][xMehSkill] == 200)
				{ SCM(refillman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 4, sada imate vise opcija u svom poslu."); }
				else if(PlayerInfo[refillman][xMehSkill] == 400)
				{ SCM(refillman, ZUTA, "* Vasa vestina kao Auto Mehanicar sada je Level 5, sada imate vise opcija u svom poslu."); }

				SendClientMessageEx(playerid, SVETLOPLAVA, "* Napunili ste svoje auto %d%, za $%d od strane Mehanicara %s.",fuel, GetPVarInt(playerid, "RefillPrice"), ImeIgraca(refillman));
				SendClientMessageEx(refillman, SVETLOPLAVA, "* Napunili ste %s auto sa %d%. Zaradili ste $%d.", ImeIgraca(playerid), fuel, GetPVarInt(playerid, "RefillPrice"));
				PlayAudioStreamForPlayer(refillman, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");
				DajIgracuNovac(refillman, GetPVarInt(playerid, "RefillPrice"));
				DajIgracuNovac(playerid, -GetPVarInt(playerid, "RefillPrice"));
				//BusinessJobMoney(POSAO_MEHANICAR, (GetPVarInt(playerid, "RefillPrice")/10));
				SetPVarInt(refillman, "CanisterFuel", (GetPVarInt(refillman, "CanisterFuel") - GetPVarInt(playerid, "RefillAmount")));

				Fuel[car] += fuel;
				SetPVarInt(playerid, "RefillOffer", 999);
				SetPVarInt(playerid, "RefillPrice", 0);
				SetPVarInt(playerid, "RefillAmount", 0);
				return 1;
			} else return SendErrorMessage(playerid, "Nemate dovoljno novca !");
		}
		return 1;
	} else return SendErrorMessage(playerid, "Nitko vam nije ponudio da vam napuni auto !");}
else if(strcmp(item, "witness",true) == 0) {
	if(MarryWitnessOffer[playerid] < 999) {
		if(IsPlayerConnected(MarryWitnessOffer[playerid])) {
			if(IsPlayerNearPlayer(10.0, playerid, MarryWitnessOffer[playerid])) {
				format(varstring, sizeof(varstring), "* Prihvatili ste ponudu osobe %s da budete svedok na vencanju.", ImeIgraca(MarryWitnessOffer[playerid]));
				SCM(playerid, SVETLOPLAVA, varstring);
				format(varstring, sizeof(varstring), "* %s je prihvatio vasu ponudu da bude svedok na vasem vencanju.", ImeIgraca(playerid));
				SCM(MarryWitnessOffer[playerid], SVETLOPLAVA, varstring);
				MarryWitness[MarryWitnessOffer[playerid]] = playerid;
				MarryWitnessOffer[playerid] = 999;
			}
			else return SendErrorMessage(playerid, "Osoba se ne nalazi u vasoj blizini!");
		}
	}
	else return SendErrorMessage(playerid, "Niko nije zatvrazio da budete svedok na vencanju!");}
else if(strcmp(item, "marriage",true) == 0) {
	if(ProposeOffer[playerid] < 999) {
		if(!IsPlayerInRangeOfPoint(playerid, 10.0, 725.3050, -1597.1079, 3.4530)) return SendErrorMessage(playerid, "Ne nalazite se na mestu za vencanje.");
		if(IsPlayerConnected(ProposeOffer[playerid])) {
			if(IsPlayerNearPlayer(10.0, playerid, ProposeOffer[playerid])) {
				if(MarryWitness[ProposeOffer[playerid]] == 999) return SendErrorMessage(playerid, "Isprosilac nema svedoka za vencanje.");
				if(IsPlayerConnected(MarryWitness[ProposeOffer[playerid]])) {
					if(IsPlayerNearPlayer(12.0, ProposeOffer[playerid], MarryWitness[ProposeOffer[playerid]])) {
						format(varstring, sizeof(varstring), "* Prihvatili ste ponudu osobe %s da bude vas muz.", ImeIgraca(ProposeOffer[playerid]));
						SCM(playerid, SVETLOPLAVA, varstring);
						format(varstring, sizeof(varstring), "* %s je prihvatila ponudu da bude vasa supruga.", ImeIgraca(playerid));
						SCM(ProposeOffer[playerid], SVETLOPLAVA, varstring);
						format(varstring, sizeof(varstring), "Maticar: %s da li vi uzimate %s za vaseg voljenog muza? (Koristite 'da', ukoliko pristajete!)", ImeIgraca(playerid), ImeIgraca(ProposeOffer[playerid]));
						SCM(playerid, BELA, varstring);
						MarriageCeremoney{ playerid } = 1;
						ProposedTo[ProposeOffer[playerid]] = playerid;
						GotProposedBy[playerid] = ProposeOffer[playerid];
						MarryWitness[ProposeOffer[playerid]] = 999;
						ProposeOffer[playerid] = 999;
					}
					else return SendErrorMessage(playerid, "Svedok vencanja nije u blizini vaseg buduceg supruga.");
				}
			}
			else return SendErrorMessage(playerid, "Osoba se ne nalazi u vasoj blizini!");
		}
	}
	else return SendErrorMessage(playerid, "Niko vas nije zaprosio.");}
else if(strcmp(item, "divorce", true) == 0) {
	if(DivorceOffer[playerid] < 999) {
		if(IsPlayerConnected(DivorceOffer[playerid])) {
			if(IsPlayerNearPlayer(10.0, playerid, DivorceOffer[playerid])) {
				format(varstring, sizeof(varstring), "* Prihvatili ste poziv %s da budete svedok razvoda.", ImeIgraca(DivorceOffer[playerid]));
				SCM(playerid, SVETLOPLAVA, varstring);
				format(varstring, sizeof(varstring), "* %s je prihvatio da bude svedok razvoda.", ImeIgraca(playerid));
				SCM(DivorceOffer[playerid], SVETLOPLAVA, varstring);
				strmid(PlayerInfo[playerid][xMarriedTo], "Niko", 0, strlen("Niko"), 24);
				PlayerInfo[playerid][xMarried] = false;
				strmid(PlayerInfo[DivorceOffer[playerid]][xMarriedTo], "Niko", 0, strlen("Niko"), 24);
				PlayerInfo[DivorceOffer[playerid]][xMarried] = false;
				ProposeOffer[playerid] = 999;
			} else return SendErrorMessage(playerid, "Osoba koja vam je poslala formulare nije u vasoj blizini!");
		}
	} else return SendErrorMessage(playerid, "Niko vam nije poslao formulare!");}
else if(strcmp(item, "ticket",true) == 0) {
	new pandur = GetPVarInt(playerid, "TicketOffer");
	if(GetPVarInt(playerid, "TicketOffer") < 999) {
		if(IsPlayerConnected(pandur)) {
			if(IsPlayerNearPlayer(5.0, playerid, pandur)) {
				if(PlayerInfo[playerid][xNovac] >= GetPVarInt(playerid, "TicketMoney")) {
					SendClientMessageEx(playerid, SVETLOPLAVA, "* Platili ste kaznu u iznosu od $%d policajcu %s.", GetPVarInt(playerid, "TicketMoney"), ImeIgraca(pandur));
					SendClientMessageEx(pandur, SVETLOPLAVA, "* %s je platio vasu kaznu $%d koja ide u sef policije.", ImeIgraca(playerid), GetPVarInt(playerid, "TicketMoney"));
					DajIgracuNovac(playerid, - GetPVarInt(playerid, "TicketMoney"));
					DajIgracuNovac(pandur, GetPVarInt(playerid, "TicketMoney"));
					PlayerInfo[pandur][xPDStatsTicket] += 1;
					PlayerInfo[pandur][xPDStatsTicketMoney] += GetPVarInt(playerid, "TicketMoney");
					SetPVarInt(playerid, "TicketOffer", 999);
					SetPVarInt(playerid, "TicketMoney", 0);
				} else return SendErrorMessage(playerid, "Nemas dovoljno novca !");
			} else return SCM(playerid, CRVENA, "Policajac nije dovoljno blizu vas !");
		}
	} else return SendErrorMessage(playerid, "Nitko vam nije dao tiket !");}
else if(strcmp(item,"recover",true) == 0) {
	if(GetPVarInt(playerid, "RecoverOffer") < 999) {
		if(IsPlayerConnected(GetPVarInt(playerid, "RecoverOffer"))) {
			if(IsPlayerNearPlayer(5.0, playerid, GetPVarInt(playerid, "RecoverOffer"))) {
				if(PlayerInfo[playerid][xNovac] >= GetPVarInt(playerid, "RecoverMoney")) {
					format(varstring, sizeof(varstring), "* Platio si $%d za troskove lecenja doktoru %s.", GetPVarInt(playerid, "RecoverMoney"), ImeIgraca(GetPVarInt(playerid, "RecoverOffer")));
					SCM(playerid, SVETLOPLAVA, varstring);
					format(varstring, sizeof(varstring), "* %s je platio troskove lecenja u iznosu od $%d koji idu u sef bolnice.", ImeIgraca(playerid), GetPVarInt(playerid, "RecoverMoney"));
					SCM(GetPVarInt(playerid, "RecoverOffer"), SVETLOPLAVA, varstring);
					DajIgracuNovac(playerid, - GetPVarInt(playerid, "RecoverMoney"));
					DajIgracuNovac(GetPVarInt(playerid, "RecoverOffer"), GetPVarInt(playerid, "RecoverMoney"));
					SetPVarInt(playerid, "RecoverOffer", 999);
					SetPVarInt(playerid, "RecoverMoney", 0);
					Fusion_SetPlayerHealth(playerid, 100);
					TogglePlayerControllable(playerid, true);
					//PovredjenIgrac[playerid] = false;
					PlayerInfo[playerid][xUbijen] = 0;
				} else return SendErrorMessage(playerid, "Nemas toliko novaca!");
			} else return SendErrorMessage(playerid, "Doktor nije blizu tebe !");
		}
	} else return SendErrorMessage(playerid, "Niko ti nije ponudio lecenje !");}
else if(strcmp(item,"medicine",true) == 0) {
	if(GetPVarInt(playerid, "MedicineOffer") < 999) {
		if(IsPlayerConnected(GetPVarInt(playerid, "MedicineOffer"))) {
			if(IsPlayerNearPlayer(8.0, playerid, GetPVarInt(playerid, "MedicineOffer"))) {
				if(PlayerInfo[playerid][xNovac] >= GetPVarInt(playerid, "MedicineMoney")) {
					format(varstring, sizeof(varstring), "* Prihvatili ste lek od Doktora %s i sada imate 100hp-a.", ImeIgraca(GetPVarInt(playerid, "MedicineOffer")));
					SCM(playerid, SVETLOPLAVA, varstring);
					format(varstring, sizeof(varstring), "* %s je prihvatio vas lek i zaradili ste $%d koji idu u sef bolnice.", ImeIgraca(playerid), GetPVarInt(playerid, "MedicineMoney"));
					SCM(GetPVarInt(playerid, "MedicineOffer"), SVETLOPLAVA, varstring);
					DajIgracuNovac(playerid, - GetPVarInt(playerid, "MedicineMoney"));
					DajIgracuNovac(GetPVarInt(playerid, "MedicineOffer"), GetPVarInt(playerid, "MedicineMoney"));
					Fusion_SetPlayerHealth(playerid, 100);
					SetPVarInt(playerid, "MedicineOffer", 999);
					SetPVarInt(playerid, "MedicineMoney", 0);
				} else return SendErrorMessage(playerid, "Nemas toliko novaca! !");
			} else return SendErrorMessage(playerid, "Taj igrac nije u blizini vas !");
		}
	} else return SendErrorMessage(playerid, "Niko vam nije ponudio lek !");}
else if(strcmp(item,"live",true) == 0) {
	if(GetPVarInt(playerid, "LiveOffer") < 999) {
		if(IsPlayerConnected(GetPVarInt(playerid, "LiveOffer"))) {
			if(IsPlayerNearPlayer(5.0, playerid, GetPVarInt(playerid, "LiveOffer"))) {
				SendClientMessage(playerid, 0x33CCFFAA, "* Zamrznuti ste dok razgovor uzivo ne zavrsi.");
				SendClientMessage(GetPVarInt(playerid, "LiveOffer"), 0x33CCFFAA, "* Zamrznuti ste dok razgovor uzivo ne zavrsi (koristite /live da zavrsite).");
				TogglePlayerControllable(playerid, false);
				TogglePlayerControllable(GetPVarInt(playerid, "LiveOffer"), 0);
				SetPVarInt(playerid, "TalkingLive", GetPVarInt(playerid, "LiveOffer"));
				SetPVarInt(GetPVarInt(playerid, "LiveOffer"), "TalkingLive", playerid);
				SetPVarInt(playerid, "LiveOffer", 999);
			} else return SendErrorMessage(playerid, "Predaleko ste od Novinara !");
		}
	} else return SendErrorMessage(playerid, "Nitko vam nije ponudio razgovor uzivo !");}
else if(strcmp(item, "rukovanje", true) == 0) {
	if(GetPVarInt(playerid, "ShakeOffer") < 999) {
		if(IsPlayerConnected(GetPVarInt(playerid, "ShakeOffer"))) {
			if(IsPlayerNearPlayer(3.0, playerid, GetPVarInt(playerid, "ShakeOffer"))) {
				switch(GetPVarInt(playerid, "ShakeStyle"))
				{
					case 1:
					{
						ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0, 1);
						ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","hndshkfa_swt",4.0,0,0,0,0,0, 1);
					}
					case 2:
					{
						ApplyAnimation(playerid,"GANGS","hndshkaa",4.0,0,0,0,0,0, 1);
						ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","hndshkaa",4.0,0,0,0,0,0, 1);
					}
					case 3:
					{
						ApplyAnimation(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0, 1);
						ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","hndshkba",4.0,0,0,0,0,0, 1);
					}
					case 4:
					{
						ApplyAnimation(playerid,"GANGS","hndshkca",4.0,0,0,0,0,0, 1);
						ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","hndshkca",4.0,0,0,0,0,0, 1);
					}
					case 5:
					{
						ApplyAnimation(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0, 1);
						ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","hndshkda",4.0,0,0,0,0,0, 1);
					}
					case 6:
					{
						ApplyAnimation(playerid,"GANGS","hndshkea",4.0,0,0,0,0,0, 1);
						ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","hndshkea",4.0,0,0,0,0,0, 1);
					}
					case 7:
					{
						ApplyAnimation(playerid,"GANGS","hndshkfa",4.0,0,0,0,0,0, 1);
						ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","hndshkfa",4.0,0,0,0,0,0, 1);
					}
					case 8:
					{
						ApplyAnimation(playerid,"GANGS","prtial_hndshk_01",4.0,0,0,0,0,0, 1);
						ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","prtial_hndshk_01",4.0,0,0,0,0,0, 1);
					}
					case 9:
					{
						ApplyAnimation(playerid,"GANGS","prtial_hndshk_biz_01",4.0,0,0,0,0,0, 1);
						ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","prtial_hndshk_biz_01",4.0,0,0,0,0,0, 1);
					}
				}
				format(varstring, sizeof(varstring), "* Prihvatio si %s-ov zahtev za rukovanje.", ImeIgraca(GetPVarInt(playerid, "ShakeOffer")));
				SendClientMessage(playerid, SVETLOPLAVA, varstring);
				format(varstring, sizeof(varstring), "* %s je prihvatio tvoj zahtev za rukovanjem.", ImeIgraca(playerid));
				SendClientMessage(GetPVarInt(playerid, "ShakeOffer"), SVETLOPLAVA, varstring);
				SetPVarInt(playerid, "ShakeOffer", 0);
				SetPVarInt(GetPVarInt(playerid, "ShakeOffer"), "ShakeOffer", 0);
			} else return SendErrorMessage(playerid, "Igrac koji ti je ponudio rukovanje nije blizu tebe !");
		}
	} else return SendErrorMessage(playerid, "Nitko ti nije ponudio rukovanje !");}
else {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/prihvati [opcija]");
	SCM(playerid, BELA, "[Opcije] popravimotor, popraviokvir, popravigume, alarm, immob, brava, neon");
	SCM(playerid, BELA, "[Opcije] color, refill, recover, medicine");
	SCM(playerid, BELA, "[Opcije] live, rukovanje, frisk");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");}
return 1;}

CMD:takejob(playerid) {

if(PlayerInfo[playerid][xPosao] == 0) {

	if(GetPlayerState(playerid) == 1) {

		if(ChosenJob[playerid] != 0) {

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, jobsInfos[ChosenJob[playerid]-1][jPos][0], jobsInfos[ChosenJob[playerid]-1][jPos][1], jobsInfos[ChosenJob[playerid]-1][jPos][2])) return SendErrorMessage(playerid, "Morate biti na pickupu da bi uzeli posao!");


			if(ChosenJob[playerid] == POSAO_PREVOZNIK) {
			if(PlayerInfo[playerid][xKamionskaC1] == 0) return SendErrorMessage(playerid, "Ne posedujes dozvolu za kombije. ");
			if(PlayerInfo[playerid][xKamionskaC2] == 0) return SendErrorMessage(playerid, "Ne posedujes dozvolu za kamione. ");
			if(PlayerInfo[playerid][xKamionskaC3] == 0) return SendErrorMessage(playerid, "Ne posedujes dozvolu za kamione sa prikolicom. ");
			if(PlayerInfo[playerid][xVozacka] == 0) return SendErrorMessage(playerid, "Ne posedujes vozacku dozvolu. ");
			if(PlayerInfo[playerid][xOsnovna] != 3) return SendErrorMessage(playerid, "Moras da zavrsis osnovnu i srednju skolu.");
			if(PlayerInfo[playerid][xSrednja] != 6) return SendErrorMessage(playerid, "Moras da zavrsis srednju skolu.");
			SPD(playerid, dialog_EMPTY, DSMSG, "Posao Prevoznik",
				""col_job"Cestitamo! Uspesno ste se zaposlili kao Prevoznik!\n\n" \
				""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
				""col_job"Komande posla: "col_white"/prevozdrveca /prevozsljunka /uniforma /prekiniposao", "U redu", "");
			}
			else if(ChosenJob[playerid] == POSAO_KOSAC) {
				if(PlayerInfo[playerid][xOsnovna] != 3) return SendErrorMessage(playerid, "Moras da zavrsis osnovnu skolu.");
				SPD(playerid, dialog_EMPTY, DSMSG, "Posao Kosac trave",
					""col_job"Cestitamo! Uspesno ste se zaposlili kao Kosac trave!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white"/posao /uniforma /prekiniposao", "U redu", "");
			}
			else if(ChosenJob[playerid] == POSAO_KOMUNALAC) {
				SendErrorMessage(playerid, "Ovaj posao je trenutno onemogucen.");
				return 1;
			}
			else if(ChosenJob[playerid] == POSAO_PILOT) {
				if(PlayerInfo[playerid][xLetelica] == 0) return SendErrorMessage(playerid, "Ne posedujes dozvolu za avion/helic.");
				if(PlayerInfo[playerid][xOsnovna] != 3) return SendErrorMessage(playerid, "Moras da zavrsis osnovnu i srednju skolu.");
				if(PlayerInfo[playerid][xSrednja] != 6) return SendErrorMessage(playerid, "Moras da zavrsis srednju skolu i fakultet.");
				if(PlayerInfo[playerid][xFakultet] != 15) return SendErrorMessage(playerid, "Moras da zavrsis fakultet.");
				SPD(playerid, dialog_EMPTY, DSMSG, "Posao Pilot",
					""col_job"Cestitamo! Uspesno ste se zaposlili kao Pilot!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white"/posao /uniforma /prekiniposao", "U redu", "");
			}
			else if(ChosenJob[playerid] == POSAO_FARMER) {
				if(PlayerInfo[playerid][xOsnovna] != 3) return SendErrorMessage(playerid, "Moras da zavrsis osnovnu skolu.");
				SPD(playerid, dialog_EMPTY, DSMSG, "Posao Farmer",
					""col_job"Cestitamo! Uspesno ste se zaposlili kao Farmer!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white"/uzmisemenke /uzmikantu /muzikrave /uniforma /prekiniposao", "U redu", "");
			}
			else if(ChosenJob[playerid] == POSAO_BUSVOZAC) {
				if(PlayerInfo[playerid][xOsnovna] != 3) return SendErrorMessage(playerid, "Moras da zavrsis osnovnu i srednju skolu.");
				if(PlayerInfo[playerid][xSrednja] != 6) return SendErrorMessage(playerid, "Moras da zavrsis srednju skolu.");
				SPD(playerid, dialog_EMPTY, DSMSG, "Posao Bus Vozac",
					""col_job"Cestitamo! Uspesno ste se zaposlili kao Bus vozac!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white"/posao /uniforma /prekiniposao", "U redu", "");
			}
			else if(ChosenJob[playerid] == POSAO_RUDAR) {
				if(PlayerInfo[playerid][xOsnovna] != 3) return SendErrorMessage(playerid, "Moras da zavrsis osnovnu i srednju skolu.");
				if(PlayerInfo[playerid][xSrednja] != 6) return SendErrorMessage(playerid, "Moras da zavrsis srednju skolu.");
				SPD(playerid, dialog_EMPTY, DSMSG, "Posao Rudar",
					""col_job"Cestitamo! Uspesno ste se zaposlili kao Rudar!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white"/posao /uniforma /prekiniposao", "U redu", "");
			}
			else if(ChosenJob[playerid] == POSAO_PREVOZNOVCA) {
				if(PlayerInfo[playerid][xOsnovna] != 3) return SendErrorMessage(playerid, "Moras da zavrsis osnovnu i srednju skolu.");
				if(PlayerInfo[playerid][xSrednja] != 6) return SendErrorMessage(playerid, "Moras da zavrsis srednju skolu i fakultet.");
				if(PlayerInfo[playerid][xFakultet] != 15) return SendErrorMessage(playerid, "Moras da zavrsis fakultet.");
				SPD(playerid, dialog_EMPTY, DSMSG, "Posao Prevoznik Novca",
					""col_job"Cestitamo! Uspesno ste se zaposlili kao Prevoznik Novca!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white"/posao /uniforma /prekiniposao", "U redu", "");
			}
			else if(ChosenJob[playerid] == POSAO_PNAMESTAJA) {
				if(PlayerInfo[playerid][xOsnovna] != 3) return SendErrorMessage(playerid, "Moras da zavrsis osnovnu i srednju skolu.");
				if(PlayerInfo[playerid][xSrednja] != 6) return SendErrorMessage(playerid, "Moras da zavrsis srednju skolu.");
				SPD(playerid, dialog_EMPTY, DSMSG, "Proizvodjac Namestaja",
					""col_job"Cestitamo! Uspesno ste se zaposlili kao Proizvodjac Namestaja!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white"/posao /uniforma /ostavidrvo /uzmidrvo", "U redu", "");
			}
			else if(ChosenJob[playerid] == POSAO_PEPSI) {
				if(PlayerInfo[playerid][xOsnovna] != 3) return SendErrorMessage(playerid, "Moras da zavrsis osnovnu skolu.");
				SPD(playerid, dialog_EMPTY, DSMSG, "Pepsi Dostavljac",
					""col_job"Cestitamo! Uspesno ste se zaposlili kao Pepsi Dostavljac!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white"/uzmikutiju /uniforma", "U redu", "");
			}
			else if(ChosenJob[playerid] == POSAO_VOCAR) {
				SPD(playerid, dialog_EMPTY, DSMSG, "Posao Vocar",
					""col_job"Cestitamo! Uspesno ste se zaposlili kao Vocar!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white"/posao /uniforma /prekiniposao", "U redu", "");
			}
			else if(ChosenJob[playerid] == POSAO_PPROZORA) {
				SPD(playerid, dialog_EMPTY, DSMSG, "Perac Prozora",
					""col_job"Cestitamo! Uspesno ste se zaposlili kao Perac Prozora!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white"/posao /uniforma /prekiniposao", "U redu", "");
			}
			else if(ChosenJob[playerid] == POSAO_DRVOSECA) {
				if(PlayerInfo[playerid][xOsnovna] != 3) return SendErrorMessage(playerid, "Moras da zavrsis osnovnu i srednju skolu.");
				if(PlayerInfo[playerid][xSrednja] != 6) return SendErrorMessage(playerid, "Moras da zavrsis srednju skolu.");
				SPD(playerid, dialog_EMPTY, DSMSG, "Drvoseca",
					""col_job"Cestitamo! Uspesno ste se zaposlili kao Drvoseca!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white"/posao /uniforma /prekiniposao", "U redu", "");
			}
			PlayerInfo[playerid][xPosao] = ChosenJob[playerid];
			PlayerInfo[playerid][xUgovor] = 0;
			SavePlayer(playerid);

		} else return SendErrorMessage(playerid, "Morate biti na pickupu posla.");

	} else return SendErrorMessage(playerid, "Ne smete biti u vozilu!");

} else return SendErrorMessage(playerid, "Vec ste zaposleni, morate dati otkaz.");

return (true);}
CMD:otkaz(playerid, params[]) {
if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1470.9434,-1789.0674,-20.2831)) return SendErrorMessage(playerid, "Morate biti kod saltera u Opstini!");
if(PlayerInfo[playerid][xPosao] == 0) return SendErrorMessage(playerid, "Vi nemate nijedan posao.");
SendInfoMessage(playerid, "Dali ste otkaz na Vasem poslu.");
PlayerInfo[playerid][xPosao] = 0;
PlayerInfo[playerid][xPlataPoen] = 0;
PlayerInfo[playerid][xUgovor] = 0;


UzeoOpremu[playerid] = false;
c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
return 1;}

CMD:stoptaxi(playerid, params[]) {
if(offeredByCabbie[playerid] != INVALID_PLAYER_ID) {
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetFactionType(offeredByCabbie[playerid]) != ORG_TIP_TAXI) return SendErrorMessage(playerid, "Ne vozis se taksijem.");
	if(TaximetarUkljucen[offeredByCabbie[playerid]] == false) return SendErrorMessage(playerid, "Taximetar nije ukljucen!");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(offeredByCabbie[playerid])) return SendErrorMessage(playerid, "Nisi u vozilu sa taxistom!");
	if(TipVozila[vehicleid] == ORGANIZACIJSKO_VOZILO && OrgaVozila[vehicleid] == PlayerInfo[offeredByCabbie[playerid]][xClan]) {
		TaximetarUkljucen[offeredByCabbie[playerid]] = false;

		PlayerTextDrawHide(playerid, TaxistaTD[playerid][0]);
		PlayerTextDrawHide(playerid, TaxistaTD[playerid][1]);
		PlayerTextDrawHide(playerid, TaxistaTD[playerid][2]);
		PlayerTextDrawHide(playerid, TaxistaTD[playerid][3]);
		PlayerTextDrawHide(playerid, TaxistaTD[playerid][4]);
		PlayerTextDrawHide(playerid, TaxistaTD[playerid][5]);
		PlayerTextDrawHide(playerid, TaxistaTD[playerid][6]);
		PlayerTextDrawHide(playerid, TaxistaTD[playerid][7]);
		PlayerTextDrawHide(playerid, TaxistaTD[playerid][8]);
		PlayerTextDrawHide(playerid, TaxistaTD[playerid][9]);
		PlayerTextDrawHide(playerid, TaxistaTD[playerid][10]);
		PlayerTextDrawHide(playerid, TaxistaTD[playerid][11]);

		DajIgracuNovac(playerid, -CenaVoznje[offeredByCabbie[playerid]]);
		DajIgracuNovac(offeredByCabbie[playerid], CenaVoznje[offeredByCabbie[playerid]]);

		SendClientMessageEx(playerid, ZUTA, "Stigli ste do lokacije i platili %d$ za voznju", CenaVoznje[offeredByCabbie[playerid]]);
		SendClientMessageEx(offeredByCabbie[playerid], ZUTA, "Stigli ste do lokacije na koju je igrac htio i naplatili %d$ za voznju", CenaVoznje[offeredByCabbie[playerid]]);

		PlayerTextDrawSetString(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][6], "N/A");
		PlayerTextDrawShow(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][6]);
		PlayerTextDrawSetString(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][9], "N/A");
		PlayerTextDrawShow(offeredByCabbie[playerid], TaxistaTD[offeredByCabbie[playerid]][9]);

		CenaVoznje[offeredByCabbie[playerid]] = 0;
		Fusion_KillTimer(TaxiTimer[offeredByCabbie[playerid]]);
		VoziIgracaID[offeredByCabbie[playerid]] = INVALID_PLAYER_ID;
		offeredByCabbie[playerid] = INVALID_PLAYER_ID;
	} else return SendErrorMessage(playerid, "Niste u taxi vozilu!");}
else return SendErrorMessage(playerid, "Nisi prihvatio voznju taksijem!");
return 1;}

CMD:taxi(playerid, params[]) {
if(GetFactionType(playerid) != ORG_TIP_TAXI) return SendErrorMessage(playerid, "Ovu komandu moze koristiti samo Taksista.");
new item[32], izbor, vehicleid = GetPlayerVehicleID(playerid), varstring[144];
if(sscanf(params, "s[32] ", item)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/taxi [opcija]");
	SCM(playerid, BELA, "[Opcije] duty, ponudivoznju, uzmiklijenta");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(strcmp(item, "duty",true) == 0) {
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2766.1035, -1583.2134, -48.5485)) return SendErrorMessage(playerid, "Morate biti u Taxi uredu da bi obukli/skinuli uniformu i otisli na duznost.");
	if(taxiDuty[playerid] == false) {
		SetPlayerSkin(playerid, 255);
		taxiDuty[playerid] = true;
		SendJobMessage(playerid, "Obukao si uniformu taksiste i sada si na duznosti.");
		format(varstring, sizeof(varstring), "{FBE600]Taxista "col_white"%s {FBE600]je na duznosti. Kucajte "col_white"/call 777{FBE600] da ga pozovete.", ImeIgraca(playerid));
		SCMA(-1, varstring);
	}
	else if(taxiDuty[playerid] == true) {
		c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
		taxiDuty[playerid] = false;
		SendJobMessage(playerid, "Skinuo si uniformu taksiste i vise nisi na duznosti.");
	}
	return 1;}
else if(strcmp(item, "ponudivoznju",true) == 0) {
	if(sscanf(params, "s[32]u", item, izbor)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/taxi ponudivoznju [ID/Deo imena] ");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if(playerid == izbor) return SendErrorMessage(playerid, "Ne mozes voziti sam sebe!");
	if(izbor == IPI) return SendErrorMessage(playerid, "Pogresan ID.");
	if(taxiDuty[playerid] == false) return SendErrorMessage(playerid, "Morate biti na duznosti.");
	if(VoziIgracaID[playerid] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Vec vozis nekog!");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(izbor)) return SendErrorMessage(playerid, "Igrac mora biti u vasem vozilu");
	if(TipVozila[vehicleid] == ORGANIZACIJSKO_VOZILO && OrgaVozila[vehicleid] == PlayerInfo[playerid][xClan]) {
		format(varstring, sizeof(varstring), "Taksist %s vam je ponudio taxi voznju.\n\nPrihvacate li voznju?", ImeIgraca(playerid));
		SPD(izbor, dialog_TAXIOFFER, DSMSG, "Ponuda taxi voznje", varstring, "Prihvacam", "Odbijam");

		SendJobMessage(playerid, "Ponudio si voznju igracu {36AB00]%s"col_white".", ImeIgraca(izbor));

		offeredByCabbie[izbor] = playerid;
	} else return SendErrorMessage(playerid, "Morate biti u vozilu taksiste.");
	return 1;
	}
	else if(strcmp(item, "uzmiklijenta",true) == 0) {
		new Float:playerPos[3];

		if(sscanf(params, "s[32]u", item, izbor)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/taxi uzmiklijenta [ID/Deo imena] ");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if(PlayerInfo[izbor][xLevel] <= 2) SendErrorMessage(playerid, "Ne mozes voziti novajliju.");
		if(playerid == izbor) return SendErrorMessage(playerid, "Ne mozes voziti sam sebe!");
		if(izbor == IPI) return SendErrorMessage(playerid, "Pogresan ID.");
	if(!PozvaoTaxi[izbor]) return SendErrorMessage(playerid, "Taj igrac nije pozvao taxi!");
	if(taxiDuty[playerid] == false) return SendErrorMessage(playerid, "Morate biti na duznosti.");
	if(VoziIgracaID[playerid] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Vec vozis nekog!");
	if(TipVozila[vehicleid] == ORGANIZACIJSKO_VOZILO && OrgaVozila[vehicleid] == PlayerInfo[playerid][xClan]) {
		PozvaoTaxi[izbor] = false;

		SendJobMessage(playerid, "Prihvatio si poziv igraca {36AB00]%s "col_white"kome je potreban taxista, lokacija igraca:{36AB00] %sFFFFFF!", ImeIgraca(izbor), GetPlayerLocation(izbor));
		SendJobMessage(izbor, "Taksista je prihvatio vas poziv.");

		GetPlayerPos(izbor, playerPos[0], playerPos[1], playerPos[2]);
		Fusion_SetPlayerCheckpoint(playerid, playerPos[0], playerPos[1], playerPos[2], 3.0);
		CheckpointStatus[playerid] = 12;

			foreach(new i : Player)
		{
			if(GetFactionType(i) == ORG_TIP_TAXI && taxiDuty[i] == true)
				SendClientMessageEx(i, -1, "%s {FBE600]je prihvatio klijenta"col_white" %s.", ImeIgraca(playerid), ImeIgraca(izbor));
		}
	} else return SendErrorMessage(playerid, "Morate biti u vozilu taksiste.");
	return 1;
	}
	else  {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/taxi [opcija]");
	SCM(playerid, BELA, "[Opcije] duty, ponudivoznju, uzmiklijenta");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");}
return 1;}

CMD:uzmisemenke(playerid, params[]) {
if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 6) || PlayerInfo[playerid][xHelper] > 0) {

	new hour, minute, seconds;
	gettimeEx(hour, minute, seconds);
	FixHour(hour);
	hour = shifthour;
	new admini = 0;
	foreach(new i : Player) {
		if(AdminDuty[i] == true) admini++;
	}
	
	if((hour >= 00) && (hour <= 10)) {}
	else {
		if(admini < 3) return SendErrorMessage(playerid, "Da bi radili posao u toku smene moraju biti bar 3 admina/helpera na duty.");
	}
}

if(PlayerInfo[playerid][xPosao] != POSAO_FARMER) return SendErrorMessage(playerid, "Ovu komandu moze koristiti samo farmer.");
//if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate opremu farmera!");
if(!IsPlayerInRangeOfPoint(playerid, 3.0, -1115.5098, -1246.7819, 129.2188)) return SendErrorMessage(playerid, "Nisi blizu spremista semenki.");
if(farmerInfo[playerid][fifarmerSeeds] > 0) return SendErrorMessage(playerid, "Imas semenke kod sebe, ubaci ih u traktor i idi ih posijat");
if(farmerInfo[playerid][fifarmerPlantsPlanted] != -1) return SendErrorMessage(playerid, "Vec imas zapocet proces farmera.");
if(0 < farmerInfo[playerid][fifarmerPickupedBales] < MAX_FARMERS_PLANTS_PLANTED) return SendErrorMessage(playerid, "Nisi sakupio sve useve koje si posejao!");
if(AccountVerified[playerid] == false) return SendErrorMessage(playerid, "Prvo morate verifikovati svoj nalog(/vf).");
if(PlayerInfo[playerid][xWanted] >= 1) return SendErrorMessage(playerid, "Ne mozete na posao dok imate wanted.");

AccountVerified[playerid] = false;

farmerInfo[playerid][fifarmerSeeds] = 10;
farmerInfo[playerid][fifarmerPlantsPlanted] = 0;
farmerInfo[playerid][fifarmerWheatCreated] = 0;
farmerInfo[playerid][fifarmerPickupedBales] = 0;
farmerInfo[playerid][fiCowNumber] = 0;

if(!IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) {
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 2060, 1, 0.030783, 0.407292, -0.017557, 167.442321, 272.735290, 346.685028, 1.000000, 1.000000, 1.000000);}

SendJobMessage(playerid, "Uzeo si {36AB00]10 "col_white"semenki i sad ih moras posejati pomocu traktora");
SendJobMessage(playerid, "Prvo moras ubaciti te semenke u traktor (klikni tipku {36AB00]LEVI KLIK MISA "col_white"blizu traktora)");
return 1;}

CMD:muzikrave(playerid, params[]) {
if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 6) || PlayerInfo[playerid][xHelper] > 0) {

	new hour, minute, seconds;
	gettimeEx(hour, minute, seconds);
	FixHour(hour);
	hour = shifthour;
	new admini = 0;
	foreach(new i : Player) {
		if(AdminDuty[i] == true) admini++;
	}
	
	if((hour >= 00) && (hour <= 10)) {}
	else {
		if(admini < 3) return SendErrorMessage(playerid, "Da bi radili posao u toku smene moraju biti bar 3 admina/helpera na duty.");
	}
}

if(PlayerInfo[playerid][xPosao] != POSAO_FARMER) return SendErrorMessage(playerid, "Ovu komandu moze koristiti samo farmer.");
//if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate opremu farmera!");
if(!farmerInfo[playerid][fiHaveBucket]) return SendErrorMessage(playerid, "Morate prvo uzeti kantu!");
if(farmerInfo[playerid][fiCowNumber] != 0) return SendErrorMessage(playerid, "Vec imas pocet proces muznje krave.");
if(AccountVerified[playerid] == false) return SendErrorMessage(playerid, "Prvo morate verifikovati svoj nalog(/vf).");

AccountVerified[playerid] = false;

if(farmerInfo[playerid][fiVehicleBucket] != -1) {
	new farmvehicle = farmerInfo[playerid][fiVehicleBucket];

	farmerVehicles[farmvehicle][fvMilk] = false;
	farmerVehicles[farmvehicle][fvMilkpID] = -1;}

farmerInfo[playerid][fiCowNumber] = 0;
farmerInfo[playerid][fiVehicleBucket] = -1;
Fusion_SetPlayerCheckpoint(playerid, milkInfo[0][cpPos][0], milkInfo[0][cpPos][1], milkInfo[0][cpPos][2], 1.0);
CheckpointStatus[playerid] = 16;
SendJobMessage(playerid, "Pratite markere kako bi pomuzli krave.");
return true;}

CMD:uzmikantu(playerid, params[]) {

if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 6) || PlayerInfo[playerid][xHelper] > 0) {

	new hour, minute, seconds;
	gettimeEx(hour, minute, seconds);
	FixHour(hour);
	hour = shifthour;
	new admini = 0;
	foreach(new i : Player) {
		if(AdminDuty[i] == true) admini++;
	}
	
	if((hour >= 00) && (hour <= 10)) {}
	else {
		if(admini < 3) return SendErrorMessage(playerid, "Da bi radili posao u toku smene moraju biti bar 3 admina/helpera na duty.");
	}
}

if(PlayerInfo[playerid][xPosao] != POSAO_FARMER) return SendErrorMessage(playerid, "Ovu komandu moze koristiti samo farmer.");
//if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate opremu farmera!");
if(!IsPlayerInRangeOfPoint(playerid, 3.0, -1089.5529, -1254.0573, 129.2188)) return SendErrorMessage(playerid, "Nisi kod kanti.");
if(farmerInfo[playerid][fiHaveBucket]) return SendErrorMessage(playerid, "Vec si uzeo kantu!");
if(farmerInfo[playerid][fiCowNumber] != 0) return SendErrorMessage(playerid, "Vec imas pocet proces muznje krave.");
if(PlayerInfo[playerid][xWanted] >= 1) return SendErrorMessage(playerid, "Ne mozete na posao dok imate wanted.");

farmerInfo[playerid][fiHaveBucket] = true;
SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 2613, 1, -0.200000, 1.000000, -0.699999, -9.000000, 90.000000, -21.000000);
SendJobMessage(playerid, "Uzeo si kantu sad mozes da muzes krave ("col_white"/muzikrave"col_white")!");
ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1);
return true;}


CMD:lokacije(playerid, params[]) {

if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 6) || PlayerInfo[playerid][xHelper] > 0) {

	new hour, minute, seconds;
	gettimeEx(hour, minute, seconds);
	FixHour(hour);
	hour = shifthour;
	new admini = 0;
	foreach(new i : Player) {
		if(AdminDuty[i] == true) admini++;
	}
	
	if((hour >= 00) && (hour <= 10)) {}
	else {
		if(admini < 3) return SendErrorMessage(playerid, "Da bi radili posao u toku smene moraju biti bar 3 admina/helpera na duty.");
	}
}

if(PlayerInfo[playerid][xPosao] != POSAO_PREVOZNIK) return SendErrorMessage(playerid, "Ovu komandu moze koristiti samo zaposlenik kod Prevoznika.");
SPD(playerid, dialog_BIRAJLOKACIJU, DSL, "Izaberi lokaciju", "Lokacija utovara drveca\nLokacija utovara sljunka", D_ODABERI, D_ODUSTANI);
return 1;}

CMD:verifikacija(playerid, params[]) {

if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 6) || PlayerInfo[playerid][xHelper] > 0) {

	new hour, minute, seconds;
	gettimeEx(hour, minute, seconds);
	FixHour(hour);
	hour = shifthour;

	new admini = 0;
	foreach(new i : Player) {
		if(AdminDuty[i] == true) admini++;
	}
	
	if((hour >= 00) && (hour <= 10)) {}
	else {
		if(admini < 3) return SendErrorMessage(playerid, "Da bi radili posao u toku smene moraju biti bar 3 admina/helpera na duty.");
	}
}

if(PlayerInfo[playerid][xPosao] == 0) return SendErrorMessage(playerid, "Ovu komandu moze koristiti samo onaj ko je zaposlen.");

new broj = (random(800) + 100);
PlayerCode[playerid] = broj; 
new varstring[60];
format(varstring, sizeof(varstring), "Unesite u prazno polje ovaj kod: %d", broj);
SPD(playerid, dialog_VERifIKACIJA, DSI, D_NASLOV, varstring, D_ODABERI, D_ODUSTANI);
return 1;}

CMD:uzmidrvo(playerid, params[]) { // by Letic

if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 6) || PlayerInfo[playerid][xHelper] > 0) {

	new hour, minute, seconds;
	gettimeEx(hour, minute, seconds);
	FixHour(hour);
	hour = shifthour;
	new admini = 0;
	foreach(new i : Player) {
		if(AdminDuty[i] == true) admini++;
	}

	if((hour >= 00) && (hour <= 10)) {}
	else {
		if(admini < 3) return SendErrorMessage(playerid, "Da bi radili posao u toku smene moraju biti bar 3 admina/helpera na duty.");
	}
}

if(PlayerInfo[playerid][xPosao] != POSAO_PNAMESTAJA) return SendErrorMessage(playerid, "Ovu komandu moze koristiti samo zaposlenik kod Proizvodjac namestaja.");

if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2159.8730,-2296.4348,13.4891)) return SendErrorMessage(playerid, "Ne nalazite se na odgovarajucem mestu!");
if(NamestajLevel[playerid] != 1) return SendErrorMessage(playerid, "Ne mozete to, niste aktivirali posao!");

SendJobMessage(playerid, "Uzeli ste drvo, sada ga ubacite u masinu da bi napravili deo za namestaj!") ;
SendJobMessage(playerid, "Drvo u masinu ubacujete tipkom "col_job"Y!");
NamestajLevel[playerid] = 2; CheckpointStatus[playerid] = 40;
SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
SetPlayerAttachedObject(playerid, OBJECT_SLOT_BADGE, 19793, 1, 0.00, 0.47, -0.00, 0.0, 90.0, 0.0, 0.98, 0.92, 1.00);
	Fusion_SetPlayerCheckpoint(playerid, 2149.6013,-2273.1235,13.3047, 4.0);
ServerInfo[Drva] -= 5;
	SaveServerStats();

return true;}

CMD:ostavidrvo(playerid, params[]) { // by Letic

if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 6) || PlayerInfo[playerid][xHelper] > 0) {

	new hour, minute, seconds;
	gettimeEx(hour, minute, seconds);
	FixHour(hour);
	hour = shifthour;
	new admini = 0;
	foreach(new i : Player) {
		if(AdminDuty[i] == true) admini++;
	}

	if((hour >= 00) && (hour <= 10)) {}
	else {
		if(admini < 3) return SendErrorMessage(playerid, "Da bi radili posao u toku smene moraju biti bar 3 admina/helpera na duty.");
	}
}

if(PlayerInfo[playerid][xPosao] != POSAO_PNAMESTAJA) return SendErrorMessage(playerid, "Ovu komandu moze koristiti samo zaposlenik kod Proizvodjac namestaja.");
if(NamestajLevel[playerid] != 4) return SendErrorMessage(playerid, "Ne mozete to!");
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2129.8132,-2282.4976,14.7825)  && !IsPlayerInRangeOfPoint(playerid, 3.0, 2125.7715,-2278.3010,14.7825) && !IsPlayerInRangeOfPoint(playerid, 3.0, 2121.8728,-2274.6519,14.7825)) return SendErrorMessage(playerid, "Ne nalazite se blizu zanatskog stola!");

if(IsPlayerInRangeOfPoint(playerid, 3.0, 2129.8132,-2282.4976,14.7825)) {

	Objekat[playerid] = CreatePlayerObject(playerid, 2410,  2129.03027, -2283.09033, 14.64230,   0.00000, 0.00000, 106.00000);}
else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2125.7715,-2278.3010,14.7825)) {

	Objekat[playerid] = CreatePlayerObject(playerid, 2410, 2124.97925, -2278.88794, 14.64230,   0.00000, 0.00000, 106.00000);}
else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2121.8728,-2274.6519,14.7825)) {

	Objekat[playerid] = CreatePlayerObject(playerid, 2410, 2121.21606, -2275.25244, 14.64230,   0.00000, 0.00000, 106.00000);}

TogglePlayerControllable (playerid, false);
RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BADGE); SetPlayerSpecialAction(playerid, 0);
SendJobMessage(playerid, "Stavili ste deo na zanatski stol, sada ga izrezite testerom!");
SendJobMessage(playerid, "Drvo rezete pritiskom na "col_job"LEVI KLIK MISA"col_white" vise puta!");
NamestajLevel[playerid] = 5;
return true;}

CMD:prevozdrveca(playerid, params[]) {

if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 6) || PlayerInfo[playerid][xHelper] > 0) {

	new hour, minute, seconds;
	gettimeEx(hour, minute, seconds);
	FixHour(hour);
	hour = shifthour;
	new admini = 0;
	foreach(new i : Player) {
		if(AdminDuty[i] == true) admini++;
	}

	if((hour >= 00) && (hour <= 10)) {}
	else {
		if(admini < 3) return SendErrorMessage(playerid, "Da bi radili posao u toku smene moraju biti bar 3 admina/helpera na duty.");
	}
}

if(CheckpointStatus[playerid] != 0) return SendErrorMessage(playerid, "Vec imas aktiviran marker tako da ne mozes ovo koristiti.");
new vehicleid = GetPlayerVehicleID(playerid);
if(PlayerInfo[playerid][xPosao] != POSAO_PREVOZNIK) return SendErrorMessage(playerid, "Ovu komandu moze koristiti samo zaposlenik kod Prevoznika.");
if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate uniformu prevoznika!");
if(!IsPlayerInRangeOfPoint(playerid, 10.0, -569.0004, -93.3358, 63.9587)) return SendErrorMessage(playerid, "Nisi na mestu utovara(kucaj '/lokacije').");
if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu DFT-30.");
if(GetVehicleModel(vehicleid) != 578) return SendErrorMessage(playerid, "Morate biti u vozilu DFT-30.");
if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti na mestu vozaca.");
if(WOOD[GetPlayerVehicleID(playerid)] == true) return SendErrorMessage(playerid, "Ovo vozilo vec ima utovareno drvece.");
if(AccountVerified[playerid] == false) return SendErrorMessage(playerid, "Prvo morate verifikovati svoj nalog(/vf).");

AccountVerified[playerid] = false;
GameTextForPlayer(playerid, "~w~Pricekajte drvece se utovaruje..", 5000, 1);
TogglePlayerControllable(playerid, false);
SetTimerEx("Utovar", 5000, false, "dii", playerid, vehicleid, 1);
return 1;}

CMD:prevozsljunka(playerid, params[]) {

if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 6) || PlayerInfo[playerid][xHelper] > 0) {

	new hour, minute, seconds;
	gettimeEx(hour, minute, seconds);
	FixHour(hour);
	hour = shifthour;
	new admini = 0;
	foreach(new i : Player) {
		if(AdminDuty[i] == true) admini++;
	}

	if((hour >= 00) && (hour <= 10)) {}
	else {
		if(admini < 3) return SendErrorMessage(playerid, "Da bi radili posao u toku smene moraju biti bar 3 admina/helpera na duty.");
	}
}

if(CheckpointStatus[playerid] != 0) return SendErrorMessage(playerid, "Vec imas aktiviran marker tako da ne mozes ovo koristiti.");
new vehicleid = GetPlayerVehicleID(playerid);
if(PlayerInfo[playerid][xPosao] != POSAO_PREVOZNIK) return SendErrorMessage(playerid, "Ovu komandu moze koristiti samo zaposlenik kod Prevoznika.");
if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate uniformu prevoznika!");
if(!IsPlayerInRangeOfPoint(playerid, 10.0, 620.8951, 832.1742, -42.9609)) return SendErrorMessage(playerid, "Nisi na mestu utovara(kucaj '/lokacije').");
if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu Flatbed.");
if(GetVehicleModel(vehicleid) != 455) return SendErrorMessage(playerid, "Morate biti u vozilu Flatbed.");
if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti na mestu vozaca.");
if(sljunak[GetPlayerVehicleID(playerid)] == true) return SendErrorMessage(playerid, "Ovo vozilo vec ima utovaren sljunak.");
if(AccountVerified[playerid] == false) return SendErrorMessage(playerid, "Prvo morate verifikovati svoj nalog(/vf).");

AccountVerified[playerid] = false;
GameTextForPlayer(playerid, "~w~Pricekajte sljunak se utovaruje..", 5000, 1);
TogglePlayerControllable(playerid, false);
SetTimerEx("Utovar", 5000, false, "dii", playerid, vehicleid, 2);
return 1;}

CMD:levelup(playerid, params[]) {
if(PlayerInfo[playerid][xLevel] >= 1) {

	new nxtlevel = PlayerInfo[playerid][xLevel]+1;
	new expamount = nxtlevel*levelexp;
	new vratirespekt = PlayerInfo[playerid][xRespekt]-expamount;
	if(PlayerInfo[playerid][xRespekt] < expamount) {
		SendErrorMessage(playerid, "Trebas imati %d Respekta, a ti trenutno imas [%d]", expamount, PlayerInfo[playerid][xRespekt]);
		return 1;
	}
	else {
		new varstring[75];
		format(varstring, sizeof(varstring), "~g~LEVEL UP~n~~w~Sada si Level %d", nxtlevel);
		GameTextForPlayer(playerid, varstring, 5000, 1);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		PlayerPlayMusic(playerid);
		PlayerInfo[playerid][xLevel]++;
		SetPlayerScore(playerid, PlayerInfo[playerid][xLevel]);
		PlayerInfo[playerid][xPoboljsanja] += 2;
		PlayerInfo[playerid][xRespekt] = vratirespekt; // ..
		SavePlayer(playerid);
		format(varstring, sizeof(varstring), "   Kupio si Level %d Ukucaj /upgrade za neke bonuse", nxtlevel);
		SCM(playerid, SVETLOPLAVA, varstring);
		format(varstring, sizeof(varstring), "   Imas %d neiskoristenih Upgrade Poena", PlayerInfo[playerid][xPoboljsanja]);
		SCM(playerid, BELA, varstring);
	}
}
return 1;}
CMD:upgrade(playerid, params[]) {
new item[32];
if(sscanf(params, "s[32] ", item)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/upgrade [opcija]");
	SCM(playerid, BELA, "[Opcije] health, snaga");
	SCM(playerid, SVETLOCRVENA, "Upgrade healtha ili snage je 2 upgrade poena.");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(strcmp(item, "health",true) == 0) {
	if(PlayerInfo[playerid][xPoboljsanja] > 1) {
		if(PlayerInfo[playerid][xSHealth] < 50) {
			PlayerInfo[playerid][xSHealth] = PlayerInfo[playerid][xSHealth]+5.0;
			SendInfoMessage(playerid, "Novo poboljsanje: Sada ces se spawnati sa  %.2f energije (+5)",PlayerInfo[playerid][xSHealth]+50);
			PlayerInfo[playerid][xPoboljsanja] -= 2;
			SavePlayer(playerid);
		}
		else return SendErrorMessage(playerid, "Imas maksimum spawn energiju");
	}
	else return SendErrorMessage(playerid, "Nemas dovoljno upgrade poena");
	return 1;}
else if(strcmp(item, "snaga",true) == 0) {
	if(PlayerInfo[playerid][xLevel] >= 3) {
		if(PlayerInfo[playerid][xPoboljsanja] > 1) {
			if(PlayerInfo[playerid][xSnaga] < 20)
			{
				SendInfoMessage(playerid, "Novo poboljsanje: Unaprijedili ste snagu vaseg IC lika.Sada iznosi  %d !", PlayerInfo[playerid][xSnaga]+1);
				PlayerInfo[playerid][xSnaga] += 1;
				PlayerInfo[playerid][xPoboljsanja] -= 2;
			}
			else return SendErrorMessage(playerid, "Imas maksimum snagu");
		}
		else return SendErrorMessage(playerid, "Nemas dovoljno upgrade poena");
	}
	else return SendErrorMessage(playerid, "Trenutno nedostupno,premali level!");
	return 1;}
else {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/upgrade [opcija]");
	SCM(playerid, BELA, "[Opcije] health, strength");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");}
return 1;}

CMD:popraviavion(playerid, params[]) {
if(IsPlayerInRangeOfPoint(playerid, 15.0, 1865.6421, -2390.7712, 14.4759) || IsPlayerInRangeOfPoint(playerid, 15.0, -1525.4755, -81.9020, 15.0702) || IsPlayerInRangeOfPoint(playerid, 15.0, 1433.4257, 1379.8014, 11.7424)) {
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 519 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 553) {
		if(PlayerInfo[playerid][xPosao] == POSAO_PILOT) {

			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Niste na mestu vozaca!");
			if(PlayerInfo[playerid][xNovac] < 5000) return SendErrorMessage(playerid, "Nemate 500 dolara kod sebe.");
			ac_RepairVehicle(GetPlayerVehicleID(playerid));
			ac_SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
			antiCheatCS[playerid][VehRepairTime] = 3;
			vCanDrive[GetPlayerVehicleID(playerid)] = 1;
			DajIgracuNovac(playerid, -5000);
			SendInfoMessage(playerid, "Popravili ste avion za 5000 dolara.");
		}
	}
}
return 1;}

JobUniformPlace(playerid) {

for(new i = 0; i < MAX_JOBS; i++) {

	if(IsPlayerInRangeOfPoint(playerid, 3.0, jobsInfos[i][jUniformPos][0], jobsInfos[i][jUniformPos][1], jobsInfos[i][jUniformPos][2])) { return i; }
}
return -1;}

CMD:uniforma(playerid, params[]) {

new sat, minut, sekund;
gettime(sat, minut, sekund);
if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes da uzmes opremu dok si u vozilu.");

new id = JobUniformPlace(playerid);
if(id == -1) return SendErrorMessage(playerid, "Niste na mestu za uzimanje/skidanje opreme.");

if(PlayerInfo[playerid][xPosao] != jobsInfos[id][jType]) return SendErrorMessage(playerid, "Niste zaposljeni kao %s!", jobsInfos[id][jName]);

if(jobsInfos[id][jUniformPos] == 0 || jobsInfos[id][jUniformSkin_Male] == 0) return SendErrorMessage(playerid, "Za ovaj posao nije potrebna uniforma.");


if(!UzeoOpremu[playerid]) {

	UzeoOpremu[playerid] = true;

	if(PlayerInfo[playerid][xPol] == 1) {

		if(jobsInfos[id][jType] == POSAO_FARMER) {
			new farmerskin[5] = {
			  202,
			  161,
			  158,
			  133,
			  132
			};
			SetPlayerSkin(playerid, farmerskin[random(5)]);
		}
		else {
			SetPlayerSkin(playerid, jobsInfos[id][jUniformSkin_Male]);
		}

	}
	else if(PlayerInfo[playerid][xPol] == 2) SetPlayerSkin(playerid, jobsInfos[id][jUniformSkin_Female]);
	else SetPlayerSkin(playerid, jobsInfos[id][jUniformSkin_Male]);

	if(jobsInfos[id][jType] == POSAO_RUDAR) {

		SetPlayerAttachedObject(playerid, OBJECT_SLOT_LHAND, 18634, 6, 0.048513, 0.018571, 0.028653, 314.764404, 226.953979, 222.510803, 1.000000, 1.000000, 1.000000);
		SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 2060, 1, -0.191781, -0.162666, -0.003734, 88.812377, 0.000000, 0.408470, 1.000000, 1.000000, 1.000000);
	}

	SendJobMessage(playerid, "Uzeli ste uniformu sada mozete raditi kao "col_job"%s"col_white". (/posao, /help)", jobsInfos[id][jName]);}
else if(UzeoOpremu[playerid]) {

	UzeoOpremu[playerid] = false;

	c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);

	SendJobMessage(playerid, "Skinuli ste poslovnu uniformu.");

	if(jobsInfos[id][jType] == POSAO_RUDAR) {

		if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_LHAND)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_LHAND);
		if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
	}
}
return 1;}

CMD:prekiniposao(playerid, params[]) {
if(PlayerInfo[playerid][xPosao] == POSAO_KOSAC) {
	if(!KrenuoKosenje[playerid]) return SendErrorMessage(playerid, "Niste poceli posao pa nemate sta da prekinete.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti na mestu vozaca.");
	for(new i = 0; i < 38; i++) DestroyPlayerObject(playerid, Grass[i][playerid]);

	PokosenaTrava[playerid] = 0;
	KrenuoKosenje[playerid] = false;

	ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	TogglePlayerControllable(playerid, true);

	SendJobMessage(playerid, "Niste pokosili svu travu pa niste ni dobili nista novca.");
	return 1;}
else if(PlayerInfo[playerid][xPosao] == POSAO_FARMER) {

	if(farmerInfo[playerid][fiCowNumber] != 0 || farmerInfo[playerid][fifarmerPlantsPlanted] != -1) {

		for(new plantid = 0; plantid < MAX_FARMS; plantid++) {

			if(plantInfo[plantid][farmPlantCreated] && plantInfo[plantid][farmPlayerID] == playerid) {

				if(IsValidDynamic3DTextLabel(plantInfo[plantid][farm3D]))
					DestroyDynamic3DTextLabel(plantInfo[plantid][farm3D]);

				if(IsValidDynamicObject(plantInfo[plantid][farmObject]))
					DestroyDynamicObject(plantInfo[plantid][farmObject]);

				ResetFarmPlant(plantid);
			}
		}

		Fusion_DisablePlayerCheckpoint(playerid);
		CheckpointStatus[playerid] = 0;

		farmerInfo[playerid][fifarmerSeeds] = 0;
		farmerInfo[playerid][fifarmerPlantsPlanted] = -1;
		farmerInfo[playerid][fifarmerWheatCreated] = -1;
		farmerInfo[playerid][fifarmerPickupedBales] = 0;
		farmerInfo[playerid][fifarmerPickupedBale] = false;

		if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND))
			RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);

		if(IsValidPlayerObject(playerid, farmerInfo[playerid][fiBucketObject]))
			DestroyPlayerObject(playerid, farmerInfo[playerid][fiBucketObject]);

		farmerInfo[playerid][fiCowNumber] = 0;
		farmerInfo[playerid][fiHaveBucket] = false;


		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
			ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		}

		if(farmerInfo[playerid][fiVehicleBucket] != -1) {
			new farmvehicle = farmerInfo[playerid][fiVehicleBucket];

			farmerVehicles[farmvehicle][fvMilk] = false;
			farmerVehicles[farmvehicle][fvMilkpID] = -1;
		}

		SendJobMessage(playerid, "Uspesno ste prekinuli sa poslom, sada mozete ostaviti uniformu ili opet raditi.");
	} else return SendErrorMessage(playerid, "Morate krenuti sa poslom da bi ste ga prekinuli.");}
else if(PlayerInfo[playerid][xPosao] == POSAO_VOCAR) {
	if(PosaoVocar[playerid] != 0) {
		ClearAnimations(playerid);
		Fusion_DisablePlayerCheckpoint(playerid);
		CheckpointStatus[playerid] = 0;			
		for(new i=0; i<MAX_PLAYER_ATTACHED_OBJECTS; i++)
		{
			if(IsPlayerAttachedObjectSlotUsed(playerid, i)) RemovePlayerAttachedObject(playerid, i);
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		vocarPosao[playerid][vocarObrao] = 0;
		PosaoVocar[playerid] = 0;
		SendJobMessage(playerid, "Uspesno ste prekinuli sa poslom, sada mozete ostaviti uniformu ili opet raditi.");
	}
	else return SendErrorMessage(playerid, "Niste zapoceli sa poslom.");}
else if(PlayerInfo[playerid][xPosao] == POSAO_PILOT) {
	if(LetSF[playerid] != 0 || LetLV[playerid] != 0) {
		LetSF[playerid] = 0; LetLV[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			CheckpointStatus[playerid] = 0;

			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
			ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		}

		SendJobMessage(playerid, "Uspesno ste prekinuli sa poslom, sada mozete ostaviti uniformu ili opet raditi.");
	}
	else return SendErrorMessage(playerid, "Niste zapoceli sa poslom.");}
else if(PlayerInfo[playerid][xPosao] == POSAO_BUSVOZAC) {
	if(BusLinija[playerid] != 0) {
		BusLinija[playerid] = 0;
		Fusion_KillTimer(BusVozac[playerid]);
			DisablePlayerCheckpoint(playerid);
			CheckpointStatus[playerid] = 0;

			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
			ac_SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		}

		SendJobMessage(playerid, "Uspesno ste prekinuli sa poslom, sada mozete ostaviti uniformu ili opet raditi.");
	}
	else return SendErrorMessage(playerid, "Niste zapoceli sa poslom.");}
else if(PlayerInfo[playerid][xPosao] == POSAO_PREVOZNIK) {
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u poslovnom vozilu.");
	if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate opremu prevoznika!");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti na mestu vozaca.");
	if(GetVehicleModel(vehicleid) == 515) {

		Fusion_DisablePlayerCheckpoint(playerid);
		CheckpointStatus[playerid] = 0;
		ac_SetVehicleToRespawn(vehicleid);
		SendJobMessage(playerid, "Uspesno ste prekinuli sa poslom, sada mozete ostaviti uniformu ili opet raditi.");

		if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			ac_SetVehicleToRespawn(GetVehicleTrailer(vehicleid));
	}
	else {
		Fusion_DisablePlayerCheckpoint(playerid);
		CheckpointStatus[playerid] = 0;
		ac_SetVehicleToRespawn(vehicleid);
		SendJobMessage(playerid, "Uspesno ste prekinuli sa poslom, sada mozete ostaviti uniformu ili opet raditi.");
	}
}
else if(PlayerInfo[playerid][xPosao] == POSAO_PREVOZNOVCA) {
	new vehicleid = GetPlayerVehicleID(playerid);
	if(PosaoVozila[vehicleid] == POSAO_PREVOZNOVCA && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(vehicleid) == 428) {
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti na mestu vozaca.");
		CheckpointStatus[playerid] = 0;
			Fusion_DisablePlayerCheckpoint(playerid);
			PlayerPrevozNovca[playerid] = -1;
		VehNovac[vehicleid] = false;
		ac_SetVehicleToRespawn(vehicleid);
		StaroVreme[playerid] = 0;
		NovoVreme[playerid] = 0;
		SendJobMessage(playerid, "Uspesno ste prekinuli sa poslom, sada mozete ostaviti uniformu ili opet raditi.");
	}
	else return SendErrorMessage(playerid, "Morate biti u poslovnom vozilu.");}
else if(PlayerInfo[playerid][xPosao] == POSAO_PEPSI) {
	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(vehicleid) == 609) {
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti na mestu vozaca.");
		Fusion_DisablePlayerCheckpoint(playerid);
		DeliverLevel[playerid] = 0;
		TrafikaTrenutna[playerid] = 0;
		TrafikaPrva[playerid] = 0;
		CarriesBox[playerid] = 0;
		ac_SetVehicleToRespawn(DeliverCar[playerid]);
		StateBox[DeliverCar[playerid]] = 0;
		KamionUsed[DeliverCar[playerid]] = -1;
		DeliverCar[playerid] = -1;
		KamionUsed[playerid] = -1;
		StaroVreme[playerid] = 0;
		NovoVreme[playerid] = 0;
		SendJobMessage(playerid, "Uspesno ste prekinuli sa poslom, sada mozete ostaviti uniformu ili opet raditi.");
	}
	else return SendErrorMessage(playerid, "Morate biti u poslovnom vozilu.");}
return 1;}
CMD:hobihelp(playerid,params[])
{
if(PlayerInfo[playerid][xRibarska] == 0) return SendErrorMessage(playerid, "Nemate dozvolu za pecanje, izvadite je u opstini.");
SendJobMessage(playerid,"--------------[HOBI RIBAR]------------");
SendJobMessage(playerid,"Kucajte /pecaj da pocnete da pecate.");
SendJobMessage(playerid,"Kucajte /prodajribu da prodate ribu.");
SendJobMessage(playerid,"Kucajte /riba da vidite koliko kilograma ribe imate.");
SendJobMessage(playerid,"Kucajte /uzmistap da uzmete stap za pecanje.");
SendJobMessage(playerid,"Kucajte /ribaroprema da uzmete opremu za pecanje.");
SendJobMessage(playerid,"Mozete imati najvise 100-110kg ribe kod sebe.");
return true;}
CMD:ribaroprema(playerid, params[]) {
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1142.2483,-2348.5747,13.1496)) return SendErrorMessage(playerid, "Niste na mestu za ribarsku opremu.");
if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes da uzmes opremu dok si u vozilu.");
if(RibarOprema[playerid] == false) {

	RibarOprema[playerid] = true;
	if(PlayerInfo[playerid][xPol] == 1) {
		SetPlayerSkin(playerid, 33);
	}
	else if(PlayerInfo[playerid][xPol] == 2) SetPlayerSkin(playerid, 69);
	else SetPlayerSkin(playerid, 33);

	SendJobMessage(playerid, "Uzeli ste ribarsku opremu, sada mozete pecati.");}
else if(RibarOprema[playerid] == true) {

	RibarOprema[playerid] = false;
	c_SetPlayerSkin(playerid, PlayerInfo[playerid][xSkin]);
	SendJobMessage(playerid, "Skinuli ste ribarsku opremu.");}
return 1;}
CMD:pecaj(playerid,params[])
{	
new Float:x,Float:y,Float:z;
if(PlayerInfo[playerid][xRibarska] == 0) return SendErrorMessage(playerid, "Nemate dozvolu za pecanje, izvadite je u opstini.");
if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete pecati dok vozite!");
if(RibarOprema[playerid] == false) return SendErrorMessage(playerid, "Nemate opremu za pecanje!");
if(IsPlayerInRangeOfPoint(playerid,3.0,1238.8718,-2350.1252,10.4865) || IsPlayerInRangeOfPoint(playerid,3.0,1227.4233,-2350.8772,10.4211) ||
IsPlayerInRangeOfPoint(playerid,3.0,1214.5383,-2357.3013,10.4330) || IsPlayerInRangeOfPoint(playerid,3.0,1206.5417,-2366.9084,10.0958) ||
IsPlayerInRangeOfPoint(playerid,3.0,1203.9843,-2376.2563,10.0980) || IsPlayerInRangeOfPoint(playerid,3.0,1207.9946,-2391.5447,9.9624) ||
IsPlayerInRangeOfPoint(playerid,3.0,1217.6484,-2402.7642,10.0419) || IsPlayerInRangeOfPoint(playerid,3.0,1233.4968,-2412.7041,10.0317) ||
IsPlayerInRangeOfPoint(playerid,3.0,1251.4478,-2409.5623,9.9814) || IsPlayerInRangeOfPoint(playerid,3.0,1265.9780,-2402.8337,10.3362) ||
IsPlayerInRangeOfPoint(playerid,3.0,1277.1843,-2389.9287,10.2152) || IsPlayerInRangeOfPoint(playerid,3.0,1278.2319,-2376.1472,10.2087) ||
IsPlayerInRangeOfPoint(playerid,3.0,1268.4220,-2358.2979,10.1833)) 
{
	if(StapZaPecanje[playerid] == 0) return SendErrorMessage(playerid,"Nemate stap za pecanje. Idite i uzmite ga!");
	
	if(IgracPeca[playerid] == true) return SendErrorMessage(playerid,"Vec pecate!");
	
	if(IsPlayerInRangeOfPoint(playerid,5.0,PecanjePozX[playerid],PecanjePozY[playerid],PecanjePozZ[playerid])) return SendErrorMessage(playerid,"Ne mozete pecati na istom mestu, pomerite se malo!");

	if(PlayerInfo[playerid][xRibaKG] >= 100) return SendErrorMessage(playerid,"Vec imate previse ribe kod sebe, morate je prodati.");

	GetPlayerPos(playerid,x,y,z);
	PecanjePozX[playerid] = x;
	PecanjePozY[playerid] = y;
	PecanjePozZ[playerid] = z;
	IgracPeca[playerid] = true;
	//RibaKG[playerid] = 0;
	ApplyAnimation(playerid,"SWORD","sword_block",50.0 ,0,1,0,1,1);
	SetPlayerAttachedObject(playerid, 0,18632,6,0.079376,0.037070,0.007706,181.482910,0.000000,0.000000,1.000000,1.000000,1.000000);
	SetTimerEx("IgracPecao",15000,false,"i",playerid);
	SendJobMessage(playerid,"Pecate... ne pomerajte se da vam ne bi ispala riba.");}
else
{
		SendErrorMessage(playerid,"Niste na mestu za pecanje!");}
return true;}
CMD:riba(playerid,params[])
{
if(PlayerInfo[playerid][xRibarska] == 0) return SendErrorMessage(playerid, "Nemate dozvolu za pecanje, izvadite je u opstini.");
SendInfoMessage(playerid, "Ukupno imate %i kilograma ribe.", PlayerInfo[playerid][xRibaKG]);
return true;}

CMD:uzmistap(playerid, params[])
{
if(!IsPlayerInRangeOfPoint(playerid,5.0,1156.2810,-2344.9553,13.5774)) return SendErrorMessage(playerid,"Niste na mestu za uzimanje stapa");
if(PlayerInfo[playerid][xRibarska] == 0) return SendErrorMessage(playerid, "Nemate dozvolu za pecanje, izvadite je u opstini.");
if(RibarOprema[playerid] == false) return SendErrorMessage(playerid, "Nemate opremu za pecanje!");
if(StapZaPecanje[playerid] >= 1) return SendErrorMessage(playerid,"Vi vec imate stap za pecanje!");
StapZaPecanje[playerid] = 1;
SendJobMessage(playerid,"Uzeli ste stap za pecanje, idite na jedno od mesta predvidjenom za pecanje.");
return true;}

CMD:prodajribu(playerid,params[])
{
if(!IsPlayerInRangeOfPoint(playerid,5.0,1149.903808, -2347.496093, 13.149600)) return SendErrorMessage(playerid,"Niste na mestu za prodaju ribe.");
if(PlayerInfo[playerid][xRibarska] == 0) return SendErrorMessage(playerid, "Nemate dozvolu za pecanje, izvadite je u opstini.");
new riba_total, payout;
riba_total = PlayerInfo[playerid][xRibaKG];
payout = riba_total*700;
new bonus = random(500);
if(PlayerInfo[playerid][xRibaKG] == 0) return SendErrorMessage(playerid,"Nemate ribe kod sebe!");
DajIgracuNovac(playerid, payout);
SendInfoMessage(playerid, "Prodali ste %dkg ribe za $%d.", PlayerInfo[playerid][xRibaKG], payout);
BusinessRibarMoney(playerid, 3200+bonus);
PlayerInfo[playerid][xRibaKG] = 0;
PlayerInfo[playerid][xRiba] = 0;
SavePlayer(playerid);
return true;}
CMD:uzmikutiju(playerid, params[], help) {

if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 6) || PlayerInfo[playerid][xHelper] > 0) {

	new hour, minute, seconds;
	gettimeEx(hour, minute, seconds);
	FixHour(hour);
	hour = shifthour;
	new admini = 0;
	foreach(new i : Player) {
		if(AdminDuty[i] == true) admini++;
	}

	if((hour >= 00) && (hour <= 10)) {}
	else {
		if(admini < 3) return SendErrorMessage(playerid, "Da bi radili posao u toku smene moraju biti bar 3 admina/helpera na duty.");
	}
}

if(PlayerInfo[playerid][xPosao] != POSAO_PEPSI) return SendErrorMessage(playerid, "Ne mozete to, niste zaposleni kao dostavljac pepsija!");
if(!IsPlayerInRangeOfPoint(playerid, 4.5, 935.5441, -1605.5848, 14.0430)) return SendErrorMessage(playerid, "Ne nalazite se na mestu za uzimanje kutija!");
if(DeliverLevel[playerid] == 0) return SendErrorMessage(playerid, "Vi nemate pokrenut posao, prvo udjite u jedan od slobodnih kamiona!");
if(DeliverLevel[playerid] != 1) return SendErrorMessage(playerid, "Ne mozete to sada!");
if(StateBox[DeliverCar[playerid]] == 5) return SendErrorMessage(playerid, "U vasem kamionu ima maksimalno kutija!");
if(CarriesBox[playerid] == 1) return SendErrorMessage(playerid, "Vec drzite kutiju u rukama, prvo je ostavite u kamion!");
if(AccountVerified[playerid] == false) return SendErrorMessage(playerid, "Prvo morate verifikovati svoj nalog(/vf).");

SendJobMessage(playerid, "Uzeli ste kutiju sa pepsijem, sada je ubacite u kamion sa kojim ste poceli posao!");
SendInfoMessage(playerid, "Kutiju sa pepsijem u kamion ubacujete na tipku ' Y '!");
SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
SetPlayerAttachedObject(playerid, OBJECT_SLOT_BADGE, 1221, 1, 0.494823, 0.720993, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
CarriesBox [playerid] = 1;
AccountVerified[playerid] = false;

return 1;}

CMD:posao(playerid, params[], help) {

if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 6) || PlayerInfo[playerid][xHelper] > 0) {

	new hour, minute, seconds;
	gettimeEx(hour, minute, seconds);
	FixHour(hour);
	hour = shifthour;
	new admini = 0;
	foreach(new i : Player) {
		if(AdminDuty[i] == true) admini++;
	}

	if((hour >= 00) && (hour <= 10)) {}
	else {
		if(admini < 3) return SendErrorMessage(playerid, "Da bi radili posao u toku smene moraju biti bar 3 admina/helpera na duty.");
	}
}

if(PlayerInfo[playerid][xPosao] == POSAO_KOSAC) {

	if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate opremu!");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 572) return SendErrorMessage(playerid, "Niste u vozilu za kosenje!");
	if(KrenuoKosenje[playerid]) return SendErrorMessage(playerid, "Vi vec kosite travu");
	if(AccountVerified[playerid] == false) return SendErrorMessage(playerid, "Prvo morate verifikovati svoj nalog(/vf).");

	AccountVerified[playerid] = false;
	Grass[0][playerid] = CreateDynamicObject(804, 1896.66553, -1164.87439, 23.29182, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[1][playerid] = CreateDynamicObject(804, 1889.11572, -1173.79102, 23.29182, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[2][playerid] = CreateDynamicObject(804, 1907.36780, -1175.36890, 22.98881, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[3][playerid] = CreateDynamicObject(804, 1905.89417, -1185.80408, 21.86453, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[4][playerid] = CreateDynamicObject(804, 1884.24878, -1186.52771, 22.47974, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[5][playerid] = CreateDynamicObject(804, 1880.18738, -1176.74414, 23.29182, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[6][playerid] = CreateDynamicObject(804, 1882.83313, -1166.63074, 23.29182, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[7][playerid] = CreateDynamicObject(804, 1908.11389, -1158.22351, 23.29182, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[8][playerid] = CreateDynamicObject(804, 1915.52881, -1168.47913, 22.58277, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[9][playerid] = CreateDynamicObject(804, 1919.59668, -1183.24731, 21.33503, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[10][playerid] = CreateDynamicObject(804, 1933.28137, -1179.54224, 19.88868, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[11][playerid] = CreateDynamicObject(804, 1949.05884, -1171.33215, 19.88683, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[12][playerid] = CreateDynamicObject(804, 1874.08337, -1192.70508, 22.34429, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[13][playerid] = CreateDynamicObject(804, 1893.12170, -1201.98572, 19.69623, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[14][playerid] = CreateDynamicObject(804, 1895.24854, -1216.91089, 17.12295, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[15][playerid] = CreateDynamicObject(804, 1909.69336, -1222.71655, 17.12295, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[16][playerid] = CreateDynamicObject(804, 1898.68140, -1227.75427, 15.67918, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[17][playerid] = CreateDynamicObject(804, 1922.14246, -1219.20972, 18.97170, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[18][playerid] = CreateDynamicObject(804, 1922.70166, -1203.88599, 19.57772, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[19][playerid] = CreateDynamicObject(804, 1935.54578, -1232.87317, 18.60017, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[20][playerid] = CreateDynamicObject(804, 1877.40833, -1209.61206, 18.75019, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[21][playerid] = CreateDynamicObject(804, 1867.62122, -1222.34546, 17.38106, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[22][playerid] = CreateDynamicObject(804, 1879.96777, -1229.14014, 15.66368, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[23][playerid] = CreateDynamicObject(804, 1887.87476, -1239.41479, 14.67632, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[24][playerid] = CreateDynamicObject(804, 2000.57190, -1165.13770, 20.54870, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[25][playerid] = CreateDynamicObject(804, 2040.23621, -1194.61609, 23.00000, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[26][playerid] = CreateDynamicObject(804, 2038.64819, -1246.65698, 22.54870, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[27][playerid] = CreateDynamicObject(804, 2014.83606, -1164.19128, 21.54870, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[28][playerid] = CreateDynamicObject(804, 1996.98413, -1174.00562, 19.88868, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[29][playerid] = CreateDynamicObject(804, 2008.72888, -1181.62671, 19.88868, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[30][playerid] = CreateDynamicObject(804, 2018.10535, -1195.49719, 20.00000, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[31][playerid] = CreateDynamicObject(804, 2011.09436, -1225.89502, 21.00000, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[32][playerid] = CreateDynamicObject(804, 2028.88879, -1158.75110, 22.54870, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[33][playerid] = CreateDynamicObject(804, 2037.63733, -1189.70251, 22.54870, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[34][playerid] = CreateDynamicObject(804, 2038.87378, -1223.65332, 22.54870, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[35][playerid] = CreateDynamicObject(804, 2029.91699, -1195.03821, 21.50000, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[36][playerid] = CreateDynamicObject(804, 2024.01514, -1236.34021, 22.00000, 0.00000, 0.00000, 0.00000, -1, -1, playerid);
	Grass[37][playerid] = CreateDynamicObject(804, 2014.13269, -1232.37280, 21.00000, 0.00000, 0.00000, 0.00000, -1, -1, playerid);

	for(new i = 0; i < 38; i++) GrassID[i][playerid] = 804;

	PokosenaTrava[playerid] = 0;
	KrenuoKosenje[playerid] = true;
	KosacTDControl(playerid, true);
	TravaTimer[playerid] = SetTimerEx("TravaT", 100, true, "i", playerid);

	SPD(playerid, dialog_EMPTY, DSMSG, "Posao Kosac trave",
		""col_white"Na mapi su kreirani objekti trave. Vas zadatak je pokositi ih kako bi izvrsili jednu rutu.\n" \
		"Trebate kosilicom preci preko objekta trave. Na kraju rute dobijate novac.", "U redu", "");

	StaroVreme[playerid] = gettime();
	NovoVreme[playerid] = 65;
	return 1;}
else if(PlayerInfo[playerid][xPosao] == POSAO_PILOT) {
	if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate opremu!");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 519 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 553) return SendErrorMessage(playerid, "Niste u vozilu posla pilot!");
	if(LetSF[playerid] != 0 || LetLV[playerid] != 0) return SendErrorMessage(playerid, "Vec imate aktiviran posao.");
	if(AccountVerified[playerid] == false) return SendErrorMessage(playerid, "Prvo morate verifikovati svoj nalog(/vf).");

	AccountVerified[playerid] = false;
	SPD(playerid, dialog_PILOT, DSL, D_NASLOV, ""col_server"(1). "col_white"Let LS - SF\n"col_server"(2). "col_white"Let LS - LV", D_ODABERI, D_ODUSTANI);
	return 1;}
else if(PlayerInfo[playerid][xPosao] == POSAO_PREVOZNIK) {
	SendJobMessage(playerid, "Da bi radili ovaj posao, koristite komandu "col_white"/lokacije"col_job".");
	return 1;}
else if(PlayerInfo[playerid][xPosao] == POSAO_FARMER) {
	SendJobMessage(playerid, "Da bi radio ovaj posao koristi komande "col_white"'/uzmisemenke /muzikrave /uzmikantu'");
	return 1;}
else if(PlayerInfo[playerid][xPosao] == POSAO_PEPSI) {
	SendJobMessage(playerid, "Da bi radio ovaj posao udji u jedan od slobodnih kombija.");
	return 1;}
else if(PlayerInfo[playerid][xPosao] == POSAO_BUSVOZAC) {

	if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate opremu!");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 437) return SendErrorMessage(playerid, "Niste u autobusu!");
	if(AccountVerified[playerid] == false) return SendErrorMessage(playerid, "Prvo morate verifikovati svoj nalog(/vf).");
	if(BusLinija[playerid] != 0) return SendErrorMessage(playerid, "Vec imas aktiviranu liniju, kucaj /prekiniposao!");
	Fusion_SetPlayerCheckpoint(playerid, 920.9799, -1688.3843, 13.5080, 5.0);
	CheckpointStatus[playerid] = 14;
	SendJobMessage(playerid, "Krenuli ste sa prevozom putnika, stanica je oznacena crveno na mapi!");
	BusLinija[playerid] = 1;
	StaroVreme[playerid] = gettime();
	NovoVreme[playerid] = 245;
	AccountVerified[playerid] = false;
	return 1;}
else if(PlayerInfo[playerid][xPosao] == POSAO_RUDAR) {

	if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate opremu!");
	if(AccountVerified[playerid] == false) return SendErrorMessage(playerid, "Prvo morate verifikovati svoj nalog(/vf).");
	if(PosaoRudar[playerid] != 0) return SendErrorMessage(playerid, "Vec ste poceli sa poslom.");

	Fusion_SetPlayerCheckpoint(playerid, RandomRudnik[0][0], RandomRudnik[0][1], RandomRudnik[0][2]-900, 2.5);
	CheckpointStatus[playerid] = 32;
	SendJobMessage(playerid, "Krenuli ste sa kopanjem ruda, mesto za kopanje je oznaceno crveno na mapi!");
	PosaoRudar[playerid] = 1;
	rudarPosao[playerid][rudarIskopano] = 0;
	AccountVerified[playerid] = false;
	return 1;}
else if(PlayerInfo[playerid][xPosao] == POSAO_VOCAR) {

	if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate opremu!");
	if(AccountVerified[playerid] == false) return SendErrorMessage(playerid, "Prvo morate verifikovati svoj nalog(/vf).");
	if(PosaoVocar[playerid] != 0) return SendErrorMessage(playerid, "Vec ste poceli sa poslom.");

	Fusion_SetPlayerCheckpoint(playerid, RandomVocar[0][0], RandomVocar[0][1], RandomVocar[0][2], 2.5);
	CheckpointStatus[playerid] = 41;
	SendJobMessage(playerid, "Krenuli ste sa branjem voca, idite do sledeceg drveta!");
	PosaoVocar[playerid] = 1;
	vocarPosao[playerid][vocarObrao] = 0;
	AccountVerified[playerid] = false;
	return 1;}
else if(PlayerInfo[playerid][xPosao] == POSAO_DRVOSECA) {

	if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate opremu!");
	if(AccountVerified[playerid] == false) return SendErrorMessage(playerid, "Prvo morate verifikovati svoj nalog(/vf).");
	if(PosaoDrvoseca[playerid] != 0) return SendErrorMessage(playerid, "Vec ste poceli sa poslom.");

	Fusion_SetPlayerCheckpoint(playerid, RandomDrvo[0][0], RandomDrvo[0][1], RandomDrvo[0][2], 2.5);
	CheckpointStatus[playerid] = 43;
	SendJobMessage(playerid, "Krenili ste sa secom drva, idite do sledeceg drva!");
	PosaoDrvoseca[playerid] = 1;
	drvosecaPosao[playerid][drvoIseko] = 0;
	AccountVerified[playerid] = false;
	return 1;}
else if(PlayerInfo[playerid][xPosao] == POSAO_PPROZORA) {
	if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate opremu!");
	SendJobMessage(playerid, "Popnite se gore - stanite na lift i kucajte /plift.");
	SendJobMessage(playerid, "Odaberite sprat, zatim dodjite do prozora i kucajte /operiprozor.");
	return 1;}
else if(PlayerInfo[playerid][xPosao] == POSAO_PREVOZNOVCA) {

	if(CheckpointStatus[playerid] != 0) return SendErrorMessage(playerid, "Vec imas aktiviran marker tako da ne mozes ovo koristiti.");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu za prevoz novca.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti na mestu vozaca.");
	if(GetVehicleModel(vehicleid) != 428) return SendErrorMessage(playerid, "Morate biti u vozilu za prevoz novca.");
	if(VehNovac[GetPlayerVehicleID(playerid)] == true) return SendErrorMessage(playerid, "Ovo vozilo vec ima utovaren novac.");
	if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate uniformu prevoznika novca!");
	if(AccountVerified[playerid] == false) return SendErrorMessage(playerid, "Prvo morate verifikovati svoj nalog(/vf).");
	if(!IsPlayerInRangeOfPoint(playerid, 100.0, 1504.6968, -1025.6024, 23.7875)) return SendErrorMessage(playerid, "Morate biti kod banke.");

	AccountVerified[playerid] = false;
	Fusion_SetPlayerCheckpoint(playerid, -1500.0902, 912.7291, 7.1875, 5.0);
	CheckpointStatus[playerid] = 35;
	SendJobMessage(playerid, "Zapoceli ste prevoz novca, idite prvo do "col_job"Sarajeva"col_white" da utovarite novac.");
	StaroVreme[playerid] = gettime();
	NovoVreme[playerid] = 185;

	return 1;}
else if(PlayerInfo[playerid][xPosao] == POSAO_PNAMESTAJA) {

	if(CheckpointStatus[playerid] != 0) return SendErrorMessage(playerid, "Vec imas aktiviran marker tako da ne mozes ovo koristiti.");
	if(NamestajLevel[playerid] > 0) return SendErrorMessage(playerid, "Vec imate zapocet posao!");
	if(UzeoOpremu[playerid] == false) return SendErrorMessage(playerid, "Nemate opremu!");
	if(AccountVerified[playerid] == false) return SendErrorMessage(playerid, "Prvo morate verifikovati svoj nalog(/vf).");
	if(ServerInfo[Drva] == 0) return SendErrorMessage(playerid, "Nema vise drva u resursima za proizvodnju namestaja.");

	SendJobMessage(playerid, "Zapoceli ste posao, otidjite do skladiste i uzmite drva komandom "col_job"/uzmidrvo!");
	Fusion_SetPlayerCheckpoint(playerid, 2159.8730,-2296.4348,13.4891, 4.0);
	CheckpointStatus[playerid] = 40;
	NamestajLevel[playerid] = 1;
	AccountVerified[playerid] = false;
	return 1;}
return 1;}

CMD:razbijlisice(playerid, params[]) {

new id, Float:Pos[3], policajci = 0;
if(sscanf(params, "u", id)) {
	SendUsageMessage(playerid, "/razbijlisice [ID/Deo imena]");
	return 1;}

if(!NosiObjekt[playerid][0]) return SendErrorMessage(playerid, "Nemas srafciger u ruci.");
if(id == playerid) return SendErrorMessage(playerid, "Ne mozes sam sebi.");
if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID korisnika.");
if(!IsPlayerNearPlayer(5.0, playerid, id)) return SendErrorMessage(playerid, "Niste blizu igraca ciji se ID uneli.");
if(PlayerCuffed[playerid] > 0) return SendErrorMessage(playerid, "Ne mozes dok si tazovan ili cuffovan.");

GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

foreach(new i : Player) {
	if(playerid != i && IsPlayerInRangeOfPoint(i, 10, Pos[0], Pos[1], Pos[2]) && GetFactionType(i) == ORG_TIP_PD) {
		policajci++;
	}
}

if(policajci != 0) return SendErrorMessage(playerid, "Ne mozes ovo dok ima policajaca u blizini.");

PlayerCuffed[id] = 0;
GameTextForPlayer(id, "~g~Razbene su vam lisice", 2500, 3);
TogglePlayerControllable(id, 1);
ClearAnimations(id);
if(IsPlayerAttachedObjectSlotUsed(id, OBJECT_SLOT_RHAND)) RemovePlayerAttachedObject(id, OBJECT_SLOT_RHAND);
SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
return 1;}

CMD:objects(playerid, params[]) {
new item[32], izbor, id = -1;
if(sscanf(params, "s[32] ", item)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/objects [opcija]");
	SCM(playerid, BELA, "[Opcije] kupi, uzmi, ostavi");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(strcmp(item, "kupi",true) == 0) {
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2196.9570,-2.2537,26.5393)) return SendErrorMessage(playerid, "Nisi kod kucice na otpadu !");
	if(sscanf(params, "s[32]d", item, izbor)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/objects kupi [broj predmeta]");
		SCM(playerid, BELA, "[Broj predmeta] 1. Srafciger 2. Pajser 3. Cekic");
		SCM(playerid, BELA, "[Cena] 1. Srafciger(20$) 2. Pajser(50$) 3. Cekic(20$)");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if(izbor == 1) {

		if(Inventory_HasItem(playerid, "Srafciger")) {
			SendErrorMessage(playerid, "Vec imate srafciger.");
			return 1;
		}

		if(PlayerInfo[playerid][xNovac] < 20) return SendErrorMessage(playerid, "Nemate dovoljno novca(20$).");

		id = Inventory_Add(playerid, "Srafciger", 18644);

		if(id != -1) {
			DajIgracuNovac(playerid, -20);
			SCM(playerid, ZUTA, "Kupili ste srafciger i dodan vam je u inventory.");
		}
		else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");

	}
	else if(izbor == 2) {

		if(Inventory_HasItem(playerid, "Pajser")) {
			SendErrorMessage(playerid, "Vec imate pajser.");
			return 1;
		}

		if(PlayerInfo[playerid][xNovac] < 50) return SendErrorMessage(playerid, "Nemate dovoljno novca(50$).");

		id = Inventory_Add(playerid, "Pajser", 18634);

		if(id != -1) {
			DajIgracuNovac(playerid, -50);
			SCM(playerid, ZUTA, "Kupili ste pajser i dodan vam je u inventory.");
		}
		else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");
	}
	else if(izbor == 3) {
		if(Inventory_HasItem(playerid, "Cekic")) {
			SendErrorMessage(playerid, "Vec imate cekic.");
			return 1;
		}

		if(PlayerInfo[playerid][xNovac] < 20) return SendErrorMessage(playerid, "Nemate dovoljno novca(20$).");

		id = Inventory_Add(playerid, "Cekic", 18635);

		if(id != -1) {
			DajIgracuNovac(playerid, -20);
			SCM(playerid, ZUTA, "Kupili ste cekic i dodan vam je u inventory.");
		}
		else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");
	}
	else return SendErrorMessage(playerid, "Pogresan broj predmeta.");
	return 1;}
else if(strcmp(item, "uzmi",true) == 0) {
	SendInfoMessage(playerid, "Uzimanje se vrsi preko komande /inv.");
	return 1;}
else if(strcmp(item, "ostavi",true) == 0) {
	if(sscanf(params, "s[32]d", item, izbor)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/objects ostavi [broj predmeta]");
		SCM(playerid, BELA, "[Broj predmeta] 1. Srafciger 2. Pajser 3. Cekic");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if(izbor == 1) {

		if(NosiObjekt[playerid][0] == false) return SendErrorMessage(playerid, "Nemate srafciger u rukama.");
		if(!IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_LHAND)) return SendErrorMessage(playerid, "Nemas nijedan objekt u levoj ruci!");

		id = Inventory_Add(playerid, "Srafciger", 18644);

		if(id != -1) {
			RemovePlayerAttachedObject(playerid, OBJECT_SLOT_LHAND);
			NosiObjekt[playerid][0] = false;
			SCM(playerid, ZUTA, "Ostavio si srafciger u inventory.");
		}
		else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");

	}
	else if(izbor == 2) {

		if(NosiObjekt[playerid][1] == false) return SendErrorMessage(playerid, "Nemate pajser u rukama.");
		if(!IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_LHAND)) return SendErrorMessage(playerid, "Nemas nijedan objekt u levoj ruci!");

		id = Inventory_Add(playerid, "Pajser", 18634);

		if(id != -1) {
			RemovePlayerAttachedObject(playerid, OBJECT_SLOT_LHAND);
			NosiObjekt[playerid][1] = false;
			SCM(playerid, ZUTA, "Ostavio si pajser u inventory..");
		}
		else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");
	}
	else if(izbor == 3) {

		if(NosiObjekt[playerid][2] == false) return SendErrorMessage(playerid, "Nemate cekic u rukama.");
		if(!IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_LHAND)) return SendErrorMessage(playerid, "Nemas nijedan objekt u levoj ruci!");

		id = Inventory_Add(playerid, "Cekic", 18635);

		if(id != -1) {
			RemovePlayerAttachedObject(playerid, OBJECT_SLOT_LHAND);
			NosiObjekt[playerid][2] = false;
			SCM(playerid, ZUTA, "Ostavio si cekic u inventory..");
		}
		else return SendErrorMessage(playerid, "Pun vam je inventory nemate mesta gde da stavite stvari.");
	}
	else return SendErrorMessage(playerid, "Pogresan broj predmeta.");
	return 1;}
else {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/objects [opcija]");
	SCM(playerid, BELA, "[Opcije] kupi, uzmi, ostavi");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");}
return 1;}
// - Streljana
CMD:fullskill(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

new id;
if(sscanf(params, "u", id)) {
	SendUsageMessage(playerid, "/fullskill [ID/Deo imena]");
	return 1;}
if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");

PlayerInfo[id][xDeagleSkill] = 999;
PlayerInfo[id][xPistolSkill] = 999;
PlayerInfo[id][xM4Skill] = 999; 
PlayerInfo[id][xAKSkill] = 999;
PlayerInfo[id][xMPSkill] = 999;
PlayerInfo[id][xShotgunSkill] = 999;
PlayerInfo[id][xSawnSkill] = 999;
PlayerInfo[id][xSniperSkill] = 999;
PlayerInfo[id][xCombatSkill] = 999;

SetPlayerSkillLevel(id, WEAPONSKILL_PISTOL, PlayerInfo[id][xPistolSkill]);
SetPlayerSkillLevel(id, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[id][xDeagleSkill]);
SetPlayerSkillLevel(id, WEAPONSKILL_SHOTGUN, PlayerInfo[id][xShotgunSkill]);
SetPlayerSkillLevel(id, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[id][xSawnSkill]);
SetPlayerSkillLevel(id, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[id][xCombatSkill]);
SetPlayerSkillLevel(id, WEAPONSKILL_MP5, PlayerInfo[id][xMPSkill]);
SetPlayerSkillLevel(id, WEAPONSKILL_AK47, PlayerInfo[id][xAKSkill]);
SetPlayerSkillLevel(id, WEAPONSKILL_M4, PlayerInfo[id][xM4Skill]);
SetPlayerSkillLevel(id, WEAPONSKILL_SNIPERRifLE, PlayerInfo[id][xSniperSkill]);

SavePlayer(id);

SendInfoMessage(playerid, "Dali ste %s Full Skill na svakom oruzju.", ImeIgraca(id));
SendInfoMessage(id, "Admin %s vam je postavio Full Skill na svakom oruzju (/skills).", ImeIgraca(playerid));

new varstring[200];
format(varstring, sizeof(varstring), "{36AB00][DONACIJA]: "col_white"Vlasnik {36AB00]%s"col_white" je postavio igracu {36AB00]%s"col_white" Full Skill na svakom oruzju.", ImeIgraca(playerid), ImeIgraca(id));
SCMA(-1, varstring);
return 1;}
CMD:skinifullskill(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

new id;
if(sscanf(params, "u", id)) {
	SendUsageMessage(playerid, "/skinifullskill [ID/Deo imena]");
	return 1;}
if(id == IPI) return SendErrorMessage(playerid, "Taj igrac nije na serveru.");

PlayerInfo[id][xDeagleSkill] = 0;
PlayerInfo[id][xPistolSkill] = 0;
PlayerInfo[id][xM4Skill] = 0; 
PlayerInfo[id][xAKSkill] = 0;
PlayerInfo[id][xMPSkill] = 0;
PlayerInfo[id][xShotgunSkill] = 0;
PlayerInfo[id][xSawnSkill] = 0;
PlayerInfo[id][xSniperSkill] = 0;
PlayerInfo[id][xCombatSkill] = 0;

SetPlayerSkillLevel(id, WEAPONSKILL_PISTOL, PlayerInfo[id][xPistolSkill]);
SetPlayerSkillLevel(id, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[id][xDeagleSkill]);
SetPlayerSkillLevel(id, WEAPONSKILL_SHOTGUN, PlayerInfo[id][xShotgunSkill]);
SetPlayerSkillLevel(id, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[id][xSawnSkill]);
SetPlayerSkillLevel(id, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[id][xCombatSkill]);
SetPlayerSkillLevel(id, WEAPONSKILL_MP5, PlayerInfo[id][xMPSkill]);
SetPlayerSkillLevel(id, WEAPONSKILL_AK47, PlayerInfo[id][xAKSkill]);
SetPlayerSkillLevel(id, WEAPONSKILL_M4, PlayerInfo[id][xM4Skill]);
SetPlayerSkillLevel(id, WEAPONSKILL_SNIPERRifLE, PlayerInfo[id][xSniperSkill]);

SavePlayer(id);

SendInfoMessage(playerid, "Oduzeli ste %s Full Skill za svako oruzje.", ImeIgraca(id));
SendInfoMessage(id, "Admin %s vam je oduzeo Full Skill za svako oruzje (/skills).", ImeIgraca(playerid));
return 1;}
CMD:skills(playerid, params[]) {
new deagle = PlayerInfo[playerid][xDeagleSkill];
new pistol = PlayerInfo[playerid][xPistolSkill];
new m4 = PlayerInfo[playerid][xM4Skill];
new ak = PlayerInfo[playerid][xAKSkill]; 
new mp = PlayerInfo[playerid][xMPSkill];
new shot = PlayerInfo[playerid][xShotgunSkill];
new sawn = PlayerInfo[playerid][xSawnSkill];
new sniper = PlayerInfo[playerid][xSniperSkill];
new combat = PlayerInfo[playerid][xCombatSkill];
new strex[756], varstring[70];
format(varstring, sizeof(varstring), ""col_white"Weapon Skills - "col_server"%s\n\n", ImeIgraca(playerid));
strcat(strex, varstring);
format(varstring, sizeof(varstring), ""col_server"Desert Eagle: "col_white"[%d/999]\n", deagle);
strcat(strex, varstring);
format(varstring, sizeof(varstring), ""col_server"Pistol: "col_white"[%d/999]\n", pistol);
strcat(strex, varstring);
format(varstring, sizeof(varstring), ""col_server"M4: "col_white"[%d/999]\n", m4);
strcat(strex, varstring);
format(varstring, sizeof(varstring), ""col_server"AK-47: "col_white"[%d/999]\n", ak);
strcat(strex, varstring);
format(varstring, sizeof(varstring), ""col_server"MP5: "col_white"[%d/999]\n", mp);
strcat(strex, varstring);
format(varstring, sizeof(varstring), ""col_server"Shotgun: "col_white"[%d/999]\n", shot);
strcat(strex, varstring);
format(varstring, sizeof(varstring), ""col_server"Sawnoff Shotgun: "col_white"[%d/999]\n", sawn);
strcat(strex, varstring);
format(varstring, sizeof(varstring), ""col_server"Sniper Rifle: "col_white"[%d/999]\n", sniper);
strcat(strex, varstring);
format(varstring, sizeof(varstring), ""col_server"Combat Shotgun: "col_white"[%d/999]\n", combat);
strcat(strex, varstring);
SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, strex, "Ok", "");
strdel(strex, 0, sizeof(strex));
return 1;}
CMD:streljana(playerid, params[]) {
if(IsPlayerInRangeOfPoint(playerid,2.0,300.3199,-138.5692,1004.0625) || IsPlayerInRangeOfPoint(playerid,2.0,300.2065,-130.9500,1004.0625) ||
IsPlayerInRangeOfPoint(playerid,2.0,300.2224,-127.9862,1004.0625) || IsPlayerInRangeOfPoint(playerid,2.0,300.3398,-135.5488,1004.0625)) 
{
	if(Trenirao[playerid] > 0) return SendErrorMessage(playerid, "Vec ste trenirali, sacekajte malo!");
	if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete trenirati, imate zabranu - /disarmtime.");
	if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Ne mozete trenirati jer niste level 3+.");
	if(PoliceDuty[playerid]) return SendErrorMessage(playerid, "Ne mozete trenirati dok ste na duznosti.");
	if(PlayerInfo[playerid][xWanted] > 0) return SendErrorMessage(playerid, "Ne mozete trenirati jer imate Wanted.");
	SPD(playerid, dialog_STRELJANA, DSL, D_NASLOV, "Desert Eagle\nPistol\nM4\nAK-47\nMP5\nShotgun\nSawnoff Shotgun\nSniper Rifle\nCombat Shotgun", D_ODABERI, D_ODUSTANI);}
else 
{
	SendErrorMessage(playerid, "Morate biti u streljani.");}
return 1;}
//
CMD:udjinadm(playerid, params[]) {
new sat, minut, sekund;
gettime(sat, minut, sekund);
if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Ne mozes ako nisi level 3+.");
if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete na DM, imate zabranu - /disarmtime.");
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 981.7814,-1162.0131,25.0859)) return SendErrorMessage(playerid, "Niste kod ulaza u DM Zonu.");
if(PlayerInfo[playerid][xWanted] > 0) return SendErrorMessage(playerid, "Ne mozes na DM sa WLom.");
if(PoliceDuty[playerid]) return SendErrorMessage(playerid, "Ne mozes sa PD duty u DM zonu.");
if((PlayerInfo[playerid][xAdmin] > 0 && PlayerInfo[playerid][xAdmin] < 5) || PlayerInfo[playerid][xHelper] > 0) {
	new hour, minute, second;
	gettimeEx(hour, minute, second);
	FixHour(hour);
	hour = shifthour;

	new admini = 0;
	foreach(new i : Player) {
		if(AdminDuty[i] == true) admini++;
	}

	if((hour >= 00) && (hour <= 10)) {}
	else {
		if(admini < 3) return SendErrorMessage(playerid, "Da bi bili u DM zoni za vreme smene moraju biti bar 3 admina/helpera na duty.");
	}
}

NaDmEventu[playerid] = true;
new rand = random(sizeof(RandomDMPos));
ac_SetPlayerPos(playerid, RandomDMPos[rand][0], RandomDMPos[rand][1],RandomDMPos[rand][2]);
SetPlayerFacingAngle(playerid, 360.000);
SetCameraBehindPlayer(playerid);
ac_SetPlayerInterior(playerid, 0);
SetPlayerVirtualWorld(playerid, 10);

Fusion_SetPlayerHealth(playerid, 100);
Fusion_SetPlayerArmour(playerid, 100);

if(PlayerInfo[playerid][xDMEventUbistva] >= 4500) {
	SendInfoMessage(playerid, "Usao si na DM sa rankom 10.");
	GiveWeaponToPlayer(playerid, 24, 150);
	GiveWeaponToPlayer(playerid, 26, 150);
	GiveWeaponToPlayer(playerid, 28, 400);
	GiveWeaponToPlayer(playerid, 31, 400);}
else if(PlayerInfo[playerid][xDMEventUbistva] >= 4000) {
	SendInfoMessage(playerid, "Usao si na DM sa rankom 9.");
	GiveWeaponToPlayer(playerid, 24, 150);
	GiveWeaponToPlayer(playerid, 27, 150);
	GiveWeaponToPlayer(playerid, 32, 800);
	GiveWeaponToPlayer(playerid, 31, 400);}
else if(PlayerInfo[playerid][xDMEventUbistva] >= 3500) {
	SendInfoMessage(playerid, "Usao si na DM sa rankom 8.");
	GiveWeaponToPlayer(playerid, 24, 150);
	GiveWeaponToPlayer(playerid, 27, 150);
	GiveWeaponToPlayer(playerid, 28, 800);
	GiveWeaponToPlayer(playerid, 31, 400);}
else if(PlayerInfo[playerid][xDMEventUbistva] >= 3000) {
	SendInfoMessage(playerid, "Usao si na DM sa rankom 7.");
	GiveWeaponToPlayer(playerid, 24, 150);
	GiveWeaponToPlayer(playerid, 27, 150);
	GiveWeaponToPlayer(playerid, 29, 400);
	GiveWeaponToPlayer(playerid, 31, 400);}
else if(PlayerInfo[playerid][xDMEventUbistva] >= 2500) {
	SendInfoMessage(playerid, "Usao si na DM sa rankom 6.");
	GiveWeaponToPlayer(playerid, 24, 150);
	GiveWeaponToPlayer(playerid, 26, 150);
	GiveWeaponToPlayer(playerid, 29, 400);
	GiveWeaponToPlayer(playerid, 31, 400);}
else if(PlayerInfo[playerid][xDMEventUbistva] >= 2000) {
	SendInfoMessage(playerid, "Usao si na DM sa rankom 5.");
	GiveWeaponToPlayer(playerid, 24, 150);
	GiveWeaponToPlayer(playerid, 26, 150);
	GiveWeaponToPlayer(playerid, 29, 400);
	GiveWeaponToPlayer(playerid, 30, 400);}
else if(PlayerInfo[playerid][xDMEventUbistva] >= 1500) {
	SendInfoMessage(playerid, "Usao si na DM sa rankom 4.");
	GiveWeaponToPlayer(playerid, 24, 150);
	GiveWeaponToPlayer(playerid, 25, 100);
	GiveWeaponToPlayer(playerid, 29, 400);
	GiveWeaponToPlayer(playerid, 31, 400);}
else if(PlayerInfo[playerid][xDMEventUbistva] >= 1000) {
	SendInfoMessage(playerid, "Usao si na DM sa rankom 3.");
	GiveWeaponToPlayer(playerid, 24, 150);
	GiveWeaponToPlayer(playerid, 25, 100);
	GiveWeaponToPlayer(playerid, 29, 400);
	GiveWeaponToPlayer(playerid, 30, 400);}
else if(PlayerInfo[playerid][xDMEventUbistva] >= 500) {
	SendInfoMessage(playerid, "Usao si na DM sa rankom 2.");
	GiveWeaponToPlayer(playerid, 24, 200);
	GiveWeaponToPlayer(playerid, 25, 100);
	GiveWeaponToPlayer(playerid, 29, 400);}
else if(PlayerInfo[playerid][xDMEventUbistva] >= 0) {
	SendInfoMessage(playerid, "Usao si na DM sa rankom 1.");
	GiveWeaponToPlayer(playerid, 24, 200);
	GiveWeaponToPlayer(playerid, 25, 100);}

SendInfoMessage(playerid, "Da izadjes iz DM zone, kucaj /izadjiizdm.");
return 1;}

CMD:izadjisacs(playerid, params[]) {

if(NaDustu[playerid] == false && NaInferno[playerid] == false && NaAssault[playerid] == false && NaSnow[playerid] == false) return SendErrorMessage(playerid, "Niste na CS mapi.");
if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes dok si u zatvoru.");
new Float:H; GetPlayerHealth(playerid, H);
if(H < 10.0) return SendErrorMessage(playerid, "Ne mozes da izadjes iz CS zone kada imas manje od 10hp.");
if(PlayerInfo[playerid][xSpawned] == 0) return SendErrorMessage(playerid, "Ne mozes izaci iz CS zone dok ne budes spawnovan.");

ac_SetPlayerPos(playerid, 1466.3201, 1416.2100, -5.0676);
TogglePlayerControllable(playerid, false);
SetPlayerFacingAngle(playerid, 360.000);
SetCameraBehindPlayer(playerid);
ac_SetPlayerInterior(playerid, 1);
SetPlayerVirtualWorld(playerid, 1);
ResetAllWeapons(playerid);
Fusion_SetPlayerHealth(playerid, 70);
Fusion_SetPlayerArmour(playerid, 0);
GameTextForPlayer(playerid, "Ucitavanje ...", 2000, 4);
SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
if(NaDustu[playerid] == true)
{
	if (dustply >=1) dustply--;
	NaDustu[playerid] = false;}
if(NaInferno[playerid] == true)
{
	if (infernoply >=1) infernoply--;
	NaInferno[playerid] = false;}
if(NaAssault[playerid] == true)
{
	if (assaultply >=1) assaultply--;
	NaAssault[playerid] = false;}
if(NaSnow[playerid] == true)
{
	if (snowply >=1) snowply--;
	NaSnow[playerid] = false;}
SendInfoMessage(playerid, "Izasli ste iz Counter Strike mape.");
return 1;}

CMD:izadjiizdm(playerid, params[]) {

if(NaDmEventu[playerid] == false) return SendErrorMessage(playerid, "Nisi u DM zoni.");
if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes dok si u zatvoru.");
new Float:H; GetPlayerHealth(playerid, H);
if(H < 10.0) return SendErrorMessage(playerid, "Ne mozes da izadjes iz DM zone kada imas manje od 10hp.");
if(PlayerInfo[playerid][xSpawned] == 0) return SendErrorMessage(playerid, "Ne mozes izaci iz DM zone dok ne budes spawnovan.");

ac_SetPlayerPos(playerid, 981.7814,-1162.0131,25.0859);
SetPlayerFacingAngle(playerid, 360.000);
SetCameraBehindPlayer(playerid);
ac_SetPlayerInterior(playerid, 0);
SetPlayerVirtualWorld(playerid, 0);
ResetAllWeapons(playerid);
Fusion_SetPlayerHealth(playerid, 70);
Fusion_SetPlayerArmour(playerid, 0);

NaDmEventu[playerid] = false;
SendInfoMessage(playerid, "Izasao si iz DM zone.");
return 1;}

CMD:izadjisatrke(playerid, params[]) {

if(!NaUtrci[playerid]) return SendErrorMessage(playerid, "Niste na trci.");
new izazivac = PonudioIgrac[playerid];

DisablePlayerRaceCheckpoint(playerid);
NaUtrci[playerid] = false; Krugovi[playerid] = 0; TrkaIzazov[playerid] = 0; StaroVreme[playerid] = 0;
Fusion_DestroyVehicle(TrkaVozilo[playerid]); TrkaVozilo[playerid] = -1;
ac_SetPlayerPos(playerid, PlayerPos[playerid][0], PlayerPos[playerid][1],  PlayerPos[playerid][2]);
SetPlayerVirtualWorld(playerid, PlayerPosVW[playerid]);
ac_SetPlayerInterior(playerid, PlayerPosInt[playerid]); TrkaCheckpoint[playerid] = 0;
SendInfoMessage(playerid, "Izasli ste sa trke i izgubili %d$.", UlogTrke[playerid]);

if(izazivac != IPI) {

	DisablePlayerRaceCheckpoint(izazivac);
	SendInfoMessage(izazivac, "Igrac je napustio trku i osvojili ste %d$.", (UlogTrke[playerid]*2));
	DajIgracuNovac(izazivac, (UlogTrke[playerid]*2));
	NaUtrci[izazivac] = false; Krugovi[izazivac] = 0; TrkaIzazov[izazivac] = 0; StaroVreme[izazivac] = 0;
	Fusion_DestroyVehicle(TrkaVozilo[izazivac]); TrkaVozilo[izazivac] = -1;
	ac_SetPlayerPos(izazivac, PlayerPos[izazivac][0], PlayerPos[izazivac][1],  PlayerPos[izazivac][2]);
	SetPlayerVirtualWorld(izazivac, PlayerPosVW[izazivac]);
	ac_SetPlayerInterior(izazivac, PlayerPosInt[izazivac]); TrkaCheckpoint[izazivac] = 0;}
return 1;}

forward HangarPonovo();
public HangarPonovo() {
if(ServerInfo[HangarPaket] < 9)
{
	ServerInfo[HangarPaket]++;
	new hangarstring[256];
	format(hangarstring, sizeof(hangarstring), ""col_server"[HANGAR]\n"col_white"Da uzmete paket kucajte - "col_server"/uzmipaket\n"col_white"Trenutno ima "col_server"%d "col_white"paketa u hangaru", ServerInfo[HangarPaket]);
	UpdateDynamic3DTextLabelText(ServerInfo[HangarLabel], -1, hangarstring);
	foreach(new i : Player)
	{
		if(GetFactionType(i) == ORG_TIP_MAFIJA || GetFactionType(i) == ORG_TIP_BANDA || GetFactionType(i) == ORG_TIP_SR || GetFactionType(i) == ORG_TIP_MC)
		{
			SendClientMessage(i, 0x95b4a2FF, "Novi paket sa oruzjem je upravo prosvercovan u hangar, pokupite ga.");
		}
	}
}
if(ServerInfo[HangarPaket] >= 10)
{
	ServerInfo[HangarPaket] = 9;
	new hangarstring[256];
	format(hangarstring, sizeof(hangarstring), ""col_server"[HANGAR]\n"col_white"Da uzmete paket kucajte - "col_server"/uzmipaket\nTrenutno ima "col_server"%d "col_white"paketa u hangaru", ServerInfo[HangarPaket]);
	UpdateDynamic3DTextLabelText(ServerInfo[HangarLabel], -1, hangarstring);}
return 1;}

CMD:uzmipaket(playerid, params[]) {
if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Moras biti van vozila.");
if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti level 3+.");
if(GetFactionType(playerid) == ORG_TIP_MAFIJA || GetFactionType(playerid) == ORG_TIP_BANDA || GetFactionType(playerid) == ORG_TIP_SR || GetFactionType(playerid) == ORG_TIP_MC) {

	if(IsPlayerInRangeOfPoint(playerid, 3.0, -366.1427,-1044.2151,59.6480)) {
		if(ServerInfo[HangarPaket] == 0) return SendErrorMessage(playerid, "Trenutno nema paketa u hangaru.");
		if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete uzeti paket, imate zabranu - /disarmtime.");

		if(PlayerInfo[playerid][xHangarTime] != 0) return SendErrorMessage(playerid, "Vec ste uzeli paket, sacekajte jos %d minuta.", PlayerInfo[playerid][xHangarTime]);
		new broj, hangarstring[256];
		if(sscanf(params, "d", broj)) {
			SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
			SendUsageMessage(playerid, "/uzmipaket [broj paketa]");
			SCM(playerid, BELA, "Paket 1 - Deagle [75 metaka] + M4 [200 metaka]");
			SCM(playerid, BELA, "Paket 2 - Shotgun [100 metaka] + AK47 [200 metaka]");
			SCM(playerid, BELA, "Paket 3 - Sniper [10 metaka] + MP5 [200 metaka] ");
			SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
			return 1;
		}
		if(broj == 1) {
			GiveWeaponToPlayer(playerid, 24, 75);
			GiveWeaponToPlayer(playerid, 31, 200);
			ServerInfo[HangarPaket]--;
			SendInfoMessage(playerid, "Uzeli ste paket 1 iz hangara sa Deagleom(75 metaka) i M4(200 metaka).");
			PlayerInfo[playerid][xHangarTime] = 15;
			SavePlayer(playerid);
			format(hangarstring, sizeof(hangarstring), ""col_server"[HANGAR]\n"col_white"Da uzmete paket kucajte - "col_server"/uzmipaket\n"col_white"Trenutno ima "col_server"%d "col_white"paketa u hangaru", ServerInfo[HangarPaket]);
			UpdateDynamic3DTextLabelText(ServerInfo[HangarLabel], -1, hangarstring);
		}
		else if(broj == 2) {
			GiveWeaponToPlayer(playerid, 25, 100);
			GiveWeaponToPlayer(playerid, 30, 200);
			ServerInfo[HangarPaket]--;
			SendInfoMessage(playerid, "Uzeli ste paket 2 iz hangara sa Shotgun(100 metaka) i AK47(200 metaka).");
			PlayerInfo[playerid][xHangarTime] = 15;
			SavePlayer(playerid);
			format(hangarstring, sizeof(hangarstring), ""col_server"[HANGAR]\n"col_white"Da uzmete paket kucajte - "col_server"/uzmipaket\n"col_white"Trenutno ima "col_server"%d "col_white"paketa u hangaru", ServerInfo[HangarPaket]);
			UpdateDynamic3DTextLabelText(ServerInfo[HangarLabel], -1, hangarstring);
		}
		else if(broj == 3) {
			GiveWeaponToPlayer(playerid, 34, 10);
			GiveWeaponToPlayer(playerid, 29, 200);
			ServerInfo[HangarPaket]--;	         
			SendInfoMessage(playerid, "Uzeli ste paket 3 iz hangara sa Sniper(10 metaka) i MP5(200 metaka).");
			PlayerInfo[playerid][xHangarTime] = 15;
			SavePlayer(playerid);
			format(hangarstring, sizeof(hangarstring), ""col_server"[HANGAR]\n"col_white"Da uzmete paket kucajte - "col_server"/uzmipaket\n"col_white"Trenutno ima "col_server"%d "col_white"paketa u hangaru", ServerInfo[HangarPaket]);
			UpdateDynamic3DTextLabelText(ServerInfo[HangarLabel], -1, hangarstring);
		}
		else return SendErrorMessage(playerid, "Broj paketa ne moze ici ispod 1 i iznad 3.");
	}
	else return SendErrorMessage(playerid, "Morate biti u hangaru.");}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:zamena(playerid, params[]) {

new id, moje, njegovo, ponuda[128], trazi[128];

if(sscanf(params, "uii", id, moje, njegovo)) {

	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/zamena [ID Igraca] [Izbor 1 - sta menjate] [Izbor 2 - za sta menjate]");
	SendUsageMessage(playerid, "Izbor: 1. Vozilo slot 1 | 2. Vozilo slot 2 | 3. Vozilo slot 3 | 4. Vozilo slot 4");
	SendUsageMessage(playerid, "Izbor: 5. Imovina slot 1 | 6. Imovina slot 2 | 7. Imovina slot 3 | 8. Firma");
	SendInfoMessage(playerid, "Ovom komandom menjate svoju imovinu za imovinu drugog igraca.");
	SendInfoMessage(playerid, "Potrazite igracevu saobracajnu pre zamene (/pokazisaobracajnu [vas id])");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}

if(gettime() < CommandTime[playerid]) 	return SendErrorMessage(playerid, "Ovu komandu mozete koristiti svakih 5 minuta!");
if(id == playerid) return SendErrorMessage(playerid, "Ne mozes zameniti sam sa sobom.");
if(moje < 1 || moje > 8 || njegovo < 1 || njegovo > 8) return SendErrorMessage(playerid, "Pogresan izbor broja(1 - 8).");
if(!IsPlayerNearPlayer(3.0, playerid, id)) return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");

if(moje == 1) {
	if(PlayerInfo[playerid][xVoziloID][0] == -1) return SendErrorMessage(playerid, "Nemate vozilo u slotu 1.");
	format(ponuda, sizeof(ponuda), "o "col_server"vozilo marke %s", GetVehicleNameEx(GetVehicleModel(VehicleInfo[PlayerInfo[playerid][xVoziloID][0]][vID])));

	if(PlayerInfo[id][xVoziloID][0] == -1) {}
	else if(PlayerInfo[id][xVoziloID][1] == -1) {}
	else if(PlayerInfo[id][xVoziloID][2] == -1) {}
	else if(PlayerInfo[id][xVoziloID][3] == -1) {
		if(PlayerInfo[id][xDonatorSlot] == true) {}
		else return SendErrorMessage(playerid, "Svi slotovi vozila su tom igracu zauzeti.");
	}
	else return SendErrorMessage(playerid, "Svi slotovi vozila su tom igracu zauzeti.");

	GlobalID[id] = PlayerInfo[playerid][xVoziloID][0];}
else if(moje == 2) {
	if(PlayerInfo[playerid][xVoziloID][1] == -1) return SendErrorMessage(playerid, "Nemate vozilo u slotu 2.");
	format(ponuda, sizeof(ponuda), "o "col_server"vozilo marke %s", GetVehicleNameEx(GetVehicleModel(VehicleInfo[PlayerInfo[playerid][xVoziloID][1]][vID])));

	if(PlayerInfo[id][xVoziloID][0] == -1) {}
	else if(PlayerInfo[id][xVoziloID][1] == -1) {}
	else if(PlayerInfo[id][xVoziloID][2] == -1) {}
	else if(PlayerInfo[id][xVoziloID][3] == -1) {
		if(PlayerInfo[id][xDonatorSlot] == true) {}
		else return SendErrorMessage(playerid, "Svi slotovi vozila su tom igracu zauzeti.");
	}
	else return SendErrorMessage(playerid, "Svi slotovi vozila su tom igracu zauzeti.");

	GlobalID[id] = PlayerInfo[playerid][xVoziloID][1];}
else if(moje == 3) {
	if(PlayerInfo[playerid][xVoziloID][2] == -1) return SendErrorMessage(playerid, "Nemate vozilo u slotu 3.");
	format(ponuda, sizeof(ponuda), "o "col_server"vozilo marke %s", GetVehicleNameEx(GetVehicleModel(VehicleInfo[PlayerInfo[playerid][xVoziloID][2]][vID])));

	if(PlayerInfo[id][xVoziloID][0] == -1) {}
	else if(PlayerInfo[id][xVoziloID][1] == -1) {}
	else if(PlayerInfo[id][xVoziloID][2] == -1) {}
	else if(PlayerInfo[id][xVoziloID][3] == -1) {
		if(PlayerInfo[id][xDonatorSlot] == true) {}
		else return SendErrorMessage(playerid, "Svi slotovi vozila su tom igracu zauzeti.");
	}
	else return SendErrorMessage(playerid, "Svi slotovi vozila su tom igracu zauzeti.");

	GlobalID[id] = PlayerInfo[playerid][xVoziloID][2];}
else if(moje == 4) {
	if(PlayerInfo[playerid][xVoziloID][3] == -1) return SendErrorMessage(playerid, "Nemate vozilo u slotu 4.");
	format(ponuda, sizeof(ponuda), "o "col_server"vozilo marke %s", GetVehicleNameEx(GetVehicleModel(VehicleInfo[PlayerInfo[playerid][xVoziloID][3]][vID])));

	if(PlayerInfo[id][xVoziloID][0] == -1) {}
	else if(PlayerInfo[id][xVoziloID][1] == -1) {}
	else if(PlayerInfo[id][xVoziloID][2] == -1) {}
	else if(PlayerInfo[id][xVoziloID][3] == -1) {
		if(PlayerInfo[id][xDonatorSlot] == true) {}
		else return SendErrorMessage(playerid, "Svi slotovi vozila su tom igracu zauzeti.");
	}
	else return SendErrorMessage(playerid, "Svi slotovi vozila su tom igracu zauzeti.");

	GlobalID[id] = PlayerInfo[playerid][xVoziloID][3];}
else if(moje == 5) {
	if(PlayerInfo[playerid][xProperty][0] == -1) return SendErrorMessage(playerid, "Nemate imovinu u slotu 1.");
	format(ponuda, sizeof(ponuda), "a "col_server"%s vrednosti %d$", GetPropertyAName(PlayerInfo[playerid][xProperty][0]), II[PlayerInfo[playerid][xProperty][0]][iPrice]);

	if(PlayerInfo[id][xProperty][0] != -1 && PlayerInfo[id][xProperty][1] != -1 && PlayerInfo[id][xProperty][2] != -1) return SendErrorMessage(playerid, "Igrac vec poseduje 3 kuce/stana/vikendice!");

	GlobalID[id] = PlayerInfo[playerid][xProperty][0];}
else if(moje == 6) {
	if(PlayerInfo[playerid][xProperty][0] == -1) return SendErrorMessage(playerid, "Nemate imovinu u slotu 2.");
	format(ponuda, sizeof(ponuda), "a "col_server"%s vrednosti %d$", GetPropertyAName(PlayerInfo[playerid][xProperty][1]), II[PlayerInfo[playerid][xProperty][1]][iPrice]);

	if(PlayerInfo[id][xProperty][0] != -1 && PlayerInfo[id][xProperty][1] != -1 && PlayerInfo[id][xProperty][2] != -1) return SendErrorMessage(playerid, "Igrac vec poseduje 3 kuce/stana/vikendice!");

	GlobalID[id] = PlayerInfo[playerid][xProperty][1];}
else if(moje == 7) {
	if(PlayerInfo[playerid][xProperty][0] == -1) return SendErrorMessage(playerid, "Nemate imovinu u slotu 3.");
	format(ponuda, sizeof(ponuda), "a "col_server"%s vrednosti %d$", GetPropertyAName(PlayerInfo[playerid][xProperty][2]), II[PlayerInfo[playerid][xProperty][2]][iPrice]);

	if(PlayerInfo[id][xProperty][0] != -1 && PlayerInfo[id][xProperty][1] != -1 && PlayerInfo[id][xProperty][2] != -1) return SendErrorMessage(playerid, "Igrac vec poseduje 3 kuce/stana/vikendice!");

	GlobalID[id] = PlayerInfo[playerid][xProperty][2];}
else if(moje == 8) {
	if(PlayerInfo[playerid][xFirmaID] == -1) return SendErrorMessage(playerid, "Nemate firmu.");
	format(ponuda, sizeof(ponuda), "a "col_server"firma - %s", BusinessInfo[PlayerInfo[playerid][xFirmaID]][bName]);

	if(PlayerInfo[id][xFirmaID] != -1) return SendErrorMessage(playerid, "Igrac vec poseduje firmu.");

	GlobalID[id] = PlayerInfo[playerid][xFirmaID];}

if(njegovo == 1) {
	if(PlayerInfo[id][xVoziloID][0] == -1) return SendErrorMessage(playerid, "Igrac nema vozilo u slotu 1.");
	format(trazi, sizeof(trazi), "vozilo marke %s", GetVehicleNameEx(GetVehicleModel(VehicleInfo[PlayerInfo[id][xVoziloID][0]][vID])));

	if(PlayerInfo[playerid][xVoziloID][0] == -1) {}
	else if(PlayerInfo[playerid][xVoziloID][1] == -1) {}
	else if(PlayerInfo[playerid][xVoziloID][2] == -1) {}
	else if(PlayerInfo[playerid][xVoziloID][3] == -1) {
		if(PlayerInfo[playerid][xDonatorSlot] == true) {}
		else return SendErrorMessage(playerid, "Svi slotovi vozila su vam zauzeti.");
	}
	else return SendErrorMessage(playerid, "Svi slotovi vozila su vam zauzeti.");

	GlobalID_2[id] = PlayerInfo[id][xVoziloID][0];}
else if(njegovo == 2) {
	if(PlayerInfo[id][xVoziloID][1] == -1) return SendErrorMessage(playerid, "Igrac nema vozilo u slotu 2.");
	format(trazi, sizeof(trazi), "vozilo marke %s", GetVehicleNameEx(GetVehicleModel(VehicleInfo[PlayerInfo[id][xVoziloID][1]][vID])));

	if(PlayerInfo[playerid][xVoziloID][0] == -1) {}
	else if(PlayerInfo[playerid][xVoziloID][1] == -1) {}
	else if(PlayerInfo[playerid][xVoziloID][2] == -1) {}
	else if(PlayerInfo[playerid][xVoziloID][3] == -1) {
		if(PlayerInfo[playerid][xDonatorSlot] == true) {}
		else return SendErrorMessage(playerid, "Svi slotovi vozila su vam zauzeti.");
	}
	else return SendErrorMessage(playerid, "Svi slotovi vozila su vam zauzeti.");

	GlobalID_2[id] = PlayerInfo[id][xVoziloID][1];}
else if(njegovo == 3) {
	if(PlayerInfo[id][xVoziloID][2] == -1) return SendErrorMessage(playerid, "Igrac nema vozilo u slotu 3.");
	format(trazi, sizeof(trazi), "vozilo marke %s", GetVehicleNameEx(GetVehicleModel(VehicleInfo[PlayerInfo[id][xVoziloID][2]][vID])));

	if(PlayerInfo[playerid][xVoziloID][0] == -1) {}
	else if(PlayerInfo[playerid][xVoziloID][1] == -1) {}
	else if(PlayerInfo[playerid][xVoziloID][2] == -1) {}
	else if(PlayerInfo[playerid][xVoziloID][3] == -1) {
		if(PlayerInfo[playerid][xDonatorSlot] == true) {}
		else return SendErrorMessage(playerid, "Svi slotovi vozila su vam zauzeti.");
	}
	else return SendErrorMessage(playerid, "Svi slotovi vozila su vam zauzeti.");

	GlobalID_2[id] = PlayerInfo[id][xVoziloID][2];}
else if(njegovo == 4) {
	if(PlayerInfo[id][xVoziloID][3] == -1) return SendErrorMessage(playerid, "Igrac nema vozilo u slotu 4.");
	format(trazi, sizeof(trazi), "vozilo marke %s", GetVehicleNameEx(GetVehicleModel(VehicleInfo[PlayerInfo[id][xVoziloID][3]][vID])));

	if(PlayerInfo[playerid][xVoziloID][0] == -1) {}
	else if(PlayerInfo[playerid][xVoziloID][1] == -1) {}
	else if(PlayerInfo[playerid][xVoziloID][2] == -1) {}
	else if(PlayerInfo[playerid][xVoziloID][3] == -1) {
		if(PlayerInfo[playerid][xDonatorSlot] == true) {}
		else return SendErrorMessage(playerid, "Svi slotovi vozila su vam zauzeti.");
	}
	else return SendErrorMessage(playerid, "Svi slotovi vozila su vam zauzeti.");

	GlobalID_2[id] = PlayerInfo[id][xVoziloID][3];}
else if(njegovo == 5) {
	if(PlayerInfo[id][xProperty][0] == -1) return SendErrorMessage(playerid, "Igrac nema imovinu u slotu 1.");
	format(trazi, sizeof(trazi), "%s vrednosti %d$", GetPropertyName(PlayerInfo[id][xProperty][0]), II[PlayerInfo[id][xProperty][0]][iPrice]);

	if(PlayerInfo[playerid][xProperty][0] != -1 && PlayerInfo[playerid][xProperty][1] != -1 && PlayerInfo[playerid][xProperty][2] != -1) return SendErrorMessage(playerid, "Vec posedujes 3 kuce/stana/vikendice!");

	GlobalID_2[id] = PlayerInfo[id][xProperty][0];}
else if(njegovo == 6) {
	if(PlayerInfo[id][xProperty][0] == -1) return SendErrorMessage(playerid, "Igrac nema imovinu u slotu 2.");
	format(trazi, sizeof(trazi), "%s vrednosti %d$", GetPropertyName(PlayerInfo[id][xProperty][1]), II[PlayerInfo[id][xProperty][1]][iPrice]);

	if(PlayerInfo[playerid][xProperty][0] != -1 && PlayerInfo[playerid][xProperty][1] != -1 && PlayerInfo[playerid][xProperty][2] != -1) return SendErrorMessage(playerid, "Vec posedujes 3 kuce/stana/vikendice!");

	GlobalID_2[id] = PlayerInfo[id][xProperty][1];}
else if(njegovo == 7) {
	if(PlayerInfo[id][xProperty][0] == -1) return SendErrorMessage(playerid, "Igrac nema imovinu u slotu 3.");
	format(trazi, sizeof(trazi), "%s vrednosti %d$", GetPropertyName(PlayerInfo[id][xProperty][2]), II[PlayerInfo[id][xProperty][2]][iPrice]);

	if(PlayerInfo[playerid][xProperty][0] != -1 && PlayerInfo[playerid][xProperty][1] != -1 && PlayerInfo[playerid][xProperty][2] != -1) return SendErrorMessage(playerid, "Vec posedujes 3 kuce/stana/vikendice!");

	GlobalID_2[id] = PlayerInfo[id][xProperty][2];}
else if(njegovo == 8) {
	if(PlayerInfo[id][xFirmaID] == -1) return SendErrorMessage(playerid, "Igrac nema firmu.");
	format(trazi, sizeof(trazi), "firmu - %s", BusinessInfo[PlayerInfo[id][xFirmaID]][bName]);

	if(PlayerInfo[playerid][xFirmaID] != -1) return SendErrorMessage(playerid, "Vec posedujete firmu.");

	GlobalID_2[id] = PlayerInfo[id][xFirmaID];}

CommandTime[playerid] = gettime() + 300;

new coordsstring[256];

new DialogStrgEx[545];

format(coordsstring, sizeof(coordsstring), ""col_white"Igrac "col_server"%s "col_white"vam je ponudio zamenu.\n", ImeIgraca(playerid));
strcat(DialogStrgEx, coordsstring);
format(coordsstring, sizeof(coordsstring), ""col_white"U zameni je ponudjen%s.\n", ponuda);
strcat(DialogStrgEx, coordsstring);
format(coordsstring, sizeof(coordsstring), ""col_white"Igrac od vas trazi "col_server"%s.\n", trazi);
strcat(DialogStrgEx, coordsstring);
strcat(DialogStrgEx, ""col_white"Izaberite da li prihvatate ili odbijate zamenu.");
//strcat(DialogStrgEx, ""col_crvena"PRI SVAKOJ ZAMENI OBAVEZNO POZVATI ADMINA DA NE BI DOSLO DO PREVARE.");

SPD(id, dialog_ZAMENA_1, DSMSG, D_NASLOV, DialogStrgEx, "Prihvati", "Odbij");

strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

Ponudjeno[id] = moje;
Trazio[id] = njegovo;
GlobalProdaja[id] = playerid;

SendInfoMessage(playerid, "Uspesno ste ponudili zamenu igracu %s.", ImeIgraca(id));
SendInfoMessage(playerid, "U zameni je ponudjen %s.", ponuda);
SendInfoMessage(playerid, "U zameni si zatrazio %s.", trazi);

return 1;}

CMD:bacikljuc(playerid, params[]) {

if(PlayerInfo[playerid][xRezervniKljucevi] == -1) return SendErrorMessage(playerid, "Nemas rezervne kljuceve koje bi mogao da bacis.");
PlayerInfo[playerid][xRezervniKljucevi] = -1;
SendInfoMessage(playerid, "Bacio si rezervni kljuc!");
return 1;}

CMD:dajkljuc(playerid, params[]) {

new id, vozilo;

if(sscanf(params, "ui", id, vozilo)) return SendUsageMessage(playerid, "/dajkljuc [ID Igraca] [slot vozilo(1-4)]");
if(vozilo < 1 || vozilo > 4) return SendErrorMessage(playerid, "Pogresan broj slota vozila.");

new slot = vozilo-1;

if(PlayerInfo[playerid][xVoziloID][slot] == -1) return SendErrorMessage(playerid, "Nemate vozilo u ovom slotu.");
if(id == playerid) return SendErrorMessage(playerid, "Ne mozes dati kljuc sam sebi!");
if(!IsPlayerNearPlayer(3.0, playerid, id)) return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
if(PlayerInfo[id][xRezervniKljucevi] != -1) return SendErrorMessage(playerid, "Taj igrac vec ima rezervne kljuceve!");

PlayerInfo[id][xRezervniKljucevi] = PlayerInfo[playerid][xVoziloID][slot];

PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
PlayerPlaySound(id, 1052, 0.0, 0.0, 0.0);
SendInfoMessage(playerid, "Dao si kljuc za auto "col_white"%s", ImeIgraca(id));
SendInfoMessage(id, "Dobio si kljuc za auto od "col_white"%s", ImeIgraca(playerid));
new varstring[128];
format(varstring, sizeof(varstring), "* %s vadi kljuceve svog auta, i daje ih %s.", ImeIgraca(playerid), ImeIgraca(id));
PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
return 1;}
CMD:oduzmikljuc(playerid, params[]) {

new id, vozilo;

if(sscanf(params, "ui", id, vozilo)) return SendUsageMessage(playerid, "/oduzmikljuc [ID Igraca] [slot vozilo(1-4)]");
if(vozilo < 0 || vozilo > 3) return SendErrorMessage(playerid, "Pogresan broj slota vozila.");

new slot = vozilo;

if(PlayerInfo[playerid][xVoziloID][slot] == -1) return SendErrorMessage(playerid, "Nemate vozilo u ovom slotu.");

if(PlayerInfo[id][xRezervniKljucevi] != PlayerInfo[playerid][xVoziloID][slot]) return SendErrorMessage(playerid, "Taj igrac nema kljuceve vaseg vozila.");
PlayerInfo[id][xRezervniKljucevi] = -1;

PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
PlayerPlaySound(id, 1052, 0.0, 0.0, 0.0);
SendInfoMessage(playerid, "Oduzeo si kljuceve auta igracu "col_white"%s", ImeIgraca(id));
SendInfoMessage(id, "Oduzeti su ti kljucevi auta "col_white"%s", ImeIgraca(playerid));
return 1;}

CMD:droga(playerid, params[]) {

if(GetFactionType(playerid) == ORG_TIP_PD) {
	SendErrorMessage(playerid, "PD/FBI/CIA nema razloga koristiti ovo!");
	return 1;}
if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si u jailu.");

new item[32], igrac, slot, slot2, opcija[20], kolicina, varstring[200];
if(sscanf(params, "s[32] ", item)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/droga [opcija]");
	SCM(playerid, BELA, "[Opcije] test, give, view, napravi, posadi, oberi, osusi, buyseeds, buyilegal");
	SCM(playerid, BELA, "[Opcije] use, show, vremedobranja, mix, osuseno");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(strcmp(item, "posadi",true) == 0) {
	if(sscanf(params, "s[32]s[20] ", item, opcija)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/droga posadi [droga]");
		SCM(playerid, BELA, "Droge: Marihuana, Kokain");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if(strcmp(opcija,"marihuana",true) == 0) {

		new id = PlayerInfo[playerid][xClan];
		if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(OI[PlayerInfo[playerid][xClan]][oControlType] != CTIP_MARIHUANA) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(!IsPlayerInRangeOfPoint(playerid, 200.0, OI[id][oDrugField][0], OI[id][oDrugField][1], OI[id][oDrugField][2]) && inProperty[playerid] == -1 && inOrgInt[playerid] == -1) return SendErrorMessage(playerid, "Morate biti na organizacijskoj poljani za sadjenje droge, ili u intu orge/kuce.");
		new Float:x, Float:y, Float:z;
		if(IgracPosadio[playerid] == 7) return SendErrorMessage(playerid, "Vec si posadio 7 stabiljki marihuane/kokaina.");
		if(Seeds[playerid] < 1) return SendErrorMessage(playerid, "Da biste zapoceli proizvodnju marihuane,potrebno vam je 1 semenka marihuane!");
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {

			new plants = -1;

			for(new ix = 1; ix < MAX_PLANTS; ix++) {
				if(DrogaStab[ix][wPlanted] == 0) {
					plants = ix;
					break;
				}
			}
			if(plants == -1) return SendErrorMessage(playerid, "Trenutno ne mozete da sadite drogu.");

			GetPlayerPos(playerid, x, y, z);
			DrogaStab[plants][Plantx] = x;
			DrogaStab[plants][Planty] = y;
			DrogaStab[plants][Plantz] = z-2;
			DrogaStab[plants][wObjectID] = CreateDynamicObject(19473, x, y, z-2, 0.0, 0.0, 96, GetPlayerVirtualWorld(playerid), -1, -1, 200.0);
			DrogaStab[plants][wPlanted] = 1;
			DrogaStab[plants][wType] = 1;
			DrogaStab[plants][wHoursPassed] = 0;
			strmid(DrogaStab[plants][wOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 255);
			DrogaStab[plants][wViwo] = GetPlayerVirtualWorld(playerid);
			PlayerPlaySound(playerid, 2000, 0, 0, 0);
			Seeds[playerid] -= 1;
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop",4.0,0,0,0,0,0,1);
			format(varstring, sizeof(varstring), "%s uzima semenke za marihuanu, i sadi ih.", ImeIgraca(playerid));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
			SendInfoMessage(playerid, "Da proveris da li je marihuana spremna za branje kucaj '/droga vremedobranja'.");
			IgracPosadio[playerid]++;

		} else return SendErrorMessage(playerid, "Ne mozes posaditi drogu dok si u vozilu!Posadi ju na travi ili ces biti kaznjen!");
		return 1;
	}
	else if(strcmp(opcija,"kokain",true) == 0) {
		new id = PlayerInfo[playerid][xClan];
		if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(OI[PlayerInfo[playerid][xClan]][oControlType] != CTIP_KOKAIN) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(!IsPlayerInRangeOfPoint(playerid, 200.0, OI[id][oDrugField][0], OI[id][oDrugField][1], OI[id][oDrugField][2]) && inProperty[playerid] == -1 && inOrgInt[playerid] == -1) return SendErrorMessage(playerid, "Morate biti na organizacijskoj poljani za sadjenje droge, ili u intu orge/kuce.");
		new Float:x, Float:y, Float:z;
		if(IgracPosadio[playerid] == 7) return SendErrorMessage(playerid, "Vec si posadio 7 stabiljki marihuane/kokaina.");
		if(SeedsK[playerid] < 20) return SendErrorMessage(playerid, "Da biste zapoceli proizvodnju kokaina,potrebno vam je 20 semenki kokaina!");
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			new plants = -1;

			for(new ix = 1; ix < MAX_PLANTS; ix++) {
				if(DrogaStab[ix][wPlanted] == 0) {
					plants = ix;
					break;
				}
			}
			if(plants == -1) return SendErrorMessage(playerid, "Trenutno ne mozete da sadite drogu.");

			GetPlayerPos(playerid, x, y, z);

			DrogaStab[plants][Plantx] = x;
			DrogaStab[plants][Planty] = y;
			DrogaStab[plants][Plantz] = z-2;
			DrogaStab[plants][wObjectID] = CreateDynamicObject(3409, x, y, z-2, 0.0, 0.0, 96, GetPlayerVirtualWorld(playerid), -1, -1, 200.0);
			DrogaStab[plants][wPlanted] = 1;
			DrogaStab[plants][wType] = 2;
			DrogaStab[plants][wHoursPassed] = 0;
			strmid(DrogaStab[plants][wOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 255);
			DrogaStab[plants][wViwo] = GetPlayerVirtualWorld(playerid);
			PlayerPlaySound(playerid, 2000, 0, 0, 0);
			SeedsK[playerid] -= 20;
			ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,0,0,0,0,0,1);
			format(varstring, sizeof(varstring), "%s uzima semenke za kokain, i sadi ih.", ImeIgraca(playerid));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
			IgracPosadio[playerid]++;
			SendInfoMessage(playerid, "Da proveris da li je kokain spreman za branje kucaj '/droga vremedobranja'.");

		} else return SendErrorMessage(playerid, "Ne mozes posaditi drogu dok si u vozilu!Posadi ju na travi ili ces biti kaznjen!");
		return 1;
	}
	return 1;}
else if(strcmp(item, "buyilegal",true) == 0) {
	new Float:Randomilegal[10][3] =
	{
		{ 2790.8262,-2427.4307,13.6329 },
		{ 2790.8269,-2424.9209,13.6329 },
		{ 2784.9187,-2424.9360,13.6344 },
		{ 2784.9187,-2427.4858,13.6344 },
		{ 2784.9370,-2412.4543,13.6344 },
		{ 2784.9192,-2409.0864,13.6344 },
		{ 2790.6887,-2408.5105,13.6330 },
		{ 2790.8250,-2409.8489,13.6329 },
		{ 2790.8250,-2411.8228,13.6329 },
		{ 2796.2822,-2412.6375,13.6316 ]
	};
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2834.8999,-2360.7681,26.8931)) return SendErrorMessage(playerid, "Nisi na mestu uzimanja ilegalnih supstanci.");
	if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(GetFactionType(playerid) != ORG_TIP_MAFIJA) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(sscanf(params, "s[32]s[20]i", item, opcija, kolicina)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/droga buyilegal [stvar] [kolicina]");
		SCM(playerid, BELA, "Stvar: Opium, Methylamin");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if(strcmp(opcija,"opium",true) == 0) {
		new cena;
		if(kolicina < 500 || kolicina > 2000) return SendErrorMessage(playerid, "Ne mozete uzeti vise od 2000 a manje od 500 grama opium!");
		cena = kolicina*2;
		if(PlayerInfo[playerid][xNovac] < cena) return SendErrorMessage(playerid, "Nemate dovoljno novca!Jedan gram kosta 2$");
		new poz = random(sizeof(Randomilegal));
		VrstaIlegala[playerid] = 1;
		KolicinaIlegala[playerid] = kolicina;
		Fusion_SetPlayerCheckpoint(playerid, Randomilegal[poz][0], Randomilegal[poz][1], Randomilegal[poz][2], 5.0);
		CheckpointStatus[playerid] = 11;
		SCM(playerid, FUSIONGAMING, "Idi do markera i pokupi svoju robu.");
		return 1;
	}
	else if(strcmp(opcija,"methylamin",true) == 0) {
		new cena;
		if(kolicina < 300 || kolicina > 800) return SendErrorMessage(playerid, "Ne mozete uzeti vise od 800 a manje od 300 grama methylamina!");
		cena = kolicina*3;
		if(PlayerInfo[playerid][xNovac] < cena) return SendErrorMessage(playerid, "Nemate dovoljno novca!Jedan gram kosta 3$");
		new poz = random(sizeof(Randomilegal));
		VrstaIlegala[playerid] = 2;
		KolicinaIlegala[playerid] = kolicina;
		Fusion_SetPlayerCheckpoint(playerid, Randomilegal[poz][0], Randomilegal[poz][1], Randomilegal[poz][2], 5.0);
		CheckpointStatus[playerid] = 11;
		SCM(playerid, FUSIONGAMING, "Idi do markera i pokupi svoju robu.");
		return 1;
	}
	return 1;}
else if(strcmp(item, "buyseeds",true) == 0) {
	if(!IsPlayerInRangeOfPoint(playerid, 6.0, 870.3927, -24.9189, 63.9863)) return SendErrorMessage(playerid, "Nisi na mestu uzimanja semena.");
	if(sscanf(params, "s[32]s[20]i", item, opcija, kolicina)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/droga buyseeds [droga] [kolicina]");
		SCM(playerid, BELA, "Droge: Marihuana, Kokain");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if(strcmp(opcija,"marihuana",true) == 0) {
		if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(OI[PlayerInfo[playerid][xClan]][oControlType] != CTIP_MARIHUANA) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(!IsPlayerInRangeOfPoint(playerid, 6.0, 870.3927, -24.9189, 63.9863)) return SendErrorMessage(playerid, "Nisi na mestu uzimanja semena.");
		new cena;
		if(kolicina < 1 || kolicina > 1000) return SendErrorMessage(playerid, "Ne mozete uzeti vise od 1000 semenki odjednom!");
		cena = kolicina*10;
		if(PlayerInfo[playerid][xNovac] < cena) return SendErrorMessage(playerid, "Nemate dovoljno novca!Jedna semenka marihuane kosta 10$");
		Seeds[playerid] += kolicina;
		DajIgracuNovac(playerid, -cena);
		format(varstring, sizeof(varstring), "Kupili ste %d semenki marihuane, za %d$.", kolicina, cena);
		SCM(playerid, SVETLOPLAVA, varstring);
		return 1;
	}
	else if(strcmp(opcija,"kokain",true) == 0) {
		if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(OI[PlayerInfo[playerid][xClan]][oControlType] != CTIP_KOKAIN) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(!IsPlayerInRangeOfPoint(playerid, 6.0, 870.3927, -24.9189, 63.9863)) return SendErrorMessage(playerid, "Nisi na mestu uzimanja semena.");
		new cena;
		if(kolicina < 1 || kolicina > 1000) return SendErrorMessage(playerid, "Ne mozete uzeti vise od 1000 semenki odjednom!");
		cena = kolicina*15;
		if(PlayerInfo[playerid][xNovac] < cena) return SendErrorMessage(playerid, "Nemate dovoljno novca!Jedna semenka kokaina kosta 15$");
		SeedsK[playerid] += kolicina;
		DajIgracuNovac(playerid, -cena);
		format(varstring, sizeof(varstring), "Kupili ste %d semenki kokaina, za %d$.", kolicina, cena);
		SCM(playerid, SVETLOPLAVA, varstring);
		return 1;
	}
	return 1;}
else if(strcmp(item, "osusi",true) == 0) {
	if(sscanf(params, "s[32]s[20]", item, opcija)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/droga osusi [droga]");
		SCM(playerid, BELA, "Droge: Marihuana, Kokain");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if(strcmp(opcija,"marihuana",true) == 0) {
		if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(OI[PlayerInfo[playerid][xClan]][oControlType] != CTIP_MARIHUANA) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(PlayerInfo[playerid][xMarihuana] == 0) return SendErrorMessage(playerid, "Nemate marihuanu za osusiti.");
		if(PlayerInfo[playerid][xDrugCode][0] != 0 && PlayerInfo[playerid][xDrugCode][1] != 0 && PlayerInfo[playerid][xDrugCode][2] != 0 && PlayerInfo[playerid][xDrugCode][3] != 0 && PlayerInfo[playerid][xDrugCode][4] != 0) return SendErrorMessage(playerid, "Svih vasih 5 slotova za droge su puni!");
		if(inProperty[playerid] == -1 && inOrgInt[playerid] == -1) return SendErrorMessage(playerid, "Morate biti u vasoj kuci/stanu/vikendici ili intu orge.");
		if(PlayerInfo[playerid][xDrugCode][0] == 0)
		{
			PlayerInfo[playerid][xDrugCode][0] = 1999;
			PlayerInfo[playerid][xDrug][0] = PlayerInfo[playerid][xMarihuana];
		}
		else if(PlayerInfo[playerid][xDrugCode][1] == 0)
		{
			PlayerInfo[playerid][xDrugCode][1] = 1999;
			PlayerInfo[playerid][xDrug][1] = PlayerInfo[playerid][xMarihuana];
		}
		else if(PlayerInfo[playerid][xDrugCode][2] == 0)
		{
			PlayerInfo[playerid][xDrugCode][2] = 1999;
			PlayerInfo[playerid][xDrug][2] = PlayerInfo[playerid][xMarihuana];
		}
		else if(PlayerInfo[playerid][xDrugCode][3] == 0)
		{
			PlayerInfo[playerid][xDrugCode][3] = 1999;
			PlayerInfo[playerid][xDrug][3] = PlayerInfo[playerid][xMarihuana];
		}
		else if(PlayerInfo[playerid][xDrugCode][4] == 0)
		{
			PlayerInfo[playerid][xDrugCode][4] = 1999;
			PlayerInfo[playerid][xDrug][4] = PlayerInfo[playerid][xMarihuana];
		}
		SendClientMessageEx(playerid, FUSIONGAMING, "Osusio si %d grama marihuane.", PlayerInfo[playerid][xMarihuana]);
		PlayerInfo[playerid][xMarihuana] = 0;
		return 1;
	}
	else if(strcmp(opcija,"kokain",true) == 0) {
		if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(OI[PlayerInfo[playerid][xClan]][oControlType] != CTIP_KOKAIN) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(PlayerInfo[playerid][xKokain2] == 0) return SendErrorMessage(playerid, "Nemate kokain za osusiti.");
		if(inProperty[playerid] == -1 && inOrgInt[playerid] == -1) return SendErrorMessage(playerid, "Morate biti u vasoj kuci/stanu/vikendici ili intu orge.");
		PlayerInfo[playerid][xKokain] += PlayerInfo[playerid][xKokain2];
		SendClientMessageEx(playerid, FUSIONGAMING, "Osusio si %d grama kokaina.", PlayerInfo[playerid][xKokain2]);
		PlayerInfo[playerid][xKokain2] = 0;
		return 1;
	}
	return 1;}
else if(strcmp(item, "osuseno",true) == 0) {
	format(varstring, sizeof(varstring), ""col_server"Osuseni kokain kod sebe: "col_white"[%dg]",PlayerInfo[playerid][xKokain]);
	SCM(playerid, -1, varstring);	
	return 1;}
else if(strcmp(item, "vremedobranja",true) == 0) {
	new found, plantid;
	for(new i = 1; i < MAX_PLANTS; i++) {
		if(IsPlayerInRangeOfPoint(playerid, 2.0, DrogaStab[i][Plantx], DrogaStab[i][Planty], DrogaStab[i][Plantz])) {
			plantid = i;
			found = 1;
			break;
		}
		else
			continue;
	}
	if(found == 0) return SendErrorMessage(playerid, "Niste blizu posadjene stabiljke.");
	if(strcmp(ImeIgraca(playerid), DrogaStab[plantid][wOwner], true) == 0) {
		if(DrogaStab[plantid][wType] == 1) {
			if(DrogaStab[plantid][wHoursPassed] >= 0 && DrogaStab[plantid][wHoursPassed] < 2) {
				SCM(playerid, FUSIONGAMING, "* Prerano je jos za branje marihuane. ");
			}
			if(DrogaStab[plantid][wHoursPassed] >= 2 && DrogaStab[plantid][wHoursPassed] < 4) {
				SCM(playerid, FUSIONGAMING, "* Ako uberes marihuanu sad dobijas 2 grama. ");
			}
			if(DrogaStab[plantid][wHoursPassed] >= 4 && DrogaStab[plantid][wHoursPassed] < 6) {
				SCM(playerid, FUSIONGAMING, "* Ako uberes marihuanu sad dobijas 3 grama. ");
			}
			if(DrogaStab[plantid][wHoursPassed] >= 6 && DrogaStab[plantid][wHoursPassed] <= 8) {
				SCM(playerid, FUSIONGAMING, "* Ako uberes marihuanu sad dobijas 4 grama. ");
			}
			if(DrogaStab[plantid][wHoursPassed] > 8 && DrogaStab[plantid][wHoursPassed] <= 9) {
				SCM(playerid, FUSIONGAMING, "* Ako uberes marihuanu sad dobijas 1 gram. ");
			}
			if(DrogaStab[plantid][wHoursPassed] > 9) {
				SCM(playerid, FUSIONGAMING, "* Prekasno je jos za branje marihuane. ");
			}
		}
		else if(DrogaStab[plantid][wType] == 2) {

			if(DrogaStab[plantid][wHoursPassed] <= 2) {
				SCM(playerid, FUSIONGAMING, "* Prerano je jos za branje kokaina. ");
			}
			else if(DrogaStab[plantid][wHoursPassed] > 11) {
				SCM(playerid, FUSIONGAMING, "* Prekasno je jos za branje kokaina. ");
			}
			else if(DrogaStab[plantid][wHoursPassed] >= 3 && DrogaStab[plantid][wHoursPassed] <= 10) {
				new jebomajku = DrogaStab[plantid][wHoursPassed]*5;
				SendClientMessageEx(playerid, FUSIONGAMING, "* Ako uberes kokain sad dobijas %d grama.", jebomajku);
			}
		}
	} else return SendErrorMessage(playerid, "Ovo nije tvoja stabiljka droge. ");
	return 1;}
else if(strcmp(item, "oberi",true) == 0) {
	new found, plantid;
	for(new i = 1; i < MAX_PLANTS; i++) {
		if(IsPlayerInRangeOfPoint(playerid, 2.0, DrogaStab[i][Plantx], DrogaStab[i][Planty], DrogaStab[i][Plantz])) {
			plantid = i;
			found = 1;
			break;
		}
		else
			continue;
	}
	if(found == 0) return SendErrorMessage(playerid, "Niste blizu posadjene stabiljke.");
	if(strcmp(ImeIgraca(playerid), DrogaStab[plantid][wOwner], true) == 0)
	{
		if(DrogaStab[plantid][wType] == 1) {
			if(DrogaStab[plantid][wHoursPassed] >= 0 && DrogaStab[plantid][wHoursPassed] < 2)
			{
				SCM(playerid, FUSIONGAMING, "* Prerano si ubrao marihuanu i nisi dobio ni jedan gram. ");
			}
			if(DrogaStab[plantid][wHoursPassed] >= 2 && DrogaStab[plantid][wHoursPassed] < 4)
			{
				SCM(playerid, FUSIONGAMING, "* Ubrao si marihuanu i uzeo 2 grama. ");
				PlayerInfo[playerid][xMarihuana] += 2;
			}
			if(DrogaStab[plantid][wHoursPassed] >= 4 && DrogaStab[plantid][wHoursPassed] < 6)
			{
				SCM(playerid, FUSIONGAMING, "* Ubrao si marihuanu i uzeo 3 grama. ");
				PlayerInfo[playerid][xMarihuana] += 3;
			}
			if(DrogaStab[plantid][wHoursPassed] >= 6 && DrogaStab[plantid][wHoursPassed] <= 8)
			{
				SCM(playerid, FUSIONGAMING, "* Ubrao si marihuanu i uzeo 4 grama. ");
				PlayerInfo[playerid][xMarihuana] += 4;
			}
			if(DrogaStab[plantid][wHoursPassed] > 8 && DrogaStab[plantid][wHoursPassed] <= 9)
			{
				SCM(playerid, FUSIONGAMING, "* Ubrao si marihuanu i uzeo 1 gram. ");
				PlayerInfo[playerid][xMarihuana] += 1;
			}
			if(DrogaStab[plantid][wHoursPassed] > 9)
			{
				SCM(playerid, FUSIONGAMING, "* Kasno si ubrao marihuanu, te nisi dobio ni jedan gram. ");
			}

			DrogaStab[plantid][Plantx] = 0;
			DrogaStab[plantid][Planty] = 0;
			DrogaStab[plantid][Plantz] = 0;
			DrogaStab[plantid][wType] = 0;
			DrogaStab[plantid][wPlanted] = 0;
			DrogaStab[plantid][wHoursPassed] = 0;
			strmid(DrogaStab[plantid][wOwner], "Niko", 0, strlen("Niko"), 255);
			DrogaStab[plantid][wViwo] = GetPlayerVirtualWorld(playerid);
			DestroyDynamicObject(DrogaStab[plantid][wObjectID]);
			ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,0,0,0,0,0,1);
			format(varstring, sizeof(varstring), "%s ubire marihuanu.", ImeIgraca(playerid));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
			IgracPosadio[playerid]--;
		}
		else if(DrogaStab[plantid][wType] == 2) {

			if(DrogaStab[plantid][wHoursPassed] <= 2)
			{
				SCM(playerid, FUSIONGAMING, "* Prerano si ubrao kokain i nisi dobio ni jedan gram. ");
			}
			if(DrogaStab[plantid][wHoursPassed] > 11)
			{
				SCM(playerid, FUSIONGAMING, "* Kasno si ubrao kokain, te nisi dobio ni jedan gram. ");
			}
			if(DrogaStab[plantid][wHoursPassed] >= 3 && DrogaStab[plantid][wHoursPassed] <= 10)
			{
				kolicina = DrogaStab[plantid][wHoursPassed]*5;
				SendClientMessageEx(playerid, FUSIONGAMING, "* Ubrao si neosuseni kokain i uzeo %d grama. ", kolicina);
				PlayerInfo[playerid][xKokain2] += kolicina;
			}

			DrogaStab[plantid][Plantx] = 0;
			DrogaStab[plantid][Planty] = 0;
			DrogaStab[plantid][Plantz] = 0;
			DrogaStab[plantid][wType] = 0;
			DrogaStab[plantid][wPlanted] = 0;
			DrogaStab[plantid][wHoursPassed] = 0;
			strmid(DrogaStab[plantid][wOwner], "Niko", 0, strlen("Niko"), 255);
			DrogaStab[plantid][wViwo] = GetPlayerVirtualWorld(playerid);
			DestroyDynamicObject(DrogaStab[plantid][wObjectID]);
			ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,0,0,0,0,0,1);
			format(varstring, sizeof(varstring), "%s ubire stabiljku kokaina.", ImeIgraca(playerid));
			PorukaRadius(10.0, playerid, varstring, LJUBICASTA);
			IgracPosadio[playerid]--;
		}
	}
	else return SendErrorMessage(playerid, "Ovo nije tvoja stabiljka droge. ");
	return 1;}
else if(strcmp(item, "mix", true) == 0) {
	if(sscanf(params, "s[32]ii", item, slot, slot2)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/droga mix [slot1] [slot2]");
		SCM(playerid, BELA, "[Pomoc] Slot znaci broj vaseg mjesta droge, moze biti od 1 do 5.");
		SCM(playerid, BELA, "[Pomoc] Ukucajte /droga view ako zelite vidjeti slot vase droge!");
		SCM(playerid, BELA, "[Pomoc] Ovom komandom cete spojiti dva paketica droge u jedan!");
		SCM(playerid, BELA, "___________________________________________________________________");
		return 1;
	}
	if(slot == slot2) return SendErrorMessage(playerid, "Ne mozete uneti 2 puta isti slot.");

	if(slot < 1 || slot > 5) return SendErrorMessage(playerid, "Krivi broj slota 1!");
	if(slot2 < 1 || slot2 > 5) return SendErrorMessage(playerid, "Krivi broj slota 2!");

	new slotnovi = slot-1;
	new slot2novi = slot2-1;

	if(PlayerInfo[playerid][xDrug][slot2novi] == 0) return SendErrorMessage(playerid, "Slot 2 je prazan.");
	if(PlayerInfo[playerid][xDrug][slotnovi] == 0) return SendErrorMessage(playerid, "Slot 1 je prazan.");

	new code1 = PlayerInfo[playerid][xDrugCode][slotnovi];
	new code2 = PlayerInfo[playerid][xDrugCode][slot2novi];

	if(IsAMarijuana(PlayerInfo[playerid][xDrugCode][slotnovi]) && !IsAMarijuana(PlayerInfo[playerid][xDrugCode][slot2novi])) {
		SendErrorMessage(playerid, "Ne miksati droge razlicite vrste.");
		return 1;
	}
	if(IsALSD(PlayerInfo[playerid][xDrugCode][slotnovi]) && !IsALSD(PlayerInfo[playerid][xDrugCode][slot2novi])) {
		SendErrorMessage(playerid, "Ne miksati droge razlicite vrste.");
		return 1;
	}
	if(IsACocaine(PlayerInfo[playerid][xDrugCode][slotnovi]) && !IsACocaine(PlayerInfo[playerid][xDrugCode][slot2novi])) {
		SendErrorMessage(playerid, "Ne miksati droge razlicite vrste.");
		return 1;
	}
	if(IsABlueMeth(PlayerInfo[playerid][xDrugCode][slotnovi]) && !IsABlueMeth(PlayerInfo[playerid][xDrugCode][slot2novi])) {
		SendErrorMessage(playerid, "Ne miksati droge razlicite vrste.");
		return 1;
	}
	if(IsACrack(PlayerInfo[playerid][xDrugCode][slotnovi]) && !IsACrack(PlayerInfo[playerid][xDrugCode][slot2novi])) {
		SendErrorMessage(playerid, "Ne miksati droge razlicite vrste.");
		return 1;
	}
	if(IsAMethamphetamine(PlayerInfo[playerid][xDrugCode][slotnovi]) && !IsAMethamphetamine(PlayerInfo[playerid][xDrugCode][slot2novi])) {
		SendErrorMessage(playerid, "Ne miksati droge razlicite vrste.");
		return 1;
	}
	if(IsAHeroin(PlayerInfo[playerid][xDrugCode][slotnovi]) && !IsAHeroin(PlayerInfo[playerid][xDrugCode][slot2novi])) {
		SendErrorMessage(playerid, "Ne miksati droge razlicite vrste.");
		return 1;
	}

	PlayerInfo[playerid][xDrug][slotnovi] = (PlayerInfo[playerid][xDrug][slotnovi] + PlayerInfo[playerid][xDrug][slot2novi]);
	PlayerInfo[playerid][xDrugCode][slotnovi] = ((code1 + code2)/2);

	PlayerInfo[playerid][xDrug][slot2novi] = 0;
	PlayerInfo[playerid][xDrugCode][slot2novi] = 0;

	SavePlayer(playerid);
	SendInfoMessage(playerid, "Pomesali ste 2 slota droge i dobili %s.", GetDrugNameByDrugID(PlayerInfo[playerid][xDrugCode][slotnovi]));
	return 1;}
else if(strcmp(item, "use",true) == 0) {

	if(sscanf(params, "s[32]i", item, slot)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/droga use [slot]");
		SCM(playerid, BELA, "[Pomoc] Slot znaci broj vaseg mjesta droge, moze biti od 1 do 5.");
		SCM(playerid, BELA, "[Pomoc] Ukucajte /droga view ako zelite vidjeti slot vase droge!");
		SCM(playerid, BELA, "___________________________________________________________________");
		return 1;
	}
	slot2 = slot-1;
	if(gettime() < CommandTime[playerid]) 	return SendErrorMessage(playerid, "Ovu komandu mozete koristiti na svakih 5 minuta!");
	if(slot < 1 || slot > 5) return SendErrorMessage(playerid, "Broj slota ne moze biti manji od 1 i veci od 5!");
	if(PlayerDrugged[playerid] == true) return SendErrorMessage(playerid, "Vec si nadrogiran.Ne mozes koristiti drogu dok si nadrogiran!");
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes da se drogiras dok si u kolima.");
	if(PlayerInfo[playerid][xDrugCode][slot2] == 0) return SendErrorMessage(playerid, "Nemate droge pod tim slotom!");
	if(IsAMarijuana(PlayerInfo[playerid][xDrugCode][slot2])) {
		if(PlayerInfo[playerid][xUpaljac] == 0) return SendErrorMessage(playerid, "Nemas upaljac!");
		PlayerInfo[playerid][xDrug][slot2] --;
		ApplyAnimation(playerid,"SMOKING","M_smk_in",3.0,0,0,0,0,0, 1);
			SetPlayerSpecialAction(playerid,21);
			PlayerStoned[playerid] = true;
		PlayerDrugged[playerid] = true;
		SetPlayerTime(playerid, 12, 0);
		SetPlayerDrunkLevel(playerid, 10000);
		SetPVarInt(playerid, "PlayerDruggedSeconds", 30);
		SetPlayerWeather(playerid, -66);
		//DajIgracuGlad(playerid, 10);
		DodajIgracuArmour(playerid, 25);
		CommandTime[playerid] = gettime() + 300;

		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "Maska_%d pocinje pusiti marihuanu", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "%s pocinje pusiti marihuanu.", ImeIgraca(playerid));

		PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
	}
	else if(IsALSD(PlayerInfo[playerid][xDrugCode][slot2])) {
		SetPlayerDrunkLevel(playerid, 18000);
		PlayerInfo[playerid][xDrug][slot2] --;
		PlayerStoned[playerid] = true;
		PlayerDrugged[playerid] = true;
		SetPlayerTime(playerid, 12, 0);
		SetPVarInt(playerid, "PlayerDruggedSeconds", 30);
		SetPlayerWeather(playerid, 2009);
		//DajIgracuGlad(playerid, 10);
		DodajIgracuArmour(playerid, 25);

		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "Maska_%d stavlja tabletu LSD-a na jezik.", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "%s stavlja tabletu LSD-a na jezik.", ImeIgraca(playerid));

		PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
	}
	else if(IsAMethamphetamine(PlayerInfo[playerid][xDrugCode][slot2])) {
		if(PlayerInfo[playerid][xUpaljac] == 0) return SendErrorMessage(playerid, "Nemas upaljac!");
		UsingMeth(playerid, PlayerInfo[playerid][xDrugCode][slot2]);
		SetPlayerDrunkLevel(playerid, 28000);
		PlayerInfo[playerid][xDrug][slot2] --;
		PlayerStoned[playerid] = true;
		PlayerDrugged[playerid] = true;
		SetPlayerTime(playerid, 12, 0);
		SetPVarInt(playerid, "PlayerDruggedSeconds", 60);
		ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 0, 0, 1);
		SetPlayerWeather(playerid, 1880);

		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "Maska_%d pocinje pusiti metamfetamin.", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "%s pocinje pusiti metamfetamin.", ImeIgraca(playerid));
		PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
	}
	else if(IsACrack(PlayerInfo[playerid][xDrugCode][slot2])) {
		if(PlayerInfo[playerid][xUpaljac] == 0) return SendErrorMessage(playerid, "Nemas upaljac!");
		UsingCrack(playerid, PlayerInfo[playerid][xDrugCode][slot2]);
		PlayerInfo[playerid][xDrug][slot2] --;
		PlayerStoned[playerid] = true;
		PlayerDrugged[playerid] = true;
		SetPlayerTime(playerid, 12, 0);
		SetPlayerDrunkLevel(playerid, 35000);
		SetPVarInt(playerid, "PlayerDruggedSeconds", 30);
		SetPlayerWeather(playerid, 1782);

		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "Maska_%d pocinje pusiti crack.", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "%s pocinje pusiti crack.", ImeIgraca(playerid));
		PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
	}
	else if(IsABlueMeth(PlayerInfo[playerid][xDrugCode][slot2])) {
		if(PlayerInfo[playerid][xUpaljac] == 0) return SendErrorMessage(playerid, "Nemas upaljac!");
		UsingBMeth(playerid, PlayerInfo[playerid][xDrugCode][slot2]);
		SetPlayerDrunkLevel(playerid, 40000);
		PlayerInfo[playerid][xDrug][slot2] --;
		PlayerStoned[playerid] = true;
		PlayerDrugged[playerid] = true;
		SetPlayerTime(playerid, 12, 0);
		SetPVarInt(playerid, "PlayerDruggedSeconds", 60);
		ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 0, 0, 1);
		SetPlayerWeather(playerid, 1880);

		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "Maska_%d pocinje pusiti blue metamfetamin.", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "%s pocinje pusiti bluei metamfetamin.", ImeIgraca(playerid));
		PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
	}
	else if(IsACocaine(PlayerInfo[playerid][xDrugCode][slot2])) {
		UsingCocaine(playerid, PlayerInfo[playerid][xDrugCode][slot2]);
		SetPlayerDrunkLevel(playerid, 45000);
		PlayerStoned[playerid] = true;
		PlayerDrugged[playerid] = true;
		SetPlayerTime(playerid, 12, 0);
		SetPVarInt(playerid, "PlayerDruggedSeconds", 30);
		PlayerInfo[playerid][xDrug][slot2] --;
		SetPlayerWeather(playerid, 1998);

		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "Maska_%d smrce kokain.", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "%s smrce kokain.", ImeIgraca(playerid));
		PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
	}
	else if(IsAHeroin(PlayerInfo[playerid][xDrugCode][slot2])) {
		if(PlayerInfo[playerid][xInekcija] == false) return SendErrorMessage(playerid, "Nemas injekciju za heroin!");
		UsingHeroin(playerid, PlayerInfo[playerid][xDrugCode][slot2]);
		PlayerInfo[playerid][xDrug][slot2] --;
		SetPlayerWeather(playerid, 1765);
		SetPlayerDrunkLevel(playerid, 50000);
		PlayerStoned[playerid] = true;
		PlayerDrugged[playerid] = true;
		SetPlayerTime(playerid, 12, 0);
		PlayerInfo[playerid][xInekcija] = false;
		SetPVarInt(playerid, "PlayerDruggedSeconds", 60);
		ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 0, 0, 1);

		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "Maska_%d ubrizgava heroin u venu.", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "%s ubrizgava heroin u venu.", ImeIgraca(playerid));
		PorukaRadius(15.0, playerid, varstring, LJUBICASTA);
	}
	if(PlayerInfo[playerid][xDrug][slot2] == 0)
		PlayerInfo[playerid][xDrugCode][slot2] = 0;

	return 1;}
else if(strcmp(item, "napravi",true) == 0) {
	if(sscanf(params, "s[32]s[20] ", item, opcija)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/droga napravi [droga]");
		SCM(playerid, BELA, "Droge: Meth, LSD, Heroin, Kokain, BlueMeth");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if(strcmp(opcija,"meth",true) == 0) {
		if(inProperty[playerid] == -1 && inOrgInt[playerid] == -1) return SendErrorMessage(playerid, "Morate biti u vasoj kuci/stanu/vikendici ili intu orge.");
		if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(OI[PlayerInfo[playerid][xClan]][oControlType] != CTIP_METH) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		new pseudo, solna, sodab, crvenif, razlika = 0;
		if(sscanf(params, "s[32]s[20]iiiii", item, opcija, slot, pseudo, solna, sodab, crvenif)) return SendUsageMessage(playerid, "/droga napravi meth [slot] [pseudo] [solna kis.] [soda b.] [crveni f.]");
		if(slot < 1 || slot > 5) return SendErrorMessage(playerid, "Krivi broj slota!");
		slot2 = slot-1;
		if(PlayerInfo[playerid][xDrugCode][slot2] != 0) return SendErrorMessage(playerid, "Taj slot je pun!");
		if(solna < 1 || solna > PlayerInfo[playerid][xSolna]) return SendErrorMessage(playerid, "Nemate toliku kolicinu solne kiseline kod sebe!");
		if(pseudo < 1 || pseudo > PlayerInfo[playerid][xPseudo]) return SendErrorMessage(playerid, "Nemate toliku kolicinu pseudo tabletica kod sebe!");
		if(sodab < 1 || sodab > PlayerInfo[playerid][xSodaB]) return SendErrorMessage(playerid, "Nemate toliku kolicinu sode bikarbone kod sebe!");
		if(crvenif < 1 || crvenif > PlayerInfo[playerid][xCrvenif]) return SendErrorMessage(playerid, "Nemate toliku kolicinu crvenog fosfora kod sebe!");
		if(solna != 8) razlika += (random(20-10)+solna);
		if(sodab != 2) razlika += (random(20-10)+sodab);
		if(crvenif != 10) razlika += (random(20-10)+crvenif);
		if(pseudo != 7) razlika += (random(20-10)+pseudo);
		PlayerInfo[playerid][xSolna] -= solna;
		PlayerInfo[playerid][xPseudo] -= pseudo;
		PlayerInfo[playerid][xSodaB] -= sodab;
		PlayerInfo[playerid][xCrvenif] -= crvenif;
		if(IsAMethamphetamine(3999-razlika)) {
			PlayerInfo[playerid][xDrugCode][slot2] = 3999-razlika;
			PlayerInfo[playerid][xDrug][slot2] = (random(10-5)+5);

			SendInfoMessage(playerid, "Napravili ste %d grama metamfetamina.", PlayerInfo[playerid][xDrug][slot2]);

		} else {
			SCM(playerid, ZUTA, "Smesa vam nije uspela!");
		}
		return 1;
	}
	else if(strcmp(opcija,"bluemeth",true) == 0) {
		if(inProperty[playerid] == -1 && inOrgInt[playerid] == -1) return SendErrorMessage(playerid, "Morate biti u vasoj kuci/stanu/vikendici ili intu orge.");
		if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(OI[PlayerInfo[playerid][xClan]][oControlType] != CTIP_BMETH) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		new metila, solna, sodab, crvenif, razlika = 0;
		if(sscanf(params, "s[32]s[20]iiiii", item, opcija, slot, metila, solna, sodab, crvenif)) return SendUsageMessage(playerid, "/droga napravi bluemeth [slot] [methylamin] [solna kis.] [soda b.] [crveni f.]");
		if(slot < 1 || slot > 5) return SendErrorMessage(playerid, "Krivi broj slota!");
		slot2 = slot-1;
		if(PlayerInfo[playerid][xDrugCode][slot2] != 0) return SendErrorMessage(playerid, "Taj slot je pun!");
		if(solna < 1 || solna > PlayerInfo[playerid][xSolna]) return SendErrorMessage(playerid, "Nemate toliku kolicinu solne kiseline kod sebe!");
		if(metila < 1 || metila > PlayerInfo[playerid][xMetilAmin]) return SendErrorMessage(playerid, "Nemate toliku kolicinu methylamina kod sebe!");
		if(sodab < 1 || sodab > PlayerInfo[playerid][xSodaB]) return SendErrorMessage(playerid, "Nemate toliku kolicinu sode bikarbone kod sebe!");
		if(crvenif < 1 || crvenif > PlayerInfo[playerid][xCrvenif]) return SendErrorMessage(playerid, "Nemate toliku kolicinu crvenog fosfora kod sebe!");
		if(solna != 8) razlika += (random(20-10)+solna);
		if(sodab != 2) razlika += (random(20-10)+sodab);
		if(crvenif != 10) razlika += (random(20-10)+crvenif);
		if(metila != 11) razlika += (random(20-10)+metila);
		PlayerInfo[playerid][xSolna] -= solna;
		PlayerInfo[playerid][xMetilAmin] -= metila;
		PlayerInfo[playerid][xSodaB] -= sodab;
		PlayerInfo[playerid][xCrvenif] -= crvenif;
		if(IsABlueMeth(6999-razlika)) {
			PlayerInfo[playerid][xDrugCode][slot2] = 6999-razlika;
			PlayerInfo[playerid][xDrug][slot2] = (random(10-5)+5);

			SendInfoMessage(playerid, "Napravili ste %d grama blue metamfetamina.", PlayerInfo[playerid][xDrug][slot2]);

		} else {
			SCM(playerid, ZUTA, "Smesa vam nije uspela!");
		}
		return 1;
	}
	else if(strcmp(opcija,"crack",true) == 0) {
		if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(OI[PlayerInfo[playerid][xClan]][oControlType] != CTIP_CRACK) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		new skokain, skokain2, kkokain, desvoda, sodab, razlika = 0;
		if(sscanf(params, "s[32]s[20]iiiii", item, opcija, slot, skokain, kkokain, desvoda, sodab)) return SendUsageMessage(playerid, "/droga napravi crack [slot nove droge] [slot gde je kokain] [kolicinu kokaina] [des. voda] [soda b.]");
		if(slot < 1 || slot > 5) return SendErrorMessage(playerid, "Krivi broj slota!");
		slot2 = slot-1;
		skokain2 = skokain-1;
		if(PlayerInfo[playerid][xDrugCode][skokain2] == 0) return SendErrorMessage(playerid, "Taj slot je prazan!");
		if(!IsACocaine(PlayerInfo[playerid][xDrugCode][skokain2])) return SendErrorMessage(playerid, "U tom slotu nema kokaina.");
		if(PlayerInfo[playerid][xDrugCode][slot2] != 0) return SendErrorMessage(playerid, "Taj slot je pun!");
		if(desvoda < 1 || desvoda > PlayerInfo[playerid][xDesVoda]) return SendErrorMessage(playerid, "Nemate toliku kolicinu destilovane vode kod sebe!");
		if(kkokain < 10 || kkokain > 15 || kkokain > PlayerInfo[playerid][xDrug][skokain2]) return SendErrorMessage(playerid, "Nemate toliku kolicinu kokaina kod sebe/ne moze ispod 10 ili iznad 15!");
		if(sodab < 1 || sodab > PlayerInfo[playerid][xSodaB]) return SendErrorMessage(playerid, "Nemate toliku kolicinu sode bikarbone kod sebe!");
		if(sodab != 2) razlika += (random(20-10)+desvoda);
		if(desvoda != 8) razlika += (random(20-10)+sodab);
		PlayerInfo[playerid][xDesVoda] -= desvoda;
		PlayerInfo[playerid][xDrug][skokain2] -= kkokain;
		PlayerInfo[playerid][xSodaB] -= sodab;
		if(IsACrack(7999-razlika)) {
			PlayerInfo[playerid][xDrugCode][slot2] = 7999-razlika;
			PlayerInfo[playerid][xDrug][slot2] = kkokain;

			SendInfoMessage(playerid, "Napravili ste %dg cracka.", PlayerInfo[playerid][xDrug][slot2]);

		} else {
			SCM(playerid, ZUTA, "Smesa vam nije uspela!");
		}
		if(PlayerInfo[playerid][xDrug][skokain2] == 0)
			PlayerInfo[playerid][xDrugCode][skokain2] = 0;
		return 1;
	}
	else if(strcmp(opcija,"heroin",true) == 0) {
		if(inProperty[playerid] == -1 && inOrgInt[playerid] == -1) return SendErrorMessage(playerid, "Morate biti u vasoj kuci/stanu/vikendici ili intu orge.");
		if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(OI[PlayerInfo[playerid][xClan]][oControlType] != CTIP_HEROIN) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		new opium, sodab, desvoda, kalcijum, amonijum, razlika = 0;
		if(sscanf(params, "s[32]s[20]iiiiii", item, opcija, slot, opium, sodab, desvoda, kalcijum, amonijum)) return SendUsageMessage(playerid, "/droga napravi heroin [slot] [opium] [soda b.] [des. voda] [kaljicum] [amonijum hlorid]");
		if(slot < 1 || slot > 5) return SendErrorMessage(playerid, "Krivi broj slota!");
		slot2 = slot-1;
		if(PlayerInfo[playerid][xDrugCode][slot2] != 0) return SendErrorMessage(playerid, "Taj slot je pun!");
		if(desvoda < 1 || desvoda > PlayerInfo[playerid][xDesVoda]) return SendErrorMessage(playerid, "Nemate toliku kolicinu destilovane vode kod sebe!");
		if(opium < 1 || opium > PlayerInfo[playerid][xOpium]) return SendErrorMessage(playerid, "Nemate toliku kolicinu opijuma kod sebe!");
		if(sodab < 1 || sodab > PlayerInfo[playerid][xSodaB]) return SendErrorMessage(playerid, "Nemate toliku kolicinu sode bikarbone kod sebe!");
		if(kalcijum < 1 || kalcijum > PlayerInfo[playerid][xKalcij]) return SendErrorMessage(playerid, "Nemate toliku kolicinu kalcijuma kod sebe!");
		if(amonijum < 1 || amonijum > PlayerInfo[playerid][xAmonijH]) return SendErrorMessage(playerid, "Nemate toliku kolicinu amonijum hlorida kod sebe!");
		if(opium < 1000 || opium > 1500) return SendErrorMessage(playerid, "Opium se moze kretati od 1000 do 1500.");
		razlika += desvoda;
		razlika += sodab;
		razlika += opium;
		razlika += kalcijum;
		razlika += amonijum;
		PlayerInfo[playerid][xDesVoda] -= desvoda;
		PlayerInfo[playerid][xOpium] -= opium;
		PlayerInfo[playerid][xSodaB] -= sodab;
		PlayerInfo[playerid][xKalcij] -= kalcijum;
		PlayerInfo[playerid][xAmonijH] -= amonijum;
		if(IsAHeroin(6999-razlika)) {

			PlayerInfo[playerid][xDrugCode][slot2] = 6999-razlika;
			PlayerInfo[playerid][xDrug][slot2] = 250;

			SendInfoMessage(playerid, "Napravili ste %dg heroina .", PlayerInfo[playerid][xDrug][slot2]);

		} else {
			SCM(playerid, ZUTA, "Smesa vam nije uspela!");
		}
		return 1;
	}
	else if(strcmp(opcija,"kokain",true) == 0) {
		if(inProperty[playerid] == -1 && inOrgInt[playerid] == -1) return SendErrorMessage(playerid, "Morate biti u vasoj kuci/stanu/vikendici ili intu orge.");
		if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		if(OI[PlayerInfo[playerid][xClan]][oControlType] != CTIP_KOKAIN) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
		new kokain, desvoda, sodab, razlika = 0;
		if(sscanf(params, "s[32]s[20]iiii", item, opcija, slot, kokain, desvoda, sodab)) return SendUsageMessage(playerid, "/droga napravi kokain [slot] [kokain] [des. voda] [soda b.]");
		if(slot < 1 || slot > 5) return SendErrorMessage(playerid, "Krivi broj slota!");
		slot2 = slot-1;
		if(PlayerInfo[playerid][xDrugCode][slot2] != 0) return SendErrorMessage(playerid, "Taj slot je pun!");
		if(desvoda < 1 || desvoda > PlayerInfo[playerid][xDesVoda]) return SendErrorMessage(playerid, "Nemate toliku kolicinu destilovane vode kod sebe!");
		if(kokain < 1 || kokain > PlayerInfo[playerid][xKokain]) return SendErrorMessage(playerid, "Nemate toliku kolicinu osusenog kokaina kod sebe - /droga osuseno.");
		if(sodab < 1 || sodab > PlayerInfo[playerid][xSodaB]) return SendErrorMessage(playerid, "Nemate toliku kolicinu sode bikarbone kod sebe!");
		razlika += (random(20-10)+desvoda);
		razlika += (random(20-10)+sodab);
		razlika += (random(20-10)+kokain);
		PlayerInfo[playerid][xDesVoda] -= desvoda;
		PlayerInfo[playerid][xKokain] -= kokain;
		PlayerInfo[playerid][xSodaB] -= sodab;
		if(IsACocaine(6088-razlika)) {
			PlayerInfo[playerid][xDrugCode][slot2] = 6088-razlika;
			PlayerInfo[playerid][xDrug][slot2] = (random(4)+10);

			SendInfoMessage(playerid, "Napravili ste %dg kokaina.", PlayerInfo[playerid][xDrug][slot2]);

		} else {
			SCM(playerid, ZUTA, "Smesa vam nije uspela!");
		}
		return 1;
	}
	else if(strcmp(opcija,"lsd",true) == 0) {
		if(inProperty[playerid] == -1 && inOrgInt[playerid] == -1) return SendErrorMessage(playerid, "Morate biti u vasoj kuci/stanu/vikendici ili intu orge.");
		new lysacid, desvoda, sodab, razlika = 0;
		if(sscanf(params, "s[32]s[20]iiii", item, opcija, slot, lysacid, desvoda, sodab)) return SendUsageMessage(playerid, "/droga napravi lsd [slot] [lys. acid] [des. voda] [soda b.]");
		if(slot < 1 || slot > 5) return SendErrorMessage(playerid, "Krivi broj slota!");
		slot2 = slot-1;
		if(PlayerInfo[playerid][xDrugCode][slot2] != 0) return SendErrorMessage(playerid, "Taj slot je pun!");
		if(desvoda < 1 || desvoda > PlayerInfo[playerid][xDesVoda]) return SendErrorMessage(playerid, "Nemate toliku kolicinu destilovane vode kod sebe!");
		if(lysacid < 1 || lysacid > PlayerInfo[playerid][xLysAcid]) return SendErrorMessage(playerid, "Nemate toliku kolicinu Lysergic acida kod sebe!");
		if(sodab < 1 || sodab > PlayerInfo[playerid][xSodaB]) return SendErrorMessage(playerid, "Nemate toliku kolicinu sode bikarbone kod sebe!");
		if(desvoda != 19) razlika += (random(20-10)+desvoda);
		if(sodab != 2) razlika += (random(20-10)+sodab);
		if(lysacid != 7) razlika += (random(20-10)+lysacid);
		PlayerInfo[playerid][xDesVoda] -= desvoda;
		PlayerInfo[playerid][xLysAcid] -= lysacid;
		PlayerInfo[playerid][xSodaB] -= sodab;
		if(IsALSD(2999-razlika)) {
			PlayerInfo[playerid][xDrugCode][slot2] = 2999-razlika;
			PlayerInfo[playerid][xDrug][slot2] = (random(3)+3);

			SendInfoMessage(playerid, "Napravili ste %d tabletica lsda.", PlayerInfo[playerid][xDrug][slot2]);

		} else {
			SCM(playerid, ZUTA, "Smesa vam nije uspela!");
		}
		return 1;
	}
	return 1;}
else if(strcmp(item, "show", true) == 0) {
	if(sscanf(params, "s[32]i", item, slot)) return SendUsageMessage(playerid, "/droga show [slot]");
	if(slot < 1 || slot > 5) return SendErrorMessage(playerid, "Krivi broj slota!");
	slot2 = slot-1;
	if(PlayerInfo[playerid][xDrugCode][slot2]  == 0) return SendErrorMessage(playerid, "Taj slot vam je prazan!");
	if(IsAMarijuana(PlayerInfo[playerid][xDrugCode][slot2])) {
		format(varstring, sizeof(varstring), "* %s vadi kesicu sa marihuanom odlicne kvalitete.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	}
	if(IsALSD(PlayerInfo[playerid][xDrugCode][slot2])) {
		format(varstring, sizeof(varstring), "* %s vadi tabletice LSD-a.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		if(IsAStrongLSD(PlayerInfo[playerid][xDrugCode][slot2])) {
			format(varstring, sizeof(varstring), "* na tabletici se vidi da nema gresaka, djeluje perfektno (very good) (( %s )).", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		}
		if(IsAGoodLSD(PlayerInfo[playerid][xDrugCode][slot2]))  {
			format(varstring, sizeof(varstring), "* na tabletici se vidi da je dobre strukture, djeluje kvalitetno (good) (( %s )).", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		}
		if(IsABadLSD(PlayerInfo[playerid][xDrugCode][slot2]))  {
			format(varstring, sizeof(varstring), "* na tabletici se vidi da nije ciste strukture, i ne djeluje kvalitetno (bad) (( %s )).", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		}
		if(IsAVeryBadLSD(PlayerInfo[playerid][xDrugCode][slot2]))  {
			format(varstring, sizeof(varstring), "* na tabletici se vidi da je vrlo lose strukture, i djeluje vrlo nekvalitetno (very bad) (( %s )).", ImeIgraca(playerid));
			PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		}
	}
	if(IsACocaine(PlayerInfo[playerid][xDrugCode][slot2])) {
		format(varstring, sizeof(varstring), "* %s vadi kesicu kokaina.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		if(IsAStrongCocaine(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* u prahu se vidi da je potpuno cist, bez primjesa (very good) (( %s )).", ImeIgraca(playerid));
		if(IsAGoodCocaine(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* u prahu bi se vidjelo da je cist, te sadrzi nekolicinu primjesa (good) (( %s )).", ImeIgraca(playerid));
		if(IsABadCocaine(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* u prahu bi se vidjeli da je necist, te sadrzi malo primjesa (bad) (( %s )).", ImeIgraca(playerid));
		if(IsAVeryBadCocaine(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* u prahu bi se vidjelo da je necist, te sadrzi pretjerano dosta primjesa (very bad) (( %s )).", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	}
	if(IsACrack(PlayerInfo[playerid][xDrugCode][slot2])) {
		format(varstring, sizeof(varstring), "* %s vadi kesicu cracka.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		if(IsAStrongCrack(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* boja cracka je perfektna, i izgleda perfektno (very good) (( %s )).", ImeIgraca(playerid));
		if(IsAGoodCrack(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* boja cracka bi se cinila dobrom, i izgleda kvalitetno (good) (( %s )).", ImeIgraca(playerid));
		if(IsABadCrack(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* boja cracka ne pogada original, i ne izgleda kvalitetno (bad) (( %s )).", ImeIgraca(playerid));
		if(IsAVeryBadCrack(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* boja cracka bi bila dosta neprirodna, i ne izgleda kvalitetno (very bad) (( %s )).", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	}
	if(IsAHeroin(PlayerInfo[playerid][xDrugCode][slot2])) {
		format(varstring, sizeof(varstring), "* %s vadi heroin.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		if(IsAStrongHeroin(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* boja heroina odgovara normalnoj, te se primjeti perfektnost (very good) (( %s )).", ImeIgraca(playerid));
		if(IsAGoodHeroin(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* boja heroina izgleda svijetlije, te se primjeti kvalitetnost (good) (( %s )).", ImeIgraca(playerid));
		if(IsABadHeroin(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* boja heroina bi bila tamna, te se primjeti nekvalitetnost (bad) (( %s )).", ImeIgraca(playerid));
		if(IsAVeryBadHeroin(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* boja heroina bi bila veoma tamna, te se primjeti nekvalitetnost (very bad) (( %s )).", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	}
	if(IsABlueMeth(PlayerInfo[playerid][xDrugCode][slot2])) {
		format(varstring, sizeof(varstring), "* %s vadi blue meth.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		if(IsAStrongBlueMeth(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* na kristalicima se ne primjecuju neprozirnosti, velicina je perfektna (very good) (( %s )).", ImeIgraca(playerid));
		if(IsAGoodBlueMeth(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* na kristalicima se negdje vide neke neprozirnosti, velicina je dobra (good) (( %s )).", ImeIgraca(playerid));
		if(IsABadBlueMeth(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* na kristalicima se vidi da su neprozirni, te su srednje velicine (bad) (( %s )).", ImeIgraca(playerid));
		if(IsAVeryBadBlueMeth(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* na kristalicima se vide da su veoma neprozirni, te su mali velicinom (very bad) (( %s )).", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	}
	if(IsAMethamphetamine(PlayerInfo[playerid][xDrugCode][slot2])) {
		format(varstring, sizeof(varstring), "* %s vadi blue meth.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
		if(IsAStrongMeth(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* na kristalicima se ne primjecuju neprozirnosti, velicina je perfektna (very good) (( %s )).", ImeIgraca(playerid));
		if(IsAGoodMeth(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* na kristalicima se negdje vide neke neprozirnosti, velicina je dobra (good) (( %s )).", ImeIgraca(playerid));
		if(IsABadMeth(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* na kristalicima se vidi da su neprozirni, te su srednje velicine (bad) (( %s )).", ImeIgraca(playerid));
		if(IsAVeryBadMeth(PlayerInfo[playerid][xDrugCode][slot2]))
			format(varstring, sizeof(varstring), "* na kristalicima se vide da su veoma neprozirni, te su mali velicinom (very bad) (( %s )).", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	}
	return 1;}
else if(strcmp(item, "test",true) == 0)
{
	if(sscanf(params, "s[32]i", item, slot)) return SendUsageMessage(playerid, "/droga test [slot]");
	if(slot < 1 || slot > 5) return SendErrorMessage(playerid, "Krivi broj slota!");
	slot2 = slot-1;
	if(PlayerInfo[playerid][xDrugCode][slot2]  == 0) return SendErrorMessage(playerid, "Taj slot vam je prazan!");
	if(IsAMarijuana(PlayerInfo[playerid][xDrugCode][slot2]))
		SendInfoMessage(playerid, "Kvaliteta marihuane: Odlicna");
	if(IsALSD(PlayerInfo[playerid][xDrugCode][slot2])) {
		if(IsAStrongLSD(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta LSD-a: Odlicna");
		if(IsAGoodLSD(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta LSD-a: Dobra");
		if(IsABadLSD(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta LSD-a: Losa");
		if(IsAVeryBadLSD(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta LSD-a: Vrlo losa");
	}
	if(IsACocaine(PlayerInfo[playerid][xDrugCode][slot2])) {
		if(IsAStrongCocaine(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Kokaina: Odlicna");
		if(IsAGoodCocaine(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Kokaina: Dobra");
		if(IsABadCocaine(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Kokaina: Losa");
		if(IsAVeryBadCocaine(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Kokaina: Vrlo losa");
	}
	if(IsABlueMeth(PlayerInfo[playerid][xDrugCode][slot2])) {
		if(IsAStrongBlueMeth(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Blue Metamfetamina: Odlicna");
		if(IsAGoodBlueMeth(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Blue Metamfetamina: Dobra");
		if(IsABadBlueMeth(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Blue Metamfetamina: Losa");
		if(IsAVeryBadBlueMeth(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Blue Metamfetamina: Vrlo losa");
	}
	if(IsACrack(PlayerInfo[playerid][xDrugCode][slot2])) {
		if(IsAStrongCrack(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Cracka: Odlicna");
		if(IsAGoodCrack(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Cracka: Dobra");
		if(IsABadCrack(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Cracka: Losa");
		if(IsAVeryBadCrack(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Cracka: Vrlo losa");
	}
	if(IsAMethamphetamine(PlayerInfo[playerid][xDrugCode][slot2])) {
		if(IsAStrongMeth(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Metamfetamina: Odlicna");
		if(IsAGoodMeth(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Metamfetamina: Dobra");
		if(IsABadMeth(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Metamfetamina: Losa");
		if(IsAVeryBadMeth(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Metamfetamina: Vrlo losa");
	}
	if(IsAHeroin(PlayerInfo[playerid][xDrugCode][slot2])) {
		if(IsAStrongHeroin(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Heroina: Odlicna");
		if(IsAGoodHeroin(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Heroina: Dobra");
		if(IsABadHeroin(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Heroina: Losa");
		if(IsAVeryBadHeroin(PlayerInfo[playerid][xDrugCode][slot2]))
			SendInfoMessage(playerid, "Kvaliteta Heroina: Vrlo losa");
	}
	return 1;}
else if(strcmp(item, "view",true) == 0)
{
	SCM(playerid, SVETLOPLAVA, "[_________________________ MOJE DROGE _________________________=]");
	format(varstring, sizeof(varstring), "Slot 1: [%s(%d g)]", GetDrugNameByDrugID(PlayerInfo[playerid][xDrugCode][0]), PlayerInfo[playerid][xDrug][0]);
	SCM(playerid, BELA, varstring);
	format(varstring, sizeof(varstring), "Slot 2: [%s(%d g)]", GetDrugNameByDrugID(PlayerInfo[playerid][xDrugCode][1]), PlayerInfo[playerid][xDrug][1]);
	SCM(playerid, BELA, varstring);
	format(varstring, sizeof(varstring), "Slot 3: [%s(%d g)]", GetDrugNameByDrugID(PlayerInfo[playerid][xDrugCode][2]), PlayerInfo[playerid][xDrug][2]);
	SCM(playerid, BELA, varstring);
	format(varstring, sizeof(varstring), "Slot 4: [%s(%d g)]", GetDrugNameByDrugID(PlayerInfo[playerid][xDrugCode][3]), PlayerInfo[playerid][xDrug][3]);
	SCM(playerid, BELA, varstring);
	format(varstring, sizeof(varstring), "Slot 5: [%s(%d g)]", GetDrugNameByDrugID(PlayerInfo[playerid][xDrugCode][4]), PlayerInfo[playerid][xDrug][4]);
	SCM(playerid, BELA, varstring);
	SCM(playerid, SVETLOPLAVA, "[______________________________________________________________=]");
	return 1;}
else if(strcmp(item, "give",true) == 0)
{
	if(sscanf(params, "s[32]uii", item, igrac, slot, kolicina)) {
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage(playerid, "/droga give [ID/Deo imena] [slot] [kolicina]");
		SCM(playerid, BELA, "[Pomoc] Slot znaci broj vaseg mjesta droge, moze biti od 1 do 5.");
		SCM(playerid, BELA, "[Pomoc] Ukucajte /droga view ako zelite vidjeti slot vase droge!");
		SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if(IsPlayerConnected(igrac)) {
		if(igrac != INVALID_PLAYER_ID) {
			if(igrac == playerid) return SendErrorMessage(playerid, "Ne mozete sami sebi davati drogu!");
			slot2 = slot-1;
			if(IsPlayerNearPlayer(5.0, playerid, igrac)) {
				if(PlayerInfo[igrac][xDrugCode][0] != 0 && PlayerInfo[igrac][xDrugCode][1] != 0 && PlayerInfo[igrac][xDrugCode][2] != 0 && PlayerInfo[igrac][xDrugCode][3] != 0 && PlayerInfo[igrac][xDrugCode][4] != 0)
				{
					return SendErrorMessage(playerid, "Taj igrac nema slobodnih drugs slotova!");
				}
				if(slot < 1 || slot > 5) return SendErrorMessage(playerid, "Broj slota ne moze biti manji od 1 i veci od 5!");
				if(PlayerInfo[playerid][xDrugCode][slot2] == 0) return SendErrorMessage(playerid, "Taj drug slot vam je prazan!");
				if(kolicina < 1 || kolicina > 100) return SendErrorMessage(playerid, "Kolicina ne moze biti manja od 1 i veca od 100!");
				if(PlayerInfo[playerid][xDrug][slot2] < kolicina) return SendErrorMessage(playerid, "Nemate toliko droge pod tim slotom!");
				format(varstring, sizeof(varstring), "%s vam je dao %d grama %s", ImeIgraca(playerid), kolicina, GetDrugNameByDrugID(PlayerInfo[playerid][xDrugCode][slot2]));
				SCM(igrac, ZUTA, varstring);
				format(varstring, sizeof(varstring), "Dali ste %s %d grama %s", ImeIgraca(igrac), kolicina, GetDrugNameByDrugID(PlayerInfo[playerid][xDrugCode][slot2]));
				SCM(playerid, ZUTA, varstring);
				if(PlayerInfo[igrac][xDrugCode][0] == 0)
				{
					PlayerInfo[igrac][xDrugCode][0] = PlayerInfo[playerid][xDrugCode][slot2];
					PlayerInfo[igrac][xDrug][0] = kolicina;
				}
				else if(PlayerInfo[igrac][xDrugCode][1] == 0)
				{
					PlayerInfo[igrac][xDrugCode][1] = PlayerInfo[playerid][xDrugCode][slot2];
					PlayerInfo[igrac][xDrug][1] = kolicina;
				}
				else if(PlayerInfo[igrac][xDrugCode][2] == 0)
				{
					PlayerInfo[igrac][xDrugCode][2] = PlayerInfo[playerid][xDrugCode][slot2];
					PlayerInfo[igrac][xDrug][2] = kolicina;
				}
				else if(PlayerInfo[igrac][xDrugCode][3] == 0)
				{
					PlayerInfo[igrac][xDrugCode][3] = PlayerInfo[playerid][xDrugCode][slot2];
					PlayerInfo[igrac][xDrug][3] = kolicina;
				}
				else if(PlayerInfo[igrac][xDrugCode][4] == 0)
				{
					PlayerInfo[igrac][xDrugCode][4] = PlayerInfo[playerid][xDrugCode][slot2];
					PlayerInfo[igrac][xDrug][4] = kolicina;
				}
				if((PlayerInfo[playerid][xDrug][slot2]-kolicina) < 1)
					PlayerInfo[playerid][xDrugCode][slot2] = 0;
				PlayerInfo[playerid][xDrug][slot2] -= kolicina;

				SavePlayer(playerid);
				SavePlayer(igrac);
			} else return SendErrorMessage(playerid, "Taj igrac nije dovoljno blizu vas.");
		}
	}
	return 1;}
else {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/droga [opcija]");
	SCM(playerid, BELA, "[Opcije] test, give, view, napravi, posadi, oberi, osusi, buyseeds, buyilegal");
	SCM(playerid, BELA, "[Opcije] use, show, vremedobranja, mix");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");}
return 1;}

CMD:report(playerid, params[]) {
if(PlayerCuffed[playerid] >= 1) return SendErrorMessage(playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes da koristis ovu komandu dok si u zatvoru.");
if(ServerInfo[Report] == false) return SendErrorMessage(playerid, "Trenutno nije moguce slanje reporta Admin timu.");
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
new id, rstring[128], string[234];
if(sscanf(params, "us[128]", id, rstring)) return SendUsageMessage(playerid, "/report [ID/Deo imena] [Text]");
if(ReportGlobal[playerid] > 0) return SendErrorMessage(playerid, "Morate cekati 60 sekundi prije novog reporta!");
if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID igraca.");
format(string, sizeof(string), ""col_server"|R| %s(ID:%d) -> %s(ID:%d): %s", ImeIgraca(playerid), playerid, ImeIgraca(id), id, rstring);
AdminRPoruka(-1, string);
	SCM(playerid, ZUTA, "Online Admin ce vam odgovoriti u najkracem mogucem roku..");
	SendClientMessageEx(playerid, ZUTA, "Vas report glasi: %s." , rstring);
	ReportGlobal[playerid] = 60;
	return 1;}

CMD:pitaj(playerid, params[]) {

if(PlayerCuffed[playerid] >= 1) return SendErrorMessage(playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes da koristis ovu komandu dok si u zatvoru.");
if(ServerInfo[Pitanja] == false) return SendErrorMessage(playerid, "Trenutno nije moguce slanje pitanja Admin TEAMU.");
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
if(askqInfo[playerid][askqSended] == true) return SendErrorMessage(playerid, "Vec ste poslali pitanje, nije vam odgovoreno ili niste pogledali.");

new text[128];
if(sscanf(params, "s[128]", text)) {
	SendUsageMessage(playerid, "/pitaj [Text]");
	return 1;}

new askQ = -1;

for(new id = 1; id < MAX_ASKQS; id++) {
	if(askqList[id][askqSend] == false) {
		askQ = id;
		break;
	}
}

if(askQ == -1) return SendErrorMessage(playerid, "Vec ima maksimalan broj poslatih pitanja.");

askqList[askQ][askqSend] = true;
askqList[askQ][askqID] = playerid;

askqInfo[playerid][askqSended] = true;
askqInfo[playerid][askqAnswered] = false;

strmid(askqList[askQ][askqOwner], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 32);
strmid(askqList[askQ][askqQuestion], text, 0, strlen(text), 128);

SendInfoMessage(playerid, "Poslao si pitanje Adminima i Helperima.");

new varstring[80];
format(varstring, sizeof(varstring), "|P| %s (%d) je poslao pitanje.(/lp)", ImeIgraca(playerid) , playerid);
RPTChat(0x00b78fFF , varstring);

return 1;}
CMD:pogledajodgovor(playerid, params[]) {

if(askqInfo[playerid][askqSended] == false) return SendErrorMessage(playerid, "Nisi poslao pitanje.");
if(askqInfo[playerid][askqAnswered] == false) return SendErrorMessage(playerid, "Nije odgovoreno na tvoje pitanje.");

new string[512];
format(string, sizeof(string), "Admin/Helper %s je odgovorio na tvoje pitanje.\n\nOdgovor: Postovani %s, %s", askqInfo[playerid][askqAdmin], ImeIgraca(playerid), askqInfo[playerid][askqAnswer]);

SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, string, "Ok", "");

askqInfo[playerid][askqSended] = false;
askqInfo[playerid][askqAnswered] = false;
strmid(askqInfo[playerid][askqAdmin], "None", 0, strlen("None"), 32);
strmid(askqInfo[playerid][askqAnswer], "None", 0, strlen("None"), 128);
return 1;}

CMD:new(playerid, params[]) {
if(PlayerCuffed[playerid] >= 1) return SendErrorMessage(playerid, "Ne mozete koristiti sada ovu komandu.");
if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu jer ste u zatvoru.");
if(GetPlayerInterior(playerid) != 0) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu u enterijeru.");
if(PlayerInfo[playerid][xLevel] > 3) return SendErrorMessage(playerid, "Niste vise novajlija.");
if(NewGlobal[playerid] > 0) return SendErrorMessage(playerid, "Sacekajte malo.");
new varstring[100];
format(varstring, sizeof(varstring), "*** Igrac [%d]%s je novi na serveru i trazio je pomoc!",playerid, ImeIgraca(playerid));
RPTChat(SVETLOPLAVA, varstring);
//SCM(playerid, 0x33CCFFAA, "Poslali ste zahtev za pomoc, STAFF ce vam se ubrzo obratiti ukoliko je online.");
SendInfoMessage(playerid, "Poslali ste zahtev za pomoc, Staff ce Vam se uskoro obratiti ukoliko je online.");
NewGlobal[playerid] = 60;
return 1;}

CMD:animacije(playerid, params[]) {
SCM(playerid, SVETLOPLAVA, "__________________________ANIMACIJE___________________________");
SCM(playerid, BELA, "/fall - /injured - /akick - /push - /handsup - /bomb - /drunk - /getarrested - /laugh - /piss");
SCM(playerid, BELA, " /basket - /medic - /spray - /robman - /taichi - /lookout - /kiss - /cellin - /cellout - /lay - /gro");
SCM(playerid, BELA, "/deal - /crack - /smoke1-4 - /groundsit - /chat - /dance - /fucku - /strip - /hide - /vomit - /eat");
SCM(playerid, BELA, "/koface - /kostomach - /crossarms - /crossarms2 - /rap - /sup - /sit - /wankin - /bat1 - /bat2");
SCM(playerid, BELA, "/exhaust - /leftslap - /hoodfrisked - /lightcig - /tapcig - /box - /lay2 - /lean - /wall - /fwalk");
SCM(playerid, BELA, "/cop - /elbow - /fstance - /lowthrow - /highthrow - /aim - /gwalk - /celebrate - /riot1 - /riot2 - /riot3");
SCM(playerid, BELA, "/ghand - /comeon - /fuckit - /scared - /caranim - /no - /crawl - /walk");
SendInfoMessage(playerid, "Da zaustavite animaciju, koristite RMB (DESNI KLIK MISA).");
return 1;}

CMD:stats(playerid) {
	ShowDialogStats(playerid);
return true;}

CMD:pokazisaobracajnu(playerid, params[]) {
new playerID;
if(sscanf(params, "u", playerID)) return SendUsageMessage(playerid, "/pokazisaobracajnu [ID/Deo Imena]");
new varstring[200];
if(IsPlayerConnected(playerID)) {
	if(playerID != INVALID_PLAYER_ID) {
		if(IsPlayerNearPlayer(8.0, playerid, playerID)) {
			if(playerid == playerID) return SendErrorMessage(playerid, "Ne mozes pokazati saobracajnu samom sebi!");

			new DialogStrgEx[545];
			format(varstring, sizeof(varstring),""col_server"Ime: "col_white"%s\n", ImeIgraca(playerid));
			format(varstring, sizeof(varstring), ""col_white"Slot 1: "col_server"[%s]\n", getVehicleName(PlayerInfo[playerid][xVoziloID][0]));
			strcat(DialogStrgEx, varstring);
			format(varstring, sizeof(varstring), ""col_white"Slot 2: "col_server"[%s]\n", getVehicleName(PlayerInfo[playerid][xVoziloID][1]));
			strcat(DialogStrgEx, varstring);
			format(varstring, sizeof(varstring), ""col_white"Slot 3: "col_server"[%s]\n", getVehicleName(PlayerInfo[playerid][xVoziloID][2]));
			strcat(DialogStrgEx, varstring);
			format(varstring, sizeof(varstring), ""col_white"Slot 4: "col_server"[%s]\n", getVehicleName(PlayerInfo[playerid][xVoziloID][3]));
			strcat(DialogStrgEx, varstring);
			SPD(playerID, dialog_EMPTY, DSMSG, varstring, DialogStrgEx, "Ok", "");
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

			format(varstring, sizeof(varstring), "* %s pokazuje saobracajnu %s.", ImeIgraca(playerid), ImeIgraca(playerID));
			PorukaRadius(30.0, playerid, varstring, LJUBICASTA);

		} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
	}
} else return SendErrorMessage(playerid, "Taj igrac nije online !");
return 1;}

CMD:oglashelp(playerid, params[]) {
SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");
SCM(playerid, -1, ""col_server" OGLAS | "col_white"Ukoliko prodajete vozilo, mozete napisati '' Prodajem 'Ime Vozila' za 4,500,000$ ''");
SCM(playerid, -1, ""col_server" OGLAS | "col_white"Ukoliko prodajete drogu, ne smete napisati '' Prodajem drogu '' vec '' Prodajem Brasno ''");
SCM(playerid, -1, ""col_server" OGLAS | "col_white"Ukoliko prodajete oruzje, ne smete napisati '' Prodajem oruzje '' vec '' Prodajem Igracke ''");
SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");
return 1;}

CMD:smsad(playerid, params[]) {
if(ServerInfo[Oglasi] == false) return SendErrorMessage(playerid, "Trenutno nije moguce slati oglase.");
if(isnull(params)) return SendUsageMessage(playerid, "/smsad [IC reklamni text] || /oglashelp");
if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti level 3+ za davanje oglasa.");
if(PlayerInfo[playerid][xZatvor] >= 1) return SendErrorMessage(playerid, "Ne mozete poslati oglas dok ste u zatvoru / ALKATRAZ.");
if(PlayerInfo[playerid][xBrojTelefona] == 0) return SendErrorMessage(playerid, "Nemate mobilni telefon!");
	if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete postaviti oglas, mutirani ste.");
if(PlayerInfo[playerid][xMuteAd] != 0) return SendErrorMessage(playerid, "Vasa zabrana za oglase traje jos %d minuta.", PlayerInfo[playerid][xMuteAd]/60);
	if(PlayerInfo[playerid][xSOglasi] == 0) return SendErrorMessage(playerid, "Vi ste iskljucili prikazivanje oglasa - /settings.");
if(gettime() < CommandTime[playerid]) 	return SendErrorMessage(playerid, "Ova komanda se mozete koristiti na svakih 40 sekundi!");

for(new i = 0; i < strlen(params); i++) {
		if(strfind(params[i], "server", true) == 0
		|| strfind(params[i], "IP", true) == 0
	|| strfind(params[i], ".", true) == 0
	|| strfind(params[i], ":1", true) == 0
	|| strfind(params[i], ":2", true) == 0
	|| strfind(params[i], ":3", true) == 0
	|| strfind(params[i], ":4", true) == 0
	|| strfind(params[i], ":5", true) == 0
	|| strfind(params[i], ":6", true) == 0
	|| strfind(params[i], ":7", true) == 0
	|| strfind(params[i], ":8", true) == 0
	|| strfind(params[i], ":9", true) == 0
	|| strfind(params[i], ";", true) == 0
	|| strfind(params[i], "jebem", true) == 0
	|| strfind(params[i], "bog", true) == 0
	|| strfind(params[i], "mater", true) == 0
	|| strfind(params[i], "helper", true) == 0
	|| strfind(params[i], "afg", true) == 0
	|| strfind(params[i], "kreten", true) == 0
	|| strfind(params[i], "admin", true) == 0
	|| strfind(params[i], "jebeni", true) == 0
	|| strfind(params[i], ".com", true) == 0
	|| strfind(params[i], ".net", true) == 0
	|| strfind(params[i], ".org", true) == 0
	|| strfind(params[i], ".info", true) == 0
	|| strfind(params[i], "www", true) == 0
	|| strfind(params[i], "glup", true) == 0
	|| strfind(params[i], "majka", true) == 0
	|| strfind(params[i], "majku", true) == 0)
		{
		SendErrorMessage(playerid, "Nedozvoljene rijeci/znakovi u oglasu!");
		return 1;
	}
}
if((!adds) && (PlayerInfo[playerid][xAdmin] < 1)) {
	SendErrorMessage(playerid, "Pokusaj ponovno %d sekundi izmedju oglasa.",  (addtimer/1000));
	return 1;}
new payout = strlen(params) * 100;
if(PlayerInfo[playerid][xTelefonBon] < payout) {
		SendErrorMessage(playerid, "Nemate dovoljno novaca na racunu(Cena toliko znakova: $%d) ", payout);
	return 1;}

new varstring[200];
format(varstring, sizeof(varstring), ""col_server"[SMS OGLAS]: "col_white"%s",  params);
AddAd(-1, varstring);

foreach(new i : Player) {
	if(PlayerLogged[i]) {
		if(PlayerInfo[i][xAdmin] > 0 || PlayerInfo[i][xHelper] > 0) {
			format(varstring, sizeof(varstring), ""col_server"Kontakt: "col_white"%s "col_server"| "col_white"[ID:%d] "col_server"| Broj: "col_white"%d", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xBrojTelefona]);
			SCM(i, -1, varstring);
		}
		else {
			if(PlayerInfo[i][xSOglasi] == 1) {
				format(varstring, sizeof(varstring), ""col_server"Kontakt: "col_white"%s "col_server"| Broj: "col_white"%d", ImeIgraca(playerid), PlayerInfo[playerid][xBrojTelefona]);
				SCM(i, -1, varstring);
			}
		}
	}
}

PlayerInfo[playerid][xTelefonBon] -= payout;
format(varstring, sizeof(varstring), "~r~Placeno za reklamu: $%d", payout);
GameTextForPlayer(playerid, varstring, 5000, 5);
BusinessOglasMoney(payout, playerid);
CommandTime[playerid] = gettime() + 40;
if(PlayerInfo[playerid][xAdmin] < 1) { SetTimer("AddsOn", addtimer, false); adds = false;}
return 1;}

CMD:ad(playerid, params[]) {
if(ServerInfo[Oglasi] == false) return SendErrorMessage(playerid, "Trenutno nije moguce slati oglase.");
if(isnull(params)) return SendUsageMessage(playerid, "/ad [IC reklamni text] || /oglashelp");
if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Nisi level 3!");
if(PlayerInfo[playerid][xZatvor] >= 1) return SendErrorMessage(playerid, "Ne mozete poslati oglas dok ste u zatvoru / ALKATRAZ.");
if(!IsPlayerInRangeOfPoint(playerid, 5.0, 922.2605, -1009.6555, -48.7380)) return SendErrorMessage(playerid, "Morate biti kod Novinara da bi ste mogli poslati oglas!");
if(PlayerInfo[playerid][xBrojTelefona] == 0) return SendErrorMessage(playerid, "Nemate mobilni telefon!");
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete postaviti oglas, mutirani ste.");
if(PlayerInfo[playerid][xMuteAd] != 0) return SendErrorMessage(playerid, "Vasa zabrana za oglase traje jos %d minuta.", PlayerInfo[playerid][xMuteAd]/60);
	if(PlayerInfo[playerid][xSOglasi] == 0) return SendErrorMessage(playerid, "Vi ste iskljucili prikazivanje oglasa - /settings.");
if(gettime() < CommandTime[playerid]) 	return SendErrorMessage(playerid, "Ova komanda se mozete koristiti na svakih 40 sekundi!");

for(new i = 0; i < strlen(params); i++) {
		if(strfind(params[i], "server", true) == 0
		|| strfind(params[i], "IP", true) == 0
	|| strfind(params[i], ".", true) == 0
	|| strfind(params[i], ":1", true) == 0
	|| strfind(params[i], ":2", true) == 0
	|| strfind(params[i], ":3", true) == 0
	|| strfind(params[i], ":4", true) == 0
	|| strfind(params[i], ":5", true) == 0
	|| strfind(params[i], ":6", true) == 0
	|| strfind(params[i], ":7", true) == 0
	|| strfind(params[i], ":8", true) == 0
	|| strfind(params[i], ":9", true) == 0
	|| strfind(params[i], ";", true) == 0
	|| strfind(params[i], "jebem", true) == 0
	|| strfind(params[i], "bog", true) == 0
	|| strfind(params[i], "mater", true) == 0
	|| strfind(params[i], "helper", true) == 0
	|| strfind(params[i], "afg", true) == 0
	|| strfind(params[i], "kreten", true) == 0
	|| strfind(params[i], "admin", true) == 0
	|| strfind(params[i], "jebeni", true) == 0
	|| strfind(params[i], ".com", true) == 0
	|| strfind(params[i], ".net", true) == 0
	|| strfind(params[i], ".org", true) == 0
	|| strfind(params[i], ".info", true) == 0
	|| strfind(params[i], "www", true) == 0
	|| strfind(params[i], "glup", true) == 0
	|| strfind(params[i], "majka", true) == 0
	|| strfind(params[i], "majku", true) == 0)
		{
		SendErrorMessage(playerid, "Nedozvoljene reci/znakovi u oglasu!");
		return 1;
	}
}
if((!adds) && (PlayerInfo[playerid][xAdmin] < 1)) {
	SendErrorMessage(playerid, "Pokusaj ponovno %d sekundi izmedju oglasa !",  (addtimer/1000));
	return 1;}
new payout = strlen(params) * 100;
if(PlayerInfo[playerid][xNovac] < payout) {
		SendErrorMessage(playerid, "Nemate dovoljno novaca(Cena toliko znakova: $%d) ", payout);
	return 1;}

new varstring[200];
format(varstring, sizeof(varstring), ""col_server"[OGLAS]: "col_white"%s",  params);
AddAd(-1, varstring);

foreach(new i : Player) {
	if(PlayerLogged[i]) {
		if(PlayerInfo[i][xAdmin] > 0 || PlayerInfo[i][xHelper] > 0) {
			format(varstring, sizeof(varstring), ""col_server"Kontakt: "col_white"%s "col_server"| "col_white"[ID:%d] "col_server"| Broj: "col_white"%d", ImeIgraca(playerid), playerid, PlayerInfo[playerid][xBrojTelefona]);
			SCM(i, -1, varstring);
		}
		else {
			if(PlayerInfo[playerid][xSOglasi] == 1) {
				format(varstring, sizeof(varstring), ""col_server"Kontakt: "col_white"%s "col_server"| "col_server"Broj: "col_white"%d", ImeIgraca(playerid), PlayerInfo[playerid][xBrojTelefona]);
				SCM(i, -1, varstring);
			}
		}
	}
}

DajIgracuNovac(playerid, - payout);
format(varstring, sizeof(varstring), "~r~Placeno za reklamu: $%d", payout);
CommandTime[playerid] = gettime() + 40;
GameTextForPlayer(playerid, varstring, 5000, 5);
BusinessOglasMoney(payout, playerid);
if(PlayerInfo[playerid][xAdmin] < 1) { SetTimer("AddsOn", addtimer, false); adds = false;}
return 1;}

CMD:kupifakture(playerid, params[]) {

if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1470.9441,-1794.0558,-20.2831)) return SendErrorMessage(playerid, "Morate biti kod saltera u Opstini!");

if(PlayerInfo[playerid][xNovac] < 2000) return SendErrorMessage(playerid, "Nemate dovoljno novca(2000$).");
if(KupljeneFakture[playerid]) return SendErrorMessage(playerid, "Vec ste kupili fakture.");

KupljeneFakture[playerid] = true;
SendInfoMessage(playerid, "Kupili ste 20 faktura za Vasu firmu, idite i ubacite ih.");
DajIgracuNovac(playerid, -2000);


return true;}

CMD:poslovi(playerid, params[]) {

if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1470.9434,-1789.0674,-20.2831)) return SendErrorMessage(playerid, "Morate biti kod saltera u Opstini!");

new DialogStrgEx[650];

strcat(DialogStrgEx, "ID\tIme posla\tKvalifikacije\n");
for(new i = 0; i < MAX_JOBS; i++) {
	format(DialogStrgEx, sizeof(DialogStrgEx), "%s%d\t%s\t%s\n", DialogStrgEx, i+1, jobsInfos[i][jName], GetJobDegree(i+1));}

SPD(playerid, dialog_JOBLIST, DSH, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI);
return 1;}

CMD:exit(playerid, params[]) {
if(PlayerCP[playerid] > 0) return SendErrorMessage(playerid, "Ne mozete komandu dok ste u eventu.");
if(PlayerCuffed[playerid] >= 1) return SendErrorMessage(playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
if(IsPlayerInAnyVehicle(playerid)) {
	ac_RemovePlayerFromVehicle(playerid); UsaoAutoProdaja[playerid] = -1;
	if(GetPVarInt(playerid, "NoFuel") == 1) {
		ac_RemovePlayerFromVehicle(playerid);
		SetPVarInt(playerid, "NoFuel", 0);
	}

	SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);}
return true;}

CMD:evozaci(playerid,params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 1) {
	new str[128];
	SCM(playerid, SVETLOPLAVA, " _______ Vozaci _______");
	foreach(new i : Player) {
		if(PlayerCP[i] > 0) {
			format(str, sizeof(str), " - %s (id: %d)", ImeIgraca(i),i);
			SCM(playerid, BELA, str);
		}
	}
} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:ekazi(playerid,params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 1) {
	if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
	new text[128], string[234];
	if(sscanf(params, "s[128]", text)) return SendUsageMessage(playerid, "/ekazi [text]");
	format(string, sizeof(string), "((EVENT | %s kaze: %s))", ImeIgraca(playerid), text);
	foreach(new i : Player) {
		if(IsPlayerNearPlayer(25.0, playerid, i)) {
			SCM(i, SVETLOPLAVA, string);
		}
	}
} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:resetrob(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 4) {
	new id;
	if(sscanf(params, "u", id)) {
		SendUsageMessage(playerid, "/resetrob [ID/Deo Imena]");
		return 1;
	}
	PlayerInfo[id][xPljackaVreme] = 0;
	SendInfoMessage(playerid, "Resetovao si rob igracu.");
	SendInfoMessage(id, "Admin vam je resetovao rob time.");} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

CMD:eventhelp(playerid, params[]) {
SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");
SCM(playerid, -1, ""col_server"EVENT HELP | "col_white"/eucitaj /eugasi /ekazi /enapusti /evozaci");
SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");
return true;}
CMD:dopunihangar(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 5) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(ServerInfo[HangarPaket] >= 9) return SendErrorMessage(playerid, "Hangar vec ima maksimalno paketa.");
else if(ServerInfo[HangarPaket] < 9)
{
	HangarPonovo();
	SendInfoMessage(playerid, "Dopunio si hangar. Trenutno ima %d paketa u hangaru.", ServerInfo[HangarPaket]);}
return 1;}
CMD:resetujhangar(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 5) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(ServerInfo[HangarPaket] == 0) return SendErrorMessage(playerid, "U hangaru nema paketa, ne mozete ga resetovati.");
ServerInfo[HangarPaket] = 0;
new hangarstring[256];
format(hangarstring, sizeof(hangarstring), ""col_server"[HANGAR]\n"col_white"Da uzmete paket kucajte - "col_server"/uzmipaket\n"col_white"Trenutno ima "col_server"%d "col_white"paketa u hangaru", ServerInfo[HangarPaket]);
UpdateDynamic3DTextLabelText(ServerInfo[HangarLabel], -1, hangarstring);
SendInfoMessage(playerid, "Resetovao si hangar, sada nema nijednog paketa.");
foreach(new i : Player)
{
	if(GetFactionType(i) == ORG_TIP_MAFIJA || GetFactionType(i) == ORG_TIP_BANDA || GetFactionType(i) == ORG_TIP_SR || GetFactionType(i) == ORG_TIP_MC)
	{
		SendClientMessage(i, 0x95b4a2FF, "Admin je unistio sve pakete u hangaru.");
	}
}
return 1;}
CMD:dopuniresurse(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");

new izbor, kolicina;
if(sscanf(params, "ii", izbor, kolicina)) {
	SendUsageMessage(playerid, "/dopuniresurse [izbor] [kolicina]");
	SCM(playerid, BELA, "[Izbor] 1. Drva | 2. Hangar | 3. Zlato | 4. Novac u banci | 5. Namestaj");
	SendInfoMessage(playerid, "Trenutno ima: Drva(%d), Zlato(%dg).", ServerInfo[Drva], ServerInfo[Zlato]);
	SendInfoMessage(playerid, "Trenutno ima: Novca u banci(%d$), Namestaj(%d).", ServerInfo[NovacBanka], ServerInfo[Namestaj]);
	return 1;}
if(izbor == 1) {

	ServerInfo[Drva] += kolicina;
		SaveServerStats();
		SendInfoMessage(playerid, "Dodao si %d drva u resurse.", kolicina);}
else if(izbor == 2) {
	SendUsageMessage(playerid, "/dopunihangar");}
else if(izbor == 3) {

	ServerInfo[Zlato] += kolicina;
		SaveServerStats();

		new zlatostring[256];
	format(zlatostring, sizeof(zlatostring), ""col_white"Trenutno u sefu ima "col_server"%dg "col_white"zlata\n"col_white"Da opljackate zlataru kucajte\n"col_server"[/pljackajzlataru]", ServerInfo[Zlato]);
	UpdateDynamic3DTextLabelText(ServerInfo[ZlatoLabel], BELA, zlatostring);

		SendInfoMessage(playerid, "Dodao si %dg zlata u resurse.", kolicina);}
else if(izbor == 4) {

	ServerInfo[NovacBanka] += kolicina;
		SaveServerStats();

		new novacstring[256];
	format(novacstring, sizeof(novacstring), ""col_white"Trenutno u sefu ima "col_server"%d$\n"col_white"Da opljackate banku kucajte\n"col_server"[/pljackajbanku]", ServerInfo[NovacBanka]);
	UpdateDynamic3DTextLabelText(ServerInfo[NovacLabel], BELA, novacstring);

	format(novacstring, sizeof(novacstring), ""col_white"[STANJE NOVCA]\n"col_white"Trenutno u sefu ima "col_server"%d$\n"col_white"Maksimalno moze imati "col_server"1000000$\n"col_server"Addiko Bank", ServerInfo[NovacBanka]);
	UpdateDynamic3DTextLabelText(ServerInfo[NovacLabel2], BELA, novacstring);

		SendInfoMessage(playerid, "Dodao si %d$ u resurse.", kolicina);}
else if(izbor == 5) {

	ServerInfo[Namestaj] += kolicina;
		SaveServerStats();
		SendInfoMessage(playerid, "Dodao si %d namestaj u resurse.", kolicina);}
else return SendErrorMessage(playerid, "Pogresan izbor.");
return true;}

CMD:izracunajorgslotove(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 5 || PlayerInfo[playerid][xSkriptaRank] == 4) {

	if(PlayerInfo[playerid][xAdmin] > 5) { if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti"); }

	new OrgID, sloboda = 0, oFile[64];
	if(sscanf(params, "i", OrgID)) {
		SendUsageMessage(playerid, "/izracunajorgslotove [OrgID]");
		SCM(playerid, NARACRVENA, "Koristi /organizacije da vidis spisak orgi.");
		return 1;
	}
	format(oFile, sizeof(oFile), O_FILE, OrgID);
	if(!fexist(oFile)) return SendErrorMessage(playerid, "Ova organizacija ne postoji u bazi podataka.");

	if(!strcmp(OI[OrgID][oClan1], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan2], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan3], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan4], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan5], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan6], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan7], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan8], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan9], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan10], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan11], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan12], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan13], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan14], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan15], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan16], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan17], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan18], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan19], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan20], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan21], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan22], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan23], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan24], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan25], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan26], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan27], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan28], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan29], "Niko", true)) { sloboda++;}
	if(!strcmp(OI[OrgID][oClan30], "Niko", true)) { sloboda++;}

	OI[OrgID][oUbacenihClanova] = 30-sloboda;
	SaveOrganization(OrgID);

	SendInfoMessage(playerid, "Ova organizacija ima %d ubacenih clanova.", 30-sloboda);

} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:ocistislot(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 5 || PlayerInfo[playerid][xSkriptaRank] == 4) {

	if(PlayerInfo[playerid][xAdmin] > 5) { if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti"); }

	new OrgID, izbor, broj, oFile[64];
	if(sscanf(params, "iii", OrgID, izbor, broj)) {
		SendUsageMessage(playerid, "/ocistislot [OrgID] [izbor] [broj slota]");
		SCM(playerid, BELA, "[Izbor] 1. Lider | 2. Clan");
		SCM(playerid, NARACRVENA, "Koristi /spisakclanova da vidis spisak clanova.");
		return 1;
	}
	format(oFile, sizeof(oFile), O_FILE, OrgID);
	if(!fexist(oFile)) return SendErrorMessage(playerid, "Ova organizacija ne postoji u bazi podataka.");
	if(izbor == 1) {

		if(broj == 1) {

			strmid(OI[OrgID][oLider1], "Niko", 0, strlen("Niko"), ORG_CLAN);
			SaveOrganization(OrgID);
			SendClientMessageEx(playerid, CRVENA, "Ocistili ste prvi slot lidera organizacije %s", OI[OrgID][oName]);
		}
		else if(broj == 2) {

			strmid(OI[OrgID][oLider2], "Niko", 0, strlen("Niko"), ORG_CLAN);
			SaveOrganization(OrgID);
			SendClientMessageEx(playerid, CRVENA, "Ocistili ste drugi slot lidera organizacije %s", OI[OrgID][oName]);
		}
		else return SendErrorMessage(playerid, "Lider slot postoji samo 1 i 2.");
	}
	else if(izbor == 2) {

		if(broj < 1 || broj > 30) return SendErrorMessage(playerid, "Clan slot postoji od 1 do 30.");

		if(broj == 1) strmid(OI[OrgID][oClan1], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 2) strmid(OI[OrgID][oClan2], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 3) strmid(OI[OrgID][oClan3], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 4) strmid(OI[OrgID][oClan4], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 5) strmid(OI[OrgID][oClan5], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 6) strmid(OI[OrgID][oClan6], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 7) strmid(OI[OrgID][oClan7], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 8) strmid(OI[OrgID][oClan8], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 9) strmid(OI[OrgID][oClan9], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 10) strmid(OI[OrgID][oClan10], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 11) strmid(OI[OrgID][oClan11], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 12) strmid(OI[OrgID][oClan12], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 13) strmid(OI[OrgID][oClan13], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 14) strmid(OI[OrgID][oClan14], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 15) strmid(OI[OrgID][oClan15], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 16) strmid(OI[OrgID][oClan16], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 17) strmid(OI[OrgID][oClan17], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 18) strmid(OI[OrgID][oClan18], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 19) strmid(OI[OrgID][oClan19], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 20) strmid(OI[OrgID][oClan20], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 21) strmid(OI[OrgID][oClan21], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 22) strmid(OI[OrgID][oClan22], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 23) strmid(OI[OrgID][oClan23], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 24) strmid(OI[OrgID][oClan24], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 25) strmid(OI[OrgID][oClan25], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 26) strmid(OI[OrgID][oClan26], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 27) strmid(OI[OrgID][oClan27], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 28) strmid(OI[OrgID][oClan28], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 29) strmid(OI[OrgID][oClan29], "Niko", 0, strlen("Niko"), ORG_CLAN);
		else if(broj == 30) strmid(OI[OrgID][oClan30], "Niko", 0, strlen("Niko"), ORG_CLAN);

		SaveOrganization(OrgID);
		SendClientMessageEx(playerid, CRVENA, "Ocistili ste %d slot clana organizacije %s.", broj, OI[OrgID][oName]);
	}
	else return SendErrorMessage(playerid, "Pogresan izbor.");

} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return true;}

CMD:dboja(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xDBO]) {

	PlayerInfo[playerid][xDBO] = true;
	SPD(playerid, dialog_DONATORBOJA, DSL, "{07C1F5]Odaberite Boju", "1.SCRVENA \t\t{FF8080]|| \n2.CRVENA \t\t{FF0000]||\n3.SPLAVA \t\t{80FFFF] ||\n4.ORANGE \t\t{FF8040]||\n5.ROZA \t\t{FF62B0]||\n6.SIVA \t\t{C0C0C0]||\n7.ZELENA \t\t{00FF00]||\n8.ZUTA \t\t{FFFF00]||\n9.TZELENA \t\t{008000]||\n10.PLAVA \t\t{0000FF]||","Odaberi","Izadji");} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");

return true;}

CMD:donatorskeboje(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new ID;
if(sscanf(params, "u", ID)) return SendUsageMessage(playerid, "/donatorskeboje [ID/Deo Imena]");
if(ID == IPI) return SendErrorMessage(playerid, "Pogresan ID korisnika.");

if(!PlayerInfo[ID][xDBO]) {

	PlayerInfo[ID][xDBO] = true;
	SendInfoMessage(ID, "Admin %s vam je Aktivirao Donatorske boje - /dboja.", ImeIgraca(playerid));
	SendInfoMessage(playerid, "Aktivirao si Donatorske boje igracu %s.", ImeIgraca(ID));
	SavePlayer(ID);

	new varstring[200];
	format(varstring, sizeof(varstring), "{36AB00][DONACIJA]: "col_white"Vlasnik {36AB00]%s"col_white" je aktivirao igracu {36AB00]%s"col_white" donatorske boje.", ImeIgraca(playerid), ImeIgraca(ID));
	SCMA(-1, varstring);}
else if(PlayerInfo[ID][xDBO]) {

	PlayerInfo[ID][xDBO] = false;
	SetPlayerColor(playerid, 0xFFFFFF00);
	SendInfoMessage(ID, "Admin %s vam je deaktivirao Donatorske boje.", ImeIgraca(playerid));
	SendInfoMessage(playerid, "Deaktivirao si Donatorske boje igracu %s", ImeIgraca(ID));
	SavePlayer(ID);

}
return true;}

CMD:altchat(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1) {
	if(AltChat[playerid] == false)
	{
		for (new i = 0; i < MAX_LINES; i ++)
		{
			PlayerTextDrawShow(playerid, AltChatTD_Player[i]);
		}

		AltChat[playerid] = true;
		//PlayerTextDrawHide(playerid, FG_GPS[playerid]);
		SendInfoMessage(playerid, "Ukljucili ste AltChat.");
	}
	else if(AltChat[playerid] == true)
	{
		for (new i = 0; i < MAX_LINES; i ++)
		{
			PlayerTextDrawHide(playerid, AltChatTD_Player[i]);
		}
		AltChat[playerid] = false;
		//PlayerTextDrawShow(playerid, FG_GPS[playerid]);
		SendInfoMessage(playerid, "Iskljucili ste AltChat.");
	}
}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:kreirajrent(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new Float:X, Float:Y, Float:Z, i = NextRentID(MAX_RENTS);
GetPlayerPos(playerid, X,Y,Z);
RentInfo[i][rentID] = CreatePickup(19132, 1, X,Y,Z, 0);
RentInfo[i][RentLabel] = Create3DTextLabel(""col_server"[ RENT A VEHICLE ]\n{FFFFFF]Da iznajmite vozilo, kucajte\n"col_server"/rent", -1, X, Y, Z, 20.0, 0, 0);
RentInfo[i][rentX] = X;
RentInfo[i][rentY] = Y;
RentInfo[i][rentZ] = Z;
SaveRent(i);
SendInfoMessage(playerid, "Novi rent pickup je kreiran - ID %d.", i);
return 1;}
CMD:izbrisirent(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
new i = GetNearestRent(playerid), rentFile[60];
if(i == -1) return SendErrorMessage(playerid, "Niste u blizini rent pickupa (/najblizirent).");
DestroyPickup(RentInfo[i][rentID]);
Delete3DTextLabel(RentInfo[i][RentLabel]);
RentInfo[i][rentX] = 0.0;
RentInfo[i][rentY] = 0.0;
RentInfo[i][rentZ] = 0.0;
format(rentFile, sizeof(rentFile), RENT_FILE, i);
if(fexist(rentFile)) { fremove(rentFile); }
SendInfoMessage(playerid, "Rent pickup ID %d je obrisan.", i);
return 1;}
CMD:najblizirent(playerid, params[]) {
if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete dok radite posao / imate uniformu.");
if(RibarOprema[playerid] == true) return SendErrorMessage(playerid, "Ne mozete ovo u opremi ribara.");
if(PlayerCP[playerid] > 0) return SendErrorMessage(playerid, "Ne mozete ovo na eventu.");
new najblizi = 0, Float:pos[3];
GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
for(new i = 1; i < MAX_RENTS; i++)
{
	if(inProperty[playerid] != -1)
	{
		if(GetDistanceBetweenPoints3D(RentInfo[i][rentX], RentInfo[i][rentY], RentInfo[i][rentZ], II[inProperty[playerid]][iEnter][0], II[inProperty[playerid]][iEnter][1], II[inProperty[playerid]][iEnter][2]) <
		GetDistanceBetweenPoints3D(RentInfo[najblizi][rentX], RentInfo[najblizi][rentY], RentInfo[najblizi][rentZ], II[inProperty[playerid]][iEnter][0], II[inProperty[playerid]][iEnter][1], II[inProperty[playerid]][iEnter][2])){ najblizi = i;}
	}
	else
	{
		if(GetDistanceBetweenPoints3D(RentInfo[i][rentX], RentInfo[i][rentY], RentInfo[i][rentZ], pos[0], pos[1], pos[2]) <
		GetDistanceBetweenPoints3D(RentInfo[najblizi][rentX], RentInfo[najblizi][rentY], RentInfo[najblizi][rentZ], pos[0], pos[1], pos[2])){ najblizi = i;}
	}
}
SendInfoMessage(playerid, "Najblizi rent Vam je lociran na radaru (crveno).");
Fusion_SetPlayerCheckpoint(playerid, RentInfo[najblizi][rentX], RentInfo[najblizi][rentY], RentInfo[najblizi][rentZ], 2.0);
CheckpointStatus[playerid] = 38;
return 1;}

CMD:rent(playerid, params[]) {
if(GetNearestRent(playerid) == -1) return SendErrorMessage(playerid, "Niste u blizini rent pickupa (/najblizirent).");
if(ServerInfo[BrojKreiranihVozila] > MaxBrojKreiranih) return SCM(playerid, SVETLOCRVENA, "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| Trenutno ne mozete rentati vozilo, limit vozila na serveru je dosegnut.");
if(IznajmioVozilo[playerid] != 0) return SendErrorMessage(playerid, "Vec imate rentano vozilo - /unrent.");
SPD(playerid, dialog_RENT, DSH, ""col_server"Iznamljivanje {FFFFFF]vozila",
"Tip\tVozilo\tCena po minuti\n\
"col_server"Auto\t{FFFFFF]Manana\t"col_green"220$\n\
"col_server"Auto\t{FFFFFF]Premier\t"col_green"360$\n\
"col_server"Auto\t{FFFFFF]Greenwood\t"col_green"420$\n\
"col_server"Motor\t{FFFFFF]Faggio\t"col_green"60$\n\
"col_server"Motor\t{FFFFFF]FCR-900\t"col_green"260$\n\
"col_server"Bicikl\t{FFFFFF]Mountain Bike\t"col_green"40$\n\
"col_server"Bicikl\t{FFFFFF]BMX\t"col_green"20$", "Dalje", "Izlaz");
return 1;}
CMD:unrent(playerid, params[]) {
if(IznajmioVozilo[playerid] == 0) return SendErrorMessage(playerid, "Nemate rentano vozilo.");
Fusion_KillTimer(RentTimer[playerid]);
Fusion_DestroyVehicle(RentVeh[playerid]);
Delete3DTextLabel(RentVehLabel[RentVeh[playerid]]);
IznajmioVozilo[playerid] = 0;
SendInfoMessage(playerid, "Uspesno ste vratili rentano vozilo.");
RentOdabir[playerid] = 0;
RentVreme[playerid] = 0;
RentVeh[playerid] = 0;
return 1;}
CMD:aktorpanel(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
SPD(playerid, dialog_AKTORPANEL, DSL, "{0077C7]AKTOR {FFFFFF]PANEL", "Kreiraj aktora\nIzmeni aktora\nIzbrisi aktora","Izaberi","Izlaz");
return 1;}
CMD:tempomat(playerid, params[]) {
			if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu.");
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti na mestu vozaca.");
			new
					szMessage[ 156 },
					speed
			;
		   
			if(sscanf(params, "i", speed))
			{
					SendUsageMessage(playerid, "/tempomat [0 - 120] - vrednosti su u km/h.");
					SendUsageMessage(playerid, "Upisite 0 da iskljucite tempomat.");  
					return 1;
			}
			
			if(speed > 120) return SendErrorMessage(playerid, "Brzina ne moze biti iznad 120km/h.");
			if(speed < 20 && speed > 0) return SendErrorMessage(playerid, "Brzina ne moze biti ispod 20km/h.");
			if(speed < 0) return SendErrorMessage(playerid, "Brzina ne moze biti u minusu.");
			
			if(speed == 0)
			{
				if(Tempomat[playerid] == false) return SendErrorMessage(playerid, "Tempomat je vec ugasen.");
				g_fSpeedCap[ playerid ] = 0.0;
				Tempomat[playerid] = false;
				SendInfoMessage(playerid, "Ugasili ste tempomat na vozilu.");
				new varstring[72];
				format(varstring, sizeof(varstring), "* %s gasi tempomat na vozilu.", ImeIgraca(playerid));
				PorukaRadius(30.0, playerid, varstring, LJUBICASTA);  
				return 1;              	
			}

			new Float:speed1 = speed/200.0;
			g_fSpeedCap[ playerid ] = speed1;
			Tempomat[playerid] = true;
		   
			format( szMessage, sizeof( szMessage ), "{005b87] [ FG:RPG ] :{FFFFFF] Maksimalna brzina vozila je postavljena na %dkm/h.", speed );
		   
			SendClientMessage( playerid, -1, szMessage );
			
			new varstring[128];
			format(varstring, sizeof(varstring), "* %s pali tempomat na vozilu i podesava ga na %dkm/h.", ImeIgraca(playerid), speed);
			PorukaRadius(30.0, playerid, varstring, LJUBICASTA);    

			return 1;}
CMD:ah(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1) {
	new a1[24], a2[24], a3[24], a4[24], a5[24], a6[24], a7[24];
	a1 = "{FF0000]Neovlasceno"; a2 = "{FF0000]Neovlasceno"; a3 = "{FF0000]Neovlasceno"; a4 = "{FF0000]Neovlasceno"; a5 = "{FF0000]Neovlasceno"; a6 = "{FF0000]Neovlasceno"; a7 = "{FF0000]Neovlasceno";
	if(PlayerInfo[playerid][xAdmin] == 1)
	{ 
		a1 = "{1cb021]Ovlasceno";
		a2 = "{FF0000]Neovlasceno";
		a3 = "{FF0000]Neovlasceno";
		a4 = "{FF0000]Neovlasceno";
		a5 = "{FF0000]Neovlasceno";
		a6 = "{FF0000]Neovlasceno";
		a7 = "{FF0000]Neovlasceno";
	}
	else if(PlayerInfo[playerid][xAdmin] == 2)
	{ 
		a1 = "{1cb021]Ovlasceno";
		a2 = "{1cb021]Ovlasceno";
		a3 = "{FF0000]Neovlasceno";
		a4 = "{FF0000]Neovlasceno";
		a5 = "{FF0000]Neovlasceno";
		a6 = "{FF0000]Neovlasceno";
		a7 = "{FF0000]Neovlasceno";
	}
	else if(PlayerInfo[playerid][xAdmin] == 3)
	{ 
		a1 = "{1cb021]Ovlasceno";
		a2 = "{1cb021]Ovlasceno";
		a3 = "{1cb021]Ovlasceno";
		a4 = "{FF0000]Neovlasceno";
		a5 = "{FF0000]Neovlasceno";
		a6 = "{FF0000]Neovlasceno";
		a7 = "{FF0000]Neovlasceno";
	}
	else if(PlayerInfo[playerid][xAdmin] == 4)
	{ 
		a1 = "{1cb021]Ovlasceno";
		a2 = "{1cb021]Ovlasceno";
		a3 = "{1cb021]Ovlasceno";
		a4 = "{1cb021]Ovlasceno";
		a5 = "{FF0000]Neovlasceno";
		a6 = "{FF0000]Neovlasceno";
		a7 = "{FF0000]Neovlasceno";
	}
	else if(PlayerInfo[playerid][xAdmin] == 5)
	{ 
		a1 = "{1cb021]Ovlasceno";
		a2 = "{1cb021]Ovlasceno";
		a3 = "{1cb021]Ovlasceno";
		a4 = "{1cb021]Ovlasceno";
		a5 = "{1cb021]Ovlasceno";
		a6 = "{FF0000]Neovlasceno";
		a7 = "{FF0000]Neovlasceno";
	}
	else if(PlayerInfo[playerid][xAdmin] == 6)
	{ 
		a1 = "{1cb021]Ovlasceno";
		a2 = "{1cb021]Ovlasceno";
		a3 = "{1cb021]Ovlasceno";
		a4 = "{1cb021]Ovlasceno";
		a5 = "{1cb021]Ovlasceno";
		a6 = "{1cb021]Ovlasceno";
		a7 = "{FF0000]Neovlasceno";
	}
	else if(PlayerInfo[playerid][xAdmin] == 7)
	{ 
		a1 = "{1cb021]Ovlasceno";
		a2 = "{1cb021]Ovlasceno";
		a3 = "{1cb021]Ovlasceno";
		a4 = "{1cb021]Ovlasceno";
		a5 = "{1cb021]Ovlasceno";
		a6 = "{1cb021]Ovlasceno";
		a7 = "{1cb021]Ovlasceno";
	}
	new varstring[256];
	format(varstring, sizeof(varstring),
		"Level\tStatus\n\
		Admin Level 1\t%s\n\
		Admin Level 2\t%s\n\
		Admin Level 3\t%s\n\
		Admin Level 4\t%s\n\
		Head Admin\t%s\n\
		Direktor\t%s\n\
		Vlasnik\t%s", a1, a2, a3, a4, a5, a6, a7);

	SPD(playerid, dialog_AHELP, DSH, D_NASLOV, varstring, D_ODABERI, D_ODUSTANI);}
else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:promoterspawn(playerid, params[]) {
if(PlayerInfo[playerid][xSpawn] == SPAWN_PROMOTER) return SendErrorMessage(playerid, "Spawn ti je vec postavljen na promotersku bazu!");
if(PlayerInfo[playerid][xPromoter] == 0) return SendErrorMessage(playerid, "Ne mozete staviti promoterski spawn jer niste promoter.");
PlayerInfo[playerid][xSpawn] = SPAWN_PROMOTER;
SavePlayer(playerid);
SCM(playerid, BELA, "Od sada cete se spawnati u promoter bazi.");
return 1;}
CMD:vipspawn(playerid,params[]) {
if(PlayerInfo[playerid][xVIPLevel] >= 1 || PlayerInfo[playerid][xYouTuber] >= 1) {
	if(PlayerInfo[playerid][xSpawn] == SPAWN_VIP) return SendErrorMessage(playerid, "Spawn ti je vec postavljen na VIP bazu!");
	PlayerInfo[playerid][xSpawn] = SPAWN_VIP;
	SavePlayer(playerid);
	SCM(playerid, BELA, "Od sada cete se spawnati u VIP/YT bazi.");} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}
CMD:hh(playerid, params[]) {
new DialogStrgEx[500];
strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
if(PlayerInfo[playerid][xHelper] >= 1 || PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xSkriptaRank] == 8) {
	strcat(DialogStrgEx, "{DABB3E]Helper 1 | "col_white"/hc /goto /hodg /lp /hduty /hoff /fv /helperi /hport /slap /rtc /eventhelp /afk\n");
	strcat(DialogStrgEx, "{DABB3E]Helper 2 | "col_white"/spec /specoff /ubij /kick /gethere /jail\n");
	if(PlayerInfo[playerid][xHelper] >= 3 || PlayerInfo[playerid][xAdmin] >= 6 || PlayerInfo[playerid][xSkriptaRank] == 8) {
		strcat(DialogStrgEx, "{DABB3E]H-HEAD | "col_white"/ho /prison /rac /smenihelpera /makehelper /jail /cc /getsvehelpere /helperstats /pustimuziku /lastseen");
	}
	SPD(playerid, dialog_HELP, DSMSG, "{DABB3E]Helper Komande", DialogStrgEx, "Ok", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
return 1;}

forward ZonaZauzmi(playerid);
public ZonaZauzmi(playerid) {

new string[128];
if(IsPlayerInDynamicArea(playerid, gZoneInfo[gZone_ID[playerid]][gZoneRectAngle]) && !IsPlayerPaused(playerid)){

	if(gZone_Time[playerid] > 0) {

		format(string, sizeof(string), "~w~Ostanite u teritoriji jos ~r~%d ~w~sekundi", gZone_Time[playerid]);
		GameTextForPlayer(playerid, string, 1000, 4) ;

		gZone_Time[playerid]--;
	}
	else if(gZone_Time[playerid] == 0) {

		GangZoneStopFlashForAll(gZoneInfo[gZone_ID[playerid]][gZoneID]);
		GangZoneHideForAll(gZoneInfo[gZone_ID[playerid]][gZoneID]);
		gZone_Time[playerid] = 0;
		gZone_InvMax1[playerid] = 0;
		Fusion_KillTimer(gZone_Timer[playerid]);

		OrgPoruka(PlayerInfo[playerid][xClan], 0xFFC801C8, "Vasa organizacija je prosirila svoju vladavinu na jos jednu teritoriju.");

		if(gZoneInfo[gZone_ID[playerid]][gZoneGangID] != -1) {

			format(string, sizeof(string), "[TERITORIJA] Suparnicka banda %s je preuzela jednu od vasih teritorija.", OI[PlayerInfo[playerid][xClan]][oName]);
			OrgPoruka(gZoneInfo[gZone_ID[playerid]][gZoneGangID], 0x95b4a2FF, string);

			format(string, sizeof(string), "[TERITORIJA] Clan %s je zauzeo teritoriju koju je kontrolisala banda %s.", ImeIgraca(playerid), OI[gZoneInfo[gZone_ID[playerid]][gZoneGangID]][oName]);
			OrgPoruka(PlayerInfo[playerid][xClan], 0x95b4a2FF, string);
		}
		else if(gZoneInfo[gZone_ID[playerid]][gZoneGangID] == -1) {

			format(string, sizeof(string), "[TERITORIJA] Clan %s je zauzeo teritoriju koja je bila slobodna.", ImeIgraca(playerid));
			OrgPoruka(PlayerInfo[playerid][xClan], 0x95b4a2FF, string);
		}


		gZoneInfo[gZone_ID[playerid]][gZoneGangID] = PlayerInfo[playerid][xClan];
		gZoneInfo[gZone_ID[playerid]][gZoneTaken] = true;

		new stringic[24];
		format(stringic, sizeof(stringic), "%s", OI[PlayerInfo[playerid][xClan]][oColor]);
		strmid(gZoneInfo[gZone_ID[playerid]][gZoneColor], stringic, 0, strlen(stringic), 255);

		format(stringic, sizeof(stringic), "0x%s88", gZoneInfo[gZone_ID[playerid]][gZoneColor]);
		GangZoneShowForAll(gZoneInfo[gZone_ID[playerid]][gZoneID], HexToInt(stringic));

		GZone_Refresh(gZone_ID[playerid]);

		gZoneInfo[gZone_ID[playerid]][gZoneTime] = 30;

		GZone_Save(gZone_ID[playerid]);

		PostaviWanted(playerid, "Zauzimanje Teritorija", "Nepoznati", 6);

		gZone_ID[playerid] = -1;
	}
}
else {

	GameTextForPlayer(playerid, "~w~Otisli ste iz teritorije!", 1000, 4) ;
	GangZoneStopFlashForAll(gZoneInfo[gZone_ID[playerid]][gZoneID]);
	gZone_Time[playerid] = 0;
	gZone_InvMax1[playerid] = 0;
	Fusion_KillTimer(gZone_Timer[playerid]);

	PostaviWanted(playerid, "Zauzimanje Teritorija", "Nepoznati", 6);

	if(gZoneInfo[gZone_ID[playerid]][gZoneGangID] != -1) {

		format(string, sizeof(string), "[TERITORIJA] Suparnicka banda %s je napustila teritoriju i prestala sa preuzimanjem.", OI[PlayerInfo[playerid][xClan]][oName]);
		OrgPoruka(gZoneInfo[gZone_ID[playerid]][gZoneGangID], 0x95b4a2FF, string);
	}

	format(string, sizeof(string), "[TERITORIJA] Clan %s je napustio teritoriju i prestao sa zauzimanjem.", ImeIgraca(playerid));
	OrgPoruka(PlayerInfo[playerid][xClan], 0x95b4a2FF, string);

	gZoneInfo[gZone_ID[playerid]][gZoneTime] = 30;

	GZone_Save(gZone_ID[playerid]);

	gZone_ID[playerid] = -1;}
return true;}

forward ZauzimanjeFirme(playerid);
public ZauzimanjeFirme(playerid) {

new string[128];

if(uFirmi[playerid] != -1) {

	if(zauzimanje_firme_Vreme[playerid] > 0) {

		format(string, sizeof(string), "~w~Ostanite u firmi jos ~r~%d ~w~sekundi", zauzimanje_firme_Vreme[playerid]);
		GameTextForPlayer(playerid, string, 1000, 4) ;

		zauzimanje_firme_Vreme[playerid]--;
	}
	else if(zauzimanje_firme_Vreme[playerid] == 0) {

		new businessID = zauzimanje_firme_ID[playerid];

		if(IsPlayerConnected(GetPlayerIdFromName(BusinessInfo[businessID][bOwner]))) {

			SCM(playerid, ZUTA, "MAFIJA OD SADA REKETIRA VASU FIRMU 7 DANA.");
		}

		zauzimanje_firme_Vreme[playerid] = 0;
		Fusion_KillTimer(zauzimanje_firme_Timer[playerid]);

		format(string, sizeof(string), "[ZAUZIMANJE] Vasa organizacija sada ima reket nad firmom %s.", BusinessInfo[businessID][bName]);
		OrgPoruka(PlayerInfo[playerid][xClan], 0xFFC801C8, string);

		OrgPoruka(PlayerInfo[playerid][xClan], 0xFFC801C8, "[ZAUZIMANJE] Sada ce vasa organizacija dobijati 20posto od zarade, 7 dana.");

		BusinessInfo[businessID][bReket] = PlayerInfo[playerid][xClan];

		BusinessInfo[businessID][bReketTime] = gettime();

		SaveBusiness(businessID);
		Business_Refresh(businessID);

		PostaviWanted(playerid, "Zauzimanje Firme", "Nepoznati", 6);

		zauzimanje_firme_ID[playerid] = -1;

	}
}
else {

	new businessID = zauzimanje_firme_ID[playerid];

	zauzimanje_firme_Vreme[playerid] = 0;
	Fusion_KillTimer(zauzimanje_firme_Timer[playerid]);

	PostaviWanted(playerid, "Zauzimanje Firme", "Nepoznati", 6);

	format(string, sizeof(string), "[ZAUZIMANJE] Clan %s je napustio firmu i prestao sa zauzimanjem.", ImeIgraca(playerid));
	OrgPoruka(PlayerInfo[playerid][xClan], 0x95b4a2FF, string);

	BusinessInfo[businessID][bReket] = -1;

	BusinessInfo[businessID][bReketTime] = 0;

	SaveBusiness(businessID);
	Business_Refresh(businessID);

	zauzimanje_firme_ID[playerid] = -1;}

return true;}

forward ZauzimanjeFirme2(playerid);
public ZauzimanjeFirme2(playerid) {

new string[128];

new businessID = zauzimanje_firme_ID[playerid];

if(IsPlayerInRangeOfPoint(playerid, 100.0, BusinessInfo[businessID][bEnterX], BusinessInfo[businessID][bEnterY], BusinessInfo[businessID][bEnterZ])) {

	if(zauzimanje_firme_Vreme[playerid] > 0) {

		format(string, sizeof(string), "~w~Ostanite pored firme jos ~r~%d ~w~sekundi", zauzimanje_firme_Vreme[playerid]);
		GameTextForPlayer(playerid, string, 1000, 4) ;

		zauzimanje_firme_Vreme[playerid]--;
	}
	else if(zauzimanje_firme_Vreme[playerid] == 0) {

		if(IsPlayerConnected(GetPlayerIdFromName(BusinessInfo[businessID][bOwner]))) {

			SCM(playerid, ZUTA, "MAFIJA OD SADA REKETIRA VASU FIRMU 7 DANA.");
		}

		zauzimanje_firme_Vreme[playerid] = 0;
		Fusion_KillTimer(zauzimanje_firme_Timer[playerid]);

		format(string, sizeof(string), "[ZAUZIMANJE] Vasa organizacija sada ima reket nad firmom %s.", BusinessInfo[businessID][bName]);
		OrgPoruka(PlayerInfo[playerid][xClan], 0xFFC801C8, string);

		OrgPoruka(PlayerInfo[playerid][xClan], 0xFFC801C8, "[ZAUZIMANJE] Sada ce vasa organizacija dobijati 20posto od zarade, 7 dana.");

		BusinessInfo[businessID][bReket] = PlayerInfo[playerid][xClan];

		BusinessInfo[businessID][bReketTime] = gettime();

		SaveBusiness(businessID);
		Business_Refresh(businessID);

		PostaviWanted(playerid, "Zauzimanje Firme", "Nepoznati", 6);

		zauzimanje_firme_ID[playerid] = -1;

	}
}
else {

	zauzimanje_firme_Vreme[playerid] = 0;
	Fusion_KillTimer(zauzimanje_firme_Timer[playerid]);

	PostaviWanted(playerid, "Zauzimanje Firme", "Nepoznati", 6);

	format(string, sizeof(string), "[ZAUZIMANJE] Clan %s je napustio firmu i prestao sa zauzimanjem.", ImeIgraca(playerid));
	OrgPoruka(PlayerInfo[playerid][xClan], 0x95b4a2FF, string);

	BusinessInfo[businessID][bReket] = -1;

	BusinessInfo[businessID][bReketTime] = 0;

	SaveBusiness(businessID);
	Business_Refresh(businessID);

	zauzimanje_firme_ID[playerid] = -1;}

return true;}


CMD:savezi(playerid, params[]) {

new DialogStrgEx[790];
for(new id = 1; id < MAX_ORG; id++) {

	if(OI[id][oTip] == ORG_TIP_BANDA || OI[id][oTip] == ORG_TIP_MAFIJA  || OI[id][oTip] == ORG_TIP_SR || OI[id][oTip] == ORG_TIP_MC) {
		new varstring[128];
		if(OI[id][oSavez] == -1) {

			format(varstring, sizeof(varstring), ""col_white"%s "col_orange"nema saveznika.\n", OI[id][oName]);
			strcat(DialogStrgEx, varstring);

		}
		else {

			format(varstring, sizeof(varstring), ""col_white"%s "col_orange"u savezu sa "col_white"%s.\n", OI[id][oName], OI[OI[id][oSavez]][oName]);
			strcat(DialogStrgEx, varstring);
		}
	}
}

SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "");
strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

return true;}

CMD:savezhelp(playerid, params[]) {

SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");
SCM(playerid, -1, ""col_server"SAVEZ HELP | "col_white"/savez /prekinisavez /sa /savezi");
SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");

return true;}

CMD:prekinisavez(playerid, params[]) {

if(PlayerInfo[playerid][xLider] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu(Samo Lider).");

if(GetFactionType(playerid) == ORG_TIP_PD ||
	GetFactionType(playerid) == ORG_TIP_MD ||
	GetFactionType(playerid) == ORG_TIP_CNN ||
	GetFactionType(playerid) == ORG_TIP_HITM ||
	GetFactionType(playerid) == ORG_TIP_ELEK ||
	GetFactionType(playerid) == ORG_TIP_TAXI) {

	SendErrorMessage(playerid, "Vasa organizacija nema razloga prekidati saveze.");
	return 1;}

if(OI[PlayerInfo[playerid][xClan]][oSavez] == -1) return SendErrorMessage(playerid, "Vasa organizacija nije u savezu.");

new savezOrga = OI[PlayerInfo[playerid][xClan]][oSavez];

if(savezOrga != -1) {

	OI[savezOrga][oSavez] = -1;
	SaveOrganization(savezOrga);}

OI[PlayerInfo[playerid][xClan]][oSavez] = -1;
SaveOrganization(PlayerInfo[playerid][xClan]);

SendInfoMessage(playerid, "Prekinuli ste savez sa drugom organizacijom.");

return true;}


CMD:sa(playerid, params[]) {

if(PlayerInfo[playerid][xZatvor] != 0) return SendErrorMessage(playerid, "Ne mozes koristi ovu komandu dok si u jailu.");
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
if(PlayerCuffed[playerid] >= 1) return SendErrorMessage(playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
if(PlayerInfo[playerid][xZatvor] >= 1) return SendErrorMessage(playerid, "Ne mozete pisati dok ste u zatvoru / ALKATRAZ.");
new poruka[128], string[234];
if(sscanf(params, "s[128]", poruka)) return SendUsageMessage(playerid, "/sa [Text]");

if(PlayerInfo[playerid][xLider] > 0 || PlayerInfo[playerid][xClan] > 0) {

	if(OI[PlayerInfo[playerid][xClan]][oSavez] == -1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu, jer nemate sklopljen savez.");

	if(PlayerInfo[playerid][xRank] == 5) format(string, sizeof string, "(%s) %s: "col_white"%s.", OI[PlayerInfo[playerid][xClan]][oPreFix], ImeIgraca(playerid), poruka);
	else if(PlayerInfo[playerid][xRank] == 6) format(string, sizeof string, "(%s) %s: "col_white"%s.", OI[PlayerInfo[playerid][xClan]][oPreFix], ImeIgraca(playerid), poruka);
	else return SendErrorMessage(playerid, "Samo rank 5 i 6 mogu koristiti ovu komandu.");
	SaveZPoruka(PlayerInfo[playerid][xClan], 0x7ef2faFF, string);

}
else { SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu."); return true;}

return true;}

CMD:savez(playerid, params[]) {

if(PlayerInfo[playerid][xLider] < 1) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu(Samo Lider).");

if(GetFactionType(playerid) == ORG_TIP_PD ||
	GetFactionType(playerid) == ORG_TIP_MD ||
	GetFactionType(playerid) == ORG_TIP_CNN ||
	GetFactionType(playerid) == ORG_TIP_HITM ||
	GetFactionType(playerid) == ORG_TIP_ELEK ||
	GetFactionType(playerid) == ORG_TIP_TAXI) {

	SendErrorMessage(playerid, "Vasa organizacija nema razloga sklapati saveze.");
	return 1;}


new id;
if(sscanf(params, "u", id)) {
	SendUsageMessage(playerid, "/savez [ID/Deo Imena]");
	return 1;}

if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID igraca.");
if(PlayerInfo[id][xLider] < 1) return SendErrorMessage(playerid, "Izabrani igrac nije lider.");
if(id == playerid) return SendErrorMessage(playerid, "Ne mozete sami sebi.");
if(!IsPlayerNearPlayer(5.0, playerid, id)) return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");

if(GetFactionType(id) == ORG_TIP_PD ||
	GetFactionType(id) == ORG_TIP_MD ||
	GetFactionType(id) == ORG_TIP_CNN ||
	GetFactionType(id) == ORG_TIP_HITM ||
	GetFactionType(id) == ORG_TIP_ELEK ||
	GetFactionType(id) == ORG_TIP_TAXI) {

	SendErrorMessage(playerid, "Organizacija izabranog lidera nema razloga sklapati saveze.");
	return 1;}

if(OI[PlayerInfo[playerid][xClan]][oSavez] != -1) return SendErrorMessage(playerid, "Vasa organizacija je vec u savezu sa nekim.");
if(OI[PlayerInfo[id][xClan]][oSavez] != -1) return SendErrorMessage(playerid, "Organizacija izabranog lidera je vec u savezu sa drugom organizacijom.");
new varstring[128];
GlobalProdaja[id] = playerid; 
format(varstring, sizeof(varstring), ""col_white"%s\n"col_orange"Lider "col_white"%s vam je ponudio savez.", OI[PlayerInfo[playerid][xClan]][oName], ImeIgraca(playerid));
SPD(id, dialog_SAVEZ, DSMSG, "Zahtev za savez", varstring, "Prihvati", "Odbij");


return true;}

CMD:makegun(playerid, params[]) { 

if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(GetFactionType(playerid) == ORG_TIP_MAFIJA) {

	if(inProperty[playerid] == -1 && inOrgInt[playerid] == -1) return SendErrorMessage(playerid, "Morate biti u vasoj kuci/stanu/vikendici ili intu orge.");

		if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Ne mozes to jos, moras biti level 3+!");

	new x_weapon[32], varstring[60];
	if(sscanf(params, "s[32]", x_weapon)) {
		SendUsageMessage(playerid, "/makegun [ime oruzja] ");
		SendUsageMessage(playerid, "Ime | knife(150mats) bat(100mats) sdpistol(1000mats) colt(1500mats) deagle(2000mats)");
		SendUsageMessage(playerid, "Ime | mp5(2750mats) shotgun(2500mats) ak47(3300mats) m4(3300mats) rifle(2500mats) sniper(6000mats)");
			return true;
	}
	if(strcmp(x_weapon,"knife",true) == 0)
	{
		if(PlayerInfo[playerid][xMaterijali] > 149)
		{
			PlayerInfo[playerid][xMaterijali] -= 150;
			GiveWeaponToPlayer(playerid, 4, 1);
			SCM(playerid, 0x95b4a2FF, "[ORUZJE] "col_white"Napravili ste Knife od 150 materijala!");

			format(varstring, sizeof(varstring), "* %s je napravio noz.", ImeIgraca(playerid));
			PorukaRadius(30.0 , playerid, varstring, LJUBICASTA);
		}
		else return SendErrorMessage(playerid, "Nemas dovoljno materijala.");
	}
	else if(strcmp(x_weapon,"bat",true) == 0)
	{
		if(PlayerInfo[playerid][xMaterijali] > 99)
		{
			PlayerInfo[playerid][xMaterijali] -= 100;
			GiveWeaponToPlayer(playerid, 5, 1);
			SCM(playerid, 0x95b4a2FF, "[ORUZJE] "col_white"Napravili ste palicu od 100 materijala!");

			format(varstring, sizeof(varstring), "* %s je napravio palicu.", ImeIgraca(playerid));
			PorukaRadius(30.0 , playerid, varstring, LJUBICASTA);
		}
		else return SendErrorMessage(playerid, "Nemas dovoljno materijala.");
	}
		else if(strcmp(x_weapon,"sdpistol",true) == 0)
	{
		if(PlayerInfo[playerid][xMaterijali] > 999)
		{
			PlayerInfo[playerid][xMaterijali] -= 1000;
			GiveWeaponToPlayer(playerid, 23, 400);
			SCM(playerid, 0x95b4a2FF, "[ORUZJE] "col_white"Napravili ste SDPistol od 1000 materijala!");

			format(varstring, sizeof(varstring), "* %s je napravio SDPistol.", ImeIgraca(playerid));
			PorukaRadius(30.0 , playerid, varstring, LJUBICASTA);
		}
		else return SendErrorMessage(playerid, "Nemas dovoljno materijala.");
	}
	else if(strcmp(x_weapon,"colt",true) == 0)
	{
		if(PlayerInfo[playerid][xMaterijali] > 1499)
		{
			PlayerInfo[playerid][xMaterijali] -= 1500;
			GiveWeaponToPlayer(playerid, 22, 400);
			SCM(playerid, 0x95b4a2FF, "[ORUZJE] "col_white"Napravili ste Colt od 1500 materijala!");

			format(varstring, sizeof(varstring), "* %s je napravio Colt.", ImeIgraca(playerid));
			PorukaRadius(30.0 , playerid, varstring, LJUBICASTA);
		}
		else return SendErrorMessage(playerid, "Nemas dovoljno materijala.");
	}
	else if(strcmp(x_weapon,"deagle",true) == 0)
	{
		if(PlayerInfo[playerid][xMaterijali] > 1999)
		{
			PlayerInfo[playerid][xMaterijali] -= 2000;
			GiveWeaponToPlayer(playerid, 24, 400);
			SCM(playerid, 0x95b4a2FF, "[ORUZJE] "col_white"Napravili ste Desert Eagle od 2000 materijala!");

			format(varstring, sizeof(varstring), "* %s je napravio Desert Eagle.", ImeIgraca(playerid));
			PorukaRadius(30.0 , playerid, varstring, LJUBICASTA);
		}
		else return SendErrorMessage(playerid, "Nemas dovoljno materijala.");
	}
	else if(strcmp(x_weapon,"mp5",true) == 0)
	{
		if(PlayerInfo[playerid][xMaterijali] > 2749)
		{
			PlayerInfo[playerid][xMaterijali] -= 2750;
			GiveWeaponToPlayer(playerid, 29, 400);
			SCM(playerid, 0x95b4a2FF, "[ORUZJE] "col_white"Napravili ste MP5 od 2750 materijala!");

			format(varstring, sizeof(varstring), "* %s je napravio MP5.", ImeIgraca(playerid));
			PorukaRadius(30.0 , playerid, varstring, LJUBICASTA);
		}
		else return SendErrorMessage(playerid, "Nemas dovoljno materijala.");
	}
	else if(strcmp(x_weapon,"shotgun",true) == 0)
	{
		if(PlayerInfo[playerid][xMaterijali] > 2499)
		{
			PlayerInfo[playerid][xMaterijali] -= 2500;
			GiveWeaponToPlayer(playerid, 25, 125);
			SCM(playerid, 0x95b4a2FF, "[ORUZJE] "col_white"Napravili ste Shotgun od 2500 materijala!");

			format(varstring, sizeof(varstring), "* %s je napravio Shotgun.", ImeIgraca(playerid));
			PorukaRadius(30.0 , playerid, varstring, LJUBICASTA);
		}
		else return SendErrorMessage(playerid, "Nemas dovoljno materijala.");
	}
	else if(strcmp(x_weapon,"ak47",true) == 0)
	{
		if(PlayerInfo[playerid][xMaterijali] > 3299)
		{
			PlayerInfo[playerid][xMaterijali] -= 3300;
			GiveWeaponToPlayer(playerid, 30, 400);
			SCM(playerid, 0x95b4a2FF, "[ORUZJE] "col_white"Napravili ste AK47 od 3300 materijala!");

			format(varstring, sizeof(varstring), "* %s je napravio AK47.", ImeIgraca(playerid));
			PorukaRadius(30.0 , playerid, varstring, LJUBICASTA);
		}
		else return SendErrorMessage(playerid, "Nemas dovoljno materijala.");
	}
	else if(strcmp(x_weapon,"m4",true) == 0)
	{
		if(PlayerInfo[playerid][xMaterijali] > 3299)
		{
			PlayerInfo[playerid][xMaterijali] -= 3300;
			GiveWeaponToPlayer(playerid, 31, 400);
			SCM(playerid, 0x95b4a2FF, "[ORUZJE] "col_white"Napravili ste M4 od 3300 materijala!");

			format(varstring, sizeof(varstring), "* %s je napravio M4.", ImeIgraca(playerid));
			PorukaRadius(30.0 , playerid, varstring, LJUBICASTA);
		}
		else return SendErrorMessage(playerid, "Nemas dovoljno materijala.");
	}
	else if(strcmp(x_weapon,"sniper",true) == 0)
	{
		if(PlayerInfo[playerid][xMaterijali] > 5999)
		{
			PlayerInfo[playerid][xMaterijali] -= 6000;
			GiveWeaponToPlayer(playerid, 32, 500);
			SCM(playerid, 0x95b4a2FF, "[ORUZJE] "col_white"Napravili ste Sniper od 6000 materijala!");

			format(varstring, sizeof(varstring), "* %s je napravio Sniper.", ImeIgraca(playerid));
			PorukaRadius(30.0 , playerid, varstring, LJUBICASTA);
		}
		else return SendErrorMessage(playerid, "Nemas dovoljno materijala.");
	}
	else if(strcmp(x_weapon,"rifle",true) == 0)
	{
		if(PlayerInfo[playerid][xMaterijali] > 2499)
		{
			PlayerInfo[playerid][xMaterijali] -= 2500;
			GiveWeaponToPlayer(playerid, 33, 150);
			SCM(playerid, 0x95b4a2FF, "[ORUZJE] "col_white"Napravili ste Rifle od 2500 materijala!");

			format(varstring, sizeof(varstring), "* %s je napravio Rifle.", ImeIgraca(playerid));
			PorukaRadius(30.0 , playerid, varstring, LJUBICASTA);
		}
		else return SendErrorMessage(playerid, "Nemas dovoljno materijala.");
	}
	else return SendErrorMessage(playerid, "Pogresno ime oruzja!");
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	}
	else return SendErrorMessage(playerid, "Samo mafije.");
return true;}


CMD:svercmatsa(playerid, params[]) {

if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(GetFactionType(playerid) == ORG_TIP_MAFIJA) {

	if(PlayerInfo[playerid][xSvercer] != 0) return SendErrorMessage(playerid, "Moras cekati jos %d minuta da bi mogao svercati opet.", PlayerInfo[playerid][xSvercer]);

	if(!IsVehicleC1(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Morate biti u kombiju nekom za prevoz");

	CheckpointStatus[playerid] = 39;
	Fusion_SetPlayerCheckpoint(playerid, -736.0009, -124.1893, 58.8809, 2.0);
	SCM(playerid, 0x95b4a2FF, "[SVERC] "col_white"Idite na oznacenu lokaciju kako bi pokupili materijale.");
	ProcesSvercanja[playerid] = 1;

}
else return SendErrorMessage(playerid, "Samo mafije.");
return true;}

CMD:prekinisverc(playerid, params[]) {

if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(GetFactionType(playerid) == ORG_TIP_MAFIJA) {

	if(ProcesSvercanja[playerid] == 0) return SendErrorMessage(playerid, "Niste poceli sverc materijala.");

	if(IDVozilaKojimSverca[playerid] != -1) KutijaMatsa[IDVozilaKojimSverca[playerid]] = false;
	IDVozilaKojimSverca[playerid] = -1;

	CheckpointStatus[playerid] = 0;
	Fusion_DisablePlayerCheckpoint(playerid);

	SCM(playerid, 0x95b4a2FF, "[SVERC] "col_white"Prekinuli ste sa svercom materijala, sledeci put mozete za 5min.");

	PlayerInfo[playerid][xSvercer] = 5;
	SavePlayer(playerid);

	ProcesSvercanja[playerid] = 0;

}
else return SendErrorMessage(playerid, "Samo mafije.");
return true;}

CMD:ubaciukombi(playerid, params[]) { 

if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(GetFactionType(playerid) == ORG_TIP_MAFIJA) {

	if(!IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_BADGE)) return SendErrorMessage(playerid, "Nemate kutiju u rukama!");

	if(ProcesSvercanja[playerid] != 3) return SendErrorMessage(playerid, "Nemate kutiju u rukama!");

	new vehicleid = getPlayerNearestVehicle(playerid), orgID = PlayerInfo[playerid][xClan];

	if(KutijaMatsa[vehicleid]) return SendErrorMessage(playerid, "Ovde vec ima ubacena kutija sa materijalima.");

	new Float:vehPos[3];
	getPosBehindVehicle(vehicleid, vehPos[0], vehPos[1], vehPos[2], 0.0);
	if(!IsPlayerInRangeOfPoint(playerid, 2, vehPos[0], vehPos[1], vehPos[2])) return SendErrorMessage(playerid, "Morate biti pored prtljaznika.");

	if(!IsVehicleC1(vehicleid)) return SendErrorMessage(playerid, "Morate biti u kombiju nekom za prevoz");

	ProcesSvercanja[playerid] = 4;

	RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BADGE);

	Fusion_SetPlayerCheckpoint(playerid, OI[orgID][oPozExtX], OI[orgID][oPozExtY], OI[orgID][oPozExtZ], 2.0);

	CheckpointStatus[playerid] = 39;

	IDVozilaKojimSverca[playerid] = vehicleid;
	KutijaMatsa[vehicleid] = true;

	SCM(playerid, 0x95b4a2FF, "[SVERC] "col_white"Ubacili ste kutiju , idite da istovarite do baze!");
	SCM(playerid, 0x95b4a2FF, "[SVERC] "col_white"Kada stignete izvadite kutiju iz kombija komandom /izvadikutiju.");
	SCM(playerid, 0x95b4a2FF, "[SVERC] "col_white"I sa kutijom u rukama stanite na marker!");
	ApplyAnimation(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0);

}
else return SendErrorMessage(playerid, "Samo mafije.");
return true;

}

CMD:izvadikutiju(playerid, params[]) {

if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(GetFactionType(playerid) == ORG_TIP_MAFIJA) {

	if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_BADGE)) return SendErrorMessage(playerid, "Vec imas kutiju u rukama!");

	if(ProcesSvercanja[playerid] != 4) return SendErrorMessage(playerid, "Niste ubacili kutiju u kombi!");

	new vehicleid = getPlayerNearestVehicle(playerid);

	if(!KutijaMatsa[vehicleid]) return SendErrorMessage(playerid, "Ovde nema ubacena kutija sa materijalima.");

	new Float:vehPos[3];
	getPosBehindVehicle(vehicleid, vehPos[0], vehPos[1], vehPos[2], 0.0);
	if(!IsPlayerInRangeOfPoint(playerid, 2, vehPos[0], vehPos[1], vehPos[2])) return SendErrorMessage(playerid, "Morate biti pored prtljaznika.");

	if(!IsVehicleC1(vehicleid)) return SendErrorMessage(playerid, "Morate biti u kombiju nekom za prevoz");

	ProcesSvercanja[playerid] = 5;

	IDVozilaKojimSverca[playerid] = -1;
	KutijaMatsa[vehicleid] = false;

	SetPlayerAttachedObject(playerid, OBJECT_SLOT_BADGE, 3052, 1, 0.15, 0.4, 0.0, 0.0, 90.0, 0.0, 1.0, 1.0, 1.0);
	SCM(playerid, 0x95b4a2FF, "[SVERC] "col_white"Izvadili ste kutiju , idite da istovarite na marker!");

	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1);

}
else return SendErrorMessage(playerid, "Samo mafije.");
return true;

}


CMD:zauzmi(playerid, params[]) { 

if(GetFactionType(playerid) != ORG_TIP_BANDA) return SendErrorMessage(playerid, "Samo bande mogu koristiti ovu komandu.");

if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes da zauzimas sa vozila.");

if(PlayerInfo[playerid][xZauzimanjeVreme] != 0) return SendErrorMessage(playerid, "Vec ste zauzimali, sacekajte jos %d minuta.", PlayerInfo[playerid][xZauzimanjeVreme]);

if(GetWeapon(playerid) != 41) return SendErrorMessage(playerid, "Morate imati sprej u rukama.");

new gZone__ID = GetNearestGZone(playerid);
if(gZone__ID == -1) return SendErrorMessage(playerid, "Moras biti u teritoriji da bi je zauzeo.");
if(!gZoneInfo[gZone__ID][gZoneTakeable]) return SendErrorMessage(playerid, "Ovu teritoriju nije moguce zauzeti.");
if(PlayerInfo[playerid][xClan] == gZoneInfo[gZone__ID][gZoneGangID]) return SendErrorMessage(playerid, "Ne mozes zauzeti teritoriju koja je u vlasnistvu tvoje bande.");
if(gZoneInfo[gZone__ID][gZoneTime] != 0) return SendErrorMessage(playerid, "Ovo je vec neko zauzimao u skorije vreme.");

if(!IsPlayerInRangeOfPoint(playerid, 5.0, gZoneInfo[gZone__ID][gZonePickupPos][0], gZoneInfo[gZone__ID][gZonePickupPos][1], gZoneInfo[gZone__ID][gZonePickupPos][2])) return SendErrorMessage(playerid, "Morate biti na pickupu te teritorije da bi zapoceli zauzimanje.");

new Orga = 0, Protiv = 0, hour, minute, seconds;
gettimeEx(hour, minute, seconds);
FixHour(hour);
hour = shifthour;

foreach(new i : Player) {
	if(PlayerInfo[i][xClan] == gZoneInfo[gZone__ID][gZoneGangID]) Protiv++;

		if(PlayerInfo[i][xClan] == PlayerInfo[playerid][xClan]) {
		Orga++;
	}
}

if(GetWeapon(playerid) >= 22 && GetWeapon(playerid) <= 41) {

	//if((hour >= 09) && (hour <= 23)) {

		if(Orga < 2)  return SendErrorMessage(playerid, "Moras imati bar dvoje ljudi iz bande online da bi zauzeo neko teritoriju.");

		if(gZoneInfo[gZone__ID][gZoneGangID] != -1) {

			if(Protiv < 2)  return SendErrorMessage(playerid, "Mora biti bar 2 clana iz protivnicke bande online da bi zauzeli njihovu teritoriju.");

			OrgPoruka(gZoneInfo[gZone__ID][gZoneGangID], 0x95b4a2FF, "[TERITORIJA] Druga banda pokusava da zauzme vasu teritoriju.");
		}

		new stringic[24];
		format(stringic, sizeof(stringic), "0x%s99", OI[PlayerInfo[playerid][xClan]][oColor]);

		GangZoneFlashForAll(gZoneInfo[gZone__ID][gZoneID], HexToInt(stringic));

		SCM(playerid, NARACRVENA, "ZAPOCEO SI ZAUZIMANJE TERITORIJE.");
		SCM(playerid, NARACRVENA, "Moras ostati ziv sledecih 10 minuta kako bi je osvojio.");
		SCM(playerid, NARACRVENA, "Ne smes se previse udaljiti od mesta zauzimanja, jer ce zauzimanje biti prekinuto.");
		
		ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 1, 1, 1, 0);
		TogglePlayerControllable(playerid, false);
		SetTimerEx("SlobodnoSada", 3000, false, "i", playerid);

		gZoneInfo[gZone__ID][gZoneTime] = 30;

		gZone_ID[playerid] = gZone__ID;
		gZone_Time[playerid] = 600;
		gZone_Timer[playerid] = SetTimerEx("ZonaZauzmi", 1000, true, "i", playerid);

		PlayerInfo[playerid][xZauzimanjeVreme] = 30;
		SavePlayer(playerid);

		new varstring[256];
		format(varstring, sizeof(varstring), "{95b4a2][TERITORIJA] Igrac %s (%d) je poceo sa zauzimanjem teritorije, specajte ga.", ImeIgraca(playerid), playerid);
		AdminPoruka(playerid, varstring);

		OrgPoruka(PlayerInfo[playerid][xClan], 0x95b4a2FF, "[TERITORIJA] Clan vase organizacije pokusava da zauzme tudju teritoriju.");

	//] else return SendErrorMessage(playerid, "Mozete zauzimati teritorije samo od 9h do 23h.");

} else return SendErrorMessage(playerid, "Nemate oruzje za zauzimanje teritorije!");

return 1;}

CMD:radio(playerid, params[]) {
if(PlayerInfo[playerid][xBoombox] != true) return SendErrorMessage(playerid, "Nemate radio.");
if(PljackaUToku || ZlataraUToku) return SendErrorMessage(playerid, "Ne mozete ovo dok je pljacka u toku.");

new item[24], varstring[60];
if(sscanf(params, "s[24] ", item)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/radio [opcija]");
	SCM(playerid, BELA, "[Opcije]: postavi, podigni, url");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(strcmp(item, "postavi", true) == 0) {
	if(BoomboxInfo[playerid][boomboxPlaced]) return SendErrorMessage(playerid, "Vec ste postavili radio.");
	if(Boombox_Nearest(playerid) != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Vec ste u blizini drugog radia.");
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate napustiti vozilo prvo.");

	Boombox_Place(playerid);

	format(varstring, sizeof(varstring), "** %s stavlja radio na pod i podesava ga.", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	SCM(playerid, ZUTA, "Postavili ste radio (koristite \"/radio\" za opcije).");
	return 1;}
else if(strcmp(item, "podigni", true) == 0) {
	if(!BoomboxInfo[playerid][boomboxPlaced]) return SendErrorMessage(playerid, "Nemate postavljen radio.");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxInfo[playerid][boomboxPos][0], BoomboxInfo[playerid][boomboxPos][1], BoomboxInfo[playerid][boomboxPos][2])) return SendErrorMessage(playerid, "Niste u blizini vaseg radia.");

	Boombox_Destroy(playerid);
	format(varstring, sizeof(varstring), "** %s je podigao svoj radio s poda.", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	return 1;}
else if(strcmp(item, "url", true) == 0) {
	new url[128];
	if(sscanf(params, "s[24]s[128]", item, url)) return SendUsageMessage(playerid, "/radio url [song url]");
	if(!BoomboxInfo[playerid][boomboxPlaced]) return SendErrorMessage(playerid, "Nemate postavljen radio.");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxInfo[playerid][boomboxPos][0], BoomboxInfo[playerid][boomboxPos][1], BoomboxInfo[playerid][boomboxPos][2])) return SendErrorMessage(playerid, "Niste u blizini vaseg radia.");

	Boombox_SetURL(playerid, url);
	format(varstring, sizeof(varstring), "** %s okrece kotacic na radiu te mjenja stanicu.", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	return 1;}
else {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/radio [opcija]");
	SCM(playerid, BELA, "[Opcije]: postavi, podigni, url");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");}
return 1;}

CMD:razvedi(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
new id;
if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/razvedi [ID/Deo imena] ");
if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID Korisnika");
SendInfoMessage(playerid, "Razveli ste igraca %s.", ImeIgraca(id));
SendInfoMessage(id, "Admin Vas je razveo.");
strmid(PlayerInfo[id][xMarriedTo], "Niko", 0, strlen("Niko"), 24);
PlayerInfo[id][xMarried] = false;
return 1;}

CMD:zaprosi(playerid, params[]) {
if(!IsPlayerInRangeOfPoint(playerid, 10.0, 725.3050, -1597.1079, 3.4530)) return SendErrorMessage(playerid, "Niste na mestu za prosidbu!");
new id;
if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/zaprosi [ID/Deo imena]");
new varstring[128];
if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID Korisnika");
if(PlayerInfo[playerid][xNovac] < 10000) return SendErrorMessage(playerid, "Trosak svadbe kosta $10000!");
if(PlayerInfo[playerid][xMarried] != false) return SendErrorMessage(playerid, "Vec si ozenjen/udata!");
if(PlayerInfo[id][xMarried] != false) return SendErrorMessage(playerid, "Vec je ozenjen/udata!");
if(PlayerInfo[playerid][xPol] != 1) return SendErrorMessage(playerid, "Samo muski pol moze da zaprosi!");
if(PlayerInfo[id][xPol] != 2) return SendErrorMessage(playerid, "Ne mozete zaprositi muskarca.");
if(IsPlayerNearPlayer(8.0, playerid, id)) {
	if(id == playerid) return SendErrorMessage(playerid, "Ne mozes sam sebe zaprosit!");
	format(varstring, 50, "* Zaprosio si %s.", ImeIgraca(id));
	SCM(playerid, SVETLOPLAVA, varstring);
	format(varstring, sizeof(varstring), "* %s te zaprosio/la (pisi /prihvati marriage) da prihvatis brak.", ImeIgraca(playerid));
	SCM(id, SVETLOPLAVA, varstring);
	ProposeOffer[id] = playerid;}
else return SendErrorMessage(playerid, "Osoba se ne nalazi u vasoj blizini!");
return 1;}

CMD:svedok(playerid, params[]) {
new id;
if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/svedok [ID/Deo imena]");
if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID Korisnika");
if(IsPlayerNearPlayer(8.0, playerid, id)) {
	new varstring[128];
	if(id == playerid) return SendErrorMessage(playerid, "Ne mozes sebe staviti za svedoka!");
	format(varstring, sizeof(varstring), "* Pitao si %s hoce li biti tvoj svedok na vencanju.", ImeIgraca(id));
	SCM(playerid, SVETLOPLAVA, varstring);
	format(varstring, sizeof(varstring), "* %s te pitao hoces li biti njegov/njezin svedok na vencanju (pisi /prihvati witness  - da prihvatis).", ImeIgraca(playerid));
	SCM(id, SVETLOPLAVA, varstring);
	MarryWitnessOffer[id] = playerid;}
else return SendErrorMessage(playerid, "Osoba se ne nalazi u vasoj blizini!");
return 1;}

CMD:divorce(playerid, params[]) {
if(PlayerInfo[playerid][xMarried] == false) return SendErrorMessage(playerid, "Nisi ozenjen/udana!");
new id, varstring[128];
if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/divorce [ID vaseg partnera] ");
if(id == IPI) return SendErrorMessage(playerid, "Igrac nije na serveru.");
if(IsPlayerNearPlayer(8.0, playerid, id)) {
	if(id == playerid) return SendErrorMessage(playerid, "Ne mozete se razvesti sami od sebe!");
	new dstring[MAX_PLAYER_NAME], wstring[MAX_PLAYER_NAME];
	format(varstring, sizeof(varstring), "%s", ImeIgraca(id));
	strmid(wstring, varstring, 0, strlen(varstring), 255);
	format(varstring, sizeof(varstring), "%s", PlayerInfo[playerid][xMarriedTo]);
	strmid(dstring, varstring, 0, strlen(varstring), 255);
	if(strcmp(dstring, wstring, true) == 0) {
		format(varstring, sizeof(varstring), "* Poslao si papire za razvod %s.", ImeIgraca(id));
		SCM(playerid, SVETLOPLAVA, varstring);
		format(varstring, sizeof(varstring), "* %s poslao/la ti je papire za razvod (pisi /prihvati divorce) da prihvatis.", ImeIgraca(playerid));
		SCM(id, SVETLOPLAVA, varstring);
		DivorceOffer[id] = playerid;
	}
	else return SendErrorMessage(playerid, "Taj igrac nije vencan za tebe!");}
else return SendErrorMessage(playerid, "Osoba se ne nalazi u vasoj blizini!");
return 1;}

CMD:lottohelp(playerid, params[]) {
SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");
SCM(playerid, -1, ""col_server"LOTTO HELP | "col_white"Izvalacenje lotto kombinacije je svaki pun sat.");
SCM(playerid, -1, ""col_server"LOTTO HELP | "col_white"/uplatilotto /podignidobitak /mojtiket");
SCM(playerid, SVETLOPLAVA, ""col_server"___________________________________________________________________");
return 1;}

CMD:uplatilotto(playerid, params[]) {

new broj;

if(!IsPlayerInRangeOfPoint(playerid, 3, 1283.1210,-1544.3549,13.5323)) return SendErrorMessage(playerid, "Niste na salteru drzavne lutrije.");
if(PlayerInfo[playerid][xLottoNumber] > 0) {
	SendErrorMessage(playerid, "Vec imate uplacen lotto listic.");
	return 1;}
if(PlayerInfo[playerid][xNovac] < 5000) return SendErrorMessage(playerid, "Nemate dovoljno novca. Cena listica je 5000$.");

if(sscanf(params, "d", broj)) return SendUsageMessage(playerid, "/uplatilotto [broj] ");

if(broj < 1 || broj > 150) {
	SendErrorMessage(playerid, "Brojevi ne mogu da idu ispod 1 ili iznad 150.");
	return true;}

PlayerInfo[playerid][xLottoNumber] = broj;
SavePlayer(playerid);

SendClientMessageEx(playerid, -1, "Uplatili ste tiket sa brojem %d.", broj);
SCM(playerid, -1, "Koristi /lottohelp.");
DajIgracuNovac(playerid, -5000);
BusinessLutrijaMoney(5000, playerid);
return true;}

CMD:mojtiket(playerid, params[]) {
if(PlayerInfo[playerid][xLottoNumber] == 0) return SendErrorMessage(playerid, "Nemate uplacen lotto listic.");
SendClientMessageEx(playerid, FUSIONGAMING, "Tvoja lotto tiket kombinacija je: "col_white"%d.", PlayerInfo[playerid][xLottoNumber]);
return true;}

CMD:podignidobitak(playerid,params[]) {
if(!IsPlayerInRangeOfPoint(playerid, 3, 1283.1432,-1542.1858,13.5174)) return SendErrorMessage(playerid, "Niste na salteru drzavne lutrije.");
if(PlayerInfo[playerid][xLottoMoney] < 1) return SendErrorMessage(playerid, "Trenutno nemate novca na lotto racunu.");
DajIgracuNovac(playerid, PlayerInfo[playerid][xLottoMoney]);
SendInfoMessage(playerid, "Preuzeli ste Vasu nagradu od "col_white"%d$.", PlayerInfo[playerid][xLottoMoney]);
PlayerInfo[playerid][xLottoMoney] = 0;
SavePlayer(playerid);
return true;}

stock TogPlayerHud(playerid) {

if(TogHud[playerid]) {

	global_tds(playerid, true);
	fg_info_tds(playerid, false);

	for(new i = 0; i < 3; i++) {
		PlayerTextDrawShow(playerid, FG_InGameP[playerid][i]);
	}

	EnableHealthBarForPlayer(playerid, true); 

	TogHud[playerid] = false;
	PlayerInfo[playerid][xSHud] = 1;
	SendInfoMessage(playerid, "Ukljucili ste hud.");}
else if(!TogHud[playerid]) {

	global_tds(playerid,false);


	for(new i = 0; i < 3; i++) {
		PlayerTextDrawHide(playerid, FG_InGameP[playerid][i]);
	}

	fg_info_tds(playerid,true);

	EnableHealthBarForPlayer(playerid, false);

	TogHud[playerid] = true;
	PlayerInfo[playerid][xSHud] = 0;
	SendInfoMessage(playerid, "Iskljucili ste hud.");}
}

CMD:dropgun(playerid, params[]) {
if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti level 3+ da bi mogli dropati oruzje.");
if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Morate biti na nogama da bi bacili oruzje!");
if(DropedGun[playerid] != 0) return SendErrorMessage(playerid, "Morate sacekati jos %d sekundi da bi ponovo bacili oruzje.", DropedGun[playerid]);
if(GetFactionType(playerid) == ORG_TIP_PD) return SendErrorMessage(playerid, "PD nema potrebe da koristi ovu komandu.");
if(PozvanDuel[playerid] == 1) return SendErrorMessage(playerid, "Ne mozete ovo dok ste na duelu.");
if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes na DM Zoni.");
if(WARPInfo[playerid][WARIgrac] != -1) return SendErrorMessage(playerid, "Ne mozes dok si u WARU.");
if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete dok radite posao");
if(PlayerInfo[playerid][xZatvor] >= 1) return SendErrorMessage(playerid, "Ne mozete baciti Oruzje dok ste u zatvoru / ALKATRAZ.");
if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete ovo, imate zabranu - /disarmtime.");

new GunID = GetWeapon(playerid);
new GunAmmo = GetPlayerAmmo(playerid);
if(GunID > 0 && GunAmmo != 0) {
	if(GetWeapon(playerid) == GetPlayerWeapon(playerid)) {
		new f = -1;
		for(new a = 0; a < MAX_GOBJ; a++) {
			if(dGunData[a][ObjPos][0] == 0.0) {
				f = a;
				break;
			}
		}
		if(f == -1) return SendErrorMessage(playerid, "Trenutno ne mozes baciti oruzje na pod.");
		if(GunID == 35 || GunID == 36 || GunID == 37 || GunID == 38) return SendErrorMessage(playerid, "Ne mozete baciti ovo oruzje");
		RemovePlayerWeapon(playerid, GunID);

		dGunData[f][ObjData][0] = GunID;
		dGunData[f][ObjData][1] = GunAmmo;

		GetPlayerPos(playerid, dGunData[f][ObjPos][0], dGunData[f][ObjPos][1], dGunData[f][ObjPos][2]);
		dGunData[f][gObjID] = CreateDynamicObject(WeaponInfos[GunID][wModel], dGunData[f][ObjPos][0], dGunData[f][ObjPos][1], dGunData[f][ObjPos][2]-1, 93.7, 120.0, 120.0);
		DropedGun[playerid] = 30;
		SendClientMessageEx(playerid, -1, "Bacio si oruzje "col_server"%s.", WeaponInfos[dGunData[f][ObjData][0]][wName]);
	}
}
return true;}

CMD:destroygun(playerid, params[]) {

if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete ovo, imate zabranu - /disarmtime.");
if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Moras biti na nogama da bi unistio oruzje!");
new f = -1;
for(new a = 0; a < MAX_GOBJ; a++) {
	if(IsPlayerInRangeOfPoint(playerid, 5.0, dGunData[a][ObjPos][0] , dGunData[a][ObjPos][1], dGunData[a][ObjPos][2])) {
		f = a;
		break;
	}
}
if(f == -1) return SendErrorMessage(playerid, "Nemas oruzje u blizini.");
DestroyDynamicObject(dGunData[f][gObjID]);

SendClientMessageEx(playerid, -1, "Unistio si oruzje "col_server"%s.", WeaponInfos[dGunData[f][ObjData][0]][wName]);

dGunData[f][ObjPos][0] = 0.0;
dGunData[f][ObjPos][1] = 0.0;
dGunData[f][ObjPos][2] = 0.0;
dGunData[f][gObjID] = -1;
dGunData[f][ObjData][0] = 0;
dGunData[f][ObjData][1] = 0;
return true;}

CMD:pickupgun(playerid, params[]) {

if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendErrorMessage(playerid, "Moras biti na nogama da bi pokupio oruzje!");
if(PozvanDuel[playerid] == 1) return SendErrorMessage(playerid, "Ne mozete ovo dok ste na duelu.");
if(NaDmEventu[playerid] == true) return SendErrorMessage(playerid, "Ne mozes na DM Zoni.");
if(WARPInfo[playerid][WARIgrac] != -1) return SendErrorMessage(playerid, "Ne mozes dok si u WARU.");
if(UzeoOpremu[playerid] == true) return SendErrorMessage(playerid, "Ne mozete dok radite posao");
if(PlayerInfo[playerid][xZatvor] >= 1) return SendErrorMessage(playerid, "Ne mozete uzimati Oruzje dok ste u zatvoru / ALKATRAZ.");
if(PlayerInfo[playerid][xDisarm] != 0) return SendErrorMessage(playerid, "Ne mozete ovo, imate zabranu - /disarmtime.");

new f = -1;
for(new a = 0; a < MAX_GOBJ; a++) {
	if(IsPlayerInRangeOfPoint(playerid, 5.0, dGunData[a][ObjPos][0] , dGunData[a][ObjPos][1], dGunData[a][ObjPos][2])) {
		f = a;
		break;
	}
}
if(f == -1) return SendErrorMessage(playerid, "Nemas oruzje u blizini.");
DestroyDynamicObject(dGunData[f][gObjID]);

SendClientMessageEx(playerid, -1, "Pokupio si oruzje "col_server"%s.", WeaponInfos[dGunData[f][ObjData][0]][wName]);

GiveWeaponToPlayer(playerid, dGunData[f][ObjData][0], dGunData[f][ObjData][1]);
dGunData[f][ObjPos][0] = 0.0;
dGunData[f][ObjPos][1] = 0.0;
dGunData[f][ObjPos][2] = 0.0;
dGunData[f][gObjID] = -1;
dGunData[f][ObjData][0] = 0;
dGunData[f][ObjData][1] = 0;
return true;}

forward SprayDone(playerid, broj);
public SprayDone(playerid, broj) {
new vehicleid = GetPlayerVehicleID(playerid);
if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
	switch(broj) {
		case 0: {
			ac_SetVehiclePos(vehicleid, 2076.5461, -1832.5647, 13.5545);
			SendInfoMessage(playerid, "Popravio si vozilo za 6000$.");
			TogglePlayerControllable(playerid, 1);
			antiCheatCS[playerid][VehRepairTime] = 3;
		}
		case 1: {
			ac_SetVehiclePos(vehicleid, 1025.4225, -1033.1587, 31.8380);
			SendInfoMessage(playerid, "Popravio si vozilo za 6000$.");
			TogglePlayerControllable(playerid, 1);
			antiCheatCS[playerid][VehRepairTime] = 3;
		}
		case 2: {
			ac_SetVehiclePos(vehicleid, 488.3767, -1731.1235, 11.2469);
			SendInfoMessage(playerid, "Popravio si vozilo za 6000$.");
			TogglePlayerControllable(playerid, 1);
			antiCheatCS[playerid][VehRepairTime] = 3;
		}
		case 3: {
			ac_SetVehiclePos(vehicleid, 720.2908, -467.6113, 16.3437);
			SendInfoMessage(playerid, "Popravio si vozilo za 6000$.");
			TogglePlayerControllable(playerid, 1);
			antiCheatCS[playerid][VehRepairTime] = 3;
		}
		case 4: {
			ac_SetVehiclePos(vehicleid, 2075.1633, -1831.4573, 13.2522);
			SendInfoMessage(playerid, "Popravio si vozilo za 6000$.");
			TogglePlayerControllable(playerid, 1);
			antiCheatCS[playerid][VehRepairTime] = 3;
		}
	}
	BusinessPaySprayMoney(playerid, 600);}
return true;}
CMD:enter(playerid, params[]) {
if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Morate biti na mestu vozaca.");
if(PlayerInfo[playerid][xNovac] < 6000) return SendErrorMessage(playerid, "Nemate dovoljno novca(6000$).");
new vehicleid = GetPlayerVehicleID(playerid);
if(IsPlayerInRangeOfPoint(playerid, 3.0, 1099.1404, -824.9033, 181.2554)) {
	DajIgracuNovac(playerid, -6000);
	ac_SetVehiclePos(vehicleid, 2062.1294, -1831.5498, 13.5469);
	TogglePlayerControllable(playerid, 0);
	SetVehicleZAngle(vehicleid, 90);
	SetTimerEx("SprayDone", 5000, false, "ii", playerid, 0);
	antiCheatCS[playerid][VehRepairTime] = 10;}
else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1024.9756, -1030.7930, 32.0257)) {
	DajIgracuNovac(playerid, -6000);
	ac_SetVehiclePos(vehicleid, 1024.9763, -1021.8850, 32.1016);
	TogglePlayerControllable(playerid, 0);
	SetVehicleZAngle(vehicleid, 0);
	SetTimerEx("SprayDone", 5000, false, "ii", playerid, 1);
	antiCheatCS[playerid][VehRepairTime] = 10;}
else if(IsPlayerInRangeOfPoint(playerid, 3.0, 488.3819, -1733.0563, 11.1752)) {
	DajIgracuNovac(playerid, -6000);
	ac_SetVehiclePos(vehicleid, 487.4099, -1741.4585, 11.1330);
	TogglePlayerControllable(playerid, 0);
	SetVehicleZAngle(vehicleid, 180);
	SetTimerEx("SprayDone", 5000, false, "ii", playerid, 2);
	antiCheatCS[playerid][VehRepairTime] = 10;}
else if(IsPlayerInRangeOfPoint(playerid, 3.0, 719.8940, -464.8272, 16.3359)) {
	DajIgracuNovac(playerid, -6000);
	ac_SetVehiclePos(vehicleid, 720.3924, -456.0286, 16.3359);
	TogglePlayerControllable(playerid, 0);
	SetVehicleZAngle(vehicleid, 0);
	SetTimerEx("SprayDone", 5000, false, "ii", playerid, 3);
	antiCheatCS[playerid][VehRepairTime] = 10;}
else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2074.6018, -1831.7043, 13.6468)) {
	DajIgracuNovac(playerid, -6000);
	ac_SetVehiclePos(vehicleid, 2067.0906, -1831.4235, 13.1096);
	TogglePlayerControllable(playerid, 0);
	SetVehicleZAngle(vehicleid, -270);
	SetTimerEx("SprayDone", 5000, false, "ii", playerid, 4);
	antiCheatCS[playerid][VehRepairTime] = 10;}
else return SendErrorMessage(playerid, "Morate biti pored ulaza payspraya.");
return true;}

CMD:music(playerid, params[]) {
SPD(playerid, dialog_RADIOPLAY, DSL, D_NASLOV, "BUM Radio\nB92 Radio\nAntena Radio\nJuzni Vetar\nCool Radio\nNaxi Radio\nPingvin Radio\nCarsija Radio\nRadio BN\nRadio M\nRadio Banovina\nRadio Super\nBalkan DJ\nD Plus\nOff Radio", D_ODABERI, D_ODUSTANI);
return true;}
CMD:statistika(playerid, params[]) {

new coordsstring[200], srecnisati[11], srecnisatix3[11], mogucnostreporta[11], mogucnostpitanja[11], mogucnostkupovinev[11], oglasici[11];

if(ServerInfo[HappyHours] == true) srecnisati = "Ukljuceni";
else srecnisati = "Iskljuceni";

if(ServerInfo[HappyHoursx3] == true) srecnisatix3 = "Ukljuceni";
else srecnisatix3 = "Iskljuceni";

if(ServerInfo[KupovinaVozila] == true) mogucnostkupovinev = "ukljucena";
else mogucnostkupovinev = "iskljucena";

if(ServerInfo[Report] == true) mogucnostreporta = "ukljucena";
else mogucnostreporta = "iskljucena";

if(ServerInfo[Pitanja] == true) mogucnostpitanja = "ukljucena";
else mogucnostpitanja = "iskljucena";

if(ServerInfo[Oglasi] == true) oglasici = "ukljucena";
else oglasici = "iskljucena";

new DialogStrgEx[1440];
strcat(DialogStrgEx, "__________________________________________________________________\n");
format(coordsstring, sizeof(coordsstring), ""col_white"Ukupno poseta servera: "col_server"%d "col_crvena"| "col_white"Ukupno registrovanih clanova: "col_server"%d\n", ServerInfo[BrojPosetaServeru], ServerInfo[RegistrovanihKorisnika]);
strcat(DialogStrgEx, coordsstring);
format(coordsstring, sizeof(coordsstring), ""col_white"Ukupno banovanih korisnika: "col_server"%d "col_crvena"| "col_white"Ukupno kikovanih korisnika: "col_server"%d\n", ServerInfo[BanovanihKorisnika], ServerInfo[KikovanihKorisnika]);
strcat(DialogStrgEx, coordsstring);
format(coordsstring, sizeof(coordsstring), ""col_white"Broj dodeljenih warnova: "col_server"%d "col_crvena"| "col_white"HappyHours 2x: "col_server"%s "col_crvena"| "col_white"HappyHours 3x: "col_server"%s\n", ServerInfo[BrojWarnova], srecnisati, srecnisatix3);
strcat(DialogStrgEx, coordsstring);
format(coordsstring, sizeof(coordsstring), ""col_white"Pocetni level: "col_server"%d "col_crvena"| "col_white"Pocetni novac: "col_server"%d$\n", ServerInfo[PocetniLevel], ServerInfo[PocetniNovaca]);
strcat(DialogStrgEx, coordsstring);
format(coordsstring, sizeof(coordsstring), ""col_white"Mogucnost kupovine vozila je "col_server"%s"col_white".\n", mogucnostkupovinev);
strcat(DialogStrgEx, coordsstring);
format(coordsstring, sizeof(coordsstring), ""col_white"Mogucnost slanja pitanja Admin timu je "col_server"%s"col_white".\n", mogucnostpitanja);
strcat(DialogStrgEx, coordsstring);
format(coordsstring, sizeof(coordsstring), ""col_white"Mogucnost slanja reporta Admin timu je "col_server"%s"col_white".\n", mogucnostreporta);
strcat(DialogStrgEx, coordsstring);
//format(coordsstring, sizeof(coordsstring), ""col_white"Trenutni broj kreiranih vozila je "col_server"%d"col_white".\n", ServerInfo[BrojKreiranihVozila]);
//strcat(DialogStrgEx, coordsstring);
format(coordsstring, sizeof(coordsstring), ""col_white"Mogucnost postavljanja oglasa je "col_server"%s"col_white".\n", oglasici);
strcat(DialogStrgEx, coordsstring);
format(coordsstring, sizeof(coordsstring), ""col_white"Rekord servera je "col_server"%d"col_white".\n", ServerInfo[RekordServera]);
strcat(DialogStrgEx, coordsstring);
strcat(DialogStrgEx, "__________________________________________________________________");
SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "");
strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
return 1;}
CMD:unrentroom(playerid, params[]) {

if(PlayerInfo[playerid][xRentID] == -1) return SendErrorMessage(playerid, "Nisi rentao nijednu imovinu.");

II[PlayerInfo[playerid][xRentID]][iRentovano]--;
PlayerInfo[playerid][xSpawn] = SPAWN_OBICAN_LS_1;
SavePlayer(playerid);
SaveProperty(PlayerInfo[playerid][xRentID]);

PlayerInfo[playerid][xRentID] = -1;

SendInfoMessage(playerid, "Unretnovao si sobu u imovini koju si iznajmljivao.");
return 1;}

CMD:rentroom(playerid, params[]) {
if(GetNearestProperty(playerid) == -1) return SendErrorMessage(playerid, "Nema imovine u vasoj blizini!");
if(II[GetNearestProperty(playerid)][iRentable] == 0) return SendErrorMessage(playerid, "Ova imovina ne moze da se renta!");
if(II[GetNearestProperty(playerid)][iRentPrice] == 0) return SendErrorMessage(playerid, "Ova imovina ne moze da se renta!");
if(PlayerInfo[playerid][xLevel] < 5) return SendErrorMessage(playerid, "Morate biti level 5+ za rentanje sobe!");
if(PlayerInfo[playerid][xNovac] < II[GetNearestProperty(playerid)][iRentPrice]) return SendErrorMessage(playerid, "Nemas dovoljno novca(%d$).", II[GetNearestProperty(playerid)][iRentPrice]);

PlayerInfo[playerid][xRentID] = GetNearestProperty(playerid);
PlayerInfo[playerid][xSpawn] = SPAWN_RENT;
DajIgracuNovac(playerid, -II[GetNearestProperty(playerid)][iRentPrice]);
II[GetNearestProperty(playerid)][iRentovano]++;
II[GetNearestProperty(playerid)][iMoney] += II[GetNearestProperty(playerid)][iRentPrice];
SaveProperty(GetNearestProperty(playerid));

SendInfoMessage(playerid, "Uspesno si rentao ovu imovinu za %d$.", II[GetNearestProperty(playerid)][iRentPrice]);
return 1;}
CMD:ehealth(playerid, params[]) {
if(IsPlayerInRangeOfPoint(playerid, 7.0, -531.2928,2573.9509,53.5550)) {
	Fusion_SetPlayerHealth(playerid, 100);
	Fusion_SetPlayerArmour(playerid, 0);}
return true;}

CMD:skydive(playerid, params[]) {
if(IsPlayerInRangeOfPoint(playerid, 5.0, 1544.7637, -1343.9326, 329.4515)) {
	if(PlayerInfo[playerid][xNovac] < 20000) return SendErrorMessage(playerid, "Nemate dovoljno novca(20000$).");
	DajIgracuNovac(playerid, -20000);
	ac_SetPlayerPos(playerid, 1544.7637, -1343.9326, 1000.0000);
	GiveWeaponToPlayer(playerid, 46, 1);}
return true;}

CMD:prodajzlato(playerid, params[]) {

new kolicina;
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1026.3081, 2312.2776, -19.7883)) return SendErrorMessage(playerid, "Morate biti u zlatari.");
if(sscanf(params, "i", kolicina)) return SendUsageMessage(playerid, "/prodajzlato [kolicina] - Trenutna cena 1g zlata je 386$. ");
if(kolicina < 0) return SendErrorMessage(playerid, "Ne mozete u minus.");
if(PlayerInfo[playerid][xZlato] < kolicina) return SendErrorMessage(playerid, "Niste u mogucnosti prodati toliko grama zlata - nemate toliko.");
DajIgracuNovac(playerid, kolicina*386);
PlayerInfo[playerid][xZlato] -= kolicina;
update_fg_info_tds(playerid);

SavePlayer(playerid);

ServerInfo[Zlato] += kolicina;
	SaveServerStats();

	new zlatostring[256];
format(zlatostring, sizeof(zlatostring), ""col_white"Trenutno u sefu ima "col_server"%dg "col_white"zlata\n"col_white"Da opljackate zlataru kucajte\n"col_server"[/pljackajzlataru]", ServerInfo[Zlato]);
UpdateDynamic3DTextLabelText(ServerInfo[ZlatoLabel], BELA, zlatostring);

update_fg_info_tds(playerid);
SendInfoMessage(playerid, "Uspesno ste prodali %d grama zlata te dobili %d$ novca.", kolicina, kolicina*386);
return 1;}
stock SexTDControl(playerid, bool:show) {

if(show == true) {

	BLOWJOBCOVER[playerid][0] = CreatePlayerTextDraw(playerid, 741.375000, -25.333333, "usebox");
	PlayerTextDrawLetterSize(playerid, BLOWJOBCOVER[playerid][0], 0.000000, 57.021297);
	PlayerTextDrawTextSize(playerid, BLOWJOBCOVER[playerid][0], -26.375000, 0.000000);
	PlayerTextDrawAlignment(playerid, BLOWJOBCOVER[playerid][0], 1);
	PlayerTextDrawColor(playerid, BLOWJOBCOVER[playerid][0], 0);
	PlayerTextDrawUseBox(playerid, BLOWJOBCOVER[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, BLOWJOBCOVER[playerid][0], 102);
	PlayerTextDrawSetShadow(playerid, BLOWJOBCOVER[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, BLOWJOBCOVER[playerid][0], 0);
	PlayerTextDrawFont(playerid, BLOWJOBCOVER[playerid][0], 0);

	BLOWJOBCOVER[playerid][1] = CreatePlayerTextDraw(playerid, -2.500000, -23.333337, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, BLOWJOBCOVER[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BLOWJOBCOVER[playerid][1], 645.000000, 175.000000);
	PlayerTextDrawAlignment(playerid, BLOWJOBCOVER[playerid][1], 1);
	PlayerTextDrawColor(playerid, BLOWJOBCOVER[playerid][1], 255);
	PlayerTextDrawUseBox(playerid, BLOWJOBCOVER[playerid][1], true);
	PlayerTextDrawBoxColor(playerid, BLOWJOBCOVER[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, BLOWJOBCOVER[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, BLOWJOBCOVER[playerid][1], 0);
	PlayerTextDrawFont(playerid, BLOWJOBCOVER[playerid][1], 4);

	BLOWJOBCOVER[playerid][2] = CreatePlayerTextDraw(playerid, -0.250000, 321.250091, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, BLOWJOBCOVER[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, BLOWJOBCOVER[playerid][2], 650.625000, 174.416656);
	PlayerTextDrawAlignment(playerid, BLOWJOBCOVER[playerid][2], 1);
	PlayerTextDrawColor(playerid, BLOWJOBCOVER[playerid][2], 255);
	PlayerTextDrawSetShadow(playerid, BLOWJOBCOVER[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, BLOWJOBCOVER[playerid][2], 0);
	PlayerTextDrawFont(playerid, BLOWJOBCOVER[playerid][2], 4);

	BLOWJOBCOVER[playerid][3] = CreatePlayerTextDraw(playerid,284.000000, 426.000000, "Da prekinete kucajte_~r~/blowjob~n~~w~ZVUK VAM MORA BITI UKLJUCEN");
	PlayerTextDrawBackgroundColor(playerid,BLOWJOBCOVER[playerid][3], 255);
	PlayerTextDrawFont(playerid,BLOWJOBCOVER[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid,BLOWJOBCOVER[playerid][3], 0.259999, 0.899999);
	PlayerTextDrawColor(playerid,BLOWJOBCOVER[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,BLOWJOBCOVER[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid,BLOWJOBCOVER[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid,BLOWJOBCOVER[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid,BLOWJOBCOVER[playerid][3], 0);

	BLOWJOBCOVER[playerid][4] = CreatePlayerTextDraw(playerid, 610.875000, 10.083328, "60");
	PlayerTextDrawLetterSize(playerid, BLOWJOBCOVER[playerid][4], 0.438125, 1.530001);
	PlayerTextDrawAlignment(playerid, BLOWJOBCOVER[playerid][4], 1);
	PlayerTextDrawColor(playerid, BLOWJOBCOVER[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, BLOWJOBCOVER[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, BLOWJOBCOVER[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, BLOWJOBCOVER[playerid][4], 51);
	PlayerTextDrawFont(playerid, BLOWJOBCOVER[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, BLOWJOBCOVER[playerid][4], 1);

	for(new i = 0; i < 5; i ++) {

		PlayerTextDrawShow(playerid, BLOWJOBCOVER[playerid][i]);
	}
}
else if(show == false) {

	for(new i = 0; i < 5; i ++) {

		PlayerTextDrawHide(playerid, BLOWJOBCOVER[playerid][i]);
		PlayerTextDrawDestroy(playerid, BLOWJOBCOVER[playerid][i]);
		BLOWJOBCOVER[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}
}
}
CMD:teamspeak(playerid, params[]) {
new DialogStrgEx[900];

strcat(DialogStrgEx, "1. Sa sajta teamspeak.com/downloads skinite najnoviju verziju teamspeak-a (TS3)\n");
strcat(DialogStrgEx, "2. Instalirajte TS i kliknite na \"CONNECT\"\n");
strcat(DialogStrgEx, "3. Nakon toga otvara vam se novi prozor u kojem unosite sledece podatke:\n");
strcat(DialogStrgEx, "    Server Address: ts3.fg-rpg.com\nNickname: Ime_Prezime (kao na serveru)\n");
strcat(DialogStrgEx, "4. Kada to uradite kliknite \"Connect\" i bicete konektovani na nas TS\n");
strcat(DialogStrgEx, "5. U defalt kanalu sacekajte da vas admin prevuce u kanal AFG tima\n");
strcat(DialogStrgEx, "6. Nakon sto se AFG uveri da posedujete mikrofon, da imate podesen mikrofon na \n");
strcat(DialogStrgEx, "\"PUSH TO TALK\",da igrate na nekom od nasih servera i da ste lvl 3+ dobicete normal \n");
strcat(DialogStrgEx, "sa kojim mozete uci u kanal \"Pricaonica\",u kanal organizacije kojoj pripadate ili \nnapraviti svoj privatan kanal.\n7. Uzivajte.");

SPD(playerid, dialog_EMPTY, DSMSG, "TeamSpeak3 Help", DialogStrgEx, "Ok", "");
strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

return 1;}

CMD:forum(playerid, params[]) {
SCM(playerid, -1, ""col_server"Adresa naseg foruma je: "col_white"www.fg-rpg.com");
return 1;}

CMD:donacije(playerid, params[]) {
SendInfoMessage(playerid, "Kompletnu listu donacija mozete videti na forumu - www.fg-rpg.com");
return 1;}


CMD:kupiparkinglistic(playerid, params[]) {

new parkID = GetNearestParkingZone(playerid);
if(parkID == -1) return SendErrorMessage(playerid, "Nisi u nijednoj parking zoni.");

new DialogStrgEx[1024];

strcat(DialogStrgEx, "Broj mesta\tDostupnost\n");
for(new i = 0; i < ParkingInfo[parkID][parkMaxParkPlaces]; i++) {

	new string[20];

	if(ParkingPlaces[parkID][i][parkTaken]) string = ""col_red"Zauzeto";
	else if(!ParkingPlaces[parkID][i][parkTaken]) string = ""col_server"Slobodno";

	format(DialogStrgEx, sizeof(DialogStrgEx), ""col_white"%sParking mesto - "col_server"%d\t%s\n", DialogStrgEx, i+1, string);}

SPD(playerid, dialog_PARKING, DSH, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI);

strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

return true;}
CMD:izvadipasos(playerid,params[])
{
if(!IsPlayerInRangeOfPoint(playerid, 3,1470.9423,-1799.1124,-20.2832)) return SendErrorMessage(playerid, "Niste na lokaciji za vadjenje pasosa!");
if(PlayerInfo[playerid][xPasos] != 0) return SendErrorMessage(playerid, "Vec posedujete pasos!");
if(PlayerInfo[playerid][xNovac] < 5000) return SendErrorMessage(playerid, "Nemate dovoljno novca za vadjenje pasosa.");
	SendInfoMessage(playerid, "Izvadili ste pasos i kostalo vas je $5000");
	DajIgracuNovac(playerid, -5000);
	PlayerInfo[playerid][xPasos] = 1;
return 1;}
CMD:putarina(playerid, params[]) {

if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Morate biti u vozilu.");
if(PlayerInfo[playerid][xPasos] == 0) return SendErrorMessage(playerid, "Nemate pasos kod sebe!");
if(PlayerInfo[playerid][xNovac] < 450) return SendErrorMessage(playerid, "Nemate 450$ kod sebe!");
new varstring[60];
if(IsPlayerInRangeOfPoint(playerid, 5.0, 52.9225,-1539.5585,5.1292)) {

	MoveDynamicObject(rampagranice1_1, 55.31340, -1536.24329, 4.94900, 2.0,  360.00000, 11.00000, 262.00000);

	SetTimerEx("ZatvoriGranice", 5000, false, "i", 1);
	DajIgracuNovac(playerid, -450);
	SCM(playerid, ZUTA, "Platili ste 450$ za prolazak!");

	format(varstring, sizeof(varstring), "* %s placa putarinu!", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);}
else if(IsPlayerInRangeOfPoint(playerid, 5.0, 47.1666,-1523.2726,5.1084)) {

	MoveDynamicObject(rampagranice1_2, 44.93290, -1526.56641, 4.94900, 2.0,  360.00000, 4.00000, 82.00000);

	SetTimerEx("ZatvoriGranice", 5000, false, "i", 2);
	DajIgracuNovac(playerid, -450);
	SCM(playerid, ZUTA, "Platili ste 450$ za prolazak!");

	format(varstring, sizeof(varstring), "* %s placa putarinu!", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);}
else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1803.9178,802.5847,11.0822)) {

	//MoveDynamicObject(rampagranice2_1, 1726.18066, 476.95074, 29.97990, 2.0, 0.00000, -1.00000, 160.00217);
	MoveDynamicObject(rampagranice2_2, 1807.45789, 804.24640, 11.00290, 2.0,  0.00000, -18.00000, 360.00000);

	SetTimerEx("ZatvoriGranice", 5000, false, "i", 3);
	DajIgracuNovac(playerid, -450);
	SCM(playerid, ZUTA, "Platili ste 450$ za prolazak!");

	format(varstring, sizeof(varstring), "* %s placa putarinu!", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);}
else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1789.7760,791.9109,11.3088)) {

	//MoveDynamicObject(rampagranice2_3, 1719.41956, 478.73383, 29.97990, 2.0, 0.00000, -1.00000, 341.00000);
	MoveDynamicObject(rampagranice2_4, 1786.00269, 790.59589, 11.21290, 2.0,  0.00000, -18.00000, 180.00000);

	SetTimerEx("ZatvoriGranice", 5000, false, "i", 4);
	DajIgracuNovac(playerid, -450);
	SCM(playerid, ZUTA, "Platili ste 450$ za prolazak!");

	format(varstring, sizeof(varstring), "* %s placa putarinu!", ImeIgraca(playerid));
	PorukaRadius(20.0, playerid, varstring, LJUBICASTA);}
else return SendErrorMessage(playerid, "Morate biti kod naplatne rampe.");
return 1;}

CMD:help(playerid, params[]) {
new DialogStrgEx[1900];
strcat(DialogStrgEx, ""col_server"ACCOUNT | "col_white"/levelup /upgrade /promenispawn /pay /promenilozinku /statistika /stats /svedok /zaprosi /divorce\n");
strcat(DialogStrgEx, ""col_server"HELP | "col_white"/report /pitaj /new /dajkljuckapije /animacije /update /skills /id /vipinfo /najblizirent /zamena /settings\n");
strcat(DialogStrgEx, ""col_server"BANK | "col_white"/stanje /ostavi /podigni /transfer \n");
strcat(DialogStrgEx, ""col_server"CHAT | "col_white"/b /me /do /attempt /c /s /w /toganimchat\n");
strcat(DialogStrgEx, ""col_server"MOBILE | "col_white"/call (/p)ickup /h /sms /smsad\n");
strcat(DialogStrgEx, ""col_server"HOBI | "col_white"/hobihelp || /pecaj /ribaroprema /riba /uzmistap /prodajribu\n");
if(PlayerInfo[playerid][xSkriptaRank] == 4) {
	strcat(DialogStrgEx, ""col_server"V. LIDERA | /makeleader /smenilidera /spisakclanova /offizbaciclana /oport /teritorije\n");
else if(PlayerInfo[playerid][xPosao] == POSAO_VOCAR) {
	strcat(DialogStrgEx, ""col_server"POSAO | "col_white"/posao /uniforma /prekiniposao\n"); }
else if(PlayerInfo[playerid][xPosao] == POSAO_PPROZORA) {
	strcat(DialogStrgEx, ""col_server"POSAO | "col_white"/plift /operiprozor /posao /uniforma\n"); }
if(GetFactionType(playerid) == ORG_TIP_PD) {
	strcat(DialogStrgEx, ""col_server"ORG | "col_white"/orghelp /zatvorenici\n"); }
else if(GetFactionType(playerid) == ORG_TIP_MD) {
	strcat(DialogStrgEx, ""col_server"ORG | "col_white"/f /d /mduty /medicine /recover /muniform /dajinekciju /nadji\n"); }
else if(GetFactionType(playerid) == ORG_TIP_CNN) {
	strcat(DialogStrgEx, ""col_server"ORG | "col_white"/f /vesti /live /newsstats \n"); }
else if(GetFactionType(playerid) == ORG_TIP_ELEK) {
	strcat(DialogStrgEx, ""col_server"ORG | "col_white"/f /electric /clanovi \n"); }
else if(GetFactionType(playerid) == ORG_TIP_TAXI) {
	strcat(DialogStrgEx, ""col_server"ORG | "col_white"/f /taxi /clanovi\n"); }
else if(GetFactionType(playerid) == ORG_TIP_MAFIJA) {
	strcat(DialogStrgEx, ""col_server"ORG | "col_white"/f /clanovi /svercmatsa /prekinisverc /makegun /zauzmifirmu /robatm\n"); }
else if(GetFactionType(playerid) == ORG_TIP_BANDA) {
	strcat(DialogStrgEx, ""col_server"ORG | "col_white"/f /clanovi /zauzmi /robatm\n"); }
else {
	strcat(DialogStrgEx, ""col_server"ORG | "col_white"/f /clanovi\n"); }
if(PlayerInfo[playerid][xLider] != 0) {
	strcat(DialogStrgEx, ""col_server"LEADER | "col_white"/lider(sve opcije lidera) /lc(lider chat) /liderrac\n"); }
if(PlayerInfo[playerid][xGradRank] == GRAD_MAYOR) {
	strcat(DialogStrgEx, ""col_server"GRADONACELNIK | "col_white"/gradonacelnik\n"); }
else if(PlayerInfo[playerid][xGradRank] < GRAD_MAYOR) {
	strcat(DialogStrgEx, ""col_server"GRADONACELNIK | "col_white"/mr /uniformbodyguard /uniformdriver /workers\n"); }
if(PlayerInfo[playerid][xPromoter] >= 1) {
	strcat(DialogStrgEx, ""col_server"PROMOTER | "col_white"/pport /goto /g /pc /promoterspawn\n"); }
if(PlayerInfo[playerid][xYouTuber] >= 1) {
	strcat(DialogStrgEx, ""col_server"YOUTUBER | "col_white"/ythelp\n"); }
if(PlayerInfo[playerid][xVIPLevel] >= 1) {
	strcat(DialogStrgEx, ""col_server"VIP | "col_white"/viphelp\n"); }
strcat(DialogStrgEx, ""col_server"OSTALO | "col_white"/otkaz /prihvati /odustani /fill /upali /ugasi /face /head /naocare /napustiorg /svetla /music /izadjiizdm /divorce\n");
strcat(DialogStrgEx, ""col_server"OSTALO | "col_white"/uzmicigaretu /inv /exit /izmeni /baci /droga /crnotrziste /imovina /namestaj /ad /kaciga /trazi /organizacije /izadjisacs\n");
strcat(DialogStrgEx, ""col_server"OSTALO | "col_white"/hauba /gepek /lek /time /pokazidozvole /pokazisaobracajnu /dozvole /dropgun /pickupgun /lideri /dozvolazapecanje /skiniranac\n");
strcat(DialogStrgEx, ""col_server"OSTALO | "col_white"/rukovanje /knock /windows /eject /daj /lock /pojas /rent /unrent /gps /gpsoff /razbijlisice /disarmtime /staviranac\n");
strcat(DialogStrgEx, ""col_server"OSTALO | "col_white"/rentroom /unrentroom /fgshop /udjinadm /hud /togtag /forum /teamspeak /afkeri /zica /smashdoor /iznajmisobu /odjavisobu\n");
strcat(DialogStrgEx, ""col_server"POMOC | "col_white"/invhelp /lottohelp /garazahelp /vozilohelp /imanjehelp /ah /hh /viphelp /pljackahelp\n");
strcat(DialogStrgEx, ""col_server"POMOC | "col_white"/savezhelp /platnipoenihelp /aktivnipoenihelp /fgpoenihelp");
SPD(playerid, dialog_HELP, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "");
strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
return 1;}

CMD:pokazidozvole(playerid, params[]) {
new playerID;
if(sscanf(params, "u", playerID)) return SendUsageMessage(playerid, "/pokazidozvole [ID/Deo Imena]");
if(IsPlayerConnected(playerID)) {
	if(playerID != INVALID_PLAYER_ID) {
		if(IsPlayerNearPlayer(8.0, playerid, playerID)) {
			if(playerid == playerID) return SendErrorMessage(playerid, "Ne mozes pokazati license samom sebi, koristi /dozvole!");
			new string[75], text1[20], text2[20], text3[20], text4[20], text5[20], text6[20], text7[20], text8[20], text9[20];
		
			if(PlayerInfo[playerid][xVozacka] > 0) { text1 = "Da";} else { text1 = "Ne";}
			if(PlayerInfo[playerid][xMotorska] > 0) { text4 = "Da";} else { text4 = "Ne";}
			if(PlayerInfo[playerid][xKamionskaC1] > 0) { text2 = "Da";} else { text2 = "Ne";}
			if(PlayerInfo[playerid][xKamionskaC2] > 0) { text3 = "Da";} else { text3 = "Ne";}
			if(PlayerInfo[playerid][xKamionskaC3] > 0) { text5 = "Da";} else { text5 = "Ne";}
			if(PlayerInfo[playerid][xBrodska] > 0) { text6 = "Da";} else { text6 = "Ne";}
			if(PlayerInfo[playerid][xLetelica] > 0) { text7 = "Da";} else { text7 = "Ne";}
			if(PlayerInfo[playerid][xRibarska] > 0) { text8 = "Da";} else { text8 = "Ne";}
			if(PlayerInfo[playerid][xGunLicense] == true) { text9 = "Da";}
			if(PlayerInfo[playerid][xGunLicense] == false) { text9 = "Ne";}
		  
			new DialogStrgEx[545];
			format(string, sizeof(string),""col_server"Ime: "col_white"%s", ImeIgraca(playerid));
			format(DialogStrgEx, sizeof(DialogStrgEx),""col_server"Dozvola za motor[A]: "col_white"%s\n"col_server"Dozvola za auto[B]: "col_white"%s\n"col_server"Dozvola za kombi[C1]: "col_white"%s\n"col_server"Dozvola za kamion[C2]: "col_white"%s\n"col_server"Dozvola za kamion sa prikolicom[C3]: "col_white"%s\n"col_server"Dozvola za brod[D]: "col_white"%s\n"col_server"Dozvola za letelicu[F]: "col_white"%s\n"col_server"Dozvola za oruzje: "col_white"%s\n"col_server"Dozvola za pecanje: "col_white"%s",text4,text1,text2,text3,text5,text6,text7,text9,text8);
			SPD(playerID, dialog_EMPTY, DSMSG, string, DialogStrgEx, "Ok", "");
			strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

			format(string, sizeof(string), "* %s pokazuje dozvole %s.", ImeIgraca(playerid), ImeIgraca(playerID));
			PorukaRadius(30.0, playerid, string, LJUBICASTA);

		} else return SendErrorMessage(playerid, "Taj igrac nije blizu vas !");
	}
} else return SendErrorMessage(playerid, "Taj igrac nije online !");
return 1;}

CMD:dozvole(playerid, params[]) {
new string[64], text1[20], text2[20], text3[20], text4[20], text5[20], text6[20], text7[20], text8[20], text9[20];
if(PlayerInfo[playerid][xVozacka] > 0) { text1 = "Da";} else { text1 = "Ne";}
if(PlayerInfo[playerid][xMotorska] > 0) { text4 = "Da";} else { text4 = "Ne";}
if(PlayerInfo[playerid][xKamionskaC1] > 0) { text2 = "Da";} else { text2 = "Ne";}
if(PlayerInfo[playerid][xKamionskaC2] > 0) { text3 = "Da";} else { text3 = "Ne";}
if(PlayerInfo[playerid][xKamionskaC3] > 0) { text5 = "Da";} else { text5 = "Ne";}
if(PlayerInfo[playerid][xBrodska] > 0) { text6 = "Da";} else { text6 = "Ne";}
if(PlayerInfo[playerid][xLetelica] > 0) { text7 = "Da";} else { text7 = "Ne";}
if(PlayerInfo[playerid][xRibarska] > 0) { text8 = "Da";} else { text8 = "Ne";}
if(PlayerInfo[playerid][xGunLicense] == true) { text9 = "Da";}
if(PlayerInfo[playerid][xGunLicense] == false) { text9 = "Ne";}
format(string, sizeof(string),""col_server"Ime: "col_white"%s", ImeIgraca(playerid));
new DialogStrgEx[545];
format(DialogStrgEx, sizeof(DialogStrgEx),""col_server"Dozvola za motor[A]: "col_white"%s\n"col_server"Dozvola za auto[B]: "col_white"%s\n"col_server"Dozvola za kombi[C1]: "col_white"%s\n"col_server"Dozvola za kamion[C2]: "col_white"%s\n"col_server"Dozvola za kamion sa prikolicom[C3]: "col_white"%s\n"col_server"Dozvola za brod[D]: "col_white"%s\n"col_server"Dozvola za letelicu[F]: "col_white"%s\n"col_server"Dozvola za oruzje: "col_white"%s\n"col_server"Dozvola za pecanje: "col_white"%s",text4,text1,text2,text3,text5,text6,text7,text9,text8);
SPD(playerid, dialog_EMPTY, DSMSG, string, DialogStrgEx, "Ok", "");
strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
return 1;}

CMD:cctv(playerid, params[]) {
if(GetFactionType(playerid) == ORG_TIP_PD) {

	if(PlayerInfo[playerid][xZatvor] > 0) return SendErrorMessage(playerid, "Ne mozes kamere dok si u zatvoru.");
	if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
	if(inOrgInt[playerid] != PlayerInfo[playerid][xClan]) return SendErrorMessage(playerid, "Morate biti u interijeru vase organizacije.");

	SPD(playerid, dialog_CCTV, DSL, "Izaberi kameru", "Spoljasnost banke\nUnutrasnjost banke 1\nUnutrasnjost banke 2\nUnutrasnjost banke 3\nUnutrasnjost banke 4", D_ODABERI, D_ODUSTANI);
	TogglePlayerControllable(playerid, false);
	WatchingTV{ playerid } = 1;
	SendInfoMessage(playerid, "Da ugasis kamere ukucaj /ugasikamere.");} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu!");
return 1;}

CMD:ugasikamere(playerid, params[]) {
if(GetFactionType(playerid) == ORG_TIP_PD) {
	if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
	if(WatchingTV{ playerid } == 1) {
		new id = PlayerInfo[playerid][xClan];
		ac_SetPlayerPos(playerid, OI[id][oPozIntX], OI[id][oPozIntY], OI[id][oPozIntZ]);
		GameTextForPlayer(playerid, "Ucitavanje ...", 1000, 4);
		SetTimerEx("SlobodnoSada", 2000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, false);
		ac_SetPlayerInterior(playerid, OI[id][oInt]);
		SetPlayerVirtualWorld(playerid, OI[id][oVw]);
		WatchingTV{ playerid } = 0;
		SendInfoMessage(playerid, "Ugasili ste sigurnosne kamere.");
	} else return SendErrorMessage(playerid, "Ne mozes ugasiti kamere koje nisi upalio!");} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu!");
return 1;}

CMD:orghelp(playerid, params[]) {

new DialogStrgEx[600];
if(GetFactionType(playerid) == ORG_TIP_PD) {
	strcat(DialogStrgEx, ""col_server"Clan | "col_white"/duty /r /f /d /alcotest /computer /arrest /cuff /uncuff /pu /cctv /ugasikamere\n");
	strcat(DialogStrgEx, ""col_server"Clan | "col_white"/tazer /m /wanted /su /rb /rrb /rrball /bk /bkc /govrepair /undercover /pdslap\n");
	strcat(DialogStrgEx, ""col_server"Clan | "col_white"/ram /frisk /take /ticket /orgstats /siren /gov /pokaziznacku /clear /suspend\n");
	strcat(DialogStrgEx, ""col_server"Clan | "col_white"/mandescription /removearm /equipment /vuci /pusti /proveripojas /carsign\n");
	strcat(DialogStrgEx, ""col_server"Clan | "col_white"/narcotest /narcoresults /unistidrogu /destroygun /srusibvrata /namestibvrata\n");
	strcat(DialogStrgEx, ""col_server"Lider | "col_white"/lider /lc");
	SPD(playerid, dialog_EMPTY, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));} else return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu!");
return 1;}

CMD:namestibvrata(playerid, params[]) {
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
if(PljackaUToku == true) return SendErrorMessage(playerid, "Ne mozes ovo dok je pljacka u toku.");
if(!IsPlayerInRangeOfPoint(playerid, 5, -150.0243, 924.6457, -15.4609)) return SendErrorMessage(playerid, "Morate biti pored vrata banke.");

if(SruseniLaseri == true) {
	LaseriBanka[0] = CreateDynamicObject(18643, -111.92853, 1129.10754, -24.96888,   0.00000, 0.00000, 0.00000);
	LaseriBanka[1] = CreateDynamicObject(18643, -111.92853, 1129.10754, -26.10878,   0.00000, 0.00000, 0.00000);
	LaseriBanka[2] = CreateDynamicObject(18643, -111.92853, 1129.10754, -26.81783,   0.00000, 0.00000, 0.00000);
	LaseriBanka[3] = CreateDynamicObject(18643, -111.92853, 1129.10754, -25.47898,   0.00000, 0.00000, 0.00000);

	SruseniLaseri = false;}

	if(VrataBankeSrusena == true) {
	if(IsValidDynamicObject(VrataSefaBanke))
		DestroyDynamicObject(VrataSefaBanke);

	VrataSefaBanke = CreateDynamicObject(1495, -150.81219, 924.75452, -16.58700,   0.00000, 0.00000, 0.00000);
	VrataBankeSrusena = false;}

if(VrataBankeHakovana == true) {
	if(IsValidDynamicObject(VrataSefaBankeZaHack))
		DestroyDynamicObject(VrataSefaBankeZaHack);

	VrataSefaBankeZaHack = CreateDynamicObject(19303, -146.54340, 923.50818, -27.93430,   0.00000, 0.00000, 0.00000);
	VrataBankeHakovana = false;}

if(SefBankeOtvoren == true) {
	if(IsValidDynamicObject(SefBanke))
		DestroyDynamicObject(SefBanke);

	SefBanke = CreateDynamicObject(2634, -146.419, 903.071, -27.495, 0.000, 0.000, 0.000, -1, -1, -1, 300.000, 300.000);
	SefBankeOtvoren = false;}
return 1;}

CMD:srusibvrata(playerid, params[]) {
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
if(!IsPlayerInRangeOfPoint(playerid, 5, -150.0243, 924.6457, -15.4609)) return SendErrorMessage(playerid, "Morate biti pored vrata banke.");

if(SruseniLaseri == false) {
	for(new i = 0; i < 4; i++) {
		if(IsValidDynamicObject(LaseriBanka[i]))
			DestroyDynamicObject(LaseriBanka[i]);
	}

	SruseniLaseri = true;}

if(VrataBankeSrusena == false) {
	if(IsValidDynamicObject(VrataSefaBanke))
		DestroyDynamicObject(VrataSefaBanke);

	VrataSefaBanke = CreateDynamicObject(1495, -150.81219, 924.75452, -16.58700,   0.00000, 0.00000, 84.48000);
	VrataBankeSrusena = true;}

if(VrataBankeHakovana == false) {
	if(IsValidDynamicObject(VrataSefaBankeZaHack))
		DestroyDynamicObject(VrataSefaBankeZaHack);

	VrataSefaBankeZaHack = CreateDynamicObject(19303, -145.8705, 922.6596, -27.9343,   0.00000, 0.00000, 77.2200);
	VrataBankeHakovana = true;}

if(SefBankeOtvoren == false) {
	if(IsValidDynamicObject(SefBanke))
		DestroyDynamicObject(SefBanke);

	SefBanke = CreateDynamicObject(2634, -146.84444, 902.36841, -27.49500,   0.00000, 0.00000, -48.72000);
	SefBankeOtvoren = true;}
return 1;}

CMD:unistidrogu(playerid, params[]) {
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");

new found, plantid;
for(new i = 1; i < MAX_PLANTS; i++) {
	if(IsPlayerInRangeOfPoint(playerid, 5.0, DrogaStab[i][Plantx], DrogaStab[i][Planty], DrogaStab[i][Plantz])) {
		plantid = i;
		found = 1;
		break;
	}
	else
		continue;}
if(found == 0) return SendErrorMessage(playerid, "Niste blizu posadjene stabiljke.");

DrogaStab[plantid][Plantx] = 0;
DrogaStab[plantid][Planty] = 0;
DrogaStab[plantid][Plantz] = 0;
DrogaStab[plantid][wType] = 0;
DrogaStab[plantid][wPlanted] = 0;
DrogaStab[plantid][wHoursPassed] = 0;
strmid(DrogaStab[plantid][wOwner], "Niko", 0, strlen("Niko"), 255);
DrogaStab[plantid][wViwo] = 0;
DestroyDynamicObject(DrogaStab[plantid][wObjectID]);

SendInfoMessage(playerid, "Unistio si posadjenu drogu.");

return 1;}

CMD:clear(playerid, params[]) {
if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(PoliceDuty[playerid] == false) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");

new id, varstring[128];
if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/clear [ID/Deo imena] ");
if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID Korisnika");
if(GetFactionType(id) == ORG_TIP_PD) return SendErrorMessage(playerid, "Ne mozes ocistiti WL PD/SAJ clanu.");

PlayerInfo[id][xWanted] = 0;
	Fusion_SetPlayerWantedLevel(id, PlayerInfo[id][xWanted]);
strmid(ZlocinInfo[id][zPrijavio], "Nema", 0, strlen("Nema"), 255);
strmid(ZlocinInfo[id][zPocinio], "Nema", 0, strlen("Nema"), 255);
strmid(ZlocinInfo[id][zZlocin], "Nema", 0, strlen("Nema"), 255);
SendClientMessageEx(playerid, BELA, "Obrisali ste dosije gradjaninu %s.", ImeIgraca(id));

format(varstring, sizeof(varstring), "| CLEARWL | %s je ocistio WL igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
AdminPoruka(SVETLOCRVENA, varstring);

format(varstring, sizeof varstring, "| CLEARWL | %s je ocistio WL igracu %s.", ImeIgraca(playerid), ImeIgraca(id));
OrgPorukaLeader(PlayerInfo[playerid][xClan], 0xD2CFCFFF, varstring);
return 1;}

CMD:doniraj(playerid, params[]) {

new cash;
if(sscanf(params, "i", cash)) {
	SendUsageMessage(playerid, "/doniraj [iznos]");
	return 1;}
if(PlayerInfo[playerid][xLevel] > 10)
{
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1133.5189, -936.0316, 47.7939)) return SendErrorMessage(playerid, "Morate biti pored bandere.");
	if(cash < 50000 || cash > 150000) return SendErrorMessage(playerid, "Iznos ne moze biti manji od 50.000$ i veci od 150.000$.");
	if(PlayerInfo[playerid][xNovac] < cash) return SendErrorMessage(playerid, "Nemate toliko novca.");

	DajIgracuNovac(playerid, -cash);
	new varstring[128];
	format(varstring, sizeof(varstring), "[FG] Donacija | "col_white"%s je upravo donirao %d$ gradu!", ImeIgraca(playerid), cash);
	SCMA(0x00FF7CFF, varstring);

	foreach(new i : Player) {

		if(i != playerid) {

			if(IsPlayerInRangeOfPoint(i, 10.0, 1133.5189, -936.0316, 47.7939)) {

				DajIgracuNovac(i, cash/100);
				SendClientMessageEx(i, -1, "Dobili ste %d$, od donacije gradu.", cash/100);
				PlayAudioStreamForPlayer(i, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");

			}
		}

	}
}
else { SendErrorMessage(playerid, "Vi ste level manji od 10 i ne mozete donirati.");}
return 1;}

CMD:podigni(playerid, params[]) {
if(!PlayerInfo[playerid][xImaBRacun]) return SendErrorMessage(playerid, "Prvo moras da otvoris racun u banci.");
new cashdeposit,
	string[70];

if(!IsAtBank(playerid)) return SendErrorMessage(playerid, "Morate biti u banci da bi ste mogli koristit ovu komandu !");
if(sscanf(params, "i", cashdeposit)) {
	SendUsageMessage(playerid, "/podigni [iznos]");
	format(string, sizeof(string), "Imate %d$ na vasem bankovnom racunu.", PlayerInfo[playerid][xBRacun]);
	SCM(playerid, SIVA, string);
	return 1;}
if(cashdeposit > PlayerInfo[playerid][xBRacun] || cashdeposit < 1) return SendErrorMessage(playerid, "Nemate toliko novaca !");
DajIgracuNovac(playerid, cashdeposit);
PlayerInfo[playerid][xBRacun] -= cashdeposit ;
format(string, sizeof(string), "Podigli ste $%d sa vaseg racuna. Ukupno: $%d ", cashdeposit, PlayerInfo[playerid][xBRacun]);
SCM(playerid, ZUTA, string); update_fg_info_tds(playerid);
//PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");
SavePlayer(playerid);
return 1;}

CMD:stanje(playerid, params[]) {
if(!PlayerInfo[playerid][xImaBRacun]) return SendErrorMessage(playerid, "Prvo moras da otvoris racun u banci.");
if(!IsAtBank(playerid)) return SendErrorMessage(playerid, "Morate biti u banci da bi ste mogli koristit ovu komandu !");
new varstring[65];
format(varstring, sizeof(varstring), "Imate $%d na vasem bankovnom racunu.", PlayerInfo[playerid][xBRacun]);
SendClientMessage(playerid, ZUTA, varstring);
return 1;}

CMD:podignikredit(playerid, params[]) {
if(!PlayerInfo[playerid][xImaBRacun]) return SendErrorMessage(playerid, "Prvo moras da otvoris racun u banci.");
if(!IsAtBank(playerid)) return SendErrorMessage(playerid, "Morate biti u banci da bi ste mogli koristit ovu komandu !");
SPD(playerid, dialog_KREDIT, DSL, D_NASLOV, "Kredit - 150000$ (Level 5)\nKredit - 250000$ (Level 10)\nKredit - 350000$ (Level 15)\nKredit - 500000$ (Level 20)", D_ODABERI, D_ODUSTANI);
return 1;}

CMD:kredit(playerid, params[]) {
if(!PlayerInfo[playerid][xImaBRacun]) return SendErrorMessage(playerid, "Prvo moras da otvoris racun u banci.");
if(!IsAtBank(playerid)) return SendErrorMessage(playerid, "Morate biti u banci da bi ste mogli koristit ovu komandu !");
if(PlayerInfo[playerid][xPreostaloZaOtplatu] == 0) return SendErrorMessage(playerid, "Nemate podignut kredit!");
SPD(playerid, dialog_INFOKREDIT, DSL, D_NASLOV, "Info Kredit\nPromena Iznosa Rate\nOtplati ceo kredit", D_ODABERI, D_ODUSTANI);
return 1;}

CMD:ostavi(playerid, params[]) {
if(!PlayerInfo[playerid][xImaBRacun]) return SendErrorMessage(playerid, "Prvo moras da otvoris racun u banci.");
new cashdeposit, curfunds = PlayerInfo[playerid][xBRacun], varstring[128];
if(!IsAtBank(playerid)) return SendErrorMessage(playerid, "Morate biti u banci da bi ste mogli koristit ovu komandu !");
if(sscanf(params, "i", cashdeposit)) {
	SendUsageMessage(playerid, "/ostavi [iznos]");
	format(varstring, sizeof(varstring), "Imate %d$ na vasem bankovnom racunu.", PlayerInfo[playerid][xBRacun]);
	SCM(playerid, SIVA, varstring);
	return 1;}
if(cashdeposit > PlayerInfo[playerid][xNovac] || cashdeposit < 1) return SendErrorMessage(playerid, "Nemate toliko novaca");

DajIgracuNovac(playerid, -cashdeposit);
PlayerInfo[playerid][xBRacun] += cashdeposit;
SCM(playerid, BELA, "|___ BANKOVNI RACUN ___|");
format(varstring, sizeof(varstring), "  Stari iznos: $%d", curfunds);
SCM(playerid, SIVA, varstring);
format(varstring, sizeof(varstring), "  Pohrana: $%d",cashdeposit);
SCM(playerid, SIVA, varstring);
SCM(playerid, SIVA, "|-----------------------------------------|");
format(varstring, sizeof(varstring), "  Novi iznos: $%d", PlayerInfo[playerid][xBRacun]);
SCM(playerid, BELA, varstring);
update_fg_info_tds(playerid);
SavePlayer(playerid);
return 1;}

CMD:otvoriracun(playerid, params[]) {
if(PlayerInfo[playerid][xImaBRacun]) return SendErrorMessage(playerid, "Vec imas otvoren racun u banci.");
if(!IsPlayerInRangeOfPoint(playerid, 3.0, -167.1698, 913.5754, -15.5464)) return SendErrorMessage(playerid, "Morate biti u banci kod pickupa.");

PlayerInfo[playerid][xImaBRacun] = true;
SavePlayer(playerid);
update_fg_info_tds(playerid);
SendInfoMessage(playerid, "Uspesno ste otvorili racun u banci.");
SendInfoMessage(playerid, "Uz otvoren racun dobili ste i karticu za bankomat.");
return true;}

CMD:transfer(playerid, params[]) {

if(!PlayerInfo[playerid][xImaBRacun]) return SendErrorMessage(playerid, "Prvo moras da otvoris racun u banci.");
if(PlayerInfo[playerid][xOnlineSati] < 5) return SendErrorMessage(playerid, "Morate imati najmanje 5 sati igre za ovu komandu.");
new id, cashdeposit, varstring[128];
if(!IsAtBank(playerid)) return SendErrorMessage(playerid, "Morate biti u banci da bi ste mogli koristit ovu komandu !");
if(sscanf(params, "ui", id, cashdeposit)) {
	SendUsageMessage(playerid, "/transfer [ID/Deo Imena] [iznos]");
	format(varstring, sizeof(varstring), "Imate %d$ na vasem bankovnom racunu.", PlayerInfo[playerid][xBRacun]);
	SCM(playerid, SIVA, varstring);
	return 1;}
if(cashdeposit > PlayerInfo[playerid][xBRacun] || cashdeposit < 1) return SendErrorMessage(playerid, "Nemate toliko novaca");
if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID igraca.");
if(!PlayerInfo[id][xImaBRacun]) return SendErrorMessage(playerid, "Igrac nema racun u banci.");
if(PlayerInfo[playerid][xLevel] < 5) return SendErrorMessage(playerid, "Morate biti level 5+.");
if(PlayerInfo[id][xLevel] < 5) return SendErrorMessage(playerid, "Igrac mora biti level 5+.");
if(cashdeposit > 500000) return SendErrorMessage(playerid, "Svota novca ne sme ici preko 500.000$.");

PlayerInfo[playerid][xBRacun] -= cashdeposit;
PlayerInfo[id][xBRacun] += cashdeposit;
SavePlayer(playerid); SavePlayer(id);
PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

SendClientMessageEx(playerid, SIVA, "Prebacio si sa svoga racuna %d$ na %s-ov racun", cashdeposit, ImeIgraca(id), id);
SendClientMessageEx(id, SIVA, "Primio si %d$ na svoj racun od %s", cashdeposit, ImeIgraca(playerid), playerid);

format(varstring , sizeof(varstring), "|TRANSFER| %s > %s [%d$]", ImeIgraca(playerid), ImeIgraca(id), cashdeposit);
AdminPoruka(0xFFC0CBAA, varstring);
update_fg_info_tds(playerid); update_fg_info_tds(id);

new string[128];
format(string, sizeof(string), "Igrac %s -> Igrac: %s | Novac: %d", ImeIgraca(playerid), ImeIgraca(id), cashdeposit);
LogSave("Ostalo/LogTransfer.log", string);
return 1;}

CMD:me(playerid, params[]) {
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");


new text[128], string[234];
if(sscanf(params, "s[128]", text)) return SendUsageMessage(playerid, "/me [Akcija]");

for(new b = 0; b < sizeof(ZabranjeneReci); b++) {
	if(strfind(text, ZabranjeneReci[b], true) != -1) {
		new varstring[146];
		format(varstring, sizeof(varstring), "[/ME]%s[%d]: %s", ImeIgraca(playerid), playerid, text);
		AdminPoruka(0x808000AA, varstring);
	}
}

if(Maskuse[playerid] == false)
	format(string, sizeof(string), "*** %s %s.", ImeIgraca(playerid), text);
else
	format(string, sizeof(string), "*** Maska_%d %s", PlayerInfo[playerid][xMaskID], text);
PorukaRadius(30.0, playerid, string, LJUBICASTA);
return true;}

CMD:attempt(playerid, params[]) {
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
if(isnull(params)) return SendUsageMessage(playerid, "/attempt [akcija]");
new varstring[65];
new succeed = 1 + random(2);
if(succeed == 1) {
		if(Maskuse[playerid] == true)
		format(varstring, sizeof(varstring), "Maska_%d pokusava %s i uspeva", PlayerInfo[playerid][xMaskID], params);
	else
			format(varstring, sizeof(varstring), "* %s pokusava %s i uspeva.", ImeIgraca(playerid), params);
	PorukaRadius(15.0, playerid, varstring, ZELENA);}
if(succeed == 2) {
		if(Maskuse[playerid] == true)
		format(varstring, sizeof(varstring), "Maska_%d pokusava %s i ne uspeva", PlayerInfo[playerid][xMaskID], params);
	else
			format(varstring, sizeof(varstring), "* %s pokusava %s i ne uspeva.", ImeIgraca(playerid), params);
	PorukaRadius(15.0, playerid, varstring, CRVENA);}
return 1;}

CMD:windows(playerid, params[]) {
if(IsPlayerInAnyVehicle(playerid)) {
	new varstring[60];
	new carid = GetPlayerVehicleID(playerid);
		if(IsACabrio(GetVehicleModel(carid))) return SendErrorMessage(playerid, "Vozilo nema prozora!");
	if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0) {
		VehicleWindows[GetPlayerVehicleID(playerid)] = 1;
		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "Maska_%d spusta prozor.", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "* %s spusta prozor.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	 ]
	 else if(VehicleWindows[GetPlayerVehicleID(playerid)] == 1) {
		VehicleWindows[GetPlayerVehicleID(playerid)] = 0;
		if(Maskuse[playerid] == true)
			format(varstring, sizeof(varstring), "Maska_%d podize prozor.", PlayerInfo[playerid][xMaskID]);
		else
			format(varstring, sizeof(varstring), "* %s podize prozor.", ImeIgraca(playerid));
		PorukaRadius(20.0, playerid, varstring, LJUBICASTA);
	}
}
else return SendErrorMessage(playerid, "Niste u vozilu!");
return 1;}

CMD:knock(playerid, params[]) {
new string[64];
for(new i = 1; i < MAX_IMOVINA; i++)
{
	if(IsPlayerInRangeOfPoint(playerid, 3, II[i][iEnter][0], II[i][iEnter][1], II[i][iEnter][2])) {
			format(string, sizeof(string), "* %s kuca po vratima.", ImeIgraca(playerid));
		PorukaRadius(30.0, playerid, string, LJUBICASTA);
			foreach(new p : Player)
		{
				if(IsPlayerInRangeOfPoint(p, 60, II[i][iExit][0], II[i][iExit][1], II[i][iExit][2]))
				SCM(p, LJUBICASTA, "* Netko kuca po vratima.");
		}
	}
}
return 1;}

CMD:c(playerid, params[]) {
if(PlayerCuffed[playerid] >= 1) return SendErrorMessage(playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
new text[128], string[234];
if(sscanf(params, "s[128]", text)) return SendUsageMessage(playerid, "/c [close chat]");
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
if(GetPVarInt(playerid, "ToggedAnim") == 0)
{
	if(strlen(params) > 0 && strlen(params) < 10)
		ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,500,1);
	else if(strlen(params) >= 10 && strlen(params) < 20)
		ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,1000,1);
	else if(strlen(params) >= 20 && strlen(params) < 30)
		ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,1500,1);
	else if(strlen(params) >= 30 && strlen(params) < 40)
		ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,2000,1);
	else if(strlen(params) >= 40 && strlen(params) < 50)
		ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,2500,1);
	else if(strlen(params) >= 50 && strlen(params) < 61)
		ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,3000,1);}
for(new b = 0; b < sizeof(ZabranjeneReci); b++) {
	if(strfind(text, ZabranjeneReci[b], true) != -1) {
		new varstring[156];
		format(varstring, sizeof(varstring), "[CLOSE-CHAT]%s[%d]: %s", ImeIgraca(playerid), playerid, text);
		AdminPoruka(0x808000AA, varstring);
		return 1;
	}
}
	if(IsPlayerInAnyVehicle(playerid))
	{
	if(Maskuse[playerid] == true)
		format(string, sizeof(string), "Maska_%d kaze tiho (vozilo) : %s", PlayerInfo[playerid][xMaskID], text);
	else
		format(string, sizeof(string), "%s kaze tiho (vozilo): %s", ImeIgraca(playerid), text);
	PorukaRadius(3.0, playerid, string, 0xE6E6E6E6);}
else
{
	if(Maskuse[playerid] == true)
		format(string, sizeof(string), "Maska_%d kaze tiho: %s", PlayerInfo[playerid][xMaskID], text);
	else
		format(string, sizeof(string), "%s kaze tiho: %s", ImeIgraca(playerid), text);
	PorukaRadius(3.0, playerid, string, 0xE6E6E6E6);}
new string1[128];
format(string1, sizeof(string1), "Igrac %s: %s", ImeIgraca(playerid), text);
LogSave("Ostalo/LogCChat.log", string1);
return 1;}

CMD:s(playerid, params[]) {
new text[128], string[234];
if(sscanf(params, "s[128]", text)) return SendUsageMessage(playerid, "/s [shout chat]");
if(PlayerCuffed[playerid] >= 1) return SendErrorMessage(playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
for(new b = 0; b < sizeof(ZabranjeneReci); b++) {
	if(strfind(text, ZabranjeneReci[b], true) != -1) {
		new varstring[156];
		format(varstring, sizeof(varstring), "[SHOUT-CHAT]%s[%d]: %s", ImeIgraca(playerid), playerid, text);
		AdminPoruka(0x808000AA, varstring);
		return 1;
	}
}
if(Maskuse[playerid] == false)
	format(string, sizeof(string), "%s se dere: %s!!", ImeIgraca(playerid), text);
else
	format(string, sizeof(string), "Maska_%d se dere: %s!!", PlayerInfo[playerid][xMaskID], text);
PorukaRadius(3.0, playerid, string, 0xE6E6E6E6);
if(GetPVarInt(playerid, "ToggedAnim") == 0) {
	if(strlen(params) > 0 && strlen(params) < 10)
		ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 500, 1);
	else if(strlen(params) >= 10 && strlen(params) < 20)
		ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 1000, 1);
	else if(strlen(params) >= 20 && strlen(params) < 30)
		ApplyAnimation(playerid, "PED", "IDLE_CHAT",4.0,0,0,0,0,1500,1);
	else if(strlen(params) >= 30 && strlen(params) < 40)
		ApplyAnimation(playerid, "PED", "IDLE_CHAT",4.0,0,0,0,0,2000,1);
	else if(strlen(params) >= 40 && strlen(params) < 50)
		ApplyAnimation(playerid, "PED","IDLE_CHAT",4.0,0,0,0,0,2500,1);
	else if(strlen(params) >= 50 && strlen(params) < 61)
		ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,3000,1);}
new string1[128];
format(string1, sizeof(string1), "Igrac %s: %s", ImeIgraca(playerid), text);
LogSave("Ostalo/LogSChat.log", string1);
return 1;}

CMD:w(playerid, params[]) {
new result[128], string[234], id;

if(sscanf(params, "us[128]", id, result)) {
	SendUsageMessage(playerid, "/w [ID/Deo Imena] [text]");
	return 1;}
if(PlayerCuffed[playerid] >= 1) return SendErrorMessage(playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
if(IsPlayerConnected(id)) {
	if(IsPlayerNearPlayer(2.0, playerid, id)) {
		if(id == playerid) return SendErrorMessage(playerid, "Ne mozete sapnuti sami sebi.");
		if(AdminDuty[id]) return SendErrorMessage(playerid, "Ne mozes da sapnes AFG-u ili Helperu na duty.");
		for(new b = 0; b < sizeof(ZabranjeneReci); b++) {
			if(strfind(result, ZabranjeneReci[b], true) != -1) {
				new varstring[144];
				format(varstring, sizeof(varstring), "[WHISPER-CHAT]%s[%d]: %s", ImeIgraca(playerid), playerid, result);
				AdminPoruka(0x808000AA, varstring);
				return 1;
			}
		}
		if(Maskuse[playerid] == true) {
			format(string, sizeof(string), "Maska_%d sapuce %s", PlayerInfo[playerid][xMaskID], result);
			SCM(playerid,  SVETLOCRVENA, string);
			SCM(id, SVETLOCRVENA, string);
			format(string, sizeof(string), "* Maska_%d sapuce nesto.", PlayerInfo[playerid][xMaskID]);
			PorukaRadius(5.0, playerid, string, LJUBICASTA);
		}
		else {
			format(string, sizeof(string), "%s sapuce %s", ImeIgraca(playerid), result);
			SCM(playerid,  SVETLOCRVENA, string);
			SCM(id, SVETLOCRVENA, string);
			format(string, sizeof(string), "* %s sapuce nesto.", ImeIgraca(playerid));
			PorukaRadius(5.0, playerid, string, LJUBICASTA);
		}
		format(string, sizeof(string), "|W|%s -> %s: %s", ImeIgraca(playerid), ImeIgraca(id), result);
		AdminWisper(0xFFE4C4AA, string);
		new string1[128];
		format(string1, sizeof(string1), "Igrac %s: %s", ImeIgraca(playerid), result);
		LogSave("Ostalo/LogWChat.log", string1);
		return 1;
	}
	else return SendErrorMessage(playerid, "Previse ste udaljeni od tog igraca!");}
return 1;}

CMD:changename(playerid, params[]) {
new novoime[32], newname[40];
new year, month, day;

if(sscanf(params, "s[32]", novoime)) return SendUsageMessage(playerid, "/changename [Ime_Prezime]");
format(newname, sizeof(newname), "Korisnici/%s.ini", novoime);

if(GetPVarInt(playerid, "PlayerCanChangeName") != 1) return SendErrorMessage(playerid, "Nemate dopustenje od vlasnika da promenite ime.");
if(!IsValidRoleplayName(novoime)) return SendErrorMessage(playerid, "Nepravilan RolePlay format imena.");
if(fexist(newname)) return SendErrorMessage(playerid, "To ime je zauzeto!");

new varstring[128];
SetPVarInt(playerid, "PlayerCanChangeName", 0);
getdate(year, month, day);
format(varstring, sizeof(varstring), "*** RENAME: %s je promenio ime u %s (%d-%d-%d)", ImeIgraca(playerid), novoime, month, day, year);
printf("%s",  varstring);
format(varstring, sizeof(varstring), "RENAME: %s je promenio ime u %s.", ImeIgraca(playerid), novoime);
AdminPoruka(CRVENA, varstring);

RenamePlayer(ImeIgraca(playerid), novoime, playerid);
SavePlayer(playerid);

SendInfoMessage(playerid, "Uspesno si promenio ime!");
format(varstring, sizeof(varstring), "Prijavite se ponovno sa imenom: %s", novoime);
Kickovanje(playerid, varstring);
return 1;}

CMD:specijalnoime(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] >= 7)
{
	if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if(!AdminDuty[playerid]) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");

	new id, novoime[32], newname[40];

	if(sscanf(params, "us[32]", id, novoime)) return SendUsageMessage(playerid, "/specijalnoime [ID] [Ime_Prezime]");
	format(newname, sizeof(newname), "Korisnici/%s.ini", novoime);
	if(id == IPI) return SendErrorMessage(playerid, "Pogresan ID.");
	if(fexist(newname)) return SendErrorMessage(playerid, "Novo ime vec postoji u bazi podataka!");
	SavePlayer(id);
	new varstring[256];
	format(varstring, sizeof(varstring), "{36AB00][DONACIJA]: "col_white"Igracu {36AB00]%s"col_white" je postavljeno novo ime: {36AB00]%s"col_white".", ImeIgraca(id), novoime);
	SCMA(-1, varstring);
	RenamePlayer(ImeIgraca(id), novoime, id);
	SendInfoMessage(id, "Admin %s vam je promenio ime u %s.", ImeIgraca(playerid), ImeIgraca(id));
	format(varstring, sizeof(varstring), "RENAME | Prijavite se ponovno sa imenom: %s", novoime);
	Kickovanje(id, varstring);}
else
{
	SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");}
return 1;}

CMD:resetplayerpassword(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
if(!AdminDuty[playerid] && PlayerInfo[playerid] [xAdmin] < 6) return SendErrorMessage(playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti");
new imeigraca[24], novalozinka[40], ifile[64];
if(sscanf(params, "s[24]", imeigraca)) return SendUsageMessage(playerid, "/resetplayerpassword [Ime_Prezime]");

new randombroj = 100000 + random(899999);

format(novalozinka, sizeof(novalozinka), "%d", randombroj);

format(ifile, sizeof(ifile), I_FILE, imeigraca);
if(!fexist(ifile)) return SendErrorMessage(playerid, "Taj igrac ne postoji u bazi podataka!");

INI_ParseFile(ifile, "ShowOffStats");

new INI:File = INI_Open(ifile);
INI_SetTag(File, "Informacije");
INI_WriteString(File, "Lozinka", novalozinka);
INI_Close(File);
new varstring[256];
format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| "col_white"Igracu %s je postavljena nova lozinka koja glasi: "col_server"%s"col_white".", imeigraca, novalozinka);
SCM(playerid, -1, varstring);
format(varstring, sizeof(varstring), "| "col_server"x"col_white"Game"col_server"Warden "col_acheat"| "col_white"Igracu %s lozinku poslati na email: "col_server"%s"col_white".", imeigraca, OfflineCheck[eMail]);
SCM(playerid, -1, varstring);

return true;}

CMD:promenilozinku(playerid, params[]) {
SPD(playerid, dialog_CHANGEPASSWORD, DSI, D_NASLOV, ""col_white"U dijalogu ispod upisite Vasu novu zeljenu lozinku.\nLozinka treba da sadrzi najmanje 6 a najvise 20 znakova.\n\n"col_crvena"Fusion Gaming Staff ne odgovara za Vasu lozinku. Ukoliko je zaboravite\npostavite zahtev na forumu za vracanje.", D_ODABERI, D_ODUSTANI);
return 1;}

CMD:promenispawn(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] >= 1 || PlayerInfo[playerid][xHelper] >= 1) {
	SPD(playerid, dialog_SPAWNCHANGE, DSL, D_NASLOV, "Uobicajni spawn\nOrganizacijski spawn\nSpawn Imovina 1\nSpawn Imovina 2\nSpawn Imovina 3\nHotelska soba\nIznajmljena soba\nAdmin baza\nHelper baza", D_ODABERI, D_ODUSTANI);}
else {
	SPD(playerid, dialog_SPAWNCHANGE, DSL, D_NASLOV, "Uobicajni spawn\nOrganizacijski spawn\nSpawn Imovina 1\nSpawn Imovina 2\nSpawn Imovina 3\nHotelska soba\nIznajmljena soba", D_ODABERI, D_ODUSTANI);}
return 1;}

CMD:listavozila(playerid, params[]) {

if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");

new model;
if(sscanf(params, "i", model)) return SendUsageMessage(playerid, "/listavozila [Model vozila]");

new string[128];
new DialogStrgEx[545];

for(new i = 1; i < MAX_CARS; i++) {

	if(VehicleInfo[i][vUsage] == PRIVATNO_VOZILO && VehicleInfo[i][vModel] == model) {

		format(string, sizeof(string), ""col_white"Vozilo ID - [%d]\n", i);
		strcat(DialogStrgEx, string);
	}
}

if(strlen(DialogStrgEx) == 0) return SendErrorMessage(playerid, "Nema nijednog vozila tog modela.");

SPD(playerid, dialog_EMPTY, DSMSG, ""col_server"LISTA VOZILA", DialogStrgEx, "Ok", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));

return true;}

CMD:vozilazaaukciju(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");

new string[128];
new DialogStrgEx[545];

for(new i = 1; i < MAX_CARS; i++) {
	if(VehicleInfo[i][vUsage] == PRIVATNO_VOZILO && VehicleInfo[i][vOwned] == 0 && VehicleInfo[i][vPrice] == -1) {

		format(string, sizeof(string), ""col_white"Vozilo %s - [%d]\n", GetVehicleNameEx(VehicleInfo[i][vModel]), i);
		strcat(DialogStrgEx, string);
	}
}

if(strlen(DialogStrgEx) == 0) return SendErrorMessage(playerid, "Nema nijednog vozila za aukciju.");

SPD(playerid, dialog_EMPTY, DSMSG, ""col_server"VOZILA ZA AUKCIJU", DialogStrgEx, "Ok", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
return true;}

CMD:richlist(playerid, params[]) {
if(PlayerInfo[playerid][xAdmin] < 6) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");

new money, string[128];
if(sscanf(params, "d", money)) return SendUsageMessage(playerid, "/richlist [novac]");

new DialogStrgEx[745];

foreach(new i : Player) {
	if((PlayerInfo[i][xNovac]+PlayerInfo[i][xBRacun]) >= money) {
		format(string, sizeof(string), ""col_white"Ruke %d | Banka %d | %s [%d]\n", PlayerInfo[i][xNovac], PlayerInfo[i][xBRacun], ImeIgraca(i), i);
		strcat(DialogStrgEx, string);
	}
}

SPD(playerid, dialog_EMPTY, DSMSG, ""col_server"BOGATI IGRACI", DialogStrgEx, "Ok", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
return 1;}

CMD:pay(playerid, params[]) {
new giveplayerid,
	playermoney,
	moneys;

if(sscanf(params, "ud", giveplayerid, moneys)) return SendUsageMessage(playerid, "/pay [ID/Deo imena] [kolicina]");
if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti level 3 da bi poslali novac.");
if(PlayerInfo[playerid][xOnlineSati] < 5) return SendErrorMessage(playerid, "Morate imati najmanje 5 sati igre za ovu komandu.");
if(moneys > 50 && PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Morate biti level 3 da bi poslali preko 50.");
if(moneys < 1 || moneys > 50000) return SendErrorMessage(playerid, "Nemojte slati manje od 1, ili vise od 50000 odjednom.");
if(IsPlayerConnected(giveplayerid)) {
		if(giveplayerid != INVALID_PLAYER_ID) {
		if(IsPlayerNearPlayer(5.0, playerid, giveplayerid)) {
			playermoney = PlayerInfo[playerid][xNovac];
			if(moneys > 0 && playermoney >= moneys) {
				DajIgracuNovac(playerid, - moneys);
				DajIgracuNovac(giveplayerid, moneys);
				new varstring[128];
				format(varstring, sizeof(varstring), "Poslali ste %s(player: %d), $%d.", ImeIgraca(giveplayerid), giveplayerid, moneys);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SCM(playerid, SVETLOPLAVA, varstring);
				format(varstring, sizeof(varstring), "Primili ste $%d od %s(player: %d).", moneys, ImeIgraca(playerid), playerid);
				SCM(giveplayerid, SVETLOPLAVA, varstring);
				PlayAudioStreamForPlayer(giveplayerid, "http://k003.kiwi6.com/hotlink/vnv0vvgtuf/nagrade.mp3");
				//PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
				format(varstring, sizeof(varstring), "* %s vadi svoj novcanik i daje nesto novca %s.", ImeIgraca(playerid) ,ImeIgraca(giveplayerid));
				PorukaRadius(30.0, playerid, varstring, LJUBICASTA);

				new string[128];
				format(string, sizeof(string), "Igrac %s -> Igrac: %s | Novac: %d", ImeIgraca(playerid), ImeIgraca(giveplayerid), moneys);
				LogSave("Ostalo/LogPay.log", string);
			} else return SendErrorMessage(playerid, "Nepravilan iznos transakcije.");
		} else return SendErrorMessage(playerid, "Taj igrac nije dovoljno blizu vas.");
	}
} else return SendErrorMessage(playerid, "Taj igrac nije na serveru!");
return 1;}
CMD:do(playerid, params[]) {
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
new text[128], string[234];
if(sscanf(params, "s[128]", text)) return SendUsageMessage(playerid, "/do [Akcija]");

for(new b = 0; b < sizeof(ZabranjeneReci); b++) {
	if(strfind(text, ZabranjeneReci[b], true) != -1) {
		new varstring[144];
		format(varstring, sizeof(varstring), "[/DO]%s[%d]: %s", ImeIgraca(playerid), playerid, text);
		AdminPoruka(0x808000AA, varstring);
	}
}

if(Maskuse[playerid] == false)
	format(string, sizeof(string), "*** %s (( %s ))", text, ImeIgraca(playerid));
else
	format(string, sizeof(string), "*** %s (( Maska_%d ))", text, PlayerInfo[playerid][xMaskID]);
PorukaRadius(30.0, playerid, string, LJUBICASTA);
return true;}
CMD:b(playerid, params[], help) {
if(PlayerCuffed[playerid] >= 1) return SendErrorMessage(playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
new text[128], string[234];
if(sscanf(params, "s[128]", text)) return SendUsageMessage(playerid, "/b [local ooc chat]");

if(PlayerInfo[playerid][xAdmin] > 0 && AdminDuty[playerid]) {
	if(Maskuse[playerid] == false)
		format(string, sizeof(string), "{000000][OOC] %s{E6E6E6]: %s", ImeIgraca(playerid), text);
	else
		format(string, sizeof(string), "{000000][OOC] Maska_%d{E6E6E6]: %s", PlayerInfo[playerid][xMaskID], text);}
else if(PlayerInfo[playerid][xHelper] > 0 && AdminDuty[playerid]) {
	if(Maskuse[playerid] == false)
		format(string, sizeof(string), "{40FF00][OOC] %s{E6E6E6]: %s", ImeIgraca(playerid), text);
	else
		format(string, sizeof(string), "{40FF00][OOC] Maska_%d{E6E6E6]: %s", PlayerInfo[playerid][xMaskID], text);}
else {
	if(Maskuse[playerid] == false)
		format(string, sizeof(string), ""col_server"(( OOC )) "col_white"%s: %s", ImeIgraca(playerid), text);
	else
		format(string, sizeof(string), ""col_server"(( OOC )) "col_white"Maska_%d: %s", PlayerInfo[playerid][xMaskID], text);}

foreach(new i : Player) {
	if(IsPlayerNearPlayer(25.0, playerid, i)) {
		SCM(i, 0xFFFFFFFF, string);
	}
}

new string1[128];
format(string1, sizeof(string1), "Igrac %s: %s", ImeIgraca(playerid), text);
LogSave("Ostalo/LogBChat.log", string1);

for(new b = 0; b < sizeof(ZabranjeneReci); b++) {
	if(strfind(text, ZabranjeneReci[b], true) != -1) {
		new varstring[144];
		format(varstring, sizeof(varstring), "[OOC]%s[%d]: %s", ImeIgraca(playerid), playerid, text);
		AdminPoruka(0x808000AA, varstring);
		return 1;
	}
}
return true;}

CMD:maskon(playerid, params[]) {

if(!Inventory_HasItem(playerid, "Maska"))
	return SendErrorMessage(playerid, "Nemate masku u inventoriju.");

if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Moras biti najmanje level 3.");
if(Maskuse[playerid] != false) return SendErrorMessage(playerid, "Vec imas masku na glavi!");

strmid(RealName[playerid], ImeIgraca(playerid), 0, strlen(ImeIgraca(playerid)), 64);
new bre[MAX_PLAYER_NAME];
format(bre, sizeof(bre), "Maska_%d", PlayerInfo[playerid][xMaskID]);
SetPlayerName(playerid, bre);

SetPlayerAttachedObject(playerid, OBJECT_SLOT_MASK, 19036, 2, 0.099999,0.028999,-0.004999,91.199935,87.199958,0.399999,1.000000,1.000000,1.000000);

Maskuse[playerid] = true;
new varstring[60];
SendInfoMessage(playerid,"Stavili ste masku na glavu [/maskoff da je skinete]. ");
format(varstring, sizeof(varstring), "* %s stavlja masku na glavu.", ImeIgraca(playerid));
PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
return true;}

CMD:maskoff(playerid, params[]) {

	if(!Inventory_HasItem(playerid, "Maska"))
	return SendErrorMessage(playerid, "Nemate masku.");

	if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Moras biti najmanje level 3.");
if(Maskuse[playerid] != true) return SendErrorMessage(playerid, "Nemas masku na glavi!");

SetPlayerName(playerid, RealName[playerid]);
Maskuse[playerid] = false;
RemovePlayerAttachedObject(playerid, OBJECT_SLOT_MASK);
SendClientMessage(playerid, BELA, "Skinuli ste masku [/maskon da je vratite na glavu]. ");
new varstring[60];
format(varstring, sizeof(varstring), "* %s skida masku sa glave.", ImeIgraca(playerid));
PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
return true;}

CMD:number(playerid, params[]) {
new ID;
if(sscanf(params, "u", ID)) return SendUsageMessage(playerid, "/number [ID/Deo Imena]");
if(IsPlayerConnected(ID)) {
	if(ID != INVALID_PLAYER_ID) {
		new varstring[50];
		format(varstring, sizeof(varstring), "Ime: %s, Broj: %d", ImeIgraca(ID), PlayerInfo[ID][xBrojTelefona]);
		SendClientMessage(playerid, -1, varstring);
	}
}
else return SendErrorMessage(playerid, "Nema takvog igraca!");
return 1;}

CMD:govornica(playerid, params[]) {
if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) return SendErrorMessage(playerid, "Vec imas objekt u ruci ne mozes zvati ili javiti se.");
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
new phonenumb, igrac;
if(sscanf(params, "i", phonenumb)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/govornica [phonenumber]");
	SCM(playerid, BELA, "Hitna linija : 911");
	SCM(playerid, BELA, "Mehanicarska sluzba : 555");
	SCM(playerid, BELA, "Taksi sluzba : 777");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(GetNearestGovornica(playerid) == -1) return SendErrorMessage(playerid, "Niste kod govornice.");
if(PlayerInfo[playerid][xZatvor] == OBICAN_ZATVOR || PlayerInfo[playerid][xZatvor] == ALKATRAZ) {
	SendErrorMessage(playerid, "Ne mozete telefonirati dok ste u zatvoru.");
	return 1;}
if(phonenumb == 911) {
	SCM(playerid, BELA, "HINT: Sada mozete koristit T da bi ste razgovarali na telefon, ukucajte '(/h)angup' da bi ste prekinuli poziv");
	SCM(playerid, 0xFF8282AA, "HITNA LINIJA: Koju sluzbu trebate, Policiju ili Hitnu Pomoc? (Upisite Police ili Paramedic)");
	SetPVarInt(playerid, "Mobile", 911);
	return 1;}
if(phonenumb == 555) {
	SCM(playerid, BELA, "HINT: Sada mozete koristit T da bi ste razgovarali na telefon, ukucajte '(/h)angup' da bi ste prekinuli poziv");
	SCM(playerid, 0xAFAFAFAA, "Tajnica: Spajam vas sa mehanicarskom sluzbom.");
	SCM(playerid, 0x2641FEAA, "Tajnica: Molimo Vas recite nam svoju lokaciju.");
	SetPVarInt(playerid, "Mobile", 555);
	return 1;}
if(phonenumb == 777) {
	if(PlayerInfo[playerid][xLevel] <= 2) SendErrorMessage(playerid, "Ne mozes zvati taksi ako si novajlija.");
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete zvati iz vozila!");
		foreach(new i : Player)
	{
		if(GetFactionType(i) == ORG_TIP_TAXI && taxiDuty[i] == true)
		SendClientMessageEx(i, -1, "%s (ID: %d) {FBE600]je potreban taxista, lokacija igraca:"col_white" %s {FBE600]('/taxi uzmiklijenta' da preuzmes klijenta)", ImeIgraca(playerid), playerid, GetPlayerLocation(playerid));
	}
	PozvaoTaxi[playerid] = true;
	SCM(playerid, ZUTA, "Uspesno ste pozvali taxistu, pricekajte na mjestu gdje se trenutno nalazite!");
	return 1;}
if(phonenumb == PlayerInfo[playerid][xBrojTelefona]) {
	SCM(playerid, CRVENA, " Zauzeto...");
	return 1;}
if(GetPVarInt(playerid, "Mobile") != -1) {
	SendErrorMessage(playerid, "Vec ste u razgovoru...");
	return 1;}
new varstring[60];
format(varstring, sizeof(varstring), "* %s vadi mobilni telefon.", ImeIgraca(playerid));
SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
	foreach(new i : Player)
{
	if(IsPlayerConnected(i)) {
		if(PlayerInfo[i][xBrojTelefona] == phonenumb && phonenumb != 0) {
			igrac = i;
			SetPVarInt(playerid, "Mobile", igrac);
			if(IsPlayerConnected(igrac)) {
				if(igrac != INVALID_PLAYER_ID) {
					if(PlayerInfo[playerid][xSTelefon] == 0) {
						SendErrorMessage(playerid, "Korisnik je ugasio telefon.");
						return 1;
					}
					if(PlayerInfo[igrac][xZatvor] == OBICAN_ZATVOR || PlayerInfo[igrac][xZatvor] == ALKATRAZ) {
						SendErrorMessage(playerid, "Osoba je pritvorena i ne moze vam se javiti.");
						return 1;
					}
					if(GetPVarInt(igrac, "Mobile") == -1) {
						SendClientMessageEx(igrac, ZUTA, "Vas mobilni zvoni ukucajte '(/p)ickup' Pozivatelj: Govornica");
						format(varstring, sizeof(varstring), "* %s zvoni mobilni.", ImeIgraca(igrac));
						SCM(playerid, BELA, "HINT: Na mobilni sada pricate sa T, ukucajte '(/h)angup' da bi ste prekinuli razgovor.");
						PorukaRadius(30.0, i, varstring, LJUBICASTA);
						SetPVarInt(playerid, "CellTime",  1);
						//PlayAudioStreamForPlayer(igrac, "http://k003.kiwi6.com/hotlink/t18ow4vx2z/mobilni.mp3");
						return 1;
					}
				}
			}
		}
	}
}
SCM(playerid, CRVENA, "  Zauzeto...");
return 1;}

CMD:call(playerid, params[]) {
if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) return SendErrorMessage(playerid, "Vec imas objekt u ruci ne mozes zvati ili javiti se.");
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
if(PlayerInfo[playerid][xSTelefon] == 0) return SendErrorMessage(playerid, "Iskljucen Vam je telefon.");
new phonenumb, igrac, varstring[60];
if(sscanf(params, "i", phonenumb)) {
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	SendUsageMessage(playerid, "/call [phone number]");
	SCM(playerid, BELA, "Hitna linija : 911");
	SCM(playerid, BELA, "Mehanicarska sluzba : 555");
	SCM(playerid, BELA, "Taksi sluzba : 777");
	SCM(playerid, SVETLOPLAVA, "___________________________________________________________________");
	return 1;}
if(PlayerInfo[playerid][xBrojTelefona] == 0) {
	SendErrorMessage(playerid, "Nemate karticu za telefon.");
	return 1;}
if(PlayerInfo[playerid][xTelefonBon] < 1) {
	SendErrorMessage(playerid, "Preostala svota na racunu nije dovoljna za uspostavu poziva!");
	return 1;}
if(PlayerInfo[playerid][xZatvor] == OBICAN_ZATVOR || PlayerInfo[playerid][xZatvor] == ALKATRAZ) {
	SendErrorMessage(playerid, "Ne mozete telefonirati dok ste u zatvoru.");
	return 1;}
if(phonenumb == 911) {
	SCM(playerid, BELA, "HINT: Sada mozete koristit T da bi ste razgovarali na telefon, ukucajte '(/h)angup' da bi ste prekinuli poziv");
	SCM(playerid, 0xFF8282AA, "HITNA LINIJA: Koju sluzbu trebate, Policiju ili Hitnu Pomoc? (Upisite Police ili Paramedic)");
	SetPVarInt(playerid, "Mobile", 911);
	return 1;}
if(phonenumb == 555) {
	SCM(playerid, BELA, "HINT: Sada mozete koristit T da bi ste razgovarali na telefon, ukucajte '(/h)angup' da bi ste prekinuli poziv");
	SCM(playerid, 0xAFAFAFAA, "Tajnica: Spajam vas sa mehanicarskom sluzbom.");
	SCM(playerid, 0x2641FEAA, "Tajnica: Molimo Vas recite nam svoju lokaciju.");
	SetPVarInt(playerid, "Mobile", 555);
	return 1;}
if(phonenumb == 777) {
	if(PlayerInfo[playerid][xLevel] <= 2) SendErrorMessage(playerid, "Ne mozes zvati taksi ako si novajlija.");
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete zvati iz vozila!");
		foreach(new i : Player)
	{
		if(GetFactionType(i) == ORG_TIP_TAXI && taxiDuty[i] == true)
		SendClientMessageEx(i, -1, "%s (ID: %d) {FBE600]je potreban taxista, lokacija igraca:"col_white" %s {FBE600]('/taxi uzmiklijenta' da preuzmes klijenta)", ImeIgraca(playerid), playerid, GetPlayerLocation(playerid));
	}
	PozvaoTaxi[playerid] = true;
	SCM(playerid, ZUTA, "Uspesno ste pozvali taxistu, pricekajte na mjestu gdje se trenutno nalazite!");
	return 1;}
if(phonenumb == PlayerInfo[playerid][xBrojTelefona]) {
	SCM(playerid, CRVENA, " Zauzeto...");
	return 1;}
if(GetPVarInt(playerid, "Mobile") != -1) {
	SendErrorMessage(playerid, "Vec ste u razgovoru...");
	return 1;}
format(varstring, sizeof(varstring), "* %s vadi mobilni telefon.", ImeIgraca(playerid));
SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, PlayerInfo[playerid][xModelTelefona], 6, 0.101469, 0.000639, -0.008395, 73.051651, 171.894165, 0.000000, 1.000000, 1.000000, 1.000000);
PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
	foreach(new i : Player)
{
	if(IsPlayerConnected(i)) {
		if(PlayerInfo[i][xBrojTelefona] == phonenumb && phonenumb != 0) {
			igrac = i;
			SetPVarInt(playerid, "Mobile", igrac);
			if(IsPlayerConnected(igrac)) {
				if(igrac != INVALID_PLAYER_ID) {
					if(PlayerInfo[playerid][xSTelefon] == 0) {
						SendErrorMessage(playerid, "Korisnik je ugasio telefon.");
						return 1;
					}
					if(PlayerInfo[igrac][xZatvor] == OBICAN_ZATVOR || PlayerInfo[igrac][xZatvor] == ALKATRAZ) {
						SendErrorMessage(playerid, "Osoba je pritvorena i ne moze vam se javiti.");
						return 1;
					}
					if(GetPVarInt(igrac, "Mobile") == -1) {
						SendClientMessageEx(igrac, ZUTA, "Vas mobilni zvoni ukucajte '(/p)ickup' Pozivatelj: %s", ImeIgraca(playerid));
						format(varstring, sizeof(varstring), "* %s zvoni mobilni.", ImeIgraca(igrac));
						SCM(playerid, BELA, "HINT: Na mobilni sada pricate sa T, ukucajte '(/h)angup' da bi ste prekinuli razgovor.");
						PorukaRadius(30.0, i, varstring, LJUBICASTA);
						SetPVarInt(playerid, "CellTime",  1);
						//PlayAudioStreamForPlayer(igrac, "http://k003.kiwi6.com/hotlink/t18ow4vx2z/mobilni.mp3");
						return 1;
					}
				}
			}
		}
	}
}
SCM(playerid, CRVENA, "  Zauzeto...");
return 1;}

CMD:pickup(playerid, params[]) {
if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_RHAND)) return SendErrorMessage(playerid, "Vec imas objekat u ruci, ne mozes zvati ili javiti se.");
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
if(PlayerInfo[playerid][xZatvor] >= 1) return SendErrorMessage(playerid, "Ne mozete se javiti dok ste u zatvoru / ALKATRAZ.");
if(GetPVarInt(playerid, "Mobile") == -1) {
	if(IsPlayerAttachedObjectSlotUsed(playerid,OBJECT_SLOT_RHAND)) {
		SCM(playerid, CRVENA, "Vec imate neki objekt u desnoj ruci,Ne mozete izvaditi mobilni telefon!");
		return 1;
	}
	foreach(new i : Player) {
		if(PlayerLogged[i] == true) {
			if(GetPVarInt(i, "Mobile") == playerid) {
				SetPVarInt(playerid, "Mobile", i);
				SCM(i,  BELA, "   Javio se.");
				new varstring[66];
				format(varstring, sizeof(varstring), "* %s se javlja na mobilni telefon.", ImeIgraca(playerid));
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
				SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, PlayerInfo[playerid][xModelTelefona], 6, 0.101469, 0.000639, -0.008395, 73.051651, 171.894165, 0.000000, 1.000000, 1.000000, 1.000000);
				PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
				StopAudioStreamForPlayer(playerid);
			}
		}
	}
}
else return SCM(playerid, CRVENA, "Vec ste u razgovoru!");
return 1;}

CMD:h(playerid, params[]) {

new caller = GetPVarInt(playerid, "Mobile");
SetPVarInt(playerid, "CellTime", 0);
SCM(playerid,  0xAFAFAFAA, "Mobilni telefon vam je dzepu.");
SCM(playerid, CRVENA, "AKO VAM NIJE UGASENA ANIMACIJE 'ENTER'");
RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
SetPVarInt(playerid, "Mobile", -1);

if(caller < 501 && caller >= 0) {

	if(caller != INVALID_PLAYER_ID) {

		if(PlayerLogged[caller] == true) {

			SCM(caller,  0xAFAFAFAA, "Prekinuo je.");
			SetPVarInt(caller, "CellTime", 0);
			SetPVarInt(playerid, "CellTime",  0);
			SCM(playerid,  0xAFAFAFAA, "Prekinuli ste poziv.");
			SetPVarInt(caller, "Mobile", -1);
			SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(caller, OBJECT_SLOT_RHAND);
		}
	}
}
return true;}

CMD:sms(playerid, params[]) {
if(PlayerInfo[playerid][xMute] != 0) return SendErrorMessage(playerid, "Ne mozete pricati, mutirani ste.");
if(PlayerInfo[playerid][xSTelefon] == 0) return SendErrorMessage(playerid, "Iskljucen Vam je telefon.");
new phonenumb, result[128], string[234], igrac;
if(sscanf(params, "is[128]", phonenumb, result)) {
	SendUsageMessage(playerid, "/sms [broj telefona] [poruka]");
	return 1;}
if(PlayerInfo[playerid][xBrojTelefona] == 0) {
	SendErrorMessage(playerid, "Nemate mobilni telefon...");
	return 1;}
if(PlayerInfo[playerid][xTelefonBon] < 1) {
	SendErrorMessage(playerid, "Preostala svota na racunu nije dovoljna da posaljete SMS!");
	return 1;}
if(PlayerInfo[playerid][xZatvor] == OBICAN_ZATVOR || PlayerInfo[playerid][xZatvor] == ALKATRAZ) {
	SendErrorMessage(playerid, "Ne mozete slati poruke dok ste u zatvoru.");
	return 1;}

foreach(new i : Player) {
	if(IsPlayerConnected(i)) {
		if(PlayerInfo[i][xBrojTelefona] == phonenumb && phonenumb != 0) {
			igrac = i;
			if(IsPlayerConnected(igrac)) {
				if(igrac != INVALID_PLAYER_ID) {
					if(PlayerInfo[playerid][xSTelefon] == 0) {
						SendErrorMessage(playerid, "Korisnik je ugasio telefon.");
						return 1;
					}
					if(PlayerInfo[igrac][xZatvor] >= 1) return SendErrorMessage(playerid, "Ne mozete igracu slati sms dok je u zatvoru / ALKATRAZ.");
					format(string, sizeof(string), "{E6E6E6]Dobili ste SMS | Posiljalac: "col_white"%s {E6E6E6]| Broj Telefona: "col_white"%d", RPImeIgraca(playerid), PlayerInfo[playerid][xBrojTelefona]);
					SCM(igrac, ZUTA, string);
					//PlayAudioStreamForPlayer(igrac, "http://k003.kiwi6.com/hotlink/zn93tveoc6/sms.mp3");
					format(string, sizeof(string), "{E6E6E6]SMS: "col_white"%s", result);
					SCM(igrac, ZUTA, string);
					SCM(playerid, BELA, "Poruka poslana.");
					format(string, sizeof(string), "SMS | %s(ID:%d) salje -> %s(ID:%d)| %s", ImeIgraca(playerid), playerid, ImeIgraca(igrac), igrac, result);
					AdminSMS(ZUTA, string);
					format(string, sizeof(string), "~r~$-%d", smscost);
					GameTextForPlayer(playerid, string, 5000, 1);
					PlayerInfo[playerid][xTelefonBon] -= smscost;
					BusinessTelekomMoney(smscost, playerid);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerPlaySound(igrac, 1052, 0.0, 0.0, 0.0);

					format(string, sizeof(string), "* %s salje poruku.", RPImeIgraca(playerid));
					PorukaRadius(20.0, playerid, string, LJUBICASTA);
					return 1;
				}
			}
		}
	}
}
SCM(playerid, 0xAFAFAFAA, "  Slanje poruke neuspelo...");
return 1;}
CMD:time(playerid, params[]) {

if(PlayerInfo[playerid][xSat] != 0) {

	new mtext[20],year,month,day,varstring[156];
	getdate(year,month,day);

	switch(month) {
		case 1: mtext = "Januar";
		case 2: mtext = "Februar";
		case 3: mtext = "Mart"; 
		case 4: mtext = "April"; 
		case 5: mtext = "Maj"; 
		case 6: mtext = "Jun"; 
		case 7: mtext = "Jul"; 
		case 8: mtext = "Avgust"; 
		case 9: mtext = "Septembar"; 
		case 10: mtext = "Oktobar"; 
		case 11: mtext = "Novembar"; 
		case 12: mtext = "Decembar"; 
		default: mtext = "Januar";
	}

	new hour,minuite,second;
	gettime(hour,minuite,second);
	FixHour(hour);
	hour = shifthour;

	if(minuite < 10)
	{
		if(PlayerInfo[playerid][xZatvor] > 0)
			format(varstring,sizeof(varstring),"~y~%d %s~n~~g~|~w~%d:0%d~g~|~n~~w~Vreme zatvora: %d min",day,mtext,hour,minuite,(PlayerInfo[playerid][xZatvorVreme]+1));
		else
			format(varstring,sizeof(varstring),"~y~%d %s~n~~g~|~w~%d:0%d~g~|",day,mtext,hour,minuite);
	}
	else
	{
		if(PlayerInfo[playerid][xZatvor] > 0)
			format(varstring,sizeof(varstring),"~y~%d %s~n~~g~|~w~%d:%d~g~|~n~~w~Vreme zatvora: %d min",day,mtext,hour,minuite,(PlayerInfo[playerid][xZatvorVreme]+1));
		else
			format(varstring,sizeof(varstring),"~y~%d %s~n~~g~|~w~%d:%d~g~|",day,mtext,hour,minuite);
	}
	GameTextForPlayer(playerid, varstring, 5000, 1);
	format(varstring, sizeof(varstring), "* %s gleda na sat marke %s.", ImeIgraca(playerid), GetNameByWatchID(playerid));
	PorukaRadius(30.0, playerid, varstring, LJUBICASTA);
	ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.1,0,0,0,0,0, 1);}
else return SendErrorMessage(playerid, "Nemate sat. Kupite ga u zlatari.");
return (1);}

CMD:warnapusti(playerid, params[]) {
if(WARPInfo[playerid][WARIgrac] == -1) return SendErrorMessage(playerid, "Nisi usao na WAR.");
new w = WARPInfo[playerid][WARIgrac], varstring[128];
if(WARInfo[w][WARAktivan] == false) return SendErrorMessage(playerid, "War nije jos startovan.");

Fusion_SetPlayerHealth(playerid, 100);
Fusion_SetPlayerArmour(playerid, 0);

ac_SetPlayerPos(playerid, PozicijaWAR[playerid][0], PozicijaWAR[playerid][1],  PozicijaWAR[playerid][2]);
SetPlayerVirtualWorld(playerid, VirtualWWAR[playerid]);
ac_SetPlayerInterior(playerid, InteriorWAR[playerid]);

antiCheatCS[playerid][WeaponDetect] = 3;
ResetAllWeapons(playerid);

WARPInfo[playerid][WARIgrac] = -1;

ResetujWarIgraca(playerid);

if(WARPInfo[playerid][WARTim][0] == true) {
	format(varstring, sizeof(varstring), ""col_orange"WAR | {F81414]%s: "col_white"je napustio WAR.", ImeIgraca(playerid));
	WARPoruka(w, 0xFF9900AA, varstring);
	WARInfo[w][WARTimClanovi][0]--;}
if(WARPInfo[playerid][WARTim][1] == true) {
	format(varstring, sizeof(varstring), ""col_orange"WAR | {0049FF]%s: "col_white"je napustio WAR.", ImeIgraca(playerid));
	WARPoruka(w, 0xFF9900AA, varstring);
	WARInfo[w][WARTimClanovi][1]--;}

SCM(playerid, -1, "Izasli ste iz wara.");

WarTDControl(playerid, false);
return 1;}

CMD:wp(playerid, params[]) {
new text[180], string[240];
if(WARPInfo[playerid][WARIgrac] == -1) return SendErrorMessage(playerid, "Nisi usao na WAR.");
	if(sscanf(params, "s[180]", text)) return SendUsageMessage(playerid, "/wp [text]");
if(WARPInfo[playerid][WARTim][0] == true) {
	format(string, sizeof(string), ""col_orange"WAR | {F81414]%s: "col_white"%s", ImeIgraca(playerid), text);}
if(WARPInfo[playerid][WARTim][1] == true) {
	format(string, sizeof(string), ""col_orange"WAR | {0049FF]%s: "col_white"%s", ImeIgraca(playerid), text);}
WARPoruka(WARPInfo[playerid][WARIgrac], 0xFF9900AA, string);
return 1;}

FUNCTION: KrajGlasanja(playerid)
{
new string[128];
format(string,sizeof(string),""col_green"[GLASANJE]: Da ("col_white"%d"col_green")"col_white", "col_crvena"Ne ("col_white"%d"col_crvena")",voteyes,voteno);
SCMA(-1,string);
voteno = 0;
voteyes = 0;
votation = 0;
foreach(new i : Player){
	votedrecently[i] = 0;}
return 1;}

CMD:glasanje(playerid, params[], help)
{
new rezultat[128];
new stringcina[128];
if(sscanf(params,"s[128]",rezultat)) return SendUsageMessage(playerid, "/glasanje [pitanje]");
if(PlayerInfo[playerid][xAdmin] <= 3) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu.");
votetimer = SetTimer("KrajGlasanja",60000,false);
format(stringcina,sizeof(stringcina),""col_green"[GLASANJE]: %s?"col_white" | Glasajte sa /da ili /ne.", rezultat);
SCMA(-1,stringcina);
votation = 1;
return 1;}

CMD:da(playerid, params[], help)
{
new votestr[128];
if(votation == 1){
	if(votedrecently[playerid] == 0){
		voteyes ++;
		votedrecently[playerid] = 1;
		SendInfoMessage(playerid, "Glasali ste za.");
		format(votestr,sizeof(votestr),""col_green"[GLASANJE]: {FFFFFF](%s) Da %d - Ne %d",ImeIgraca(playerid),voteyes,voteno);
		SCMA(-1,votestr);
	}
	else{
		SendErrorMessage(playerid,"Vec ste iskoristili pravo glasa.");
			return true;
	}
}
else{
	SendErrorMessage(playerid,"Trenutno nije postavljeno nijedno glasanje.");
	return true;}
return true;}
CMD:ne(playerid, params[], help)
{
new votestr[128];
if(votedrecently[playerid] == 0){
	if(votation == 1){
		voteno ++;
		votedrecently[playerid] = 1;
		SendInfoMessage(playerid, "Glasali ste protiv.");
		format(votestr,sizeof(votestr),""col_green"[GLASANJE]: {FFFFFF](%s) Da %d - Ne %d",ImeIgraca(playerid),voteyes,voteno);
		SCMA(-1,votestr);
	}
	else{
		SendErrorMessage(playerid,"Trenutno nije postavljeno nijedno glasanje.");
		return 1;
	}
}
else{
	SendErrorMessage(playerid,"Vec ste iskoristili pravo glasa.");
	return 1;}
return 1;}
CMD:prekiniglasanje(playerid, params[], help)
{
new str[128];
if(votation == 1){
	if(PlayerInfo[playerid][xAdmin] > 3){
		voteyes = 0;
		voteno = 0;
		votation = 0;
		foreach(new i : Player){
			if(IsPlayerConnected(i)){
				votedrecently[i] = 0;
			}
		}
		Fusion_KillTimer(votetimer);
		format(str,sizeof(str),""col_green"[GLASANJE]: {FFFFFF]Admin %s je prekinuo glasanje.",ImeIgraca(playerid));
		SCMA(-1,str);
	}
	else{
		SendErrorMessage(playerid,"Niste u mogucnosti koristiti ovu komandu.");
		return 1;
	}
}
else{
	SendErrorMessage(playerid,"Trenutno nije postavljeno nijedno glasanje.");
	return 1;}
return 1;}

// CELLPHONE IN
	CMD:cellin(playerid, params[]) {
		if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	return 1;}

// CELLPHONE OUT
	CMD:cellout(playerid, params[]) {
		if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	return 1;}

// Drunk
CMD:drunk(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
	return 1;}

// HANDSUP
	CMD:handsup(playerid, params[]) {
		if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	//SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	LoopingAnim(playerid, "ROB_BANK","SHP_HandsUp_Scr", 4.0, 0, 1, 1, 1, 0);
	return 1;}

// Place a Bomb
CMD:bomb(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	ClearAnimations(playerid);
	LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0); // Place Bomb
	return 1;}
// Police Arrest
CMD:getarrested(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1); // Gun Arrest
	return 1;}
// Laugh
CMD:laugh(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0); // Laugh
	return 1;}
// Rob Lookout
CMD:lookout(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); // Rob Lookout
	return 1;}
// Rob Threat
CMD:robman(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0); // Rob
	return 1;}
// Arms crossed
CMD:crossarms2(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1); // Arms crossed
	return 1;}
// Lay Down
CMD:lay(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0); // Lay down
	return 1;}
// Take Cover
CMD:hide(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0); // Taking Cover
	return 1;}
// Vomit
CMD:vomit(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0); // Vomit BAH!
	return 1;}
// Eat Burger
CMD:eat(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0); // Eat Burger
	return 1;}
// Wave
CMD:wave(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0); // Wave
	return 1;}
// Slap Ass
CMD:slapass(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
		OnePlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0); // Ass Slapping
		return 1;}
// Dealer
CMD:deal(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0); // Deal Drugs
	return 1;}
// Crack Dieing
CMD:crack(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0); // Dieing of Crack
	return 1;}
CMD:wall(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid, "ped","HIT_wall",4.1,0,1,1,1,1);
	return 1;}
CMD:smoke1(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;}
CMD:smoke2(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;}
CMD:smoke3(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"SMOKING","M_smkstnd_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;}
CMD:smoke4(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"SMOKING","M_smk_out", 4.0, 1, 0, 0, 0, 0);
	return 1;}

CMD:ghand1(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"GHANDS","gsign1",4.1,1,1,1,1,1);
	return 1;}
CMD:ghand2(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"GHANDS","gsign1LH",4.1,0,1,1,1,1);
	return 1;}
CMD:ghand3(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"GHANDS","gsign2",4.1,0,1,1,1,1);
	return 1;}
CMD:ghand4(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"GHANDS","gsign2LH",4.1,0,1,1,1,1);
	return 1;}
CMD:ghand5(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"GHANDS","gsign3",4.1,0,1,1,1,1);
	return 1;}
CMD:ghand6(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"GHANDS","gsign3LH",4.1,0,1,1,1,1);
	return 1;}
CMD:ghand7(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"GHANDS","gsign4",4.1,0,1,1,1,1);
	return 1;}
CMD:caranim(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"CAR","Tap_hand",4.1,0,1,1,1,1);
	return 1;}
CMD:no(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"PED","endchat_01",4.1,0,0,0,0,0);
	return 1;}
	CMD:crawl(playerid, params[]) {
		if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"PED","CAR_crawloutRHS",4.1,0,0,0,0,0);
	return 1;}
CMD:comeon(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"RYDER","RYD_Beckon_01",4.1,0,0,0,0,0);
	return 1;}
CMD:fuckit(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"RYDER","RYD_Beckon_03",4.1,0,0,0,0,0);
	return 1;}
CMD:gro(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;}
CMD:scared(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"FOOD","EAT_Vomit_SK", 4.1, 0, 1, 1, 1, 1);
	return 1;}
CMD:chat(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1);
	return 1;}
CMD:celebrate(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"Freeweights","gym_free_celebrate",4.1,1,1,1,1,1);
	return 1;}
CMD:fucku(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
	return 1;}
CMD:taichi(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
	return 1;}
CMD:fall(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0);
	return 1;}
CMD:fallback(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid, "PED","FLOOR_hit_f", 4.0, 1, 0, 0, 0, 0);
	return 1;}
CMD:kiss(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid, "KISSING", "Playa_Kiss_02", 3.0, 1, 1, 1, 1, 0);
	return 1;}

// Injujred
CMD:injured(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
	return 1;}

// Homie animations

CMD:sup1(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0);
	return 1;}
CMD:sup2(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
	return 1;}
CMD:sup3(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
	return 1;}

// Rap animations
CMD:rap1(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,0,0,0,0);
	return 1;}
CMD:rap2(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,0,0,0,0);
	return 1;}
CMD:rap3(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,0,0);
	return 1;}
CMD:rap4(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1);
	return 1;
	}

// Violence animations
CMD:push(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
	return 1;}

	CMD:akick(playerid, params[]) {
		if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
	return 1;}

// Spray
CMD:spray(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);
	return 1;}

// Medic
CMD:medic(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
	return 1;}

// KO Face
CMD:koface(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0);
	return 1;}

// KO Stomach
CMD:kostomach(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"PED","KO_shot_stom",4.0,0,1,1,1,0);
	return 1;}

// Exhausted
CMD:exhaust(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
	return 1;}

// Left big slap
CMD:leftslap(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
	return 1;}

CMD:hoodfrisked(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,0);
	return 1;}

// Lighting cigarette
CMD:lightcig(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"SMOKING","M_smk_in",3.0,0,0,0,0,0);
	return 1;}

// Tap cigarette
CMD:tapcig(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"SMOKING","M_smk_tap",3.0,0,0,0,0,0);
	return 1;}

// Boxing
CMD:box(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
	return 1;}

CMD:wankin(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"PAULNMAC", "wank_loop", 4.0, 0, 0, 0, 0, 0);
	return 1;}

// Lay 2
CMD:lay2(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"SUNBATHE","Lay_Bac_in",3.0,0,1,1,1,0);
	return 1;}

CMD:sit(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"MISC","SEAT_LR",4.1,0,0,0,1,1);
	return 1;}

// Cop stance
CMD:cop(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
	return 1;}
CMD:cop1(playerid, params[]) { // DOBRO
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"COP_AMBIENT","Coplook_think",50.0,0,1,1,1,1);
	return 1;}
CMD:cop2(playerid, params[]) { //DOBRO
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"COP_AMBIENT","Copbrowse_in",50.0,0,1,1,1,1);
	return 1;}
CMD:cop3(playerid, params[]) { //OK - zadnje
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"FINALE","FIN_Cop1_ClimbOut2",50.0,0,1,1,1,1);
	return 1;}
CMD:copstop(playerid, params[]) { //OK
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"COP_DVBYZ","COP_Dvby_FT",50.0,0,1,1,1,1);
	return 1;}
CMD:fall1(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"SWORD","Sword_Hit_3",50.0,0,1,1,1,1);
	return 1;}
CMD:police1(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"POLICE","CopTraf_Away",50.0,0,1,1,1,1);
	return 1;}
CMD:police2(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"POLICE","CopTraf_Come",50.0,0,1,1,1,1);
	return 1;}
CMD:police3(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"POLICE","CopTraf_Left",50.0,0,1,1,1,1);
	return 1;}
CMD:police4(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"POLICE","CopTraf_Stop",50.0,0,1,1,1,1);
	return 1;}
CMD:police5(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"POLICE","COP_getoutcar_LHS",50.0,0,1,1,1,1);
	return 1;}
CMD:police6(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"POLICE","Cop_move_FWD",50.0,0,1,1,1,1);
	return 1;}

CMD:police7(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"POLICE","crm_drgbst_01",50.0,0,1,1,1,1);
	return 1;}
CMD:police8(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"POLICE","Door_Kick",50.0,0,1,1,1,1);
	return 1;}
CMD:police9(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"POLICE","plc_drgbst_01",50.0,0,1,1,1,1);
	return 1;}
CMD:police10(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"POLICE","plc_drgbst_02",50.0,0,1,1,1,1);
	return 1;}
// Elbow
CMD:elbow(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
	return 1;}

// Fight stance
CMD:fstance(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"FIGHT_D","FightD_IDLE",4.0,1,1,1,1,0);
	return 1;}

// Low throw
CMD:lowthrow(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
	return 1;}

// Ground kick
CMD:highthrow(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"GRENADE","WEAPON_throw",4.0,0,0,0,0,0);
	return 1;}

// Deal stance
CMD:crossarms(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
	return 1;}

CMD:piss(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"PAULNMAC", "Piss_in", 3.0, 0, 0, 0, 0, 0);
	return 1;}

CMD:basket1(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"BSKTBALL","BBALL_idleloop",4.0,1,0,0,0,0);
	return 1;}
CMD:basket2(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
	return 1;}
CMD:basket3(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
	return 1;}
CMD:basket4(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
	return 1;}
CMD:basket5(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
	return 1;}
CMD:basket6(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
	return 1;}

CMD:gwalk1(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
	return 1;}
CMD:gwalk2(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
	return 1;}
CMD:fwalk(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
	return 1;}
CMD:walk(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
	return 1;}

CMD:aim1(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"PED","gang_gunstand",4.0,1,1,1,1,1);
	return 1;}
CMD:aim2(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"PED","Driveby_L",4.0,0,1,1,1,1);
	return 1;}
CMD:aim3(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"PED","Driveby_R",4.0,0,1,1,1,1);
	return 1;}

CMD:riot(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
		LoopingAnim(playerid,"RIOT","RIOT_shout",4.0,1,0,0,0,0);
	return 1;}
CMD:riot2(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0);
	return 1;}
CMD:riot3(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	OnePlayAnim(playerid,"RIOT","RIOT_FUKU",2.0,0,0,0,0,0);
	return 1;}

CMD:lean1(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"GANGS","leanIDLE",4.0,0,1,1,1,0);
	return 1;}
CMD:lean2(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"MISC","Plyrlean_loop",4.0,0,1,1,1,0);
	return 1;}

CMD:bat1(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
		LoopingAnim(playerid,"CRACK","Bbalbat_Idle_01",4.1,0,1,1,1,1);
		return 1;}
CMD:bat2(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	LoopingAnim(playerid,"CRACK","Bbalbat_Idle_02",4.1,0,1,1,1,1);
	return 1;}

// Clear
CMD:clearanim(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	//ClearAnimations(playerid);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0, 1);
	return 1;}

// Strip
CMD:stripa(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	//ClearAnimations(playerid);
	LoopingAnim(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1);
	return 1;}
CMD:stripb(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	//ClearAnimations(playerid);
	LoopingAnim(playerid,"STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1);
	return 1;}
CMD:stripc(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	//ClearAnimations(playerid);
	LoopingAnim(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1);
	return 1;}
CMD:stripd(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	//ClearAnimations(playerid);
	LoopingAnim(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1);
	return 1;}
CMD:stripe(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	//ClearAnimations(playerid);
	LoopingAnim(playerid,"STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1);
	return 1;}
CMD:stripf(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	//ClearAnimations(playerid);
	LoopingAnim(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1);
	return 1;}
CMD:stripg(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	//ClearAnimations(playerid);
	LoopingAnim(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1);
	return 1;}

// START DANCING
CMD:dance1(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	//ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
	return 1;}
CMD:dance2(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	//ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
	return 1;}
CMD:dance3(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	//ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
	return 1;}
CMD:dance4(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozete koristiti animacije dok ste u vozilu.");
	//ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
	return 1;}

CMD:skiniranac(playerid){
	if(PlayerInfo[playerid][xRanac] == 1) {
		if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_WINTERCAP)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_WINTERCAP);
	}
	return true;}

CMD:staviranac(playerid){
	if(PlayerInfo[playerid][xRanac] == 1) {
		if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_WINTERCAP)) RemovePlayerAttachedObject(playerid, OBJECT_SLOT_WINTERCAP);
		SetPlayerAttachedObject(playerid, OBJECT_SLOT_WINTERCAP, 3026, 1, -0.125, -0.046, -0.004, -1.299, -0.5, -6.297, 1.0, 1.0, 1.0);
	}
	return true;}

CMD:afkeri(playerid, params[]) {
	new string[128];
	SCM(playerid, FUSIONGAMING, "|---------------- AFKERI ----------------|");
	foreach(new i : Player) {
		if(IsPlayerConnected(i) && PlayerLogged[i] == true && IsPlayerPaused(i)) {
			format(string, sizeof(string), "%s - %s", ImeIgraca(i), KonvertujVreme(GetPlayerPausedTime(i)/1000));
			SCM(playerid, FUSIONGAMING, string);
		}
	}
	return true;}

CMD:plift(playerid, params[]) {
	if(PlayerInfo[playerid][xPosao] != POSAO_PPROZORA) return SendErrorMessage(playerid, "Niste zaposljeni kao perac prozora");
	if(UzeoOpremu[playerid] == true) {
		if(PLift1(playerid)) {
			SPD(playerid, dialog_PLifT1, DSL,"{00D900]Izaberite sprat:","Sprat 1\nSprat 2\nSpusti lift ","Odaberi","Odustani");
			return 1;
		}
		if(PLift2(playerid)) {
			SPD(playerid, dialog_PLifT2, DSL,"{00D900]Izaberite sprat:","Sprat 1\nSprat 2\nSpusti lift ","Odaberi","Odustani");
			return 1;
		}
		if(PLift3(playerid)) {
			SPD(playerid, dialog_PLifT3, DSL,"{00D900]Izaberite sprat:","Sprat 1\nSprat 2\nSpusti lift ","Odaberi","Odustani");
			return 1;
		}
		else {
		SendErrorMessage(playerid, "Niste kod posla perac prozora!");
		return 1;
		}
	}else return SendErrorMessage(playerid, "Morate imati opremu.");}

CMD:operiprozor(playerid, params[]) {
	if(PlayerInfo[playerid][xPosao] != POSAO_PPROZORA) return SendErrorMessage(playerid, "Niste zaposljeni kao perac prozora");
	if(PereProzorcinu[playerid] == true) return SendErrorMessage(playerid, "Vec perete prozore");
	if(AccountVerified[playerid] == false) return SendErrorMessage(playerid, "Prvo morate verifikovati svoj nalog(/vf).");

	AccountVerified[playerid] = false;
	
	if(UzeoOpremu[playerid] == true) {
			if(PranjeProzora(playerid)) {
				//SetPlayerFacingAngle(playerid, 270);
				TogglePlayerControllable(playerid, false);
			ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 1, 1, 1, 0);
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			SendJobMessage(playerid, "Krenuli ste da perete prozore, sacekajte 20 sekundi.");
			GameTextForPlayer(playerid, "~w~Perete prozor~n~sacekajte 20 sekundi", 20000, 4);
			PereProzorcinu[playerid] = true;
			PProzoraTimer[playerid] = SetTimerEx("OproProzore", 20000, false, "i", playerid);
		}
	}
	return 1;}

public Resetspawnvar(playerid)
{
spawnose[playerid] = 1;
ResetACVar(playerid);
return true;}

//==============================================================================

timer Set_To_Reg_Spawn[3000](playerid)
{
				ac_TogglePlayerSpectating(playerid, (false));

				Fusion_SetSpawnInfo(playerid);
				ac_SpawnPlayer(playerid);

				global_tds(playerid, true); // Pokazuje td

				fg_info_tds(playerid, false);

				update_fg_info_tds(playerid);
				return (true);}

// - Alternativne komande (nazivi)
alias:ubij("kill")
alias:settings("podesavanja")
alias:rb("roadblock")
alias:vipspawn("ytspawn")
alias:verifikacija("vf")
alias:new("novi")
alias:gotocar("gotoc")
alias:getcar("getc")
alias:clanovi("members")
alias:vozilo("v")
alias:pitaj("askq")
alias:refresh("osvezi")
alias:pickup("p")
alias:scp("server")
alias:vport("ytport")
alias:vipmenu("ytmenu")
alias:windows("prozor")
alias:inv("ranac")

// - xFG Script End
